// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Role.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Role.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Role {

namespace {

const ::google::protobuf::Descriptor* stBattleProp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stBattleProp_reflection_ = NULL;
const ::google::protobuf::Descriptor* stRoleMainData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRoleMainData_reflection_ = NULL;
const ::google::protobuf::Descriptor* stInitMainData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stInitMainData_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stInitMainData_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stInitMainData_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ReqCreateRole_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqCreateRole_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ReqCreateRole_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ReqCreateRole_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CreateRoleResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateRoleResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CreateRoleResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CreateRoleResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSynSnapData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSynSnapData_reflection_ = NULL;
const ::google::protobuf::Descriptor* RefreshSnapData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RefreshSnapData_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RefreshSnapData_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RefreshSnapData_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ReqEnterGame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqEnterGame_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ReqEnterGame_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ReqEnterGame_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSynGoldCoin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSynGoldCoin_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynGoldCoin_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynGoldCoin_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSynPointCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSynPointCard_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynPointCard_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynPointCard_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stBagPos_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stBagPos_reflection_ = NULL;
const ::google::protobuf::Descriptor* stItemSkillInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stItemSkillInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* stRaiseSkillProp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRaiseSkillProp_reflection_ = NULL;
const ::google::protobuf::Descriptor* stEnchantInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stEnchantInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* stSynItemInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSynItemInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* stNotifyAddItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stNotifyAddItem_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyAddItem_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyAddItem_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stDeleteItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stDeleteItem_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stDeleteItem_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stDeleteItem_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRefreshItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRefreshItem_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRefreshItem_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRefreshItem_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stInitAllItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stInitAllItem_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stInitAllItem_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stInitAllItem_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqOpenShop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqOpenShop_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqOpenShop_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqOpenShop_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stShopItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stShopItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* stRetShopItemList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRetShopItemList_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetShopItemList_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetShopItemList_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqBuyItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqBuyItem_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqBuyItem_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqBuyItem_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stBuyItemResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stBuyItemResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stBuyItemResult_BUYRESULT_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stBuyItemResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stBuyItemResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSynHeroSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSynHeroSkill_reflection_ = NULL;
const ::google::protobuf::Descriptor* stImpactHeroInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stImpactHeroInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* stSynHeroInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSynHeroInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* stInitAllHero_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stInitAllHero_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stInitAllHero_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stInitAllHero_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stNotifyAddHero_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stNotifyAddHero_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyAddHero_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyAddHero_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRefreshHero_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRefreshHero_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRefreshHero_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRefreshHero_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqHeroGoOutForBattle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqHeroGoOutForBattle_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqHeroGoOutForBattle_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqHeroGoOutForBattle_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* HeroGoOutForBattleResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeroGoOutForBattleResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* HeroGoOutForBattleResult_ERESULT_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* HeroGoOutForBattleResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* HeroGoOutForBattleResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ReqHeroChange2WaitState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqHeroChange2WaitState_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ReqHeroChange2WaitState_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ReqHeroChange2WaitState_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* HeroChange2WaitStateResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeroChange2WaitStateResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* HeroChange2WaitStateResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* HeroChange2WaitStateResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stNotifyRoleAddExp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stNotifyRoleAddExp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyRoleAddExp_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyRoleAddExp_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSynRoleLevel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSynRoleLevel_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynRoleLevel_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynRoleLevel_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSynHeroLv_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSynHeroLv_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynHeroLv_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynHeroLv_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSynBagPos_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSynBagPos_reflection_ = NULL;
const ::google::protobuf::Descriptor* stMoveItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stMoveItem_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stMoveItem_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stMoveItem_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqArrangeMainBag_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqArrangeMainBag_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqArrangeMainBag_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqArrangeMainBag_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReArrangeMainBagError_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReArrangeMainBagError_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReArrangeMainBagError_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReArrangeMainBagError_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRefreshMainBag_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRefreshMainBag_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRefreshMainBag_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRefreshMainBag_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqCombineHero_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqCombineHero_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqCombineHero_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqCombineHero_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stCombineHeroResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stCombineHeroResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stCombineHeroResult_Result_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stCombineHeroResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stCombineHeroResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqLevelupHero_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqLevelupHero_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqLevelupHero_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqLevelupHero_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stLevelupHeroResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stLevelupHeroResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stLevelupHeroResult_Result_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stLevelupHeroResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stLevelupHeroResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqHeroEvolution_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqHeroEvolution_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqHeroEvolution_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqHeroEvolution_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stEvolutionHeroResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stEvolutionHeroResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stEvolutionHeroResult_Result_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stEvolutionHeroResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stEvolutionHeroResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqHeroStudySkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqHeroStudySkill_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqHeroStudySkill_Type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqHeroStudySkill_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqHeroStudySkill_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stHeroStudySkillResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stHeroStudySkillResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stHeroStudySkillResult_Result_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stHeroStudySkillResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stHeroStudySkillResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqRefineHeroSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqRefineHeroSkill_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqRefineHeroSkill_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqRefineHeroSkill_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRefineHeroSkillResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRefineHeroSkillResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRefineHeroSkillResult_Result_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRefineHeroSkillResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRefineHeroSkillResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSynSkillExp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSynSkillExp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynSkillExp_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynSkillExp_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqReplaceHeroSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqReplaceHeroSkill_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqReplaceHeroSkill_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqReplaceHeroSkill_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReplaceHeroSkillResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReplaceHeroSkillResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReplaceHeroSkillResult_Result_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReplaceHeroSkillResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReplaceHeroSkillResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqUpgradeHeroSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqUpgradeHeroSkill_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqUpgradeHeroSkill_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqUpgradeHeroSkill_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stUpgradeHeroSkillResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stUpgradeHeroSkillResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stUpgradeHeroSkillResult_Result_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stUpgradeHeroSkillResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stUpgradeHeroSkillResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqSellItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqSellItem_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqSellItem_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqSellItem_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSellItemResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSellItemResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stSellItemResult_Result_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSellItemResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSellItemResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqRaiseItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqRaiseItem_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqRaiseItem_eRaiseType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqRaiseItem_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqRaiseItem_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRaiseItemResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRaiseItemResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRaiseItemResult_Result_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRaiseItemResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRaiseItemResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqSmeltEquip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqSmeltEquip_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqSmeltEquip_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqSmeltEquip_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSmeltEquipResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSmeltEquipResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stSmeltEquipResult_Result_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSmeltEquipResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSmeltEquipResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqRecastEquip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqRecastEquip_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqRecastEquip_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqRecastEquip_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* RecastEquipResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecastEquipResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RecastEquipResult_Result_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RecastEquipResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RecastEquipResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqCombineItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqCombineItem_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqCombineItem_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqCombineItem_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stCombineItemResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stCombineItemResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stCombineItemResult_Result_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stCombineItemResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stCombineItemResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqRefreshShoplist_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqRefreshShoplist_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqRefreshShoplist_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqRefreshShoplist_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRefreshShoplistResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRefreshShoplistResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRefreshShoplistResult_Result_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRefreshShoplistResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRefreshShoplistResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stChatCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stChatCmd_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stChatCmd_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stChatCmd_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSynResource_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSynResource_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynResource_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynResource_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSynLevelInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSynLevelInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* stSynCharpterInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSynCharpterInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* stSynAllLevelInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSynAllLevelInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynAllLevelInfo_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynAllLevelInfo_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stObtainItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stObtainItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* stReqFinishLv_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqFinishLv_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqFinishLv_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqFinishLv_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stFinishLvResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stFinishLvResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stFinishLvResult_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stFinishLvResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stFinishLvResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqCharpterReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqCharpterReward_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqCharpterReward_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqCharpterReward_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stCharpterRewardResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stCharpterRewardResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stCharpterRewardResult_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stCharpterRewardResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stCharpterRewardResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqRushLevel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqRushLevel_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqRushLevel_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqRushLevel_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSynRushReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSynRushReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* stLevelRushResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stLevelRushResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stLevelRushResult_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stLevelRushResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stLevelRushResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqResetRushNum_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqResetRushNum_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqResetRushNum_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqResetRushNum_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stResetRushNumResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stResetRushNumResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stResetRushNumResult_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stResetRushNumResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stResetRushNumResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqRefineEquip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqRefineEquip_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqRefineEquip_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqRefineEquip_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRefineEquipResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRefineEquipResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRefineEquipResult_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRefineEquipResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRefineEquipResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSynTotoalRecharge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSynTotoalRecharge_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynTotoalRecharge_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynTotoalRecharge_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSynSkillInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSynSkillInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* stSynUserAllSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSynUserAllSkill_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynUserAllSkill_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynUserAllSkill_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stAddUserSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stAddUserSkill_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stAddUserSkill_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stAddUserSkill_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqUserDetailInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqUserDetailInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqUserDetailInfo_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqUserDetailInfo_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stUserDetailInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stUserDetailInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stUserDetailInfo_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stUserDetailInfo_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stUseItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stUseItem_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stUseItem_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stUseItem_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stUseItemError_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stUseItemError_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stUseItemError_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stUseItemError_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stUseItemError_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSynTipItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSynTipItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* stObtainItemTip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stObtainItemTip_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stObtainItemTip_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stObtainItemTip_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqGetEquipSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqGetEquipSkill_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqGetEquipSkill_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqGetEquipSkill_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stGetEquipSkillResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stGetEquipSkillResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stGetEquipSkillResult_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stGetEquipSkillResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stGetEquipSkillResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqRefineEquipSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqRefineEquipSkill_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqRefineEquipSkill_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqRefineEquipSkill_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRefineEquipSkillResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRefineEquipSkillResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRefineEquipSkillResult_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRefineEquipSkillResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRefineEquipSkillResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stMoveEquipSkill2Slot_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stMoveEquipSkill2Slot_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stMoveEquipSkill2Slot_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stMoveEquipSkill2Slot_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stMoveEquipSkillResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stMoveEquipSkillResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stMoveEquipSkillResult_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stMoveEquipSkillResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stMoveEquipSkillResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqUpgradeEquipSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqUpgradeEquipSkill_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqUpgradeEquipSkill_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqUpgradeEquipSkill_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stUpgradeEquipSkillResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stUpgradeEquipSkillResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stUpgradeEquipSkillResult_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stUpgradeEquipSkillResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stUpgradeEquipSkillResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSendPKUserData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSendPKUserData_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stSendPKUserData_ePKType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSendPKUserData_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSendPKUserData_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqRaiseUserSkillLv_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqRaiseUserSkillLv_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqRaiseUserSkillLv_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqRaiseUserSkillLv_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRaiseUserSkillLvResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRaiseUserSkillLvResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRaiseUserSkillLvResult_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRaiseUserSkillLvResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRaiseUserSkillLvResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stNotifyNewBieGuideStep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stNotifyNewBieGuideStep_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyNewBieGuideStep_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyNewBieGuideStep_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSaveNewBieGuideStep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSaveNewBieGuideStep_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stSaveNewBieGuideStep_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSaveNewBieGuideStep_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stOpenLevelBox_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stOpenLevelBox_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stOpenLevelBox_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stOpenLevelBox_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stChangeRole_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stChangeRole_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stChangeRole_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stChangeRole_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stGotoSelectRole_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stGotoSelectRole_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stGotoSelectRole_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stGotoSelectRole_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSynRMPShopItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSynRMPShopItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* stSynRMBShopInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSynRMBShopInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynRMBShopInfo_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynRMBShopInfo_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSynOne2OnePVPItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSynOne2OnePVPItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* stOne2OnePVPResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stOne2OnePVPResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stOne2OnePVPResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stOne2OnePVPResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stPrivateChatNotUser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stPrivateChatNotUser_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stPrivateChatNotUser_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stPrivateChatNotUser_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqRecoverRemainTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqRecoverRemainTime_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqRecoverRemainTime_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqRecoverRemainTime_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSPAndLilianRecoverRemainTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSPAndLilianRecoverRemainTime_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stSPAndLilianRecoverRemainTime_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSPAndLilianRecoverRemainTime_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSwapHeroBattlePos_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSwapHeroBattlePos_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stSwapHeroBattlePos_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSwapHeroBattlePos_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSwapHeroBattlePosError_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSwapHeroBattlePosError_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stSwapHeroBattlePosError_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSwapHeroBattlePosError_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSwapHeroBattlePosError_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSynSystemSetting_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSynSystemSetting_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynSystemSetting_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynSystemSetting_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqSaveSystemSetting_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqSaveSystemSetting_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqSaveSystemSetting_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqSaveSystemSetting_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stUnlockRareSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stUnlockRareSkill_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stUnlockRareSkill_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stUnlockRareSkill_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stUnlockRareSkillResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stUnlockRareSkillResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stUnlockRareSkillResult_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stUnlockRareSkillResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stUnlockRareSkillResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stUpgradeRareSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stUpgradeRareSkill_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stUpgradeRareSkill_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stUpgradeRareSkill_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stUpgradeRareSkillResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stUpgradeRareSkillResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stUpgradeRareSkillResult_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stUpgradeRareSkillResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stUpgradeRareSkillResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqGiftBag_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqGiftBag_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqGiftBag_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqGiftBag_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stGotGiftBagResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stGotGiftBagResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stGotGiftBagResult_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stGotGiftBagResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stGotGiftBagResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSynRealTimeItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSynRealTimeItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* stRealTimePKResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRealTimePKResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRealTimePKResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRealTimePKResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqFiveRaiseEquip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqFiveRaiseEquip_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqFiveRaiseEquip_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqFiveRaiseEquip_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stFiveRaiseEquipResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stFiveRaiseEquipResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stFiveRaiseEquipResult_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stFiveRaiseEquipResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stFiveRaiseEquipResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSynBattleProp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSynBattleProp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynBattleProp_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynBattleProp_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSynTeamCopyMapNum_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSynTeamCopyMapNum_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynTeamCopyMapNum_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynTeamCopyMapNum_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSynRealTimePKNum_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSynRealTimePKNum_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynRealTimePKNum_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynRealTimePKNum_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stCopymapFail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stCopymapFail_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stCopymapFail_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stCopymapFail_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqHero10TimeStudySkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqHero10TimeStudySkill_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqHero10TimeStudySkill_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqHero10TimeStudySkill_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stHero10TimesStudySkillResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stHero10TimesStudySkillResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stHero10TimesStudySkillResult_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stHero10TimesStudySkillResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stHero10TimesStudySkillResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* st10TimesGetEquipSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  st10TimesGetEquipSkill_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* st10TimesGetEquipSkill_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* st10TimesGetEquipSkill_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* st10TimesGetEquipSkillResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  st10TimesGetEquipSkillResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* st10TimesGetEquipSkillResult_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* st10TimesGetEquipSkillResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* st10TimesGetEquipSkillResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqFirstRechargeReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqFirstRechargeReward_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqFirstRechargeReward_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqFirstRechargeReward_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRetFirstRechargeReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRetFirstRechargeReward_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetFirstRechargeReward_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetFirstRechargeReward_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetFirstRechargeReward_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSynMobaItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSynMobaItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* stMobaPKResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stMobaPKResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stMobaPKResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stMobaPKResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSubNewBieGuideID_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSubNewBieGuideID_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stSubNewBieGuideID_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSubNewBieGuideID_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stResetTeamCopyMapNum_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stResetTeamCopyMapNum_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stResetTeamCopyMapNum_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stResetTeamCopyMapNum_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stResetTeampCopyMapNumResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stResetTeampCopyMapNumResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stResetTeampCopyMapNumResult_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stResetTeampCopyMapNumResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stResetTeampCopyMapNumResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stResetRealTimeCopyMapNum_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stResetRealTimeCopyMapNum_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stResetRealTimeCopyMapNum_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stResetRealTimeCopyMapNum_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stResetRealTimeCopymapNumResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stResetRealTimeCopymapNumResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stResetRealTimeCopymapNumResult_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stResetRealTimeCopymapNumResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stResetRealTimeCopymapNumResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stBuyRMBItemSuccess_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stBuyRMBItemSuccess_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stBuyRMBItemSuccess_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stBuyRMBItemSuccess_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stOne2OnePVPFail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stOne2OnePVPFail_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stOne2OnePVPFail_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stOne2OnePVPFail_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRealTimeFail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRealTimeFail_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRealTimeFail_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRealTimeFail_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stDataInitFinish_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stDataInitFinish_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stDataInitFinish_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stDataInitFinish_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqFirst10RechargeReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqFirst10RechargeReward_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqFirst10RechargeReward_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqFirst10RechargeReward_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRetFirst10RechargeReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRetFirst10RechargeReward_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetFirst10RechargeReward_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetFirst10RechargeReward_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetFirst10RechargeReward_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stChatInWorldCoolDown_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stChatInWorldCoolDown_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stChatInWorldCoolDown_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stChatInWorldCoolDown_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSynRoleCreateTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSynRoleCreateTime_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynRoleCreateTime_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynRoleCreateTime_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqChgEquipSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqChgEquipSkill_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqChgEquipSkill_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqChgEquipSkill_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRetChgEquipSkillResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRetChgEquipSkillResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetChgEquipSkillResult_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetChgEquipSkillResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetChgEquipSkillResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stHasCloseBetaReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stHasCloseBetaReward_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stHasCloseBetaReward_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stHasCloseBetaReward_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqGotCloseBetaReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqGotCloseBetaReward_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqGotCloseBetaReward_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqGotCloseBetaReward_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stGotCloseBetaRewardResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stGotCloseBetaRewardResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stGotCloseBetaRewardResult_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stGotCloseBetaRewardResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stGotCloseBetaRewardResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqUseMonthCardItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqUseMonthCardItem_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqUseMonthCardItem_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqUseMonthCardItem_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRetUseMonthCardItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRetUseMonthCardItem_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetUseMonthCardItem_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetUseMonthCardItem_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetUseMonthCardItem_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqUseSelectItemBox_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqUseSelectItemBox_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqUseSelectItemBox_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqUseSelectItemBox_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRetUseSelectItemBox_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRetUseSelectItemBox_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetUseSelectItemBox_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetUseSelectItemBox_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetUseSelectItemBox_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqUseHeroSkillBook_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqUseHeroSkillBook_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqUseHeroSkillBook_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqUseHeroSkillBook_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRetUseHeroSkillBook_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRetUseHeroSkillBook_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetUseHeroSkillBook_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetUseHeroSkillBook_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetUseHeroSkillBook_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqUseEquipSkillBook_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqUseEquipSkillBook_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqUseEquipSkillBook_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqUseEquipSkillBook_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRetUseEquipSkillBook_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRetUseEquipSkillBook_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetUseEquipSkillBook_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetUseEquipSkillBook_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetUseEquipSkillBook_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqBreakEquip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqBreakEquip_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqBreakEquip_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqBreakEquip_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stBreakEquipResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stBreakEquipResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stBreakEquipResult_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stBreakEquipResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stBreakEquipResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqRecastHero_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqRecastHero_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqRecastHero_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqRecastHero_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRecastHeroResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRecastHeroResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRecastHeroResult_Result_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRecastHeroResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRecastHeroResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqChangeName_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqChangeName_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqChangeName_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqChangeName_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stChangeNameResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stChangeNameResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stChangeNameResult_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stChangeNameResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stChangeNameResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqOpenBuyGoldWindow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqOpenBuyGoldWindow_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqOpenBuyGoldWindow_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqOpenBuyGoldWindow_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stOpenBuyGoldWindowResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stOpenBuyGoldWindowResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stOpenBuyGoldWindowResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stOpenBuyGoldWindowResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqBuyGold_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqBuyGold_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqBuyGold_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqBuyGold_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stBuyGoldResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stBuyGoldResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stBuyGoldResult_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stBuyGoldResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stBuyGoldResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSendImpactHeroInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSendImpactHeroInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stSendImpactHeroInfo_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSendImpactHeroInfo_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stExpBookLevelLimit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stExpBookLevelLimit_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stExpBookLevelLimit_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stExpBookLevelLimit_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stExpBookLevelLimit_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stNotifyPubUniqueID_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stNotifyPubUniqueID_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyPubUniqueID_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyPubUniqueID_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* EnchantItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnchantItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* stReqEnchant_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqEnchant_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqEnchant_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqEnchant_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRetEnchant_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRetEnchant_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetEnchant_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetEnchant_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetEnchant_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqRecastEnchant_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqRecastEnchant_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqRecastEnchant_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqRecastEnchant_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRetRecastEnchant_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRetRecastEnchant_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetRecastEnchant_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetRecastEnchant_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetRecastEnchant_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqLockEnchant_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqLockEnchant_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqLockEnchant_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqLockEnchant_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRetLockEnchant_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRetLockEnchant_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetLockEnchant_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetLockEnchant_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetLockEnchant_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stHeroLeagueItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stHeroLeagueItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* stHerLeagueResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stHerLeagueResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stHerLeagueResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stHerLeagueResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqHeroRune_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqHeroRune_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqHeroRune_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqHeroRune_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stHeroRuneInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stHeroRuneInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* stRetHeroRune_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRetHeroRune_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetHeroRune_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetHeroRune_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqAddHeroRune_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqAddHeroRune_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqAddHeroRune_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqAddHeroRune_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRetAddHeroRune_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRetAddHeroRune_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetAddHeroRune_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetAddHeroRune_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetAddHeroRune_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqDelHeroRune_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqDelHeroRune_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqDelHeroRune_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqDelHeroRune_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRetDelHeroRune_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRetDelHeroRune_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetDelHeroRune_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetDelHeroRune_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetDelHeroRune_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqRunePieceCombine_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqRunePieceCombine_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqRunePieceCombine_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqRunePieceCombine_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRetRunePieceCombine_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRetRunePieceCombine_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetRunePieceCombine_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetRunePieceCombine_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetRunePieceCombine_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqRuneIntensify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqRuneIntensify_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqRuneIntensify_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqRuneIntensify_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRetRuneIntensify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRetRuneIntensify_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetRuneIntensify_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetRuneIntensify_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetRuneIntensify_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqRuneEvolve_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqRuneEvolve_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqRuneEvolve_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqRuneEvolve_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRetRuneEvolve_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRetRuneEvolve_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetRuneEvolve_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetRuneEvolve_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetRuneEvolve_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqExtractGem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqExtractGem_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqExtractGem_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqExtractGem_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ExtractGemResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExtractGemResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ExtractGemResult_Result_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ExtractGemResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ExtractGemResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqWedding_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqWedding_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqWedding_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqWedding_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqAgreeWedding_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqAgreeWedding_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqAgreeWedding_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqAgreeWedding_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ResultWedding_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResultWedding_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ResultWedding_Result_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ResultWedding_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ResultWedding_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqInviteToRoom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqInviteToRoom_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqInviteToRoom_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqInviteToRoom_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NotifyEnterWedding_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyEnterWedding_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NotifyEnterWedding_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* NotifyEnterWedding_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqAgreeEnterWedding_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqAgreeEnterWedding_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqAgreeEnterWedding_Result_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqAgreeEnterWedding_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqAgreeEnterWedding_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ResultEnterWedding_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResultEnterWedding_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ResultEnterWedding_Result_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ResultEnterWedding_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ResultEnterWedding_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MarryInviterPlace_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarryInviterPlace_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MarryInviterPlace_State_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MarryInviterPlace_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MarryInviterPlace_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqDivorce_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqDivorce_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqDivorce_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqDivorce_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* RejectDivorce_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RejectDivorce_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RejectDivorce_Result_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RejectDivorce_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RejectDivorce_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqRejectDivorce_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqRejectDivorce_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqRejectDivorce_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqRejectDivorce_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRetRejectDivorce_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRetRejectDivorce_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetRejectDivorce_Result_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetRejectDivorce_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetRejectDivorce_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* BoardcastMarryInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BoardcastMarryInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BoardcastMarryInfo_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BoardcastMarryInfo_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqUseFirework_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqUseFirework_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqUseFirework_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqUseFirework_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ResultUseFirework_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResultUseFirework_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ResultUseFirework_Result_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ResultUseFirework_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ResultUseFirework_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NotifyFirework_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyFirework_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NotifyFirework_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* NotifyFirework_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqTakeCandy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqTakeCandy_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqTakeCandy_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqTakeCandy_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ResultTakeCandy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResultTakeCandy_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ResultTakeCandy_Result_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ResultTakeCandy_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ResultTakeCandy_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqBuyFirework_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqBuyFirework_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqBuyFirework_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqBuyFirework_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ResultBuyFirework_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResultBuyFirework_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ResultBuyFirework_Result_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ResultBuyFirework_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ResultBuyFirework_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqEnterWeddingAlone_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqEnterWeddingAlone_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqEnterWeddingAlone_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqEnterWeddingAlone_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ResultEnterWeddingAlone_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResultEnterWeddingAlone_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ResultEnterWeddingAlone_Result_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ResultEnterWeddingAlone_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ResultEnterWeddingAlone_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqQuitWeddingScene_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqQuitWeddingScene_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqQuitWeddingScene_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqQuitWeddingScene_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRetQuitWeddingScene_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRetQuitWeddingScene_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetQuitWeddingScene_Result_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetQuitWeddingScene_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetQuitWeddingScene_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stNotifyFriendAction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stNotifyFriendAction_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyFriendAction_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyFriendAction_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSendCharCreateTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSendCharCreateTime_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stSendCharCreateTime_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSendCharCreateTime_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqDrawWeddingRing_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqDrawWeddingRing_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqDrawWeddingRing_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqDrawWeddingRing_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRetDrawWeddingRing_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRetDrawWeddingRing_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetDrawWeddingRing_Result_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetDrawWeddingRing_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetDrawWeddingRing_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqBuyNum_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqBuyNum_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqBuyNum_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqBuyNum_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stBuyNumResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stBuyNumResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stBuyNumResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stBuyNumResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqRefreshNum_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqRefreshNum_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqRefreshNum_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqRefreshNum_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRefreshNumResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRefreshNumResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRefreshNumResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRefreshNumResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqColumnList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqColumnList_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqColumnList_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqColumnList_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stItemInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stItemInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* stColumnListResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stColumnListResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stColumnListResult_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stColumnListResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stColumnListResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqMarketBuyItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqMarketBuyItem_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqMarketBuyItem_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqMarketBuyItem_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stMarketBuyItemResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stMarketBuyItemResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stMarketBuyItemResult_BUYRESULT_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stMarketBuyItemResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stMarketBuyItemResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqOpenWindow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqOpenWindow_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqOpenWindow_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqOpenWindow_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stOpenWindowResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stOpenWindowResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stOpenWindowResult_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stOpenWindowResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stOpenWindowResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqRefreshList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqRefreshList_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqRefreshList_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqRefreshList_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRefreshListResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRefreshListResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRefreshListResult_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRefreshListResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRefreshListResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqAKeyRaiseUserSkillLv_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqAKeyRaiseUserSkillLv_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqAKeyRaiseUserSkillLv_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqAKeyRaiseUserSkillLv_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stAKeyRaiseUserSkillLvResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stAKeyRaiseUserSkillLvResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stAKeyRaiseUserSkillLvResult_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stAKeyRaiseUserSkillLvResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stAKeyRaiseUserSkillLvResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stMountItemInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stMountItemInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* stReqStoneSynthesis_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqStoneSynthesis_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqStoneSynthesis_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqStoneSynthesis_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stStoneSynthesisResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stStoneSynthesisResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stStoneSynthesisResult_Result_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stStoneSynthesisResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stStoneSynthesisResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqStoneEvolvement_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqStoneEvolvement_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqStoneEvolvement_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqStoneEvolvement_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stStoneEvolvementResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stStoneEvolvementResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stStoneEvolvementResult_Result_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stStoneEvolvementResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stStoneEvolvementResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqStoneProp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqStoneProp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqStoneProp_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqStoneProp_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stStonePropResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stStonePropResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stStonePropResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stStonePropResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqChangePhoto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqChangePhoto_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqChangePhoto_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqChangePhoto_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stChangePhotoResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stChangePhotoResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stChangePhotoResult_Result_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stChangePhotoResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stChangePhotoResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqHasPhotoID_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqHasPhotoID_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqHasPhotoID_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqHasPhotoID_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stHasPhotoIDResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stHasPhotoIDResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stHasPhotoIDResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stHasPhotoIDResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqUnlockPhoto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqUnlockPhoto_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqUnlockPhoto_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqUnlockPhoto_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stUnlockPhotoResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stUnlockPhotoResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stUnlockPhotoResult_Result_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stUnlockPhotoResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stUnlockPhotoResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSpriteInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSpriteInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stSpriteInfo_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSpriteInfo_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSpriteInfoResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSpriteInfoResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stSpriteInfoResult_Result_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSpriteInfoResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSpriteInfoResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stTrainHeroReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stTrainHeroReq_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stTrainHeroReq_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stTrainHeroReq_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stTrainHeroResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stTrainHeroResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stTrainHeroResult_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stTrainHeroResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stTrainHeroResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stGuaJiTimeNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stGuaJiTimeNtf_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stGuaJiTimeNtf_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stGuaJiTimeNtf_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stGuaJiAwardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stGuaJiAwardReq_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stGuaJiAwardReq_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stGuaJiAwardReq_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stGuaJiAwardResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stGuaJiAwardResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stGuaJiAwardResult_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stGuaJiAwardResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stGuaJiAwardResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stNftVipNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stNftVipNtf_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stNftVipNtf_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stNftVipNtf_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stGuaJiStartReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stGuaJiStartReq_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stGuaJiStartReq_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stGuaJiStartReq_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stGuaJiStartResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stGuaJiStartResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stGuaJiStartResult_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stGuaJiStartResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stGuaJiStartResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSynRMPShopItem2_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSynRMPShopItem2_reflection_ = NULL;
const ::google::protobuf::Descriptor* stSynRMBShopInfo2_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSynRMBShopInfo2_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynRMBShopInfo2_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynRMBShopInfo2_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* eRoleJob_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* eRoleSex_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CreateRoleResultCode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* eBagType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* E_HERO_STATE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ArrageMainBagError_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* eChatType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* eLevelStar_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* eCharpterRewardStep_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* eRushType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* eSystemSetting_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* eColumn_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_Role_2eproto() {
  protobuf_AddDesc_Role_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Role.proto");
  GOOGLE_CHECK(file != NULL);
  stBattleProp_descriptor_ = file->message_type(0);
  static const int stBattleProp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBattleProp, propid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBattleProp, propval_),
  };
  stBattleProp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stBattleProp_descriptor_,
      stBattleProp::default_instance_,
      stBattleProp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBattleProp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBattleProp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stBattleProp));
  stRoleMainData_descriptor_ = file->message_type(1);
  static const int stRoleMainData_offsets_[50] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRoleMainData, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRoleMainData, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRoleMainData, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRoleMainData, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRoleMainData, goldcoin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRoleMainData, pointcard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRoleMainData, curhp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRoleMainData, curmp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRoleMainData, battlepower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRoleMainData, heishijiejing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRoleMainData, reputaion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRoleMainData, honour_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRoleMainData, braveval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRoleMainData, peakcertificate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRoleMainData, hufu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRoleMainData, yuntie_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRoleMainData, totalrecharge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRoleMainData, todayrecharge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRoleMainData, job_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRoleMainData, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRoleMainData, sp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRoleMainData, lilian_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRoleMainData, totalconsume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRoleMainData, juexingnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRoleMainData, juexingexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRoleMainData, joinguildremaintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRoleMainData, headid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRoleMainData, faceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRoleMainData, studyheroskillnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRoleMainData, teamcopymapnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRoleMainData, realtimepknum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRoleMainData, battleprop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRoleMainData, gotfstrechargereward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRoleMainData, teamcopymapresetnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRoleMainData, realtimeresetnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRoleMainData, gotfst10rechargereward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRoleMainData, changenamenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRoleMainData, integral_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRoleMainData, soulfire_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRoleMainData, glory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRoleMainData, coupleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRoleMainData, lifeessence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRoleMainData, guidcrystal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRoleMainData, isreceive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRoleMainData, photoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRoleMainData, trainsp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRoleMainData, guajistart_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRoleMainData, guajiend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRoleMainData, isrobot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRoleMainData, guajitodaycount_),
  };
  stRoleMainData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRoleMainData_descriptor_,
      stRoleMainData::default_instance_,
      stRoleMainData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRoleMainData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRoleMainData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRoleMainData));
  stInitMainData_descriptor_ = file->message_type(2);
  static const int stInitMainData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stInitMainData, data_),
  };
  stInitMainData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stInitMainData_descriptor_,
      stInitMainData::default_instance_,
      stInitMainData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stInitMainData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stInitMainData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stInitMainData));
  stInitMainData_ProtoModID_descriptor_ = stInitMainData_descriptor_->enum_type(0);
  stInitMainData_ProtoFunID_descriptor_ = stInitMainData_descriptor_->enum_type(1);
  ReqCreateRole_descriptor_ = file->message_type(3);
  static const int ReqCreateRole_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCreateRole, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCreateRole, job_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCreateRole, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCreateRole, headid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCreateRole, faceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCreateRole, opid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCreateRole, serverid_),
  };
  ReqCreateRole_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqCreateRole_descriptor_,
      ReqCreateRole::default_instance_,
      ReqCreateRole_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCreateRole, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCreateRole, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqCreateRole));
  ReqCreateRole_ProtoModID_descriptor_ = ReqCreateRole_descriptor_->enum_type(0);
  ReqCreateRole_ProtoFunID_descriptor_ = ReqCreateRole_descriptor_->enum_type(1);
  CreateRoleResult_descriptor_ = file->message_type(4);
  static const int CreateRoleResult_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoleResult, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoleResult, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoleResult, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoleResult, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoleResult, job_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoleResult, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoleResult, createtime_),
  };
  CreateRoleResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateRoleResult_descriptor_,
      CreateRoleResult::default_instance_,
      CreateRoleResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoleResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoleResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateRoleResult));
  CreateRoleResult_ProtoModID_descriptor_ = CreateRoleResult_descriptor_->enum_type(0);
  CreateRoleResult_ProtoFunID_descriptor_ = CreateRoleResult_descriptor_->enum_type(1);
  stSynSnapData_descriptor_ = file->message_type(5);
  static const int stSynSnapData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynSnapData, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynSnapData, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynSnapData, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynSnapData, job_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynSnapData, sex_),
  };
  stSynSnapData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSynSnapData_descriptor_,
      stSynSnapData::default_instance_,
      stSynSnapData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynSnapData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynSnapData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSynSnapData));
  RefreshSnapData_descriptor_ = file->message_type(6);
  static const int RefreshSnapData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefreshSnapData, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefreshSnapData, flag_),
  };
  RefreshSnapData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RefreshSnapData_descriptor_,
      RefreshSnapData::default_instance_,
      RefreshSnapData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefreshSnapData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefreshSnapData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RefreshSnapData));
  RefreshSnapData_ProtoModID_descriptor_ = RefreshSnapData_descriptor_->enum_type(0);
  RefreshSnapData_ProtoFunID_descriptor_ = RefreshSnapData_descriptor_->enum_type(1);
  ReqEnterGame_descriptor_ = file->message_type(7);
  static const int ReqEnterGame_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqEnterGame, charid_),
  };
  ReqEnterGame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqEnterGame_descriptor_,
      ReqEnterGame::default_instance_,
      ReqEnterGame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqEnterGame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqEnterGame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqEnterGame));
  ReqEnterGame_ProtoModID_descriptor_ = ReqEnterGame_descriptor_->enum_type(0);
  ReqEnterGame_ProtoFunID_descriptor_ = ReqEnterGame_descriptor_->enum_type(1);
  stSynGoldCoin_descriptor_ = file->message_type(8);
  static const int stSynGoldCoin_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynGoldCoin, num_),
  };
  stSynGoldCoin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSynGoldCoin_descriptor_,
      stSynGoldCoin::default_instance_,
      stSynGoldCoin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynGoldCoin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynGoldCoin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSynGoldCoin));
  stSynGoldCoin_ProtoModID_descriptor_ = stSynGoldCoin_descriptor_->enum_type(0);
  stSynGoldCoin_ProtoFunID_descriptor_ = stSynGoldCoin_descriptor_->enum_type(1);
  stSynPointCard_descriptor_ = file->message_type(9);
  static const int stSynPointCard_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynPointCard, num_),
  };
  stSynPointCard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSynPointCard_descriptor_,
      stSynPointCard::default_instance_,
      stSynPointCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynPointCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynPointCard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSynPointCard));
  stSynPointCard_ProtoModID_descriptor_ = stSynPointCard_descriptor_->enum_type(0);
  stSynPointCard_ProtoFunID_descriptor_ = stSynPointCard_descriptor_->enum_type(1);
  stBagPos_descriptor_ = file->message_type(10);
  static const int stBagPos_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBagPos, bagtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBagPos, pos_),
  };
  stBagPos_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stBagPos_descriptor_,
      stBagPos::default_instance_,
      stBagPos_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBagPos, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBagPos, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stBagPos));
  stItemSkillInfo_descriptor_ = file->message_type(11);
  static const int stItemSkillInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stItemSkillInfo, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stItemSkillInfo, skilllv_),
  };
  stItemSkillInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stItemSkillInfo_descriptor_,
      stItemSkillInfo::default_instance_,
      stItemSkillInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stItemSkillInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stItemSkillInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stItemSkillInfo));
  stRaiseSkillProp_descriptor_ = file->message_type(12);
  static const int stRaiseSkillProp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRaiseSkillProp, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRaiseSkillProp, raisetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRaiseSkillProp, raisevalue_),
  };
  stRaiseSkillProp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRaiseSkillProp_descriptor_,
      stRaiseSkillProp::default_instance_,
      stRaiseSkillProp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRaiseSkillProp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRaiseSkillProp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRaiseSkillProp));
  stEnchantInfo_descriptor_ = file->message_type(13);
  static const int stEnchantInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stEnchantInfo, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stEnchantInfo, locked_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stEnchantInfo, proptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stEnchantInfo, propval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stEnchantInfo, index_),
  };
  stEnchantInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stEnchantInfo_descriptor_,
      stEnchantInfo::default_instance_,
      stEnchantInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stEnchantInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stEnchantInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stEnchantInfo));
  stSynItemInfo_descriptor_ = file->message_type(14);
  static const int stSynItemInfo_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynItemInfo, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynItemInfo, instanceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynItemInfo, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynItemInfo, raiselv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynItemInfo, maxhp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynItemInfo, damage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynItemInfo, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynItemInfo, bagpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynItemInfo, battlepower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynItemInfo, refinelv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynItemInfo, obtainskill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynItemInfo, skillinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynItemInfo, raiseskillprop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynItemInfo, remaintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynItemInfo, breaklv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynItemInfo, enchant_),
  };
  stSynItemInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSynItemInfo_descriptor_,
      stSynItemInfo::default_instance_,
      stSynItemInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynItemInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynItemInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSynItemInfo));
  stNotifyAddItem_descriptor_ = file->message_type(15);
  static const int stNotifyAddItem_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyAddItem, data_),
  };
  stNotifyAddItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stNotifyAddItem_descriptor_,
      stNotifyAddItem::default_instance_,
      stNotifyAddItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyAddItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyAddItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stNotifyAddItem));
  stNotifyAddItem_ProtoModID_descriptor_ = stNotifyAddItem_descriptor_->enum_type(0);
  stNotifyAddItem_ProtoFunID_descriptor_ = stNotifyAddItem_descriptor_->enum_type(1);
  stDeleteItem_descriptor_ = file->message_type(16);
  static const int stDeleteItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDeleteItem, instanceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDeleteItem, bagpos_),
  };
  stDeleteItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stDeleteItem_descriptor_,
      stDeleteItem::default_instance_,
      stDeleteItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDeleteItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDeleteItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stDeleteItem));
  stDeleteItem_ProtoModID_descriptor_ = stDeleteItem_descriptor_->enum_type(0);
  stDeleteItem_ProtoFunID_descriptor_ = stDeleteItem_descriptor_->enum_type(1);
  stRefreshItem_descriptor_ = file->message_type(17);
  static const int stRefreshItem_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRefreshItem, data_),
  };
  stRefreshItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRefreshItem_descriptor_,
      stRefreshItem::default_instance_,
      stRefreshItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRefreshItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRefreshItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRefreshItem));
  stRefreshItem_ProtoModID_descriptor_ = stRefreshItem_descriptor_->enum_type(0);
  stRefreshItem_ProtoFunID_descriptor_ = stRefreshItem_descriptor_->enum_type(1);
  stInitAllItem_descriptor_ = file->message_type(18);
  static const int stInitAllItem_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stInitAllItem, data_),
  };
  stInitAllItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stInitAllItem_descriptor_,
      stInitAllItem::default_instance_,
      stInitAllItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stInitAllItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stInitAllItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stInitAllItem));
  stInitAllItem_ProtoModID_descriptor_ = stInitAllItem_descriptor_->enum_type(0);
  stInitAllItem_ProtoFunID_descriptor_ = stInitAllItem_descriptor_->enum_type(1);
  stReqOpenShop_descriptor_ = file->message_type(19);
  static const int stReqOpenShop_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqOpenShop, shopid_),
  };
  stReqOpenShop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqOpenShop_descriptor_,
      stReqOpenShop::default_instance_,
      stReqOpenShop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqOpenShop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqOpenShop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqOpenShop));
  stReqOpenShop_ProtoModID_descriptor_ = stReqOpenShop_descriptor_->enum_type(0);
  stReqOpenShop_ProtoFunID_descriptor_ = stReqOpenShop_descriptor_->enum_type(1);
  stShopItem_descriptor_ = file->message_type(20);
  static const int stShopItem_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stShopItem, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stShopItem, uniqueid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stShopItem, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stShopItem, buynum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stShopItem, buynumpertime_),
  };
  stShopItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stShopItem_descriptor_,
      stShopItem::default_instance_,
      stShopItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stShopItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stShopItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stShopItem));
  stRetShopItemList_descriptor_ = file->message_type(21);
  static const int stRetShopItemList_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetShopItemList, shopid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetShopItemList, shoplist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetShopItemList, refreshremaintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetShopItemList, refreshnum_),
  };
  stRetShopItemList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRetShopItemList_descriptor_,
      stRetShopItemList::default_instance_,
      stRetShopItemList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetShopItemList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetShopItemList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRetShopItemList));
  stRetShopItemList_ProtoModID_descriptor_ = stRetShopItemList_descriptor_->enum_type(0);
  stRetShopItemList_ProtoFunID_descriptor_ = stRetShopItemList_descriptor_->enum_type(1);
  stReqBuyItem_descriptor_ = file->message_type(22);
  static const int stReqBuyItem_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqBuyItem, shopid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqBuyItem, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqBuyItem, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqBuyItem, isfashion_),
  };
  stReqBuyItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqBuyItem_descriptor_,
      stReqBuyItem::default_instance_,
      stReqBuyItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqBuyItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqBuyItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqBuyItem));
  stReqBuyItem_ProtoModID_descriptor_ = stReqBuyItem_descriptor_->enum_type(0);
  stReqBuyItem_ProtoFunID_descriptor_ = stReqBuyItem_descriptor_->enum_type(1);
  stBuyItemResult_descriptor_ = file->message_type(23);
  static const int stBuyItemResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBuyItemResult, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBuyItemResult, shopitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBuyItemResult, shopid_),
  };
  stBuyItemResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stBuyItemResult_descriptor_,
      stBuyItemResult::default_instance_,
      stBuyItemResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBuyItemResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBuyItemResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stBuyItemResult));
  stBuyItemResult_BUYRESULT_descriptor_ = stBuyItemResult_descriptor_->enum_type(0);
  stBuyItemResult_ProtoModID_descriptor_ = stBuyItemResult_descriptor_->enum_type(1);
  stBuyItemResult_ProtoFunID_descriptor_ = stBuyItemResult_descriptor_->enum_type(2);
  stSynHeroSkill_descriptor_ = file->message_type(24);
  static const int stSynHeroSkill_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynHeroSkill, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynHeroSkill, skilllv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynHeroSkill, skillpos_),
  };
  stSynHeroSkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSynHeroSkill_descriptor_,
      stSynHeroSkill::default_instance_,
      stSynHeroSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynHeroSkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynHeroSkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSynHeroSkill));
  stImpactHeroInfo_descriptor_ = file->message_type(25);
  static const int stImpactHeroInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stImpactHeroInfo, heroid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stImpactHeroInfo, battleprop_),
  };
  stImpactHeroInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stImpactHeroInfo_descriptor_,
      stImpactHeroInfo::default_instance_,
      stImpactHeroInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stImpactHeroInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stImpactHeroInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stImpactHeroInfo));
  stSynHeroInfo_descriptor_ = file->message_type(26);
  static const int stSynHeroInfo_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynHeroInfo, heroid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynHeroInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynHeroInfo, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynHeroInfo, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynHeroInfo, skillvec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynHeroInfo, maxhp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynHeroInfo, damage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynHeroInfo, evolutionlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynHeroInfo, battlepower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynHeroInfo, studyskillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynHeroInfo, battleprop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynHeroInfo, trainlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynHeroInfo, trainexp_),
  };
  stSynHeroInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSynHeroInfo_descriptor_,
      stSynHeroInfo::default_instance_,
      stSynHeroInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynHeroInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynHeroInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSynHeroInfo));
  stInitAllHero_descriptor_ = file->message_type(27);
  static const int stInitAllHero_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stInitAllHero, skillexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stInitAllHero, usediamondnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stInitAllHero, data_),
  };
  stInitAllHero_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stInitAllHero_descriptor_,
      stInitAllHero::default_instance_,
      stInitAllHero_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stInitAllHero, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stInitAllHero, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stInitAllHero));
  stInitAllHero_ProtoModID_descriptor_ = stInitAllHero_descriptor_->enum_type(0);
  stInitAllHero_ProtoFunID_descriptor_ = stInitAllHero_descriptor_->enum_type(1);
  stNotifyAddHero_descriptor_ = file->message_type(28);
  static const int stNotifyAddHero_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyAddHero, data_),
  };
  stNotifyAddHero_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stNotifyAddHero_descriptor_,
      stNotifyAddHero::default_instance_,
      stNotifyAddHero_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyAddHero, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyAddHero, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stNotifyAddHero));
  stNotifyAddHero_ProtoModID_descriptor_ = stNotifyAddHero_descriptor_->enum_type(0);
  stNotifyAddHero_ProtoFunID_descriptor_ = stNotifyAddHero_descriptor_->enum_type(1);
  stRefreshHero_descriptor_ = file->message_type(29);
  static const int stRefreshHero_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRefreshHero, data_),
  };
  stRefreshHero_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRefreshHero_descriptor_,
      stRefreshHero::default_instance_,
      stRefreshHero_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRefreshHero, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRefreshHero, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRefreshHero));
  stRefreshHero_ProtoModID_descriptor_ = stRefreshHero_descriptor_->enum_type(0);
  stRefreshHero_ProtoFunID_descriptor_ = stRefreshHero_descriptor_->enum_type(1);
  stReqHeroGoOutForBattle_descriptor_ = file->message_type(30);
  static const int stReqHeroGoOutForBattle_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqHeroGoOutForBattle, heroid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqHeroGoOutForBattle, pos_),
  };
  stReqHeroGoOutForBattle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqHeroGoOutForBattle_descriptor_,
      stReqHeroGoOutForBattle::default_instance_,
      stReqHeroGoOutForBattle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqHeroGoOutForBattle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqHeroGoOutForBattle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqHeroGoOutForBattle));
  stReqHeroGoOutForBattle_ProtoModID_descriptor_ = stReqHeroGoOutForBattle_descriptor_->enum_type(0);
  stReqHeroGoOutForBattle_ProtoFunID_descriptor_ = stReqHeroGoOutForBattle_descriptor_->enum_type(1);
  HeroGoOutForBattleResult_descriptor_ = file->message_type(31);
  static const int HeroGoOutForBattleResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroGoOutForBattleResult, heroid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroGoOutForBattleResult, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroGoOutForBattleResult, pos_),
  };
  HeroGoOutForBattleResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeroGoOutForBattleResult_descriptor_,
      HeroGoOutForBattleResult::default_instance_,
      HeroGoOutForBattleResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroGoOutForBattleResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroGoOutForBattleResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeroGoOutForBattleResult));
  HeroGoOutForBattleResult_ERESULT_descriptor_ = HeroGoOutForBattleResult_descriptor_->enum_type(0);
  HeroGoOutForBattleResult_ProtoModID_descriptor_ = HeroGoOutForBattleResult_descriptor_->enum_type(1);
  HeroGoOutForBattleResult_ProtoFunID_descriptor_ = HeroGoOutForBattleResult_descriptor_->enum_type(2);
  ReqHeroChange2WaitState_descriptor_ = file->message_type(32);
  static const int ReqHeroChange2WaitState_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqHeroChange2WaitState, heroid_),
  };
  ReqHeroChange2WaitState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqHeroChange2WaitState_descriptor_,
      ReqHeroChange2WaitState::default_instance_,
      ReqHeroChange2WaitState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqHeroChange2WaitState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqHeroChange2WaitState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqHeroChange2WaitState));
  ReqHeroChange2WaitState_ProtoModID_descriptor_ = ReqHeroChange2WaitState_descriptor_->enum_type(0);
  ReqHeroChange2WaitState_ProtoFunID_descriptor_ = ReqHeroChange2WaitState_descriptor_->enum_type(1);
  HeroChange2WaitStateResult_descriptor_ = file->message_type(33);
  static const int HeroChange2WaitStateResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroChange2WaitStateResult, heroid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroChange2WaitStateResult, success_),
  };
  HeroChange2WaitStateResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeroChange2WaitStateResult_descriptor_,
      HeroChange2WaitStateResult::default_instance_,
      HeroChange2WaitStateResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroChange2WaitStateResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroChange2WaitStateResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeroChange2WaitStateResult));
  HeroChange2WaitStateResult_ProtoModID_descriptor_ = HeroChange2WaitStateResult_descriptor_->enum_type(0);
  HeroChange2WaitStateResult_ProtoFunID_descriptor_ = HeroChange2WaitStateResult_descriptor_->enum_type(1);
  stNotifyRoleAddExp_descriptor_ = file->message_type(34);
  static const int stNotifyRoleAddExp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyRoleAddExp, addexp_),
  };
  stNotifyRoleAddExp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stNotifyRoleAddExp_descriptor_,
      stNotifyRoleAddExp::default_instance_,
      stNotifyRoleAddExp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyRoleAddExp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyRoleAddExp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stNotifyRoleAddExp));
  stNotifyRoleAddExp_ProtoModID_descriptor_ = stNotifyRoleAddExp_descriptor_->enum_type(0);
  stNotifyRoleAddExp_ProtoFunID_descriptor_ = stNotifyRoleAddExp_descriptor_->enum_type(1);
  stSynRoleLevel_descriptor_ = file->message_type(35);
  static const int stSynRoleLevel_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynRoleLevel, curlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynRoleLevel, curexp_),
  };
  stSynRoleLevel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSynRoleLevel_descriptor_,
      stSynRoleLevel::default_instance_,
      stSynRoleLevel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynRoleLevel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynRoleLevel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSynRoleLevel));
  stSynRoleLevel_ProtoModID_descriptor_ = stSynRoleLevel_descriptor_->enum_type(0);
  stSynRoleLevel_ProtoFunID_descriptor_ = stSynRoleLevel_descriptor_->enum_type(1);
  stSynHeroLv_descriptor_ = file->message_type(36);
  static const int stSynHeroLv_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynHeroLv, heroid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynHeroLv, curexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynHeroLv, curlv_),
  };
  stSynHeroLv_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSynHeroLv_descriptor_,
      stSynHeroLv::default_instance_,
      stSynHeroLv_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynHeroLv, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynHeroLv, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSynHeroLv));
  stSynHeroLv_ProtoModID_descriptor_ = stSynHeroLv_descriptor_->enum_type(0);
  stSynHeroLv_ProtoFunID_descriptor_ = stSynHeroLv_descriptor_->enum_type(1);
  stSynBagPos_descriptor_ = file->message_type(37);
  static const int stSynBagPos_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynBagPos, bagtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynBagPos, pos_),
  };
  stSynBagPos_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSynBagPos_descriptor_,
      stSynBagPos::default_instance_,
      stSynBagPos_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynBagPos, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynBagPos, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSynBagPos));
  stMoveItem_descriptor_ = file->message_type(38);
  static const int stMoveItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stMoveItem, bagtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stMoveItem, instanceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stMoveItem, bagpos_),
  };
  stMoveItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stMoveItem_descriptor_,
      stMoveItem::default_instance_,
      stMoveItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stMoveItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stMoveItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stMoveItem));
  stMoveItem_ProtoModID_descriptor_ = stMoveItem_descriptor_->enum_type(0);
  stMoveItem_ProtoFunID_descriptor_ = stMoveItem_descriptor_->enum_type(1);
  stReqArrangeMainBag_descriptor_ = file->message_type(39);
  static const int stReqArrangeMainBag_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqArrangeMainBag, bagtype_),
  };
  stReqArrangeMainBag_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqArrangeMainBag_descriptor_,
      stReqArrangeMainBag::default_instance_,
      stReqArrangeMainBag_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqArrangeMainBag, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqArrangeMainBag, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqArrangeMainBag));
  stReqArrangeMainBag_ProtoModID_descriptor_ = stReqArrangeMainBag_descriptor_->enum_type(0);
  stReqArrangeMainBag_ProtoFunID_descriptor_ = stReqArrangeMainBag_descriptor_->enum_type(1);
  stReArrangeMainBagError_descriptor_ = file->message_type(40);
  static const int stReArrangeMainBagError_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReArrangeMainBagError, errorcode_),
  };
  stReArrangeMainBagError_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReArrangeMainBagError_descriptor_,
      stReArrangeMainBagError::default_instance_,
      stReArrangeMainBagError_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReArrangeMainBagError, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReArrangeMainBagError, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReArrangeMainBagError));
  stReArrangeMainBagError_ProtoModID_descriptor_ = stReArrangeMainBagError_descriptor_->enum_type(0);
  stReArrangeMainBagError_ProtoFunID_descriptor_ = stReArrangeMainBagError_descriptor_->enum_type(1);
  stRefreshMainBag_descriptor_ = file->message_type(41);
  static const int stRefreshMainBag_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRefreshMainBag, cdtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRefreshMainBag, data_),
  };
  stRefreshMainBag_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRefreshMainBag_descriptor_,
      stRefreshMainBag::default_instance_,
      stRefreshMainBag_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRefreshMainBag, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRefreshMainBag, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRefreshMainBag));
  stRefreshMainBag_ProtoModID_descriptor_ = stRefreshMainBag_descriptor_->enum_type(0);
  stRefreshMainBag_ProtoFunID_descriptor_ = stRefreshMainBag_descriptor_->enum_type(1);
  stReqCombineHero_descriptor_ = file->message_type(42);
  static const int stReqCombineHero_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqCombineHero, heroid_),
  };
  stReqCombineHero_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqCombineHero_descriptor_,
      stReqCombineHero::default_instance_,
      stReqCombineHero_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqCombineHero, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqCombineHero, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqCombineHero));
  stReqCombineHero_ProtoModID_descriptor_ = stReqCombineHero_descriptor_->enum_type(0);
  stReqCombineHero_ProtoFunID_descriptor_ = stReqCombineHero_descriptor_->enum_type(1);
  stCombineHeroResult_descriptor_ = file->message_type(43);
  static const int stCombineHeroResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCombineHeroResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCombineHeroResult, heroid_),
  };
  stCombineHeroResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stCombineHeroResult_descriptor_,
      stCombineHeroResult::default_instance_,
      stCombineHeroResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCombineHeroResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCombineHeroResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stCombineHeroResult));
  stCombineHeroResult_Result_descriptor_ = stCombineHeroResult_descriptor_->enum_type(0);
  stCombineHeroResult_ProtoModID_descriptor_ = stCombineHeroResult_descriptor_->enum_type(1);
  stCombineHeroResult_ProtoFunID_descriptor_ = stCombineHeroResult_descriptor_->enum_type(2);
  stReqLevelupHero_descriptor_ = file->message_type(44);
  static const int stReqLevelupHero_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqLevelupHero, heroid_),
  };
  stReqLevelupHero_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqLevelupHero_descriptor_,
      stReqLevelupHero::default_instance_,
      stReqLevelupHero_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqLevelupHero, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqLevelupHero, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqLevelupHero));
  stReqLevelupHero_ProtoModID_descriptor_ = stReqLevelupHero_descriptor_->enum_type(0);
  stReqLevelupHero_ProtoFunID_descriptor_ = stReqLevelupHero_descriptor_->enum_type(1);
  stLevelupHeroResult_descriptor_ = file->message_type(45);
  static const int stLevelupHeroResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stLevelupHeroResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stLevelupHeroResult, heroid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stLevelupHeroResult, curlv_),
  };
  stLevelupHeroResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stLevelupHeroResult_descriptor_,
      stLevelupHeroResult::default_instance_,
      stLevelupHeroResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stLevelupHeroResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stLevelupHeroResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stLevelupHeroResult));
  stLevelupHeroResult_Result_descriptor_ = stLevelupHeroResult_descriptor_->enum_type(0);
  stLevelupHeroResult_ProtoModID_descriptor_ = stLevelupHeroResult_descriptor_->enum_type(1);
  stLevelupHeroResult_ProtoFunID_descriptor_ = stLevelupHeroResult_descriptor_->enum_type(2);
  stReqHeroEvolution_descriptor_ = file->message_type(46);
  static const int stReqHeroEvolution_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqHeroEvolution, heroid_),
  };
  stReqHeroEvolution_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqHeroEvolution_descriptor_,
      stReqHeroEvolution::default_instance_,
      stReqHeroEvolution_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqHeroEvolution, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqHeroEvolution, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqHeroEvolution));
  stReqHeroEvolution_ProtoModID_descriptor_ = stReqHeroEvolution_descriptor_->enum_type(0);
  stReqHeroEvolution_ProtoFunID_descriptor_ = stReqHeroEvolution_descriptor_->enum_type(1);
  stEvolutionHeroResult_descriptor_ = file->message_type(47);
  static const int stEvolutionHeroResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stEvolutionHeroResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stEvolutionHeroResult, heroid_),
  };
  stEvolutionHeroResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stEvolutionHeroResult_descriptor_,
      stEvolutionHeroResult::default_instance_,
      stEvolutionHeroResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stEvolutionHeroResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stEvolutionHeroResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stEvolutionHeroResult));
  stEvolutionHeroResult_Result_descriptor_ = stEvolutionHeroResult_descriptor_->enum_type(0);
  stEvolutionHeroResult_ProtoModID_descriptor_ = stEvolutionHeroResult_descriptor_->enum_type(1);
  stEvolutionHeroResult_ProtoFunID_descriptor_ = stEvolutionHeroResult_descriptor_->enum_type(2);
  stReqHeroStudySkill_descriptor_ = file->message_type(48);
  static const int stReqHeroStudySkill_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqHeroStudySkill, heroid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqHeroStudySkill, type_),
  };
  stReqHeroStudySkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqHeroStudySkill_descriptor_,
      stReqHeroStudySkill::default_instance_,
      stReqHeroStudySkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqHeroStudySkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqHeroStudySkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqHeroStudySkill));
  stReqHeroStudySkill_Type_descriptor_ = stReqHeroStudySkill_descriptor_->enum_type(0);
  stReqHeroStudySkill_ProtoModID_descriptor_ = stReqHeroStudySkill_descriptor_->enum_type(1);
  stReqHeroStudySkill_ProtoFunID_descriptor_ = stReqHeroStudySkill_descriptor_->enum_type(2);
  stHeroStudySkillResult_descriptor_ = file->message_type(49);
  static const int stHeroStudySkillResult_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stHeroStudySkillResult, heroid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stHeroStudySkillResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stHeroStudySkillResult, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stHeroStudySkillResult, skilllv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stHeroStudySkillResult, usediamondnum_),
  };
  stHeroStudySkillResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stHeroStudySkillResult_descriptor_,
      stHeroStudySkillResult::default_instance_,
      stHeroStudySkillResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stHeroStudySkillResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stHeroStudySkillResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stHeroStudySkillResult));
  stHeroStudySkillResult_Result_descriptor_ = stHeroStudySkillResult_descriptor_->enum_type(0);
  stHeroStudySkillResult_ProtoModID_descriptor_ = stHeroStudySkillResult_descriptor_->enum_type(1);
  stHeroStudySkillResult_ProtoFunID_descriptor_ = stHeroStudySkillResult_descriptor_->enum_type(2);
  stReqRefineHeroSkill_descriptor_ = file->message_type(50);
  static const int stReqRefineHeroSkill_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqRefineHeroSkill, heroid_),
  };
  stReqRefineHeroSkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqRefineHeroSkill_descriptor_,
      stReqRefineHeroSkill::default_instance_,
      stReqRefineHeroSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqRefineHeroSkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqRefineHeroSkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqRefineHeroSkill));
  stReqRefineHeroSkill_ProtoModID_descriptor_ = stReqRefineHeroSkill_descriptor_->enum_type(0);
  stReqRefineHeroSkill_ProtoFunID_descriptor_ = stReqRefineHeroSkill_descriptor_->enum_type(1);
  stRefineHeroSkillResult_descriptor_ = file->message_type(51);
  static const int stRefineHeroSkillResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRefineHeroSkillResult, heroid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRefineHeroSkillResult, result_),
  };
  stRefineHeroSkillResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRefineHeroSkillResult_descriptor_,
      stRefineHeroSkillResult::default_instance_,
      stRefineHeroSkillResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRefineHeroSkillResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRefineHeroSkillResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRefineHeroSkillResult));
  stRefineHeroSkillResult_Result_descriptor_ = stRefineHeroSkillResult_descriptor_->enum_type(0);
  stRefineHeroSkillResult_ProtoModID_descriptor_ = stRefineHeroSkillResult_descriptor_->enum_type(1);
  stRefineHeroSkillResult_ProtoFunID_descriptor_ = stRefineHeroSkillResult_descriptor_->enum_type(2);
  stSynSkillExp_descriptor_ = file->message_type(52);
  static const int stSynSkillExp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynSkillExp, curexp_),
  };
  stSynSkillExp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSynSkillExp_descriptor_,
      stSynSkillExp::default_instance_,
      stSynSkillExp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynSkillExp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynSkillExp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSynSkillExp));
  stSynSkillExp_ProtoModID_descriptor_ = stSynSkillExp_descriptor_->enum_type(0);
  stSynSkillExp_ProtoFunID_descriptor_ = stSynSkillExp_descriptor_->enum_type(1);
  stReqReplaceHeroSkill_descriptor_ = file->message_type(53);
  static const int stReqReplaceHeroSkill_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqReplaceHeroSkill, heroid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqReplaceHeroSkill, pos_),
  };
  stReqReplaceHeroSkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqReplaceHeroSkill_descriptor_,
      stReqReplaceHeroSkill::default_instance_,
      stReqReplaceHeroSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqReplaceHeroSkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqReplaceHeroSkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqReplaceHeroSkill));
  stReqReplaceHeroSkill_ProtoModID_descriptor_ = stReqReplaceHeroSkill_descriptor_->enum_type(0);
  stReqReplaceHeroSkill_ProtoFunID_descriptor_ = stReqReplaceHeroSkill_descriptor_->enum_type(1);
  stReplaceHeroSkillResult_descriptor_ = file->message_type(54);
  static const int stReplaceHeroSkillResult_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReplaceHeroSkillResult, heroid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReplaceHeroSkillResult, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReplaceHeroSkillResult, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReplaceHeroSkillResult, result_),
  };
  stReplaceHeroSkillResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReplaceHeroSkillResult_descriptor_,
      stReplaceHeroSkillResult::default_instance_,
      stReplaceHeroSkillResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReplaceHeroSkillResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReplaceHeroSkillResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReplaceHeroSkillResult));
  stReplaceHeroSkillResult_Result_descriptor_ = stReplaceHeroSkillResult_descriptor_->enum_type(0);
  stReplaceHeroSkillResult_ProtoModID_descriptor_ = stReplaceHeroSkillResult_descriptor_->enum_type(1);
  stReplaceHeroSkillResult_ProtoFunID_descriptor_ = stReplaceHeroSkillResult_descriptor_->enum_type(2);
  stReqUpgradeHeroSkill_descriptor_ = file->message_type(55);
  static const int stReqUpgradeHeroSkill_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqUpgradeHeroSkill, heroid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqUpgradeHeroSkill, pos_),
  };
  stReqUpgradeHeroSkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqUpgradeHeroSkill_descriptor_,
      stReqUpgradeHeroSkill::default_instance_,
      stReqUpgradeHeroSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqUpgradeHeroSkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqUpgradeHeroSkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqUpgradeHeroSkill));
  stReqUpgradeHeroSkill_ProtoModID_descriptor_ = stReqUpgradeHeroSkill_descriptor_->enum_type(0);
  stReqUpgradeHeroSkill_ProtoFunID_descriptor_ = stReqUpgradeHeroSkill_descriptor_->enum_type(1);
  stUpgradeHeroSkillResult_descriptor_ = file->message_type(56);
  static const int stUpgradeHeroSkillResult_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUpgradeHeroSkillResult, heroid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUpgradeHeroSkillResult, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUpgradeHeroSkillResult, skilllv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUpgradeHeroSkillResult, result_),
  };
  stUpgradeHeroSkillResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stUpgradeHeroSkillResult_descriptor_,
      stUpgradeHeroSkillResult::default_instance_,
      stUpgradeHeroSkillResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUpgradeHeroSkillResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUpgradeHeroSkillResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stUpgradeHeroSkillResult));
  stUpgradeHeroSkillResult_Result_descriptor_ = stUpgradeHeroSkillResult_descriptor_->enum_type(0);
  stUpgradeHeroSkillResult_ProtoModID_descriptor_ = stUpgradeHeroSkillResult_descriptor_->enum_type(1);
  stUpgradeHeroSkillResult_ProtoFunID_descriptor_ = stUpgradeHeroSkillResult_descriptor_->enum_type(2);
  stReqSellItem_descriptor_ = file->message_type(57);
  static const int stReqSellItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqSellItem, bagtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqSellItem, instanceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqSellItem, num_),
  };
  stReqSellItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqSellItem_descriptor_,
      stReqSellItem::default_instance_,
      stReqSellItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqSellItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqSellItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqSellItem));
  stReqSellItem_ProtoModID_descriptor_ = stReqSellItem_descriptor_->enum_type(0);
  stReqSellItem_ProtoFunID_descriptor_ = stReqSellItem_descriptor_->enum_type(1);
  stSellItemResult_descriptor_ = file->message_type(58);
  static const int stSellItemResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSellItemResult, result_),
  };
  stSellItemResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSellItemResult_descriptor_,
      stSellItemResult::default_instance_,
      stSellItemResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSellItemResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSellItemResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSellItemResult));
  stSellItemResult_Result_descriptor_ = stSellItemResult_descriptor_->enum_type(0);
  stSellItemResult_ProtoModID_descriptor_ = stSellItemResult_descriptor_->enum_type(1);
  stSellItemResult_ProtoFunID_descriptor_ = stSellItemResult_descriptor_->enum_type(2);
  stReqRaiseItem_descriptor_ = file->message_type(59);
  static const int stReqRaiseItem_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqRaiseItem, bagtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqRaiseItem, instanceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqRaiseItem, raisetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqRaiseItem, eatinstanceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqRaiseItem, yuntienum_),
  };
  stReqRaiseItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqRaiseItem_descriptor_,
      stReqRaiseItem::default_instance_,
      stReqRaiseItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqRaiseItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqRaiseItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqRaiseItem));
  stReqRaiseItem_eRaiseType_descriptor_ = stReqRaiseItem_descriptor_->enum_type(0);
  stReqRaiseItem_ProtoModID_descriptor_ = stReqRaiseItem_descriptor_->enum_type(1);
  stReqRaiseItem_ProtoFunID_descriptor_ = stReqRaiseItem_descriptor_->enum_type(2);
  stRaiseItemResult_descriptor_ = file->message_type(60);
  static const int stRaiseItemResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRaiseItemResult, bagtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRaiseItemResult, instanceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRaiseItemResult, result_),
  };
  stRaiseItemResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRaiseItemResult_descriptor_,
      stRaiseItemResult::default_instance_,
      stRaiseItemResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRaiseItemResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRaiseItemResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRaiseItemResult));
  stRaiseItemResult_Result_descriptor_ = stRaiseItemResult_descriptor_->enum_type(0);
  stRaiseItemResult_ProtoModID_descriptor_ = stRaiseItemResult_descriptor_->enum_type(1);
  stRaiseItemResult_ProtoFunID_descriptor_ = stRaiseItemResult_descriptor_->enum_type(2);
  stReqSmeltEquip_descriptor_ = file->message_type(61);
  static const int stReqSmeltEquip_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqSmeltEquip, bagtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqSmeltEquip, instanceid_),
  };
  stReqSmeltEquip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqSmeltEquip_descriptor_,
      stReqSmeltEquip::default_instance_,
      stReqSmeltEquip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqSmeltEquip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqSmeltEquip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqSmeltEquip));
  stReqSmeltEquip_ProtoModID_descriptor_ = stReqSmeltEquip_descriptor_->enum_type(0);
  stReqSmeltEquip_ProtoFunID_descriptor_ = stReqSmeltEquip_descriptor_->enum_type(1);
  stSmeltEquipResult_descriptor_ = file->message_type(62);
  static const int stSmeltEquipResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSmeltEquipResult, result_),
  };
  stSmeltEquipResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSmeltEquipResult_descriptor_,
      stSmeltEquipResult::default_instance_,
      stSmeltEquipResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSmeltEquipResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSmeltEquipResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSmeltEquipResult));
  stSmeltEquipResult_Result_descriptor_ = stSmeltEquipResult_descriptor_->enum_type(0);
  stSmeltEquipResult_ProtoModID_descriptor_ = stSmeltEquipResult_descriptor_->enum_type(1);
  stSmeltEquipResult_ProtoFunID_descriptor_ = stSmeltEquipResult_descriptor_->enum_type(2);
  stReqRecastEquip_descriptor_ = file->message_type(63);
  static const int stReqRecastEquip_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqRecastEquip, bagtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqRecastEquip, instanceid_),
  };
  stReqRecastEquip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqRecastEquip_descriptor_,
      stReqRecastEquip::default_instance_,
      stReqRecastEquip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqRecastEquip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqRecastEquip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqRecastEquip));
  stReqRecastEquip_ProtoModID_descriptor_ = stReqRecastEquip_descriptor_->enum_type(0);
  stReqRecastEquip_ProtoFunID_descriptor_ = stReqRecastEquip_descriptor_->enum_type(1);
  RecastEquipResult_descriptor_ = file->message_type(64);
  static const int RecastEquipResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecastEquipResult, result_),
  };
  RecastEquipResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecastEquipResult_descriptor_,
      RecastEquipResult::default_instance_,
      RecastEquipResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecastEquipResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecastEquipResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecastEquipResult));
  RecastEquipResult_Result_descriptor_ = RecastEquipResult_descriptor_->enum_type(0);
  RecastEquipResult_ProtoModID_descriptor_ = RecastEquipResult_descriptor_->enum_type(1);
  RecastEquipResult_ProtoFunID_descriptor_ = RecastEquipResult_descriptor_->enum_type(2);
  stReqCombineItem_descriptor_ = file->message_type(65);
  static const int stReqCombineItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqCombineItem, pieceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqCombineItem, combinenum_),
  };
  stReqCombineItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqCombineItem_descriptor_,
      stReqCombineItem::default_instance_,
      stReqCombineItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqCombineItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqCombineItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqCombineItem));
  stReqCombineItem_ProtoModID_descriptor_ = stReqCombineItem_descriptor_->enum_type(0);
  stReqCombineItem_ProtoFunID_descriptor_ = stReqCombineItem_descriptor_->enum_type(1);
  stCombineItemResult_descriptor_ = file->message_type(66);
  static const int stCombineItemResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCombineItemResult, result_),
  };
  stCombineItemResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stCombineItemResult_descriptor_,
      stCombineItemResult::default_instance_,
      stCombineItemResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCombineItemResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCombineItemResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stCombineItemResult));
  stCombineItemResult_Result_descriptor_ = stCombineItemResult_descriptor_->enum_type(0);
  stCombineItemResult_ProtoModID_descriptor_ = stCombineItemResult_descriptor_->enum_type(1);
  stCombineItemResult_ProtoFunID_descriptor_ = stCombineItemResult_descriptor_->enum_type(2);
  stReqRefreshShoplist_descriptor_ = file->message_type(67);
  static const int stReqRefreshShoplist_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqRefreshShoplist, shopid_),
  };
  stReqRefreshShoplist_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqRefreshShoplist_descriptor_,
      stReqRefreshShoplist::default_instance_,
      stReqRefreshShoplist_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqRefreshShoplist, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqRefreshShoplist, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqRefreshShoplist));
  stReqRefreshShoplist_ProtoModID_descriptor_ = stReqRefreshShoplist_descriptor_->enum_type(0);
  stReqRefreshShoplist_ProtoFunID_descriptor_ = stReqRefreshShoplist_descriptor_->enum_type(1);
  stRefreshShoplistResult_descriptor_ = file->message_type(68);
  static const int stRefreshShoplistResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRefreshShoplistResult, shopid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRefreshShoplistResult, shoplist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRefreshShoplistResult, result_),
  };
  stRefreshShoplistResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRefreshShoplistResult_descriptor_,
      stRefreshShoplistResult::default_instance_,
      stRefreshShoplistResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRefreshShoplistResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRefreshShoplistResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRefreshShoplistResult));
  stRefreshShoplistResult_Result_descriptor_ = stRefreshShoplistResult_descriptor_->enum_type(0);
  stRefreshShoplistResult_ProtoModID_descriptor_ = stRefreshShoplistResult_descriptor_->enum_type(1);
  stRefreshShoplistResult_ProtoFunID_descriptor_ = stRefreshShoplistResult_descriptor_->enum_type(2);
  stChatCmd_descriptor_ = file->message_type(69);
  static const int stChatCmd_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stChatCmd, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stChatCmd, destcharid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stChatCmd, destcharname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stChatCmd, srccharid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stChatCmd, srccharname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stChatCmd, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stChatCmd, job_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stChatCmd, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stChatCmd, viplv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stChatCmd, isvoice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stChatCmd, voiceurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stChatCmd, voicelenght_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stChatCmd, photoid_),
  };
  stChatCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stChatCmd_descriptor_,
      stChatCmd::default_instance_,
      stChatCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stChatCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stChatCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stChatCmd));
  stChatCmd_ProtoModID_descriptor_ = stChatCmd_descriptor_->enum_type(0);
  stChatCmd_ProtoFunID_descriptor_ = stChatCmd_descriptor_->enum_type(1);
  stSynResource_descriptor_ = file->message_type(70);
  static const int stSynResource_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynResource, restype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynResource, num_),
  };
  stSynResource_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSynResource_descriptor_,
      stSynResource::default_instance_,
      stSynResource_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynResource, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynResource, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSynResource));
  stSynResource_ProtoModID_descriptor_ = stSynResource_descriptor_->enum_type(0);
  stSynResource_ProtoFunID_descriptor_ = stSynResource_descriptor_->enum_type(1);
  stSynLevelInfo_descriptor_ = file->message_type(71);
  static const int stSynLevelInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynLevelInfo, levelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynLevelInfo, star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynLevelInfo, rushnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynLevelInfo, resetnum_),
  };
  stSynLevelInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSynLevelInfo_descriptor_,
      stSynLevelInfo::default_instance_,
      stSynLevelInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynLevelInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynLevelInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSynLevelInfo));
  stSynCharpterInfo_descriptor_ = file->message_type(72);
  static const int stSynCharpterInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynCharpterInfo, charpterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynCharpterInfo, rewardstep_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynCharpterInfo, levelinfo_),
  };
  stSynCharpterInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSynCharpterInfo_descriptor_,
      stSynCharpterInfo::default_instance_,
      stSynCharpterInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynCharpterInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynCharpterInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSynCharpterInfo));
  stSynAllLevelInfo_descriptor_ = file->message_type(73);
  static const int stSynAllLevelInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynAllLevelInfo, charpterinfo_),
  };
  stSynAllLevelInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSynAllLevelInfo_descriptor_,
      stSynAllLevelInfo::default_instance_,
      stSynAllLevelInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynAllLevelInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynAllLevelInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSynAllLevelInfo));
  stSynAllLevelInfo_ProtoModID_descriptor_ = stSynAllLevelInfo_descriptor_->enum_type(0);
  stSynAllLevelInfo_ProtoFunID_descriptor_ = stSynAllLevelInfo_descriptor_->enum_type(1);
  stObtainItem_descriptor_ = file->message_type(74);
  static const int stObtainItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stObtainItem, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stObtainItem, num_),
  };
  stObtainItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stObtainItem_descriptor_,
      stObtainItem::default_instance_,
      stObtainItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stObtainItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stObtainItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stObtainItem));
  stReqFinishLv_descriptor_ = file->message_type(75);
  static const int stReqFinishLv_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqFinishLv, levelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqFinishLv, star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqFinishLv, goldcoin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqFinishLv, getitem_),
  };
  stReqFinishLv_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqFinishLv_descriptor_,
      stReqFinishLv::default_instance_,
      stReqFinishLv_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqFinishLv, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqFinishLv, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqFinishLv));
  stReqFinishLv_ProtoModID_descriptor_ = stReqFinishLv_descriptor_->enum_type(0);
  stReqFinishLv_ProtoFunID_descriptor_ = stReqFinishLv_descriptor_->enum_type(1);
  stFinishLvResult_descriptor_ = file->message_type(76);
  static const int stFinishLvResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stFinishLvResult, result_),
  };
  stFinishLvResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stFinishLvResult_descriptor_,
      stFinishLvResult::default_instance_,
      stFinishLvResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stFinishLvResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stFinishLvResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stFinishLvResult));
  stFinishLvResult_eResult_descriptor_ = stFinishLvResult_descriptor_->enum_type(0);
  stFinishLvResult_ProtoModID_descriptor_ = stFinishLvResult_descriptor_->enum_type(1);
  stFinishLvResult_ProtoFunID_descriptor_ = stFinishLvResult_descriptor_->enum_type(2);
  stReqCharpterReward_descriptor_ = file->message_type(77);
  static const int stReqCharpterReward_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqCharpterReward, charpterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqCharpterReward, step_),
  };
  stReqCharpterReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqCharpterReward_descriptor_,
      stReqCharpterReward::default_instance_,
      stReqCharpterReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqCharpterReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqCharpterReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqCharpterReward));
  stReqCharpterReward_ProtoModID_descriptor_ = stReqCharpterReward_descriptor_->enum_type(0);
  stReqCharpterReward_ProtoFunID_descriptor_ = stReqCharpterReward_descriptor_->enum_type(1);
  stCharpterRewardResult_descriptor_ = file->message_type(78);
  static const int stCharpterRewardResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCharpterRewardResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCharpterRewardResult, step_),
  };
  stCharpterRewardResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stCharpterRewardResult_descriptor_,
      stCharpterRewardResult::default_instance_,
      stCharpterRewardResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCharpterRewardResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCharpterRewardResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stCharpterRewardResult));
  stCharpterRewardResult_eResult_descriptor_ = stCharpterRewardResult_descriptor_->enum_type(0);
  stCharpterRewardResult_ProtoModID_descriptor_ = stCharpterRewardResult_descriptor_->enum_type(1);
  stCharpterRewardResult_ProtoFunID_descriptor_ = stCharpterRewardResult_descriptor_->enum_type(2);
  stReqRushLevel_descriptor_ = file->message_type(79);
  static const int stReqRushLevel_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqRushLevel, levelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqRushLevel, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqRushLevel, num_),
  };
  stReqRushLevel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqRushLevel_descriptor_,
      stReqRushLevel::default_instance_,
      stReqRushLevel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqRushLevel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqRushLevel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqRushLevel));
  stReqRushLevel_ProtoModID_descriptor_ = stReqRushLevel_descriptor_->enum_type(0);
  stReqRushLevel_ProtoFunID_descriptor_ = stReqRushLevel_descriptor_->enum_type(1);
  stSynRushReward_descriptor_ = file->message_type(80);
  static const int stSynRushReward_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynRushReward, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynRushReward, num_),
  };
  stSynRushReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSynRushReward_descriptor_,
      stSynRushReward::default_instance_,
      stSynRushReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynRushReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynRushReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSynRushReward));
  stLevelRushResult_descriptor_ = file->message_type(81);
  static const int stLevelRushResult_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stLevelRushResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stLevelRushResult, levelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stLevelRushResult, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stLevelRushResult, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stLevelRushResult, goldcoin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stLevelRushResult, type_),
  };
  stLevelRushResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stLevelRushResult_descriptor_,
      stLevelRushResult::default_instance_,
      stLevelRushResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stLevelRushResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stLevelRushResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stLevelRushResult));
  stLevelRushResult_eResult_descriptor_ = stLevelRushResult_descriptor_->enum_type(0);
  stLevelRushResult_ProtoModID_descriptor_ = stLevelRushResult_descriptor_->enum_type(1);
  stLevelRushResult_ProtoFunID_descriptor_ = stLevelRushResult_descriptor_->enum_type(2);
  stReqResetRushNum_descriptor_ = file->message_type(82);
  static const int stReqResetRushNum_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqResetRushNum, levelid_),
  };
  stReqResetRushNum_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqResetRushNum_descriptor_,
      stReqResetRushNum::default_instance_,
      stReqResetRushNum_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqResetRushNum, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqResetRushNum, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqResetRushNum));
  stReqResetRushNum_ProtoModID_descriptor_ = stReqResetRushNum_descriptor_->enum_type(0);
  stReqResetRushNum_ProtoFunID_descriptor_ = stReqResetRushNum_descriptor_->enum_type(1);
  stResetRushNumResult_descriptor_ = file->message_type(83);
  static const int stResetRushNumResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResetRushNumResult, levelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResetRushNumResult, result_),
  };
  stResetRushNumResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stResetRushNumResult_descriptor_,
      stResetRushNumResult::default_instance_,
      stResetRushNumResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResetRushNumResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResetRushNumResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stResetRushNumResult));
  stResetRushNumResult_eResult_descriptor_ = stResetRushNumResult_descriptor_->enum_type(0);
  stResetRushNumResult_ProtoModID_descriptor_ = stResetRushNumResult_descriptor_->enum_type(1);
  stResetRushNumResult_ProtoFunID_descriptor_ = stResetRushNumResult_descriptor_->enum_type(2);
  stReqRefineEquip_descriptor_ = file->message_type(84);
  static const int stReqRefineEquip_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqRefineEquip, bagtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqRefineEquip, instanceid_),
  };
  stReqRefineEquip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqRefineEquip_descriptor_,
      stReqRefineEquip::default_instance_,
      stReqRefineEquip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqRefineEquip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqRefineEquip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqRefineEquip));
  stReqRefineEquip_ProtoModID_descriptor_ = stReqRefineEquip_descriptor_->enum_type(0);
  stReqRefineEquip_ProtoFunID_descriptor_ = stReqRefineEquip_descriptor_->enum_type(1);
  stRefineEquipResult_descriptor_ = file->message_type(85);
  static const int stRefineEquipResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRefineEquipResult, bagtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRefineEquipResult, instanceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRefineEquipResult, result_),
  };
  stRefineEquipResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRefineEquipResult_descriptor_,
      stRefineEquipResult::default_instance_,
      stRefineEquipResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRefineEquipResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRefineEquipResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRefineEquipResult));
  stRefineEquipResult_eResult_descriptor_ = stRefineEquipResult_descriptor_->enum_type(0);
  stRefineEquipResult_ProtoModID_descriptor_ = stRefineEquipResult_descriptor_->enum_type(1);
  stRefineEquipResult_ProtoFunID_descriptor_ = stRefineEquipResult_descriptor_->enum_type(2);
  stSynTotoalRecharge_descriptor_ = file->message_type(86);
  static const int stSynTotoalRecharge_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynTotoalRecharge, totalrecharge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynTotoalRecharge, todayrecharge_),
  };
  stSynTotoalRecharge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSynTotoalRecharge_descriptor_,
      stSynTotoalRecharge::default_instance_,
      stSynTotoalRecharge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynTotoalRecharge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynTotoalRecharge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSynTotoalRecharge));
  stSynTotoalRecharge_ProtoModID_descriptor_ = stSynTotoalRecharge_descriptor_->enum_type(0);
  stSynTotoalRecharge_ProtoFunID_descriptor_ = stSynTotoalRecharge_descriptor_->enum_type(1);
  stSynSkillInfo_descriptor_ = file->message_type(87);
  static const int stSynSkillInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynSkillInfo, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynSkillInfo, skilllv_),
  };
  stSynSkillInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSynSkillInfo_descriptor_,
      stSynSkillInfo::default_instance_,
      stSynSkillInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynSkillInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynSkillInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSynSkillInfo));
  stSynUserAllSkill_descriptor_ = file->message_type(88);
  static const int stSynUserAllSkill_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynUserAllSkill, skillinfo_),
  };
  stSynUserAllSkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSynUserAllSkill_descriptor_,
      stSynUserAllSkill::default_instance_,
      stSynUserAllSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynUserAllSkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynUserAllSkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSynUserAllSkill));
  stSynUserAllSkill_ProtoModID_descriptor_ = stSynUserAllSkill_descriptor_->enum_type(0);
  stSynUserAllSkill_ProtoFunID_descriptor_ = stSynUserAllSkill_descriptor_->enum_type(1);
  stAddUserSkill_descriptor_ = file->message_type(89);
  static const int stAddUserSkill_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAddUserSkill, data_),
  };
  stAddUserSkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stAddUserSkill_descriptor_,
      stAddUserSkill::default_instance_,
      stAddUserSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAddUserSkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAddUserSkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stAddUserSkill));
  stAddUserSkill_ProtoModID_descriptor_ = stAddUserSkill_descriptor_->enum_type(0);
  stAddUserSkill_ProtoFunID_descriptor_ = stAddUserSkill_descriptor_->enum_type(1);
  stReqUserDetailInfo_descriptor_ = file->message_type(90);
  static const int stReqUserDetailInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqUserDetailInfo, charid_),
  };
  stReqUserDetailInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqUserDetailInfo_descriptor_,
      stReqUserDetailInfo::default_instance_,
      stReqUserDetailInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqUserDetailInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqUserDetailInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqUserDetailInfo));
  stReqUserDetailInfo_ProtoModID_descriptor_ = stReqUserDetailInfo_descriptor_->enum_type(0);
  stReqUserDetailInfo_ProtoFunID_descriptor_ = stReqUserDetailInfo_descriptor_->enum_type(1);
  stUserDetailInfo_descriptor_ = file->message_type(91);
  static const int stUserDetailInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserDetailInfo, maindata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserDetailInfo, itemdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserDetailInfo, herodata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserDetailInfo, guildname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserDetailInfo, couplename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserDetailInfo, mountid_),
  };
  stUserDetailInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stUserDetailInfo_descriptor_,
      stUserDetailInfo::default_instance_,
      stUserDetailInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserDetailInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserDetailInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stUserDetailInfo));
  stUserDetailInfo_ProtoModID_descriptor_ = stUserDetailInfo_descriptor_->enum_type(0);
  stUserDetailInfo_ProtoFunID_descriptor_ = stUserDetailInfo_descriptor_->enum_type(1);
  stUseItem_descriptor_ = file->message_type(92);
  static const int stUseItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUseItem, bagtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUseItem, instanceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUseItem, batchuse_),
  };
  stUseItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stUseItem_descriptor_,
      stUseItem::default_instance_,
      stUseItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUseItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUseItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stUseItem));
  stUseItem_ProtoModID_descriptor_ = stUseItem_descriptor_->enum_type(0);
  stUseItem_ProtoFunID_descriptor_ = stUseItem_descriptor_->enum_type(1);
  stUseItemError_descriptor_ = file->message_type(93);
  static const int stUseItemError_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUseItemError, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUseItemError, itemid_),
  };
  stUseItemError_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stUseItemError_descriptor_,
      stUseItemError::default_instance_,
      stUseItemError_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUseItemError, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUseItemError, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stUseItemError));
  stUseItemError_eResult_descriptor_ = stUseItemError_descriptor_->enum_type(0);
  stUseItemError_ProtoModID_descriptor_ = stUseItemError_descriptor_->enum_type(1);
  stUseItemError_ProtoFunID_descriptor_ = stUseItemError_descriptor_->enum_type(2);
  stSynTipItem_descriptor_ = file->message_type(94);
  static const int stSynTipItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynTipItem, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynTipItem, num_),
  };
  stSynTipItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSynTipItem_descriptor_,
      stSynTipItem::default_instance_,
      stSynTipItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynTipItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynTipItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSynTipItem));
  stObtainItemTip_descriptor_ = file->message_type(95);
  static const int stObtainItemTip_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stObtainItemTip, getitems_),
  };
  stObtainItemTip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stObtainItemTip_descriptor_,
      stObtainItemTip::default_instance_,
      stObtainItemTip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stObtainItemTip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stObtainItemTip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stObtainItemTip));
  stObtainItemTip_ProtoModID_descriptor_ = stObtainItemTip_descriptor_->enum_type(0);
  stObtainItemTip_ProtoFunID_descriptor_ = stObtainItemTip_descriptor_->enum_type(1);
  stReqGetEquipSkill_descriptor_ = file->message_type(96);
  static const int stReqGetEquipSkill_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqGetEquipSkill, bagtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqGetEquipSkill, instanceid_),
  };
  stReqGetEquipSkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqGetEquipSkill_descriptor_,
      stReqGetEquipSkill::default_instance_,
      stReqGetEquipSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqGetEquipSkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqGetEquipSkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqGetEquipSkill));
  stReqGetEquipSkill_ProtoModID_descriptor_ = stReqGetEquipSkill_descriptor_->enum_type(0);
  stReqGetEquipSkill_ProtoFunID_descriptor_ = stReqGetEquipSkill_descriptor_->enum_type(1);
  stGetEquipSkillResult_descriptor_ = file->message_type(97);
  static const int stGetEquipSkillResult_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGetEquipSkillResult, bagtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGetEquipSkillResult, instanceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGetEquipSkillResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGetEquipSkillResult, skillid_),
  };
  stGetEquipSkillResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stGetEquipSkillResult_descriptor_,
      stGetEquipSkillResult::default_instance_,
      stGetEquipSkillResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGetEquipSkillResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGetEquipSkillResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stGetEquipSkillResult));
  stGetEquipSkillResult_eResult_descriptor_ = stGetEquipSkillResult_descriptor_->enum_type(0);
  stGetEquipSkillResult_ProtoModID_descriptor_ = stGetEquipSkillResult_descriptor_->enum_type(1);
  stGetEquipSkillResult_ProtoFunID_descriptor_ = stGetEquipSkillResult_descriptor_->enum_type(2);
  stReqRefineEquipSkill_descriptor_ = file->message_type(98);
  static const int stReqRefineEquipSkill_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqRefineEquipSkill, bagtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqRefineEquipSkill, instanceid_),
  };
  stReqRefineEquipSkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqRefineEquipSkill_descriptor_,
      stReqRefineEquipSkill::default_instance_,
      stReqRefineEquipSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqRefineEquipSkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqRefineEquipSkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqRefineEquipSkill));
  stReqRefineEquipSkill_ProtoModID_descriptor_ = stReqRefineEquipSkill_descriptor_->enum_type(0);
  stReqRefineEquipSkill_ProtoFunID_descriptor_ = stReqRefineEquipSkill_descriptor_->enum_type(1);
  stRefineEquipSkillResult_descriptor_ = file->message_type(99);
  static const int stRefineEquipSkillResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRefineEquipSkillResult, bagtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRefineEquipSkillResult, instanceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRefineEquipSkillResult, result_),
  };
  stRefineEquipSkillResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRefineEquipSkillResult_descriptor_,
      stRefineEquipSkillResult::default_instance_,
      stRefineEquipSkillResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRefineEquipSkillResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRefineEquipSkillResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRefineEquipSkillResult));
  stRefineEquipSkillResult_eResult_descriptor_ = stRefineEquipSkillResult_descriptor_->enum_type(0);
  stRefineEquipSkillResult_ProtoModID_descriptor_ = stRefineEquipSkillResult_descriptor_->enum_type(1);
  stRefineEquipSkillResult_ProtoFunID_descriptor_ = stRefineEquipSkillResult_descriptor_->enum_type(2);
  stMoveEquipSkill2Slot_descriptor_ = file->message_type(100);
  static const int stMoveEquipSkill2Slot_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stMoveEquipSkill2Slot, bagtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stMoveEquipSkill2Slot, instanceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stMoveEquipSkill2Slot, index_),
  };
  stMoveEquipSkill2Slot_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stMoveEquipSkill2Slot_descriptor_,
      stMoveEquipSkill2Slot::default_instance_,
      stMoveEquipSkill2Slot_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stMoveEquipSkill2Slot, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stMoveEquipSkill2Slot, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stMoveEquipSkill2Slot));
  stMoveEquipSkill2Slot_ProtoModID_descriptor_ = stMoveEquipSkill2Slot_descriptor_->enum_type(0);
  stMoveEquipSkill2Slot_ProtoFunID_descriptor_ = stMoveEquipSkill2Slot_descriptor_->enum_type(1);
  stMoveEquipSkillResult_descriptor_ = file->message_type(101);
  static const int stMoveEquipSkillResult_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stMoveEquipSkillResult, bagtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stMoveEquipSkillResult, instanceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stMoveEquipSkillResult, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stMoveEquipSkillResult, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stMoveEquipSkillResult, result_),
  };
  stMoveEquipSkillResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stMoveEquipSkillResult_descriptor_,
      stMoveEquipSkillResult::default_instance_,
      stMoveEquipSkillResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stMoveEquipSkillResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stMoveEquipSkillResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stMoveEquipSkillResult));
  stMoveEquipSkillResult_eResult_descriptor_ = stMoveEquipSkillResult_descriptor_->enum_type(0);
  stMoveEquipSkillResult_ProtoModID_descriptor_ = stMoveEquipSkillResult_descriptor_->enum_type(1);
  stMoveEquipSkillResult_ProtoFunID_descriptor_ = stMoveEquipSkillResult_descriptor_->enum_type(2);
  stReqUpgradeEquipSkill_descriptor_ = file->message_type(102);
  static const int stReqUpgradeEquipSkill_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqUpgradeEquipSkill, bagtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqUpgradeEquipSkill, instanceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqUpgradeEquipSkill, index_),
  };
  stReqUpgradeEquipSkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqUpgradeEquipSkill_descriptor_,
      stReqUpgradeEquipSkill::default_instance_,
      stReqUpgradeEquipSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqUpgradeEquipSkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqUpgradeEquipSkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqUpgradeEquipSkill));
  stReqUpgradeEquipSkill_ProtoModID_descriptor_ = stReqUpgradeEquipSkill_descriptor_->enum_type(0);
  stReqUpgradeEquipSkill_ProtoFunID_descriptor_ = stReqUpgradeEquipSkill_descriptor_->enum_type(1);
  stUpgradeEquipSkillResult_descriptor_ = file->message_type(103);
  static const int stUpgradeEquipSkillResult_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUpgradeEquipSkillResult, bagtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUpgradeEquipSkillResult, instanceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUpgradeEquipSkillResult, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUpgradeEquipSkillResult, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUpgradeEquipSkillResult, result_),
  };
  stUpgradeEquipSkillResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stUpgradeEquipSkillResult_descriptor_,
      stUpgradeEquipSkillResult::default_instance_,
      stUpgradeEquipSkillResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUpgradeEquipSkillResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUpgradeEquipSkillResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stUpgradeEquipSkillResult));
  stUpgradeEquipSkillResult_eResult_descriptor_ = stUpgradeEquipSkillResult_descriptor_->enum_type(0);
  stUpgradeEquipSkillResult_ProtoModID_descriptor_ = stUpgradeEquipSkillResult_descriptor_->enum_type(1);
  stUpgradeEquipSkillResult_ProtoFunID_descriptor_ = stUpgradeEquipSkillResult_descriptor_->enum_type(2);
  stSendPKUserData_descriptor_ = file->message_type(104);
  static const int stSendPKUserData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendPKUserData, maindata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendPKUserData, itemdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendPKUserData, herodata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendPKUserData, pktype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendPKUserData, challengerank_),
  };
  stSendPKUserData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSendPKUserData_descriptor_,
      stSendPKUserData::default_instance_,
      stSendPKUserData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendPKUserData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendPKUserData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSendPKUserData));
  stSendPKUserData_ePKType_descriptor_ = stSendPKUserData_descriptor_->enum_type(0);
  stSendPKUserData_ProtoModID_descriptor_ = stSendPKUserData_descriptor_->enum_type(1);
  stSendPKUserData_ProtoFunID_descriptor_ = stSendPKUserData_descriptor_->enum_type(2);
  stReqRaiseUserSkillLv_descriptor_ = file->message_type(105);
  static const int stReqRaiseUserSkillLv_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqRaiseUserSkillLv, skillid_),
  };
  stReqRaiseUserSkillLv_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqRaiseUserSkillLv_descriptor_,
      stReqRaiseUserSkillLv::default_instance_,
      stReqRaiseUserSkillLv_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqRaiseUserSkillLv, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqRaiseUserSkillLv, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqRaiseUserSkillLv));
  stReqRaiseUserSkillLv_ProtoModID_descriptor_ = stReqRaiseUserSkillLv_descriptor_->enum_type(0);
  stReqRaiseUserSkillLv_ProtoFunID_descriptor_ = stReqRaiseUserSkillLv_descriptor_->enum_type(1);
  stRaiseUserSkillLvResult_descriptor_ = file->message_type(106);
  static const int stRaiseUserSkillLvResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRaiseUserSkillLvResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRaiseUserSkillLvResult, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRaiseUserSkillLvResult, skilllv_),
  };
  stRaiseUserSkillLvResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRaiseUserSkillLvResult_descriptor_,
      stRaiseUserSkillLvResult::default_instance_,
      stRaiseUserSkillLvResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRaiseUserSkillLvResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRaiseUserSkillLvResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRaiseUserSkillLvResult));
  stRaiseUserSkillLvResult_eResult_descriptor_ = stRaiseUserSkillLvResult_descriptor_->enum_type(0);
  stRaiseUserSkillLvResult_ProtoModID_descriptor_ = stRaiseUserSkillLvResult_descriptor_->enum_type(1);
  stRaiseUserSkillLvResult_ProtoFunID_descriptor_ = stRaiseUserSkillLvResult_descriptor_->enum_type(2);
  stNotifyNewBieGuideStep_descriptor_ = file->message_type(107);
  static const int stNotifyNewBieGuideStep_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyNewBieGuideStep, stepid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyNewBieGuideStep, substepid_),
  };
  stNotifyNewBieGuideStep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stNotifyNewBieGuideStep_descriptor_,
      stNotifyNewBieGuideStep::default_instance_,
      stNotifyNewBieGuideStep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyNewBieGuideStep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyNewBieGuideStep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stNotifyNewBieGuideStep));
  stNotifyNewBieGuideStep_ProtoModID_descriptor_ = stNotifyNewBieGuideStep_descriptor_->enum_type(0);
  stNotifyNewBieGuideStep_ProtoFunID_descriptor_ = stNotifyNewBieGuideStep_descriptor_->enum_type(1);
  stSaveNewBieGuideStep_descriptor_ = file->message_type(108);
  static const int stSaveNewBieGuideStep_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSaveNewBieGuideStep, stepid_),
  };
  stSaveNewBieGuideStep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSaveNewBieGuideStep_descriptor_,
      stSaveNewBieGuideStep::default_instance_,
      stSaveNewBieGuideStep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSaveNewBieGuideStep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSaveNewBieGuideStep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSaveNewBieGuideStep));
  stSaveNewBieGuideStep_ProtoModID_descriptor_ = stSaveNewBieGuideStep_descriptor_->enum_type(0);
  stSaveNewBieGuideStep_ProtoFunID_descriptor_ = stSaveNewBieGuideStep_descriptor_->enum_type(1);
  stOpenLevelBox_descriptor_ = file->message_type(109);
  static const int stOpenLevelBox_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOpenLevelBox, charid_),
  };
  stOpenLevelBox_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stOpenLevelBox_descriptor_,
      stOpenLevelBox::default_instance_,
      stOpenLevelBox_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOpenLevelBox, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOpenLevelBox, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stOpenLevelBox));
  stOpenLevelBox_ProtoModID_descriptor_ = stOpenLevelBox_descriptor_->enum_type(0);
  stOpenLevelBox_ProtoFunID_descriptor_ = stOpenLevelBox_descriptor_->enum_type(1);
  stChangeRole_descriptor_ = file->message_type(110);
  static const int stChangeRole_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stChangeRole, charid_),
  };
  stChangeRole_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stChangeRole_descriptor_,
      stChangeRole::default_instance_,
      stChangeRole_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stChangeRole, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stChangeRole, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stChangeRole));
  stChangeRole_ProtoModID_descriptor_ = stChangeRole_descriptor_->enum_type(0);
  stChangeRole_ProtoFunID_descriptor_ = stChangeRole_descriptor_->enum_type(1);
  stGotoSelectRole_descriptor_ = file->message_type(111);
  static const int stGotoSelectRole_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGotoSelectRole, curcharid_),
  };
  stGotoSelectRole_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stGotoSelectRole_descriptor_,
      stGotoSelectRole::default_instance_,
      stGotoSelectRole_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGotoSelectRole, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGotoSelectRole, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stGotoSelectRole));
  stGotoSelectRole_ProtoModID_descriptor_ = stGotoSelectRole_descriptor_->enum_type(0);
  stGotoSelectRole_ProtoFunID_descriptor_ = stGotoSelectRole_descriptor_->enum_type(1);
  stSynRMPShopItem_descriptor_ = file->message_type(112);
  static const int stSynRMPShopItem_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynRMPShopItem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynRMPShopItem, hasbuy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynRMPShopItem, remaintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynRMPShopItem, buycount_),
  };
  stSynRMPShopItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSynRMPShopItem_descriptor_,
      stSynRMPShopItem::default_instance_,
      stSynRMPShopItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynRMPShopItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynRMPShopItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSynRMPShopItem));
  stSynRMBShopInfo_descriptor_ = file->message_type(113);
  static const int stSynRMBShopInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynRMBShopInfo, items_),
  };
  stSynRMBShopInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSynRMBShopInfo_descriptor_,
      stSynRMBShopInfo::default_instance_,
      stSynRMBShopInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynRMBShopInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynRMBShopInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSynRMBShopInfo));
  stSynRMBShopInfo_ProtoModID_descriptor_ = stSynRMBShopInfo_descriptor_->enum_type(0);
  stSynRMBShopInfo_ProtoFunID_descriptor_ = stSynRMBShopInfo_descriptor_->enum_type(1);
  stSynOne2OnePVPItem_descriptor_ = file->message_type(114);
  static const int stSynOne2OnePVPItem_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynOne2OnePVPItem, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynOne2OnePVPItem, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynOne2OnePVPItem, battlepower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynOne2OnePVPItem, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynOne2OnePVPItem, charid_),
  };
  stSynOne2OnePVPItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSynOne2OnePVPItem_descriptor_,
      stSynOne2OnePVPItem::default_instance_,
      stSynOne2OnePVPItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynOne2OnePVPItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynOne2OnePVPItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSynOne2OnePVPItem));
  stOne2OnePVPResult_descriptor_ = file->message_type(115);
  static const int stOne2OnePVPResult_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOne2OnePVPResult, winer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOne2OnePVPResult, loser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOne2OnePVPResult, addscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOne2OnePVPResult, delscore_),
  };
  stOne2OnePVPResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stOne2OnePVPResult_descriptor_,
      stOne2OnePVPResult::default_instance_,
      stOne2OnePVPResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOne2OnePVPResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOne2OnePVPResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stOne2OnePVPResult));
  stOne2OnePVPResult_ProtoModID_descriptor_ = stOne2OnePVPResult_descriptor_->enum_type(0);
  stOne2OnePVPResult_ProtoFunID_descriptor_ = stOne2OnePVPResult_descriptor_->enum_type(1);
  stPrivateChatNotUser_descriptor_ = file->message_type(116);
  static const int stPrivateChatNotUser_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPrivateChatNotUser, destname_),
  };
  stPrivateChatNotUser_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stPrivateChatNotUser_descriptor_,
      stPrivateChatNotUser::default_instance_,
      stPrivateChatNotUser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPrivateChatNotUser, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPrivateChatNotUser, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stPrivateChatNotUser));
  stPrivateChatNotUser_ProtoModID_descriptor_ = stPrivateChatNotUser_descriptor_->enum_type(0);
  stPrivateChatNotUser_ProtoFunID_descriptor_ = stPrivateChatNotUser_descriptor_->enum_type(1);
  stReqRecoverRemainTime_descriptor_ = file->message_type(117);
  static const int stReqRecoverRemainTime_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqRecoverRemainTime, charid_),
  };
  stReqRecoverRemainTime_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqRecoverRemainTime_descriptor_,
      stReqRecoverRemainTime::default_instance_,
      stReqRecoverRemainTime_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqRecoverRemainTime, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqRecoverRemainTime, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqRecoverRemainTime));
  stReqRecoverRemainTime_ProtoModID_descriptor_ = stReqRecoverRemainTime_descriptor_->enum_type(0);
  stReqRecoverRemainTime_ProtoFunID_descriptor_ = stReqRecoverRemainTime_descriptor_->enum_type(1);
  stSPAndLilianRecoverRemainTime_descriptor_ = file->message_type(118);
  static const int stSPAndLilianRecoverRemainTime_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSPAndLilianRecoverRemainTime, spremaintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSPAndLilianRecoverRemainTime, lilianremaintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSPAndLilianRecoverRemainTime, trainspremaintime_),
  };
  stSPAndLilianRecoverRemainTime_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSPAndLilianRecoverRemainTime_descriptor_,
      stSPAndLilianRecoverRemainTime::default_instance_,
      stSPAndLilianRecoverRemainTime_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSPAndLilianRecoverRemainTime, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSPAndLilianRecoverRemainTime, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSPAndLilianRecoverRemainTime));
  stSPAndLilianRecoverRemainTime_ProtoModID_descriptor_ = stSPAndLilianRecoverRemainTime_descriptor_->enum_type(0);
  stSPAndLilianRecoverRemainTime_ProtoFunID_descriptor_ = stSPAndLilianRecoverRemainTime_descriptor_->enum_type(1);
  stSwapHeroBattlePos_descriptor_ = file->message_type(119);
  static const int stSwapHeroBattlePos_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSwapHeroBattlePos, srcheroid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSwapHeroBattlePos, srcpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSwapHeroBattlePos, destheroid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSwapHeroBattlePos, destpos_),
  };
  stSwapHeroBattlePos_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSwapHeroBattlePos_descriptor_,
      stSwapHeroBattlePos::default_instance_,
      stSwapHeroBattlePos_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSwapHeroBattlePos, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSwapHeroBattlePos, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSwapHeroBattlePos));
  stSwapHeroBattlePos_ProtoModID_descriptor_ = stSwapHeroBattlePos_descriptor_->enum_type(0);
  stSwapHeroBattlePos_ProtoFunID_descriptor_ = stSwapHeroBattlePos_descriptor_->enum_type(1);
  stSwapHeroBattlePosError_descriptor_ = file->message_type(120);
  static const int stSwapHeroBattlePosError_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSwapHeroBattlePosError, result_),
  };
  stSwapHeroBattlePosError_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSwapHeroBattlePosError_descriptor_,
      stSwapHeroBattlePosError::default_instance_,
      stSwapHeroBattlePosError_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSwapHeroBattlePosError, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSwapHeroBattlePosError, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSwapHeroBattlePosError));
  stSwapHeroBattlePosError_eResult_descriptor_ = stSwapHeroBattlePosError_descriptor_->enum_type(0);
  stSwapHeroBattlePosError_ProtoModID_descriptor_ = stSwapHeroBattlePosError_descriptor_->enum_type(1);
  stSwapHeroBattlePosError_ProtoFunID_descriptor_ = stSwapHeroBattlePosError_descriptor_->enum_type(2);
  stSynSystemSetting_descriptor_ = file->message_type(121);
  static const int stSynSystemSetting_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynSystemSetting, systemsetting_),
  };
  stSynSystemSetting_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSynSystemSetting_descriptor_,
      stSynSystemSetting::default_instance_,
      stSynSystemSetting_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynSystemSetting, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynSystemSetting, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSynSystemSetting));
  stSynSystemSetting_ProtoModID_descriptor_ = stSynSystemSetting_descriptor_->enum_type(0);
  stSynSystemSetting_ProtoFunID_descriptor_ = stSynSystemSetting_descriptor_->enum_type(1);
  stReqSaveSystemSetting_descriptor_ = file->message_type(122);
  static const int stReqSaveSystemSetting_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqSaveSystemSetting, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqSaveSystemSetting, systemsetting_),
  };
  stReqSaveSystemSetting_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqSaveSystemSetting_descriptor_,
      stReqSaveSystemSetting::default_instance_,
      stReqSaveSystemSetting_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqSaveSystemSetting, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqSaveSystemSetting, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqSaveSystemSetting));
  stReqSaveSystemSetting_ProtoModID_descriptor_ = stReqSaveSystemSetting_descriptor_->enum_type(0);
  stReqSaveSystemSetting_ProtoFunID_descriptor_ = stReqSaveSystemSetting_descriptor_->enum_type(1);
  stUnlockRareSkill_descriptor_ = file->message_type(123);
  static const int stUnlockRareSkill_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUnlockRareSkill, heroid_),
  };
  stUnlockRareSkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stUnlockRareSkill_descriptor_,
      stUnlockRareSkill::default_instance_,
      stUnlockRareSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUnlockRareSkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUnlockRareSkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stUnlockRareSkill));
  stUnlockRareSkill_ProtoModID_descriptor_ = stUnlockRareSkill_descriptor_->enum_type(0);
  stUnlockRareSkill_ProtoFunID_descriptor_ = stUnlockRareSkill_descriptor_->enum_type(1);
  stUnlockRareSkillResult_descriptor_ = file->message_type(124);
  static const int stUnlockRareSkillResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUnlockRareSkillResult, heroid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUnlockRareSkillResult, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUnlockRareSkillResult, result_),
  };
  stUnlockRareSkillResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stUnlockRareSkillResult_descriptor_,
      stUnlockRareSkillResult::default_instance_,
      stUnlockRareSkillResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUnlockRareSkillResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUnlockRareSkillResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stUnlockRareSkillResult));
  stUnlockRareSkillResult_eResult_descriptor_ = stUnlockRareSkillResult_descriptor_->enum_type(0);
  stUnlockRareSkillResult_ProtoModID_descriptor_ = stUnlockRareSkillResult_descriptor_->enum_type(1);
  stUnlockRareSkillResult_ProtoFunID_descriptor_ = stUnlockRareSkillResult_descriptor_->enum_type(2);
  stUpgradeRareSkill_descriptor_ = file->message_type(125);
  static const int stUpgradeRareSkill_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUpgradeRareSkill, heroid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUpgradeRareSkill, skillid_),
  };
  stUpgradeRareSkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stUpgradeRareSkill_descriptor_,
      stUpgradeRareSkill::default_instance_,
      stUpgradeRareSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUpgradeRareSkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUpgradeRareSkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stUpgradeRareSkill));
  stUpgradeRareSkill_ProtoModID_descriptor_ = stUpgradeRareSkill_descriptor_->enum_type(0);
  stUpgradeRareSkill_ProtoFunID_descriptor_ = stUpgradeRareSkill_descriptor_->enum_type(1);
  stUpgradeRareSkillResult_descriptor_ = file->message_type(126);
  static const int stUpgradeRareSkillResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUpgradeRareSkillResult, heroid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUpgradeRareSkillResult, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUpgradeRareSkillResult, result_),
  };
  stUpgradeRareSkillResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stUpgradeRareSkillResult_descriptor_,
      stUpgradeRareSkillResult::default_instance_,
      stUpgradeRareSkillResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUpgradeRareSkillResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUpgradeRareSkillResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stUpgradeRareSkillResult));
  stUpgradeRareSkillResult_eResult_descriptor_ = stUpgradeRareSkillResult_descriptor_->enum_type(0);
  stUpgradeRareSkillResult_ProtoModID_descriptor_ = stUpgradeRareSkillResult_descriptor_->enum_type(1);
  stUpgradeRareSkillResult_ProtoFunID_descriptor_ = stUpgradeRareSkillResult_descriptor_->enum_type(2);
  stReqGiftBag_descriptor_ = file->message_type(127);
  static const int stReqGiftBag_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqGiftBag, code_),
  };
  stReqGiftBag_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqGiftBag_descriptor_,
      stReqGiftBag::default_instance_,
      stReqGiftBag_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqGiftBag, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqGiftBag, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqGiftBag));
  stReqGiftBag_ProtoModID_descriptor_ = stReqGiftBag_descriptor_->enum_type(0);
  stReqGiftBag_ProtoFunID_descriptor_ = stReqGiftBag_descriptor_->enum_type(1);
  stGotGiftBagResult_descriptor_ = file->message_type(128);
  static const int stGotGiftBagResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGotGiftBagResult, result_),
  };
  stGotGiftBagResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stGotGiftBagResult_descriptor_,
      stGotGiftBagResult::default_instance_,
      stGotGiftBagResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGotGiftBagResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGotGiftBagResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stGotGiftBagResult));
  stGotGiftBagResult_eResult_descriptor_ = stGotGiftBagResult_descriptor_->enum_type(0);
  stGotGiftBagResult_ProtoModID_descriptor_ = stGotGiftBagResult_descriptor_->enum_type(1);
  stGotGiftBagResult_ProtoFunID_descriptor_ = stGotGiftBagResult_descriptor_->enum_type(2);
  stSynRealTimeItem_descriptor_ = file->message_type(129);
  static const int stSynRealTimeItem_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynRealTimeItem, rolename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynRealTimeItem, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynRealTimeItem, battlepower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynRealTimeItem, addhonour_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynRealTimeItem, killnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynRealTimeItem, isdie_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynRealTimeItem, charid_),
  };
  stSynRealTimeItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSynRealTimeItem_descriptor_,
      stSynRealTimeItem::default_instance_,
      stSynRealTimeItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynRealTimeItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynRealTimeItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSynRealTimeItem));
  stRealTimePKResult_descriptor_ = file->message_type(130);
  static const int stRealTimePKResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRealTimePKResult, sidea_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRealTimePKResult, sideb_),
  };
  stRealTimePKResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRealTimePKResult_descriptor_,
      stRealTimePKResult::default_instance_,
      stRealTimePKResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRealTimePKResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRealTimePKResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRealTimePKResult));
  stRealTimePKResult_ProtoModID_descriptor_ = stRealTimePKResult_descriptor_->enum_type(0);
  stRealTimePKResult_ProtoFunID_descriptor_ = stRealTimePKResult_descriptor_->enum_type(1);
  stReqFiveRaiseEquip_descriptor_ = file->message_type(131);
  static const int stReqFiveRaiseEquip_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqFiveRaiseEquip, bagtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqFiveRaiseEquip, instanceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqFiveRaiseEquip, tolv_),
  };
  stReqFiveRaiseEquip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqFiveRaiseEquip_descriptor_,
      stReqFiveRaiseEquip::default_instance_,
      stReqFiveRaiseEquip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqFiveRaiseEquip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqFiveRaiseEquip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqFiveRaiseEquip));
  stReqFiveRaiseEquip_ProtoModID_descriptor_ = stReqFiveRaiseEquip_descriptor_->enum_type(0);
  stReqFiveRaiseEquip_ProtoFunID_descriptor_ = stReqFiveRaiseEquip_descriptor_->enum_type(1);
  stFiveRaiseEquipResult_descriptor_ = file->message_type(132);
  static const int stFiveRaiseEquipResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stFiveRaiseEquipResult, bagtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stFiveRaiseEquipResult, instanceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stFiveRaiseEquipResult, result_),
  };
  stFiveRaiseEquipResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stFiveRaiseEquipResult_descriptor_,
      stFiveRaiseEquipResult::default_instance_,
      stFiveRaiseEquipResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stFiveRaiseEquipResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stFiveRaiseEquipResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stFiveRaiseEquipResult));
  stFiveRaiseEquipResult_eResult_descriptor_ = stFiveRaiseEquipResult_descriptor_->enum_type(0);
  stFiveRaiseEquipResult_ProtoModID_descriptor_ = stFiveRaiseEquipResult_descriptor_->enum_type(1);
  stFiveRaiseEquipResult_ProtoFunID_descriptor_ = stFiveRaiseEquipResult_descriptor_->enum_type(2);
  stSynBattleProp_descriptor_ = file->message_type(133);
  static const int stSynBattleProp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynBattleProp, battlepower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynBattleProp, battleprop_),
  };
  stSynBattleProp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSynBattleProp_descriptor_,
      stSynBattleProp::default_instance_,
      stSynBattleProp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynBattleProp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynBattleProp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSynBattleProp));
  stSynBattleProp_ProtoModID_descriptor_ = stSynBattleProp_descriptor_->enum_type(0);
  stSynBattleProp_ProtoFunID_descriptor_ = stSynBattleProp_descriptor_->enum_type(1);
  stSynTeamCopyMapNum_descriptor_ = file->message_type(134);
  static const int stSynTeamCopyMapNum_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynTeamCopyMapNum, num_),
  };
  stSynTeamCopyMapNum_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSynTeamCopyMapNum_descriptor_,
      stSynTeamCopyMapNum::default_instance_,
      stSynTeamCopyMapNum_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynTeamCopyMapNum, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynTeamCopyMapNum, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSynTeamCopyMapNum));
  stSynTeamCopyMapNum_ProtoModID_descriptor_ = stSynTeamCopyMapNum_descriptor_->enum_type(0);
  stSynTeamCopyMapNum_ProtoFunID_descriptor_ = stSynTeamCopyMapNum_descriptor_->enum_type(1);
  stSynRealTimePKNum_descriptor_ = file->message_type(135);
  static const int stSynRealTimePKNum_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynRealTimePKNum, num_),
  };
  stSynRealTimePKNum_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSynRealTimePKNum_descriptor_,
      stSynRealTimePKNum::default_instance_,
      stSynRealTimePKNum_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynRealTimePKNum, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynRealTimePKNum, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSynRealTimePKNum));
  stSynRealTimePKNum_ProtoModID_descriptor_ = stSynRealTimePKNum_descriptor_->enum_type(0);
  stSynRealTimePKNum_ProtoFunID_descriptor_ = stSynRealTimePKNum_descriptor_->enum_type(1);
  stCopymapFail_descriptor_ = file->message_type(136);
  static const int stCopymapFail_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCopymapFail, copymapid_),
  };
  stCopymapFail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stCopymapFail_descriptor_,
      stCopymapFail::default_instance_,
      stCopymapFail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCopymapFail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCopymapFail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stCopymapFail));
  stCopymapFail_ProtoModID_descriptor_ = stCopymapFail_descriptor_->enum_type(0);
  stCopymapFail_ProtoFunID_descriptor_ = stCopymapFail_descriptor_->enum_type(1);
  stReqHero10TimeStudySkill_descriptor_ = file->message_type(137);
  static const int stReqHero10TimeStudySkill_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqHero10TimeStudySkill, heroid_),
  };
  stReqHero10TimeStudySkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqHero10TimeStudySkill_descriptor_,
      stReqHero10TimeStudySkill::default_instance_,
      stReqHero10TimeStudySkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqHero10TimeStudySkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqHero10TimeStudySkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqHero10TimeStudySkill));
  stReqHero10TimeStudySkill_ProtoModID_descriptor_ = stReqHero10TimeStudySkill_descriptor_->enum_type(0);
  stReqHero10TimeStudySkill_ProtoFunID_descriptor_ = stReqHero10TimeStudySkill_descriptor_->enum_type(1);
  stHero10TimesStudySkillResult_descriptor_ = file->message_type(138);
  static const int stHero10TimesStudySkillResult_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stHero10TimesStudySkillResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stHero10TimesStudySkillResult, heroid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stHero10TimesStudySkillResult, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stHero10TimesStudySkillResult, usediamondnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stHero10TimesStudySkillResult, addskillexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stHero10TimesStudySkillResult, studyskillnum_),
  };
  stHero10TimesStudySkillResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stHero10TimesStudySkillResult_descriptor_,
      stHero10TimesStudySkillResult::default_instance_,
      stHero10TimesStudySkillResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stHero10TimesStudySkillResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stHero10TimesStudySkillResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stHero10TimesStudySkillResult));
  stHero10TimesStudySkillResult_eResult_descriptor_ = stHero10TimesStudySkillResult_descriptor_->enum_type(0);
  stHero10TimesStudySkillResult_ProtoModID_descriptor_ = stHero10TimesStudySkillResult_descriptor_->enum_type(1);
  stHero10TimesStudySkillResult_ProtoFunID_descriptor_ = stHero10TimesStudySkillResult_descriptor_->enum_type(2);
  st10TimesGetEquipSkill_descriptor_ = file->message_type(139);
  static const int st10TimesGetEquipSkill_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(st10TimesGetEquipSkill, bagtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(st10TimesGetEquipSkill, instanceid_),
  };
  st10TimesGetEquipSkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      st10TimesGetEquipSkill_descriptor_,
      st10TimesGetEquipSkill::default_instance_,
      st10TimesGetEquipSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(st10TimesGetEquipSkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(st10TimesGetEquipSkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(st10TimesGetEquipSkill));
  st10TimesGetEquipSkill_ProtoModID_descriptor_ = st10TimesGetEquipSkill_descriptor_->enum_type(0);
  st10TimesGetEquipSkill_ProtoFunID_descriptor_ = st10TimesGetEquipSkill_descriptor_->enum_type(1);
  st10TimesGetEquipSkillResult_descriptor_ = file->message_type(140);
  static const int st10TimesGetEquipSkillResult_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(st10TimesGetEquipSkillResult, bagtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(st10TimesGetEquipSkillResult, instanceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(st10TimesGetEquipSkillResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(st10TimesGetEquipSkillResult, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(st10TimesGetEquipSkillResult, juexingnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(st10TimesGetEquipSkillResult, getjuexingexp_),
  };
  st10TimesGetEquipSkillResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      st10TimesGetEquipSkillResult_descriptor_,
      st10TimesGetEquipSkillResult::default_instance_,
      st10TimesGetEquipSkillResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(st10TimesGetEquipSkillResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(st10TimesGetEquipSkillResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(st10TimesGetEquipSkillResult));
  st10TimesGetEquipSkillResult_eResult_descriptor_ = st10TimesGetEquipSkillResult_descriptor_->enum_type(0);
  st10TimesGetEquipSkillResult_ProtoModID_descriptor_ = st10TimesGetEquipSkillResult_descriptor_->enum_type(1);
  st10TimesGetEquipSkillResult_ProtoFunID_descriptor_ = st10TimesGetEquipSkillResult_descriptor_->enum_type(2);
  stReqFirstRechargeReward_descriptor_ = file->message_type(141);
  static const int stReqFirstRechargeReward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqFirstRechargeReward, charid_),
  };
  stReqFirstRechargeReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqFirstRechargeReward_descriptor_,
      stReqFirstRechargeReward::default_instance_,
      stReqFirstRechargeReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqFirstRechargeReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqFirstRechargeReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqFirstRechargeReward));
  stReqFirstRechargeReward_ProtoModID_descriptor_ = stReqFirstRechargeReward_descriptor_->enum_type(0);
  stReqFirstRechargeReward_ProtoFunID_descriptor_ = stReqFirstRechargeReward_descriptor_->enum_type(1);
  stRetFirstRechargeReward_descriptor_ = file->message_type(142);
  static const int stRetFirstRechargeReward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetFirstRechargeReward, result_),
  };
  stRetFirstRechargeReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRetFirstRechargeReward_descriptor_,
      stRetFirstRechargeReward::default_instance_,
      stRetFirstRechargeReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetFirstRechargeReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetFirstRechargeReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRetFirstRechargeReward));
  stRetFirstRechargeReward_eResult_descriptor_ = stRetFirstRechargeReward_descriptor_->enum_type(0);
  stRetFirstRechargeReward_ProtoModID_descriptor_ = stRetFirstRechargeReward_descriptor_->enum_type(1);
  stRetFirstRechargeReward_ProtoFunID_descriptor_ = stRetFirstRechargeReward_descriptor_->enum_type(2);
  stSynMobaItem_descriptor_ = file->message_type(143);
  static const int stSynMobaItem_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynMobaItem, rolename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynMobaItem, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynMobaItem, battlepower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynMobaItem, addhonour_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynMobaItem, killnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynMobaItem, bekillnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynMobaItem, charid_),
  };
  stSynMobaItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSynMobaItem_descriptor_,
      stSynMobaItem::default_instance_,
      stSynMobaItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynMobaItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynMobaItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSynMobaItem));
  stMobaPKResult_descriptor_ = file->message_type(144);
  static const int stMobaPKResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stMobaPKResult, sidea_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stMobaPKResult, sideb_),
  };
  stMobaPKResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stMobaPKResult_descriptor_,
      stMobaPKResult::default_instance_,
      stMobaPKResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stMobaPKResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stMobaPKResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stMobaPKResult));
  stMobaPKResult_ProtoModID_descriptor_ = stMobaPKResult_descriptor_->enum_type(0);
  stMobaPKResult_ProtoFunID_descriptor_ = stMobaPKResult_descriptor_->enum_type(1);
  stSubNewBieGuideID_descriptor_ = file->message_type(145);
  static const int stSubNewBieGuideID_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSubNewBieGuideID, id_),
  };
  stSubNewBieGuideID_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSubNewBieGuideID_descriptor_,
      stSubNewBieGuideID::default_instance_,
      stSubNewBieGuideID_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSubNewBieGuideID, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSubNewBieGuideID, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSubNewBieGuideID));
  stSubNewBieGuideID_ProtoModID_descriptor_ = stSubNewBieGuideID_descriptor_->enum_type(0);
  stSubNewBieGuideID_ProtoFunID_descriptor_ = stSubNewBieGuideID_descriptor_->enum_type(1);
  stResetTeamCopyMapNum_descriptor_ = file->message_type(146);
  static const int stResetTeamCopyMapNum_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResetTeamCopyMapNum, charid_),
  };
  stResetTeamCopyMapNum_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stResetTeamCopyMapNum_descriptor_,
      stResetTeamCopyMapNum::default_instance_,
      stResetTeamCopyMapNum_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResetTeamCopyMapNum, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResetTeamCopyMapNum, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stResetTeamCopyMapNum));
  stResetTeamCopyMapNum_ProtoModID_descriptor_ = stResetTeamCopyMapNum_descriptor_->enum_type(0);
  stResetTeamCopyMapNum_ProtoFunID_descriptor_ = stResetTeamCopyMapNum_descriptor_->enum_type(1);
  stResetTeampCopyMapNumResult_descriptor_ = file->message_type(147);
  static const int stResetTeampCopyMapNumResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResetTeampCopyMapNumResult, result_),
  };
  stResetTeampCopyMapNumResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stResetTeampCopyMapNumResult_descriptor_,
      stResetTeampCopyMapNumResult::default_instance_,
      stResetTeampCopyMapNumResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResetTeampCopyMapNumResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResetTeampCopyMapNumResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stResetTeampCopyMapNumResult));
  stResetTeampCopyMapNumResult_eResult_descriptor_ = stResetTeampCopyMapNumResult_descriptor_->enum_type(0);
  stResetTeampCopyMapNumResult_ProtoModID_descriptor_ = stResetTeampCopyMapNumResult_descriptor_->enum_type(1);
  stResetTeampCopyMapNumResult_ProtoFunID_descriptor_ = stResetTeampCopyMapNumResult_descriptor_->enum_type(2);
  stResetRealTimeCopyMapNum_descriptor_ = file->message_type(148);
  static const int stResetRealTimeCopyMapNum_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResetRealTimeCopyMapNum, charid_),
  };
  stResetRealTimeCopyMapNum_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stResetRealTimeCopyMapNum_descriptor_,
      stResetRealTimeCopyMapNum::default_instance_,
      stResetRealTimeCopyMapNum_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResetRealTimeCopyMapNum, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResetRealTimeCopyMapNum, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stResetRealTimeCopyMapNum));
  stResetRealTimeCopyMapNum_ProtoModID_descriptor_ = stResetRealTimeCopyMapNum_descriptor_->enum_type(0);
  stResetRealTimeCopyMapNum_ProtoFunID_descriptor_ = stResetRealTimeCopyMapNum_descriptor_->enum_type(1);
  stResetRealTimeCopymapNumResult_descriptor_ = file->message_type(149);
  static const int stResetRealTimeCopymapNumResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResetRealTimeCopymapNumResult, result_),
  };
  stResetRealTimeCopymapNumResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stResetRealTimeCopymapNumResult_descriptor_,
      stResetRealTimeCopymapNumResult::default_instance_,
      stResetRealTimeCopymapNumResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResetRealTimeCopymapNumResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResetRealTimeCopymapNumResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stResetRealTimeCopymapNumResult));
  stResetRealTimeCopymapNumResult_eResult_descriptor_ = stResetRealTimeCopymapNumResult_descriptor_->enum_type(0);
  stResetRealTimeCopymapNumResult_ProtoModID_descriptor_ = stResetRealTimeCopymapNumResult_descriptor_->enum_type(1);
  stResetRealTimeCopymapNumResult_ProtoFunID_descriptor_ = stResetRealTimeCopymapNumResult_descriptor_->enum_type(2);
  stBuyRMBItemSuccess_descriptor_ = file->message_type(150);
  static const int stBuyRMBItemSuccess_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBuyRMBItemSuccess, iteminfo_),
  };
  stBuyRMBItemSuccess_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stBuyRMBItemSuccess_descriptor_,
      stBuyRMBItemSuccess::default_instance_,
      stBuyRMBItemSuccess_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBuyRMBItemSuccess, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBuyRMBItemSuccess, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stBuyRMBItemSuccess));
  stBuyRMBItemSuccess_ProtoModID_descriptor_ = stBuyRMBItemSuccess_descriptor_->enum_type(0);
  stBuyRMBItemSuccess_ProtoFunID_descriptor_ = stBuyRMBItemSuccess_descriptor_->enum_type(1);
  stOne2OnePVPFail_descriptor_ = file->message_type(151);
  static const int stOne2OnePVPFail_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOne2OnePVPFail, loser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOne2OnePVPFail, pkwithfriend_),
  };
  stOne2OnePVPFail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stOne2OnePVPFail_descriptor_,
      stOne2OnePVPFail::default_instance_,
      stOne2OnePVPFail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOne2OnePVPFail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOne2OnePVPFail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stOne2OnePVPFail));
  stOne2OnePVPFail_ProtoModID_descriptor_ = stOne2OnePVPFail_descriptor_->enum_type(0);
  stOne2OnePVPFail_ProtoFunID_descriptor_ = stOne2OnePVPFail_descriptor_->enum_type(1);
  stRealTimeFail_descriptor_ = file->message_type(152);
  static const int stRealTimeFail_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRealTimeFail, sidea_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRealTimeFail, sideb_),
  };
  stRealTimeFail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRealTimeFail_descriptor_,
      stRealTimeFail::default_instance_,
      stRealTimeFail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRealTimeFail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRealTimeFail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRealTimeFail));
  stRealTimeFail_ProtoModID_descriptor_ = stRealTimeFail_descriptor_->enum_type(0);
  stRealTimeFail_ProtoFunID_descriptor_ = stRealTimeFail_descriptor_->enum_type(1);
  stDataInitFinish_descriptor_ = file->message_type(153);
  static const int stDataInitFinish_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDataInitFinish, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDataInitFinish, ip_),
  };
  stDataInitFinish_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stDataInitFinish_descriptor_,
      stDataInitFinish::default_instance_,
      stDataInitFinish_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDataInitFinish, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDataInitFinish, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stDataInitFinish));
  stDataInitFinish_ProtoModID_descriptor_ = stDataInitFinish_descriptor_->enum_type(0);
  stDataInitFinish_ProtoFunID_descriptor_ = stDataInitFinish_descriptor_->enum_type(1);
  stReqFirst10RechargeReward_descriptor_ = file->message_type(154);
  static const int stReqFirst10RechargeReward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqFirst10RechargeReward, charid_),
  };
  stReqFirst10RechargeReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqFirst10RechargeReward_descriptor_,
      stReqFirst10RechargeReward::default_instance_,
      stReqFirst10RechargeReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqFirst10RechargeReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqFirst10RechargeReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqFirst10RechargeReward));
  stReqFirst10RechargeReward_ProtoModID_descriptor_ = stReqFirst10RechargeReward_descriptor_->enum_type(0);
  stReqFirst10RechargeReward_ProtoFunID_descriptor_ = stReqFirst10RechargeReward_descriptor_->enum_type(1);
  stRetFirst10RechargeReward_descriptor_ = file->message_type(155);
  static const int stRetFirst10RechargeReward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetFirst10RechargeReward, result_),
  };
  stRetFirst10RechargeReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRetFirst10RechargeReward_descriptor_,
      stRetFirst10RechargeReward::default_instance_,
      stRetFirst10RechargeReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetFirst10RechargeReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetFirst10RechargeReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRetFirst10RechargeReward));
  stRetFirst10RechargeReward_eResult_descriptor_ = stRetFirst10RechargeReward_descriptor_->enum_type(0);
  stRetFirst10RechargeReward_ProtoModID_descriptor_ = stRetFirst10RechargeReward_descriptor_->enum_type(1);
  stRetFirst10RechargeReward_ProtoFunID_descriptor_ = stRetFirst10RechargeReward_descriptor_->enum_type(2);
  stChatInWorldCoolDown_descriptor_ = file->message_type(156);
  static const int stChatInWorldCoolDown_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stChatInWorldCoolDown, remaintime_),
  };
  stChatInWorldCoolDown_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stChatInWorldCoolDown_descriptor_,
      stChatInWorldCoolDown::default_instance_,
      stChatInWorldCoolDown_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stChatInWorldCoolDown, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stChatInWorldCoolDown, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stChatInWorldCoolDown));
  stChatInWorldCoolDown_ProtoModID_descriptor_ = stChatInWorldCoolDown_descriptor_->enum_type(0);
  stChatInWorldCoolDown_ProtoFunID_descriptor_ = stChatInWorldCoolDown_descriptor_->enum_type(1);
  stSynRoleCreateTime_descriptor_ = file->message_type(157);
  static const int stSynRoleCreateTime_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynRoleCreateTime, createtime_),
  };
  stSynRoleCreateTime_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSynRoleCreateTime_descriptor_,
      stSynRoleCreateTime::default_instance_,
      stSynRoleCreateTime_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynRoleCreateTime, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynRoleCreateTime, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSynRoleCreateTime));
  stSynRoleCreateTime_ProtoModID_descriptor_ = stSynRoleCreateTime_descriptor_->enum_type(0);
  stSynRoleCreateTime_ProtoFunID_descriptor_ = stSynRoleCreateTime_descriptor_->enum_type(1);
  stReqChgEquipSkill_descriptor_ = file->message_type(158);
  static const int stReqChgEquipSkill_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqChgEquipSkill, srcinstanceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqChgEquipSkill, dstinstanceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqChgEquipSkill, chgsouliteminstanceid_),
  };
  stReqChgEquipSkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqChgEquipSkill_descriptor_,
      stReqChgEquipSkill::default_instance_,
      stReqChgEquipSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqChgEquipSkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqChgEquipSkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqChgEquipSkill));
  stReqChgEquipSkill_ProtoModID_descriptor_ = stReqChgEquipSkill_descriptor_->enum_type(0);
  stReqChgEquipSkill_ProtoFunID_descriptor_ = stReqChgEquipSkill_descriptor_->enum_type(1);
  stRetChgEquipSkillResult_descriptor_ = file->message_type(159);
  static const int stRetChgEquipSkillResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetChgEquipSkillResult, srcinstanceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetChgEquipSkillResult, dstinstanceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetChgEquipSkillResult, result_),
  };
  stRetChgEquipSkillResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRetChgEquipSkillResult_descriptor_,
      stRetChgEquipSkillResult::default_instance_,
      stRetChgEquipSkillResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetChgEquipSkillResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetChgEquipSkillResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRetChgEquipSkillResult));
  stRetChgEquipSkillResult_eResult_descriptor_ = stRetChgEquipSkillResult_descriptor_->enum_type(0);
  stRetChgEquipSkillResult_ProtoModID_descriptor_ = stRetChgEquipSkillResult_descriptor_->enum_type(1);
  stRetChgEquipSkillResult_ProtoFunID_descriptor_ = stRetChgEquipSkillResult_descriptor_->enum_type(2);
  stHasCloseBetaReward_descriptor_ = file->message_type(160);
  static const int stHasCloseBetaReward_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stHasCloseBetaReward, boxid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stHasCloseBetaReward, givediamond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stHasCloseBetaReward, giverecharge_),
  };
  stHasCloseBetaReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stHasCloseBetaReward_descriptor_,
      stHasCloseBetaReward::default_instance_,
      stHasCloseBetaReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stHasCloseBetaReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stHasCloseBetaReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stHasCloseBetaReward));
  stHasCloseBetaReward_ProtoModID_descriptor_ = stHasCloseBetaReward_descriptor_->enum_type(0);
  stHasCloseBetaReward_ProtoFunID_descriptor_ = stHasCloseBetaReward_descriptor_->enum_type(1);
  stReqGotCloseBetaReward_descriptor_ = file->message_type(161);
  static const int stReqGotCloseBetaReward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqGotCloseBetaReward, charid_),
  };
  stReqGotCloseBetaReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqGotCloseBetaReward_descriptor_,
      stReqGotCloseBetaReward::default_instance_,
      stReqGotCloseBetaReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqGotCloseBetaReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqGotCloseBetaReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqGotCloseBetaReward));
  stReqGotCloseBetaReward_ProtoModID_descriptor_ = stReqGotCloseBetaReward_descriptor_->enum_type(0);
  stReqGotCloseBetaReward_ProtoFunID_descriptor_ = stReqGotCloseBetaReward_descriptor_->enum_type(1);
  stGotCloseBetaRewardResult_descriptor_ = file->message_type(162);
  static const int stGotCloseBetaRewardResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGotCloseBetaRewardResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGotCloseBetaRewardResult, givediamond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGotCloseBetaRewardResult, giverecharge_),
  };
  stGotCloseBetaRewardResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stGotCloseBetaRewardResult_descriptor_,
      stGotCloseBetaRewardResult::default_instance_,
      stGotCloseBetaRewardResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGotCloseBetaRewardResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGotCloseBetaRewardResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stGotCloseBetaRewardResult));
  stGotCloseBetaRewardResult_eResult_descriptor_ = stGotCloseBetaRewardResult_descriptor_->enum_type(0);
  stGotCloseBetaRewardResult_ProtoModID_descriptor_ = stGotCloseBetaRewardResult_descriptor_->enum_type(1);
  stGotCloseBetaRewardResult_ProtoFunID_descriptor_ = stGotCloseBetaRewardResult_descriptor_->enum_type(2);
  stReqUseMonthCardItem_descriptor_ = file->message_type(163);
  static const int stReqUseMonthCardItem_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqUseMonthCardItem, instanceid_),
  };
  stReqUseMonthCardItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqUseMonthCardItem_descriptor_,
      stReqUseMonthCardItem::default_instance_,
      stReqUseMonthCardItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqUseMonthCardItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqUseMonthCardItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqUseMonthCardItem));
  stReqUseMonthCardItem_ProtoModID_descriptor_ = stReqUseMonthCardItem_descriptor_->enum_type(0);
  stReqUseMonthCardItem_ProtoFunID_descriptor_ = stReqUseMonthCardItem_descriptor_->enum_type(1);
  stRetUseMonthCardItem_descriptor_ = file->message_type(164);
  static const int stRetUseMonthCardItem_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetUseMonthCardItem, result_),
  };
  stRetUseMonthCardItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRetUseMonthCardItem_descriptor_,
      stRetUseMonthCardItem::default_instance_,
      stRetUseMonthCardItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetUseMonthCardItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetUseMonthCardItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRetUseMonthCardItem));
  stRetUseMonthCardItem_eResult_descriptor_ = stRetUseMonthCardItem_descriptor_->enum_type(0);
  stRetUseMonthCardItem_ProtoModID_descriptor_ = stRetUseMonthCardItem_descriptor_->enum_type(1);
  stRetUseMonthCardItem_ProtoFunID_descriptor_ = stRetUseMonthCardItem_descriptor_->enum_type(2);
  stReqUseSelectItemBox_descriptor_ = file->message_type(165);
  static const int stReqUseSelectItemBox_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqUseSelectItemBox, instanceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqUseSelectItemBox, selectindex_),
  };
  stReqUseSelectItemBox_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqUseSelectItemBox_descriptor_,
      stReqUseSelectItemBox::default_instance_,
      stReqUseSelectItemBox_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqUseSelectItemBox, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqUseSelectItemBox, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqUseSelectItemBox));
  stReqUseSelectItemBox_ProtoModID_descriptor_ = stReqUseSelectItemBox_descriptor_->enum_type(0);
  stReqUseSelectItemBox_ProtoFunID_descriptor_ = stReqUseSelectItemBox_descriptor_->enum_type(1);
  stRetUseSelectItemBox_descriptor_ = file->message_type(166);
  static const int stRetUseSelectItemBox_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetUseSelectItemBox, result_),
  };
  stRetUseSelectItemBox_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRetUseSelectItemBox_descriptor_,
      stRetUseSelectItemBox::default_instance_,
      stRetUseSelectItemBox_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetUseSelectItemBox, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetUseSelectItemBox, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRetUseSelectItemBox));
  stRetUseSelectItemBox_eResult_descriptor_ = stRetUseSelectItemBox_descriptor_->enum_type(0);
  stRetUseSelectItemBox_ProtoModID_descriptor_ = stRetUseSelectItemBox_descriptor_->enum_type(1);
  stRetUseSelectItemBox_ProtoFunID_descriptor_ = stRetUseSelectItemBox_descriptor_->enum_type(2);
  stReqUseHeroSkillBook_descriptor_ = file->message_type(167);
  static const int stReqUseHeroSkillBook_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqUseHeroSkillBook, instanceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqUseHeroSkillBook, heroid_),
  };
  stReqUseHeroSkillBook_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqUseHeroSkillBook_descriptor_,
      stReqUseHeroSkillBook::default_instance_,
      stReqUseHeroSkillBook_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqUseHeroSkillBook, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqUseHeroSkillBook, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqUseHeroSkillBook));
  stReqUseHeroSkillBook_ProtoModID_descriptor_ = stReqUseHeroSkillBook_descriptor_->enum_type(0);
  stReqUseHeroSkillBook_ProtoFunID_descriptor_ = stReqUseHeroSkillBook_descriptor_->enum_type(1);
  stRetUseHeroSkillBook_descriptor_ = file->message_type(168);
  static const int stRetUseHeroSkillBook_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetUseHeroSkillBook, result_),
  };
  stRetUseHeroSkillBook_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRetUseHeroSkillBook_descriptor_,
      stRetUseHeroSkillBook::default_instance_,
      stRetUseHeroSkillBook_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetUseHeroSkillBook, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetUseHeroSkillBook, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRetUseHeroSkillBook));
  stRetUseHeroSkillBook_eResult_descriptor_ = stRetUseHeroSkillBook_descriptor_->enum_type(0);
  stRetUseHeroSkillBook_ProtoModID_descriptor_ = stRetUseHeroSkillBook_descriptor_->enum_type(1);
  stRetUseHeroSkillBook_ProtoFunID_descriptor_ = stRetUseHeroSkillBook_descriptor_->enum_type(2);
  stReqUseEquipSkillBook_descriptor_ = file->message_type(169);
  static const int stReqUseEquipSkillBook_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqUseEquipSkillBook, instanceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqUseEquipSkillBook, destbagtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqUseEquipSkillBook, destinstanceid_),
  };
  stReqUseEquipSkillBook_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqUseEquipSkillBook_descriptor_,
      stReqUseEquipSkillBook::default_instance_,
      stReqUseEquipSkillBook_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqUseEquipSkillBook, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqUseEquipSkillBook, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqUseEquipSkillBook));
  stReqUseEquipSkillBook_ProtoModID_descriptor_ = stReqUseEquipSkillBook_descriptor_->enum_type(0);
  stReqUseEquipSkillBook_ProtoFunID_descriptor_ = stReqUseEquipSkillBook_descriptor_->enum_type(1);
  stRetUseEquipSkillBook_descriptor_ = file->message_type(170);
  static const int stRetUseEquipSkillBook_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetUseEquipSkillBook, result_),
  };
  stRetUseEquipSkillBook_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRetUseEquipSkillBook_descriptor_,
      stRetUseEquipSkillBook::default_instance_,
      stRetUseEquipSkillBook_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetUseEquipSkillBook, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetUseEquipSkillBook, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRetUseEquipSkillBook));
  stRetUseEquipSkillBook_eResult_descriptor_ = stRetUseEquipSkillBook_descriptor_->enum_type(0);
  stRetUseEquipSkillBook_ProtoModID_descriptor_ = stRetUseEquipSkillBook_descriptor_->enum_type(1);
  stRetUseEquipSkillBook_ProtoFunID_descriptor_ = stRetUseEquipSkillBook_descriptor_->enum_type(2);
  stReqBreakEquip_descriptor_ = file->message_type(171);
  static const int stReqBreakEquip_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqBreakEquip, bagtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqBreakEquip, instanceid_),
  };
  stReqBreakEquip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqBreakEquip_descriptor_,
      stReqBreakEquip::default_instance_,
      stReqBreakEquip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqBreakEquip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqBreakEquip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqBreakEquip));
  stReqBreakEquip_ProtoModID_descriptor_ = stReqBreakEquip_descriptor_->enum_type(0);
  stReqBreakEquip_ProtoFunID_descriptor_ = stReqBreakEquip_descriptor_->enum_type(1);
  stBreakEquipResult_descriptor_ = file->message_type(172);
  static const int stBreakEquipResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBreakEquipResult, bagtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBreakEquipResult, instanceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBreakEquipResult, result_),
  };
  stBreakEquipResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stBreakEquipResult_descriptor_,
      stBreakEquipResult::default_instance_,
      stBreakEquipResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBreakEquipResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBreakEquipResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stBreakEquipResult));
  stBreakEquipResult_eResult_descriptor_ = stBreakEquipResult_descriptor_->enum_type(0);
  stBreakEquipResult_ProtoModID_descriptor_ = stBreakEquipResult_descriptor_->enum_type(1);
  stBreakEquipResult_ProtoFunID_descriptor_ = stBreakEquipResult_descriptor_->enum_type(2);
  stReqRecastHero_descriptor_ = file->message_type(173);
  static const int stReqRecastHero_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqRecastHero, heroid_),
  };
  stReqRecastHero_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqRecastHero_descriptor_,
      stReqRecastHero::default_instance_,
      stReqRecastHero_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqRecastHero, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqRecastHero, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqRecastHero));
  stReqRecastHero_ProtoModID_descriptor_ = stReqRecastHero_descriptor_->enum_type(0);
  stReqRecastHero_ProtoFunID_descriptor_ = stReqRecastHero_descriptor_->enum_type(1);
  stRecastHeroResult_descriptor_ = file->message_type(174);
  static const int stRecastHeroResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRecastHeroResult, result_),
  };
  stRecastHeroResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRecastHeroResult_descriptor_,
      stRecastHeroResult::default_instance_,
      stRecastHeroResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRecastHeroResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRecastHeroResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRecastHeroResult));
  stRecastHeroResult_Result_descriptor_ = stRecastHeroResult_descriptor_->enum_type(0);
  stRecastHeroResult_ProtoModID_descriptor_ = stRecastHeroResult_descriptor_->enum_type(1);
  stRecastHeroResult_ProtoFunID_descriptor_ = stRecastHeroResult_descriptor_->enum_type(2);
  stReqChangeName_descriptor_ = file->message_type(175);
  static const int stReqChangeName_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqChangeName, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqChangeName, charid_),
  };
  stReqChangeName_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqChangeName_descriptor_,
      stReqChangeName::default_instance_,
      stReqChangeName_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqChangeName, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqChangeName, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqChangeName));
  stReqChangeName_ProtoModID_descriptor_ = stReqChangeName_descriptor_->enum_type(0);
  stReqChangeName_ProtoFunID_descriptor_ = stReqChangeName_descriptor_->enum_type(1);
  stChangeNameResult_descriptor_ = file->message_type(176);
  static const int stChangeNameResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stChangeNameResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stChangeNameResult, name_),
  };
  stChangeNameResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stChangeNameResult_descriptor_,
      stChangeNameResult::default_instance_,
      stChangeNameResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stChangeNameResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stChangeNameResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stChangeNameResult));
  stChangeNameResult_eResult_descriptor_ = stChangeNameResult_descriptor_->enum_type(0);
  stChangeNameResult_ProtoModID_descriptor_ = stChangeNameResult_descriptor_->enum_type(1);
  stChangeNameResult_ProtoFunID_descriptor_ = stChangeNameResult_descriptor_->enum_type(2);
  stReqOpenBuyGoldWindow_descriptor_ = file->message_type(177);
  static const int stReqOpenBuyGoldWindow_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqOpenBuyGoldWindow, charid_),
  };
  stReqOpenBuyGoldWindow_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqOpenBuyGoldWindow_descriptor_,
      stReqOpenBuyGoldWindow::default_instance_,
      stReqOpenBuyGoldWindow_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqOpenBuyGoldWindow, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqOpenBuyGoldWindow, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqOpenBuyGoldWindow));
  stReqOpenBuyGoldWindow_ProtoModID_descriptor_ = stReqOpenBuyGoldWindow_descriptor_->enum_type(0);
  stReqOpenBuyGoldWindow_ProtoFunID_descriptor_ = stReqOpenBuyGoldWindow_descriptor_->enum_type(1);
  stOpenBuyGoldWindowResult_descriptor_ = file->message_type(178);
  static const int stOpenBuyGoldWindowResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOpenBuyGoldWindowResult, buycount_),
  };
  stOpenBuyGoldWindowResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stOpenBuyGoldWindowResult_descriptor_,
      stOpenBuyGoldWindowResult::default_instance_,
      stOpenBuyGoldWindowResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOpenBuyGoldWindowResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOpenBuyGoldWindowResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stOpenBuyGoldWindowResult));
  stOpenBuyGoldWindowResult_ProtoModID_descriptor_ = stOpenBuyGoldWindowResult_descriptor_->enum_type(0);
  stOpenBuyGoldWindowResult_ProtoFunID_descriptor_ = stOpenBuyGoldWindowResult_descriptor_->enum_type(1);
  stReqBuyGold_descriptor_ = file->message_type(179);
  static const int stReqBuyGold_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqBuyGold, charid_),
  };
  stReqBuyGold_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqBuyGold_descriptor_,
      stReqBuyGold::default_instance_,
      stReqBuyGold_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqBuyGold, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqBuyGold, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqBuyGold));
  stReqBuyGold_ProtoModID_descriptor_ = stReqBuyGold_descriptor_->enum_type(0);
  stReqBuyGold_ProtoFunID_descriptor_ = stReqBuyGold_descriptor_->enum_type(1);
  stBuyGoldResult_descriptor_ = file->message_type(180);
  static const int stBuyGoldResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBuyGoldResult, result_),
  };
  stBuyGoldResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stBuyGoldResult_descriptor_,
      stBuyGoldResult::default_instance_,
      stBuyGoldResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBuyGoldResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBuyGoldResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stBuyGoldResult));
  stBuyGoldResult_eResult_descriptor_ = stBuyGoldResult_descriptor_->enum_type(0);
  stBuyGoldResult_ProtoModID_descriptor_ = stBuyGoldResult_descriptor_->enum_type(1);
  stBuyGoldResult_ProtoFunID_descriptor_ = stBuyGoldResult_descriptor_->enum_type(2);
  stSendImpactHeroInfo_descriptor_ = file->message_type(181);
  static const int stSendImpactHeroInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendImpactHeroInfo, data_),
  };
  stSendImpactHeroInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSendImpactHeroInfo_descriptor_,
      stSendImpactHeroInfo::default_instance_,
      stSendImpactHeroInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendImpactHeroInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendImpactHeroInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSendImpactHeroInfo));
  stSendImpactHeroInfo_ProtoModID_descriptor_ = stSendImpactHeroInfo_descriptor_->enum_type(0);
  stSendImpactHeroInfo_ProtoFunID_descriptor_ = stSendImpactHeroInfo_descriptor_->enum_type(1);
  stExpBookLevelLimit_descriptor_ = file->message_type(182);
  static const int stExpBookLevelLimit_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stExpBookLevelLimit, result_),
  };
  stExpBookLevelLimit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stExpBookLevelLimit_descriptor_,
      stExpBookLevelLimit::default_instance_,
      stExpBookLevelLimit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stExpBookLevelLimit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stExpBookLevelLimit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stExpBookLevelLimit));
  stExpBookLevelLimit_eResult_descriptor_ = stExpBookLevelLimit_descriptor_->enum_type(0);
  stExpBookLevelLimit_ProtoModID_descriptor_ = stExpBookLevelLimit_descriptor_->enum_type(1);
  stExpBookLevelLimit_ProtoFunID_descriptor_ = stExpBookLevelLimit_descriptor_->enum_type(2);
  stNotifyPubUniqueID_descriptor_ = file->message_type(183);
  static const int stNotifyPubUniqueID_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyPubUniqueID, uniqueid_),
  };
  stNotifyPubUniqueID_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stNotifyPubUniqueID_descriptor_,
      stNotifyPubUniqueID::default_instance_,
      stNotifyPubUniqueID_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyPubUniqueID, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyPubUniqueID, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stNotifyPubUniqueID));
  stNotifyPubUniqueID_ProtoModID_descriptor_ = stNotifyPubUniqueID_descriptor_->enum_type(0);
  stNotifyPubUniqueID_ProtoFunID_descriptor_ = stNotifyPubUniqueID_descriptor_->enum_type(1);
  EnchantItem_descriptor_ = file->message_type(184);
  static const int EnchantItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnchantItem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnchantItem, num_),
  };
  EnchantItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EnchantItem_descriptor_,
      EnchantItem::default_instance_,
      EnchantItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnchantItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnchantItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EnchantItem));
  stReqEnchant_descriptor_ = file->message_type(185);
  static const int stReqEnchant_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqEnchant, bagtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqEnchant, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqEnchant, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqEnchant, enchantid_),
  };
  stReqEnchant_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqEnchant_descriptor_,
      stReqEnchant::default_instance_,
      stReqEnchant_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqEnchant, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqEnchant, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqEnchant));
  stReqEnchant_ProtoModID_descriptor_ = stReqEnchant_descriptor_->enum_type(0);
  stReqEnchant_ProtoFunID_descriptor_ = stReqEnchant_descriptor_->enum_type(1);
  stRetEnchant_descriptor_ = file->message_type(186);
  static const int stRetEnchant_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetEnchant, bagtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetEnchant, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetEnchant, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetEnchant, enchant_),
  };
  stRetEnchant_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRetEnchant_descriptor_,
      stRetEnchant::default_instance_,
      stRetEnchant_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetEnchant, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetEnchant, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRetEnchant));
  stRetEnchant_eResult_descriptor_ = stRetEnchant_descriptor_->enum_type(0);
  stRetEnchant_ProtoModID_descriptor_ = stRetEnchant_descriptor_->enum_type(1);
  stRetEnchant_ProtoFunID_descriptor_ = stRetEnchant_descriptor_->enum_type(2);
  stReqRecastEnchant_descriptor_ = file->message_type(187);
  static const int stReqRecastEnchant_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqRecastEnchant, bagtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqRecastEnchant, instanceid_),
  };
  stReqRecastEnchant_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqRecastEnchant_descriptor_,
      stReqRecastEnchant::default_instance_,
      stReqRecastEnchant_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqRecastEnchant, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqRecastEnchant, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqRecastEnchant));
  stReqRecastEnchant_ProtoModID_descriptor_ = stReqRecastEnchant_descriptor_->enum_type(0);
  stReqRecastEnchant_ProtoFunID_descriptor_ = stReqRecastEnchant_descriptor_->enum_type(1);
  stRetRecastEnchant_descriptor_ = file->message_type(188);
  static const int stRetRecastEnchant_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetRecastEnchant, bagtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetRecastEnchant, instanceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetRecastEnchant, result_),
  };
  stRetRecastEnchant_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRetRecastEnchant_descriptor_,
      stRetRecastEnchant::default_instance_,
      stRetRecastEnchant_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetRecastEnchant, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetRecastEnchant, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRetRecastEnchant));
  stRetRecastEnchant_eResult_descriptor_ = stRetRecastEnchant_descriptor_->enum_type(0);
  stRetRecastEnchant_ProtoModID_descriptor_ = stRetRecastEnchant_descriptor_->enum_type(1);
  stRetRecastEnchant_ProtoFunID_descriptor_ = stRetRecastEnchant_descriptor_->enum_type(2);
  stReqLockEnchant_descriptor_ = file->message_type(189);
  static const int stReqLockEnchant_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqLockEnchant, bagtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqLockEnchant, instanceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqLockEnchant, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqLockEnchant, islock_),
  };
  stReqLockEnchant_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqLockEnchant_descriptor_,
      stReqLockEnchant::default_instance_,
      stReqLockEnchant_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqLockEnchant, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqLockEnchant, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqLockEnchant));
  stReqLockEnchant_ProtoModID_descriptor_ = stReqLockEnchant_descriptor_->enum_type(0);
  stReqLockEnchant_ProtoFunID_descriptor_ = stReqLockEnchant_descriptor_->enum_type(1);
  stRetLockEnchant_descriptor_ = file->message_type(190);
  static const int stRetLockEnchant_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetLockEnchant, bagtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetLockEnchant, instanceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetLockEnchant, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetLockEnchant, islock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetLockEnchant, result_),
  };
  stRetLockEnchant_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRetLockEnchant_descriptor_,
      stRetLockEnchant::default_instance_,
      stRetLockEnchant_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetLockEnchant, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetLockEnchant, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRetLockEnchant));
  stRetLockEnchant_eResult_descriptor_ = stRetLockEnchant_descriptor_->enum_type(0);
  stRetLockEnchant_ProtoModID_descriptor_ = stRetLockEnchant_descriptor_->enum_type(1);
  stRetLockEnchant_ProtoFunID_descriptor_ = stRetLockEnchant_descriptor_->enum_type(2);
  stHeroLeagueItem_descriptor_ = file->message_type(191);
  static const int stHeroLeagueItem_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stHeroLeagueItem, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stHeroLeagueItem, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stHeroLeagueItem, battlepower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stHeroLeagueItem, score_),
  };
  stHeroLeagueItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stHeroLeagueItem_descriptor_,
      stHeroLeagueItem::default_instance_,
      stHeroLeagueItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stHeroLeagueItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stHeroLeagueItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stHeroLeagueItem));
  stHerLeagueResult_descriptor_ = file->message_type(192);
  static const int stHerLeagueResult_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stHerLeagueResult, winer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stHerLeagueResult, loser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stHerLeagueResult, winerscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stHerLeagueResult, loserscore_),
  };
  stHerLeagueResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stHerLeagueResult_descriptor_,
      stHerLeagueResult::default_instance_,
      stHerLeagueResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stHerLeagueResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stHerLeagueResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stHerLeagueResult));
  stHerLeagueResult_ProtoModID_descriptor_ = stHerLeagueResult_descriptor_->enum_type(0);
  stHerLeagueResult_ProtoFunID_descriptor_ = stHerLeagueResult_descriptor_->enum_type(1);
  stReqHeroRune_descriptor_ = file->message_type(193);
  static const int stReqHeroRune_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqHeroRune, heroid_),
  };
  stReqHeroRune_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqHeroRune_descriptor_,
      stReqHeroRune::default_instance_,
      stReqHeroRune_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqHeroRune, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqHeroRune, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqHeroRune));
  stReqHeroRune_ProtoModID_descriptor_ = stReqHeroRune_descriptor_->enum_type(0);
  stReqHeroRune_ProtoFunID_descriptor_ = stReqHeroRune_descriptor_->enum_type(1);
  stHeroRuneInfo_descriptor_ = file->message_type(194);
  static const int stHeroRuneInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stHeroRuneInfo, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stHeroRuneInfo, instanceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stHeroRuneInfo, slot_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stHeroRuneInfo, pos_),
  };
  stHeroRuneInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stHeroRuneInfo_descriptor_,
      stHeroRuneInfo::default_instance_,
      stHeroRuneInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stHeroRuneInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stHeroRuneInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stHeroRuneInfo));
  stRetHeroRune_descriptor_ = file->message_type(195);
  static const int stRetHeroRune_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetHeroRune, heroid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetHeroRune, runes_),
  };
  stRetHeroRune_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRetHeroRune_descriptor_,
      stRetHeroRune::default_instance_,
      stRetHeroRune_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetHeroRune, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetHeroRune, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRetHeroRune));
  stRetHeroRune_ProtoModID_descriptor_ = stRetHeroRune_descriptor_->enum_type(0);
  stRetHeroRune_ProtoFunID_descriptor_ = stRetHeroRune_descriptor_->enum_type(1);
  stReqAddHeroRune_descriptor_ = file->message_type(196);
  static const int stReqAddHeroRune_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqAddHeroRune, heroid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqAddHeroRune, instanceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqAddHeroRune, pos_),
  };
  stReqAddHeroRune_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqAddHeroRune_descriptor_,
      stReqAddHeroRune::default_instance_,
      stReqAddHeroRune_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqAddHeroRune, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqAddHeroRune, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqAddHeroRune));
  stReqAddHeroRune_ProtoModID_descriptor_ = stReqAddHeroRune_descriptor_->enum_type(0);
  stReqAddHeroRune_ProtoFunID_descriptor_ = stReqAddHeroRune_descriptor_->enum_type(1);
  stRetAddHeroRune_descriptor_ = file->message_type(197);
  static const int stRetAddHeroRune_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetAddHeroRune, heroid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetAddHeroRune, instanceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetAddHeroRune, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetAddHeroRune, runes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetAddHeroRune, result_),
  };
  stRetAddHeroRune_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRetAddHeroRune_descriptor_,
      stRetAddHeroRune::default_instance_,
      stRetAddHeroRune_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetAddHeroRune, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetAddHeroRune, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRetAddHeroRune));
  stRetAddHeroRune_eResult_descriptor_ = stRetAddHeroRune_descriptor_->enum_type(0);
  stRetAddHeroRune_ProtoModID_descriptor_ = stRetAddHeroRune_descriptor_->enum_type(1);
  stRetAddHeroRune_ProtoFunID_descriptor_ = stRetAddHeroRune_descriptor_->enum_type(2);
  stReqDelHeroRune_descriptor_ = file->message_type(198);
  static const int stReqDelHeroRune_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqDelHeroRune, heroid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqDelHeroRune, instanceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqDelHeroRune, pos_),
  };
  stReqDelHeroRune_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqDelHeroRune_descriptor_,
      stReqDelHeroRune::default_instance_,
      stReqDelHeroRune_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqDelHeroRune, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqDelHeroRune, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqDelHeroRune));
  stReqDelHeroRune_ProtoModID_descriptor_ = stReqDelHeroRune_descriptor_->enum_type(0);
  stReqDelHeroRune_ProtoFunID_descriptor_ = stReqDelHeroRune_descriptor_->enum_type(1);
  stRetDelHeroRune_descriptor_ = file->message_type(199);
  static const int stRetDelHeroRune_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetDelHeroRune, heroid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetDelHeroRune, instanceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetDelHeroRune, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetDelHeroRune, runes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetDelHeroRune, result_),
  };
  stRetDelHeroRune_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRetDelHeroRune_descriptor_,
      stRetDelHeroRune::default_instance_,
      stRetDelHeroRune_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetDelHeroRune, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetDelHeroRune, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRetDelHeroRune));
  stRetDelHeroRune_eResult_descriptor_ = stRetDelHeroRune_descriptor_->enum_type(0);
  stRetDelHeroRune_ProtoModID_descriptor_ = stRetDelHeroRune_descriptor_->enum_type(1);
  stRetDelHeroRune_ProtoFunID_descriptor_ = stRetDelHeroRune_descriptor_->enum_type(2);
  stReqRunePieceCombine_descriptor_ = file->message_type(200);
  static const int stReqRunePieceCombine_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqRunePieceCombine, instanceid_),
  };
  stReqRunePieceCombine_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqRunePieceCombine_descriptor_,
      stReqRunePieceCombine::default_instance_,
      stReqRunePieceCombine_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqRunePieceCombine, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqRunePieceCombine, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqRunePieceCombine));
  stReqRunePieceCombine_ProtoModID_descriptor_ = stReqRunePieceCombine_descriptor_->enum_type(0);
  stReqRunePieceCombine_ProtoFunID_descriptor_ = stReqRunePieceCombine_descriptor_->enum_type(1);
  stRetRunePieceCombine_descriptor_ = file->message_type(201);
  static const int stRetRunePieceCombine_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetRunePieceCombine, instanceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetRunePieceCombine, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetRunePieceCombine, result_),
  };
  stRetRunePieceCombine_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRetRunePieceCombine_descriptor_,
      stRetRunePieceCombine::default_instance_,
      stRetRunePieceCombine_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetRunePieceCombine, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetRunePieceCombine, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRetRunePieceCombine));
  stRetRunePieceCombine_eResult_descriptor_ = stRetRunePieceCombine_descriptor_->enum_type(0);
  stRetRunePieceCombine_ProtoModID_descriptor_ = stRetRunePieceCombine_descriptor_->enum_type(1);
  stRetRunePieceCombine_ProtoFunID_descriptor_ = stRetRunePieceCombine_descriptor_->enum_type(2);
  stReqRuneIntensify_descriptor_ = file->message_type(202);
  static const int stReqRuneIntensify_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqRuneIntensify, bagtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqRuneIntensify, instanceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqRuneIntensify, eatinstanceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqRuneIntensify, heroid_),
  };
  stReqRuneIntensify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqRuneIntensify_descriptor_,
      stReqRuneIntensify::default_instance_,
      stReqRuneIntensify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqRuneIntensify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqRuneIntensify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqRuneIntensify));
  stReqRuneIntensify_ProtoModID_descriptor_ = stReqRuneIntensify_descriptor_->enum_type(0);
  stReqRuneIntensify_ProtoFunID_descriptor_ = stReqRuneIntensify_descriptor_->enum_type(1);
  stRetRuneIntensify_descriptor_ = file->message_type(203);
  static const int stRetRuneIntensify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetRuneIntensify, bagtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetRuneIntensify, instanceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetRuneIntensify, result_),
  };
  stRetRuneIntensify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRetRuneIntensify_descriptor_,
      stRetRuneIntensify::default_instance_,
      stRetRuneIntensify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetRuneIntensify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetRuneIntensify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRetRuneIntensify));
  stRetRuneIntensify_eResult_descriptor_ = stRetRuneIntensify_descriptor_->enum_type(0);
  stRetRuneIntensify_ProtoModID_descriptor_ = stRetRuneIntensify_descriptor_->enum_type(1);
  stRetRuneIntensify_ProtoFunID_descriptor_ = stRetRuneIntensify_descriptor_->enum_type(2);
  stReqRuneEvolve_descriptor_ = file->message_type(204);
  static const int stReqRuneEvolve_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqRuneEvolve, bagtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqRuneEvolve, instanceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqRuneEvolve, heroid_),
  };
  stReqRuneEvolve_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqRuneEvolve_descriptor_,
      stReqRuneEvolve::default_instance_,
      stReqRuneEvolve_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqRuneEvolve, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqRuneEvolve, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqRuneEvolve));
  stReqRuneEvolve_ProtoModID_descriptor_ = stReqRuneEvolve_descriptor_->enum_type(0);
  stReqRuneEvolve_ProtoFunID_descriptor_ = stReqRuneEvolve_descriptor_->enum_type(1);
  stRetRuneEvolve_descriptor_ = file->message_type(205);
  static const int stRetRuneEvolve_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetRuneEvolve, bagtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetRuneEvolve, instanceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetRuneEvolve, result_),
  };
  stRetRuneEvolve_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRetRuneEvolve_descriptor_,
      stRetRuneEvolve::default_instance_,
      stRetRuneEvolve_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetRuneEvolve, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetRuneEvolve, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRetRuneEvolve));
  stRetRuneEvolve_eResult_descriptor_ = stRetRuneEvolve_descriptor_->enum_type(0);
  stRetRuneEvolve_ProtoModID_descriptor_ = stRetRuneEvolve_descriptor_->enum_type(1);
  stRetRuneEvolve_ProtoFunID_descriptor_ = stRetRuneEvolve_descriptor_->enum_type(2);
  stReqExtractGem_descriptor_ = file->message_type(206);
  static const int stReqExtractGem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqExtractGem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqExtractGem, pay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqExtractGem, successpay_),
  };
  stReqExtractGem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqExtractGem_descriptor_,
      stReqExtractGem::default_instance_,
      stReqExtractGem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqExtractGem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqExtractGem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqExtractGem));
  stReqExtractGem_ProtoModID_descriptor_ = stReqExtractGem_descriptor_->enum_type(0);
  stReqExtractGem_ProtoFunID_descriptor_ = stReqExtractGem_descriptor_->enum_type(1);
  ExtractGemResult_descriptor_ = file->message_type(207);
  static const int ExtractGemResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtractGemResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtractGemResult, id_),
  };
  ExtractGemResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExtractGemResult_descriptor_,
      ExtractGemResult::default_instance_,
      ExtractGemResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtractGemResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtractGemResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExtractGemResult));
  ExtractGemResult_Result_descriptor_ = ExtractGemResult_descriptor_->enum_type(0);
  ExtractGemResult_ProtoModID_descriptor_ = ExtractGemResult_descriptor_->enum_type(1);
  ExtractGemResult_ProtoFunID_descriptor_ = ExtractGemResult_descriptor_->enum_type(2);
  stReqWedding_descriptor_ = file->message_type(208);
  static const int stReqWedding_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqWedding, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqWedding, cfg1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqWedding, cfg2_),
  };
  stReqWedding_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqWedding_descriptor_,
      stReqWedding::default_instance_,
      stReqWedding_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqWedding, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqWedding, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqWedding));
  stReqWedding_ProtoModID_descriptor_ = stReqWedding_descriptor_->enum_type(0);
  stReqWedding_ProtoFunID_descriptor_ = stReqWedding_descriptor_->enum_type(1);
  stReqAgreeWedding_descriptor_ = file->message_type(209);
  static const int stReqAgreeWedding_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqAgreeWedding, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqAgreeWedding, cfg1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqAgreeWedding, cfg2_),
  };
  stReqAgreeWedding_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqAgreeWedding_descriptor_,
      stReqAgreeWedding::default_instance_,
      stReqAgreeWedding_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqAgreeWedding, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqAgreeWedding, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqAgreeWedding));
  stReqAgreeWedding_ProtoModID_descriptor_ = stReqAgreeWedding_descriptor_->enum_type(0);
  stReqAgreeWedding_ProtoFunID_descriptor_ = stReqAgreeWedding_descriptor_->enum_type(1);
  ResultWedding_descriptor_ = file->message_type(210);
  static const int ResultWedding_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultWedding, result_),
  };
  ResultWedding_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResultWedding_descriptor_,
      ResultWedding::default_instance_,
      ResultWedding_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultWedding, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultWedding, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResultWedding));
  ResultWedding_Result_descriptor_ = ResultWedding_descriptor_->enum_type(0);
  ResultWedding_ProtoModID_descriptor_ = ResultWedding_descriptor_->enum_type(1);
  ResultWedding_ProtoFunID_descriptor_ = ResultWedding_descriptor_->enum_type(2);
  stReqInviteToRoom_descriptor_ = file->message_type(211);
  static const int stReqInviteToRoom_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqInviteToRoom, id_),
  };
  stReqInviteToRoom_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqInviteToRoom_descriptor_,
      stReqInviteToRoom::default_instance_,
      stReqInviteToRoom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqInviteToRoom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqInviteToRoom, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqInviteToRoom));
  stReqInviteToRoom_ProtoModID_descriptor_ = stReqInviteToRoom_descriptor_->enum_type(0);
  stReqInviteToRoom_ProtoFunID_descriptor_ = stReqInviteToRoom_descriptor_->enum_type(1);
  NotifyEnterWedding_descriptor_ = file->message_type(212);
  static const int NotifyEnterWedding_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyEnterWedding, id_),
  };
  NotifyEnterWedding_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyEnterWedding_descriptor_,
      NotifyEnterWedding::default_instance_,
      NotifyEnterWedding_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyEnterWedding, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyEnterWedding, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyEnterWedding));
  NotifyEnterWedding_ProtoModID_descriptor_ = NotifyEnterWedding_descriptor_->enum_type(0);
  NotifyEnterWedding_ProtoFunID_descriptor_ = NotifyEnterWedding_descriptor_->enum_type(1);
  stReqAgreeEnterWedding_descriptor_ = file->message_type(213);
  static const int stReqAgreeEnterWedding_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqAgreeEnterWedding, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqAgreeEnterWedding, id_),
  };
  stReqAgreeEnterWedding_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqAgreeEnterWedding_descriptor_,
      stReqAgreeEnterWedding::default_instance_,
      stReqAgreeEnterWedding_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqAgreeEnterWedding, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqAgreeEnterWedding, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqAgreeEnterWedding));
  stReqAgreeEnterWedding_Result_descriptor_ = stReqAgreeEnterWedding_descriptor_->enum_type(0);
  stReqAgreeEnterWedding_ProtoModID_descriptor_ = stReqAgreeEnterWedding_descriptor_->enum_type(1);
  stReqAgreeEnterWedding_ProtoFunID_descriptor_ = stReqAgreeEnterWedding_descriptor_->enum_type(2);
  ResultEnterWedding_descriptor_ = file->message_type(214);
  static const int ResultEnterWedding_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultEnterWedding, result_),
  };
  ResultEnterWedding_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResultEnterWedding_descriptor_,
      ResultEnterWedding::default_instance_,
      ResultEnterWedding_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultEnterWedding, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultEnterWedding, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResultEnterWedding));
  ResultEnterWedding_Result_descriptor_ = ResultEnterWedding_descriptor_->enum_type(0);
  ResultEnterWedding_ProtoModID_descriptor_ = ResultEnterWedding_descriptor_->enum_type(1);
  ResultEnterWedding_ProtoFunID_descriptor_ = ResultEnterWedding_descriptor_->enum_type(2);
  MarryInviterPlace_descriptor_ = file->message_type(215);
  static const int MarryInviterPlace_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryInviterPlace, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryInviterPlace, cfg1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryInviterPlace, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryInviterPlace, name1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryInviterPlace, name2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryInviterPlace, time_),
  };
  MarryInviterPlace_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarryInviterPlace_descriptor_,
      MarryInviterPlace::default_instance_,
      MarryInviterPlace_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryInviterPlace, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryInviterPlace, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarryInviterPlace));
  MarryInviterPlace_State_descriptor_ = MarryInviterPlace_descriptor_->enum_type(0);
  MarryInviterPlace_ProtoModID_descriptor_ = MarryInviterPlace_descriptor_->enum_type(1);
  MarryInviterPlace_ProtoFunID_descriptor_ = MarryInviterPlace_descriptor_->enum_type(2);
  stReqDivorce_descriptor_ = file->message_type(216);
  static const int stReqDivorce_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqDivorce, isforce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqDivorce, coupleid_),
  };
  stReqDivorce_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqDivorce_descriptor_,
      stReqDivorce::default_instance_,
      stReqDivorce_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqDivorce, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqDivorce, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqDivorce));
  stReqDivorce_ProtoModID_descriptor_ = stReqDivorce_descriptor_->enum_type(0);
  stReqDivorce_ProtoFunID_descriptor_ = stReqDivorce_descriptor_->enum_type(1);
  RejectDivorce_descriptor_ = file->message_type(217);
  static const int RejectDivorce_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RejectDivorce, result_),
  };
  RejectDivorce_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RejectDivorce_descriptor_,
      RejectDivorce::default_instance_,
      RejectDivorce_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RejectDivorce, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RejectDivorce, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RejectDivorce));
  RejectDivorce_Result_descriptor_ = RejectDivorce_descriptor_->enum_type(0);
  RejectDivorce_ProtoModID_descriptor_ = RejectDivorce_descriptor_->enum_type(1);
  RejectDivorce_ProtoFunID_descriptor_ = RejectDivorce_descriptor_->enum_type(2);
  stReqRejectDivorce_descriptor_ = file->message_type(218);
  static const int stReqRejectDivorce_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqRejectDivorce, refused_),
  };
  stReqRejectDivorce_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqRejectDivorce_descriptor_,
      stReqRejectDivorce::default_instance_,
      stReqRejectDivorce_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqRejectDivorce, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqRejectDivorce, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqRejectDivorce));
  stReqRejectDivorce_ProtoModID_descriptor_ = stReqRejectDivorce_descriptor_->enum_type(0);
  stReqRejectDivorce_ProtoFunID_descriptor_ = stReqRejectDivorce_descriptor_->enum_type(1);
  stRetRejectDivorce_descriptor_ = file->message_type(219);
  static const int stRetRejectDivorce_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetRejectDivorce, result_),
  };
  stRetRejectDivorce_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRetRejectDivorce_descriptor_,
      stRetRejectDivorce::default_instance_,
      stRetRejectDivorce_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetRejectDivorce, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetRejectDivorce, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRetRejectDivorce));
  stRetRejectDivorce_Result_descriptor_ = stRetRejectDivorce_descriptor_->enum_type(0);
  stRetRejectDivorce_ProtoModID_descriptor_ = stRetRejectDivorce_descriptor_->enum_type(1);
  stRetRejectDivorce_ProtoFunID_descriptor_ = stRetRejectDivorce_descriptor_->enum_type(2);
  BoardcastMarryInfo_descriptor_ = file->message_type(220);
  static const int BoardcastMarryInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoardcastMarryInfo, name1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoardcastMarryInfo, name2_),
  };
  BoardcastMarryInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BoardcastMarryInfo_descriptor_,
      BoardcastMarryInfo::default_instance_,
      BoardcastMarryInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoardcastMarryInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoardcastMarryInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BoardcastMarryInfo));
  BoardcastMarryInfo_ProtoModID_descriptor_ = BoardcastMarryInfo_descriptor_->enum_type(0);
  BoardcastMarryInfo_ProtoFunID_descriptor_ = BoardcastMarryInfo_descriptor_->enum_type(1);
  stReqUseFirework_descriptor_ = file->message_type(221);
  static const int stReqUseFirework_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqUseFirework, fire_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqUseFirework, id_),
  };
  stReqUseFirework_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqUseFirework_descriptor_,
      stReqUseFirework::default_instance_,
      stReqUseFirework_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqUseFirework, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqUseFirework, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqUseFirework));
  stReqUseFirework_ProtoModID_descriptor_ = stReqUseFirework_descriptor_->enum_type(0);
  stReqUseFirework_ProtoFunID_descriptor_ = stReqUseFirework_descriptor_->enum_type(1);
  ResultUseFirework_descriptor_ = file->message_type(222);
  static const int ResultUseFirework_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultUseFirework, result_),
  };
  ResultUseFirework_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResultUseFirework_descriptor_,
      ResultUseFirework::default_instance_,
      ResultUseFirework_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultUseFirework, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultUseFirework, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResultUseFirework));
  ResultUseFirework_Result_descriptor_ = ResultUseFirework_descriptor_->enum_type(0);
  ResultUseFirework_ProtoModID_descriptor_ = ResultUseFirework_descriptor_->enum_type(1);
  ResultUseFirework_ProtoFunID_descriptor_ = ResultUseFirework_descriptor_->enum_type(2);
  NotifyFirework_descriptor_ = file->message_type(223);
  static const int NotifyFirework_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyFirework, fire_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyFirework, name_),
  };
  NotifyFirework_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyFirework_descriptor_,
      NotifyFirework::default_instance_,
      NotifyFirework_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyFirework, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyFirework, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyFirework));
  NotifyFirework_ProtoModID_descriptor_ = NotifyFirework_descriptor_->enum_type(0);
  NotifyFirework_ProtoFunID_descriptor_ = NotifyFirework_descriptor_->enum_type(1);
  stReqTakeCandy_descriptor_ = file->message_type(224);
  static const int stReqTakeCandy_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqTakeCandy, data_),
  };
  stReqTakeCandy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqTakeCandy_descriptor_,
      stReqTakeCandy::default_instance_,
      stReqTakeCandy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqTakeCandy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqTakeCandy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqTakeCandy));
  stReqTakeCandy_ProtoModID_descriptor_ = stReqTakeCandy_descriptor_->enum_type(0);
  stReqTakeCandy_ProtoFunID_descriptor_ = stReqTakeCandy_descriptor_->enum_type(1);
  ResultTakeCandy_descriptor_ = file->message_type(225);
  static const int ResultTakeCandy_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultTakeCandy, result_),
  };
  ResultTakeCandy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResultTakeCandy_descriptor_,
      ResultTakeCandy::default_instance_,
      ResultTakeCandy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultTakeCandy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultTakeCandy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResultTakeCandy));
  ResultTakeCandy_Result_descriptor_ = ResultTakeCandy_descriptor_->enum_type(0);
  ResultTakeCandy_ProtoModID_descriptor_ = ResultTakeCandy_descriptor_->enum_type(1);
  ResultTakeCandy_ProtoFunID_descriptor_ = ResultTakeCandy_descriptor_->enum_type(2);
  stReqBuyFirework_descriptor_ = file->message_type(226);
  static const int stReqBuyFirework_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqBuyFirework, id_),
  };
  stReqBuyFirework_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqBuyFirework_descriptor_,
      stReqBuyFirework::default_instance_,
      stReqBuyFirework_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqBuyFirework, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqBuyFirework, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqBuyFirework));
  stReqBuyFirework_ProtoModID_descriptor_ = stReqBuyFirework_descriptor_->enum_type(0);
  stReqBuyFirework_ProtoFunID_descriptor_ = stReqBuyFirework_descriptor_->enum_type(1);
  ResultBuyFirework_descriptor_ = file->message_type(227);
  static const int ResultBuyFirework_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultBuyFirework, result_),
  };
  ResultBuyFirework_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResultBuyFirework_descriptor_,
      ResultBuyFirework::default_instance_,
      ResultBuyFirework_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultBuyFirework, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultBuyFirework, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResultBuyFirework));
  ResultBuyFirework_Result_descriptor_ = ResultBuyFirework_descriptor_->enum_type(0);
  ResultBuyFirework_ProtoModID_descriptor_ = ResultBuyFirework_descriptor_->enum_type(1);
  ResultBuyFirework_ProtoFunID_descriptor_ = ResultBuyFirework_descriptor_->enum_type(2);
  stReqEnterWeddingAlone_descriptor_ = file->message_type(228);
  static const int stReqEnterWeddingAlone_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqEnterWeddingAlone, data_),
  };
  stReqEnterWeddingAlone_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqEnterWeddingAlone_descriptor_,
      stReqEnterWeddingAlone::default_instance_,
      stReqEnterWeddingAlone_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqEnterWeddingAlone, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqEnterWeddingAlone, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqEnterWeddingAlone));
  stReqEnterWeddingAlone_ProtoModID_descriptor_ = stReqEnterWeddingAlone_descriptor_->enum_type(0);
  stReqEnterWeddingAlone_ProtoFunID_descriptor_ = stReqEnterWeddingAlone_descriptor_->enum_type(1);
  ResultEnterWeddingAlone_descriptor_ = file->message_type(229);
  static const int ResultEnterWeddingAlone_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultEnterWeddingAlone, result_),
  };
  ResultEnterWeddingAlone_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResultEnterWeddingAlone_descriptor_,
      ResultEnterWeddingAlone::default_instance_,
      ResultEnterWeddingAlone_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultEnterWeddingAlone, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultEnterWeddingAlone, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResultEnterWeddingAlone));
  ResultEnterWeddingAlone_Result_descriptor_ = ResultEnterWeddingAlone_descriptor_->enum_type(0);
  ResultEnterWeddingAlone_ProtoModID_descriptor_ = ResultEnterWeddingAlone_descriptor_->enum_type(1);
  ResultEnterWeddingAlone_ProtoFunID_descriptor_ = ResultEnterWeddingAlone_descriptor_->enum_type(2);
  stReqQuitWeddingScene_descriptor_ = file->message_type(230);
  static const int stReqQuitWeddingScene_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqQuitWeddingScene, levelid_),
  };
  stReqQuitWeddingScene_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqQuitWeddingScene_descriptor_,
      stReqQuitWeddingScene::default_instance_,
      stReqQuitWeddingScene_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqQuitWeddingScene, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqQuitWeddingScene, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqQuitWeddingScene));
  stReqQuitWeddingScene_ProtoModID_descriptor_ = stReqQuitWeddingScene_descriptor_->enum_type(0);
  stReqQuitWeddingScene_ProtoFunID_descriptor_ = stReqQuitWeddingScene_descriptor_->enum_type(1);
  stRetQuitWeddingScene_descriptor_ = file->message_type(231);
  static const int stRetQuitWeddingScene_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetQuitWeddingScene, result_),
  };
  stRetQuitWeddingScene_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRetQuitWeddingScene_descriptor_,
      stRetQuitWeddingScene::default_instance_,
      stRetQuitWeddingScene_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetQuitWeddingScene, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetQuitWeddingScene, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRetQuitWeddingScene));
  stRetQuitWeddingScene_Result_descriptor_ = stRetQuitWeddingScene_descriptor_->enum_type(0);
  stRetQuitWeddingScene_ProtoModID_descriptor_ = stRetQuitWeddingScene_descriptor_->enum_type(1);
  stRetQuitWeddingScene_ProtoFunID_descriptor_ = stRetQuitWeddingScene_descriptor_->enum_type(2);
  stNotifyFriendAction_descriptor_ = file->message_type(232);
  static const int stNotifyFriendAction_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyFriendAction, in_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyFriendAction, charid_),
  };
  stNotifyFriendAction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stNotifyFriendAction_descriptor_,
      stNotifyFriendAction::default_instance_,
      stNotifyFriendAction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyFriendAction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyFriendAction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stNotifyFriendAction));
  stNotifyFriendAction_ProtoModID_descriptor_ = stNotifyFriendAction_descriptor_->enum_type(0);
  stNotifyFriendAction_ProtoFunID_descriptor_ = stNotifyFriendAction_descriptor_->enum_type(1);
  stSendCharCreateTime_descriptor_ = file->message_type(233);
  static const int stSendCharCreateTime_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendCharCreateTime, createtimestr_),
  };
  stSendCharCreateTime_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSendCharCreateTime_descriptor_,
      stSendCharCreateTime::default_instance_,
      stSendCharCreateTime_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendCharCreateTime, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendCharCreateTime, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSendCharCreateTime));
  stSendCharCreateTime_ProtoModID_descriptor_ = stSendCharCreateTime_descriptor_->enum_type(0);
  stSendCharCreateTime_ProtoFunID_descriptor_ = stSendCharCreateTime_descriptor_->enum_type(1);
  stReqDrawWeddingRing_descriptor_ = file->message_type(234);
  static const int stReqDrawWeddingRing_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqDrawWeddingRing, charid_),
  };
  stReqDrawWeddingRing_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqDrawWeddingRing_descriptor_,
      stReqDrawWeddingRing::default_instance_,
      stReqDrawWeddingRing_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqDrawWeddingRing, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqDrawWeddingRing, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqDrawWeddingRing));
  stReqDrawWeddingRing_ProtoModID_descriptor_ = stReqDrawWeddingRing_descriptor_->enum_type(0);
  stReqDrawWeddingRing_ProtoFunID_descriptor_ = stReqDrawWeddingRing_descriptor_->enum_type(1);
  stRetDrawWeddingRing_descriptor_ = file->message_type(235);
  static const int stRetDrawWeddingRing_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetDrawWeddingRing, result_),
  };
  stRetDrawWeddingRing_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRetDrawWeddingRing_descriptor_,
      stRetDrawWeddingRing::default_instance_,
      stRetDrawWeddingRing_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetDrawWeddingRing, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetDrawWeddingRing, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRetDrawWeddingRing));
  stRetDrawWeddingRing_Result_descriptor_ = stRetDrawWeddingRing_descriptor_->enum_type(0);
  stRetDrawWeddingRing_ProtoModID_descriptor_ = stRetDrawWeddingRing_descriptor_->enum_type(1);
  stRetDrawWeddingRing_ProtoFunID_descriptor_ = stRetDrawWeddingRing_descriptor_->enum_type(2);
  stReqBuyNum_descriptor_ = file->message_type(236);
  static const int stReqBuyNum_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqBuyNum, charid_),
  };
  stReqBuyNum_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqBuyNum_descriptor_,
      stReqBuyNum::default_instance_,
      stReqBuyNum_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqBuyNum, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqBuyNum, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqBuyNum));
  stReqBuyNum_ProtoModID_descriptor_ = stReqBuyNum_descriptor_->enum_type(0);
  stReqBuyNum_ProtoFunID_descriptor_ = stReqBuyNum_descriptor_->enum_type(1);
  stBuyNumResult_descriptor_ = file->message_type(237);
  static const int stBuyNumResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBuyNumResult, buynum_),
  };
  stBuyNumResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stBuyNumResult_descriptor_,
      stBuyNumResult::default_instance_,
      stBuyNumResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBuyNumResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBuyNumResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stBuyNumResult));
  stBuyNumResult_ProtoModID_descriptor_ = stBuyNumResult_descriptor_->enum_type(0);
  stBuyNumResult_ProtoFunID_descriptor_ = stBuyNumResult_descriptor_->enum_type(1);
  stReqRefreshNum_descriptor_ = file->message_type(238);
  static const int stReqRefreshNum_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqRefreshNum, charid_),
  };
  stReqRefreshNum_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqRefreshNum_descriptor_,
      stReqRefreshNum::default_instance_,
      stReqRefreshNum_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqRefreshNum, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqRefreshNum, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqRefreshNum));
  stReqRefreshNum_ProtoModID_descriptor_ = stReqRefreshNum_descriptor_->enum_type(0);
  stReqRefreshNum_ProtoFunID_descriptor_ = stReqRefreshNum_descriptor_->enum_type(1);
  stRefreshNumResult_descriptor_ = file->message_type(239);
  static const int stRefreshNumResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRefreshNumResult, refreshnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRefreshNumResult, diamondrefreshnum_),
  };
  stRefreshNumResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRefreshNumResult_descriptor_,
      stRefreshNumResult::default_instance_,
      stRefreshNumResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRefreshNumResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRefreshNumResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRefreshNumResult));
  stRefreshNumResult_ProtoModID_descriptor_ = stRefreshNumResult_descriptor_->enum_type(0);
  stRefreshNumResult_ProtoFunID_descriptor_ = stRefreshNumResult_descriptor_->enum_type(1);
  stReqColumnList_descriptor_ = file->message_type(240);
  static const int stReqColumnList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqColumnList, type_),
  };
  stReqColumnList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqColumnList_descriptor_,
      stReqColumnList::default_instance_,
      stReqColumnList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqColumnList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqColumnList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqColumnList));
  stReqColumnList_ProtoModID_descriptor_ = stReqColumnList_descriptor_->enum_type(0);
  stReqColumnList_ProtoFunID_descriptor_ = stReqColumnList_descriptor_->enum_type(1);
  stItemInfo_descriptor_ = file->message_type(241);
  static const int stItemInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stItemInfo, uniqueid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stItemInfo, itemnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stItemInfo, costrestype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stItemInfo, itemprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stItemInfo, buynum_),
  };
  stItemInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stItemInfo_descriptor_,
      stItemInfo::default_instance_,
      stItemInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stItemInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stItemInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stItemInfo));
  stColumnListResult_descriptor_ = file->message_type(242);
  static const int stColumnListResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stColumnListResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stColumnListResult, shoplist_),
  };
  stColumnListResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stColumnListResult_descriptor_,
      stColumnListResult::default_instance_,
      stColumnListResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stColumnListResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stColumnListResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stColumnListResult));
  stColumnListResult_eResult_descriptor_ = stColumnListResult_descriptor_->enum_type(0);
  stColumnListResult_ProtoModID_descriptor_ = stColumnListResult_descriptor_->enum_type(1);
  stColumnListResult_ProtoFunID_descriptor_ = stColumnListResult_descriptor_->enum_type(2);
  stReqMarketBuyItem_descriptor_ = file->message_type(243);
  static const int stReqMarketBuyItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqMarketBuyItem, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqMarketBuyItem, index_),
  };
  stReqMarketBuyItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqMarketBuyItem_descriptor_,
      stReqMarketBuyItem::default_instance_,
      stReqMarketBuyItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqMarketBuyItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqMarketBuyItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqMarketBuyItem));
  stReqMarketBuyItem_ProtoModID_descriptor_ = stReqMarketBuyItem_descriptor_->enum_type(0);
  stReqMarketBuyItem_ProtoFunID_descriptor_ = stReqMarketBuyItem_descriptor_->enum_type(1);
  stMarketBuyItemResult_descriptor_ = file->message_type(244);
  static const int stMarketBuyItemResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stMarketBuyItemResult, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stMarketBuyItemResult, shopitem_),
  };
  stMarketBuyItemResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stMarketBuyItemResult_descriptor_,
      stMarketBuyItemResult::default_instance_,
      stMarketBuyItemResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stMarketBuyItemResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stMarketBuyItemResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stMarketBuyItemResult));
  stMarketBuyItemResult_BUYRESULT_descriptor_ = stMarketBuyItemResult_descriptor_->enum_type(0);
  stMarketBuyItemResult_ProtoModID_descriptor_ = stMarketBuyItemResult_descriptor_->enum_type(1);
  stMarketBuyItemResult_ProtoFunID_descriptor_ = stMarketBuyItemResult_descriptor_->enum_type(2);
  stReqOpenWindow_descriptor_ = file->message_type(245);
  static const int stReqOpenWindow_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqOpenWindow, charid_),
  };
  stReqOpenWindow_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqOpenWindow_descriptor_,
      stReqOpenWindow::default_instance_,
      stReqOpenWindow_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqOpenWindow, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqOpenWindow, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqOpenWindow));
  stReqOpenWindow_ProtoModID_descriptor_ = stReqOpenWindow_descriptor_->enum_type(0);
  stReqOpenWindow_ProtoFunID_descriptor_ = stReqOpenWindow_descriptor_->enum_type(1);
  stOpenWindowResult_descriptor_ = file->message_type(246);
  static const int stOpenWindowResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOpenWindowResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOpenWindowResult, lv_),
  };
  stOpenWindowResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stOpenWindowResult_descriptor_,
      stOpenWindowResult::default_instance_,
      stOpenWindowResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOpenWindowResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOpenWindowResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stOpenWindowResult));
  stOpenWindowResult_eResult_descriptor_ = stOpenWindowResult_descriptor_->enum_type(0);
  stOpenWindowResult_ProtoModID_descriptor_ = stOpenWindowResult_descriptor_->enum_type(1);
  stOpenWindowResult_ProtoFunID_descriptor_ = stOpenWindowResult_descriptor_->enum_type(2);
  stReqRefreshList_descriptor_ = file->message_type(247);
  static const int stReqRefreshList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqRefreshList, charid_),
  };
  stReqRefreshList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqRefreshList_descriptor_,
      stReqRefreshList::default_instance_,
      stReqRefreshList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqRefreshList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqRefreshList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqRefreshList));
  stReqRefreshList_ProtoModID_descriptor_ = stReqRefreshList_descriptor_->enum_type(0);
  stReqRefreshList_ProtoFunID_descriptor_ = stReqRefreshList_descriptor_->enum_type(1);
  stRefreshListResult_descriptor_ = file->message_type(248);
  static const int stRefreshListResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRefreshListResult, result_),
  };
  stRefreshListResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRefreshListResult_descriptor_,
      stRefreshListResult::default_instance_,
      stRefreshListResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRefreshListResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRefreshListResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRefreshListResult));
  stRefreshListResult_eResult_descriptor_ = stRefreshListResult_descriptor_->enum_type(0);
  stRefreshListResult_ProtoModID_descriptor_ = stRefreshListResult_descriptor_->enum_type(1);
  stRefreshListResult_ProtoFunID_descriptor_ = stRefreshListResult_descriptor_->enum_type(2);
  stReqAKeyRaiseUserSkillLv_descriptor_ = file->message_type(249);
  static const int stReqAKeyRaiseUserSkillLv_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqAKeyRaiseUserSkillLv, skillid_),
  };
  stReqAKeyRaiseUserSkillLv_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqAKeyRaiseUserSkillLv_descriptor_,
      stReqAKeyRaiseUserSkillLv::default_instance_,
      stReqAKeyRaiseUserSkillLv_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqAKeyRaiseUserSkillLv, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqAKeyRaiseUserSkillLv, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqAKeyRaiseUserSkillLv));
  stReqAKeyRaiseUserSkillLv_ProtoModID_descriptor_ = stReqAKeyRaiseUserSkillLv_descriptor_->enum_type(0);
  stReqAKeyRaiseUserSkillLv_ProtoFunID_descriptor_ = stReqAKeyRaiseUserSkillLv_descriptor_->enum_type(1);
  stAKeyRaiseUserSkillLvResult_descriptor_ = file->message_type(250);
  static const int stAKeyRaiseUserSkillLvResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAKeyRaiseUserSkillLvResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAKeyRaiseUserSkillLvResult, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAKeyRaiseUserSkillLvResult, skilllv_),
  };
  stAKeyRaiseUserSkillLvResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stAKeyRaiseUserSkillLvResult_descriptor_,
      stAKeyRaiseUserSkillLvResult::default_instance_,
      stAKeyRaiseUserSkillLvResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAKeyRaiseUserSkillLvResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAKeyRaiseUserSkillLvResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stAKeyRaiseUserSkillLvResult));
  stAKeyRaiseUserSkillLvResult_eResult_descriptor_ = stAKeyRaiseUserSkillLvResult_descriptor_->enum_type(0);
  stAKeyRaiseUserSkillLvResult_ProtoModID_descriptor_ = stAKeyRaiseUserSkillLvResult_descriptor_->enum_type(1);
  stAKeyRaiseUserSkillLvResult_ProtoFunID_descriptor_ = stAKeyRaiseUserSkillLvResult_descriptor_->enum_type(2);
  stMountItemInfo_descriptor_ = file->message_type(251);
  static const int stMountItemInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stMountItemInfo, bagtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stMountItemInfo, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stMountItemInfo, instanceid_),
  };
  stMountItemInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stMountItemInfo_descriptor_,
      stMountItemInfo::default_instance_,
      stMountItemInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stMountItemInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stMountItemInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stMountItemInfo));
  stReqStoneSynthesis_descriptor_ = file->message_type(252);
  static const int stReqStoneSynthesis_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqStoneSynthesis, items_),
  };
  stReqStoneSynthesis_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqStoneSynthesis_descriptor_,
      stReqStoneSynthesis::default_instance_,
      stReqStoneSynthesis_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqStoneSynthesis, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqStoneSynthesis, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqStoneSynthesis));
  stReqStoneSynthesis_ProtoModID_descriptor_ = stReqStoneSynthesis_descriptor_->enum_type(0);
  stReqStoneSynthesis_ProtoFunID_descriptor_ = stReqStoneSynthesis_descriptor_->enum_type(1);
  stStoneSynthesisResult_descriptor_ = file->message_type(253);
  static const int stStoneSynthesisResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stStoneSynthesisResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stStoneSynthesisResult, itemid_),
  };
  stStoneSynthesisResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stStoneSynthesisResult_descriptor_,
      stStoneSynthesisResult::default_instance_,
      stStoneSynthesisResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stStoneSynthesisResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stStoneSynthesisResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stStoneSynthesisResult));
  stStoneSynthesisResult_Result_descriptor_ = stStoneSynthesisResult_descriptor_->enum_type(0);
  stStoneSynthesisResult_ProtoModID_descriptor_ = stStoneSynthesisResult_descriptor_->enum_type(1);
  stStoneSynthesisResult_ProtoFunID_descriptor_ = stStoneSynthesisResult_descriptor_->enum_type(2);
  stReqStoneEvolvement_descriptor_ = file->message_type(254);
  static const int stReqStoneEvolvement_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqStoneEvolvement, items_),
  };
  stReqStoneEvolvement_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqStoneEvolvement_descriptor_,
      stReqStoneEvolvement::default_instance_,
      stReqStoneEvolvement_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqStoneEvolvement, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqStoneEvolvement, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqStoneEvolvement));
  stReqStoneEvolvement_ProtoModID_descriptor_ = stReqStoneEvolvement_descriptor_->enum_type(0);
  stReqStoneEvolvement_ProtoFunID_descriptor_ = stReqStoneEvolvement_descriptor_->enum_type(1);
  stStoneEvolvementResult_descriptor_ = file->message_type(255);
  static const int stStoneEvolvementResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stStoneEvolvementResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stStoneEvolvementResult, itemid_),
  };
  stStoneEvolvementResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stStoneEvolvementResult_descriptor_,
      stStoneEvolvementResult::default_instance_,
      stStoneEvolvementResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stStoneEvolvementResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stStoneEvolvementResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stStoneEvolvementResult));
  stStoneEvolvementResult_Result_descriptor_ = stStoneEvolvementResult_descriptor_->enum_type(0);
  stStoneEvolvementResult_ProtoModID_descriptor_ = stStoneEvolvementResult_descriptor_->enum_type(1);
  stStoneEvolvementResult_ProtoFunID_descriptor_ = stStoneEvolvementResult_descriptor_->enum_type(2);
  stReqStoneProp_descriptor_ = file->message_type(256);
  static const int stReqStoneProp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqStoneProp, charid_),
  };
  stReqStoneProp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqStoneProp_descriptor_,
      stReqStoneProp::default_instance_,
      stReqStoneProp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqStoneProp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqStoneProp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqStoneProp));
  stReqStoneProp_ProtoModID_descriptor_ = stReqStoneProp_descriptor_->enum_type(0);
  stReqStoneProp_ProtoFunID_descriptor_ = stReqStoneProp_descriptor_->enum_type(1);
  stStonePropResult_descriptor_ = file->message_type(257);
  static const int stStonePropResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stStonePropResult, battleprop_),
  };
  stStonePropResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stStonePropResult_descriptor_,
      stStonePropResult::default_instance_,
      stStonePropResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stStonePropResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stStonePropResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stStonePropResult));
  stStonePropResult_ProtoModID_descriptor_ = stStonePropResult_descriptor_->enum_type(0);
  stStonePropResult_ProtoFunID_descriptor_ = stStonePropResult_descriptor_->enum_type(1);
  stReqChangePhoto_descriptor_ = file->message_type(258);
  static const int stReqChangePhoto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqChangePhoto, id_),
  };
  stReqChangePhoto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqChangePhoto_descriptor_,
      stReqChangePhoto::default_instance_,
      stReqChangePhoto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqChangePhoto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqChangePhoto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqChangePhoto));
  stReqChangePhoto_ProtoModID_descriptor_ = stReqChangePhoto_descriptor_->enum_type(0);
  stReqChangePhoto_ProtoFunID_descriptor_ = stReqChangePhoto_descriptor_->enum_type(1);
  stChangePhotoResult_descriptor_ = file->message_type(259);
  static const int stChangePhotoResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stChangePhotoResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stChangePhotoResult, id_),
  };
  stChangePhotoResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stChangePhotoResult_descriptor_,
      stChangePhotoResult::default_instance_,
      stChangePhotoResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stChangePhotoResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stChangePhotoResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stChangePhotoResult));
  stChangePhotoResult_Result_descriptor_ = stChangePhotoResult_descriptor_->enum_type(0);
  stChangePhotoResult_ProtoModID_descriptor_ = stChangePhotoResult_descriptor_->enum_type(1);
  stChangePhotoResult_ProtoFunID_descriptor_ = stChangePhotoResult_descriptor_->enum_type(2);
  stReqHasPhotoID_descriptor_ = file->message_type(260);
  static const int stReqHasPhotoID_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqHasPhotoID, charid_),
  };
  stReqHasPhotoID_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqHasPhotoID_descriptor_,
      stReqHasPhotoID::default_instance_,
      stReqHasPhotoID_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqHasPhotoID, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqHasPhotoID, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqHasPhotoID));
  stReqHasPhotoID_ProtoModID_descriptor_ = stReqHasPhotoID_descriptor_->enum_type(0);
  stReqHasPhotoID_ProtoFunID_descriptor_ = stReqHasPhotoID_descriptor_->enum_type(1);
  stHasPhotoIDResult_descriptor_ = file->message_type(261);
  static const int stHasPhotoIDResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stHasPhotoIDResult, photoids_),
  };
  stHasPhotoIDResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stHasPhotoIDResult_descriptor_,
      stHasPhotoIDResult::default_instance_,
      stHasPhotoIDResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stHasPhotoIDResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stHasPhotoIDResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stHasPhotoIDResult));
  stHasPhotoIDResult_ProtoModID_descriptor_ = stHasPhotoIDResult_descriptor_->enum_type(0);
  stHasPhotoIDResult_ProtoFunID_descriptor_ = stHasPhotoIDResult_descriptor_->enum_type(1);
  stReqUnlockPhoto_descriptor_ = file->message_type(262);
  static const int stReqUnlockPhoto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqUnlockPhoto, id_),
  };
  stReqUnlockPhoto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqUnlockPhoto_descriptor_,
      stReqUnlockPhoto::default_instance_,
      stReqUnlockPhoto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqUnlockPhoto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqUnlockPhoto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqUnlockPhoto));
  stReqUnlockPhoto_ProtoModID_descriptor_ = stReqUnlockPhoto_descriptor_->enum_type(0);
  stReqUnlockPhoto_ProtoFunID_descriptor_ = stReqUnlockPhoto_descriptor_->enum_type(1);
  stUnlockPhotoResult_descriptor_ = file->message_type(263);
  static const int stUnlockPhotoResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUnlockPhotoResult, result_),
  };
  stUnlockPhotoResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stUnlockPhotoResult_descriptor_,
      stUnlockPhotoResult::default_instance_,
      stUnlockPhotoResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUnlockPhotoResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUnlockPhotoResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stUnlockPhotoResult));
  stUnlockPhotoResult_Result_descriptor_ = stUnlockPhotoResult_descriptor_->enum_type(0);
  stUnlockPhotoResult_ProtoModID_descriptor_ = stUnlockPhotoResult_descriptor_->enum_type(1);
  stUnlockPhotoResult_ProtoFunID_descriptor_ = stUnlockPhotoResult_descriptor_->enum_type(2);
  stSpriteInfo_descriptor_ = file->message_type(264);
  static const int stSpriteInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSpriteInfo, tag_),
  };
  stSpriteInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSpriteInfo_descriptor_,
      stSpriteInfo::default_instance_,
      stSpriteInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSpriteInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSpriteInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSpriteInfo));
  stSpriteInfo_ProtoModID_descriptor_ = stSpriteInfo_descriptor_->enum_type(0);
  stSpriteInfo_ProtoFunID_descriptor_ = stSpriteInfo_descriptor_->enum_type(1);
  stSpriteInfoResult_descriptor_ = file->message_type(265);
  static const int stSpriteInfoResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSpriteInfoResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSpriteInfoResult, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSpriteInfoResult, level_),
  };
  stSpriteInfoResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSpriteInfoResult_descriptor_,
      stSpriteInfoResult::default_instance_,
      stSpriteInfoResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSpriteInfoResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSpriteInfoResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSpriteInfoResult));
  stSpriteInfoResult_Result_descriptor_ = stSpriteInfoResult_descriptor_->enum_type(0);
  stSpriteInfoResult_ProtoModID_descriptor_ = stSpriteInfoResult_descriptor_->enum_type(1);
  stSpriteInfoResult_ProtoFunID_descriptor_ = stSpriteInfoResult_descriptor_->enum_type(2);
  stTrainHeroReq_descriptor_ = file->message_type(266);
  static const int stTrainHeroReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stTrainHeroReq, heroid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stTrainHeroReq, instanceid_),
  };
  stTrainHeroReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stTrainHeroReq_descriptor_,
      stTrainHeroReq::default_instance_,
      stTrainHeroReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stTrainHeroReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stTrainHeroReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stTrainHeroReq));
  stTrainHeroReq_ProtoModID_descriptor_ = stTrainHeroReq_descriptor_->enum_type(0);
  stTrainHeroReq_ProtoFunID_descriptor_ = stTrainHeroReq_descriptor_->enum_type(1);
  stTrainHeroResult_descriptor_ = file->message_type(267);
  static const int stTrainHeroResult_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stTrainHeroResult, heroid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stTrainHeroResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stTrainHeroResult, levelup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stTrainHeroResult, newlevel_),
  };
  stTrainHeroResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stTrainHeroResult_descriptor_,
      stTrainHeroResult::default_instance_,
      stTrainHeroResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stTrainHeroResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stTrainHeroResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stTrainHeroResult));
  stTrainHeroResult_eResult_descriptor_ = stTrainHeroResult_descriptor_->enum_type(0);
  stTrainHeroResult_ProtoModID_descriptor_ = stTrainHeroResult_descriptor_->enum_type(1);
  stTrainHeroResult_ProtoFunID_descriptor_ = stTrainHeroResult_descriptor_->enum_type(2);
  stGuaJiTimeNtf_descriptor_ = file->message_type(268);
  static const int stGuaJiTimeNtf_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGuaJiTimeNtf, guajistart_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGuaJiTimeNtf, guajiend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGuaJiTimeNtf, todaycount_),
  };
  stGuaJiTimeNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stGuaJiTimeNtf_descriptor_,
      stGuaJiTimeNtf::default_instance_,
      stGuaJiTimeNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGuaJiTimeNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGuaJiTimeNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stGuaJiTimeNtf));
  stGuaJiTimeNtf_ProtoModID_descriptor_ = stGuaJiTimeNtf_descriptor_->enum_type(0);
  stGuaJiTimeNtf_ProtoFunID_descriptor_ = stGuaJiTimeNtf_descriptor_->enum_type(1);
  stGuaJiAwardReq_descriptor_ = file->message_type(269);
  static const int stGuaJiAwardReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGuaJiAwardReq, charid_),
  };
  stGuaJiAwardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stGuaJiAwardReq_descriptor_,
      stGuaJiAwardReq::default_instance_,
      stGuaJiAwardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGuaJiAwardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGuaJiAwardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stGuaJiAwardReq));
  stGuaJiAwardReq_ProtoModID_descriptor_ = stGuaJiAwardReq_descriptor_->enum_type(0);
  stGuaJiAwardReq_ProtoFunID_descriptor_ = stGuaJiAwardReq_descriptor_->enum_type(1);
  stGuaJiAwardResult_descriptor_ = file->message_type(270);
  static const int stGuaJiAwardResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGuaJiAwardResult, result_),
  };
  stGuaJiAwardResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stGuaJiAwardResult_descriptor_,
      stGuaJiAwardResult::default_instance_,
      stGuaJiAwardResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGuaJiAwardResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGuaJiAwardResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stGuaJiAwardResult));
  stGuaJiAwardResult_eResult_descriptor_ = stGuaJiAwardResult_descriptor_->enum_type(0);
  stGuaJiAwardResult_ProtoModID_descriptor_ = stGuaJiAwardResult_descriptor_->enum_type(1);
  stGuaJiAwardResult_ProtoFunID_descriptor_ = stGuaJiAwardResult_descriptor_->enum_type(2);
  stNftVipNtf_descriptor_ = file->message_type(271);
  static const int stNftVipNtf_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNftVipNtf, isnftvip_),
  };
  stNftVipNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stNftVipNtf_descriptor_,
      stNftVipNtf::default_instance_,
      stNftVipNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNftVipNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNftVipNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stNftVipNtf));
  stNftVipNtf_ProtoModID_descriptor_ = stNftVipNtf_descriptor_->enum_type(0);
  stNftVipNtf_ProtoFunID_descriptor_ = stNftVipNtf_descriptor_->enum_type(1);
  stGuaJiStartReq_descriptor_ = file->message_type(272);
  static const int stGuaJiStartReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGuaJiStartReq, charid_),
  };
  stGuaJiStartReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stGuaJiStartReq_descriptor_,
      stGuaJiStartReq::default_instance_,
      stGuaJiStartReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGuaJiStartReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGuaJiStartReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stGuaJiStartReq));
  stGuaJiStartReq_ProtoModID_descriptor_ = stGuaJiStartReq_descriptor_->enum_type(0);
  stGuaJiStartReq_ProtoFunID_descriptor_ = stGuaJiStartReq_descriptor_->enum_type(1);
  stGuaJiStartResult_descriptor_ = file->message_type(273);
  static const int stGuaJiStartResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGuaJiStartResult, result_),
  };
  stGuaJiStartResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stGuaJiStartResult_descriptor_,
      stGuaJiStartResult::default_instance_,
      stGuaJiStartResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGuaJiStartResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGuaJiStartResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stGuaJiStartResult));
  stGuaJiStartResult_eResult_descriptor_ = stGuaJiStartResult_descriptor_->enum_type(0);
  stGuaJiStartResult_ProtoModID_descriptor_ = stGuaJiStartResult_descriptor_->enum_type(1);
  stGuaJiStartResult_ProtoFunID_descriptor_ = stGuaJiStartResult_descriptor_->enum_type(2);
  stSynRMPShopItem2_descriptor_ = file->message_type(274);
  static const int stSynRMPShopItem2_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynRMPShopItem2, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynRMPShopItem2, delaytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynRMPShopItem2, buycount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynRMPShopItem2, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynRMPShopItem2, plannumber_),
  };
  stSynRMPShopItem2_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSynRMPShopItem2_descriptor_,
      stSynRMPShopItem2::default_instance_,
      stSynRMPShopItem2_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynRMPShopItem2, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynRMPShopItem2, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSynRMPShopItem2));
  stSynRMBShopInfo2_descriptor_ = file->message_type(275);
  static const int stSynRMBShopInfo2_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynRMBShopInfo2, items_),
  };
  stSynRMBShopInfo2_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSynRMBShopInfo2_descriptor_,
      stSynRMBShopInfo2::default_instance_,
      stSynRMBShopInfo2_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynRMBShopInfo2, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynRMBShopInfo2, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSynRMBShopInfo2));
  stSynRMBShopInfo2_ProtoModID_descriptor_ = stSynRMBShopInfo2_descriptor_->enum_type(0);
  stSynRMBShopInfo2_ProtoFunID_descriptor_ = stSynRMBShopInfo2_descriptor_->enum_type(1);
  eRoleJob_descriptor_ = file->enum_type(0);
  eRoleSex_descriptor_ = file->enum_type(1);
  CreateRoleResultCode_descriptor_ = file->enum_type(2);
  eBagType_descriptor_ = file->enum_type(3);
  E_HERO_STATE_descriptor_ = file->enum_type(4);
  ArrageMainBagError_descriptor_ = file->enum_type(5);
  eChatType_descriptor_ = file->enum_type(6);
  eLevelStar_descriptor_ = file->enum_type(7);
  eCharpterRewardStep_descriptor_ = file->enum_type(8);
  eRushType_descriptor_ = file->enum_type(9);
  eSystemSetting_descriptor_ = file->enum_type(10);
  eColumn_descriptor_ = file->enum_type(11);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Role_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stBattleProp_descriptor_, &stBattleProp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRoleMainData_descriptor_, &stRoleMainData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stInitMainData_descriptor_, &stInitMainData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqCreateRole_descriptor_, &ReqCreateRole::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateRoleResult_descriptor_, &CreateRoleResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSynSnapData_descriptor_, &stSynSnapData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RefreshSnapData_descriptor_, &RefreshSnapData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqEnterGame_descriptor_, &ReqEnterGame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSynGoldCoin_descriptor_, &stSynGoldCoin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSynPointCard_descriptor_, &stSynPointCard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stBagPos_descriptor_, &stBagPos::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stItemSkillInfo_descriptor_, &stItemSkillInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRaiseSkillProp_descriptor_, &stRaiseSkillProp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stEnchantInfo_descriptor_, &stEnchantInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSynItemInfo_descriptor_, &stSynItemInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stNotifyAddItem_descriptor_, &stNotifyAddItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stDeleteItem_descriptor_, &stDeleteItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRefreshItem_descriptor_, &stRefreshItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stInitAllItem_descriptor_, &stInitAllItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqOpenShop_descriptor_, &stReqOpenShop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stShopItem_descriptor_, &stShopItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRetShopItemList_descriptor_, &stRetShopItemList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqBuyItem_descriptor_, &stReqBuyItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stBuyItemResult_descriptor_, &stBuyItemResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSynHeroSkill_descriptor_, &stSynHeroSkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stImpactHeroInfo_descriptor_, &stImpactHeroInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSynHeroInfo_descriptor_, &stSynHeroInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stInitAllHero_descriptor_, &stInitAllHero::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stNotifyAddHero_descriptor_, &stNotifyAddHero::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRefreshHero_descriptor_, &stRefreshHero::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqHeroGoOutForBattle_descriptor_, &stReqHeroGoOutForBattle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeroGoOutForBattleResult_descriptor_, &HeroGoOutForBattleResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqHeroChange2WaitState_descriptor_, &ReqHeroChange2WaitState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeroChange2WaitStateResult_descriptor_, &HeroChange2WaitStateResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stNotifyRoleAddExp_descriptor_, &stNotifyRoleAddExp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSynRoleLevel_descriptor_, &stSynRoleLevel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSynHeroLv_descriptor_, &stSynHeroLv::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSynBagPos_descriptor_, &stSynBagPos::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stMoveItem_descriptor_, &stMoveItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqArrangeMainBag_descriptor_, &stReqArrangeMainBag::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReArrangeMainBagError_descriptor_, &stReArrangeMainBagError::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRefreshMainBag_descriptor_, &stRefreshMainBag::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqCombineHero_descriptor_, &stReqCombineHero::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stCombineHeroResult_descriptor_, &stCombineHeroResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqLevelupHero_descriptor_, &stReqLevelupHero::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stLevelupHeroResult_descriptor_, &stLevelupHeroResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqHeroEvolution_descriptor_, &stReqHeroEvolution::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stEvolutionHeroResult_descriptor_, &stEvolutionHeroResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqHeroStudySkill_descriptor_, &stReqHeroStudySkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stHeroStudySkillResult_descriptor_, &stHeroStudySkillResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqRefineHeroSkill_descriptor_, &stReqRefineHeroSkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRefineHeroSkillResult_descriptor_, &stRefineHeroSkillResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSynSkillExp_descriptor_, &stSynSkillExp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqReplaceHeroSkill_descriptor_, &stReqReplaceHeroSkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReplaceHeroSkillResult_descriptor_, &stReplaceHeroSkillResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqUpgradeHeroSkill_descriptor_, &stReqUpgradeHeroSkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stUpgradeHeroSkillResult_descriptor_, &stUpgradeHeroSkillResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqSellItem_descriptor_, &stReqSellItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSellItemResult_descriptor_, &stSellItemResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqRaiseItem_descriptor_, &stReqRaiseItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRaiseItemResult_descriptor_, &stRaiseItemResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqSmeltEquip_descriptor_, &stReqSmeltEquip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSmeltEquipResult_descriptor_, &stSmeltEquipResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqRecastEquip_descriptor_, &stReqRecastEquip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecastEquipResult_descriptor_, &RecastEquipResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqCombineItem_descriptor_, &stReqCombineItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stCombineItemResult_descriptor_, &stCombineItemResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqRefreshShoplist_descriptor_, &stReqRefreshShoplist::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRefreshShoplistResult_descriptor_, &stRefreshShoplistResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stChatCmd_descriptor_, &stChatCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSynResource_descriptor_, &stSynResource::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSynLevelInfo_descriptor_, &stSynLevelInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSynCharpterInfo_descriptor_, &stSynCharpterInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSynAllLevelInfo_descriptor_, &stSynAllLevelInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stObtainItem_descriptor_, &stObtainItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqFinishLv_descriptor_, &stReqFinishLv::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stFinishLvResult_descriptor_, &stFinishLvResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqCharpterReward_descriptor_, &stReqCharpterReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stCharpterRewardResult_descriptor_, &stCharpterRewardResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqRushLevel_descriptor_, &stReqRushLevel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSynRushReward_descriptor_, &stSynRushReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stLevelRushResult_descriptor_, &stLevelRushResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqResetRushNum_descriptor_, &stReqResetRushNum::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stResetRushNumResult_descriptor_, &stResetRushNumResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqRefineEquip_descriptor_, &stReqRefineEquip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRefineEquipResult_descriptor_, &stRefineEquipResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSynTotoalRecharge_descriptor_, &stSynTotoalRecharge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSynSkillInfo_descriptor_, &stSynSkillInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSynUserAllSkill_descriptor_, &stSynUserAllSkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stAddUserSkill_descriptor_, &stAddUserSkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqUserDetailInfo_descriptor_, &stReqUserDetailInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stUserDetailInfo_descriptor_, &stUserDetailInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stUseItem_descriptor_, &stUseItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stUseItemError_descriptor_, &stUseItemError::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSynTipItem_descriptor_, &stSynTipItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stObtainItemTip_descriptor_, &stObtainItemTip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqGetEquipSkill_descriptor_, &stReqGetEquipSkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stGetEquipSkillResult_descriptor_, &stGetEquipSkillResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqRefineEquipSkill_descriptor_, &stReqRefineEquipSkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRefineEquipSkillResult_descriptor_, &stRefineEquipSkillResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stMoveEquipSkill2Slot_descriptor_, &stMoveEquipSkill2Slot::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stMoveEquipSkillResult_descriptor_, &stMoveEquipSkillResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqUpgradeEquipSkill_descriptor_, &stReqUpgradeEquipSkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stUpgradeEquipSkillResult_descriptor_, &stUpgradeEquipSkillResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSendPKUserData_descriptor_, &stSendPKUserData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqRaiseUserSkillLv_descriptor_, &stReqRaiseUserSkillLv::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRaiseUserSkillLvResult_descriptor_, &stRaiseUserSkillLvResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stNotifyNewBieGuideStep_descriptor_, &stNotifyNewBieGuideStep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSaveNewBieGuideStep_descriptor_, &stSaveNewBieGuideStep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stOpenLevelBox_descriptor_, &stOpenLevelBox::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stChangeRole_descriptor_, &stChangeRole::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stGotoSelectRole_descriptor_, &stGotoSelectRole::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSynRMPShopItem_descriptor_, &stSynRMPShopItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSynRMBShopInfo_descriptor_, &stSynRMBShopInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSynOne2OnePVPItem_descriptor_, &stSynOne2OnePVPItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stOne2OnePVPResult_descriptor_, &stOne2OnePVPResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stPrivateChatNotUser_descriptor_, &stPrivateChatNotUser::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqRecoverRemainTime_descriptor_, &stReqRecoverRemainTime::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSPAndLilianRecoverRemainTime_descriptor_, &stSPAndLilianRecoverRemainTime::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSwapHeroBattlePos_descriptor_, &stSwapHeroBattlePos::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSwapHeroBattlePosError_descriptor_, &stSwapHeroBattlePosError::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSynSystemSetting_descriptor_, &stSynSystemSetting::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqSaveSystemSetting_descriptor_, &stReqSaveSystemSetting::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stUnlockRareSkill_descriptor_, &stUnlockRareSkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stUnlockRareSkillResult_descriptor_, &stUnlockRareSkillResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stUpgradeRareSkill_descriptor_, &stUpgradeRareSkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stUpgradeRareSkillResult_descriptor_, &stUpgradeRareSkillResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqGiftBag_descriptor_, &stReqGiftBag::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stGotGiftBagResult_descriptor_, &stGotGiftBagResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSynRealTimeItem_descriptor_, &stSynRealTimeItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRealTimePKResult_descriptor_, &stRealTimePKResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqFiveRaiseEquip_descriptor_, &stReqFiveRaiseEquip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stFiveRaiseEquipResult_descriptor_, &stFiveRaiseEquipResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSynBattleProp_descriptor_, &stSynBattleProp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSynTeamCopyMapNum_descriptor_, &stSynTeamCopyMapNum::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSynRealTimePKNum_descriptor_, &stSynRealTimePKNum::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stCopymapFail_descriptor_, &stCopymapFail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqHero10TimeStudySkill_descriptor_, &stReqHero10TimeStudySkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stHero10TimesStudySkillResult_descriptor_, &stHero10TimesStudySkillResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    st10TimesGetEquipSkill_descriptor_, &st10TimesGetEquipSkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    st10TimesGetEquipSkillResult_descriptor_, &st10TimesGetEquipSkillResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqFirstRechargeReward_descriptor_, &stReqFirstRechargeReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRetFirstRechargeReward_descriptor_, &stRetFirstRechargeReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSynMobaItem_descriptor_, &stSynMobaItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stMobaPKResult_descriptor_, &stMobaPKResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSubNewBieGuideID_descriptor_, &stSubNewBieGuideID::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stResetTeamCopyMapNum_descriptor_, &stResetTeamCopyMapNum::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stResetTeampCopyMapNumResult_descriptor_, &stResetTeampCopyMapNumResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stResetRealTimeCopyMapNum_descriptor_, &stResetRealTimeCopyMapNum::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stResetRealTimeCopymapNumResult_descriptor_, &stResetRealTimeCopymapNumResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stBuyRMBItemSuccess_descriptor_, &stBuyRMBItemSuccess::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stOne2OnePVPFail_descriptor_, &stOne2OnePVPFail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRealTimeFail_descriptor_, &stRealTimeFail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stDataInitFinish_descriptor_, &stDataInitFinish::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqFirst10RechargeReward_descriptor_, &stReqFirst10RechargeReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRetFirst10RechargeReward_descriptor_, &stRetFirst10RechargeReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stChatInWorldCoolDown_descriptor_, &stChatInWorldCoolDown::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSynRoleCreateTime_descriptor_, &stSynRoleCreateTime::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqChgEquipSkill_descriptor_, &stReqChgEquipSkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRetChgEquipSkillResult_descriptor_, &stRetChgEquipSkillResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stHasCloseBetaReward_descriptor_, &stHasCloseBetaReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqGotCloseBetaReward_descriptor_, &stReqGotCloseBetaReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stGotCloseBetaRewardResult_descriptor_, &stGotCloseBetaRewardResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqUseMonthCardItem_descriptor_, &stReqUseMonthCardItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRetUseMonthCardItem_descriptor_, &stRetUseMonthCardItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqUseSelectItemBox_descriptor_, &stReqUseSelectItemBox::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRetUseSelectItemBox_descriptor_, &stRetUseSelectItemBox::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqUseHeroSkillBook_descriptor_, &stReqUseHeroSkillBook::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRetUseHeroSkillBook_descriptor_, &stRetUseHeroSkillBook::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqUseEquipSkillBook_descriptor_, &stReqUseEquipSkillBook::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRetUseEquipSkillBook_descriptor_, &stRetUseEquipSkillBook::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqBreakEquip_descriptor_, &stReqBreakEquip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stBreakEquipResult_descriptor_, &stBreakEquipResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqRecastHero_descriptor_, &stReqRecastHero::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRecastHeroResult_descriptor_, &stRecastHeroResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqChangeName_descriptor_, &stReqChangeName::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stChangeNameResult_descriptor_, &stChangeNameResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqOpenBuyGoldWindow_descriptor_, &stReqOpenBuyGoldWindow::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stOpenBuyGoldWindowResult_descriptor_, &stOpenBuyGoldWindowResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqBuyGold_descriptor_, &stReqBuyGold::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stBuyGoldResult_descriptor_, &stBuyGoldResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSendImpactHeroInfo_descriptor_, &stSendImpactHeroInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stExpBookLevelLimit_descriptor_, &stExpBookLevelLimit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stNotifyPubUniqueID_descriptor_, &stNotifyPubUniqueID::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EnchantItem_descriptor_, &EnchantItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqEnchant_descriptor_, &stReqEnchant::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRetEnchant_descriptor_, &stRetEnchant::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqRecastEnchant_descriptor_, &stReqRecastEnchant::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRetRecastEnchant_descriptor_, &stRetRecastEnchant::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqLockEnchant_descriptor_, &stReqLockEnchant::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRetLockEnchant_descriptor_, &stRetLockEnchant::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stHeroLeagueItem_descriptor_, &stHeroLeagueItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stHerLeagueResult_descriptor_, &stHerLeagueResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqHeroRune_descriptor_, &stReqHeroRune::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stHeroRuneInfo_descriptor_, &stHeroRuneInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRetHeroRune_descriptor_, &stRetHeroRune::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqAddHeroRune_descriptor_, &stReqAddHeroRune::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRetAddHeroRune_descriptor_, &stRetAddHeroRune::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqDelHeroRune_descriptor_, &stReqDelHeroRune::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRetDelHeroRune_descriptor_, &stRetDelHeroRune::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqRunePieceCombine_descriptor_, &stReqRunePieceCombine::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRetRunePieceCombine_descriptor_, &stRetRunePieceCombine::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqRuneIntensify_descriptor_, &stReqRuneIntensify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRetRuneIntensify_descriptor_, &stRetRuneIntensify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqRuneEvolve_descriptor_, &stReqRuneEvolve::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRetRuneEvolve_descriptor_, &stRetRuneEvolve::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqExtractGem_descriptor_, &stReqExtractGem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExtractGemResult_descriptor_, &ExtractGemResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqWedding_descriptor_, &stReqWedding::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqAgreeWedding_descriptor_, &stReqAgreeWedding::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResultWedding_descriptor_, &ResultWedding::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqInviteToRoom_descriptor_, &stReqInviteToRoom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyEnterWedding_descriptor_, &NotifyEnterWedding::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqAgreeEnterWedding_descriptor_, &stReqAgreeEnterWedding::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResultEnterWedding_descriptor_, &ResultEnterWedding::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarryInviterPlace_descriptor_, &MarryInviterPlace::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqDivorce_descriptor_, &stReqDivorce::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RejectDivorce_descriptor_, &RejectDivorce::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqRejectDivorce_descriptor_, &stReqRejectDivorce::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRetRejectDivorce_descriptor_, &stRetRejectDivorce::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BoardcastMarryInfo_descriptor_, &BoardcastMarryInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqUseFirework_descriptor_, &stReqUseFirework::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResultUseFirework_descriptor_, &ResultUseFirework::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyFirework_descriptor_, &NotifyFirework::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqTakeCandy_descriptor_, &stReqTakeCandy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResultTakeCandy_descriptor_, &ResultTakeCandy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqBuyFirework_descriptor_, &stReqBuyFirework::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResultBuyFirework_descriptor_, &ResultBuyFirework::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqEnterWeddingAlone_descriptor_, &stReqEnterWeddingAlone::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResultEnterWeddingAlone_descriptor_, &ResultEnterWeddingAlone::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqQuitWeddingScene_descriptor_, &stReqQuitWeddingScene::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRetQuitWeddingScene_descriptor_, &stRetQuitWeddingScene::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stNotifyFriendAction_descriptor_, &stNotifyFriendAction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSendCharCreateTime_descriptor_, &stSendCharCreateTime::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqDrawWeddingRing_descriptor_, &stReqDrawWeddingRing::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRetDrawWeddingRing_descriptor_, &stRetDrawWeddingRing::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqBuyNum_descriptor_, &stReqBuyNum::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stBuyNumResult_descriptor_, &stBuyNumResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqRefreshNum_descriptor_, &stReqRefreshNum::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRefreshNumResult_descriptor_, &stRefreshNumResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqColumnList_descriptor_, &stReqColumnList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stItemInfo_descriptor_, &stItemInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stColumnListResult_descriptor_, &stColumnListResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqMarketBuyItem_descriptor_, &stReqMarketBuyItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stMarketBuyItemResult_descriptor_, &stMarketBuyItemResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqOpenWindow_descriptor_, &stReqOpenWindow::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stOpenWindowResult_descriptor_, &stOpenWindowResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqRefreshList_descriptor_, &stReqRefreshList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRefreshListResult_descriptor_, &stRefreshListResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqAKeyRaiseUserSkillLv_descriptor_, &stReqAKeyRaiseUserSkillLv::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stAKeyRaiseUserSkillLvResult_descriptor_, &stAKeyRaiseUserSkillLvResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stMountItemInfo_descriptor_, &stMountItemInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqStoneSynthesis_descriptor_, &stReqStoneSynthesis::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stStoneSynthesisResult_descriptor_, &stStoneSynthesisResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqStoneEvolvement_descriptor_, &stReqStoneEvolvement::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stStoneEvolvementResult_descriptor_, &stStoneEvolvementResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqStoneProp_descriptor_, &stReqStoneProp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stStonePropResult_descriptor_, &stStonePropResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqChangePhoto_descriptor_, &stReqChangePhoto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stChangePhotoResult_descriptor_, &stChangePhotoResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqHasPhotoID_descriptor_, &stReqHasPhotoID::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stHasPhotoIDResult_descriptor_, &stHasPhotoIDResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqUnlockPhoto_descriptor_, &stReqUnlockPhoto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stUnlockPhotoResult_descriptor_, &stUnlockPhotoResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSpriteInfo_descriptor_, &stSpriteInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSpriteInfoResult_descriptor_, &stSpriteInfoResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stTrainHeroReq_descriptor_, &stTrainHeroReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stTrainHeroResult_descriptor_, &stTrainHeroResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stGuaJiTimeNtf_descriptor_, &stGuaJiTimeNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stGuaJiAwardReq_descriptor_, &stGuaJiAwardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stGuaJiAwardResult_descriptor_, &stGuaJiAwardResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stNftVipNtf_descriptor_, &stNftVipNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stGuaJiStartReq_descriptor_, &stGuaJiStartReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stGuaJiStartResult_descriptor_, &stGuaJiStartResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSynRMPShopItem2_descriptor_, &stSynRMPShopItem2::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSynRMBShopInfo2_descriptor_, &stSynRMBShopInfo2::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Role_2eproto() {
  delete stBattleProp::default_instance_;
  delete stBattleProp_reflection_;
  delete stRoleMainData::default_instance_;
  delete stRoleMainData_reflection_;
  delete stInitMainData::default_instance_;
  delete stInitMainData_reflection_;
  delete ReqCreateRole::default_instance_;
  delete ReqCreateRole_reflection_;
  delete CreateRoleResult::default_instance_;
  delete CreateRoleResult_reflection_;
  delete stSynSnapData::default_instance_;
  delete stSynSnapData_reflection_;
  delete RefreshSnapData::default_instance_;
  delete RefreshSnapData_reflection_;
  delete ReqEnterGame::default_instance_;
  delete ReqEnterGame_reflection_;
  delete stSynGoldCoin::default_instance_;
  delete stSynGoldCoin_reflection_;
  delete stSynPointCard::default_instance_;
  delete stSynPointCard_reflection_;
  delete stBagPos::default_instance_;
  delete stBagPos_reflection_;
  delete stItemSkillInfo::default_instance_;
  delete stItemSkillInfo_reflection_;
  delete stRaiseSkillProp::default_instance_;
  delete stRaiseSkillProp_reflection_;
  delete stEnchantInfo::default_instance_;
  delete stEnchantInfo_reflection_;
  delete stSynItemInfo::default_instance_;
  delete stSynItemInfo_reflection_;
  delete stNotifyAddItem::default_instance_;
  delete stNotifyAddItem_reflection_;
  delete stDeleteItem::default_instance_;
  delete stDeleteItem_reflection_;
  delete stRefreshItem::default_instance_;
  delete stRefreshItem_reflection_;
  delete stInitAllItem::default_instance_;
  delete stInitAllItem_reflection_;
  delete stReqOpenShop::default_instance_;
  delete stReqOpenShop_reflection_;
  delete stShopItem::default_instance_;
  delete stShopItem_reflection_;
  delete stRetShopItemList::default_instance_;
  delete stRetShopItemList_reflection_;
  delete stReqBuyItem::default_instance_;
  delete stReqBuyItem_reflection_;
  delete stBuyItemResult::default_instance_;
  delete stBuyItemResult_reflection_;
  delete stSynHeroSkill::default_instance_;
  delete stSynHeroSkill_reflection_;
  delete stImpactHeroInfo::default_instance_;
  delete stImpactHeroInfo_reflection_;
  delete stSynHeroInfo::default_instance_;
  delete stSynHeroInfo_reflection_;
  delete stInitAllHero::default_instance_;
  delete stInitAllHero_reflection_;
  delete stNotifyAddHero::default_instance_;
  delete stNotifyAddHero_reflection_;
  delete stRefreshHero::default_instance_;
  delete stRefreshHero_reflection_;
  delete stReqHeroGoOutForBattle::default_instance_;
  delete stReqHeroGoOutForBattle_reflection_;
  delete HeroGoOutForBattleResult::default_instance_;
  delete HeroGoOutForBattleResult_reflection_;
  delete ReqHeroChange2WaitState::default_instance_;
  delete ReqHeroChange2WaitState_reflection_;
  delete HeroChange2WaitStateResult::default_instance_;
  delete HeroChange2WaitStateResult_reflection_;
  delete stNotifyRoleAddExp::default_instance_;
  delete stNotifyRoleAddExp_reflection_;
  delete stSynRoleLevel::default_instance_;
  delete stSynRoleLevel_reflection_;
  delete stSynHeroLv::default_instance_;
  delete stSynHeroLv_reflection_;
  delete stSynBagPos::default_instance_;
  delete stSynBagPos_reflection_;
  delete stMoveItem::default_instance_;
  delete stMoveItem_reflection_;
  delete stReqArrangeMainBag::default_instance_;
  delete stReqArrangeMainBag_reflection_;
  delete stReArrangeMainBagError::default_instance_;
  delete stReArrangeMainBagError_reflection_;
  delete stRefreshMainBag::default_instance_;
  delete stRefreshMainBag_reflection_;
  delete stReqCombineHero::default_instance_;
  delete stReqCombineHero_reflection_;
  delete stCombineHeroResult::default_instance_;
  delete stCombineHeroResult_reflection_;
  delete stReqLevelupHero::default_instance_;
  delete stReqLevelupHero_reflection_;
  delete stLevelupHeroResult::default_instance_;
  delete stLevelupHeroResult_reflection_;
  delete stReqHeroEvolution::default_instance_;
  delete stReqHeroEvolution_reflection_;
  delete stEvolutionHeroResult::default_instance_;
  delete stEvolutionHeroResult_reflection_;
  delete stReqHeroStudySkill::default_instance_;
  delete stReqHeroStudySkill_reflection_;
  delete stHeroStudySkillResult::default_instance_;
  delete stHeroStudySkillResult_reflection_;
  delete stReqRefineHeroSkill::default_instance_;
  delete stReqRefineHeroSkill_reflection_;
  delete stRefineHeroSkillResult::default_instance_;
  delete stRefineHeroSkillResult_reflection_;
  delete stSynSkillExp::default_instance_;
  delete stSynSkillExp_reflection_;
  delete stReqReplaceHeroSkill::default_instance_;
  delete stReqReplaceHeroSkill_reflection_;
  delete stReplaceHeroSkillResult::default_instance_;
  delete stReplaceHeroSkillResult_reflection_;
  delete stReqUpgradeHeroSkill::default_instance_;
  delete stReqUpgradeHeroSkill_reflection_;
  delete stUpgradeHeroSkillResult::default_instance_;
  delete stUpgradeHeroSkillResult_reflection_;
  delete stReqSellItem::default_instance_;
  delete stReqSellItem_reflection_;
  delete stSellItemResult::default_instance_;
  delete stSellItemResult_reflection_;
  delete stReqRaiseItem::default_instance_;
  delete stReqRaiseItem_reflection_;
  delete stRaiseItemResult::default_instance_;
  delete stRaiseItemResult_reflection_;
  delete stReqSmeltEquip::default_instance_;
  delete stReqSmeltEquip_reflection_;
  delete stSmeltEquipResult::default_instance_;
  delete stSmeltEquipResult_reflection_;
  delete stReqRecastEquip::default_instance_;
  delete stReqRecastEquip_reflection_;
  delete RecastEquipResult::default_instance_;
  delete RecastEquipResult_reflection_;
  delete stReqCombineItem::default_instance_;
  delete stReqCombineItem_reflection_;
  delete stCombineItemResult::default_instance_;
  delete stCombineItemResult_reflection_;
  delete stReqRefreshShoplist::default_instance_;
  delete stReqRefreshShoplist_reflection_;
  delete stRefreshShoplistResult::default_instance_;
  delete stRefreshShoplistResult_reflection_;
  delete stChatCmd::default_instance_;
  delete stChatCmd_reflection_;
  delete stSynResource::default_instance_;
  delete stSynResource_reflection_;
  delete stSynLevelInfo::default_instance_;
  delete stSynLevelInfo_reflection_;
  delete stSynCharpterInfo::default_instance_;
  delete stSynCharpterInfo_reflection_;
  delete stSynAllLevelInfo::default_instance_;
  delete stSynAllLevelInfo_reflection_;
  delete stObtainItem::default_instance_;
  delete stObtainItem_reflection_;
  delete stReqFinishLv::default_instance_;
  delete stReqFinishLv_reflection_;
  delete stFinishLvResult::default_instance_;
  delete stFinishLvResult_reflection_;
  delete stReqCharpterReward::default_instance_;
  delete stReqCharpterReward_reflection_;
  delete stCharpterRewardResult::default_instance_;
  delete stCharpterRewardResult_reflection_;
  delete stReqRushLevel::default_instance_;
  delete stReqRushLevel_reflection_;
  delete stSynRushReward::default_instance_;
  delete stSynRushReward_reflection_;
  delete stLevelRushResult::default_instance_;
  delete stLevelRushResult_reflection_;
  delete stReqResetRushNum::default_instance_;
  delete stReqResetRushNum_reflection_;
  delete stResetRushNumResult::default_instance_;
  delete stResetRushNumResult_reflection_;
  delete stReqRefineEquip::default_instance_;
  delete stReqRefineEquip_reflection_;
  delete stRefineEquipResult::default_instance_;
  delete stRefineEquipResult_reflection_;
  delete stSynTotoalRecharge::default_instance_;
  delete stSynTotoalRecharge_reflection_;
  delete stSynSkillInfo::default_instance_;
  delete stSynSkillInfo_reflection_;
  delete stSynUserAllSkill::default_instance_;
  delete stSynUserAllSkill_reflection_;
  delete stAddUserSkill::default_instance_;
  delete stAddUserSkill_reflection_;
  delete stReqUserDetailInfo::default_instance_;
  delete stReqUserDetailInfo_reflection_;
  delete stUserDetailInfo::default_instance_;
  delete stUserDetailInfo_reflection_;
  delete stUseItem::default_instance_;
  delete stUseItem_reflection_;
  delete stUseItemError::default_instance_;
  delete stUseItemError_reflection_;
  delete stSynTipItem::default_instance_;
  delete stSynTipItem_reflection_;
  delete stObtainItemTip::default_instance_;
  delete stObtainItemTip_reflection_;
  delete stReqGetEquipSkill::default_instance_;
  delete stReqGetEquipSkill_reflection_;
  delete stGetEquipSkillResult::default_instance_;
  delete stGetEquipSkillResult_reflection_;
  delete stReqRefineEquipSkill::default_instance_;
  delete stReqRefineEquipSkill_reflection_;
  delete stRefineEquipSkillResult::default_instance_;
  delete stRefineEquipSkillResult_reflection_;
  delete stMoveEquipSkill2Slot::default_instance_;
  delete stMoveEquipSkill2Slot_reflection_;
  delete stMoveEquipSkillResult::default_instance_;
  delete stMoveEquipSkillResult_reflection_;
  delete stReqUpgradeEquipSkill::default_instance_;
  delete stReqUpgradeEquipSkill_reflection_;
  delete stUpgradeEquipSkillResult::default_instance_;
  delete stUpgradeEquipSkillResult_reflection_;
  delete stSendPKUserData::default_instance_;
  delete stSendPKUserData_reflection_;
  delete stReqRaiseUserSkillLv::default_instance_;
  delete stReqRaiseUserSkillLv_reflection_;
  delete stRaiseUserSkillLvResult::default_instance_;
  delete stRaiseUserSkillLvResult_reflection_;
  delete stNotifyNewBieGuideStep::default_instance_;
  delete stNotifyNewBieGuideStep_reflection_;
  delete stSaveNewBieGuideStep::default_instance_;
  delete stSaveNewBieGuideStep_reflection_;
  delete stOpenLevelBox::default_instance_;
  delete stOpenLevelBox_reflection_;
  delete stChangeRole::default_instance_;
  delete stChangeRole_reflection_;
  delete stGotoSelectRole::default_instance_;
  delete stGotoSelectRole_reflection_;
  delete stSynRMPShopItem::default_instance_;
  delete stSynRMPShopItem_reflection_;
  delete stSynRMBShopInfo::default_instance_;
  delete stSynRMBShopInfo_reflection_;
  delete stSynOne2OnePVPItem::default_instance_;
  delete stSynOne2OnePVPItem_reflection_;
  delete stOne2OnePVPResult::default_instance_;
  delete stOne2OnePVPResult_reflection_;
  delete stPrivateChatNotUser::default_instance_;
  delete stPrivateChatNotUser_reflection_;
  delete stReqRecoverRemainTime::default_instance_;
  delete stReqRecoverRemainTime_reflection_;
  delete stSPAndLilianRecoverRemainTime::default_instance_;
  delete stSPAndLilianRecoverRemainTime_reflection_;
  delete stSwapHeroBattlePos::default_instance_;
  delete stSwapHeroBattlePos_reflection_;
  delete stSwapHeroBattlePosError::default_instance_;
  delete stSwapHeroBattlePosError_reflection_;
  delete stSynSystemSetting::default_instance_;
  delete stSynSystemSetting_reflection_;
  delete stReqSaveSystemSetting::default_instance_;
  delete stReqSaveSystemSetting_reflection_;
  delete stUnlockRareSkill::default_instance_;
  delete stUnlockRareSkill_reflection_;
  delete stUnlockRareSkillResult::default_instance_;
  delete stUnlockRareSkillResult_reflection_;
  delete stUpgradeRareSkill::default_instance_;
  delete stUpgradeRareSkill_reflection_;
  delete stUpgradeRareSkillResult::default_instance_;
  delete stUpgradeRareSkillResult_reflection_;
  delete stReqGiftBag::default_instance_;
  delete stReqGiftBag_reflection_;
  delete stGotGiftBagResult::default_instance_;
  delete stGotGiftBagResult_reflection_;
  delete stSynRealTimeItem::default_instance_;
  delete stSynRealTimeItem_reflection_;
  delete stRealTimePKResult::default_instance_;
  delete stRealTimePKResult_reflection_;
  delete stReqFiveRaiseEquip::default_instance_;
  delete stReqFiveRaiseEquip_reflection_;
  delete stFiveRaiseEquipResult::default_instance_;
  delete stFiveRaiseEquipResult_reflection_;
  delete stSynBattleProp::default_instance_;
  delete stSynBattleProp_reflection_;
  delete stSynTeamCopyMapNum::default_instance_;
  delete stSynTeamCopyMapNum_reflection_;
  delete stSynRealTimePKNum::default_instance_;
  delete stSynRealTimePKNum_reflection_;
  delete stCopymapFail::default_instance_;
  delete stCopymapFail_reflection_;
  delete stReqHero10TimeStudySkill::default_instance_;
  delete stReqHero10TimeStudySkill_reflection_;
  delete stHero10TimesStudySkillResult::default_instance_;
  delete stHero10TimesStudySkillResult_reflection_;
  delete st10TimesGetEquipSkill::default_instance_;
  delete st10TimesGetEquipSkill_reflection_;
  delete st10TimesGetEquipSkillResult::default_instance_;
  delete st10TimesGetEquipSkillResult_reflection_;
  delete stReqFirstRechargeReward::default_instance_;
  delete stReqFirstRechargeReward_reflection_;
  delete stRetFirstRechargeReward::default_instance_;
  delete stRetFirstRechargeReward_reflection_;
  delete stSynMobaItem::default_instance_;
  delete stSynMobaItem_reflection_;
  delete stMobaPKResult::default_instance_;
  delete stMobaPKResult_reflection_;
  delete stSubNewBieGuideID::default_instance_;
  delete stSubNewBieGuideID_reflection_;
  delete stResetTeamCopyMapNum::default_instance_;
  delete stResetTeamCopyMapNum_reflection_;
  delete stResetTeampCopyMapNumResult::default_instance_;
  delete stResetTeampCopyMapNumResult_reflection_;
  delete stResetRealTimeCopyMapNum::default_instance_;
  delete stResetRealTimeCopyMapNum_reflection_;
  delete stResetRealTimeCopymapNumResult::default_instance_;
  delete stResetRealTimeCopymapNumResult_reflection_;
  delete stBuyRMBItemSuccess::default_instance_;
  delete stBuyRMBItemSuccess_reflection_;
  delete stOne2OnePVPFail::default_instance_;
  delete stOne2OnePVPFail_reflection_;
  delete stRealTimeFail::default_instance_;
  delete stRealTimeFail_reflection_;
  delete stDataInitFinish::default_instance_;
  delete stDataInitFinish_reflection_;
  delete stReqFirst10RechargeReward::default_instance_;
  delete stReqFirst10RechargeReward_reflection_;
  delete stRetFirst10RechargeReward::default_instance_;
  delete stRetFirst10RechargeReward_reflection_;
  delete stChatInWorldCoolDown::default_instance_;
  delete stChatInWorldCoolDown_reflection_;
  delete stSynRoleCreateTime::default_instance_;
  delete stSynRoleCreateTime_reflection_;
  delete stReqChgEquipSkill::default_instance_;
  delete stReqChgEquipSkill_reflection_;
  delete stRetChgEquipSkillResult::default_instance_;
  delete stRetChgEquipSkillResult_reflection_;
  delete stHasCloseBetaReward::default_instance_;
  delete stHasCloseBetaReward_reflection_;
  delete stReqGotCloseBetaReward::default_instance_;
  delete stReqGotCloseBetaReward_reflection_;
  delete stGotCloseBetaRewardResult::default_instance_;
  delete stGotCloseBetaRewardResult_reflection_;
  delete stReqUseMonthCardItem::default_instance_;
  delete stReqUseMonthCardItem_reflection_;
  delete stRetUseMonthCardItem::default_instance_;
  delete stRetUseMonthCardItem_reflection_;
  delete stReqUseSelectItemBox::default_instance_;
  delete stReqUseSelectItemBox_reflection_;
  delete stRetUseSelectItemBox::default_instance_;
  delete stRetUseSelectItemBox_reflection_;
  delete stReqUseHeroSkillBook::default_instance_;
  delete stReqUseHeroSkillBook_reflection_;
  delete stRetUseHeroSkillBook::default_instance_;
  delete stRetUseHeroSkillBook_reflection_;
  delete stReqUseEquipSkillBook::default_instance_;
  delete stReqUseEquipSkillBook_reflection_;
  delete stRetUseEquipSkillBook::default_instance_;
  delete stRetUseEquipSkillBook_reflection_;
  delete stReqBreakEquip::default_instance_;
  delete stReqBreakEquip_reflection_;
  delete stBreakEquipResult::default_instance_;
  delete stBreakEquipResult_reflection_;
  delete stReqRecastHero::default_instance_;
  delete stReqRecastHero_reflection_;
  delete stRecastHeroResult::default_instance_;
  delete stRecastHeroResult_reflection_;
  delete stReqChangeName::default_instance_;
  delete stReqChangeName_reflection_;
  delete stChangeNameResult::default_instance_;
  delete stChangeNameResult_reflection_;
  delete stReqOpenBuyGoldWindow::default_instance_;
  delete stReqOpenBuyGoldWindow_reflection_;
  delete stOpenBuyGoldWindowResult::default_instance_;
  delete stOpenBuyGoldWindowResult_reflection_;
  delete stReqBuyGold::default_instance_;
  delete stReqBuyGold_reflection_;
  delete stBuyGoldResult::default_instance_;
  delete stBuyGoldResult_reflection_;
  delete stSendImpactHeroInfo::default_instance_;
  delete stSendImpactHeroInfo_reflection_;
  delete stExpBookLevelLimit::default_instance_;
  delete stExpBookLevelLimit_reflection_;
  delete stNotifyPubUniqueID::default_instance_;
  delete stNotifyPubUniqueID_reflection_;
  delete EnchantItem::default_instance_;
  delete EnchantItem_reflection_;
  delete stReqEnchant::default_instance_;
  delete stReqEnchant_reflection_;
  delete stRetEnchant::default_instance_;
  delete stRetEnchant_reflection_;
  delete stReqRecastEnchant::default_instance_;
  delete stReqRecastEnchant_reflection_;
  delete stRetRecastEnchant::default_instance_;
  delete stRetRecastEnchant_reflection_;
  delete stReqLockEnchant::default_instance_;
  delete stReqLockEnchant_reflection_;
  delete stRetLockEnchant::default_instance_;
  delete stRetLockEnchant_reflection_;
  delete stHeroLeagueItem::default_instance_;
  delete stHeroLeagueItem_reflection_;
  delete stHerLeagueResult::default_instance_;
  delete stHerLeagueResult_reflection_;
  delete stReqHeroRune::default_instance_;
  delete stReqHeroRune_reflection_;
  delete stHeroRuneInfo::default_instance_;
  delete stHeroRuneInfo_reflection_;
  delete stRetHeroRune::default_instance_;
  delete stRetHeroRune_reflection_;
  delete stReqAddHeroRune::default_instance_;
  delete stReqAddHeroRune_reflection_;
  delete stRetAddHeroRune::default_instance_;
  delete stRetAddHeroRune_reflection_;
  delete stReqDelHeroRune::default_instance_;
  delete stReqDelHeroRune_reflection_;
  delete stRetDelHeroRune::default_instance_;
  delete stRetDelHeroRune_reflection_;
  delete stReqRunePieceCombine::default_instance_;
  delete stReqRunePieceCombine_reflection_;
  delete stRetRunePieceCombine::default_instance_;
  delete stRetRunePieceCombine_reflection_;
  delete stReqRuneIntensify::default_instance_;
  delete stReqRuneIntensify_reflection_;
  delete stRetRuneIntensify::default_instance_;
  delete stRetRuneIntensify_reflection_;
  delete stReqRuneEvolve::default_instance_;
  delete stReqRuneEvolve_reflection_;
  delete stRetRuneEvolve::default_instance_;
  delete stRetRuneEvolve_reflection_;
  delete stReqExtractGem::default_instance_;
  delete stReqExtractGem_reflection_;
  delete ExtractGemResult::default_instance_;
  delete ExtractGemResult_reflection_;
  delete stReqWedding::default_instance_;
  delete stReqWedding_reflection_;
  delete stReqAgreeWedding::default_instance_;
  delete stReqAgreeWedding_reflection_;
  delete ResultWedding::default_instance_;
  delete ResultWedding_reflection_;
  delete stReqInviteToRoom::default_instance_;
  delete stReqInviteToRoom_reflection_;
  delete NotifyEnterWedding::default_instance_;
  delete NotifyEnterWedding_reflection_;
  delete stReqAgreeEnterWedding::default_instance_;
  delete stReqAgreeEnterWedding_reflection_;
  delete ResultEnterWedding::default_instance_;
  delete ResultEnterWedding_reflection_;
  delete MarryInviterPlace::default_instance_;
  delete MarryInviterPlace_reflection_;
  delete stReqDivorce::default_instance_;
  delete stReqDivorce_reflection_;
  delete RejectDivorce::default_instance_;
  delete RejectDivorce_reflection_;
  delete stReqRejectDivorce::default_instance_;
  delete stReqRejectDivorce_reflection_;
  delete stRetRejectDivorce::default_instance_;
  delete stRetRejectDivorce_reflection_;
  delete BoardcastMarryInfo::default_instance_;
  delete BoardcastMarryInfo_reflection_;
  delete stReqUseFirework::default_instance_;
  delete stReqUseFirework_reflection_;
  delete ResultUseFirework::default_instance_;
  delete ResultUseFirework_reflection_;
  delete NotifyFirework::default_instance_;
  delete NotifyFirework_reflection_;
  delete stReqTakeCandy::default_instance_;
  delete stReqTakeCandy_reflection_;
  delete ResultTakeCandy::default_instance_;
  delete ResultTakeCandy_reflection_;
  delete stReqBuyFirework::default_instance_;
  delete stReqBuyFirework_reflection_;
  delete ResultBuyFirework::default_instance_;
  delete ResultBuyFirework_reflection_;
  delete stReqEnterWeddingAlone::default_instance_;
  delete stReqEnterWeddingAlone_reflection_;
  delete ResultEnterWeddingAlone::default_instance_;
  delete ResultEnterWeddingAlone_reflection_;
  delete stReqQuitWeddingScene::default_instance_;
  delete stReqQuitWeddingScene_reflection_;
  delete stRetQuitWeddingScene::default_instance_;
  delete stRetQuitWeddingScene_reflection_;
  delete stNotifyFriendAction::default_instance_;
  delete stNotifyFriendAction_reflection_;
  delete stSendCharCreateTime::default_instance_;
  delete stSendCharCreateTime_reflection_;
  delete stReqDrawWeddingRing::default_instance_;
  delete stReqDrawWeddingRing_reflection_;
  delete stRetDrawWeddingRing::default_instance_;
  delete stRetDrawWeddingRing_reflection_;
  delete stReqBuyNum::default_instance_;
  delete stReqBuyNum_reflection_;
  delete stBuyNumResult::default_instance_;
  delete stBuyNumResult_reflection_;
  delete stReqRefreshNum::default_instance_;
  delete stReqRefreshNum_reflection_;
  delete stRefreshNumResult::default_instance_;
  delete stRefreshNumResult_reflection_;
  delete stReqColumnList::default_instance_;
  delete stReqColumnList_reflection_;
  delete stItemInfo::default_instance_;
  delete stItemInfo_reflection_;
  delete stColumnListResult::default_instance_;
  delete stColumnListResult_reflection_;
  delete stReqMarketBuyItem::default_instance_;
  delete stReqMarketBuyItem_reflection_;
  delete stMarketBuyItemResult::default_instance_;
  delete stMarketBuyItemResult_reflection_;
  delete stReqOpenWindow::default_instance_;
  delete stReqOpenWindow_reflection_;
  delete stOpenWindowResult::default_instance_;
  delete stOpenWindowResult_reflection_;
  delete stReqRefreshList::default_instance_;
  delete stReqRefreshList_reflection_;
  delete stRefreshListResult::default_instance_;
  delete stRefreshListResult_reflection_;
  delete stReqAKeyRaiseUserSkillLv::default_instance_;
  delete stReqAKeyRaiseUserSkillLv_reflection_;
  delete stAKeyRaiseUserSkillLvResult::default_instance_;
  delete stAKeyRaiseUserSkillLvResult_reflection_;
  delete stMountItemInfo::default_instance_;
  delete stMountItemInfo_reflection_;
  delete stReqStoneSynthesis::default_instance_;
  delete stReqStoneSynthesis_reflection_;
  delete stStoneSynthesisResult::default_instance_;
  delete stStoneSynthesisResult_reflection_;
  delete stReqStoneEvolvement::default_instance_;
  delete stReqStoneEvolvement_reflection_;
  delete stStoneEvolvementResult::default_instance_;
  delete stStoneEvolvementResult_reflection_;
  delete stReqStoneProp::default_instance_;
  delete stReqStoneProp_reflection_;
  delete stStonePropResult::default_instance_;
  delete stStonePropResult_reflection_;
  delete stReqChangePhoto::default_instance_;
  delete stReqChangePhoto_reflection_;
  delete stChangePhotoResult::default_instance_;
  delete stChangePhotoResult_reflection_;
  delete stReqHasPhotoID::default_instance_;
  delete stReqHasPhotoID_reflection_;
  delete stHasPhotoIDResult::default_instance_;
  delete stHasPhotoIDResult_reflection_;
  delete stReqUnlockPhoto::default_instance_;
  delete stReqUnlockPhoto_reflection_;
  delete stUnlockPhotoResult::default_instance_;
  delete stUnlockPhotoResult_reflection_;
  delete stSpriteInfo::default_instance_;
  delete stSpriteInfo_reflection_;
  delete stSpriteInfoResult::default_instance_;
  delete stSpriteInfoResult_reflection_;
  delete stTrainHeroReq::default_instance_;
  delete stTrainHeroReq_reflection_;
  delete stTrainHeroResult::default_instance_;
  delete stTrainHeroResult_reflection_;
  delete stGuaJiTimeNtf::default_instance_;
  delete stGuaJiTimeNtf_reflection_;
  delete stGuaJiAwardReq::default_instance_;
  delete stGuaJiAwardReq_reflection_;
  delete stGuaJiAwardResult::default_instance_;
  delete stGuaJiAwardResult_reflection_;
  delete stNftVipNtf::default_instance_;
  delete stNftVipNtf_reflection_;
  delete stGuaJiStartReq::default_instance_;
  delete stGuaJiStartReq_reflection_;
  delete stGuaJiStartResult::default_instance_;
  delete stGuaJiStartResult_reflection_;
  delete stSynRMPShopItem2::default_instance_;
  delete stSynRMPShopItem2_reflection_;
  delete stSynRMBShopInfo2::default_instance_;
  delete stSynRMBShopInfo2_reflection_;
}

void protobuf_AddDesc_Role_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Proto::protobuf_AddDesc_ModID_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nRole.proto\022\004Role\032\013ModID.proto\"/\n\014stBat"
    "tleProp\022\016\n\006propID\030\001 \001(\r\022\017\n\007propVal\030\002 \001(\r"
    "\"\366\007\n\016stRoleMainData\022\016\n\006charID\030\001 \001(\r\022\014\n\004n"
    "ame\030\002 \001(\t\022\r\n\005level\030\003 \001(\r\022\013\n\003exp\030\004 \001(\r\022\020\n"
    "\010goldCoin\030\005 \001(\r\022\021\n\tpointCard\030\006 \001(\r\022\r\n\005cu"
    "rHP\030\007 \001(\r\022\r\n\005curMP\030\010 \001(\r\022\023\n\013battlePower\030"
    "\t \001(\r\022\025\n\rheishijiejing\030\n \001(\r\022\021\n\treputaio"
    "n\030\013 \001(\r\022\016\n\006honour\030\014 \001(\r\022\020\n\010braveVal\030\r \001("
    "\r\022\027\n\017peakCertificate\030\016 \001(\r\022\014\n\004hufu\030\017 \001(\r"
    "\022\016\n\006yuntie\030\020 \001(\r\022\025\n\rtotalRecharge\030\021 \001(\r\022"
    "\025\n\rtodayRecharge\030\022 \001(\r\022\013\n\003job\030\023 \001(\r\022\013\n\003s"
    "ex\030\024 \001(\r\022\n\n\002sp\030\025 \001(\r\022\016\n\006lilian\030\026 \001(\r\022\024\n\014"
    "totalConsume\030\030 \001(\r\022\022\n\njuexingNum\030\031 \001(\r\022\022"
    "\n\njuexingExp\030\032 \001(\r\022\033\n\023joinGuildRemainTim"
    "e\030\033 \001(\r\022\016\n\006headID\030\034 \001(\r\022\016\n\006faceID\030\035 \001(\r\022"
    "\031\n\021studyHeroSkillNum\030\036 \001(\r\022\026\n\016teamCopyMa"
    "pNum\030\037 \001(\r\022\025\n\rrealTimePKNum\030  \001(\r\022&\n\nbat"
    "tleProp\030! \003(\0132\022.Role.stBattleProp\022\034\n\024got"
    "FstRechargeReward\030\" \001(\010\022\033\n\023teamCopymapRe"
    "setNum\030# \001(\r\022\030\n\020realTimeResetNum\030$ \001(\r\022\036"
    "\n\026gotFst10RechargeReward\030% \001(\010\022\025\n\rchange"
    "NameNum\030& \001(\r\022\020\n\010integral\030\' \001(\r\022\020\n\010soulF"
    "ire\030( \001(\r\022\r\n\005glory\030) \001(\r\022\020\n\010coupleId\030* \001"
    "(\r\022\023\n\013lifeEssence\030+ \001(\r\022\023\n\013guidCrystal\030,"
    " \001(\r\022\021\n\tisReceive\030- \001(\010\022\017\n\007photoID\030. \001(\r"
    "\022\017\n\007trainSp\030/ \001(\r\022\022\n\nguajiStart\0300 \001(\r\022\020\n"
    "\010guajiEnd\0301 \001(\r\022\017\n\007isRobot\0302 \001(\010\022\027\n\017guaj"
    "iTodayCount\0303 \001(\r\"f\n\016stInitMainData\022\"\n\004d"
    "ata\030\001 \001(\0132\024.Role.stRoleMainData\"\027\n\nProto"
    "ModID\022\t\n\005ModID\020\002\"\027\n\nProtoFunID\022\t\n\005FunID\020"
    "\001\"\251\001\n\rReqCreateRole\022\014\n\004name\030\001 \001(\t\022\013\n\003job"
    "\030\002 \001(\r\022\013\n\003sex\030\003 \001(\r\022\016\n\006headID\030\004 \001(\r\022\016\n\006f"
    "aceID\030\005 \001(\r\022\014\n\004opID\030\006 \001(\r\022\020\n\010serverID\030\007 "
    "\001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\002\"\027\n\nProtoFun"
    "ID\022\t\n\005FunID\020\002\"\260\001\n\020CreateRoleResult\022\017\n\007re"
    "tCode\030\001 \001(\r\022\016\n\006charID\030\002 \001(\r\022\014\n\004name\030\003 \001("
    "\t\022\r\n\005level\030\004 \001(\r\022\013\n\003job\030\005 \001(\r\022\013\n\003sex\030\006 \001"
    "(\r\022\022\n\ncreateTime\030\007 \001(\r\"\027\n\nProtoModID\022\t\n\005"
    "ModID\020\002\"\027\n\nProtoFunID\022\t\n\005FunID\020\003\"V\n\rstSy"
    "nSnapData\022\016\n\006charID\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\022"
    "\r\n\005level\030\003 \001(\r\022\013\n\003job\030\004 \001(\r\022\013\n\003sex\030\005 \001(\r"
    "\"t\n\017RefreshSnapData\022!\n\004data\030\001 \003(\0132\023.Role"
    ".stSynSnapData\022\014\n\004flag\030\002 \001(\r\"\027\n\nProtoMod"
    "ID\022\t\n\005ModID\020\002\"\027\n\nProtoFunID\022\t\n\005FunID\020\004\"P"
    "\n\014ReqEnterGame\022\016\n\006charID\030\001 \001(\r\"\027\n\nProtoM"
    "odID\022\t\n\005ModID\020\002\"\027\n\nProtoFunID\022\t\n\005FunID\020\005"
    "\"N\n\rstSynGoldCoin\022\013\n\003num\030\001 \001(\r\"\027\n\nProtoM"
    "odID\022\t\n\005ModID\020\002\"\027\n\nProtoFunID\022\t\n\005FunID\020\006"
    "\"O\n\016stSynPointCard\022\013\n\003num\030\001 \001(\r\"\027\n\nProto"
    "ModID\022\t\n\005ModID\020\002\"\027\n\nProtoFunID\022\t\n\005FunID\020"
    "\007\"(\n\010stBagPos\022\017\n\007bagType\030\001 \001(\r\022\013\n\003pos\030\002 "
    "\001(\r\"3\n\017stItemSkillInfo\022\017\n\007skillID\030\001 \001(\r\022"
    "\017\n\007skillLv\030\002 \001(\r\"J\n\020stRaiseSkillProp\022\017\n\007"
    "skillID\030\001 \001(\r\022\021\n\traiseType\030\002 \001(\r\022\022\n\nrais"
    "eValue\030\003 \001(\r\"`\n\rstEnchantInfo\022\r\n\005color\030\001"
    " \001(\r\022\016\n\006locked\030\002 \001(\r\022\020\n\010propType\030\003 \001(\r\022\017"
    "\n\007propVal\030\004 \001(\r\022\r\n\005index\030\005 \001(\r\"\376\002\n\rstSyn"
    "ItemInfo\022\016\n\006itemID\030\001 \001(\r\022\022\n\ninstanceID\030\002"
    " \001(\004\022\013\n\003num\030\003 \001(\r\022\017\n\007raiseLv\030\004 \001(\r\022\r\n\005ma"
    "xHP\030\005 \001(\r\022\016\n\006damage\030\007 \001(\r\022\013\n\003exp\030\010 \001(\r\022\036"
    "\n\006bagPos\030\t \001(\0132\016.Role.stBagPos\022\023\n\013battle"
    "Power\030\n \001(\r\022\020\n\010refineLv\030\013 \001(\r\022\023\n\013obtainS"
    "kill\030\014 \001(\r\022(\n\tskillInfo\030\r \003(\0132\025.Role.stI"
    "temSkillInfo\022.\n\016raiseSkillProp\030\016 \003(\0132\026.R"
    "ole.stRaiseSkillProp\022\022\n\nremainTime\030\017 \001(\r"
    "\022\017\n\007breakLv\030\020 \001(\r\022$\n\007enchant\030\021 \003(\0132\023.Rol"
    "e.stEnchantInfo\"f\n\017stNotifyAddItem\022!\n\004da"
    "ta\030\001 \001(\0132\023.Role.stSynItemInfo\"\027\n\nProtoMo"
    "dID\022\t\n\005ModID\020\002\"\027\n\nProtoFunID\022\t\n\005FunID\020#\""
    "t\n\014stDeleteItem\022\022\n\ninstanceID\030\001 \001(\004\022\036\n\006b"
    "agPos\030\002 \001(\0132\016.Role.stBagPos\"\027\n\nProtoModI"
    "D\022\t\n\005ModID\020\002\"\027\n\nProtoFunID\022\t\n\005FunID\020\010\"d\n"
    "\rstRefreshItem\022!\n\004data\030\001 \001(\0132\023.Role.stSy"
    "nItemInfo\"\027\n\nProtoModID\022\t\n\005ModID\020\002\"\027\n\nPr"
    "otoFunID\022\t\n\005FunID\020\t\"d\n\rstInitAllItem\022!\n\004"
    "data\030\001 \003(\0132\023.Role.stSynItemInfo\"\027\n\nProto"
    "ModID\022\t\n\005ModID\020\002\"\027\n\nProtoFunID\022\t\n\005FunID\020"
    "\n\"Q\n\rstReqOpenShop\022\016\n\006shopID\030\001 \001(\r\"\027\n\nPr"
    "otoModID\022\t\n\005ModID\020\002\"\027\n\nProtoFunID\022\t\n\005Fun"
    "ID\020\013\"d\n\nstShopItem\022\r\n\005index\030\001 \001(\r\022\020\n\010uni"
    "queID\030\002 \001(\r\022\016\n\006itemID\030\003 \001(\r\022\016\n\006buyNum\030\004 "
    "\001(\r\022\025\n\rbuyNumPerTime\030\005 \001(\r\"\250\001\n\021stRetShop"
    "ItemList\022\016\n\006shopID\030\001 \001(\r\022\"\n\010shopList\030\002 \003"
    "(\0132\020.Role.stShopItem\022\031\n\021refreshRemainTim"
    "e\030\003 \001(\r\022\022\n\nrefreshNum\030\004 \001(\r\"\027\n\nProtoModI"
    "D\022\t\n\005ModID\020\002\"\027\n\nProtoFunID\022\t\n\005FunID\020\014\"\177\n"
    "\014stReqBuyItem\022\016\n\006shopID\030\001 \001(\r\022\r\n\005index\030\002"
    " \001(\r\022\013\n\003num\030\003 \001(\r\022\021\n\tisFashion\030\004 \001(\010\"\027\n\n"
    "ProtoModID\022\t\n\005ModID\020\002\"\027\n\nProtoFunID\022\t\n\005F"
    "unID\020\r\"\333\002\n\017stBuyItemResult\0220\n\007retCode\030\001 "
    "\001(\0162\037.Role.stBuyItemResult.BUYRESULT\022\"\n\010"
    "shopItem\030\002 \001(\0132\020.Role.stShopItem\022\016\n\006shop"
    "ID\030\003 \001(\r\"\257\001\n\tBUYRESULT\022\017\n\013BUY_SUCCESS\020\001\022"
    "\027\n\023RESOURCE_NOT_ENOUGH\020\002\022\014\n\010BUY_FULL\020\003\022\022"
    "\n\016ITEM_NOT_EXIST\020\004\022\013\n\007BUY_OUT\020\005\022\014\n\010LV_LI"
    "MIT\020\006\022\022\n\016GUILD_LV_LIMIT\020\007\022\024\n\020ARENA_RANK_"
    "LIMIT\020\010\022\021\n\rNOT_OPEN_TIME\020\t\"\027\n\nProtoModID"
    "\022\t\n\005ModID\020\002\"\027\n\nProtoFunID\022\t\n\005FunID\020\016\"D\n\016"
    "stSynHeroSkill\022\017\n\007skillID\030\001 \001(\r\022\017\n\007skill"
    "Lv\030\002 \001(\r\022\020\n\010skillPos\030\003 \001(\r\"J\n\020stImpactHe"
    "roInfo\022\016\n\006heroID\030\001 \001(\r\022&\n\nbattleProp\030\002 \003"
    "(\0132\022.Role.stBattleProp\"\260\002\n\rstSynHeroInfo"
    "\022\016\n\006heroID\030\001 \001(\r\022\r\n\005level\030\002 \001(\r\022!\n\005state"
    "\030\003 \001(\0162\022.Role.E_HERO_STATE\022\013\n\003pos\030\004 \001(\r\022"
    "&\n\010skillVec\030\005 \003(\0132\024.Role.stSynHeroSkill\022"
    "\r\n\005maxHP\030\006 \001(\r\022\016\n\006damage\030\007 \001(\r\022\023\n\013evolut"
    "ionLv\030\010 \001(\r\022\023\n\013battlePower\030\t \001(\r\022\024\n\014stud"
    "ySkillID\030\n \001(\r\022&\n\nbattleProp\030\013 \003(\0132\022.Rol"
    "e.stBattleProp\022\017\n\007trainLv\030\014 \001(\r\022\020\n\010train"
    "Exp\030\r \001(\r\"\215\001\n\rstInitAllHero\022\020\n\010skillExp\030"
    "\001 \001(\r\022\025\n\ruseDiamondNum\030\002 \001(\r\022!\n\004data\030\003 \003"
    "(\0132\023.Role.stSynHeroInfo\"\027\n\nProtoModID\022\t\n"
    "\005ModID\020\002\"\027\n\nProtoFunID\022\t\n\005FunID\020\017\"f\n\017stN"
    "otifyAddHero\022!\n\004data\030\001 \001(\0132\023.Role.stSynH"
    "eroInfo\"\027\n\nProtoModID\022\t\n\005ModID\020\002\"\027\n\nProt"
    "oFunID\022\t\n\005FunID\020\020\"d\n\rstRefreshHero\022!\n\004da"
    "ta\030\001 \001(\0132\023.Role.stSynHeroInfo\"\027\n\nProtoMo"
    "dID\022\t\n\005ModID\020\002\"\027\n\nProtoFunID\022\t\n\005FunID\020\021\""
    "h\n\027stReqHeroGoOutForBattle\022\016\n\006heroID\030\001 \001"
    "(\r\022\013\n\003pos\030\002 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\002"
    "\"\027\n\nProtoFunID\022\t\n\005FunID\020\022\"\203\002\n\030HeroGoOutF"
    "orBattleResult\022\016\n\006heroID\030\001 \001(\r\0227\n\007retCod"
    "e\030\002 \001(\0162&.Role.HeroGoOutForBattleResult."
    "ERESULT\022\013\n\003pos\030\003 \001(\r\"_\n\007ERESULT\022\013\n\007SUCCE"
    "SS\020\001\022\r\n\tHAS_GOOUT\020\002\022\023\n\017GO_OUT_TOO_MANY\020\003"
    "\022\017\n\013INNER_ERROR\020\004\022\022\n\016POS_WAS_LOCKED\020\005\"\027\n"
    "\nProtoModID\022\t\n\005ModID\020\002\"\027\n\nProtoFunID\022\t\n\005"
    "FunID\020\023\"[\n\027ReqHeroChange2WaitState\022\016\n\006he"
    "roID\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\002\"\027\n\nP"
    "rotoFunID\022\t\n\005FunID\020\024\"o\n\032HeroChange2WaitS"
    "tateResult\022\016\n\006heroID\030\001 \001(\r\022\017\n\007success\030\002 "
    "\001(\010\"\027\n\nProtoModID\022\t\n\005ModID\020\002\"\027\n\nProtoFun"
    "ID\022\t\n\005FunID\020\025\"V\n\022stNotifyRoleAddExp\022\016\n\006a"
    "ddExp\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\002\"\027\n\n"
    "ProtoFunID\022\t\n\005FunID\020\026\"d\n\016stSynRoleLevel\022"
    "\020\n\010curLevel\030\001 \001(\r\022\016\n\006curExp\030\002 \001(\r\"\027\n\nPro"
    "toModID\022\t\n\005ModID\020\002\"\027\n\nProtoFunID\022\t\n\005FunI"
    "D\020\027\"n\n\013stSynHeroLv\022\016\n\006heroID\030\001 \001(\r\022\016\n\006cu"
    "rExp\030\002 \001(\r\022\r\n\005curLv\030\003 \001(\r\"\027\n\nProtoModID\022"
    "\t\n\005ModID\020\002\"\027\n\nProtoFunID\022\t\n\005FunID\020\030\"+\n\013s"
    "tSynBagPos\022\017\n\007bagType\030\001 \001(\r\022\013\n\003pos\030\002 \001(\r"
    "\"\206\001\n\nstMoveItem\022\017\n\007bagType\030\001 \001(\r\022\022\n\ninst"
    "anceID\030\002 \001(\004\022!\n\006bagPos\030\003 \001(\0132\021.Role.stSy"
    "nBagPos\"\027\n\nProtoModID\022\t\n\005ModID\020\002\"\027\n\nProt"
    "oFunID\022\t\n\005FunID\020\031\"X\n\023stReqArrangeMainBag"
    "\022\017\n\007bagType\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID"
    "\020\002\"\027\n\nProtoFunID\022\t\n\005FunID\020\032\"^\n\027stReArran"
    "geMainBagError\022\021\n\terrorCode\030\001 \001(\r\"\027\n\nPro"
    "toModID\022\t\n\005ModID\020\002\"\027\n\nProtoFunID\022\t\n\005FunI"
    "D\020\033\"w\n\020stRefreshMainBag\022\016\n\006cdTime\030\001 \001(\r\022"
    "!\n\004data\030\002 \003(\0132\023.Role.stSynItemInfo\"\027\n\nPr"
    "otoModID\022\t\n\005ModID\020\002\"\027\n\nProtoFunID\022\t\n\005Fun"
    "ID\020\034\"T\n\020stReqCombineHero\022\016\n\006heroID\030\001 \001(\r"
    "\"\027\n\nProtoModID\022\t\n\005ModID\020\002\"\027\n\nProtoFunID\022"
    "\t\n\005FunID\020\035\"\326\001\n\023stCombineHeroResult\0220\n\006re"
    "sult\030\001 \001(\0162 .Role.stCombineHeroResult.Re"
    "sult\022\016\n\006heroID\030\002 \001(\r\"K\n\006Result\022\013\n\007SUCCES"
    "S\020\001\022\024\n\020NOT_ENOUGH_STONE\020\002\022\r\n\tHAS_EXIST\020\003"
    "\022\017\n\013INNER_ERROR\020\004\"\027\n\nProtoModID\022\t\n\005ModID"
    "\020\002\"\027\n\nProtoFunID\022\t\n\005FunID\020\036\"T\n\020stReqLeve"
    "lupHero\022\016\n\006heroID\030\001 \001(\r\"\027\n\nProtoModID\022\t\n"
    "\005ModID\020\002\"\027\n\nProtoFunID\022\t\n\005FunID\020\037\"\223\002\n\023st"
    "LevelupHeroResult\0220\n\006result\030\001 \001(\0162 .Role"
    ".stLevelupHeroResult.Result\022\016\n\006heroID\030\002 "
    "\001(\r\022\r\n\005curLv\030\003 \001(\r\"y\n\006Result\022\013\n\007SUCCESS\020"
    "\001\022\024\n\020NOT_ENOUGH_STONE\020\002\022\024\n\020NOT_ENOUGH_MO"
    "NEY\020\003\022\022\n\016HERO_NOT_EXIST\020\004\022\017\n\013INNER_ERROR"
    "\020\005\022\021\n\rROLE_LV_LIMIT\020\006\"\027\n\nProtoModID\022\t\n\005M"
    "odID\020\002\"\027\n\nProtoFunID\022\t\n\005FunID\020 \"V\n\022stReq"
    "HeroEvolution\022\016\n\006heroID\030\001 \001(\r\"\027\n\nProtoMo"
    "dID\022\t\n\005ModID\020\002\"\027\n\nProtoFunID\022\t\n\005FunID\020!\""
    "\357\001\n\025stEvolutionHeroResult\0222\n\006result\030\001 \001("
    "\0162\".Role.stEvolutionHeroResult.Result\022\016\n"
    "\006heroID\030\002 \001(\r\"`\n\006Result\022\013\n\007SUCCESS\020\001\022\024\n\020"
    "NOT_ENOUGH_STONE\020\002\022\016\n\nFULL_LEVEL\020\003\022\022\n\016HE"
    "RO_NOT_EXIST\020\004\022\017\n\013INNER_ERROR\020\005\"\027\n\nProto"
    "ModID\022\t\n\005ModID\020\002\"\027\n\nProtoFunID\022\t\n\005FunID\020"
    "\"\"\254\001\n\023stReqHeroStudySkill\022\016\n\006heroID\030\001 \001("
    "\r\022,\n\004type\030\002 \001(\0162\036.Role.stReqHeroStudySki"
    "ll.Type\"%\n\004Type\022\014\n\010USE_ITEM\020\001\022\017\n\013USE_DIA"
    "MOND\020\002\"\027\n\nProtoModID\022\t\n\005ModID\020\002\"\027\n\nProto"
    "FunID\022\t\n\005FunID\020#\"\322\002\n\026stHeroStudySkillRes"
    "ult\022\016\n\006heroID\030\001 \001(\r\0223\n\006result\030\002 \001(\0162#.Ro"
    "le.stHeroStudySkillResult.Result\022\017\n\007skil"
    "lID\030\003 \001(\r\022\017\n\007skillLv\030\004 \001(\r\022\025\n\ruseDiamond"
    "Num\030\005 \001(\r\"\207\001\n\006Result\022\013\n\007SUCCESS\020\001\022\023\n\017NOT"
    "_ENOUGH_ITEM\020\002\022\026\n\022NOT_ENOUGH_DIAMOND\020\003\022\036"
    "\n\032USE_DIAMOND_NUM_NOT_ENOUGH\020\004\022\022\n\016HERO_N"
    "OT_EXIST\020\005\022\017\n\013INNER_ERROR\020\006\"\027\n\nProtoModI"
    "D\022\t\n\005ModID\020\002\"\027\n\nProtoFunID\022\t\n\005FunID\020$\"X\n"
    "\024stReqRefineHeroSkill\022\016\n\006heroID\030\001 \001(\r\"\027\n"
    "\nProtoModID\022\t\n\005ModID\020\002\"\027\n\nProtoFunID\022\t\n\005"
    "FunID\020%\"\345\001\n\027stRefineHeroSkillResult\022\016\n\006h"
    "eroID\030\001 \001(\r\0224\n\006result\030\002 \001(\0162$.Role.stRef"
    "ineHeroSkillResult.Result\"R\n\006Result\022\013\n\007S"
    "UCCESS\020\001\022\026\n\022HAS_NO_STUDY_SKILL\020\002\022\022\n\016HERO"
    "_NOT_EXIST\020\003\022\017\n\013INNER_ERROR\020\004\"\027\n\nProtoMo"
    "dID\022\t\n\005ModID\020\002\"\027\n\nProtoFunID\022\t\n\005FunID\020&\""
    "Q\n\rstSynSkillExp\022\016\n\006curExp\030\001 \001(\r\"\027\n\nProt"
    "oModID\022\t\n\005ModID\020\002\"\027\n\nProtoFunID\022\t\n\005FunID"
    "\020\'\"f\n\025stReqReplaceHeroSkill\022\016\n\006heroID\030\001 "
    "\001(\r\022\013\n\003pos\030\002 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020"
    "\002\"\027\n\nProtoFunID\022\t\n\005FunID\020(\"\235\002\n\030stReplace"
    "HeroSkillResult\022\016\n\006heroID\030\001 \001(\r\022\013\n\003pos\030\002"
    " \001(\r\022\017\n\007skillID\030\003 \001(\r\0225\n\006result\030\004 \001(\0162%."
    "Role.stReplaceHeroSkillResult.Result\"j\n\006"
    "Result\022\013\n\007SUCCESS\020\001\022\022\n\016HERO_NOT_EXIST\020\002\022"
    "\031\n\025STUDY_SKILL_NOT_EXIST\020\003\022\023\n\017SKILL_HAS_"
    "EQUIP\020\004\022\017\n\013INNER_ERRRO\020\005\"\027\n\nProtoModID\022\t"
    "\n\005ModID\020\002\"\027\n\nProtoFunID\022\t\n\005FunID\020)\"f\n\025st"
    "ReqUpgradeHeroSkill\022\016\n\006heroID\030\001 \001(\r\022\013\n\003p"
    "os\030\002 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\002\"\027\n\nPro"
    "toFunID\022\t\n\005FunID\020*\"\232\002\n\030stUpgradeHeroSkil"
    "lResult\022\016\n\006heroID\030\001 \001(\r\022\017\n\007skillID\030\002 \001(\r"
    "\022\017\n\007skillLv\030\003 \001(\r\0225\n\006result\030\004 \001(\0162%.Role"
    ".stUpgradeHeroSkillResult.Result\"c\n\006Resu"
    "lt\022\013\n\007SUCCESS\020\001\022\022\n\016NOT_ENOUGH_EXP\020\002\022\022\n\016H"
    "ERO_NOT_EXIST\020\003\022\023\n\017SKILL_NOT_EXIST\020\004\022\017\n\013"
    "INNER_ERROR\020\005\"\027\n\nProtoModID\022\t\n\005ModID\020\002\"\027"
    "\n\nProtoFunID\022\t\n\005FunID\020+\"s\n\rstReqSellItem"
    "\022\017\n\007bagType\030\001 \001(\r\022\022\n\ninstanceID\030\002 \001(\004\022\013\n"
    "\003num\030\003 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\002\"\027\n\nP"
    "rotoFunID\022\t\n\005FunID\020,\"\253\001\n\020stSellItemResul"
    "t\022-\n\006result\030\001 \001(\0162\035.Role.stSellItemResul"
    "t.Result\"6\n\006Result\022\013\n\007SUCCESS\020\001\022\r\n\tNOT_E"
    "XIST\020\002\022\020\n\014CAN_NOT_SELL\020\003\"\027\n\nProtoModID\022\t"
    "\n\005ModID\020\002\"\027\n\nProtoFunID\022\t\n\005FunID\020-\"\320\001\n\016s"
    "tReqRaiseItem\022\017\n\007bagType\030\001 \001(\r\022\022\n\ninstan"
    "ceID\030\002 \001(\004\022\021\n\traiseType\030\003 \001(\r\022\025\n\reatInst"
    "anceID\030\004 \003(\004\022\021\n\tyunTieNum\030\005 \001(\r\"*\n\neRais"
    "eType\022\r\n\tUSE_STONE\020\001\022\r\n\tUSE_EQUIP\020\002\"\027\n\nP"
    "rotoModID\022\t\n\005ModID\020\002\"\027\n\nProtoFunID\022\t\n\005Fu"
    "nID\020.\"\225\002\n\021stRaiseItemResult\022\017\n\007bagType\030\001"
    " \001(\r\022\022\n\ninstanceID\030\002 \001(\004\022.\n\006result\030\003 \001(\016"
    "2\036.Role.stRaiseItemResult.Result\"y\n\006Resu"
    "lt\022\013\n\007SUCCESS\020\001\022\023\n\017EQUIP_NOT_EXIST\020\002\022\023\n\017"
    "STONE_NOT_EXIST\020\003\022\024\n\020MONEY_NOT_ENOUGH\020\004\022"
    "\017\n\013INNER_ERROR\020\005\022\021\n\rROLE_LV_LIMIT\020\006\"\027\n\nP"
    "rotoModID\022\t\n\005ModID\020\002\"\027\n\nProtoFunID\022\t\n\005Fu"
    "nID\020/\"h\n\017stReqSmeltEquip\022\017\n\007bagType\030\001 \001("
    "\r\022\022\n\ninstanceID\030\002 \003(\004\"\027\n\nProtoModID\022\t\n\005M"
    "odID\020\002\"\027\n\nProtoFunID\022\t\n\005FunID\0200\"\323\001\n\022stSm"
    "eltEquipResult\022/\n\006result\030\001 \001(\0162\037.Role.st"
    "SmeltEquipResult.Result\"Z\n\006Result\022\013\n\007SUC"
    "CESS\020\001\022\014\n\010BAG_FULL\020\002\022\017\n\013CANNT_SMELT\020\003\022\023\n"
    "\017EQUIP_NOT_EXIST\020\004\022\017\n\013INNER_ERROR\020\005\"\027\n\nP"
    "rotoModID\022\t\n\005ModID\020\002\"\027\n\nProtoFunID\022\t\n\005Fu"
    "nID\0201\"i\n\020stReqRecastEquip\022\017\n\007bagType\030\001 \001"
    "(\r\022\022\n\ninstanceID\030\002 \003(\004\"\027\n\nProtoModID\022\t\n\005"
    "ModID\020\002\"\027\n\nProtoFunID\022\t\n\005FunID\0202\"\351\001\n\021Rec"
    "astEquipResult\022.\n\006result\030\001 \001(\0162\036.Role.Re"
    "castEquipResult.Result\"r\n\006Result\022\013\n\007SUCC"
    "ESS\020\001\022\026\n\022DIAMOND_NOT_ENOUGH\020\002\022\014\n\010BAG_FUL"
    "L\020\003\022\017\n\013CANNT_SMELT\020\004\022\023\n\017EQUIP_NOT_EXIST\020"
    "\005\022\017\n\013INNER_ERROR\020\006\"\027\n\nProtoModID\022\t\n\005ModI"
    "D\020\002\"\027\n\nProtoFunID\022\t\n\005FunID\0203\"i\n\020stReqCom"
    "bineItem\022\017\n\007pieceID\030\001 \001(\r\022\022\n\ncombineNum\030"
    "\002 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\002\"\027\n\nProtoF"
    "unID\022\t\n\005FunID\0204\"\301\001\n\023stCombineItemResult\022"
    "0\n\006result\030\001 \001(\0162 .Role.stCombineItemResu"
    "lt.Result\"F\n\006Result\022\013\n\007SUCCESS\020\001\022\013\n\007FAIL"
    "URE\020\002\022\014\n\010BAG_FULL\020\003\022\024\n\020NOT_ENOUGH_PIECE\020"
    "\004\"\027\n\nProtoModID\022\t\n\005ModID\020\002\"\027\n\nProtoFunID"
    "\022\t\n\005FunID\0205\"X\n\024stReqRefreshShoplist\022\016\n\006s"
    "hopID\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\002\"\027\n\n"
    "ProtoFunID\022\t\n\005FunID\0206\"\222\002\n\027stRefreshShopl"
    "istResult\022\016\n\006shopID\030\001 \001(\r\022\"\n\010shoplist\030\002 "
    "\003(\0132\020.Role.stShopItem\0224\n\006result\030\003 \001(\0162$."
    "Role.stRefreshShoplistResult.Result\"[\n\006R"
    "esult\022\013\n\007SUCCESS\020\001\022\027\n\023RESOURCE_NOT_ENOUG"
    "H\020\002\022\022\n\016SHOP_NOT_EXIST\020\003\022\027\n\023REFRESH_NUM_U"
    "SE_OUT\020\004\"\027\n\nProtoModID\022\t\n\005ModID\020\002\"\027\n\nPro"
    "toFunID\022\t\n\005FunID\0206\"\261\002\n\tstChatCmd\022\035\n\004type"
    "\030\001 \001(\0162\017.Role.eChatType\022\022\n\ndestCharID\030\002 "
    "\001(\r\022\024\n\014destCharName\030\003 \001(\t\022\021\n\tsrcCharID\030\004"
    " \001(\r\022\023\n\013srcCharName\030\005 \001(\t\022\017\n\007content\030\006 \001"
    "(\t\022\013\n\003job\030\007 \001(\r\022\013\n\003sex\030\010 \001(\r\022\r\n\005vipLv\030\t "
    "\001(\r\022\017\n\007isVoice\030\n \001(\010\022\020\n\010voiceUrl\030\013 \001(\t\022\023"
    "\n\013voiceLenght\030\014 \001(\r\022\017\n\007photoID\030\r \001(\r\"\027\n\n"
    "ProtoModID\022\t\n\005ModID\020\002\"\027\n\nProtoFunID\022\t\n\005F"
    "unID\0207\"_\n\rstSynResource\022\017\n\007resType\030\001 \001(\r"
    "\022\013\n\003num\030\002 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\002\"\027"
    "\n\nProtoFunID\022\t\n\005FunID\0208\"d\n\016stSynLevelInf"
    "o\022\017\n\007levelID\030\001 \001(\r\022\036\n\004star\030\002 \001(\0162\020.Role."
    "eLevelStar\022\017\n\007rushNum\030\003 \001(\r\022\020\n\010resetNum\030"
    "\004 \001(\r\"d\n\021stSynCharpterInfo\022\022\n\ncharpterID"
    "\030\001 \001(\r\022\022\n\nrewardStep\030\002 \001(\r\022\'\n\tlevelInfo\030"
    "\003 \003(\0132\024.Role.stSynLevelInfo\"t\n\021stSynAllL"
    "evelInfo\022-\n\014charpterInfo\030\001 \003(\0132\027.Role.st"
    "SynCharpterInfo\"\027\n\nProtoModID\022\t\n\005ModID\020\002"
    "\"\027\n\nProtoFunID\022\t\n\005FunID\0209\"+\n\014stObtainIte"
    "m\022\016\n\006itemID\030\001 \001(\r\022\013\n\003num\030\002 \001(\r\"\251\001\n\rstReq"
    "FinishLv\022\017\n\007levelID\030\001 \001(\r\022\036\n\004star\030\002 \001(\0162"
    "\020.Role.eLevelStar\022\020\n\010goldCoin\030\003 \001(\r\022#\n\007g"
    "etItem\030\004 \003(\0132\022.Role.stObtainItem\"\027\n\nProt"
    "oModID\022\t\n\005ModID\020\002\"\027\n\nProtoFunID\022\t\n\005FunID"
    "\020:\"\234\002\n\020stFinishLvResult\022.\n\006result\030\001 \001(\0162"
    "\036.Role.stFinishLvResult.eResult\"\245\001\n\007eRes"
    "ult\022\013\n\007SUCCESS\020\001\022\021\n\rCOND_NOT_MEET\020\002\022\017\n\013I"
    "NNER_ERROR\020\003\022\021\n\rSP_NOT_ENOUGH\020\004\022\025\n\021LILIA"
    "N_NOT_ENOUGH\020\005\022\023\n\017ROLE_LV_TOO_LOW\020\006\022\030\n\024P"
    "RE_LEVEL_NOT_FINISH\020\007\022\020\n\014TIME_USE_OUT\020\010\""
    "\027\n\nProtoModID\022\t\n\005ModID\020\002\"\027\n\nProtoFunID\022\t"
    "\n\005FunID\020;\"i\n\023stReqCharpterReward\022\022\n\nchar"
    "pterID\030\001 \001(\r\022\014\n\004step\030\002 \001(\r\"\027\n\nProtoModID"
    "\022\t\n\005ModID\020\002\"\027\n\nProtoFunID\022\t\n\005FunID\020<\"\211\002\n"
    "\026stCharpterRewardResult\0224\n\006result\030\001 \001(\0162"
    "$.Role.stCharpterRewardResult.eResult\022\014\n"
    "\004step\030\002 \001(\r\"y\n\007eResult\022\013\n\007SUCCESS\020\001\022\017\n\013I"
    "NNER_ERROR\020\002\022\026\n\022CHARPTER_NOT_EXSIT\020\003\022\026\n\022"
    "STARNUM_NOT_ENOUGH\020\004\022\022\n\016HAS_GET_REWARD\020\005"
    "\022\014\n\010BAG_FULL\020\006\"\027\n\nProtoModID\022\t\n\005ModID\020\002\""
    "\027\n\nProtoFunID\022\t\n\005FunID\020=\"\177\n\016stReqRushLev"
    "el\022\017\n\007levelID\030\001 \001(\r\022\035\n\004type\030\002 \001(\0162\017.Role"
    ".eRushType\022\013\n\003num\030\003 \001(\r\"\027\n\nProtoModID\022\t\n"
    "\005ModID\020\002\"\027\n\nProtoFunID\022\t\n\005FunID\020>\".\n\017stS"
    "ynRushReward\022\016\n\006itemID\030\001 \001(\r\022\013\n\003num\030\002 \001("
    "\r\"\303\003\n\021stLevelRushResult\022/\n\006result\030\001 \001(\0162"
    "\037.Role.stLevelRushResult.eResult\022\017\n\007leve"
    "lID\030\002 \001(\r\022$\n\005items\030\003 \003(\0132\025.Role.stSynRus"
    "hReward\022\013\n\003exp\030\004 \001(\r\022\020\n\010goldCoin\030\005 \001(\r\022\035"
    "\n\004type\030\006 \001(\0162\017.Role.eRushType\"\325\001\n\007eResul"
    "t\022\013\n\007SUCCESS\020\001\022\017\n\013INNER_ERROR\020\002\022\016\n\nNOT_3"
    "_STAR\020\003\022\021\n\rSP_NOT_ENOUGH\020\004\022\025\n\021LILIAN_NOT"
    "_ENOUGH\020\005\022\020\n\014RUSH_NUM_OUT\020\006\022\021\n\rLV_CANNT_"
    "RUSH\020\007\022\014\n\010BAG_FULL\020\010\022\022\n\016VIP_LV_TOO_LOW\020\t"
    "\022\032\n\026RUSH_TICKET_NOT_ENOUGH\020\n\022\017\n\013BATTLEPO"
    "WER\020\013\"\027\n\nProtoModID\022\t\n\005ModID\020\002\"\027\n\nProtoF"
    "unID\022\t\n\005FunID\020\?\"V\n\021stReqResetRushNum\022\017\n\007"
    "levelID\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\002\"\027"
    "\n\nProtoFunID\022\t\n\005FunID\020@\"\375\001\n\024stResetRushN"
    "umResult\022\017\n\007levelID\030\001 \001(\r\0222\n\006result\030\002 \001("
    "\0162\".Role.stResetRushNumResult.eResult\"n\n"
    "\007eResult\022\013\n\007SUCCESS\020\001\022\017\n\013INNER_ERROR\020\002\022\027"
    "\n\023CHARPTER_NOT_FINISH\020\003\022\024\n\020LEVEL_NOT_FIN"
    "ISH\020\004\022\026\n\022DIAMOND_NOT_ENOUGH\020\005\"\027\n\nProtoMo"
    "dID\022\t\n\005ModID\020\002\"\027\n\nProtoFunID\022\t\n\005FunID\020A\""
    "i\n\020stReqRefineEquip\022\017\n\007bagType\030\001 \001(\r\022\022\n\n"
    "instanceID\030\002 \001(\004\"\027\n\nProtoModID\022\t\n\005ModID\020"
    "\002\"\027\n\nProtoFunID\022\t\n\005FunID\020B\"\236\002\n\023stRefineE"
    "quipResult\022\017\n\007bagType\030\001 \001(\r\022\022\n\ninstanceI"
    "D\030\002 \001(\004\0221\n\006result\030\003 \001(\0162!.Role.stRefineE"
    "quipResult.eResult\"}\n\007eResult\022\014\n\010eSUCCES"
    "S\020\001\022\024\n\020eEQUIP_NOT_EXIST\020\002\022\020\n\014eINNER_ERRO"
    "R\020\003\022\030\n\024eGOLDCOIN_NOT_ENOUGH\020\004\022\024\n\020eITEM_N"
    "OT_ENOUGH\020\005\022\014\n\010eFULL_LV\020\006\"\027\n\nProtoModID\022"
    "\t\n\005ModID\020\002\"\027\n\nProtoFunID\022\t\n\005FunID\020C\"u\n\023s"
    "tSynTotoalRecharge\022\025\n\rtotalRecharge\030\001 \001("
    "\r\022\025\n\rtodayRecharge\030\002 \001(\r\"\027\n\nProtoModID\022\t"
    "\n\005ModID\020\002\"\027\n\nProtoFunID\022\t\n\005FunID\020D\"2\n\016st"
    "SynSkillInfo\022\017\n\007skillID\030\001 \001(\r\022\017\n\007skillLv"
    "\030\002 \001(\r\"n\n\021stSynUserAllSkill\022\'\n\tskillInfo"
    "\030\001 \003(\0132\024.Role.stSynSkillInfo\"\027\n\nProtoMod"
    "ID\022\t\n\005ModID\020\002\"\027\n\nProtoFunID\022\t\n\005FunID\020E\"f"
    "\n\016stAddUserSkill\022\"\n\004data\030\001 \001(\0132\024.Role.st"
    "SynSkillInfo\"\027\n\nProtoModID\022\t\n\005ModID\020\002\"\027\n"
    "\nProtoFunID\022\t\n\005FunID\020F\"W\n\023stReqUserDetai"
    "lInfo\022\016\n\006charID\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005M"
    "odID\020\002\"\027\n\nProtoFunID\022\t\n\005FunID\020G\"\362\001\n\020stUs"
    "erDetailInfo\022&\n\010mainData\030\001 \001(\0132\024.Role.st"
    "RoleMainData\022%\n\010itemData\030\002 \003(\0132\023.Role.st"
    "SynItemInfo\022%\n\010heroData\030\003 \003(\0132\023.Role.stS"
    "ynHeroInfo\022\021\n\tguildName\030\004 \001(\t\022\022\n\ncoupleN"
    "ame\030\005 \001(\t\022\017\n\007mountID\030\006 \001(\r\"\027\n\nProtoModID"
    "\022\t\n\005ModID\020\002\"\027\n\nProtoFunID\022\t\n\005FunID\020H\"t\n\t"
    "stUseItem\022\017\n\007bagType\030\001 \001(\r\022\022\n\ninstanceID"
    "\030\002 \001(\004\022\020\n\010batchUse\030\003 \001(\010\"\027\n\nProtoModID\022\t"
    "\n\005ModID\020\002\"\027\n\nProtoFunID\022\t\n\005FunID\020I\"\376\001\n\016s"
    "tUseItemError\022,\n\006result\030\001 \001(\0162\034.Role.stU"
    "seItemError.eResult\022\016\n\006itemID\030\002 \001(\r\"|\n\007e"
    "Result\022\023\n\017eItem_Not_Exist\020\001\022\030\n\024eBag_Slot"
    "_Not_Enough\020\002\022\035\n\031eBag_Need_Media_Not_Exi"
    "st\020\003\022\014\n\010eSuccess\020\004\022\025\n\021eUse_Item_Invalid\020"
    "\005\"\027\n\nProtoModID\022\t\n\005ModID\020\002\"\027\n\nProtoFunID"
    "\022\t\n\005FunID\020J\"+\n\014stSynTipItem\022\016\n\006itemID\030\001 "
    "\001(\r\022\013\n\003num\030\002 \001(\r\"i\n\017stObtainItemTip\022$\n\010g"
    "etItems\030\001 \003(\0132\022.Role.stSynTipItem\"\027\n\nPro"
    "toModID\022\t\n\005ModID\020\002\"\027\n\nProtoFunID\022\t\n\005FunI"
    "D\020K\"k\n\022stReqGetEquipSkill\022\017\n\007bagType\030\001 \001"
    "(\r\022\022\n\ninstanceID\030\002 \001(\004\"\027\n\nProtoModID\022\t\n\005"
    "ModID\020\002\"\027\n\nProtoFunID\022\t\n\005FunID\020L\"\211\002\n\025stG"
    "etEquipSkillResult\022\017\n\007bagType\030\001 \001(\r\022\022\n\ni"
    "nstanceID\030\002 \001(\004\0223\n\006result\030\003 \001(\0162#.Role.s"
    "tGetEquipSkillResult.eResult\022\017\n\007skillID\030"
    "\004 \001(\r\"S\n\007eResult\022\013\n\007SUCCESS\020\001\022\026\n\022NOT_ENO"
    "UGH_DIAMOND\020\002\022\020\n\014TIME_USE_OUT\020\003\022\021\n\rHAS_G"
    "OT_SKILL\020\004\"\027\n\nProtoModID\022\t\n\005ModID\020\002\"\027\n\nP"
    "rotoFunID\022\t\n\005FunID\020M\"n\n\025stReqRefineEquip"
    "Skill\022\017\n\007bagType\030\001 \001(\r\022\022\n\ninstanceID\030\002 \001"
    "(\004\"\027\n\nProtoModID\022\t\n\005ModID\020\002\"\027\n\nProtoFunI"
    "D\022\t\n\005FunID\020N\"\352\001\n\030stRefineEquipSkillResul"
    "t\022\017\n\007bagType\030\001 \001(\r\022\022\n\ninstanceID\030\002 \001(\004\0226"
    "\n\006result\030\003 \001(\0162&.Role.stRefineEquipSkill"
    "Result.eResult\"\?\n\007eResult\022\014\n\010eSuccess\020\001\022"
    "\024\n\020eSkill_Not_Exist\020\002\022\020\n\014eInner_Error\020\003\""
    "\027\n\nProtoModID\022\t\n\005ModID\020\002\"\027\n\nProtoFunID\022\t"
    "\n\005FunID\020O\"}\n\025stMoveEquipSkill2Slot\022\017\n\007ba"
    "gType\030\001 \001(\r\022\022\n\ninstanceID\030\002 \001(\004\022\r\n\005index"
    "\030\003 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\002\"\027\n\nProto"
    "FunID\022\t\n\005FunID\020P\"\364\001\n\026stMoveEquipSkillRes"
    "ult\022\017\n\007bagType\030\001 \001(\r\022\022\n\ninstanceID\030\002 \001(\004"
    "\022\r\n\005index\030\003 \001(\r\022\017\n\007skillID\030\004 \001(\r\0224\n\006resu"
    "lt\030\005 \001(\0162$.Role.stMoveEquipSkillResult.e"
    "Result\"-\n\007eResult\022\014\n\010eSuccess\020\001\022\024\n\020eSlot"
    "_Was_Locked\020\002\"\027\n\nProtoModID\022\t\n\005ModID\020\002\"\027"
    "\n\nProtoFunID\022\t\n\005FunID\020Q\"~\n\026stReqUpgradeE"
    "quipSkill\022\017\n\007bagType\030\001 \001(\r\022\022\n\ninstanceID"
    "\030\002 \001(\004\022\r\n\005index\030\003 \001(\r\"\027\n\nProtoModID\022\t\n\005M"
    "odID\020\002\"\027\n\nProtoFunID\022\t\n\005FunID\020R\"\226\002\n\031stUp"
    "gradeEquipSkillResult\022\017\n\007bagType\030\001 \001(\r\022\022"
    "\n\ninstanceID\030\002 \001(\004\022\r\n\005index\030\003 \001(\r\022\n\n\002lv\030"
    "\004 \001(\r\0227\n\006result\030\005 \001(\0162\'.Role.stUpgradeEq"
    "uipSkillResult.eResult\"N\n\007eResult\022\014\n\010eSu"
    "ccess\020\001\022\025\n\021eMoney_Not_Enough\020\002\022\014\n\010eFull_"
    "Lv\020\003\022\020\n\014eInner_Error\020\004\"\027\n\nProtoModID\022\t\n\005"
    "ModID\020\002\"\027\n\nProtoFunID\022\t\n\005FunID\020S\"\276\002\n\020stS"
    "endPKUserData\022&\n\010mainData\030\001 \001(\0132\024.Role.s"
    "tRoleMainData\022%\n\010itemData\030\002 \003(\0132\023.Role.s"
    "tSynItemInfo\022%\n\010heroData\030\003 \003(\0132\023.Role.st"
    "SynHeroInfo\022.\n\006pkType\030\004 \001(\0162\036.Role.stSen"
    "dPKUserData.ePKType\022\025\n\rchallengeRank\030\005 \001"
    "(\r\";\n\007ePKType\022\r\n\teArena_PK\020\001\022\016\n\neLeitai_"
    "PK\020\002\022\021\n\reIntercept_PK\020\003\"\027\n\nProtoModID\022\t\n"
    "\005ModID\020\002\"\027\n\nProtoFunID\022\t\n\005FunID\020T\"Z\n\025stR"
    "eqRaiseUserSkillLv\022\017\n\007skillID\030\001 \001(\r\"\027\n\nP"
    "rotoModID\022\t\n\005ModID\020\002\"\027\n\nProtoFunID\022\t\n\005Fu"
    "nID\020U\"\231\002\n\030stRaiseUserSkillLvResult\0226\n\006re"
    "sult\030\001 \001(\0162&.Role.stRaiseUserSkillLvResu"
    "lt.eResult\022\017\n\007skillID\030\002 \001(\r\022\017\n\007skillLv\030\003"
    " \001(\r\"q\n\007eResult\022\014\n\010eSuccess\020\001\022\024\n\020eSkill_"
    "Not_Exist\020\002\022\024\n\020eInner_Cfg_Error\020\003\022\030\n\024eGo"
    "ldCoin_Not_Enough\020\004\022\022\n\016eRole_Lv_Limit\020\005\""
    "\027\n\nProtoModID\022\t\n\005ModID\020\002\"\027\n\nProtoFunID\022\t"
    "\n\005FunID\020V\"n\n\027stNotifyNewBieGuideStep\022\016\n\006"
    "stepID\030\001 \001(\r\022\021\n\tsubStepID\030\002 \001(\r\"\027\n\nProto"
    "ModID\022\t\n\005ModID\020\002\"\027\n\nProtoFunID\022\t\n\005FunID\020"
    "W\"Y\n\025stSaveNewBieGuideStep\022\016\n\006stepID\030\001 \001"
    "(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\002\"\027\n\nProtoFunI"
    "D\022\t\n\005FunID\020X\"R\n\016stOpenLevelBox\022\016\n\006charID"
    "\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\002\"\027\n\nProto"
    "FunID\022\t\n\005FunID\020Y\"P\n\014stChangeRole\022\016\n\006char"
    "ID\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\002\"\027\n\nPro"
    "toFunID\022\t\n\005FunID\020Z\"W\n\020stGotoSelectRole\022\021"
    "\n\tcurCharID\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID"
    "\020\002\"\027\n\nProtoFunID\022\t\n\005FunID\020[\"T\n\020stSynRMPS"
    "hopItem\022\n\n\002id\030\001 \001(\r\022\016\n\006hasBuy\030\002 \001(\010\022\022\n\nr"
    "emainTime\030\003 \001(\r\022\020\n\010buyCount\030\004 \001(\r\"k\n\020stS"
    "ynRMBShopInfo\022%\n\005items\030\001 \003(\0132\026.Role.stSy"
    "nRMPShopItem\"\027\n\nProtoModID\022\t\n\005ModID\020\002\"\027\n"
    "\nProtoFunID\022\t\n\005FunID\020\\\"f\n\023stSynOne2OnePV"
    "PItem\022\014\n\004name\030\001 \001(\t\022\r\n\005level\030\002 \001(\r\022\023\n\013ba"
    "ttlePower\030\003 \001(\r\022\r\n\005score\030\004 \001(\r\022\016\n\006charid"
    "\030\005 \001(\r\"\276\001\n\022stOne2OnePVPResult\022(\n\005winer\030\001"
    " \001(\0132\031.Role.stSynOne2OnePVPItem\022(\n\005loser"
    "\030\002 \001(\0132\031.Role.stSynOne2OnePVPItem\022\020\n\010add"
    "Score\030\003 \001(\r\022\020\n\010delScore\030\004 \001(\r\"\027\n\nProtoMo"
    "dID\022\t\n\005ModID\020\002\"\027\n\nProtoFunID\022\t\n\005FunID\020]\""
    "Z\n\024stPrivateChatNotUser\022\020\n\010destName\030\001 \001("
    "\t\"\027\n\nProtoModID\022\t\n\005ModID\020\002\"\027\n\nProtoFunID"
    "\022\t\n\005FunID\020^\"Z\n\026stReqRecoverRemainTime\022\016\n"
    "\006charID\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\002\"\027"
    "\n\nProtoFunID\022\t\n\005FunID\020_\"\235\001\n\036stSPAndLilia"
    "nRecoverRemainTime\022\024\n\014spRemainTime\030\001 \001(\r"
    "\022\030\n\020lilianRemainTime\030\002 \001(\r\022\031\n\021trainSpRem"
    "ainTime\030\003 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\002\"\027"
    "\n\nProtoFunID\022\t\n\005FunID\020`\"\217\001\n\023stSwapHeroBa"
    "ttlePos\022\021\n\tsrcHeroID\030\001 \001(\r\022\016\n\006srcPos\030\002 \001"
    "(\r\022\022\n\ndestHeroID\030\003 \001(\r\022\017\n\007destPos\030\004 \001(\r\""
    "\027\n\nProtoModID\022\t\n\005ModID\020\002\"\027\n\nProtoFunID\022\t"
    "\n\005FunID\020a\"\271\001\n\030stSwapHeroBattlePosError\0226"
    "\n\006result\030\001 \001(\0162&.Role.stSwapHeroBattlePo"
    "sError.eResult\"3\n\007eResult\022\023\n\017eHERO_NOT_E"
    "XIST\020\001\022\023\n\017eHERO_NOT_GOOUT\020\002\"\027\n\nProtoModI"
    "D\022\t\n\005ModID\020\002\"\027\n\nProtoFunID\022\t\n\005FunID\020b\"]\n"
    "\022stSynSystemSetting\022\025\n\rsystemSetting\030\001 \001"
    "(\004\"\027\n\nProtoModID\022\t\n\005ModID\020\002\"\027\n\nProtoFunI"
    "D\022\t\n\005FunID\020c\"q\n\026stReqSaveSystemSetting\022\016"
    "\n\006charID\030\001 \001(\r\022\025\n\rsystemSetting\030\002 \001(\004\"\027\n"
    "\nProtoModID\022\t\n\005ModID\020\002\"\027\n\nProtoFunID\022\t\n\005"
    "FunID\020d\"U\n\021stUnlockRareSkill\022\016\n\006heroID\030\001"
    " \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\002\"\027\n\nProtoFu"
    "nID\022\t\n\005FunID\020e\"\213\002\n\027stUnlockRareSkillResu"
    "lt\022\016\n\006heroID\030\001 \001(\r\022\017\n\007skillID\030\002 \001(\r\0225\n\006r"
    "esult\030\003 \001(\0162%.Role.stUnlockRareSkillResu"
    "lt.eResult\"f\n\007eResult\022\014\n\010eSuccess\020\001\022\024\n\020e"
    "Has_No_GoldCoin\020\002\022\020\n\014eLevel_Limit\020\003\022\023\n\017e"
    "Hero_Not_Exist\020\004\022\020\n\014eInner_Error\020\005\"\027\n\nPr"
    "otoModID\022\t\n\005ModID\020\002\"\027\n\nProtoFunID\022\t\n\005Fun"
    "ID\020f\"g\n\022stUpgradeRareSkill\022\016\n\006heroID\030\001 \001"
    "(\r\022\017\n\007skillID\030\002 \001(\r\"\027\n\nProtoModID\022\t\n\005Mod"
    "ID\020\002\"\027\n\nProtoFunID\022\t\n\005FunID\020g\"\215\002\n\030stUpgr"
    "adeRareSkillResult\022\016\n\006heroID\030\001 \001(\r\022\017\n\007sk"
    "illID\030\002 \001(\r\0226\n\006result\030\003 \001(\0162&.Role.stUpg"
    "radeRareSkillResult.eResult\"f\n\007eResult\022\014"
    "\n\010eSuccess\020\001\022\024\n\020eHas_No_GoldCoin\020\002\022\020\n\014eL"
    "evel_Limit\020\003\022\023\n\017eHero_Not_Exist\020\004\022\020\n\014eIn"
    "ner_Error\020\005\"\027\n\nProtoModID\022\t\n\005ModID\020\002\"\027\n\n"
    "ProtoFunID\022\t\n\005FunID\020h\"N\n\014stReqGiftBag\022\014\n"
    "\004code\030\001 \001(\t\"\027\n\nProtoModID\022\t\n\005ModID\020\002\"\027\n\n"
    "ProtoFunID\022\t\n\005FunID\020i\"\216\002\n\022stGotGiftBagRe"
    "sult\0220\n\006result\030\001 \001(\0162 .Role.stGotGiftBag"
    "Result.eResult\"\223\001\n\007eResult\022\014\n\010eSuccess\020\001"
    "\022\017\n\013eInnerError\020\002\022\020\n\014eTime_Expire\020\003\022\021\n\re"
    "Code_Invalid\020\004\022\023\n\017eCode_Not_Exist\020\005\022\025\n\021e"
    "Code_Error_Other\020\006\022\030\n\024eCode_Used_Not_Oth"
    "er\020\007\"\027\n\nProtoModID\022\t\n\005ModID\020\002\"\027\n\nProtoFu"
    "nID\022\t\n\005FunID\020j\"\214\001\n\021stSynRealTimeItem\022\020\n\010"
    "roleName\030\001 \001(\t\022\r\n\005level\030\002 \001(\r\022\023\n\013battleP"
    "ower\030\003 \001(\r\022\021\n\taddHonour\030\004 \001(\r\022\017\n\007killNum"
    "\030\005 \001(\r\022\r\n\005isDie\030\006 \001(\010\022\016\n\006charid\030\007 \001(\r\"\226\001"
    "\n\022stRealTimePKResult\022&\n\005sideA\030\001 \003(\0132\027.Ro"
    "le.stSynRealTimeItem\022&\n\005sideB\030\002 \003(\0132\027.Ro"
    "le.stSynRealTimeItem\"\027\n\nProtoModID\022\t\n\005Mo"
    "dID\020\002\"\027\n\nProtoFunID\022\t\n\005FunID\020k\"z\n\023stReqF"
    "iveRaiseEquip\022\017\n\007bagType\030\001 \001(\r\022\022\n\ninstan"
    "ceID\030\002 \001(\004\022\014\n\004toLv\030\003 \001(\r\"\027\n\nProtoModID\022\t"
    "\n\005ModID\020\002\"\027\n\nProtoFunID\022\t\n\005FunID\020l\"\223\002\n\026s"
    "tFiveRaiseEquipResult\022\017\n\007bagType\030\001 \001(\r\022\022"
    "\n\ninstanceID\030\002 \001(\004\0224\n\006result\030\003 \001(\0162$.Rol"
    "e.stFiveRaiseEquipResult.eResult\"l\n\007eRes"
    "ult\022\014\n\010eSUCCESS\020\001\022\020\n\014eINNER_ERROR\020\002\022\022\n\016e"
    "ROLE_LV_LIMIT\020\003\022\026\n\022eYUNTIE_NOT_ENOUGH\020\004\022"
    "\025\n\021eMONEY_NOT_ENOUGH\020\005\"\027\n\nProtoModID\022\t\n\005"
    "ModID\020\002\"\027\n\nProtoFunID\022\t\n\005FunID\020m\"\200\001\n\017stS"
    "ynBattleProp\022\023\n\013battlePower\030\001 \001(\r\022&\n\nbat"
    "tleProp\030\002 \003(\0132\022.Role.stBattleProp\"\027\n\nPro"
    "toModID\022\t\n\005ModID\020\002\"\027\n\nProtoFunID\022\t\n\005FunI"
    "D\020n\"T\n\023stSynTeamCopyMapNum\022\013\n\003num\030\001 \001(\r\""
    "\027\n\nProtoModID\022\t\n\005ModID\020\002\"\027\n\nProtoFunID\022\t"
    "\n\005FunID\020o\"S\n\022stSynRealTimePKNum\022\013\n\003num\030\001"
    " \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\002\"\027\n\nProtoFu"
    "nID\022\t\n\005FunID\020p\"T\n\rstCopymapFail\022\021\n\tcopyM"
    "apID\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\002\"\027\n\nP"
    "rotoFunID\022\t\n\005FunID\020q\"]\n\031stReqHero10TimeS"
    "tudySkill\022\016\n\006heroID\030\001 \001(\r\"\027\n\nProtoModID\022"
    "\t\n\005ModID\020\002\"\027\n\nProtoFunID\022\t\n\005FunID\020r\"\226\003\n\035"
    "stHero10TimesStudySkillResult\022;\n\006result\030"
    "\001 \001(\0162+.Role.stHero10TimesStudySkillResu"
    "lt.eResult\022\016\n\006heroID\030\002 \001(\r\022\017\n\007skillID\030\003 "
    "\001(\r\022\025\n\ruseDiamondNum\030\004 \001(\r\022\023\n\013addSkillEx"
    "p\030\005 \001(\r\022\025\n\rstudySkillNum\030\006 \001(\r\"\241\001\n\007eResu"
    "lt\022\014\n\010eSuccess\020\001\022\023\n\017eHero_Not_Exist\020\002\022\020\n"
    "\014eInner_Error\020\003\022\027\n\023eNot_Enough_Diamond\020\004"
    "\022\024\n\020eNot_Enough_Item\020\005\022\037\n\033eUse_Diamond_N"
    "um_Not_Enough\020\006\022\021\n\reHas_VipRight\020\007\"\027\n\nPr"
    "otoModID\022\t\n\005ModID\020\002\"\027\n\nProtoFunID\022\t\n\005Fun"
    "ID\020s\"o\n\026st10TimesGetEquipSkill\022\017\n\007bagTyp"
    "e\030\001 \001(\r\022\022\n\ninstanceID\030\002 \001(\004\"\027\n\nProtoModI"
    "D\022\t\n\005ModID\020\002\"\027\n\nProtoFunID\022\t\n\005FunID\020t\"\235\003"
    "\n\034st10TimesGetEquipSkillResult\022\017\n\007bagTyp"
    "e\030\001 \001(\r\022\022\n\ninstanceID\030\002 \001(\004\022:\n\006result\030\003 "
    "\001(\0162*.Role.st10TimesGetEquipSkillResult."
    "eResult\022\017\n\007skillID\030\004 \001(\r\022\022\n\njuexingNum\030\005"
    " \001(\r\022\025\n\rgetJueXingExp\030\006 \001(\r\"\255\001\n\007eResult\022"
    "\014\n\010eSuccess\020\001\022\024\n\020eEquip_Not_Exist\020\002\022\021\n\re"
    "Time_Use_Out\020\003\022\024\n\020eItem_Not_Enough\020\004\022\027\n\023"
    "eDiamond_Not_Enough\020\005\022\024\n\020eHas_Exist_Skil"
    "l\020\006\022\020\n\014eInner_Error\020\007\022\024\n\020eHas_No_VipRigh"
    "t\020\010\"\027\n\nProtoModID\022\t\n\005ModID\020\002\"\027\n\nProtoFun"
    "ID\022\t\n\005FunID\020u\"\\\n\030stReqFirstRechargeRewar"
    "d\022\016\n\006charID\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID"
    "\020\002\"\027\n\nProtoFunID\022\t\n\005FunID\020v\"\330\001\n\030stRetFir"
    "stRechargeReward\0226\n\006result\030\001 \001(\0162&.Role."
    "stRetFirstRechargeReward.eResult\"R\n\007eRes"
    "ult\022\014\n\010eSuccess\020\001\022\025\n\021eHas_Not_Recharge\020\002"
    "\022\023\n\017eHas_Got_Reward\020\003\022\r\n\teBag_Full\020\004\"\027\n\n"
    "ProtoModID\022\t\n\005ModID\020\002\"\027\n\nProtoFunID\022\t\n\005F"
    "unID\020w\"\214\001\n\rstSynMobaItem\022\020\n\010roleName\030\001 \001"
    "(\t\022\r\n\005level\030\002 \001(\r\022\023\n\013battlePower\030\003 \001(\r\022\021"
    "\n\taddHonour\030\004 \001(\r\022\017\n\007killNum\030\005 \001(\r\022\021\n\tbe"
    "KillNum\030\006 \001(\r\022\016\n\006charid\030\007 \001(\r\"\212\001\n\016stMoba"
    "PKResult\022\"\n\005sideA\030\001 \003(\0132\023.Role.stSynMoba"
    "Item\022\"\n\005sideB\030\002 \003(\0132\023.Role.stSynMobaItem"
    "\"\027\n\nProtoModID\022\t\n\005ModID\020\002\"\027\n\nProtoFunID\022"
    "\t\n\005FunID\020x\"R\n\022stSubNewBieGuideID\022\n\n\002id\030\001"
    " \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\002\"\027\n\nProtoFu"
    "nID\022\t\n\005FunID\020y\"Y\n\025stResetTeamCopyMapNum\022"
    "\016\n\006charID\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\002"
    "\"\027\n\nProtoFunID\022\t\n\005FunID\020z\"\327\001\n\034stResetTea"
    "mpCopyMapNumResult\022:\n\006result\030\001 \001(\0162*.Rol"
    "e.stResetTeampCopyMapNumResult.eResult\"I"
    "\n\007eResult\022\027\n\023eReset_Time_Use_Out\020\001\022\027\n\023eD"
    "iamond_Not_Enough\020\002\022\014\n\010eSuccess\020\003\"\027\n\nPro"
    "toModID\022\t\n\005ModID\020\002\"\027\n\nProtoFunID\022\t\n\005FunI"
    "D\020{\"]\n\031stResetRealTimeCopyMapNum\022\016\n\006char"
    "ID\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\002\"\027\n\nPro"
    "toFunID\022\t\n\005FunID\020|\"\335\001\n\037stResetRealTimeCo"
    "pymapNumResult\022=\n\006result\030\001 \001(\0162-.Role.st"
    "ResetRealTimeCopymapNumResult.eResult\"I\n"
    "\007eResult\022\027\n\023eReset_Time_Use_Out\020\001\022\027\n\023eDi"
    "amond_Not_Enough\020\002\022\014\n\010eSuccess\020\003\"\027\n\nProt"
    "oModID\022\t\n\005ModID\020\002\"\027\n\nProtoFunID\022\t\n\005FunID"
    "\020}\"q\n\023stBuyRMBItemSuccess\022(\n\010itemInfo\030\001 "
    "\001(\0132\026.Role.stSynRMPShopItem\"\027\n\nProtoModI"
    "D\022\t\n\005ModID\020\002\"\027\n\nProtoFunID\022\t\n\005FunID\020~\"\204\001"
    "\n\020stOne2OnePVPFail\022(\n\005loser\030\001 \003(\0132\031.Role"
    ".stSynOne2OnePVPItem\022\024\n\014pkWithFriend\030\002 \001"
    "(\010\"\027\n\nProtoModID\022\t\n\005ModID\020\002\"\027\n\nProtoFunI"
    "D\022\t\n\005FunID\020\177\"\223\001\n\016stRealTimeFail\022&\n\005sideA"
    "\030\001 \003(\0132\027.Role.stSynRealTimeItem\022&\n\005sideB"
    "\030\002 \003(\0132\027.Role.stSynRealTimeItem\"\027\n\nProto"
    "ModID\022\t\n\005ModID\020\002\"\030\n\nProtoFunID\022\n\n\005FunID\020"
    "\200\001\"a\n\020stDataInitFinish\022\016\n\006result\030\001 \001(\010\022\n"
    "\n\002IP\030\002 \001(\t\"\027\n\nProtoModID\022\t\n\005ModID\020\002\"\030\n\nP"
    "rotoFunID\022\n\n\005FunID\020\201\001\"_\n\032stReqFirst10Rec"
    "hargeReward\022\016\n\006charID\030\001 \001(\r\"\027\n\nProtoModI"
    "D\022\t\n\005ModID\020\002\"\030\n\nProtoFunID\022\n\n\005FunID\020\202\001\"\344"
    "\001\n\032stRetFirst10RechargeReward\0228\n\006result\030"
    "\001 \001(\0162(.Role.stRetFirst10RechargeReward."
    "eResult\"Y\n\007eResult\022\014\n\010eSuccess\020\001\022\034\n\030eHas"
    "_Not_Enough_Recharge\020\002\022\023\n\017eHas_Got_Rewar"
    "d\020\003\022\r\n\teBag_Full\020\004\"\027\n\nProtoModID\022\t\n\005ModI"
    "D\020\002\"\030\n\nProtoFunID\022\n\n\005FunID\020\203\001\"^\n\025stChatI"
    "nWorldCoolDown\022\022\n\nremainTime\030\001 \001(\r\"\027\n\nPr"
    "otoModID\022\t\n\005ModID\020\002\"\030\n\nProtoFunID\022\n\n\005Fun"
    "ID\020\204\001\"\\\n\023stSynRoleCreateTime\022\022\n\ncreateTi"
    "me\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\002\"\030\n\nPro"
    "toFunID\022\n\n\005FunID\020\205\001\"\224\001\n\022stReqChgEquipSki"
    "ll\022\025\n\rsrcInstanceID\030\001 \001(\004\022\025\n\rdstInstance"
    "ID\030\002 \001(\004\022\035\n\025chgSoulItemInstanceID\030\003 \001(\004\""
    "\027\n\nProtoModID\022\t\n\005ModID\020\002\"\030\n\nProtoFunID\022\n"
    "\n\005FunID\020\206\001\"\314\002\n\030stRetChgEquipSkillResult\022"
    "\025\n\rsrcInstanceID\030\001 \001(\004\022\025\n\rdstInstanceID\030"
    "\002 \001(\004\0226\n\006result\030\003 \001(\0162&.Role.stRetChgEqu"
    "ipSkillResult.eResult\"\226\001\n\007eResult\022\014\n\010eSu"
    "ccess\020\001\022\027\n\023eSrc_Item_Not_Exist\020\002\022\027\n\023eDst"
    "_Item_Not_Exist\020\003\022\032\n\026eHas_Not_Chg_Soul_I"
    "tem\020\004\022\022\n\016eCond_Not_Meet\020\005\022\033\n\027eDec_Chg_So"
    "ul_Item_Fail\020\006\"\027\n\nProtoModID\022\t\n\005ModID\020\002\""
    "\030\n\nProtoFunID\022\n\n\005FunID\020\207\001\"\203\001\n\024stHasClose"
    "BetaReward\022\r\n\005boxID\030\001 \001(\r\022\023\n\013giveDiamond"
    "\030\002 \001(\r\022\024\n\014giveRecharge\030\003 \001(\r\"\027\n\nProtoMod"
    "ID\022\t\n\005ModID\020\002\"\030\n\nProtoFunID\022\n\n\005FunID\020\210\001\""
    "\\\n\027stReqGotCloseBetaReward\022\016\n\006charID\030\001 \001"
    "(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\002\"\030\n\nProtoFunI"
    "D\022\n\n\005FunID\020\211\001\"\205\002\n\032stGotCloseBetaRewardRe"
    "sult\0228\n\006result\030\001 \001(\0162(.Role.stGotCloseBe"
    "taRewardResult.eResult\022\023\n\013giveDiamond\030\002 "
    "\001(\r\022\024\n\014giveRecharge\030\003 \001(\r\"O\n\007eResult\022\014\n\010"
    "eSuccess\020\001\022\014\n\010eBagFull\020\002\022\023\n\017eHas_Got_Rew"
    "ard\020\003\022\023\n\017eHas_Not_Reward\020\004\"\027\n\nProtoModID"
    "\022\t\n\005ModID\020\002\"\030\n\nProtoFunID\022\n\n\005FunID\020\212\001\"^\n"
    "\025stReqUseMonthCardItem\022\022\n\ninstanceID\030\001 \001"
    "(\004\"\027\n\nProtoModID\022\t\n\005ModID\020\002\"\030\n\nProtoFunI"
    "D\022\n\n\005FunID\020\213\001\"\316\001\n\025stRetUseMonthCardItem\022"
    "3\n\006result\030\001 \001(\0162#.Role.stRetUseMonthCard"
    "Item.eResult\"M\n\007eResult\022\014\n\010eSuccess\020\001\022\013\n"
    "\007eExpire\020\002\022\022\n\016eToday_Has_Use\020\003\022\023\n\017eItem_"
    "Not_Exist\020\004\"\027\n\nProtoModID\022\t\n\005ModID\020\002\"\030\n\n"
    "ProtoFunID\022\n\n\005FunID\020\214\001\"s\n\025stReqUseSelect"
    "ItemBox\022\022\n\ninstanceID\030\001 \001(\004\022\023\n\013selectInd"
    "ex\030\002 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\002\"\030\n\nPro"
    "toFunID\022\n\n\005FunID\020\215\001\"\301\001\n\025stRetUseSelectIt"
    "emBox\0223\n\006result\030\001 \001(\0162#.Role.stRetUseSel"
    "ectItemBox.eResult\"@\n\007eResult\022\014\n\010eSucces"
    "s\020\001\022\023\n\017eItem_Not_Exist\020\002\022\022\n\016eDec_Item_Fa"
    "il\020\003\"\027\n\nProtoModID\022\t\n\005ModID\020\002\"\030\n\nProtoFu"
    "nID\022\n\n\005FunID\020\216\001\"n\n\025stReqUseHeroSkillBook"
    "\022\022\n\ninstanceID\030\001 \001(\004\022\016\n\006heroID\030\002 \001(\r\"\027\n\n"
    "ProtoModID\022\t\n\005ModID\020\002\"\030\n\nProtoFunID\022\n\n\005F"
    "unID\020\217\001\"\354\001\n\025stRetUseHeroSkillBook\0223\n\006res"
    "ult\030\001 \001(\0162#.Role.stRetUseHeroSkillBook.e"
    "Result\"k\n\007eResult\022\014\n\010eSuccess\020\001\022\023\n\017eItem"
    "_Not_Exist\020\002\022\022\n\016eDec_Item_Fail\020\003\022\024\n\020eSki"
    "ll_Has_Exist\020\004\022\023\n\017eHero_Not_Exist\020\005\"\027\n\nP"
    "rotoModID\022\t\n\005ModID\020\002\"\030\n\nProtoFunID\022\n\n\005Fu"
    "nID\020\220\001\"\214\001\n\026stReqUseEquipSkillBook\022\022\n\nins"
    "tanceID\030\001 \001(\004\022\023\n\013destBagType\030\002 \001(\r\022\026\n\016de"
    "stInstanceID\030\003 \001(\004\"\027\n\nProtoModID\022\t\n\005ModI"
    "D\020\002\"\030\n\nProtoFunID\022\n\n\005FunID\020\221\001\"\357\001\n\026stRetU"
    "seEquipSkillBook\0224\n\006result\030\001 \001(\0162$.Role."
    "stRetUseEquipSkillBook.eResult\"l\n\007eResul"
    "t\022\014\n\010eSuccess\020\001\022\023\n\017eItem_Not_Exist\020\002\022\030\n\024"
    "eEquip_Cond_Not_Meet\020\003\022\022\n\016eDec_Item_Fail"
    "\020\004\022\020\n\014eSkill_Exist\020\005\"\027\n\nProtoModID\022\t\n\005Mo"
    "dID\020\002\"\030\n\nProtoFunID\022\n\n\005FunID\020\222\001\"i\n\017stReq"
    "BreakEquip\022\017\n\007bagType\030\001 \001(\r\022\022\n\ninstanceI"
    "D\030\002 \001(\004\"\027\n\nProtoModID\022\t\n\005ModID\020\002\"\030\n\nProt"
    "oFunID\022\n\n\005FunID\020\223\001\"\311\002\n\022stBreakEquipResul"
    "t\022\017\n\007bagType\030\001 \001(\r\022\022\n\ninstanceID\030\002 \001(\004\0220"
    "\n\006result\030\003 \001(\0162 .Role.stBreakEquipResult"
    ".eResult\"\250\001\n\007eResult\022\014\n\010eSUCCESS\020\001\022\024\n\020eE"
    "QUIP_NOT_EXIST\020\002\022\020\n\014eINNER_ERROR\020\003\022\030\n\024eG"
    "OLDCOIN_NOT_ENOUGH\020\004\022\024\n\020eITEM_NOT_ENOUGH"
    "\020\005\022\023\n\017eRAISE_LV_LIMIT\020\006\022\014\n\010eFULL_LV\020\007\022\024\n"
    "\020eITEM_NOT_ORANGE\020\010\"\027\n\nProtoModID\022\t\n\005Mod"
    "ID\020\002\"\030\n\nProtoFunID\022\n\n\005FunID\020\224\001\"T\n\017stReqR"
    "ecastHero\022\016\n\006heroID\030\002 \003(\r\"\027\n\nProtoModID\022"
    "\t\n\005ModID\020\002\"\030\n\nProtoFunID\022\n\n\005FunID\020\225\001\"\353\001\n"
    "\022stRecastHeroResult\022/\n\006result\030\001 \001(\0162\037.Ro"
    "le.stRecastHeroResult.Result\"q\n\006Result\022\013"
    "\n\007SUCCESS\020\001\022\026\n\022DIAMOND_NOT_ENOUGH\020\002\022\014\n\010B"
    "AG_FULL\020\003\022\017\n\013CANNT_SMELT\020\004\022\022\n\016HERO_NOT_E"
    "XIST\020\005\022\017\n\013INNER_ERROR\020\006\"\027\n\nProtoModID\022\t\n"
    "\005ModID\020\002\"\030\n\nProtoFunID\022\n\n\005FunID\020\226\001\"b\n\017st"
    "ReqChangeName\022\014\n\004name\030\001 \001(\t\022\016\n\006charID\030\002 "
    "\001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\002\"\030\n\nProtoFun"
    "ID\022\n\n\005FunID\020\227\001\"\315\001\n\022stChangeNameResult\0220\n"
    "\006result\030\001 \001(\0162 .Role.stChangeNameResult."
    "eResult\022\014\n\004name\030\002 \001(\t\"D\n\007eResult\022\014\n\010eSuc"
    "cess\020\001\022\027\n\023eNot_Enough_Diamond\020\002\022\022\n\016eName"
    "_Occupied\020\003\"\027\n\nProtoModID\022\t\n\005ModID\020\002\"\030\n\n"
    "ProtoFunID\022\n\n\005FunID\020\230\001\"[\n\026stReqOpenBuyGo"
    "ldWindow\022\016\n\006charID\030\001 \001(\r\"\027\n\nProtoModID\022\t"
    "\n\005ModID\020\002\"\030\n\nProtoFunID\022\n\n\005FunID\020\231\001\"`\n\031s"
    "tOpenBuyGoldWindowResult\022\020\n\010buyCount\030\001 \001"
    "(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\002\"\030\n\nProtoFunI"
    "D\022\n\n\005FunID\020\232\001\"Q\n\014stReqBuyGold\022\016\n\006charID\030"
    "\001 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\002\"\030\n\nProtoF"
    "unID\022\n\n\005FunID\020\233\001\"\321\001\n\017stBuyGoldResult\022-\n\006"
    "result\030\001 \001(\0162\035.Role.stBuyGoldResult.eRes"
    "ult\"\\\n\007eResult\022\014\n\010eSuccess\020\001\022\024\n\020eInner_C"
    "fg_Error\020\003\022\030\n\024eGoldCoin_Not_Enough\020\004\022\023\n\017"
    "eRole_Vip_Limit\020\005\"\027\n\nProtoModID\022\t\n\005ModID"
    "\020\002\"\030\n\nProtoFunID\022\n\n\005FunID\020\234\001\"o\n\024stSendIm"
    "pactHeroInfo\022$\n\004data\030\001 \003(\0132\026.Role.stImpa"
    "ctHeroInfo\"\027\n\nProtoModID\022\t\n\005ModID\020\002\"\030\n\nP"
    "rotoFunID\022\n\n\005FunID\020\235\001\"\247\001\n\023stExpBookLevel"
    "Limit\0221\n\006result\030\001 \001(\0162!.Role.stExpBookLe"
    "velLimit.eResult\"*\n\007eResult\022\016\n\nLV_TOO_LO"
    "W\020\001\022\017\n\013LV_TOO_HIGH\020\002\"\027\n\nProtoModID\022\t\n\005Mo"
    "dID\020\002\"\030\n\nProtoFunID\022\n\n\005FunID\020\236\001\"Z\n\023stNot"
    "ifyPubUniqueID\022\020\n\010uniqueID\030\001 \001(\r\"\027\n\nProt"
    "oModID\022\t\n\005ModID\020\002\"\030\n\nProtoFunID\022\n\n\005FunID"
    "\020\237\001\"&\n\013EnchantItem\022\n\n\002id\030\001 \001(\004\022\013\n\003num\030\002 "
    "\001(\r\"\222\001\n\014stReqEnchant\022\017\n\007bagType\030\001 \001(\r\022\n\n"
    "\002id\030\002 \001(\004\022\037\n\004item\030\003 \003(\0132\021.Role.EnchantIt"
    "em\022\021\n\tenchantId\030\004 \001(\004\"\027\n\nProtoModID\022\t\n\005M"
    "odID\020\002\"\030\n\nProtoFunID\022\n\n\005FunID\020\240\001\"\375\002\n\014stR"
    "etEnchant\022\017\n\007bagType\030\001 \001(\r\022\n\n\002id\030\002 \001(\004\022*"
    "\n\006result\030\003 \001(\0162\032.Role.stRetEnchant.eResu"
    "lt\022$\n\007enchant\030\004 \001(\0132\023.Role.stEnchantInfo"
    "\"\312\001\n\007eResult\022\014\n\010eSuccess\020\001\022\016\n\neGold_Less"
    "\020\002\022\017\n\013ePiece_Less\020\003\022\021\n\reEnchant_Less\020\004\022\024"
    "\n\020eNo_Such_Fashion\020\005\022\023\n\017eEnchant_Locked\020"
    "\006\022\024\n\020ePiece_Wrong_Num\020\007\022\023\n\017eNo_Such_Conf"
    "ig\020\010\022\021\n\reMax_Prop_Num\020\t\022\024\n\020eMax_Enchant_"
    "Num\020\n\"\027\n\nProtoModID\022\t\n\005ModID\020\002\"\030\n\nProtoF"
    "unID\022\n\n\005FunID\020\241\001\"l\n\022stReqRecastEnchant\022\017"
    "\n\007bagType\030\001 \001(\r\022\022\n\ninstanceID\030\002 \001(\004\"\027\n\nP"
    "rotoModID\022\t\n\005ModID\020\002\"\030\n\nProtoFunID\022\n\n\005Fu"
    "nID\020\242\001\"\205\002\n\022stRetRecastEnchant\022\017\n\007bagType"
    "\030\001 \001(\r\022\022\n\ninstanceID\030\002 \001(\004\0220\n\006result\030\003 \001"
    "(\0162 .Role.stRetRecastEnchant.eResult\"e\n\007"
    "eResult\022\014\n\010eSuccess\020\001\022\024\n\020eNo_Such_Fashio"
    "n\020\002\022\r\n\teBag_Full\020\003\022\024\n\020eLimited_Fashion\020\004"
    "\022\021\n\reDiamond_Less\020\005\"\027\n\nProtoModID\022\t\n\005Mod"
    "ID\020\002\"\030\n\nProtoFunID\022\n\n\005FunID\020\243\001\"\211\001\n\020stReq"
    "LockEnchant\022\017\n\007bagType\030\001 \001(\r\022\022\n\ninstance"
    "ID\030\002 \001(\004\022\r\n\005index\030\003 \001(\r\022\016\n\006isLock\030\004 \001(\r\""
    "\027\n\nProtoModID\022\t\n\005ModID\020\002\"\030\n\nProtoFunID\022\n"
    "\n\005FunID\020\244\001\"\374\001\n\020stRetLockEnchant\022\017\n\007bagTy"
    "pe\030\001 \001(\r\022\022\n\ninstanceID\030\002 \001(\004\022\r\n\005index\030\003 "
    "\001(\r\022\016\n\006isLock\030\004 \001(\r\022.\n\006result\030\005 \001(\0162\036.Ro"
    "le.stRetLockEnchant.eResult\"A\n\007eResult\022\014"
    "\n\010eSuccess\020\001\022\024\n\020eNo_Such_Fashion\020\002\022\022\n\016eN"
    "o_Such_Index\020\003\"\027\n\nProtoModID\022\t\n\005ModID\020\002\""
    "\030\n\nProtoFunID\022\n\n\005FunID\020\245\001\"S\n\020stHeroLeagu"
    "eItem\022\014\n\004name\030\001 \001(\t\022\r\n\005level\030\002 \001(\r\022\023\n\013ba"
    "ttlePower\030\003 \001(\r\022\r\n\005score\030\004 \001(\r\"\274\001\n\021stHer"
    "LeagueResult\022%\n\005winer\030\001 \001(\0132\026.Role.stHer"
    "oLeagueItem\022%\n\005loser\030\002 \001(\0132\026.Role.stHero"
    "LeagueItem\022\022\n\nwinerScore\030\003 \001(\r\022\022\n\nloserS"
    "core\030\004 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\002\"\030\n\nP"
    "rotoFunID\022\n\n\005FunID\020\246\001\"R\n\rstReqHeroRune\022\016"
    "\n\006heroID\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\002\""
    "\030\n\nProtoFunID\022\n\n\005FunID\020\247\001\"U\n\016stHeroRuneI"
    "nfo\022\016\n\006itemId\030\001 \001(\r\022\022\n\ninstanceID\030\002 \001(\004\022"
    "\022\n\nslot_index\030\003 \001(\r\022\013\n\003pos\030\004 \001(\r\"w\n\rstRe"
    "tHeroRune\022\016\n\006heroID\030\001 \001(\r\022#\n\005runes\030\002 \003(\013"
    "2\024.Role.stHeroRuneInfo\"\027\n\nProtoModID\022\t\n\005"
    "ModID\020\002\"\030\n\nProtoFunID\022\n\n\005FunID\020\250\001\"v\n\020stR"
    "eqAddHeroRune\022\016\n\006heroID\030\001 \001(\r\022\022\n\ninstanc"
    "eID\030\002 \001(\004\022\013\n\003pos\030\003 \001(\r\"\027\n\nProtoModID\022\t\n\005"
    "ModID\020\002\"\030\n\nProtoFunID\022\n\n\005FunID\020\251\001\"\303\002\n\020st"
    "RetAddHeroRune\022\016\n\006heroID\030\001 \001(\r\022\022\n\ninstan"
    "ceID\030\002 \001(\004\022\013\n\003pos\030\003 \001(\r\022#\n\005runes\030\004 \003(\0132\024"
    ".Role.stHeroRuneInfo\022.\n\006result\030\005 \001(\0162\036.R"
    "ole.stRetAddHeroRune.eResult\"v\n\007eResult\022"
    "\014\n\010eSuccess\020\001\022\021\n\reNo_Such_Hero\020\002\022\021\n\reNo_"
    "Such_Rune\020\003\022\023\n\017eRune_Same_Attr\020\004\022\020\n\014eNo_"
    "Such_Pos\020\005\022\020\n\014eInner_Error\020\006\"\027\n\nProtoMod"
    "ID\022\t\n\005ModID\020\002\"\030\n\nProtoFunID\022\n\n\005FunID\020\252\001\""
    "v\n\020stReqDelHeroRune\022\016\n\006heroID\030\001 \001(\r\022\022\n\ni"
    "nstanceID\030\002 \001(\004\022\013\n\003pos\030\003 \001(\r\"\027\n\nProtoMod"
    "ID\022\t\n\005ModID\020\002\"\030\n\nProtoFunID\022\n\n\005FunID\020\253\001\""
    "\301\002\n\020stRetDelHeroRune\022\016\n\006heroID\030\001 \001(\r\022\022\n\n"
    "instanceID\030\002 \001(\004\022\013\n\003pos\030\003 \001(\r\022#\n\005runes\030\004"
    " \003(\0132\024.Role.stHeroRuneInfo\022.\n\006result\030\005 \001"
    "(\0162\036.Role.stRetDelHeroRune.eResult\"t\n\007eR"
    "esult\022\014\n\010eSuccess\020\001\022\021\n\reNo_Such_Hero\020\002\022\021"
    "\n\reNo_Such_Rune\020\003\022\020\n\014eNo_Such_Pos\020\004\022\021\n\re"
    "Run_Bag_Full\020\005\022\020\n\014eInner_Error\020\006\"\027\n\nProt"
    "oModID\022\t\n\005ModID\020\002\"\030\n\nProtoFunID\022\n\n\005FunID"
    "\020\254\001\"^\n\025stReqRunePieceCombine\022\022\n\ninstance"
    "ID\030\001 \001(\004\"\027\n\nProtoModID\022\t\n\005ModID\020\002\"\030\n\nPro"
    "toFunID\022\n\n\005FunID\020\255\001\"\255\002\n\025stRetRunePieceCo"
    "mbine\022\022\n\ninstanceID\030\001 \001(\004\022\016\n\006itemId\030\002 \001("
    "\r\0223\n\006result\030\003 \001(\0162#.Role.stRetRunePieceC"
    "ombine.eResult\"\207\001\n\007eResult\022\014\n\010eSuccess\020\001"
    "\022\027\n\023eLess_Of_Rune_Piece\020\002\022\027\n\023eNo_Such_Ru"
    "ne_Piece\020\003\022\022\n\016eRune_Bag_Full\020\004\022\026\n\022eLess_"
    "Of_Soul_Fire\020\005\022\020\n\014eInner_Error\020\006\"\027\n\nProt"
    "oModID\022\t\n\005ModID\020\002\"\030\n\nProtoFunID\022\n\n\005FunID"
    "\020\256\001\"\223\001\n\022stReqRuneIntensify\022\017\n\007bagType\030\001 "
    "\001(\r\022\022\n\ninstanceID\030\002 \001(\004\022\025\n\reatInstanceID"
    "\030\003 \003(\004\022\016\n\006heroID\030\004 \001(\r\"\027\n\nProtoModID\022\t\n\005"
    "ModID\020\002\"\030\n\nProtoFunID\022\n\n\005FunID\020\257\001\"\324\002\n\022st"
    "RetRuneIntensify\022\017\n\007bagType\030\001 \001(\r\022\022\n\nins"
    "tanceID\030\002 \001(\004\0220\n\006result\030\003 \001(\0162 .Role.stR"
    "etRuneIntensify.eResult\"\263\001\n\007eResult\022\014\n\010e"
    "Success\020\001\022\021\n\reNo_Such_Rune\020\002\022\021\n\reLess_Of"
    "_Gold\020\003\022\020\n\014eMax_Run_Lvl\020\004\022\026\n\022eLess_Of_So"
    "ul_Fire\020\005\022\020\n\014eMax_Eat_Num\020\006\022\r\n\teEat_Self"
    "\020\007\022\027\n\023eNot_Exist_Eat_Rune\020\t\022\020\n\014eInner_Er"
    "ror\020\n\"\027\n\nProtoModID\022\t\n\005ModID\020\002\"\030\n\nProtoF"
    "unID\022\n\n\005FunID\020\260\001\"y\n\017stReqRuneEvolve\022\017\n\007b"
    "agType\030\001 \001(\r\022\022\n\ninstanceID\030\002 \001(\004\022\016\n\006hero"
    "ID\030\003 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\002\"\030\n\nPro"
    "toFunID\022\n\n\005FunID\020\261\001\"\245\002\n\017stRetRuneEvolve\022"
    "\017\n\007bagType\030\001 \001(\r\022\022\n\ninstanceID\030\002 \001(\004\022-\n\006"
    "result\030\003 \001(\0162\035.Role.stRetRuneEvolve.eRes"
    "ult\"\212\001\n\007eResult\022\014\n\010eSuccess\020\001\022\021\n\reNo_Suc"
    "h_Rune\020\002\022\021\n\reLess_Of_Gold\020\003\022\021\n\reRune_Max"
    "_Lvl\020\004\022\021\n\reLess_Of_Rune\020\005\022\023\n\017eRole_Lvl_L"
    "imit\020\006\022\020\n\014eInner_Error\020\007\"\027\n\nProtoModID\022\t"
    "\n\005ModID\020\002\"\030\n\nProtoFunID\022\n\n\005FunID\020\262\001\"q\n\017s"
    "tReqExtractGem\022\n\n\002id\030\001 \001(\r\022\013\n\003pay\030\002 \003(\004\022"
    "\022\n\nsuccesspay\030\003 \001(\004\"\027\n\nProtoModID\022\t\n\005Mod"
    "ID\020\002\"\030\n\nProtoFunID\022\n\n\005FunID\020\263\001\"\347\002\n\020Extra"
    "ctGemResult\022-\n\006result\030\001 \001(\0162\035.Role.Extra"
    "ctGemResult.Result\022\n\n\002id\030\002 \001(\r\"\344\001\n\006Resul"
    "t\022\022\n\016RESULT_SUCCESS\020\001\022\026\n\022RESULT_ERROR_LE"
    "VEL\020\002\022\025\n\021RESULT_ERROR_GOLD\020\003\022\023\n\017RESULT_E"
    "RROR_ID\020\004\022\025\n\021RESULT_ERROR_LIST\020\005\022\034\n\030RESU"
    "LT_ERROR_SUCCESSLIST\020\006\022\025\n\021RESULT_ERROR_M"
    "ISS\020\007\022\034\n\030RESULT_ERROR_SUCCESSMISS\020\010\022\030\n\024R"
    "ESULT_ERROR_UNKNOWN\020\t\"\027\n\nProtoModID\022\t\n\005M"
    "odID\020\002\"\030\n\nProtoFunID\022\n\n\005FunID\020\264\001\"i\n\014stRe"
    "qWedding\022\n\n\002id\030\001 \001(\r\022\014\n\004cfg1\030\002 \001(\r\022\014\n\004cf"
    "g2\030\003 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\002\"\030\n\nPro"
    "toFunID\022\n\n\005FunID\020\266\001\"n\n\021stReqAgreeWedding"
    "\022\n\n\002id\030\001 \001(\r\022\014\n\004cfg1\030\002 \001(\r\022\014\n\004cfg2\030\003 \001(\r"
    "\"\027\n\nProtoModID\022\t\n\005ModID\020\002\"\030\n\nProtoFunID\022"
    "\n\n\005FunID\020\267\001\"\207\002\n\rResultWedding\022*\n\006result\030"
    "\001 \001(\0162\032.Role.ResultWedding.Result\"\226\001\n\006Re"
    "sult\022\022\n\016RESULT_SUCCESS\020\001\022\027\n\023RESULT_ERROR"
    "_ONLINE\020\002\022\026\n\022RESULT_ERROR_MONEY\020\003\022\024\n\020RES"
    "ULT_ERROR_BAG\020\004\022\030\n\024RESULT_ERROR_UNKNOWN\020"
    "\005\022\027\n\023RESULT_SUCCESS_SEND\020\006\"\027\n\nProtoModID"
    "\022\t\n\005ModID\020\002\"\030\n\nProtoFunID\022\n\n\005FunID\020\270\001\"R\n"
    "\021stReqInviteToRoom\022\n\n\002id\030\001 \001(\r\"\027\n\nProtoM"
    "odID\022\t\n\005ModID\020\002\"\030\n\nProtoFunID\022\n\n\005FunID\020\271"
    "\001\"S\n\022NotifyEnterWedding\022\n\n\002id\030\001 \001(\r\"\027\n\nP"
    "rotoModID\022\t\n\005ModID\020\002\"\030\n\nProtoFunID\022\n\n\005Fu"
    "nID\020\272\001\"\273\001\n\026stReqAgreeEnterWedding\0223\n\006res"
    "ult\030\001 \001(\0162#.Role.stReqAgreeEnterWedding."
    "Result\022\n\n\002id\030\002 \001(\r\"-\n\006Result\022\020\n\014RESULT_A"
    "GREE\020\001\022\021\n\rRESULT_REFUSE\020\002\"\027\n\nProtoModID\022"
    "\t\n\005ModID\020\002\"\030\n\nProtoFunID\022\n\n\005FunID\020\273\001\"\252\001\n"
    "\022ResultEnterWedding\022/\n\006result\030\001 \001(\0162\037.Ro"
    "le.ResultEnterWedding.Result\"0\n\006Result\022\022"
    "\n\016RESULT_SUCCESS\020\001\022\022\n\016RESULT_FAILURE\020\002\"\027"
    "\n\nProtoModID\022\t\n\005ModID\020\002\"\030\n\nProtoFunID\022\n\n"
    "\005FunID\020\274\001\"\351\001\n\021MarryInviterPlace\022,\n\005state"
    "\030\001 \001(\0162\035.Role.MarryInviterPlace.State\022\014\n"
    "\004cfg1\030\002 \001(\r\022\n\n\002id\030\003 \003(\r\022\r\n\005name1\030\004 \001(\t\022\r"
    "\n\005name2\030\005 \001(\t\022\014\n\004time\030\006 \001(\r\"-\n\005State\022\021\n\r"
    "STATE_INVITER\020\001\022\021\n\rSTATE_INVITEE\020\002\"\027\n\nPr"
    "otoModID\022\t\n\005ModID\020\002\"\030\n\nProtoFunID\022\n\n\005Fun"
    "ID\020\275\001\"d\n\014stReqDivorce\022\017\n\007isForce\030\001 \001(\010\022\020"
    "\n\010coupleId\030\002 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020"
    "\002\"\030\n\nProtoFunID\022\n\n\005FunID\020\276\001\"\303\001\n\rRejectDi"
    "vorce\022*\n\006result\030\001 \001(\0162\032.Role.RejectDivor"
    "ce.Result\"S\n\006Result\022\014\n\010eSuccess\020\001\022\025\n\021eCo"
    "uple_Not_Onlie\020\002\022\024\n\020eLess_Of_Diamond\020\003\022\016"
    "\n\neNo_Couple\020\004\"\027\n\nProtoModID\022\t\n\005ModID\020\002\""
    "\030\n\nProtoFunID\022\n\n\005FunID\020\277\001\"X\n\022stReqReject"
    "Divorce\022\017\n\007refused\030\001 \001(\010\"\027\n\nProtoModID\022\t"
    "\n\005ModID\020\002\"\030\n\nProtoFunID\022\n\n\005FunID\020\300\001\"\255\001\n\022"
    "stRetRejectDivorce\022/\n\006result\030\001 \001(\0162\037.Rol"
    "e.stRetRejectDivorce.Result\"3\n\006Result\022\014\n"
    "\010eSuccess\020\001\022\013\n\007eReject\020\002\022\016\n\neNot_Marry\020\003"
    "\"\027\n\nProtoModID\022\t\n\005ModID\020\002\"\030\n\nProtoFunID\022"
    "\n\n\005FunID\020\301\001\"e\n\022BoardcastMarryInfo\022\r\n\005nam"
    "e1\030\001 \001(\t\022\r\n\005name2\030\002 \001(\t\"\027\n\nProtoModID\022\t\n"
    "\005ModID\020\002\"\030\n\nProtoFunID\022\n\n\005FunID\020\302\001\"_\n\020st"
    "ReqUseFirework\022\014\n\004fire\030\001 \001(\r\022\n\n\002id\030\002 \001(\r"
    "\"\027\n\nProtoModID\022\t\n\005ModID\020\002\"\030\n\nProtoFunID\022"
    "\n\n\005FunID\020\303\001\"\250\001\n\021ResultUseFirework\022.\n\006res"
    "ult\030\001 \001(\0162\036.Role.ResultUseFirework.Resul"
    "t\"0\n\006Result\022\022\n\016RESULT_SUCCESS\020\001\022\022\n\016RESUL"
    "T_FAILURE\020\002\"\027\n\nProtoModID\022\t\n\005ModID\020\002\"\030\n\n"
    "ProtoFunID\022\n\n\005FunID\020\304\001\"_\n\016NotifyFirework"
    "\022\014\n\004fire\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\"\027\n\nProtoMod"
    "ID\022\t\n\005ModID\020\002\"\030\n\nProtoFunID\022\n\n\005FunID\020\305\001\""
    "Q\n\016stReqTakeCandy\022\014\n\004data\030\001 \001(\r\"\027\n\nProto"
    "ModID\022\t\n\005ModID\020\002\"\030\n\nProtoFunID\022\n\n\005FunID\020"
    "\306\001\"\244\001\n\017ResultTakeCandy\022,\n\006result\030\001 \001(\0162\034"
    ".Role.ResultTakeCandy.Result\"0\n\006Result\022\022"
    "\n\016RESULT_SUCCESS\020\001\022\022\n\016RESULT_FAILURE\020\002\"\027"
    "\n\nProtoModID\022\t\n\005ModID\020\002\"\030\n\nProtoFunID\022\n\n"
    "\005FunID\020\307\001\"Q\n\020stReqBuyFirework\022\n\n\002id\030\001 \001("
    "\r\"\027\n\nProtoModID\022\t\n\005ModID\020\002\"\030\n\nProtoFunID"
    "\022\n\n\005FunID\020\310\001\"\250\001\n\021ResultBuyFirework\022.\n\006re"
    "sult\030\001 \001(\0162\036.Role.ResultBuyFirework.Resu"
    "lt\"0\n\006Result\022\022\n\016RESULT_SUCCESS\020\001\022\022\n\016RESU"
    "LT_FAILURE\020\002\"\027\n\nProtoModID\022\t\n\005ModID\020\002\"\030\n"
    "\nProtoFunID\022\n\n\005FunID\020\311\001\"Y\n\026stReqEnterWed"
    "dingAlone\022\014\n\004data\030\001 \001(\r\"\027\n\nProtoModID\022\t\n"
    "\005ModID\020\002\"\030\n\nProtoFunID\022\n\n\005FunID\020\312\001\"\264\001\n\027R"
    "esultEnterWeddingAlone\0224\n\006result\030\001 \001(\0162$"
    ".Role.ResultEnterWeddingAlone.Result\"0\n\006"
    "Result\022\022\n\016RESULT_SUCCESS\020\001\022\022\n\016RESULT_FAI"
    "LURE\020\002\"\027\n\nProtoModID\022\t\n\005ModID\020\002\"\030\n\nProto"
    "FunID\022\n\n\005FunID\020\313\001\"[\n\025stReqQuitWeddingSce"
    "ne\022\017\n\007levelId\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005Mod"
    "ID\020\002\"\030\n\nProtoFunID\022\n\n\005FunID\020\314\001\"\251\001\n\025stRet"
    "QuitWeddingScene\0222\n\006result\030\001 \001(\0162\".Role."
    "stRetQuitWeddingScene.Result\")\n\006Result\022\014"
    "\n\010eSuccess\020\001\022\021\n\reNot_In_Scene\020\002\"\027\n\nProto"
    "ModID\022\t\n\005ModID\020\002\"\030\n\nProtoFunID\022\n\n\005FunID\020"
    "\315\001\"e\n\024stNotifyFriendAction\022\n\n\002in\030\001 \001(\010\022\016"
    "\n\006charid\030\002 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\002\""
    "\030\n\nProtoFunID\022\n\n\005FunID\020\316\001\"`\n\024stSendCharC"
    "reateTime\022\025\n\rcreateTimeStr\030\001 \001(\t\"\027\n\nProt"
    "oModID\022\t\n\005ModID\020\002\"\030\n\nProtoFunID\022\n\n\005FunID"
    "\020\317\001\"Y\n\024stReqDrawWeddingRing\022\016\n\006charId\030\001 "
    "\001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\002\"\030\n\nProtoFun"
    "ID\022\n\n\005FunID\020\320\001\"\333\001\n\024stRetDrawWeddingRing\022"
    "1\n\006result\030\001 \001(\0162!.Role.stRetDrawWeddingR"
    "ing.Result\"]\n\006Result\022\014\n\010eSuccess\020\001\022\021\n\reN"
    "ot_In_Scene\020\002\022\020\n\014eAready_Draw\020\003\022\016\n\neNot_"
    "Marry\020\004\022\020\n\014eInner_Error\020\005\"\027\n\nProtoModID\022"
    "\t\n\005ModID\020\002\"\030\n\nProtoFunID\022\n\n\005FunID\020\321\001\"P\n\013"
    "stReqBuyNum\022\016\n\006charId\030\001 \001(\r\"\027\n\nProtoModI"
    "D\022\t\n\005ModID\020\002\"\030\n\nProtoFunID\022\n\n\005FunID\020\322\001\"S"
    "\n\016stBuyNumResult\022\016\n\006buyNum\030\001 \001(\r\"\027\n\nProt"
    "oModID\022\t\n\005ModID\020\002\"\030\n\nProtoFunID\022\n\n\005FunID"
    "\020\323\001\"T\n\017stReqRefreshNum\022\016\n\006charId\030\001 \001(\r\"\027"
    "\n\nProtoModID\022\t\n\005ModID\020\002\"\030\n\nProtoFunID\022\n\n"
    "\005FunID\020\324\001\"v\n\022stRefreshNumResult\022\022\n\nrefre"
    "shNum\030\001 \001(\r\022\031\n\021diamondRefreshNum\030\002 \001(\r\"\027"
    "\n\nProtoModID\022\t\n\005ModID\020\002\"\030\n\nProtoFunID\022\n\n"
    "\005FunID\020\325\001\"a\n\017stReqColumnList\022\033\n\004type\030\001 \001"
    "(\0162\r.Role.eColumn\"\027\n\nProtoModID\022\t\n\005ModID"
    "\020\002\"\030\n\nProtoFunID\022\n\n\005FunID\020\326\001\"g\n\nstItemIn"
    "fo\022\020\n\010uniqueID\030\001 \001(\r\022\017\n\007itemNum\030\002 \001(\r\022\023\n"
    "\013costResType\030\003 \001(\r\022\021\n\titemPrice\030\004 \001(\r\022\016\n"
    "\006buyNum\030\005 \001(\r\"\323\001\n\022stColumnListResult\0220\n\006"
    "result\030\001 \001(\0162 .Role.stColumnListResult.e"
    "Result\022\"\n\010shopList\030\002 \003(\0132\020.Role.stShopIt"
    "em\"4\n\007eResult\022\013\n\007SUCCESS\020\001\022\017\n\013INNER_ERRO"
    "R\020\002\022\013\n\007FAILURE\020\003\"\027\n\nProtoModID\022\t\n\005ModID\020"
    "\002\"\030\n\nProtoFunID\022\n\n\005FunID\020\327\001\"s\n\022stReqMark"
    "etBuyItem\022\033\n\004type\030\001 \001(\0162\r.Role.eColumn\022\r"
    "\n\005index\030\002 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\002\"\030"
    "\n\nProtoFunID\022\n\n\005FunID\020\330\001\"\260\002\n\025stMarketBuy"
    "ItemResult\0226\n\007retCode\030\001 \001(\0162%.Role.stMar"
    "ketBuyItemResult.BUYRESULT\022\"\n\010shopItem\030\002"
    " \001(\0132\020.Role.stShopItem\"\207\001\n\tBUYRESULT\022\017\n\013"
    "BUY_SUCCESS\020\001\022\027\n\023RESOURCE_NOT_ENOUGH\020\002\022\014"
    "\n\010BUY_FULL\020\003\022\022\n\016ITEM_NOT_EXIST\020\004\022\013\n\007BUY_"
    "OUT\020\005\022\017\n\013INNER_ERROR\020\006\022\020\n\014TIME_USE_OUT\020\007"
    "\"\027\n\nProtoModID\022\t\n\005ModID\020\002\"\030\n\nProtoFunID\022"
    "\n\n\005FunID\020\331\001\"T\n\017stReqOpenWindow\022\016\n\006charId"
    "\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\002\"\030\n\nProto"
    "FunID\022\n\n\005FunID\020\332\001\"\262\001\n\022stOpenWindowResult"
    "\0220\n\006result\030\001 \001(\0162 .Role.stOpenWindowResu"
    "lt.eResult\022\n\n\002lv\030\002 \001(\r\"+\n\007eResult\022\020\n\014OPE"
    "N_SUCCESS\020\001\022\016\n\nTIME_LIMIT\020\002\"\027\n\nProtoModI"
    "D\022\t\n\005ModID\020\002\"\030\n\nProtoFunID\022\n\n\005FunID\020\333\001\"U"
    "\n\020stReqRefreshList\022\016\n\006charId\030\001 \001(\r\"\027\n\nPr"
    "otoModID\022\t\n\005ModID\020\002\"\030\n\nProtoFunID\022\n\n\005Fun"
    "ID\020\334\001\"\344\001\n\023stRefreshListResult\0221\n\006result\030"
    "\001 \001(\0162!.Role.stRefreshListResult.eResult"
    "\"g\n\007eResult\022\013\n\007SUCCESS\020\001\022\017\n\013INNER_ERROR\020"
    "\002\022\027\n\023RESOURCE_NOT_ENOUGH\020\003\022\022\n\016SHOP_NOT_E"
    "XIST\020\004\022\021\n\rREFRESH_LIMIT\020\005\"\027\n\nProtoModID\022"
    "\t\n\005ModID\020\002\"\030\n\nProtoFunID\022\n\n\005FunID\020\335\001\"_\n\031"
    "stReqAKeyRaiseUserSkillLv\022\017\n\007skillID\030\001 \001"
    "(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\002\"\030\n\nProtoFunI"
    "D\022\n\n\005FunID\020\336\001\"\242\002\n\034stAKeyRaiseUserSkillLv"
    "Result\022:\n\006result\030\001 \001(\0162*.Role.stAKeyRais"
    "eUserSkillLvResult.eResult\022\017\n\007skillID\030\002 "
    "\001(\r\022\017\n\007skillLv\030\003 \001(\r\"q\n\007eResult\022\014\n\010eSucc"
    "ess\020\001\022\024\n\020eSkill_Not_Exist\020\002\022\024\n\020eInner_Cf"
    "g_Error\020\003\022\030\n\024eGoldCoin_Not_Enough\020\004\022\022\n\016e"
    "Role_Lv_Limit\020\005\"\027\n\nProtoModID\022\t\n\005ModID\020\002"
    "\"\030\n\nProtoFunID\022\n\n\005FunID\020\337\001\"C\n\017stMountIte"
    "mInfo\022\017\n\007bagType\030\001 \001(\r\022\013\n\003pos\030\002 \001(\r\022\022\n\ni"
    "nstanceID\030\003 \001(\004\"n\n\023stReqStoneSynthesis\022$"
    "\n\005items\030\001 \003(\0132\025.Role.stMountItemInfo\"\027\n\n"
    "ProtoModID\022\t\n\005ModID\020\002\"\030\n\nProtoFunID\022\n\n\005F"
    "unID\020\340\001\"\337\001\n\026stStoneSynthesisResult\0223\n\006re"
    "sult\030\001 \001(\0162#.Role.stStoneSynthesisResult"
    ".Result\022\016\n\006itemID\030\002 \001(\r\"M\n\006Result\022\014\n\010eSU"
    "CCESS\020\001\022\014\n\010eFAILURE\020\002\022\r\n\teBAG_FULL\020\003\022\030\n\024"
    "eRESOURCE_NOT_ENOUGH\020\004\"\027\n\nProtoModID\022\t\n\005"
    "ModID\020\002\"\030\n\nProtoFunID\022\n\n\005FunID\020\341\001\"o\n\024stR"
    "eqStoneEvolvement\022$\n\005items\030\001 \003(\0132\025.Role."
    "stMountItemInfo\"\027\n\nProtoModID\022\t\n\005ModID\020\002"
    "\"\030\n\nProtoFunID\022\n\n\005FunID\020\342\001\"\341\001\n\027stStoneEv"
    "olvementResult\0224\n\006result\030\001 \001(\0162$.Role.st"
    "StoneEvolvementResult.Result\022\016\n\006itemID\030\002"
    " \001(\r\"M\n\006Result\022\014\n\010eSUCCESS\020\001\022\014\n\010eFAILURE"
    "\020\002\022\r\n\teBAG_FULL\020\003\022\030\n\024eRESOURCE_NOT_ENOUG"
    "H\020\004\"\027\n\nProtoModID\022\t\n\005ModID\020\002\"\030\n\nProtoFun"
    "ID\022\n\n\005FunID\020\343\001\"S\n\016stReqStoneProp\022\016\n\006char"
    "ID\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\002\"\030\n\nPro"
    "toFunID\022\n\n\005FunID\020\344\001\"n\n\021stStonePropResult"
    "\022&\n\nbattleProp\030\001 \003(\0132\022.Role.stBattleProp"
    "\"\027\n\nProtoModID\022\t\n\005ModID\020\002\"\030\n\nProtoFunID\022"
    "\n\n\005FunID\020\345\001\"Q\n\020stReqChangePhoto\022\n\n\002id\030\001 "
    "\001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\002\"\030\n\nProtoFun"
    "ID\022\n\n\005FunID\020\346\001\"\254\001\n\023stChangePhotoResult\0220"
    "\n\006result\030\001 \001(\0162 .Role.stChangePhotoResul"
    "t.Result\022\n\n\002id\030\002 \001(\r\"$\n\006Result\022\014\n\010eSUCCE"
    "SS\020\001\022\014\n\010eFAILURE\020\002\"\027\n\nProtoModID\022\t\n\005ModI"
    "D\020\002\"\030\n\nProtoFunID\022\n\n\005FunID\020\347\001\"T\n\017stReqHa"
    "sPhotoID\022\016\n\006charID\030\001 \001(\r\"\027\n\nProtoModID\022\t"
    "\n\005ModID\020\002\"\030\n\nProtoFunID\022\n\n\005FunID\020\350\001\"Y\n\022s"
    "tHasPhotoIDResult\022\020\n\010photoIDs\030\001 \003(\r\"\027\n\nP"
    "rotoModID\022\t\n\005ModID\020\002\"\030\n\nProtoFunID\022\n\n\005Fu"
    "nID\020\351\001\"Q\n\020stReqUnlockPhoto\022\n\n\002id\030\001 \001(\r\"\027"
    "\n\nProtoModID\022\t\n\005ModID\020\002\"\030\n\nProtoFunID\022\n\n"
    "\005FunID\020\352\001\"\266\001\n\023stUnlockPhotoResult\0220\n\006res"
    "ult\030\001 \001(\0162 .Role.stUnlockPhotoResult.Res"
    "ult\":\n\006Result\022\014\n\010eSUCCESS\020\001\022\014\n\010eFAILURE\020"
    "\002\022\024\n\020eCOND_NOT_ENOUGH\020\003\"\027\n\nProtoModID\022\t\n"
    "\005ModID\020\002\"\030\n\nProtoFunID\022\n\n\005FunID\020\353\001\"N\n\014st"
    "SpriteInfo\022\013\n\003tag\030\001 \001(\r\"\027\n\nProtoModID\022\t\n"
    "\005ModID\020\002\"\030\n\nProtoFunID\022\n\n\005FunID\020\354\001\"\271\001\n\022s"
    "tSpriteInfoResult\022/\n\006result\030\001 \001(\0162\037.Role"
    ".stSpriteInfoResult.Result\022\n\n\002id\030\002 \001(\r\022\r"
    "\n\005level\030\003 \001(\r\"$\n\006Result\022\014\n\010eSUCCESS\020\001\022\014\n"
    "\010eFAILURE\020\002\"\027\n\nProtoModID\022\t\n\005ModID\020\002\"\030\n\n"
    "ProtoFunID\022\n\n\005FunID\020\355\001\"g\n\016stTrainHeroReq"
    "\022\016\n\006heroID\030\001 \001(\r\022\022\n\ninstanceID\030\002 \001(\004\"\027\n\n"
    "ProtoModID\022\t\n\005ModID\020\002\"\030\n\nProtoFunID\022\n\n\005F"
    "unID\020\356\001\"\250\002\n\021stTrainHeroResult\022\016\n\006heroID\030"
    "\001 \001(\r\022/\n\006result\030\002 \001(\0162\037.Role.stTrainHero"
    "Result.eResult\022\017\n\007levelUp\030\003 \001(\010\022\020\n\010newLe"
    "vel\030\004 \001(\r\"|\n\007eResult\022\014\n\010eSuccess\020\001\022\023\n\017eH"
    "ero_Not_Exist\020\002\022\023\n\017eItem_Not_Exist\020\003\022\031\n\025"
    "eHero_Max_Train_Level\020\004\022\020\n\014eInner_Error\020"
    "\005\022\014\n\010eTrainSP\020\006\"\027\n\nProtoModID\022\t\n\005ModID\020\002"
    "\"\030\n\nProtoFunID\022\n\n\005FunID\020\357\001\"}\n\016stGuaJiTim"
    "eNtf\022\022\n\nguajiStart\030\001 \001(\r\022\020\n\010guajiEnd\030\002 \001"
    "(\r\022\022\n\ntodayCount\030\003 \001(\r\"\027\n\nProtoModID\022\t\n\005"
    "ModID\020\002\"\030\n\nProtoFunID\022\n\n\005FunID\020\360\001\"T\n\017stG"
    "uaJiAwardReq\022\016\n\006charid\030\001 \001(\r\"\027\n\nProtoMod"
    "ID\022\t\n\005ModID\020\002\"\030\n\nProtoFunID\022\n\n\005FunID\020\361\001\""
    "\257\001\n\022stGuaJiAwardResult\0220\n\006result\030\001 \001(\0162 "
    ".Role.stGuaJiAwardResult.eResult\"4\n\007eRes"
    "ult\022\014\n\010eSuccess\020\001\022\t\n\005eTime\020\002\022\020\n\014eInner_E"
    "rror\020\003\"\027\n\nProtoModID\022\t\n\005ModID\020\002\"\030\n\nProto"
    "FunID\022\n\n\005FunID\020\362\001\"R\n\013stNftVipNtf\022\020\n\010isNf"
    "tVip\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\002\"\030\n\nP"
    "rotoFunID\022\n\n\005FunID\020\363\001\"T\n\017stGuaJiStartReq"
    "\022\016\n\006charid\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020"
    "\002\"\030\n\nProtoFunID\022\n\n\005FunID\020\364\001\"\316\001\n\022stGuaJiS"
    "tartResult\0220\n\006result\030\001 \001(\0162 .Role.stGuaJ"
    "iStartResult.eResult\"S\n\007eResult\022\014\n\010eSucc"
    "ess\020\001\022\017\n\013eTodaylimit\020\002\022\020\n\014eInner_Error\020\003"
    "\022\t\n\005eCoin\020\004\022\014\n\010eInGuaji\020\005\"\027\n\nProtoModID\022"
    "\t\n\005ModID\020\002\"\030\n\nProtoFunID\022\n\n\005FunID\020\365\001\"k\n\021"
    "stSynRMPShopItem2\022\n\n\002id\030\001 \001(\r\022\021\n\tdelayTi"
    "me\030\002 \001(\r\022\020\n\010buyCount\030\003 \001(\r\022\021\n\tstartTime\030"
    "\004 \001(\r\022\022\n\nplanNumber\030\005 \001(\r\"n\n\021stSynRMBSho"
    "pInfo2\022&\n\005items\030\001 \003(\0132\027.Role.stSynRMPSho"
    "pItem2\"\027\n\nProtoModID\022\t\n\005ModID\020\002\"\030\n\nProto"
    "FunID\022\n\n\005FunID\020\366\001*>\n\010eRoleJob\022\020\n\014eJOB_WA"
    "RRIOR\020\001\022\017\n\013eJOB_BOWMAN\020\002\022\017\n\013eJOB_MASTER\020"
    "\003*)\n\010eRoleSex\022\014\n\010eSEX_MAN\020\001\022\017\n\013eSEX_FEMA"
    "LE\020\002*i\n\024CreateRoleResultCode\022\027\n\023CREATE_R"
    "OLE_SUCCESS\020\000\022\033\n\027CREATE_ROLE_NAME_REPEAT"
    "\020\001\022\033\n\027CREATE_ACCOUNT_HAS_ROLE\020\002*\315\001\n\010eBag"
    "Type\022\022\n\016BAG_TYPE_MAIN1\020\001\022\022\n\016BAG_TYPE_PIE"
    "CE\020\002\022\022\n\016BAG_TYPE_EQUIP\020\003\022\027\n\023BAG_TYPE_HER"
    "O_PIECE\020\004\022\024\n\020BAG_TYPE_FASHION\020\005\022\027\n\023BAG_T"
    "YPE_RUNE_PIECE\020\006\022\021\n\rBAG_TYPE_RUNE\020\007\022\026\n\022B"
    "AG_TYPE_HERO_RUNE\020\010\022\022\n\016BAG_TYPE_MOUNT\020\t*"
    "S\n\014E_HERO_STATE\022\023\n\017HERO_STATE_NONE\020\001\022\027\n\023"
    "HERO_STATE_SUMMONED\020\002\022\025\n\021HERO_STATE_BATT"
    "LE\020\003*8\n\022ArrageMainBagError\022\"\n\036ARRANGE_MA"
    "INBAG_ERROR_COOLDOWN\020\001*\216\001\n\teChatType\022\023\n\017"
    "CHAT_TYPE_WORLD\020\001\022\025\n\021CHAT_TYPE_PRIVATE\020\002"
    "\022\023\n\017CHAT_TYPE_GUILD\020\003\022\022\n\016CHAT_TYPE_TEAM\020"
    "\004\022\026\n\022CHAT_TYPE_TEAMINFO\020\005\022\024\n\020CHAT_TYPE_N"
    "OTICE\020\006*X\n\neLevelStar\022\021\n\reLEVEL_STAR_0\020\000"
    "\022\021\n\reLEVEL_STAR_1\020\001\022\021\n\reLEVEL_STAR_2\020\002\022\021"
    "\n\reLEVEL_STAR_3\020\003*\205\001\n\023eCharpterRewardSte"
    "p\022\032\n\026eCharpterReward_Step_0\020\000\022\032\n\026eCharpt"
    "erReward_Step_1\020\001\022\032\n\026eCharpterReward_Ste"
    "p_2\020\002\022\032\n\026eCharpterReward_Step_3\020\004*/\n\teRu"
    "shType\022\020\n\014eRush_Type_1\020\001\022\020\n\014eRush_Type_2"
    "\020\002*\215\r\n\016eSystemSetting\022\033\n\027eSysSetting_Sho"
    "wFashion\020\001\022(\n$eSysSetting_First_Enter_Go"
    "ldCoin_LV1\020\002\022(\n$eSysSetting_First_Enter_"
    "GoldCoin_LV2\020\003\022(\n$eSysSetting_First_Ente"
    "r_GoldCoin_LV3\020\004\022(\n$eSysSetting_First_En"
    "ter_Survival_LV1\020\005\022(\n$eSysSetting_First_"
    "Enter_Survival_LV2\020\006\022(\n$eSysSetting_Firs"
    "t_Enter_Survival_LV3\020\010\022\036\n\032eSysSetting_Fi"
    "rst_Defeated\020\t\022*\n&eSysSettion_First_Gold"
    "Level_Introducee\020\n\022+\n\'eSysSettion_First_"
    "EliteLevel_Introducee\020\013\022-\n)eSysSettion_F"
    "irst_SurvialLevel_Introducee\020\014\022\035\n\031eSysSe"
    "ttion_First_OpenMap\020\r\022$\n eSysSettion_Fir"
    "st_Task_Interrupt\020\016\022 \n\034eSysSettion_First"
    "_Goto_Guild\020\017\022\"\n\036eSysSettion_First_Super"
    "Bar_End\020\020\022\037\n\033eSysSettion_First_Got_Title"
    "\020\021\022#\n\037eSysSettion_First_RUSH_LIMIT_LV\020\022\022"
    "+\n\'eSysSettion_First_First_Enter_MainCit"
    "y3\020\023\022&\n\"eSysSettion_First_Branch_TaskGui"
    "de\020\024\022\037\n\033eSysSettion_First_Get_Email\020\025\022 \n"
    "\034eSysSettion_First_Open_Break\020\026\022\033\n\027eSysS"
    "ettion_First_Guide\020\027\022&\n\"eSysSettion_Firs"
    "t_ScoreBatlleGuide\020\030\022*\n&eSysSettion_Firs"
    "t_RealBattleFieldGuide\020\031\022#\n\037eSysSettion_"
    "First_EscortedGuide\020\032\022%\n!eSysSettion_Fir"
    "st_ExpeditionGuide\020\033\022\'\n#eSysSettion_Firs"
    "t_EmeralddreamGuide\020\034\022%\n!eSysSettion_Fir"
    "st_Illusion_Sprite\020\035\022\'\n#eSysSettion_Firs"
    "t_OpenSecretTreture\020\036\022(\n$eSysSettion_Fir"
    "st_In_Fashion_Enchant\020\037\022\035\n\031eSysSettion_F"
    "irst_PetRune\020 \022 \n\034eSysSettion_First_Leag"
    "ueHero\020!\022\036\n\032eSysSettion_First_RuneComp\020\""
    "\022 \n\034eSysSettion_First_GuideSemlt\020#\022\"\n\036eS"
    "ysSettion_First_Fight_Monkey\020$\022!\n\035eSysSe"
    "ttion_First_FriendGuide\020%\022\"\n\036eSysSettion"
    "_Second_FriendGuide\020&\022\033\n\027eSysSettion_Fir"
    "st_Mount\020\'\022 \n\034eSysSettion_First_ForthSki"
    "ll\020(\022 \n\034eSysSettion_First_PetReplace\020)\022\032"
    "\n\026eSysSettion_First_Rune\020*\022\033\n\027eSysSettio"
    "n_First_Smelt\020+\022\033\n\027eSysSettion_First_Elf"
    "in\020,\022\033\n\027eSysSettion_First_Union\020-\022\032\n\026eSy"
    "sSettion_ShowHelmet\020.\022\023\n\017eSysSettion_Max"
    "\020/*,\n\007eColumn\022\021\n\rePersonalList\020\001\022\016\n\neGui"
    "ldList\020\002", 45608);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Role.proto", &protobuf_RegisterTypes);
  stBattleProp::default_instance_ = new stBattleProp();
  stRoleMainData::default_instance_ = new stRoleMainData();
  stInitMainData::default_instance_ = new stInitMainData();
  ReqCreateRole::default_instance_ = new ReqCreateRole();
  CreateRoleResult::default_instance_ = new CreateRoleResult();
  stSynSnapData::default_instance_ = new stSynSnapData();
  RefreshSnapData::default_instance_ = new RefreshSnapData();
  ReqEnterGame::default_instance_ = new ReqEnterGame();
  stSynGoldCoin::default_instance_ = new stSynGoldCoin();
  stSynPointCard::default_instance_ = new stSynPointCard();
  stBagPos::default_instance_ = new stBagPos();
  stItemSkillInfo::default_instance_ = new stItemSkillInfo();
  stRaiseSkillProp::default_instance_ = new stRaiseSkillProp();
  stEnchantInfo::default_instance_ = new stEnchantInfo();
  stSynItemInfo::default_instance_ = new stSynItemInfo();
  stNotifyAddItem::default_instance_ = new stNotifyAddItem();
  stDeleteItem::default_instance_ = new stDeleteItem();
  stRefreshItem::default_instance_ = new stRefreshItem();
  stInitAllItem::default_instance_ = new stInitAllItem();
  stReqOpenShop::default_instance_ = new stReqOpenShop();
  stShopItem::default_instance_ = new stShopItem();
  stRetShopItemList::default_instance_ = new stRetShopItemList();
  stReqBuyItem::default_instance_ = new stReqBuyItem();
  stBuyItemResult::default_instance_ = new stBuyItemResult();
  stSynHeroSkill::default_instance_ = new stSynHeroSkill();
  stImpactHeroInfo::default_instance_ = new stImpactHeroInfo();
  stSynHeroInfo::default_instance_ = new stSynHeroInfo();
  stInitAllHero::default_instance_ = new stInitAllHero();
  stNotifyAddHero::default_instance_ = new stNotifyAddHero();
  stRefreshHero::default_instance_ = new stRefreshHero();
  stReqHeroGoOutForBattle::default_instance_ = new stReqHeroGoOutForBattle();
  HeroGoOutForBattleResult::default_instance_ = new HeroGoOutForBattleResult();
  ReqHeroChange2WaitState::default_instance_ = new ReqHeroChange2WaitState();
  HeroChange2WaitStateResult::default_instance_ = new HeroChange2WaitStateResult();
  stNotifyRoleAddExp::default_instance_ = new stNotifyRoleAddExp();
  stSynRoleLevel::default_instance_ = new stSynRoleLevel();
  stSynHeroLv::default_instance_ = new stSynHeroLv();
  stSynBagPos::default_instance_ = new stSynBagPos();
  stMoveItem::default_instance_ = new stMoveItem();
  stReqArrangeMainBag::default_instance_ = new stReqArrangeMainBag();
  stReArrangeMainBagError::default_instance_ = new stReArrangeMainBagError();
  stRefreshMainBag::default_instance_ = new stRefreshMainBag();
  stReqCombineHero::default_instance_ = new stReqCombineHero();
  stCombineHeroResult::default_instance_ = new stCombineHeroResult();
  stReqLevelupHero::default_instance_ = new stReqLevelupHero();
  stLevelupHeroResult::default_instance_ = new stLevelupHeroResult();
  stReqHeroEvolution::default_instance_ = new stReqHeroEvolution();
  stEvolutionHeroResult::default_instance_ = new stEvolutionHeroResult();
  stReqHeroStudySkill::default_instance_ = new stReqHeroStudySkill();
  stHeroStudySkillResult::default_instance_ = new stHeroStudySkillResult();
  stReqRefineHeroSkill::default_instance_ = new stReqRefineHeroSkill();
  stRefineHeroSkillResult::default_instance_ = new stRefineHeroSkillResult();
  stSynSkillExp::default_instance_ = new stSynSkillExp();
  stReqReplaceHeroSkill::default_instance_ = new stReqReplaceHeroSkill();
  stReplaceHeroSkillResult::default_instance_ = new stReplaceHeroSkillResult();
  stReqUpgradeHeroSkill::default_instance_ = new stReqUpgradeHeroSkill();
  stUpgradeHeroSkillResult::default_instance_ = new stUpgradeHeroSkillResult();
  stReqSellItem::default_instance_ = new stReqSellItem();
  stSellItemResult::default_instance_ = new stSellItemResult();
  stReqRaiseItem::default_instance_ = new stReqRaiseItem();
  stRaiseItemResult::default_instance_ = new stRaiseItemResult();
  stReqSmeltEquip::default_instance_ = new stReqSmeltEquip();
  stSmeltEquipResult::default_instance_ = new stSmeltEquipResult();
  stReqRecastEquip::default_instance_ = new stReqRecastEquip();
  RecastEquipResult::default_instance_ = new RecastEquipResult();
  stReqCombineItem::default_instance_ = new stReqCombineItem();
  stCombineItemResult::default_instance_ = new stCombineItemResult();
  stReqRefreshShoplist::default_instance_ = new stReqRefreshShoplist();
  stRefreshShoplistResult::default_instance_ = new stRefreshShoplistResult();
  stChatCmd::default_instance_ = new stChatCmd();
  stSynResource::default_instance_ = new stSynResource();
  stSynLevelInfo::default_instance_ = new stSynLevelInfo();
  stSynCharpterInfo::default_instance_ = new stSynCharpterInfo();
  stSynAllLevelInfo::default_instance_ = new stSynAllLevelInfo();
  stObtainItem::default_instance_ = new stObtainItem();
  stReqFinishLv::default_instance_ = new stReqFinishLv();
  stFinishLvResult::default_instance_ = new stFinishLvResult();
  stReqCharpterReward::default_instance_ = new stReqCharpterReward();
  stCharpterRewardResult::default_instance_ = new stCharpterRewardResult();
  stReqRushLevel::default_instance_ = new stReqRushLevel();
  stSynRushReward::default_instance_ = new stSynRushReward();
  stLevelRushResult::default_instance_ = new stLevelRushResult();
  stReqResetRushNum::default_instance_ = new stReqResetRushNum();
  stResetRushNumResult::default_instance_ = new stResetRushNumResult();
  stReqRefineEquip::default_instance_ = new stReqRefineEquip();
  stRefineEquipResult::default_instance_ = new stRefineEquipResult();
  stSynTotoalRecharge::default_instance_ = new stSynTotoalRecharge();
  stSynSkillInfo::default_instance_ = new stSynSkillInfo();
  stSynUserAllSkill::default_instance_ = new stSynUserAllSkill();
  stAddUserSkill::default_instance_ = new stAddUserSkill();
  stReqUserDetailInfo::default_instance_ = new stReqUserDetailInfo();
  stUserDetailInfo::default_instance_ = new stUserDetailInfo();
  stUseItem::default_instance_ = new stUseItem();
  stUseItemError::default_instance_ = new stUseItemError();
  stSynTipItem::default_instance_ = new stSynTipItem();
  stObtainItemTip::default_instance_ = new stObtainItemTip();
  stReqGetEquipSkill::default_instance_ = new stReqGetEquipSkill();
  stGetEquipSkillResult::default_instance_ = new stGetEquipSkillResult();
  stReqRefineEquipSkill::default_instance_ = new stReqRefineEquipSkill();
  stRefineEquipSkillResult::default_instance_ = new stRefineEquipSkillResult();
  stMoveEquipSkill2Slot::default_instance_ = new stMoveEquipSkill2Slot();
  stMoveEquipSkillResult::default_instance_ = new stMoveEquipSkillResult();
  stReqUpgradeEquipSkill::default_instance_ = new stReqUpgradeEquipSkill();
  stUpgradeEquipSkillResult::default_instance_ = new stUpgradeEquipSkillResult();
  stSendPKUserData::default_instance_ = new stSendPKUserData();
  stReqRaiseUserSkillLv::default_instance_ = new stReqRaiseUserSkillLv();
  stRaiseUserSkillLvResult::default_instance_ = new stRaiseUserSkillLvResult();
  stNotifyNewBieGuideStep::default_instance_ = new stNotifyNewBieGuideStep();
  stSaveNewBieGuideStep::default_instance_ = new stSaveNewBieGuideStep();
  stOpenLevelBox::default_instance_ = new stOpenLevelBox();
  stChangeRole::default_instance_ = new stChangeRole();
  stGotoSelectRole::default_instance_ = new stGotoSelectRole();
  stSynRMPShopItem::default_instance_ = new stSynRMPShopItem();
  stSynRMBShopInfo::default_instance_ = new stSynRMBShopInfo();
  stSynOne2OnePVPItem::default_instance_ = new stSynOne2OnePVPItem();
  stOne2OnePVPResult::default_instance_ = new stOne2OnePVPResult();
  stPrivateChatNotUser::default_instance_ = new stPrivateChatNotUser();
  stReqRecoverRemainTime::default_instance_ = new stReqRecoverRemainTime();
  stSPAndLilianRecoverRemainTime::default_instance_ = new stSPAndLilianRecoverRemainTime();
  stSwapHeroBattlePos::default_instance_ = new stSwapHeroBattlePos();
  stSwapHeroBattlePosError::default_instance_ = new stSwapHeroBattlePosError();
  stSynSystemSetting::default_instance_ = new stSynSystemSetting();
  stReqSaveSystemSetting::default_instance_ = new stReqSaveSystemSetting();
  stUnlockRareSkill::default_instance_ = new stUnlockRareSkill();
  stUnlockRareSkillResult::default_instance_ = new stUnlockRareSkillResult();
  stUpgradeRareSkill::default_instance_ = new stUpgradeRareSkill();
  stUpgradeRareSkillResult::default_instance_ = new stUpgradeRareSkillResult();
  stReqGiftBag::default_instance_ = new stReqGiftBag();
  stGotGiftBagResult::default_instance_ = new stGotGiftBagResult();
  stSynRealTimeItem::default_instance_ = new stSynRealTimeItem();
  stRealTimePKResult::default_instance_ = new stRealTimePKResult();
  stReqFiveRaiseEquip::default_instance_ = new stReqFiveRaiseEquip();
  stFiveRaiseEquipResult::default_instance_ = new stFiveRaiseEquipResult();
  stSynBattleProp::default_instance_ = new stSynBattleProp();
  stSynTeamCopyMapNum::default_instance_ = new stSynTeamCopyMapNum();
  stSynRealTimePKNum::default_instance_ = new stSynRealTimePKNum();
  stCopymapFail::default_instance_ = new stCopymapFail();
  stReqHero10TimeStudySkill::default_instance_ = new stReqHero10TimeStudySkill();
  stHero10TimesStudySkillResult::default_instance_ = new stHero10TimesStudySkillResult();
  st10TimesGetEquipSkill::default_instance_ = new st10TimesGetEquipSkill();
  st10TimesGetEquipSkillResult::default_instance_ = new st10TimesGetEquipSkillResult();
  stReqFirstRechargeReward::default_instance_ = new stReqFirstRechargeReward();
  stRetFirstRechargeReward::default_instance_ = new stRetFirstRechargeReward();
  stSynMobaItem::default_instance_ = new stSynMobaItem();
  stMobaPKResult::default_instance_ = new stMobaPKResult();
  stSubNewBieGuideID::default_instance_ = new stSubNewBieGuideID();
  stResetTeamCopyMapNum::default_instance_ = new stResetTeamCopyMapNum();
  stResetTeampCopyMapNumResult::default_instance_ = new stResetTeampCopyMapNumResult();
  stResetRealTimeCopyMapNum::default_instance_ = new stResetRealTimeCopyMapNum();
  stResetRealTimeCopymapNumResult::default_instance_ = new stResetRealTimeCopymapNumResult();
  stBuyRMBItemSuccess::default_instance_ = new stBuyRMBItemSuccess();
  stOne2OnePVPFail::default_instance_ = new stOne2OnePVPFail();
  stRealTimeFail::default_instance_ = new stRealTimeFail();
  stDataInitFinish::default_instance_ = new stDataInitFinish();
  stReqFirst10RechargeReward::default_instance_ = new stReqFirst10RechargeReward();
  stRetFirst10RechargeReward::default_instance_ = new stRetFirst10RechargeReward();
  stChatInWorldCoolDown::default_instance_ = new stChatInWorldCoolDown();
  stSynRoleCreateTime::default_instance_ = new stSynRoleCreateTime();
  stReqChgEquipSkill::default_instance_ = new stReqChgEquipSkill();
  stRetChgEquipSkillResult::default_instance_ = new stRetChgEquipSkillResult();
  stHasCloseBetaReward::default_instance_ = new stHasCloseBetaReward();
  stReqGotCloseBetaReward::default_instance_ = new stReqGotCloseBetaReward();
  stGotCloseBetaRewardResult::default_instance_ = new stGotCloseBetaRewardResult();
  stReqUseMonthCardItem::default_instance_ = new stReqUseMonthCardItem();
  stRetUseMonthCardItem::default_instance_ = new stRetUseMonthCardItem();
  stReqUseSelectItemBox::default_instance_ = new stReqUseSelectItemBox();
  stRetUseSelectItemBox::default_instance_ = new stRetUseSelectItemBox();
  stReqUseHeroSkillBook::default_instance_ = new stReqUseHeroSkillBook();
  stRetUseHeroSkillBook::default_instance_ = new stRetUseHeroSkillBook();
  stReqUseEquipSkillBook::default_instance_ = new stReqUseEquipSkillBook();
  stRetUseEquipSkillBook::default_instance_ = new stRetUseEquipSkillBook();
  stReqBreakEquip::default_instance_ = new stReqBreakEquip();
  stBreakEquipResult::default_instance_ = new stBreakEquipResult();
  stReqRecastHero::default_instance_ = new stReqRecastHero();
  stRecastHeroResult::default_instance_ = new stRecastHeroResult();
  stReqChangeName::default_instance_ = new stReqChangeName();
  stChangeNameResult::default_instance_ = new stChangeNameResult();
  stReqOpenBuyGoldWindow::default_instance_ = new stReqOpenBuyGoldWindow();
  stOpenBuyGoldWindowResult::default_instance_ = new stOpenBuyGoldWindowResult();
  stReqBuyGold::default_instance_ = new stReqBuyGold();
  stBuyGoldResult::default_instance_ = new stBuyGoldResult();
  stSendImpactHeroInfo::default_instance_ = new stSendImpactHeroInfo();
  stExpBookLevelLimit::default_instance_ = new stExpBookLevelLimit();
  stNotifyPubUniqueID::default_instance_ = new stNotifyPubUniqueID();
  EnchantItem::default_instance_ = new EnchantItem();
  stReqEnchant::default_instance_ = new stReqEnchant();
  stRetEnchant::default_instance_ = new stRetEnchant();
  stReqRecastEnchant::default_instance_ = new stReqRecastEnchant();
  stRetRecastEnchant::default_instance_ = new stRetRecastEnchant();
  stReqLockEnchant::default_instance_ = new stReqLockEnchant();
  stRetLockEnchant::default_instance_ = new stRetLockEnchant();
  stHeroLeagueItem::default_instance_ = new stHeroLeagueItem();
  stHerLeagueResult::default_instance_ = new stHerLeagueResult();
  stReqHeroRune::default_instance_ = new stReqHeroRune();
  stHeroRuneInfo::default_instance_ = new stHeroRuneInfo();
  stRetHeroRune::default_instance_ = new stRetHeroRune();
  stReqAddHeroRune::default_instance_ = new stReqAddHeroRune();
  stRetAddHeroRune::default_instance_ = new stRetAddHeroRune();
  stReqDelHeroRune::default_instance_ = new stReqDelHeroRune();
  stRetDelHeroRune::default_instance_ = new stRetDelHeroRune();
  stReqRunePieceCombine::default_instance_ = new stReqRunePieceCombine();
  stRetRunePieceCombine::default_instance_ = new stRetRunePieceCombine();
  stReqRuneIntensify::default_instance_ = new stReqRuneIntensify();
  stRetRuneIntensify::default_instance_ = new stRetRuneIntensify();
  stReqRuneEvolve::default_instance_ = new stReqRuneEvolve();
  stRetRuneEvolve::default_instance_ = new stRetRuneEvolve();
  stReqExtractGem::default_instance_ = new stReqExtractGem();
  ExtractGemResult::default_instance_ = new ExtractGemResult();
  stReqWedding::default_instance_ = new stReqWedding();
  stReqAgreeWedding::default_instance_ = new stReqAgreeWedding();
  ResultWedding::default_instance_ = new ResultWedding();
  stReqInviteToRoom::default_instance_ = new stReqInviteToRoom();
  NotifyEnterWedding::default_instance_ = new NotifyEnterWedding();
  stReqAgreeEnterWedding::default_instance_ = new stReqAgreeEnterWedding();
  ResultEnterWedding::default_instance_ = new ResultEnterWedding();
  MarryInviterPlace::default_instance_ = new MarryInviterPlace();
  stReqDivorce::default_instance_ = new stReqDivorce();
  RejectDivorce::default_instance_ = new RejectDivorce();
  stReqRejectDivorce::default_instance_ = new stReqRejectDivorce();
  stRetRejectDivorce::default_instance_ = new stRetRejectDivorce();
  BoardcastMarryInfo::default_instance_ = new BoardcastMarryInfo();
  stReqUseFirework::default_instance_ = new stReqUseFirework();
  ResultUseFirework::default_instance_ = new ResultUseFirework();
  NotifyFirework::default_instance_ = new NotifyFirework();
  stReqTakeCandy::default_instance_ = new stReqTakeCandy();
  ResultTakeCandy::default_instance_ = new ResultTakeCandy();
  stReqBuyFirework::default_instance_ = new stReqBuyFirework();
  ResultBuyFirework::default_instance_ = new ResultBuyFirework();
  stReqEnterWeddingAlone::default_instance_ = new stReqEnterWeddingAlone();
  ResultEnterWeddingAlone::default_instance_ = new ResultEnterWeddingAlone();
  stReqQuitWeddingScene::default_instance_ = new stReqQuitWeddingScene();
  stRetQuitWeddingScene::default_instance_ = new stRetQuitWeddingScene();
  stNotifyFriendAction::default_instance_ = new stNotifyFriendAction();
  stSendCharCreateTime::default_instance_ = new stSendCharCreateTime();
  stReqDrawWeddingRing::default_instance_ = new stReqDrawWeddingRing();
  stRetDrawWeddingRing::default_instance_ = new stRetDrawWeddingRing();
  stReqBuyNum::default_instance_ = new stReqBuyNum();
  stBuyNumResult::default_instance_ = new stBuyNumResult();
  stReqRefreshNum::default_instance_ = new stReqRefreshNum();
  stRefreshNumResult::default_instance_ = new stRefreshNumResult();
  stReqColumnList::default_instance_ = new stReqColumnList();
  stItemInfo::default_instance_ = new stItemInfo();
  stColumnListResult::default_instance_ = new stColumnListResult();
  stReqMarketBuyItem::default_instance_ = new stReqMarketBuyItem();
  stMarketBuyItemResult::default_instance_ = new stMarketBuyItemResult();
  stReqOpenWindow::default_instance_ = new stReqOpenWindow();
  stOpenWindowResult::default_instance_ = new stOpenWindowResult();
  stReqRefreshList::default_instance_ = new stReqRefreshList();
  stRefreshListResult::default_instance_ = new stRefreshListResult();
  stReqAKeyRaiseUserSkillLv::default_instance_ = new stReqAKeyRaiseUserSkillLv();
  stAKeyRaiseUserSkillLvResult::default_instance_ = new stAKeyRaiseUserSkillLvResult();
  stMountItemInfo::default_instance_ = new stMountItemInfo();
  stReqStoneSynthesis::default_instance_ = new stReqStoneSynthesis();
  stStoneSynthesisResult::default_instance_ = new stStoneSynthesisResult();
  stReqStoneEvolvement::default_instance_ = new stReqStoneEvolvement();
  stStoneEvolvementResult::default_instance_ = new stStoneEvolvementResult();
  stReqStoneProp::default_instance_ = new stReqStoneProp();
  stStonePropResult::default_instance_ = new stStonePropResult();
  stReqChangePhoto::default_instance_ = new stReqChangePhoto();
  stChangePhotoResult::default_instance_ = new stChangePhotoResult();
  stReqHasPhotoID::default_instance_ = new stReqHasPhotoID();
  stHasPhotoIDResult::default_instance_ = new stHasPhotoIDResult();
  stReqUnlockPhoto::default_instance_ = new stReqUnlockPhoto();
  stUnlockPhotoResult::default_instance_ = new stUnlockPhotoResult();
  stSpriteInfo::default_instance_ = new stSpriteInfo();
  stSpriteInfoResult::default_instance_ = new stSpriteInfoResult();
  stTrainHeroReq::default_instance_ = new stTrainHeroReq();
  stTrainHeroResult::default_instance_ = new stTrainHeroResult();
  stGuaJiTimeNtf::default_instance_ = new stGuaJiTimeNtf();
  stGuaJiAwardReq::default_instance_ = new stGuaJiAwardReq();
  stGuaJiAwardResult::default_instance_ = new stGuaJiAwardResult();
  stNftVipNtf::default_instance_ = new stNftVipNtf();
  stGuaJiStartReq::default_instance_ = new stGuaJiStartReq();
  stGuaJiStartResult::default_instance_ = new stGuaJiStartResult();
  stSynRMPShopItem2::default_instance_ = new stSynRMPShopItem2();
  stSynRMBShopInfo2::default_instance_ = new stSynRMBShopInfo2();
  stBattleProp::default_instance_->InitAsDefaultInstance();
  stRoleMainData::default_instance_->InitAsDefaultInstance();
  stInitMainData::default_instance_->InitAsDefaultInstance();
  ReqCreateRole::default_instance_->InitAsDefaultInstance();
  CreateRoleResult::default_instance_->InitAsDefaultInstance();
  stSynSnapData::default_instance_->InitAsDefaultInstance();
  RefreshSnapData::default_instance_->InitAsDefaultInstance();
  ReqEnterGame::default_instance_->InitAsDefaultInstance();
  stSynGoldCoin::default_instance_->InitAsDefaultInstance();
  stSynPointCard::default_instance_->InitAsDefaultInstance();
  stBagPos::default_instance_->InitAsDefaultInstance();
  stItemSkillInfo::default_instance_->InitAsDefaultInstance();
  stRaiseSkillProp::default_instance_->InitAsDefaultInstance();
  stEnchantInfo::default_instance_->InitAsDefaultInstance();
  stSynItemInfo::default_instance_->InitAsDefaultInstance();
  stNotifyAddItem::default_instance_->InitAsDefaultInstance();
  stDeleteItem::default_instance_->InitAsDefaultInstance();
  stRefreshItem::default_instance_->InitAsDefaultInstance();
  stInitAllItem::default_instance_->InitAsDefaultInstance();
  stReqOpenShop::default_instance_->InitAsDefaultInstance();
  stShopItem::default_instance_->InitAsDefaultInstance();
  stRetShopItemList::default_instance_->InitAsDefaultInstance();
  stReqBuyItem::default_instance_->InitAsDefaultInstance();
  stBuyItemResult::default_instance_->InitAsDefaultInstance();
  stSynHeroSkill::default_instance_->InitAsDefaultInstance();
  stImpactHeroInfo::default_instance_->InitAsDefaultInstance();
  stSynHeroInfo::default_instance_->InitAsDefaultInstance();
  stInitAllHero::default_instance_->InitAsDefaultInstance();
  stNotifyAddHero::default_instance_->InitAsDefaultInstance();
  stRefreshHero::default_instance_->InitAsDefaultInstance();
  stReqHeroGoOutForBattle::default_instance_->InitAsDefaultInstance();
  HeroGoOutForBattleResult::default_instance_->InitAsDefaultInstance();
  ReqHeroChange2WaitState::default_instance_->InitAsDefaultInstance();
  HeroChange2WaitStateResult::default_instance_->InitAsDefaultInstance();
  stNotifyRoleAddExp::default_instance_->InitAsDefaultInstance();
  stSynRoleLevel::default_instance_->InitAsDefaultInstance();
  stSynHeroLv::default_instance_->InitAsDefaultInstance();
  stSynBagPos::default_instance_->InitAsDefaultInstance();
  stMoveItem::default_instance_->InitAsDefaultInstance();
  stReqArrangeMainBag::default_instance_->InitAsDefaultInstance();
  stReArrangeMainBagError::default_instance_->InitAsDefaultInstance();
  stRefreshMainBag::default_instance_->InitAsDefaultInstance();
  stReqCombineHero::default_instance_->InitAsDefaultInstance();
  stCombineHeroResult::default_instance_->InitAsDefaultInstance();
  stReqLevelupHero::default_instance_->InitAsDefaultInstance();
  stLevelupHeroResult::default_instance_->InitAsDefaultInstance();
  stReqHeroEvolution::default_instance_->InitAsDefaultInstance();
  stEvolutionHeroResult::default_instance_->InitAsDefaultInstance();
  stReqHeroStudySkill::default_instance_->InitAsDefaultInstance();
  stHeroStudySkillResult::default_instance_->InitAsDefaultInstance();
  stReqRefineHeroSkill::default_instance_->InitAsDefaultInstance();
  stRefineHeroSkillResult::default_instance_->InitAsDefaultInstance();
  stSynSkillExp::default_instance_->InitAsDefaultInstance();
  stReqReplaceHeroSkill::default_instance_->InitAsDefaultInstance();
  stReplaceHeroSkillResult::default_instance_->InitAsDefaultInstance();
  stReqUpgradeHeroSkill::default_instance_->InitAsDefaultInstance();
  stUpgradeHeroSkillResult::default_instance_->InitAsDefaultInstance();
  stReqSellItem::default_instance_->InitAsDefaultInstance();
  stSellItemResult::default_instance_->InitAsDefaultInstance();
  stReqRaiseItem::default_instance_->InitAsDefaultInstance();
  stRaiseItemResult::default_instance_->InitAsDefaultInstance();
  stReqSmeltEquip::default_instance_->InitAsDefaultInstance();
  stSmeltEquipResult::default_instance_->InitAsDefaultInstance();
  stReqRecastEquip::default_instance_->InitAsDefaultInstance();
  RecastEquipResult::default_instance_->InitAsDefaultInstance();
  stReqCombineItem::default_instance_->InitAsDefaultInstance();
  stCombineItemResult::default_instance_->InitAsDefaultInstance();
  stReqRefreshShoplist::default_instance_->InitAsDefaultInstance();
  stRefreshShoplistResult::default_instance_->InitAsDefaultInstance();
  stChatCmd::default_instance_->InitAsDefaultInstance();
  stSynResource::default_instance_->InitAsDefaultInstance();
  stSynLevelInfo::default_instance_->InitAsDefaultInstance();
  stSynCharpterInfo::default_instance_->InitAsDefaultInstance();
  stSynAllLevelInfo::default_instance_->InitAsDefaultInstance();
  stObtainItem::default_instance_->InitAsDefaultInstance();
  stReqFinishLv::default_instance_->InitAsDefaultInstance();
  stFinishLvResult::default_instance_->InitAsDefaultInstance();
  stReqCharpterReward::default_instance_->InitAsDefaultInstance();
  stCharpterRewardResult::default_instance_->InitAsDefaultInstance();
  stReqRushLevel::default_instance_->InitAsDefaultInstance();
  stSynRushReward::default_instance_->InitAsDefaultInstance();
  stLevelRushResult::default_instance_->InitAsDefaultInstance();
  stReqResetRushNum::default_instance_->InitAsDefaultInstance();
  stResetRushNumResult::default_instance_->InitAsDefaultInstance();
  stReqRefineEquip::default_instance_->InitAsDefaultInstance();
  stRefineEquipResult::default_instance_->InitAsDefaultInstance();
  stSynTotoalRecharge::default_instance_->InitAsDefaultInstance();
  stSynSkillInfo::default_instance_->InitAsDefaultInstance();
  stSynUserAllSkill::default_instance_->InitAsDefaultInstance();
  stAddUserSkill::default_instance_->InitAsDefaultInstance();
  stReqUserDetailInfo::default_instance_->InitAsDefaultInstance();
  stUserDetailInfo::default_instance_->InitAsDefaultInstance();
  stUseItem::default_instance_->InitAsDefaultInstance();
  stUseItemError::default_instance_->InitAsDefaultInstance();
  stSynTipItem::default_instance_->InitAsDefaultInstance();
  stObtainItemTip::default_instance_->InitAsDefaultInstance();
  stReqGetEquipSkill::default_instance_->InitAsDefaultInstance();
  stGetEquipSkillResult::default_instance_->InitAsDefaultInstance();
  stReqRefineEquipSkill::default_instance_->InitAsDefaultInstance();
  stRefineEquipSkillResult::default_instance_->InitAsDefaultInstance();
  stMoveEquipSkill2Slot::default_instance_->InitAsDefaultInstance();
  stMoveEquipSkillResult::default_instance_->InitAsDefaultInstance();
  stReqUpgradeEquipSkill::default_instance_->InitAsDefaultInstance();
  stUpgradeEquipSkillResult::default_instance_->InitAsDefaultInstance();
  stSendPKUserData::default_instance_->InitAsDefaultInstance();
  stReqRaiseUserSkillLv::default_instance_->InitAsDefaultInstance();
  stRaiseUserSkillLvResult::default_instance_->InitAsDefaultInstance();
  stNotifyNewBieGuideStep::default_instance_->InitAsDefaultInstance();
  stSaveNewBieGuideStep::default_instance_->InitAsDefaultInstance();
  stOpenLevelBox::default_instance_->InitAsDefaultInstance();
  stChangeRole::default_instance_->InitAsDefaultInstance();
  stGotoSelectRole::default_instance_->InitAsDefaultInstance();
  stSynRMPShopItem::default_instance_->InitAsDefaultInstance();
  stSynRMBShopInfo::default_instance_->InitAsDefaultInstance();
  stSynOne2OnePVPItem::default_instance_->InitAsDefaultInstance();
  stOne2OnePVPResult::default_instance_->InitAsDefaultInstance();
  stPrivateChatNotUser::default_instance_->InitAsDefaultInstance();
  stReqRecoverRemainTime::default_instance_->InitAsDefaultInstance();
  stSPAndLilianRecoverRemainTime::default_instance_->InitAsDefaultInstance();
  stSwapHeroBattlePos::default_instance_->InitAsDefaultInstance();
  stSwapHeroBattlePosError::default_instance_->InitAsDefaultInstance();
  stSynSystemSetting::default_instance_->InitAsDefaultInstance();
  stReqSaveSystemSetting::default_instance_->InitAsDefaultInstance();
  stUnlockRareSkill::default_instance_->InitAsDefaultInstance();
  stUnlockRareSkillResult::default_instance_->InitAsDefaultInstance();
  stUpgradeRareSkill::default_instance_->InitAsDefaultInstance();
  stUpgradeRareSkillResult::default_instance_->InitAsDefaultInstance();
  stReqGiftBag::default_instance_->InitAsDefaultInstance();
  stGotGiftBagResult::default_instance_->InitAsDefaultInstance();
  stSynRealTimeItem::default_instance_->InitAsDefaultInstance();
  stRealTimePKResult::default_instance_->InitAsDefaultInstance();
  stReqFiveRaiseEquip::default_instance_->InitAsDefaultInstance();
  stFiveRaiseEquipResult::default_instance_->InitAsDefaultInstance();
  stSynBattleProp::default_instance_->InitAsDefaultInstance();
  stSynTeamCopyMapNum::default_instance_->InitAsDefaultInstance();
  stSynRealTimePKNum::default_instance_->InitAsDefaultInstance();
  stCopymapFail::default_instance_->InitAsDefaultInstance();
  stReqHero10TimeStudySkill::default_instance_->InitAsDefaultInstance();
  stHero10TimesStudySkillResult::default_instance_->InitAsDefaultInstance();
  st10TimesGetEquipSkill::default_instance_->InitAsDefaultInstance();
  st10TimesGetEquipSkillResult::default_instance_->InitAsDefaultInstance();
  stReqFirstRechargeReward::default_instance_->InitAsDefaultInstance();
  stRetFirstRechargeReward::default_instance_->InitAsDefaultInstance();
  stSynMobaItem::default_instance_->InitAsDefaultInstance();
  stMobaPKResult::default_instance_->InitAsDefaultInstance();
  stSubNewBieGuideID::default_instance_->InitAsDefaultInstance();
  stResetTeamCopyMapNum::default_instance_->InitAsDefaultInstance();
  stResetTeampCopyMapNumResult::default_instance_->InitAsDefaultInstance();
  stResetRealTimeCopyMapNum::default_instance_->InitAsDefaultInstance();
  stResetRealTimeCopymapNumResult::default_instance_->InitAsDefaultInstance();
  stBuyRMBItemSuccess::default_instance_->InitAsDefaultInstance();
  stOne2OnePVPFail::default_instance_->InitAsDefaultInstance();
  stRealTimeFail::default_instance_->InitAsDefaultInstance();
  stDataInitFinish::default_instance_->InitAsDefaultInstance();
  stReqFirst10RechargeReward::default_instance_->InitAsDefaultInstance();
  stRetFirst10RechargeReward::default_instance_->InitAsDefaultInstance();
  stChatInWorldCoolDown::default_instance_->InitAsDefaultInstance();
  stSynRoleCreateTime::default_instance_->InitAsDefaultInstance();
  stReqChgEquipSkill::default_instance_->InitAsDefaultInstance();
  stRetChgEquipSkillResult::default_instance_->InitAsDefaultInstance();
  stHasCloseBetaReward::default_instance_->InitAsDefaultInstance();
  stReqGotCloseBetaReward::default_instance_->InitAsDefaultInstance();
  stGotCloseBetaRewardResult::default_instance_->InitAsDefaultInstance();
  stReqUseMonthCardItem::default_instance_->InitAsDefaultInstance();
  stRetUseMonthCardItem::default_instance_->InitAsDefaultInstance();
  stReqUseSelectItemBox::default_instance_->InitAsDefaultInstance();
  stRetUseSelectItemBox::default_instance_->InitAsDefaultInstance();
  stReqUseHeroSkillBook::default_instance_->InitAsDefaultInstance();
  stRetUseHeroSkillBook::default_instance_->InitAsDefaultInstance();
  stReqUseEquipSkillBook::default_instance_->InitAsDefaultInstance();
  stRetUseEquipSkillBook::default_instance_->InitAsDefaultInstance();
  stReqBreakEquip::default_instance_->InitAsDefaultInstance();
  stBreakEquipResult::default_instance_->InitAsDefaultInstance();
  stReqRecastHero::default_instance_->InitAsDefaultInstance();
  stRecastHeroResult::default_instance_->InitAsDefaultInstance();
  stReqChangeName::default_instance_->InitAsDefaultInstance();
  stChangeNameResult::default_instance_->InitAsDefaultInstance();
  stReqOpenBuyGoldWindow::default_instance_->InitAsDefaultInstance();
  stOpenBuyGoldWindowResult::default_instance_->InitAsDefaultInstance();
  stReqBuyGold::default_instance_->InitAsDefaultInstance();
  stBuyGoldResult::default_instance_->InitAsDefaultInstance();
  stSendImpactHeroInfo::default_instance_->InitAsDefaultInstance();
  stExpBookLevelLimit::default_instance_->InitAsDefaultInstance();
  stNotifyPubUniqueID::default_instance_->InitAsDefaultInstance();
  EnchantItem::default_instance_->InitAsDefaultInstance();
  stReqEnchant::default_instance_->InitAsDefaultInstance();
  stRetEnchant::default_instance_->InitAsDefaultInstance();
  stReqRecastEnchant::default_instance_->InitAsDefaultInstance();
  stRetRecastEnchant::default_instance_->InitAsDefaultInstance();
  stReqLockEnchant::default_instance_->InitAsDefaultInstance();
  stRetLockEnchant::default_instance_->InitAsDefaultInstance();
  stHeroLeagueItem::default_instance_->InitAsDefaultInstance();
  stHerLeagueResult::default_instance_->InitAsDefaultInstance();
  stReqHeroRune::default_instance_->InitAsDefaultInstance();
  stHeroRuneInfo::default_instance_->InitAsDefaultInstance();
  stRetHeroRune::default_instance_->InitAsDefaultInstance();
  stReqAddHeroRune::default_instance_->InitAsDefaultInstance();
  stRetAddHeroRune::default_instance_->InitAsDefaultInstance();
  stReqDelHeroRune::default_instance_->InitAsDefaultInstance();
  stRetDelHeroRune::default_instance_->InitAsDefaultInstance();
  stReqRunePieceCombine::default_instance_->InitAsDefaultInstance();
  stRetRunePieceCombine::default_instance_->InitAsDefaultInstance();
  stReqRuneIntensify::default_instance_->InitAsDefaultInstance();
  stRetRuneIntensify::default_instance_->InitAsDefaultInstance();
  stReqRuneEvolve::default_instance_->InitAsDefaultInstance();
  stRetRuneEvolve::default_instance_->InitAsDefaultInstance();
  stReqExtractGem::default_instance_->InitAsDefaultInstance();
  ExtractGemResult::default_instance_->InitAsDefaultInstance();
  stReqWedding::default_instance_->InitAsDefaultInstance();
  stReqAgreeWedding::default_instance_->InitAsDefaultInstance();
  ResultWedding::default_instance_->InitAsDefaultInstance();
  stReqInviteToRoom::default_instance_->InitAsDefaultInstance();
  NotifyEnterWedding::default_instance_->InitAsDefaultInstance();
  stReqAgreeEnterWedding::default_instance_->InitAsDefaultInstance();
  ResultEnterWedding::default_instance_->InitAsDefaultInstance();
  MarryInviterPlace::default_instance_->InitAsDefaultInstance();
  stReqDivorce::default_instance_->InitAsDefaultInstance();
  RejectDivorce::default_instance_->InitAsDefaultInstance();
  stReqRejectDivorce::default_instance_->InitAsDefaultInstance();
  stRetRejectDivorce::default_instance_->InitAsDefaultInstance();
  BoardcastMarryInfo::default_instance_->InitAsDefaultInstance();
  stReqUseFirework::default_instance_->InitAsDefaultInstance();
  ResultUseFirework::default_instance_->InitAsDefaultInstance();
  NotifyFirework::default_instance_->InitAsDefaultInstance();
  stReqTakeCandy::default_instance_->InitAsDefaultInstance();
  ResultTakeCandy::default_instance_->InitAsDefaultInstance();
  stReqBuyFirework::default_instance_->InitAsDefaultInstance();
  ResultBuyFirework::default_instance_->InitAsDefaultInstance();
  stReqEnterWeddingAlone::default_instance_->InitAsDefaultInstance();
  ResultEnterWeddingAlone::default_instance_->InitAsDefaultInstance();
  stReqQuitWeddingScene::default_instance_->InitAsDefaultInstance();
  stRetQuitWeddingScene::default_instance_->InitAsDefaultInstance();
  stNotifyFriendAction::default_instance_->InitAsDefaultInstance();
  stSendCharCreateTime::default_instance_->InitAsDefaultInstance();
  stReqDrawWeddingRing::default_instance_->InitAsDefaultInstance();
  stRetDrawWeddingRing::default_instance_->InitAsDefaultInstance();
  stReqBuyNum::default_instance_->InitAsDefaultInstance();
  stBuyNumResult::default_instance_->InitAsDefaultInstance();
  stReqRefreshNum::default_instance_->InitAsDefaultInstance();
  stRefreshNumResult::default_instance_->InitAsDefaultInstance();
  stReqColumnList::default_instance_->InitAsDefaultInstance();
  stItemInfo::default_instance_->InitAsDefaultInstance();
  stColumnListResult::default_instance_->InitAsDefaultInstance();
  stReqMarketBuyItem::default_instance_->InitAsDefaultInstance();
  stMarketBuyItemResult::default_instance_->InitAsDefaultInstance();
  stReqOpenWindow::default_instance_->InitAsDefaultInstance();
  stOpenWindowResult::default_instance_->InitAsDefaultInstance();
  stReqRefreshList::default_instance_->InitAsDefaultInstance();
  stRefreshListResult::default_instance_->InitAsDefaultInstance();
  stReqAKeyRaiseUserSkillLv::default_instance_->InitAsDefaultInstance();
  stAKeyRaiseUserSkillLvResult::default_instance_->InitAsDefaultInstance();
  stMountItemInfo::default_instance_->InitAsDefaultInstance();
  stReqStoneSynthesis::default_instance_->InitAsDefaultInstance();
  stStoneSynthesisResult::default_instance_->InitAsDefaultInstance();
  stReqStoneEvolvement::default_instance_->InitAsDefaultInstance();
  stStoneEvolvementResult::default_instance_->InitAsDefaultInstance();
  stReqStoneProp::default_instance_->InitAsDefaultInstance();
  stStonePropResult::default_instance_->InitAsDefaultInstance();
  stReqChangePhoto::default_instance_->InitAsDefaultInstance();
  stChangePhotoResult::default_instance_->InitAsDefaultInstance();
  stReqHasPhotoID::default_instance_->InitAsDefaultInstance();
  stHasPhotoIDResult::default_instance_->InitAsDefaultInstance();
  stReqUnlockPhoto::default_instance_->InitAsDefaultInstance();
  stUnlockPhotoResult::default_instance_->InitAsDefaultInstance();
  stSpriteInfo::default_instance_->InitAsDefaultInstance();
  stSpriteInfoResult::default_instance_->InitAsDefaultInstance();
  stTrainHeroReq::default_instance_->InitAsDefaultInstance();
  stTrainHeroResult::default_instance_->InitAsDefaultInstance();
  stGuaJiTimeNtf::default_instance_->InitAsDefaultInstance();
  stGuaJiAwardReq::default_instance_->InitAsDefaultInstance();
  stGuaJiAwardResult::default_instance_->InitAsDefaultInstance();
  stNftVipNtf::default_instance_->InitAsDefaultInstance();
  stGuaJiStartReq::default_instance_->InitAsDefaultInstance();
  stGuaJiStartResult::default_instance_->InitAsDefaultInstance();
  stSynRMPShopItem2::default_instance_->InitAsDefaultInstance();
  stSynRMBShopInfo2::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Role_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Role_2eproto {
  StaticDescriptorInitializer_Role_2eproto() {
    protobuf_AddDesc_Role_2eproto();
  }
} static_descriptor_initializer_Role_2eproto_;
const ::google::protobuf::EnumDescriptor* eRoleJob_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eRoleJob_descriptor_;
}
bool eRoleJob_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* eRoleSex_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eRoleSex_descriptor_;
}
bool eRoleSex_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CreateRoleResultCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateRoleResultCode_descriptor_;
}
bool CreateRoleResultCode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* eBagType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eBagType_descriptor_;
}
bool eBagType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* E_HERO_STATE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_HERO_STATE_descriptor_;
}
bool E_HERO_STATE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ArrageMainBagError_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArrageMainBagError_descriptor_;
}
bool ArrageMainBagError_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* eChatType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eChatType_descriptor_;
}
bool eChatType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* eLevelStar_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eLevelStar_descriptor_;
}
bool eLevelStar_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* eCharpterRewardStep_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eCharpterRewardStep_descriptor_;
}
bool eCharpterRewardStep_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* eRushType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eRushType_descriptor_;
}
bool eRushType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* eSystemSetting_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eSystemSetting_descriptor_;
}
bool eSystemSetting_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* eColumn_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eColumn_descriptor_;
}
bool eColumn_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int stBattleProp::kPropIDFieldNumber;
const int stBattleProp::kPropValFieldNumber;
#endif  // !_MSC_VER

stBattleProp::stBattleProp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stBattleProp::InitAsDefaultInstance() {
}

stBattleProp::stBattleProp(const stBattleProp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stBattleProp::SharedCtor() {
  _cached_size_ = 0;
  propid_ = 0u;
  propval_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stBattleProp::~stBattleProp() {
  SharedDtor();
}

void stBattleProp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stBattleProp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stBattleProp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stBattleProp_descriptor_;
}

const stBattleProp& stBattleProp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stBattleProp* stBattleProp::default_instance_ = NULL;

stBattleProp* stBattleProp::New() const {
  return new stBattleProp;
}

void stBattleProp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    propid_ = 0u;
    propval_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stBattleProp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 propID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &propid_)));
          set_has_propid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_propVal;
        break;
      }

      // optional uint32 propVal = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_propVal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &propval_)));
          set_has_propval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stBattleProp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 propID = 1;
  if (has_propid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->propid(), output);
  }

  // optional uint32 propVal = 2;
  if (has_propval()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->propval(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stBattleProp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 propID = 1;
  if (has_propid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->propid(), target);
  }

  // optional uint32 propVal = 2;
  if (has_propval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->propval(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stBattleProp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 propID = 1;
    if (has_propid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->propid());
    }

    // optional uint32 propVal = 2;
    if (has_propval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->propval());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stBattleProp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stBattleProp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stBattleProp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stBattleProp::MergeFrom(const stBattleProp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_propid()) {
      set_propid(from.propid());
    }
    if (from.has_propval()) {
      set_propval(from.propval());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stBattleProp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stBattleProp::CopyFrom(const stBattleProp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stBattleProp::IsInitialized() const {

  return true;
}

void stBattleProp::Swap(stBattleProp* other) {
  if (other != this) {
    std::swap(propid_, other->propid_);
    std::swap(propval_, other->propval_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stBattleProp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stBattleProp_descriptor_;
  metadata.reflection = stBattleProp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stRoleMainData::kCharIDFieldNumber;
const int stRoleMainData::kNameFieldNumber;
const int stRoleMainData::kLevelFieldNumber;
const int stRoleMainData::kExpFieldNumber;
const int stRoleMainData::kGoldCoinFieldNumber;
const int stRoleMainData::kPointCardFieldNumber;
const int stRoleMainData::kCurHPFieldNumber;
const int stRoleMainData::kCurMPFieldNumber;
const int stRoleMainData::kBattlePowerFieldNumber;
const int stRoleMainData::kHeishijiejingFieldNumber;
const int stRoleMainData::kReputaionFieldNumber;
const int stRoleMainData::kHonourFieldNumber;
const int stRoleMainData::kBraveValFieldNumber;
const int stRoleMainData::kPeakCertificateFieldNumber;
const int stRoleMainData::kHufuFieldNumber;
const int stRoleMainData::kYuntieFieldNumber;
const int stRoleMainData::kTotalRechargeFieldNumber;
const int stRoleMainData::kTodayRechargeFieldNumber;
const int stRoleMainData::kJobFieldNumber;
const int stRoleMainData::kSexFieldNumber;
const int stRoleMainData::kSpFieldNumber;
const int stRoleMainData::kLilianFieldNumber;
const int stRoleMainData::kTotalConsumeFieldNumber;
const int stRoleMainData::kJuexingNumFieldNumber;
const int stRoleMainData::kJuexingExpFieldNumber;
const int stRoleMainData::kJoinGuildRemainTimeFieldNumber;
const int stRoleMainData::kHeadIDFieldNumber;
const int stRoleMainData::kFaceIDFieldNumber;
const int stRoleMainData::kStudyHeroSkillNumFieldNumber;
const int stRoleMainData::kTeamCopyMapNumFieldNumber;
const int stRoleMainData::kRealTimePKNumFieldNumber;
const int stRoleMainData::kBattlePropFieldNumber;
const int stRoleMainData::kGotFstRechargeRewardFieldNumber;
const int stRoleMainData::kTeamCopymapResetNumFieldNumber;
const int stRoleMainData::kRealTimeResetNumFieldNumber;
const int stRoleMainData::kGotFst10RechargeRewardFieldNumber;
const int stRoleMainData::kChangeNameNumFieldNumber;
const int stRoleMainData::kIntegralFieldNumber;
const int stRoleMainData::kSoulFireFieldNumber;
const int stRoleMainData::kGloryFieldNumber;
const int stRoleMainData::kCoupleIdFieldNumber;
const int stRoleMainData::kLifeEssenceFieldNumber;
const int stRoleMainData::kGuidCrystalFieldNumber;
const int stRoleMainData::kIsReceiveFieldNumber;
const int stRoleMainData::kPhotoIDFieldNumber;
const int stRoleMainData::kTrainSpFieldNumber;
const int stRoleMainData::kGuajiStartFieldNumber;
const int stRoleMainData::kGuajiEndFieldNumber;
const int stRoleMainData::kIsRobotFieldNumber;
const int stRoleMainData::kGuajiTodayCountFieldNumber;
#endif  // !_MSC_VER

stRoleMainData::stRoleMainData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRoleMainData::InitAsDefaultInstance() {
}

stRoleMainData::stRoleMainData(const stRoleMainData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRoleMainData::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0u;
  exp_ = 0u;
  goldcoin_ = 0u;
  pointcard_ = 0u;
  curhp_ = 0u;
  curmp_ = 0u;
  battlepower_ = 0u;
  heishijiejing_ = 0u;
  reputaion_ = 0u;
  honour_ = 0u;
  braveval_ = 0u;
  peakcertificate_ = 0u;
  hufu_ = 0u;
  yuntie_ = 0u;
  totalrecharge_ = 0u;
  todayrecharge_ = 0u;
  job_ = 0u;
  sex_ = 0u;
  sp_ = 0u;
  lilian_ = 0u;
  totalconsume_ = 0u;
  juexingnum_ = 0u;
  juexingexp_ = 0u;
  joinguildremaintime_ = 0u;
  headid_ = 0u;
  faceid_ = 0u;
  studyheroskillnum_ = 0u;
  teamcopymapnum_ = 0u;
  realtimepknum_ = 0u;
  gotfstrechargereward_ = false;
  teamcopymapresetnum_ = 0u;
  realtimeresetnum_ = 0u;
  gotfst10rechargereward_ = false;
  changenamenum_ = 0u;
  integral_ = 0u;
  soulfire_ = 0u;
  glory_ = 0u;
  coupleid_ = 0u;
  lifeessence_ = 0u;
  guidcrystal_ = 0u;
  isreceive_ = false;
  photoid_ = 0u;
  trainsp_ = 0u;
  guajistart_ = 0u;
  guajiend_ = 0u;
  isrobot_ = false;
  guajitodaycount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRoleMainData::~stRoleMainData() {
  SharedDtor();
}

void stRoleMainData::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void stRoleMainData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRoleMainData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRoleMainData_descriptor_;
}

const stRoleMainData& stRoleMainData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stRoleMainData* stRoleMainData::default_instance_ = NULL;

stRoleMainData* stRoleMainData::New() const {
  return new stRoleMainData;
}

void stRoleMainData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    level_ = 0u;
    exp_ = 0u;
    goldcoin_ = 0u;
    pointcard_ = 0u;
    curhp_ = 0u;
    curmp_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    battlepower_ = 0u;
    heishijiejing_ = 0u;
    reputaion_ = 0u;
    honour_ = 0u;
    braveval_ = 0u;
    peakcertificate_ = 0u;
    hufu_ = 0u;
    yuntie_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    totalrecharge_ = 0u;
    todayrecharge_ = 0u;
    job_ = 0u;
    sex_ = 0u;
    sp_ = 0u;
    lilian_ = 0u;
    totalconsume_ = 0u;
    juexingnum_ = 0u;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    juexingexp_ = 0u;
    joinguildremaintime_ = 0u;
    headid_ = 0u;
    faceid_ = 0u;
    studyheroskillnum_ = 0u;
    teamcopymapnum_ = 0u;
    realtimepknum_ = 0u;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    gotfstrechargereward_ = false;
    teamcopymapresetnum_ = 0u;
    realtimeresetnum_ = 0u;
    gotfst10rechargereward_ = false;
    changenamenum_ = 0u;
    integral_ = 0u;
    soulfire_ = 0u;
    glory_ = 0u;
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    coupleid_ = 0u;
    lifeessence_ = 0u;
    guidcrystal_ = 0u;
    isreceive_ = false;
    photoid_ = 0u;
    trainsp_ = 0u;
    guajistart_ = 0u;
    guajiend_ = 0u;
  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    isrobot_ = false;
    guajitodaycount_ = 0u;
  }
  battleprop_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRoleMainData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // optional uint32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_exp;
        break;
      }

      // optional uint32 exp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_goldCoin;
        break;
      }

      // optional uint32 goldCoin = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_goldCoin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &goldcoin_)));
          set_has_goldcoin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_pointCard;
        break;
      }

      // optional uint32 pointCard = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pointCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pointcard_)));
          set_has_pointcard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_curHP;
        break;
      }

      // optional uint32 curHP = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curHP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curhp_)));
          set_has_curhp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_curMP;
        break;
      }

      // optional uint32 curMP = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curMP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curmp_)));
          set_has_curmp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_battlePower;
        break;
      }

      // optional uint32 battlePower = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battlePower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battlepower_)));
          set_has_battlepower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_heishijiejing;
        break;
      }

      // optional uint32 heishijiejing = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_heishijiejing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heishijiejing_)));
          set_has_heishijiejing();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_reputaion;
        break;
      }

      // optional uint32 reputaion = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reputaion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reputaion_)));
          set_has_reputaion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_honour;
        break;
      }

      // optional uint32 honour = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_honour:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &honour_)));
          set_has_honour();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_braveVal;
        break;
      }

      // optional uint32 braveVal = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_braveVal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &braveval_)));
          set_has_braveval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_peakCertificate;
        break;
      }

      // optional uint32 peakCertificate = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_peakCertificate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &peakcertificate_)));
          set_has_peakcertificate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_hufu;
        break;
      }

      // optional uint32 hufu = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hufu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hufu_)));
          set_has_hufu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_yuntie;
        break;
      }

      // optional uint32 yuntie = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_yuntie:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &yuntie_)));
          set_has_yuntie();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_totalRecharge;
        break;
      }

      // optional uint32 totalRecharge = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalRecharge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totalrecharge_)));
          set_has_totalrecharge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_todayRecharge;
        break;
      }

      // optional uint32 todayRecharge = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_todayRecharge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &todayrecharge_)));
          set_has_todayrecharge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_job;
        break;
      }

      // optional uint32 job = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &job_)));
          set_has_job();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_sex;
        break;
      }

      // optional uint32 sex = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_sp;
        break;
      }

      // optional uint32 sp = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sp_)));
          set_has_sp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_lilian;
        break;
      }

      // optional uint32 lilian = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lilian:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lilian_)));
          set_has_lilian();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_totalConsume;
        break;
      }

      // optional uint32 totalConsume = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalConsume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totalconsume_)));
          set_has_totalconsume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_juexingNum;
        break;
      }

      // optional uint32 juexingNum = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_juexingNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &juexingnum_)));
          set_has_juexingnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_juexingExp;
        break;
      }

      // optional uint32 juexingExp = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_juexingExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &juexingexp_)));
          set_has_juexingexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_joinGuildRemainTime;
        break;
      }

      // optional uint32 joinGuildRemainTime = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_joinGuildRemainTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &joinguildremaintime_)));
          set_has_joinguildremaintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_headID;
        break;
      }

      // optional uint32 headID = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_headID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &headid_)));
          set_has_headid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_faceID;
        break;
      }

      // optional uint32 faceID = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_faceID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &faceid_)));
          set_has_faceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_studyHeroSkillNum;
        break;
      }

      // optional uint32 studyHeroSkillNum = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_studyHeroSkillNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &studyheroskillnum_)));
          set_has_studyheroskillnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_teamCopyMapNum;
        break;
      }

      // optional uint32 teamCopyMapNum = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_teamCopyMapNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teamcopymapnum_)));
          set_has_teamcopymapnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_realTimePKNum;
        break;
      }

      // optional uint32 realTimePKNum = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_realTimePKNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &realtimepknum_)));
          set_has_realtimepknum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(266)) goto parse_battleProp;
        break;
      }

      // repeated .Role.stBattleProp battleProp = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_battleProp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_battleprop()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(266)) goto parse_battleProp;
        if (input->ExpectTag(272)) goto parse_gotFstRechargeReward;
        break;
      }

      // optional bool gotFstRechargeReward = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gotFstRechargeReward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &gotfstrechargereward_)));
          set_has_gotfstrechargereward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_teamCopymapResetNum;
        break;
      }

      // optional uint32 teamCopymapResetNum = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_teamCopymapResetNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teamcopymapresetnum_)));
          set_has_teamcopymapresetnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(288)) goto parse_realTimeResetNum;
        break;
      }

      // optional uint32 realTimeResetNum = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_realTimeResetNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &realtimeresetnum_)));
          set_has_realtimeresetnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(296)) goto parse_gotFst10RechargeReward;
        break;
      }

      // optional bool gotFst10RechargeReward = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gotFst10RechargeReward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &gotfst10rechargereward_)));
          set_has_gotfst10rechargereward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(304)) goto parse_changeNameNum;
        break;
      }

      // optional uint32 changeNameNum = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_changeNameNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &changenamenum_)));
          set_has_changenamenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(312)) goto parse_integral;
        break;
      }

      // optional uint32 integral = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_integral:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &integral_)));
          set_has_integral();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_soulFire;
        break;
      }

      // optional uint32 soulFire = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_soulFire:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &soulfire_)));
          set_has_soulfire();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(328)) goto parse_glory;
        break;
      }

      // optional uint32 glory = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_glory:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &glory_)));
          set_has_glory();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(336)) goto parse_coupleId;
        break;
      }

      // optional uint32 coupleId = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_coupleId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coupleid_)));
          set_has_coupleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(344)) goto parse_lifeEssence;
        break;
      }

      // optional uint32 lifeEssence = 43;
      case 43: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lifeEssence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lifeessence_)));
          set_has_lifeessence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(352)) goto parse_guidCrystal;
        break;
      }

      // optional uint32 guidCrystal = 44;
      case 44: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guidCrystal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guidcrystal_)));
          set_has_guidcrystal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(360)) goto parse_isReceive;
        break;
      }

      // optional bool isReceive = 45;
      case 45: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isReceive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isreceive_)));
          set_has_isreceive();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(368)) goto parse_photoID;
        break;
      }

      // optional uint32 photoID = 46;
      case 46: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_photoID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &photoid_)));
          set_has_photoid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(376)) goto parse_trainSp;
        break;
      }

      // optional uint32 trainSp = 47;
      case 47: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trainSp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &trainsp_)));
          set_has_trainsp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(384)) goto parse_guajiStart;
        break;
      }

      // optional uint32 guajiStart = 48;
      case 48: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guajiStart:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guajistart_)));
          set_has_guajistart();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(392)) goto parse_guajiEnd;
        break;
      }

      // optional uint32 guajiEnd = 49;
      case 49: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guajiEnd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guajiend_)));
          set_has_guajiend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(400)) goto parse_isRobot;
        break;
      }

      // optional bool isRobot = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isRobot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isrobot_)));
          set_has_isrobot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(408)) goto parse_guajiTodayCount;
        break;
      }

      // optional uint32 guajiTodayCount = 51;
      case 51: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guajiTodayCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guajitodaycount_)));
          set_has_guajitodaycount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRoleMainData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional uint32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->level(), output);
  }

  // optional uint32 exp = 4;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->exp(), output);
  }

  // optional uint32 goldCoin = 5;
  if (has_goldcoin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->goldcoin(), output);
  }

  // optional uint32 pointCard = 6;
  if (has_pointcard()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->pointcard(), output);
  }

  // optional uint32 curHP = 7;
  if (has_curhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->curhp(), output);
  }

  // optional uint32 curMP = 8;
  if (has_curmp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->curmp(), output);
  }

  // optional uint32 battlePower = 9;
  if (has_battlepower()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->battlepower(), output);
  }

  // optional uint32 heishijiejing = 10;
  if (has_heishijiejing()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->heishijiejing(), output);
  }

  // optional uint32 reputaion = 11;
  if (has_reputaion()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->reputaion(), output);
  }

  // optional uint32 honour = 12;
  if (has_honour()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->honour(), output);
  }

  // optional uint32 braveVal = 13;
  if (has_braveval()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->braveval(), output);
  }

  // optional uint32 peakCertificate = 14;
  if (has_peakcertificate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->peakcertificate(), output);
  }

  // optional uint32 hufu = 15;
  if (has_hufu()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->hufu(), output);
  }

  // optional uint32 yuntie = 16;
  if (has_yuntie()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->yuntie(), output);
  }

  // optional uint32 totalRecharge = 17;
  if (has_totalrecharge()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->totalrecharge(), output);
  }

  // optional uint32 todayRecharge = 18;
  if (has_todayrecharge()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->todayrecharge(), output);
  }

  // optional uint32 job = 19;
  if (has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->job(), output);
  }

  // optional uint32 sex = 20;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->sex(), output);
  }

  // optional uint32 sp = 21;
  if (has_sp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->sp(), output);
  }

  // optional uint32 lilian = 22;
  if (has_lilian()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->lilian(), output);
  }

  // optional uint32 totalConsume = 24;
  if (has_totalconsume()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->totalconsume(), output);
  }

  // optional uint32 juexingNum = 25;
  if (has_juexingnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->juexingnum(), output);
  }

  // optional uint32 juexingExp = 26;
  if (has_juexingexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->juexingexp(), output);
  }

  // optional uint32 joinGuildRemainTime = 27;
  if (has_joinguildremaintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->joinguildremaintime(), output);
  }

  // optional uint32 headID = 28;
  if (has_headid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->headid(), output);
  }

  // optional uint32 faceID = 29;
  if (has_faceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(29, this->faceid(), output);
  }

  // optional uint32 studyHeroSkillNum = 30;
  if (has_studyheroskillnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->studyheroskillnum(), output);
  }

  // optional uint32 teamCopyMapNum = 31;
  if (has_teamcopymapnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(31, this->teamcopymapnum(), output);
  }

  // optional uint32 realTimePKNum = 32;
  if (has_realtimepknum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(32, this->realtimepknum(), output);
  }

  // repeated .Role.stBattleProp battleProp = 33;
  for (int i = 0; i < this->battleprop_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      33, this->battleprop(i), output);
  }

  // optional bool gotFstRechargeReward = 34;
  if (has_gotfstrechargereward()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(34, this->gotfstrechargereward(), output);
  }

  // optional uint32 teamCopymapResetNum = 35;
  if (has_teamcopymapresetnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(35, this->teamcopymapresetnum(), output);
  }

  // optional uint32 realTimeResetNum = 36;
  if (has_realtimeresetnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(36, this->realtimeresetnum(), output);
  }

  // optional bool gotFst10RechargeReward = 37;
  if (has_gotfst10rechargereward()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(37, this->gotfst10rechargereward(), output);
  }

  // optional uint32 changeNameNum = 38;
  if (has_changenamenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(38, this->changenamenum(), output);
  }

  // optional uint32 integral = 39;
  if (has_integral()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(39, this->integral(), output);
  }

  // optional uint32 soulFire = 40;
  if (has_soulfire()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(40, this->soulfire(), output);
  }

  // optional uint32 glory = 41;
  if (has_glory()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(41, this->glory(), output);
  }

  // optional uint32 coupleId = 42;
  if (has_coupleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(42, this->coupleid(), output);
  }

  // optional uint32 lifeEssence = 43;
  if (has_lifeessence()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(43, this->lifeessence(), output);
  }

  // optional uint32 guidCrystal = 44;
  if (has_guidcrystal()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(44, this->guidcrystal(), output);
  }

  // optional bool isReceive = 45;
  if (has_isreceive()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(45, this->isreceive(), output);
  }

  // optional uint32 photoID = 46;
  if (has_photoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(46, this->photoid(), output);
  }

  // optional uint32 trainSp = 47;
  if (has_trainsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(47, this->trainsp(), output);
  }

  // optional uint32 guajiStart = 48;
  if (has_guajistart()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(48, this->guajistart(), output);
  }

  // optional uint32 guajiEnd = 49;
  if (has_guajiend()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(49, this->guajiend(), output);
  }

  // optional bool isRobot = 50;
  if (has_isrobot()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(50, this->isrobot(), output);
  }

  // optional uint32 guajiTodayCount = 51;
  if (has_guajitodaycount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(51, this->guajitodaycount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRoleMainData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional uint32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->level(), target);
  }

  // optional uint32 exp = 4;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->exp(), target);
  }

  // optional uint32 goldCoin = 5;
  if (has_goldcoin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->goldcoin(), target);
  }

  // optional uint32 pointCard = 6;
  if (has_pointcard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->pointcard(), target);
  }

  // optional uint32 curHP = 7;
  if (has_curhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->curhp(), target);
  }

  // optional uint32 curMP = 8;
  if (has_curmp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->curmp(), target);
  }

  // optional uint32 battlePower = 9;
  if (has_battlepower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->battlepower(), target);
  }

  // optional uint32 heishijiejing = 10;
  if (has_heishijiejing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->heishijiejing(), target);
  }

  // optional uint32 reputaion = 11;
  if (has_reputaion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->reputaion(), target);
  }

  // optional uint32 honour = 12;
  if (has_honour()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->honour(), target);
  }

  // optional uint32 braveVal = 13;
  if (has_braveval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->braveval(), target);
  }

  // optional uint32 peakCertificate = 14;
  if (has_peakcertificate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->peakcertificate(), target);
  }

  // optional uint32 hufu = 15;
  if (has_hufu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->hufu(), target);
  }

  // optional uint32 yuntie = 16;
  if (has_yuntie()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->yuntie(), target);
  }

  // optional uint32 totalRecharge = 17;
  if (has_totalrecharge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->totalrecharge(), target);
  }

  // optional uint32 todayRecharge = 18;
  if (has_todayrecharge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->todayrecharge(), target);
  }

  // optional uint32 job = 19;
  if (has_job()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->job(), target);
  }

  // optional uint32 sex = 20;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->sex(), target);
  }

  // optional uint32 sp = 21;
  if (has_sp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->sp(), target);
  }

  // optional uint32 lilian = 22;
  if (has_lilian()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->lilian(), target);
  }

  // optional uint32 totalConsume = 24;
  if (has_totalconsume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->totalconsume(), target);
  }

  // optional uint32 juexingNum = 25;
  if (has_juexingnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->juexingnum(), target);
  }

  // optional uint32 juexingExp = 26;
  if (has_juexingexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(26, this->juexingexp(), target);
  }

  // optional uint32 joinGuildRemainTime = 27;
  if (has_joinguildremaintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(27, this->joinguildremaintime(), target);
  }

  // optional uint32 headID = 28;
  if (has_headid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(28, this->headid(), target);
  }

  // optional uint32 faceID = 29;
  if (has_faceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(29, this->faceid(), target);
  }

  // optional uint32 studyHeroSkillNum = 30;
  if (has_studyheroskillnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->studyheroskillnum(), target);
  }

  // optional uint32 teamCopyMapNum = 31;
  if (has_teamcopymapnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(31, this->teamcopymapnum(), target);
  }

  // optional uint32 realTimePKNum = 32;
  if (has_realtimepknum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(32, this->realtimepknum(), target);
  }

  // repeated .Role.stBattleProp battleProp = 33;
  for (int i = 0; i < this->battleprop_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        33, this->battleprop(i), target);
  }

  // optional bool gotFstRechargeReward = 34;
  if (has_gotfstrechargereward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(34, this->gotfstrechargereward(), target);
  }

  // optional uint32 teamCopymapResetNum = 35;
  if (has_teamcopymapresetnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(35, this->teamcopymapresetnum(), target);
  }

  // optional uint32 realTimeResetNum = 36;
  if (has_realtimeresetnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(36, this->realtimeresetnum(), target);
  }

  // optional bool gotFst10RechargeReward = 37;
  if (has_gotfst10rechargereward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(37, this->gotfst10rechargereward(), target);
  }

  // optional uint32 changeNameNum = 38;
  if (has_changenamenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(38, this->changenamenum(), target);
  }

  // optional uint32 integral = 39;
  if (has_integral()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(39, this->integral(), target);
  }

  // optional uint32 soulFire = 40;
  if (has_soulfire()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(40, this->soulfire(), target);
  }

  // optional uint32 glory = 41;
  if (has_glory()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(41, this->glory(), target);
  }

  // optional uint32 coupleId = 42;
  if (has_coupleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(42, this->coupleid(), target);
  }

  // optional uint32 lifeEssence = 43;
  if (has_lifeessence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(43, this->lifeessence(), target);
  }

  // optional uint32 guidCrystal = 44;
  if (has_guidcrystal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(44, this->guidcrystal(), target);
  }

  // optional bool isReceive = 45;
  if (has_isreceive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(45, this->isreceive(), target);
  }

  // optional uint32 photoID = 46;
  if (has_photoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(46, this->photoid(), target);
  }

  // optional uint32 trainSp = 47;
  if (has_trainsp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(47, this->trainsp(), target);
  }

  // optional uint32 guajiStart = 48;
  if (has_guajistart()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(48, this->guajistart(), target);
  }

  // optional uint32 guajiEnd = 49;
  if (has_guajiend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(49, this->guajiend(), target);
  }

  // optional bool isRobot = 50;
  if (has_isrobot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(50, this->isrobot(), target);
  }

  // optional uint32 guajiTodayCount = 51;
  if (has_guajitodaycount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(51, this->guajitodaycount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRoleMainData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 exp = 4;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
    }

    // optional uint32 goldCoin = 5;
    if (has_goldcoin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->goldcoin());
    }

    // optional uint32 pointCard = 6;
    if (has_pointcard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pointcard());
    }

    // optional uint32 curHP = 7;
    if (has_curhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curhp());
    }

    // optional uint32 curMP = 8;
    if (has_curmp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curmp());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 battlePower = 9;
    if (has_battlepower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battlepower());
    }

    // optional uint32 heishijiejing = 10;
    if (has_heishijiejing()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heishijiejing());
    }

    // optional uint32 reputaion = 11;
    if (has_reputaion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reputaion());
    }

    // optional uint32 honour = 12;
    if (has_honour()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->honour());
    }

    // optional uint32 braveVal = 13;
    if (has_braveval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->braveval());
    }

    // optional uint32 peakCertificate = 14;
    if (has_peakcertificate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->peakcertificate());
    }

    // optional uint32 hufu = 15;
    if (has_hufu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hufu());
    }

    // optional uint32 yuntie = 16;
    if (has_yuntie()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->yuntie());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 totalRecharge = 17;
    if (has_totalrecharge()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->totalrecharge());
    }

    // optional uint32 todayRecharge = 18;
    if (has_todayrecharge()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->todayrecharge());
    }

    // optional uint32 job = 19;
    if (has_job()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->job());
    }

    // optional uint32 sex = 20;
    if (has_sex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sex());
    }

    // optional uint32 sp = 21;
    if (has_sp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sp());
    }

    // optional uint32 lilian = 22;
    if (has_lilian()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lilian());
    }

    // optional uint32 totalConsume = 24;
    if (has_totalconsume()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->totalconsume());
    }

    // optional uint32 juexingNum = 25;
    if (has_juexingnum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->juexingnum());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional uint32 juexingExp = 26;
    if (has_juexingexp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->juexingexp());
    }

    // optional uint32 joinGuildRemainTime = 27;
    if (has_joinguildremaintime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->joinguildremaintime());
    }

    // optional uint32 headID = 28;
    if (has_headid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->headid());
    }

    // optional uint32 faceID = 29;
    if (has_faceid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->faceid());
    }

    // optional uint32 studyHeroSkillNum = 30;
    if (has_studyheroskillnum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->studyheroskillnum());
    }

    // optional uint32 teamCopyMapNum = 31;
    if (has_teamcopymapnum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teamcopymapnum());
    }

    // optional uint32 realTimePKNum = 32;
    if (has_realtimepknum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->realtimepknum());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional bool gotFstRechargeReward = 34;
    if (has_gotfstrechargereward()) {
      total_size += 2 + 1;
    }

    // optional uint32 teamCopymapResetNum = 35;
    if (has_teamcopymapresetnum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teamcopymapresetnum());
    }

    // optional uint32 realTimeResetNum = 36;
    if (has_realtimeresetnum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->realtimeresetnum());
    }

    // optional bool gotFst10RechargeReward = 37;
    if (has_gotfst10rechargereward()) {
      total_size += 2 + 1;
    }

    // optional uint32 changeNameNum = 38;
    if (has_changenamenum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->changenamenum());
    }

    // optional uint32 integral = 39;
    if (has_integral()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->integral());
    }

    // optional uint32 soulFire = 40;
    if (has_soulfire()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->soulfire());
    }

    // optional uint32 glory = 41;
    if (has_glory()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->glory());
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional uint32 coupleId = 42;
    if (has_coupleid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->coupleid());
    }

    // optional uint32 lifeEssence = 43;
    if (has_lifeessence()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lifeessence());
    }

    // optional uint32 guidCrystal = 44;
    if (has_guidcrystal()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guidcrystal());
    }

    // optional bool isReceive = 45;
    if (has_isreceive()) {
      total_size += 2 + 1;
    }

    // optional uint32 photoID = 46;
    if (has_photoid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->photoid());
    }

    // optional uint32 trainSp = 47;
    if (has_trainsp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->trainsp());
    }

    // optional uint32 guajiStart = 48;
    if (has_guajistart()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guajistart());
    }

    // optional uint32 guajiEnd = 49;
    if (has_guajiend()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guajiend());
    }

  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // optional bool isRobot = 50;
    if (has_isrobot()) {
      total_size += 2 + 1;
    }

    // optional uint32 guajiTodayCount = 51;
    if (has_guajitodaycount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guajitodaycount());
    }

  }
  // repeated .Role.stBattleProp battleProp = 33;
  total_size += 2 * this->battleprop_size();
  for (int i = 0; i < this->battleprop_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->battleprop(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRoleMainData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRoleMainData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRoleMainData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRoleMainData::MergeFrom(const stRoleMainData& from) {
  GOOGLE_CHECK_NE(&from, this);
  battleprop_.MergeFrom(from.battleprop_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_goldcoin()) {
      set_goldcoin(from.goldcoin());
    }
    if (from.has_pointcard()) {
      set_pointcard(from.pointcard());
    }
    if (from.has_curhp()) {
      set_curhp(from.curhp());
    }
    if (from.has_curmp()) {
      set_curmp(from.curmp());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_battlepower()) {
      set_battlepower(from.battlepower());
    }
    if (from.has_heishijiejing()) {
      set_heishijiejing(from.heishijiejing());
    }
    if (from.has_reputaion()) {
      set_reputaion(from.reputaion());
    }
    if (from.has_honour()) {
      set_honour(from.honour());
    }
    if (from.has_braveval()) {
      set_braveval(from.braveval());
    }
    if (from.has_peakcertificate()) {
      set_peakcertificate(from.peakcertificate());
    }
    if (from.has_hufu()) {
      set_hufu(from.hufu());
    }
    if (from.has_yuntie()) {
      set_yuntie(from.yuntie());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_totalrecharge()) {
      set_totalrecharge(from.totalrecharge());
    }
    if (from.has_todayrecharge()) {
      set_todayrecharge(from.todayrecharge());
    }
    if (from.has_job()) {
      set_job(from.job());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_sp()) {
      set_sp(from.sp());
    }
    if (from.has_lilian()) {
      set_lilian(from.lilian());
    }
    if (from.has_totalconsume()) {
      set_totalconsume(from.totalconsume());
    }
    if (from.has_juexingnum()) {
      set_juexingnum(from.juexingnum());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_juexingexp()) {
      set_juexingexp(from.juexingexp());
    }
    if (from.has_joinguildremaintime()) {
      set_joinguildremaintime(from.joinguildremaintime());
    }
    if (from.has_headid()) {
      set_headid(from.headid());
    }
    if (from.has_faceid()) {
      set_faceid(from.faceid());
    }
    if (from.has_studyheroskillnum()) {
      set_studyheroskillnum(from.studyheroskillnum());
    }
    if (from.has_teamcopymapnum()) {
      set_teamcopymapnum(from.teamcopymapnum());
    }
    if (from.has_realtimepknum()) {
      set_realtimepknum(from.realtimepknum());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_gotfstrechargereward()) {
      set_gotfstrechargereward(from.gotfstrechargereward());
    }
    if (from.has_teamcopymapresetnum()) {
      set_teamcopymapresetnum(from.teamcopymapresetnum());
    }
    if (from.has_realtimeresetnum()) {
      set_realtimeresetnum(from.realtimeresetnum());
    }
    if (from.has_gotfst10rechargereward()) {
      set_gotfst10rechargereward(from.gotfst10rechargereward());
    }
    if (from.has_changenamenum()) {
      set_changenamenum(from.changenamenum());
    }
    if (from.has_integral()) {
      set_integral(from.integral());
    }
    if (from.has_soulfire()) {
      set_soulfire(from.soulfire());
    }
    if (from.has_glory()) {
      set_glory(from.glory());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_coupleid()) {
      set_coupleid(from.coupleid());
    }
    if (from.has_lifeessence()) {
      set_lifeessence(from.lifeessence());
    }
    if (from.has_guidcrystal()) {
      set_guidcrystal(from.guidcrystal());
    }
    if (from.has_isreceive()) {
      set_isreceive(from.isreceive());
    }
    if (from.has_photoid()) {
      set_photoid(from.photoid());
    }
    if (from.has_trainsp()) {
      set_trainsp(from.trainsp());
    }
    if (from.has_guajistart()) {
      set_guajistart(from.guajistart());
    }
    if (from.has_guajiend()) {
      set_guajiend(from.guajiend());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_isrobot()) {
      set_isrobot(from.isrobot());
    }
    if (from.has_guajitodaycount()) {
      set_guajitodaycount(from.guajitodaycount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRoleMainData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRoleMainData::CopyFrom(const stRoleMainData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRoleMainData::IsInitialized() const {

  return true;
}

void stRoleMainData::Swap(stRoleMainData* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(name_, other->name_);
    std::swap(level_, other->level_);
    std::swap(exp_, other->exp_);
    std::swap(goldcoin_, other->goldcoin_);
    std::swap(pointcard_, other->pointcard_);
    std::swap(curhp_, other->curhp_);
    std::swap(curmp_, other->curmp_);
    std::swap(battlepower_, other->battlepower_);
    std::swap(heishijiejing_, other->heishijiejing_);
    std::swap(reputaion_, other->reputaion_);
    std::swap(honour_, other->honour_);
    std::swap(braveval_, other->braveval_);
    std::swap(peakcertificate_, other->peakcertificate_);
    std::swap(hufu_, other->hufu_);
    std::swap(yuntie_, other->yuntie_);
    std::swap(totalrecharge_, other->totalrecharge_);
    std::swap(todayrecharge_, other->todayrecharge_);
    std::swap(job_, other->job_);
    std::swap(sex_, other->sex_);
    std::swap(sp_, other->sp_);
    std::swap(lilian_, other->lilian_);
    std::swap(totalconsume_, other->totalconsume_);
    std::swap(juexingnum_, other->juexingnum_);
    std::swap(juexingexp_, other->juexingexp_);
    std::swap(joinguildremaintime_, other->joinguildremaintime_);
    std::swap(headid_, other->headid_);
    std::swap(faceid_, other->faceid_);
    std::swap(studyheroskillnum_, other->studyheroskillnum_);
    std::swap(teamcopymapnum_, other->teamcopymapnum_);
    std::swap(realtimepknum_, other->realtimepknum_);
    battleprop_.Swap(&other->battleprop_);
    std::swap(gotfstrechargereward_, other->gotfstrechargereward_);
    std::swap(teamcopymapresetnum_, other->teamcopymapresetnum_);
    std::swap(realtimeresetnum_, other->realtimeresetnum_);
    std::swap(gotfst10rechargereward_, other->gotfst10rechargereward_);
    std::swap(changenamenum_, other->changenamenum_);
    std::swap(integral_, other->integral_);
    std::swap(soulfire_, other->soulfire_);
    std::swap(glory_, other->glory_);
    std::swap(coupleid_, other->coupleid_);
    std::swap(lifeessence_, other->lifeessence_);
    std::swap(guidcrystal_, other->guidcrystal_);
    std::swap(isreceive_, other->isreceive_);
    std::swap(photoid_, other->photoid_);
    std::swap(trainsp_, other->trainsp_);
    std::swap(guajistart_, other->guajistart_);
    std::swap(guajiend_, other->guajiend_);
    std::swap(isrobot_, other->isrobot_);
    std::swap(guajitodaycount_, other->guajitodaycount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRoleMainData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRoleMainData_descriptor_;
  metadata.reflection = stRoleMainData_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stInitMainData_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stInitMainData_ProtoModID_descriptor_;
}
bool stInitMainData_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stInitMainData_ProtoModID stInitMainData::ModID;
const stInitMainData_ProtoModID stInitMainData::ProtoModID_MIN;
const stInitMainData_ProtoModID stInitMainData::ProtoModID_MAX;
const int stInitMainData::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stInitMainData_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stInitMainData_ProtoFunID_descriptor_;
}
bool stInitMainData_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stInitMainData_ProtoFunID stInitMainData::FunID;
const stInitMainData_ProtoFunID stInitMainData::ProtoFunID_MIN;
const stInitMainData_ProtoFunID stInitMainData::ProtoFunID_MAX;
const int stInitMainData::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stInitMainData::kDataFieldNumber;
#endif  // !_MSC_VER

stInitMainData::stInitMainData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stInitMainData::InitAsDefaultInstance() {
  data_ = const_cast< ::Role::stRoleMainData*>(&::Role::stRoleMainData::default_instance());
}

stInitMainData::stInitMainData(const stInitMainData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stInitMainData::SharedCtor() {
  _cached_size_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stInitMainData::~stInitMainData() {
  SharedDtor();
}

void stInitMainData::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void stInitMainData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stInitMainData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stInitMainData_descriptor_;
}

const stInitMainData& stInitMainData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stInitMainData* stInitMainData::default_instance_ = NULL;

stInitMainData* stInitMainData::New() const {
  return new stInitMainData;
}

void stInitMainData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_data()) {
      if (data_ != NULL) data_->::Role::stRoleMainData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stInitMainData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Role.stRoleMainData data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stInitMainData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Role.stRoleMainData data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stInitMainData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Role.stRoleMainData data = 1;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stInitMainData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Role.stRoleMainData data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stInitMainData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stInitMainData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stInitMainData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stInitMainData::MergeFrom(const stInitMainData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      mutable_data()->::Role::stRoleMainData::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stInitMainData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stInitMainData::CopyFrom(const stInitMainData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stInitMainData::IsInitialized() const {

  return true;
}

void stInitMainData::Swap(stInitMainData* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stInitMainData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stInitMainData_descriptor_;
  metadata.reflection = stInitMainData_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ReqCreateRole_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqCreateRole_ProtoModID_descriptor_;
}
bool ReqCreateRole_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ReqCreateRole_ProtoModID ReqCreateRole::ModID;
const ReqCreateRole_ProtoModID ReqCreateRole::ProtoModID_MIN;
const ReqCreateRole_ProtoModID ReqCreateRole::ProtoModID_MAX;
const int ReqCreateRole::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* ReqCreateRole_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqCreateRole_ProtoFunID_descriptor_;
}
bool ReqCreateRole_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ReqCreateRole_ProtoFunID ReqCreateRole::FunID;
const ReqCreateRole_ProtoFunID ReqCreateRole::ProtoFunID_MIN;
const ReqCreateRole_ProtoFunID ReqCreateRole::ProtoFunID_MAX;
const int ReqCreateRole::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ReqCreateRole::kNameFieldNumber;
const int ReqCreateRole::kJobFieldNumber;
const int ReqCreateRole::kSexFieldNumber;
const int ReqCreateRole::kHeadIDFieldNumber;
const int ReqCreateRole::kFaceIDFieldNumber;
const int ReqCreateRole::kOpIDFieldNumber;
const int ReqCreateRole::kServerIDFieldNumber;
#endif  // !_MSC_VER

ReqCreateRole::ReqCreateRole()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqCreateRole::InitAsDefaultInstance() {
}

ReqCreateRole::ReqCreateRole(const ReqCreateRole& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqCreateRole::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  job_ = 0u;
  sex_ = 0u;
  headid_ = 0u;
  faceid_ = 0u;
  opid_ = 0u;
  serverid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqCreateRole::~ReqCreateRole() {
  SharedDtor();
}

void ReqCreateRole::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void ReqCreateRole::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqCreateRole::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqCreateRole_descriptor_;
}

const ReqCreateRole& ReqCreateRole::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

ReqCreateRole* ReqCreateRole::default_instance_ = NULL;

ReqCreateRole* ReqCreateRole::New() const {
  return new ReqCreateRole;
}

void ReqCreateRole::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    job_ = 0u;
    sex_ = 0u;
    headid_ = 0u;
    faceid_ = 0u;
    opid_ = 0u;
    serverid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqCreateRole::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_job;
        break;
      }

      // optional uint32 job = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &job_)));
          set_has_job();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sex;
        break;
      }

      // optional uint32 sex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_headID;
        break;
      }

      // optional uint32 headID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_headID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &headid_)));
          set_has_headid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_faceID;
        break;
      }

      // optional uint32 faceID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_faceID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &faceid_)));
          set_has_faceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_opID;
        break;
      }

      // optional uint32 opID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opid_)));
          set_has_opid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_serverID;
        break;
      }

      // optional uint32 serverID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqCreateRole::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional uint32 job = 2;
  if (has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->job(), output);
  }

  // optional uint32 sex = 3;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sex(), output);
  }

  // optional uint32 headID = 4;
  if (has_headid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->headid(), output);
  }

  // optional uint32 faceID = 5;
  if (has_faceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->faceid(), output);
  }

  // optional uint32 opID = 6;
  if (has_opid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->opid(), output);
  }

  // optional uint32 serverID = 7;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->serverid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqCreateRole::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional uint32 job = 2;
  if (has_job()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->job(), target);
  }

  // optional uint32 sex = 3;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->sex(), target);
  }

  // optional uint32 headID = 4;
  if (has_headid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->headid(), target);
  }

  // optional uint32 faceID = 5;
  if (has_faceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->faceid(), target);
  }

  // optional uint32 opID = 6;
  if (has_opid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->opid(), target);
  }

  // optional uint32 serverID = 7;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->serverid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqCreateRole::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 job = 2;
    if (has_job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->job());
    }

    // optional uint32 sex = 3;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sex());
    }

    // optional uint32 headID = 4;
    if (has_headid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->headid());
    }

    // optional uint32 faceID = 5;
    if (has_faceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->faceid());
    }

    // optional uint32 opID = 6;
    if (has_opid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->opid());
    }

    // optional uint32 serverID = 7;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqCreateRole::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqCreateRole* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqCreateRole*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqCreateRole::MergeFrom(const ReqCreateRole& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_job()) {
      set_job(from.job());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_headid()) {
      set_headid(from.headid());
    }
    if (from.has_faceid()) {
      set_faceid(from.faceid());
    }
    if (from.has_opid()) {
      set_opid(from.opid());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqCreateRole::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqCreateRole::CopyFrom(const ReqCreateRole& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqCreateRole::IsInitialized() const {

  return true;
}

void ReqCreateRole::Swap(ReqCreateRole* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(job_, other->job_);
    std::swap(sex_, other->sex_);
    std::swap(headid_, other->headid_);
    std::swap(faceid_, other->faceid_);
    std::swap(opid_, other->opid_);
    std::swap(serverid_, other->serverid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqCreateRole::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqCreateRole_descriptor_;
  metadata.reflection = ReqCreateRole_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CreateRoleResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateRoleResult_ProtoModID_descriptor_;
}
bool CreateRoleResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CreateRoleResult_ProtoModID CreateRoleResult::ModID;
const CreateRoleResult_ProtoModID CreateRoleResult::ProtoModID_MIN;
const CreateRoleResult_ProtoModID CreateRoleResult::ProtoModID_MAX;
const int CreateRoleResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* CreateRoleResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateRoleResult_ProtoFunID_descriptor_;
}
bool CreateRoleResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CreateRoleResult_ProtoFunID CreateRoleResult::FunID;
const CreateRoleResult_ProtoFunID CreateRoleResult::ProtoFunID_MIN;
const CreateRoleResult_ProtoFunID CreateRoleResult::ProtoFunID_MAX;
const int CreateRoleResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CreateRoleResult::kRetCodeFieldNumber;
const int CreateRoleResult::kCharIDFieldNumber;
const int CreateRoleResult::kNameFieldNumber;
const int CreateRoleResult::kLevelFieldNumber;
const int CreateRoleResult::kJobFieldNumber;
const int CreateRoleResult::kSexFieldNumber;
const int CreateRoleResult::kCreateTimeFieldNumber;
#endif  // !_MSC_VER

CreateRoleResult::CreateRoleResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreateRoleResult::InitAsDefaultInstance() {
}

CreateRoleResult::CreateRoleResult(const CreateRoleResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreateRoleResult::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0u;
  charid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0u;
  job_ = 0u;
  sex_ = 0u;
  createtime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateRoleResult::~CreateRoleResult() {
  SharedDtor();
}

void CreateRoleResult::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void CreateRoleResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateRoleResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateRoleResult_descriptor_;
}

const CreateRoleResult& CreateRoleResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

CreateRoleResult* CreateRoleResult::default_instance_ = NULL;

CreateRoleResult* CreateRoleResult::New() const {
  return new CreateRoleResult;
}

void CreateRoleResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    retcode_ = 0u;
    charid_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    level_ = 0u;
    job_ = 0u;
    sex_ = 0u;
    createtime_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateRoleResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 retCode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_charID;
        break;
      }

      // optional uint32 charID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }

      // optional uint32 level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_job;
        break;
      }

      // optional uint32 job = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &job_)));
          set_has_job();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_sex;
        break;
      }

      // optional uint32 sex = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_createTime;
        break;
      }

      // optional uint32 createTime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_createTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreateRoleResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 retCode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->retcode(), output);
  }

  // optional uint32 charID = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->charid(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // optional uint32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->level(), output);
  }

  // optional uint32 job = 5;
  if (has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->job(), output);
  }

  // optional uint32 sex = 6;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->sex(), output);
  }

  // optional uint32 createTime = 7;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->createtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreateRoleResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 retCode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->retcode(), target);
  }

  // optional uint32 charID = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->charid(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional uint32 level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->level(), target);
  }

  // optional uint32 job = 5;
  if (has_job()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->job(), target);
  }

  // optional uint32 sex = 6;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->sex(), target);
  }

  // optional uint32 createTime = 7;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->createtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreateRoleResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 retCode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->retcode());
    }

    // optional uint32 charID = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 job = 5;
    if (has_job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->job());
    }

    // optional uint32 sex = 6;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sex());
    }

    // optional uint32 createTime = 7;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->createtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateRoleResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateRoleResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateRoleResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateRoleResult::MergeFrom(const CreateRoleResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_job()) {
      set_job(from.job());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateRoleResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateRoleResult::CopyFrom(const CreateRoleResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateRoleResult::IsInitialized() const {

  return true;
}

void CreateRoleResult::Swap(CreateRoleResult* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(charid_, other->charid_);
    std::swap(name_, other->name_);
    std::swap(level_, other->level_);
    std::swap(job_, other->job_);
    std::swap(sex_, other->sex_);
    std::swap(createtime_, other->createtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateRoleResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateRoleResult_descriptor_;
  metadata.reflection = CreateRoleResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stSynSnapData::kCharIDFieldNumber;
const int stSynSnapData::kNameFieldNumber;
const int stSynSnapData::kLevelFieldNumber;
const int stSynSnapData::kJobFieldNumber;
const int stSynSnapData::kSexFieldNumber;
#endif  // !_MSC_VER

stSynSnapData::stSynSnapData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSynSnapData::InitAsDefaultInstance() {
}

stSynSnapData::stSynSnapData(const stSynSnapData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSynSnapData::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0u;
  job_ = 0u;
  sex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSynSnapData::~stSynSnapData() {
  SharedDtor();
}

void stSynSnapData::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void stSynSnapData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSynSnapData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynSnapData_descriptor_;
}

const stSynSnapData& stSynSnapData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stSynSnapData* stSynSnapData::default_instance_ = NULL;

stSynSnapData* stSynSnapData::New() const {
  return new stSynSnapData;
}

void stSynSnapData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    level_ = 0u;
    job_ = 0u;
    sex_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSynSnapData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // optional uint32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_job;
        break;
      }

      // optional uint32 job = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &job_)));
          set_has_job();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_sex;
        break;
      }

      // optional uint32 sex = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSynSnapData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional uint32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->level(), output);
  }

  // optional uint32 job = 4;
  if (has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->job(), output);
  }

  // optional uint32 sex = 5;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->sex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSynSnapData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional uint32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->level(), target);
  }

  // optional uint32 job = 4;
  if (has_job()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->job(), target);
  }

  // optional uint32 sex = 5;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->sex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSynSnapData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 job = 4;
    if (has_job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->job());
    }

    // optional uint32 sex = 5;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSynSnapData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSynSnapData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSynSnapData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSynSnapData::MergeFrom(const stSynSnapData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_job()) {
      set_job(from.job());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSynSnapData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSynSnapData::CopyFrom(const stSynSnapData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSynSnapData::IsInitialized() const {

  return true;
}

void stSynSnapData::Swap(stSynSnapData* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(name_, other->name_);
    std::swap(level_, other->level_);
    std::swap(job_, other->job_);
    std::swap(sex_, other->sex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSynSnapData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSynSnapData_descriptor_;
  metadata.reflection = stSynSnapData_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* RefreshSnapData_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RefreshSnapData_ProtoModID_descriptor_;
}
bool RefreshSnapData_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const RefreshSnapData_ProtoModID RefreshSnapData::ModID;
const RefreshSnapData_ProtoModID RefreshSnapData::ProtoModID_MIN;
const RefreshSnapData_ProtoModID RefreshSnapData::ProtoModID_MAX;
const int RefreshSnapData::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* RefreshSnapData_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RefreshSnapData_ProtoFunID_descriptor_;
}
bool RefreshSnapData_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const RefreshSnapData_ProtoFunID RefreshSnapData::FunID;
const RefreshSnapData_ProtoFunID RefreshSnapData::ProtoFunID_MIN;
const RefreshSnapData_ProtoFunID RefreshSnapData::ProtoFunID_MAX;
const int RefreshSnapData::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int RefreshSnapData::kDataFieldNumber;
const int RefreshSnapData::kFlagFieldNumber;
#endif  // !_MSC_VER

RefreshSnapData::RefreshSnapData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RefreshSnapData::InitAsDefaultInstance() {
}

RefreshSnapData::RefreshSnapData(const RefreshSnapData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RefreshSnapData::SharedCtor() {
  _cached_size_ = 0;
  flag_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RefreshSnapData::~RefreshSnapData() {
  SharedDtor();
}

void RefreshSnapData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RefreshSnapData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RefreshSnapData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RefreshSnapData_descriptor_;
}

const RefreshSnapData& RefreshSnapData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

RefreshSnapData* RefreshSnapData::default_instance_ = NULL;

RefreshSnapData* RefreshSnapData::New() const {
  return new RefreshSnapData;
}

void RefreshSnapData::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    flag_ = 0u;
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RefreshSnapData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Role.stSynSnapData data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_data;
        if (input->ExpectTag(16)) goto parse_flag;
        break;
      }

      // optional uint32 flag = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RefreshSnapData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Role.stSynSnapData data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }

  // optional uint32 flag = 2;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->flag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RefreshSnapData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Role.stSynSnapData data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(i), target);
  }

  // optional uint32 flag = 2;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->flag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RefreshSnapData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 flag = 2;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flag());
    }

  }
  // repeated .Role.stSynSnapData data = 1;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RefreshSnapData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RefreshSnapData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RefreshSnapData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RefreshSnapData::MergeFrom(const RefreshSnapData& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_flag()) {
      set_flag(from.flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RefreshSnapData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RefreshSnapData::CopyFrom(const RefreshSnapData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RefreshSnapData::IsInitialized() const {

  return true;
}

void RefreshSnapData::Swap(RefreshSnapData* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(flag_, other->flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RefreshSnapData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RefreshSnapData_descriptor_;
  metadata.reflection = RefreshSnapData_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ReqEnterGame_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqEnterGame_ProtoModID_descriptor_;
}
bool ReqEnterGame_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ReqEnterGame_ProtoModID ReqEnterGame::ModID;
const ReqEnterGame_ProtoModID ReqEnterGame::ProtoModID_MIN;
const ReqEnterGame_ProtoModID ReqEnterGame::ProtoModID_MAX;
const int ReqEnterGame::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* ReqEnterGame_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqEnterGame_ProtoFunID_descriptor_;
}
bool ReqEnterGame_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ReqEnterGame_ProtoFunID ReqEnterGame::FunID;
const ReqEnterGame_ProtoFunID ReqEnterGame::ProtoFunID_MIN;
const ReqEnterGame_ProtoFunID ReqEnterGame::ProtoFunID_MAX;
const int ReqEnterGame::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ReqEnterGame::kCharIDFieldNumber;
#endif  // !_MSC_VER

ReqEnterGame::ReqEnterGame()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqEnterGame::InitAsDefaultInstance() {
}

ReqEnterGame::ReqEnterGame(const ReqEnterGame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqEnterGame::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqEnterGame::~ReqEnterGame() {
  SharedDtor();
}

void ReqEnterGame::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqEnterGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqEnterGame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqEnterGame_descriptor_;
}

const ReqEnterGame& ReqEnterGame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

ReqEnterGame* ReqEnterGame::default_instance_ = NULL;

ReqEnterGame* ReqEnterGame::New() const {
  return new ReqEnterGame;
}

void ReqEnterGame::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqEnterGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqEnterGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqEnterGame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqEnterGame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqEnterGame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqEnterGame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqEnterGame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqEnterGame::MergeFrom(const ReqEnterGame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqEnterGame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqEnterGame::CopyFrom(const ReqEnterGame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqEnterGame::IsInitialized() const {

  return true;
}

void ReqEnterGame::Swap(ReqEnterGame* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqEnterGame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqEnterGame_descriptor_;
  metadata.reflection = ReqEnterGame_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stSynGoldCoin_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynGoldCoin_ProtoModID_descriptor_;
}
bool stSynGoldCoin_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynGoldCoin_ProtoModID stSynGoldCoin::ModID;
const stSynGoldCoin_ProtoModID stSynGoldCoin::ProtoModID_MIN;
const stSynGoldCoin_ProtoModID stSynGoldCoin::ProtoModID_MAX;
const int stSynGoldCoin::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSynGoldCoin_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynGoldCoin_ProtoFunID_descriptor_;
}
bool stSynGoldCoin_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynGoldCoin_ProtoFunID stSynGoldCoin::FunID;
const stSynGoldCoin_ProtoFunID stSynGoldCoin::ProtoFunID_MIN;
const stSynGoldCoin_ProtoFunID stSynGoldCoin::ProtoFunID_MAX;
const int stSynGoldCoin::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stSynGoldCoin::kNumFieldNumber;
#endif  // !_MSC_VER

stSynGoldCoin::stSynGoldCoin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSynGoldCoin::InitAsDefaultInstance() {
}

stSynGoldCoin::stSynGoldCoin(const stSynGoldCoin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSynGoldCoin::SharedCtor() {
  _cached_size_ = 0;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSynGoldCoin::~stSynGoldCoin() {
  SharedDtor();
}

void stSynGoldCoin::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stSynGoldCoin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSynGoldCoin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynGoldCoin_descriptor_;
}

const stSynGoldCoin& stSynGoldCoin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stSynGoldCoin* stSynGoldCoin::default_instance_ = NULL;

stSynGoldCoin* stSynGoldCoin::New() const {
  return new stSynGoldCoin;
}

void stSynGoldCoin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSynGoldCoin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSynGoldCoin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 num = 1;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSynGoldCoin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 num = 1;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSynGoldCoin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 num = 1;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSynGoldCoin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSynGoldCoin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSynGoldCoin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSynGoldCoin::MergeFrom(const stSynGoldCoin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSynGoldCoin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSynGoldCoin::CopyFrom(const stSynGoldCoin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSynGoldCoin::IsInitialized() const {

  return true;
}

void stSynGoldCoin::Swap(stSynGoldCoin* other) {
  if (other != this) {
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSynGoldCoin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSynGoldCoin_descriptor_;
  metadata.reflection = stSynGoldCoin_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stSynPointCard_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynPointCard_ProtoModID_descriptor_;
}
bool stSynPointCard_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynPointCard_ProtoModID stSynPointCard::ModID;
const stSynPointCard_ProtoModID stSynPointCard::ProtoModID_MIN;
const stSynPointCard_ProtoModID stSynPointCard::ProtoModID_MAX;
const int stSynPointCard::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSynPointCard_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynPointCard_ProtoFunID_descriptor_;
}
bool stSynPointCard_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynPointCard_ProtoFunID stSynPointCard::FunID;
const stSynPointCard_ProtoFunID stSynPointCard::ProtoFunID_MIN;
const stSynPointCard_ProtoFunID stSynPointCard::ProtoFunID_MAX;
const int stSynPointCard::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stSynPointCard::kNumFieldNumber;
#endif  // !_MSC_VER

stSynPointCard::stSynPointCard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSynPointCard::InitAsDefaultInstance() {
}

stSynPointCard::stSynPointCard(const stSynPointCard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSynPointCard::SharedCtor() {
  _cached_size_ = 0;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSynPointCard::~stSynPointCard() {
  SharedDtor();
}

void stSynPointCard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stSynPointCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSynPointCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynPointCard_descriptor_;
}

const stSynPointCard& stSynPointCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stSynPointCard* stSynPointCard::default_instance_ = NULL;

stSynPointCard* stSynPointCard::New() const {
  return new stSynPointCard;
}

void stSynPointCard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSynPointCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSynPointCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 num = 1;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSynPointCard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 num = 1;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSynPointCard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 num = 1;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSynPointCard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSynPointCard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSynPointCard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSynPointCard::MergeFrom(const stSynPointCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSynPointCard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSynPointCard::CopyFrom(const stSynPointCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSynPointCard::IsInitialized() const {

  return true;
}

void stSynPointCard::Swap(stSynPointCard* other) {
  if (other != this) {
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSynPointCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSynPointCard_descriptor_;
  metadata.reflection = stSynPointCard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stBagPos::kBagTypeFieldNumber;
const int stBagPos::kPosFieldNumber;
#endif  // !_MSC_VER

stBagPos::stBagPos()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stBagPos::InitAsDefaultInstance() {
}

stBagPos::stBagPos(const stBagPos& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stBagPos::SharedCtor() {
  _cached_size_ = 0;
  bagtype_ = 0u;
  pos_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stBagPos::~stBagPos() {
  SharedDtor();
}

void stBagPos::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stBagPos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stBagPos::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stBagPos_descriptor_;
}

const stBagPos& stBagPos::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stBagPos* stBagPos::default_instance_ = NULL;

stBagPos* stBagPos::New() const {
  return new stBagPos;
}

void stBagPos::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bagtype_ = 0u;
    pos_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stBagPos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 bagType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bagtype_)));
          set_has_bagtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pos;
        break;
      }

      // optional uint32 pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stBagPos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 bagType = 1;
  if (has_bagtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bagtype(), output);
  }

  // optional uint32 pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stBagPos::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 bagType = 1;
  if (has_bagtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bagtype(), target);
  }

  // optional uint32 pos = 2;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stBagPos::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 bagType = 1;
    if (has_bagtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bagtype());
    }

    // optional uint32 pos = 2;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stBagPos::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stBagPos* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stBagPos*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stBagPos::MergeFrom(const stBagPos& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bagtype()) {
      set_bagtype(from.bagtype());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stBagPos::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stBagPos::CopyFrom(const stBagPos& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stBagPos::IsInitialized() const {

  return true;
}

void stBagPos::Swap(stBagPos* other) {
  if (other != this) {
    std::swap(bagtype_, other->bagtype_);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stBagPos::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stBagPos_descriptor_;
  metadata.reflection = stBagPos_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stItemSkillInfo::kSkillIDFieldNumber;
const int stItemSkillInfo::kSkillLvFieldNumber;
#endif  // !_MSC_VER

stItemSkillInfo::stItemSkillInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stItemSkillInfo::InitAsDefaultInstance() {
}

stItemSkillInfo::stItemSkillInfo(const stItemSkillInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stItemSkillInfo::SharedCtor() {
  _cached_size_ = 0;
  skillid_ = 0u;
  skilllv_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stItemSkillInfo::~stItemSkillInfo() {
  SharedDtor();
}

void stItemSkillInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stItemSkillInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stItemSkillInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stItemSkillInfo_descriptor_;
}

const stItemSkillInfo& stItemSkillInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stItemSkillInfo* stItemSkillInfo::default_instance_ = NULL;

stItemSkillInfo* stItemSkillInfo::New() const {
  return new stItemSkillInfo;
}

void stItemSkillInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skillid_ = 0u;
    skilllv_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stItemSkillInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 skillID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skillLv;
        break;
      }

      // optional uint32 skillLv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skilllv_)));
          set_has_skilllv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stItemSkillInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 skillID = 1;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->skillid(), output);
  }

  // optional uint32 skillLv = 2;
  if (has_skilllv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->skilllv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stItemSkillInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 skillID = 1;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->skillid(), target);
  }

  // optional uint32 skillLv = 2;
  if (has_skilllv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->skilllv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stItemSkillInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 skillID = 1;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillid());
    }

    // optional uint32 skillLv = 2;
    if (has_skilllv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skilllv());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stItemSkillInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stItemSkillInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stItemSkillInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stItemSkillInfo::MergeFrom(const stItemSkillInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_skilllv()) {
      set_skilllv(from.skilllv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stItemSkillInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stItemSkillInfo::CopyFrom(const stItemSkillInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stItemSkillInfo::IsInitialized() const {

  return true;
}

void stItemSkillInfo::Swap(stItemSkillInfo* other) {
  if (other != this) {
    std::swap(skillid_, other->skillid_);
    std::swap(skilllv_, other->skilllv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stItemSkillInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stItemSkillInfo_descriptor_;
  metadata.reflection = stItemSkillInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stRaiseSkillProp::kSkillIDFieldNumber;
const int stRaiseSkillProp::kRaiseTypeFieldNumber;
const int stRaiseSkillProp::kRaiseValueFieldNumber;
#endif  // !_MSC_VER

stRaiseSkillProp::stRaiseSkillProp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRaiseSkillProp::InitAsDefaultInstance() {
}

stRaiseSkillProp::stRaiseSkillProp(const stRaiseSkillProp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRaiseSkillProp::SharedCtor() {
  _cached_size_ = 0;
  skillid_ = 0u;
  raisetype_ = 0u;
  raisevalue_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRaiseSkillProp::~stRaiseSkillProp() {
  SharedDtor();
}

void stRaiseSkillProp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRaiseSkillProp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRaiseSkillProp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRaiseSkillProp_descriptor_;
}

const stRaiseSkillProp& stRaiseSkillProp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stRaiseSkillProp* stRaiseSkillProp::default_instance_ = NULL;

stRaiseSkillProp* stRaiseSkillProp::New() const {
  return new stRaiseSkillProp;
}

void stRaiseSkillProp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skillid_ = 0u;
    raisetype_ = 0u;
    raisevalue_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRaiseSkillProp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 skillID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_raiseType;
        break;
      }

      // optional uint32 raiseType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_raiseType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &raisetype_)));
          set_has_raisetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_raiseValue;
        break;
      }

      // optional uint32 raiseValue = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_raiseValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &raisevalue_)));
          set_has_raisevalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRaiseSkillProp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 skillID = 1;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->skillid(), output);
  }

  // optional uint32 raiseType = 2;
  if (has_raisetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->raisetype(), output);
  }

  // optional uint32 raiseValue = 3;
  if (has_raisevalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->raisevalue(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRaiseSkillProp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 skillID = 1;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->skillid(), target);
  }

  // optional uint32 raiseType = 2;
  if (has_raisetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->raisetype(), target);
  }

  // optional uint32 raiseValue = 3;
  if (has_raisevalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->raisevalue(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRaiseSkillProp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 skillID = 1;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillid());
    }

    // optional uint32 raiseType = 2;
    if (has_raisetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->raisetype());
    }

    // optional uint32 raiseValue = 3;
    if (has_raisevalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->raisevalue());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRaiseSkillProp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRaiseSkillProp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRaiseSkillProp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRaiseSkillProp::MergeFrom(const stRaiseSkillProp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_raisetype()) {
      set_raisetype(from.raisetype());
    }
    if (from.has_raisevalue()) {
      set_raisevalue(from.raisevalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRaiseSkillProp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRaiseSkillProp::CopyFrom(const stRaiseSkillProp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRaiseSkillProp::IsInitialized() const {

  return true;
}

void stRaiseSkillProp::Swap(stRaiseSkillProp* other) {
  if (other != this) {
    std::swap(skillid_, other->skillid_);
    std::swap(raisetype_, other->raisetype_);
    std::swap(raisevalue_, other->raisevalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRaiseSkillProp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRaiseSkillProp_descriptor_;
  metadata.reflection = stRaiseSkillProp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stEnchantInfo::kColorFieldNumber;
const int stEnchantInfo::kLockedFieldNumber;
const int stEnchantInfo::kPropTypeFieldNumber;
const int stEnchantInfo::kPropValFieldNumber;
const int stEnchantInfo::kIndexFieldNumber;
#endif  // !_MSC_VER

stEnchantInfo::stEnchantInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stEnchantInfo::InitAsDefaultInstance() {
}

stEnchantInfo::stEnchantInfo(const stEnchantInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stEnchantInfo::SharedCtor() {
  _cached_size_ = 0;
  color_ = 0u;
  locked_ = 0u;
  proptype_ = 0u;
  propval_ = 0u;
  index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stEnchantInfo::~stEnchantInfo() {
  SharedDtor();
}

void stEnchantInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stEnchantInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stEnchantInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stEnchantInfo_descriptor_;
}

const stEnchantInfo& stEnchantInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stEnchantInfo* stEnchantInfo::default_instance_ = NULL;

stEnchantInfo* stEnchantInfo::New() const {
  return new stEnchantInfo;
}

void stEnchantInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    color_ = 0u;
    locked_ = 0u;
    proptype_ = 0u;
    propval_ = 0u;
    index_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stEnchantInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 color = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &color_)));
          set_has_color();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_locked;
        break;
      }

      // optional uint32 locked = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_locked:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &locked_)));
          set_has_locked();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_propType;
        break;
      }

      // optional uint32 propType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_propType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &proptype_)));
          set_has_proptype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_propVal;
        break;
      }

      // optional uint32 propVal = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_propVal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &propval_)));
          set_has_propval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_index;
        break;
      }

      // optional uint32 index = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stEnchantInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 color = 1;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->color(), output);
  }

  // optional uint32 locked = 2;
  if (has_locked()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->locked(), output);
  }

  // optional uint32 propType = 3;
  if (has_proptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->proptype(), output);
  }

  // optional uint32 propVal = 4;
  if (has_propval()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->propval(), output);
  }

  // optional uint32 index = 5;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stEnchantInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 color = 1;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->color(), target);
  }

  // optional uint32 locked = 2;
  if (has_locked()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->locked(), target);
  }

  // optional uint32 propType = 3;
  if (has_proptype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->proptype(), target);
  }

  // optional uint32 propVal = 4;
  if (has_propval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->propval(), target);
  }

  // optional uint32 index = 5;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stEnchantInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 color = 1;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->color());
    }

    // optional uint32 locked = 2;
    if (has_locked()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->locked());
    }

    // optional uint32 propType = 3;
    if (has_proptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->proptype());
    }

    // optional uint32 propVal = 4;
    if (has_propval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->propval());
    }

    // optional uint32 index = 5;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stEnchantInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stEnchantInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stEnchantInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stEnchantInfo::MergeFrom(const stEnchantInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_color()) {
      set_color(from.color());
    }
    if (from.has_locked()) {
      set_locked(from.locked());
    }
    if (from.has_proptype()) {
      set_proptype(from.proptype());
    }
    if (from.has_propval()) {
      set_propval(from.propval());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stEnchantInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stEnchantInfo::CopyFrom(const stEnchantInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stEnchantInfo::IsInitialized() const {

  return true;
}

void stEnchantInfo::Swap(stEnchantInfo* other) {
  if (other != this) {
    std::swap(color_, other->color_);
    std::swap(locked_, other->locked_);
    std::swap(proptype_, other->proptype_);
    std::swap(propval_, other->propval_);
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stEnchantInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stEnchantInfo_descriptor_;
  metadata.reflection = stEnchantInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stSynItemInfo::kItemIDFieldNumber;
const int stSynItemInfo::kInstanceIDFieldNumber;
const int stSynItemInfo::kNumFieldNumber;
const int stSynItemInfo::kRaiseLvFieldNumber;
const int stSynItemInfo::kMaxHPFieldNumber;
const int stSynItemInfo::kDamageFieldNumber;
const int stSynItemInfo::kExpFieldNumber;
const int stSynItemInfo::kBagPosFieldNumber;
const int stSynItemInfo::kBattlePowerFieldNumber;
const int stSynItemInfo::kRefineLvFieldNumber;
const int stSynItemInfo::kObtainSkillFieldNumber;
const int stSynItemInfo::kSkillInfoFieldNumber;
const int stSynItemInfo::kRaiseSkillPropFieldNumber;
const int stSynItemInfo::kRemainTimeFieldNumber;
const int stSynItemInfo::kBreakLvFieldNumber;
const int stSynItemInfo::kEnchantFieldNumber;
#endif  // !_MSC_VER

stSynItemInfo::stSynItemInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSynItemInfo::InitAsDefaultInstance() {
  bagpos_ = const_cast< ::Role::stBagPos*>(&::Role::stBagPos::default_instance());
}

stSynItemInfo::stSynItemInfo(const stSynItemInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSynItemInfo::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0u;
  instanceid_ = GOOGLE_ULONGLONG(0);
  num_ = 0u;
  raiselv_ = 0u;
  maxhp_ = 0u;
  damage_ = 0u;
  exp_ = 0u;
  bagpos_ = NULL;
  battlepower_ = 0u;
  refinelv_ = 0u;
  obtainskill_ = 0u;
  remaintime_ = 0u;
  breaklv_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSynItemInfo::~stSynItemInfo() {
  SharedDtor();
}

void stSynItemInfo::SharedDtor() {
  if (this != default_instance_) {
    delete bagpos_;
  }
}

void stSynItemInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSynItemInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynItemInfo_descriptor_;
}

const stSynItemInfo& stSynItemInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stSynItemInfo* stSynItemInfo::default_instance_ = NULL;

stSynItemInfo* stSynItemInfo::New() const {
  return new stSynItemInfo;
}

void stSynItemInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = 0u;
    instanceid_ = GOOGLE_ULONGLONG(0);
    num_ = 0u;
    raiselv_ = 0u;
    maxhp_ = 0u;
    damage_ = 0u;
    exp_ = 0u;
    if (has_bagpos()) {
      if (bagpos_ != NULL) bagpos_->::Role::stBagPos::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    battlepower_ = 0u;
    refinelv_ = 0u;
    obtainskill_ = 0u;
    remaintime_ = 0u;
    breaklv_ = 0u;
  }
  skillinfo_.Clear();
  raiseskillprop_.Clear();
  enchant_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSynItemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 itemID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_instanceID;
        break;
      }

      // optional uint64 instanceID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_instanceID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &instanceid_)));
          set_has_instanceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }

      // optional uint32 num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_raiseLv;
        break;
      }

      // optional uint32 raiseLv = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_raiseLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &raiselv_)));
          set_has_raiselv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_maxHP;
        break;
      }

      // optional uint32 maxHP = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxHP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxhp_)));
          set_has_maxhp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_damage;
        break;
      }

      // optional uint32 damage = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &damage_)));
          set_has_damage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_exp;
        break;
      }

      // optional uint32 exp = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_bagPos;
        break;
      }

      // optional .Role.stBagPos bagPos = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bagPos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bagpos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_battlePower;
        break;
      }

      // optional uint32 battlePower = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battlePower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battlepower_)));
          set_has_battlepower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_refineLv;
        break;
      }

      // optional uint32 refineLv = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_refineLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &refinelv_)));
          set_has_refinelv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_obtainSkill;
        break;
      }

      // optional uint32 obtainSkill = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_obtainSkill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &obtainskill_)));
          set_has_obtainskill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_skillInfo;
        break;
      }

      // repeated .Role.stItemSkillInfo skillInfo = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skillInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skillinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_skillInfo;
        if (input->ExpectTag(114)) goto parse_raiseSkillProp;
        break;
      }

      // repeated .Role.stRaiseSkillProp raiseSkillProp = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_raiseSkillProp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_raiseskillprop()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_raiseSkillProp;
        if (input->ExpectTag(120)) goto parse_remainTime;
        break;
      }

      // optional uint32 remainTime = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remainTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &remaintime_)));
          set_has_remaintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_breakLv;
        break;
      }

      // optional uint32 breakLv = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_breakLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &breaklv_)));
          set_has_breaklv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_enchant;
        break;
      }

      // repeated .Role.stEnchantInfo enchant = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_enchant:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_enchant()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_enchant;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSynItemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 itemID = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itemid(), output);
  }

  // optional uint64 instanceID = 2;
  if (has_instanceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->instanceid(), output);
  }

  // optional uint32 num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->num(), output);
  }

  // optional uint32 raiseLv = 4;
  if (has_raiselv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->raiselv(), output);
  }

  // optional uint32 maxHP = 5;
  if (has_maxhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->maxhp(), output);
  }

  // optional uint32 damage = 7;
  if (has_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->damage(), output);
  }

  // optional uint32 exp = 8;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->exp(), output);
  }

  // optional .Role.stBagPos bagPos = 9;
  if (has_bagpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->bagpos(), output);
  }

  // optional uint32 battlePower = 10;
  if (has_battlepower()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->battlepower(), output);
  }

  // optional uint32 refineLv = 11;
  if (has_refinelv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->refinelv(), output);
  }

  // optional uint32 obtainSkill = 12;
  if (has_obtainskill()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->obtainskill(), output);
  }

  // repeated .Role.stItemSkillInfo skillInfo = 13;
  for (int i = 0; i < this->skillinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->skillinfo(i), output);
  }

  // repeated .Role.stRaiseSkillProp raiseSkillProp = 14;
  for (int i = 0; i < this->raiseskillprop_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->raiseskillprop(i), output);
  }

  // optional uint32 remainTime = 15;
  if (has_remaintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->remaintime(), output);
  }

  // optional uint32 breakLv = 16;
  if (has_breaklv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->breaklv(), output);
  }

  // repeated .Role.stEnchantInfo enchant = 17;
  for (int i = 0; i < this->enchant_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->enchant(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSynItemInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 itemID = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->itemid(), target);
  }

  // optional uint64 instanceID = 2;
  if (has_instanceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->instanceid(), target);
  }

  // optional uint32 num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->num(), target);
  }

  // optional uint32 raiseLv = 4;
  if (has_raiselv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->raiselv(), target);
  }

  // optional uint32 maxHP = 5;
  if (has_maxhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->maxhp(), target);
  }

  // optional uint32 damage = 7;
  if (has_damage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->damage(), target);
  }

  // optional uint32 exp = 8;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->exp(), target);
  }

  // optional .Role.stBagPos bagPos = 9;
  if (has_bagpos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->bagpos(), target);
  }

  // optional uint32 battlePower = 10;
  if (has_battlepower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->battlepower(), target);
  }

  // optional uint32 refineLv = 11;
  if (has_refinelv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->refinelv(), target);
  }

  // optional uint32 obtainSkill = 12;
  if (has_obtainskill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->obtainskill(), target);
  }

  // repeated .Role.stItemSkillInfo skillInfo = 13;
  for (int i = 0; i < this->skillinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->skillinfo(i), target);
  }

  // repeated .Role.stRaiseSkillProp raiseSkillProp = 14;
  for (int i = 0; i < this->raiseskillprop_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->raiseskillprop(i), target);
  }

  // optional uint32 remainTime = 15;
  if (has_remaintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->remaintime(), target);
  }

  // optional uint32 breakLv = 16;
  if (has_breaklv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->breaklv(), target);
  }

  // repeated .Role.stEnchantInfo enchant = 17;
  for (int i = 0; i < this->enchant_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->enchant(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSynItemInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 itemID = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // optional uint64 instanceID = 2;
    if (has_instanceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->instanceid());
    }

    // optional uint32 num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

    // optional uint32 raiseLv = 4;
    if (has_raiselv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->raiselv());
    }

    // optional uint32 maxHP = 5;
    if (has_maxhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxhp());
    }

    // optional uint32 damage = 7;
    if (has_damage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->damage());
    }

    // optional uint32 exp = 8;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
    }

    // optional .Role.stBagPos bagPos = 9;
    if (has_bagpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bagpos());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 battlePower = 10;
    if (has_battlepower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battlepower());
    }

    // optional uint32 refineLv = 11;
    if (has_refinelv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->refinelv());
    }

    // optional uint32 obtainSkill = 12;
    if (has_obtainskill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->obtainskill());
    }

    // optional uint32 remainTime = 15;
    if (has_remaintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->remaintime());
    }

    // optional uint32 breakLv = 16;
    if (has_breaklv()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->breaklv());
    }

  }
  // repeated .Role.stItemSkillInfo skillInfo = 13;
  total_size += 1 * this->skillinfo_size();
  for (int i = 0; i < this->skillinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skillinfo(i));
  }

  // repeated .Role.stRaiseSkillProp raiseSkillProp = 14;
  total_size += 1 * this->raiseskillprop_size();
  for (int i = 0; i < this->raiseskillprop_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->raiseskillprop(i));
  }

  // repeated .Role.stEnchantInfo enchant = 17;
  total_size += 2 * this->enchant_size();
  for (int i = 0; i < this->enchant_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->enchant(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSynItemInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSynItemInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSynItemInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSynItemInfo::MergeFrom(const stSynItemInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  skillinfo_.MergeFrom(from.skillinfo_);
  raiseskillprop_.MergeFrom(from.raiseskillprop_);
  enchant_.MergeFrom(from.enchant_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_instanceid()) {
      set_instanceid(from.instanceid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_raiselv()) {
      set_raiselv(from.raiselv());
    }
    if (from.has_maxhp()) {
      set_maxhp(from.maxhp());
    }
    if (from.has_damage()) {
      set_damage(from.damage());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_bagpos()) {
      mutable_bagpos()->::Role::stBagPos::MergeFrom(from.bagpos());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_battlepower()) {
      set_battlepower(from.battlepower());
    }
    if (from.has_refinelv()) {
      set_refinelv(from.refinelv());
    }
    if (from.has_obtainskill()) {
      set_obtainskill(from.obtainskill());
    }
    if (from.has_remaintime()) {
      set_remaintime(from.remaintime());
    }
    if (from.has_breaklv()) {
      set_breaklv(from.breaklv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSynItemInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSynItemInfo::CopyFrom(const stSynItemInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSynItemInfo::IsInitialized() const {

  return true;
}

void stSynItemInfo::Swap(stSynItemInfo* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(instanceid_, other->instanceid_);
    std::swap(num_, other->num_);
    std::swap(raiselv_, other->raiselv_);
    std::swap(maxhp_, other->maxhp_);
    std::swap(damage_, other->damage_);
    std::swap(exp_, other->exp_);
    std::swap(bagpos_, other->bagpos_);
    std::swap(battlepower_, other->battlepower_);
    std::swap(refinelv_, other->refinelv_);
    std::swap(obtainskill_, other->obtainskill_);
    skillinfo_.Swap(&other->skillinfo_);
    raiseskillprop_.Swap(&other->raiseskillprop_);
    std::swap(remaintime_, other->remaintime_);
    std::swap(breaklv_, other->breaklv_);
    enchant_.Swap(&other->enchant_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSynItemInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSynItemInfo_descriptor_;
  metadata.reflection = stSynItemInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stNotifyAddItem_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyAddItem_ProtoModID_descriptor_;
}
bool stNotifyAddItem_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyAddItem_ProtoModID stNotifyAddItem::ModID;
const stNotifyAddItem_ProtoModID stNotifyAddItem::ProtoModID_MIN;
const stNotifyAddItem_ProtoModID stNotifyAddItem::ProtoModID_MAX;
const int stNotifyAddItem::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stNotifyAddItem_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyAddItem_ProtoFunID_descriptor_;
}
bool stNotifyAddItem_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 35:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyAddItem_ProtoFunID stNotifyAddItem::FunID;
const stNotifyAddItem_ProtoFunID stNotifyAddItem::ProtoFunID_MIN;
const stNotifyAddItem_ProtoFunID stNotifyAddItem::ProtoFunID_MAX;
const int stNotifyAddItem::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stNotifyAddItem::kDataFieldNumber;
#endif  // !_MSC_VER

stNotifyAddItem::stNotifyAddItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stNotifyAddItem::InitAsDefaultInstance() {
  data_ = const_cast< ::Role::stSynItemInfo*>(&::Role::stSynItemInfo::default_instance());
}

stNotifyAddItem::stNotifyAddItem(const stNotifyAddItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stNotifyAddItem::SharedCtor() {
  _cached_size_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stNotifyAddItem::~stNotifyAddItem() {
  SharedDtor();
}

void stNotifyAddItem::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void stNotifyAddItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stNotifyAddItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyAddItem_descriptor_;
}

const stNotifyAddItem& stNotifyAddItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stNotifyAddItem* stNotifyAddItem::default_instance_ = NULL;

stNotifyAddItem* stNotifyAddItem::New() const {
  return new stNotifyAddItem;
}

void stNotifyAddItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_data()) {
      if (data_ != NULL) data_->::Role::stSynItemInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stNotifyAddItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Role.stSynItemInfo data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stNotifyAddItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Role.stSynItemInfo data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stNotifyAddItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Role.stSynItemInfo data = 1;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stNotifyAddItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Role.stSynItemInfo data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stNotifyAddItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stNotifyAddItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stNotifyAddItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stNotifyAddItem::MergeFrom(const stNotifyAddItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      mutable_data()->::Role::stSynItemInfo::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stNotifyAddItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stNotifyAddItem::CopyFrom(const stNotifyAddItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stNotifyAddItem::IsInitialized() const {

  return true;
}

void stNotifyAddItem::Swap(stNotifyAddItem* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stNotifyAddItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stNotifyAddItem_descriptor_;
  metadata.reflection = stNotifyAddItem_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stDeleteItem_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stDeleteItem_ProtoModID_descriptor_;
}
bool stDeleteItem_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stDeleteItem_ProtoModID stDeleteItem::ModID;
const stDeleteItem_ProtoModID stDeleteItem::ProtoModID_MIN;
const stDeleteItem_ProtoModID stDeleteItem::ProtoModID_MAX;
const int stDeleteItem::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stDeleteItem_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stDeleteItem_ProtoFunID_descriptor_;
}
bool stDeleteItem_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stDeleteItem_ProtoFunID stDeleteItem::FunID;
const stDeleteItem_ProtoFunID stDeleteItem::ProtoFunID_MIN;
const stDeleteItem_ProtoFunID stDeleteItem::ProtoFunID_MAX;
const int stDeleteItem::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stDeleteItem::kInstanceIDFieldNumber;
const int stDeleteItem::kBagPosFieldNumber;
#endif  // !_MSC_VER

stDeleteItem::stDeleteItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stDeleteItem::InitAsDefaultInstance() {
  bagpos_ = const_cast< ::Role::stBagPos*>(&::Role::stBagPos::default_instance());
}

stDeleteItem::stDeleteItem(const stDeleteItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stDeleteItem::SharedCtor() {
  _cached_size_ = 0;
  instanceid_ = GOOGLE_ULONGLONG(0);
  bagpos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stDeleteItem::~stDeleteItem() {
  SharedDtor();
}

void stDeleteItem::SharedDtor() {
  if (this != default_instance_) {
    delete bagpos_;
  }
}

void stDeleteItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stDeleteItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stDeleteItem_descriptor_;
}

const stDeleteItem& stDeleteItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stDeleteItem* stDeleteItem::default_instance_ = NULL;

stDeleteItem* stDeleteItem::New() const {
  return new stDeleteItem;
}

void stDeleteItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    instanceid_ = GOOGLE_ULONGLONG(0);
    if (has_bagpos()) {
      if (bagpos_ != NULL) bagpos_->::Role::stBagPos::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stDeleteItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 instanceID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &instanceid_)));
          set_has_instanceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_bagPos;
        break;
      }

      // optional .Role.stBagPos bagPos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bagPos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bagpos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stDeleteItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 instanceID = 1;
  if (has_instanceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->instanceid(), output);
  }

  // optional .Role.stBagPos bagPos = 2;
  if (has_bagpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->bagpos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stDeleteItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 instanceID = 1;
  if (has_instanceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->instanceid(), target);
  }

  // optional .Role.stBagPos bagPos = 2;
  if (has_bagpos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->bagpos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stDeleteItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 instanceID = 1;
    if (has_instanceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->instanceid());
    }

    // optional .Role.stBagPos bagPos = 2;
    if (has_bagpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bagpos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stDeleteItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stDeleteItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stDeleteItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stDeleteItem::MergeFrom(const stDeleteItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_instanceid()) {
      set_instanceid(from.instanceid());
    }
    if (from.has_bagpos()) {
      mutable_bagpos()->::Role::stBagPos::MergeFrom(from.bagpos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stDeleteItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stDeleteItem::CopyFrom(const stDeleteItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stDeleteItem::IsInitialized() const {

  return true;
}

void stDeleteItem::Swap(stDeleteItem* other) {
  if (other != this) {
    std::swap(instanceid_, other->instanceid_);
    std::swap(bagpos_, other->bagpos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stDeleteItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stDeleteItem_descriptor_;
  metadata.reflection = stDeleteItem_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRefreshItem_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRefreshItem_ProtoModID_descriptor_;
}
bool stRefreshItem_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRefreshItem_ProtoModID stRefreshItem::ModID;
const stRefreshItem_ProtoModID stRefreshItem::ProtoModID_MIN;
const stRefreshItem_ProtoModID stRefreshItem::ProtoModID_MAX;
const int stRefreshItem::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRefreshItem_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRefreshItem_ProtoFunID_descriptor_;
}
bool stRefreshItem_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 9:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRefreshItem_ProtoFunID stRefreshItem::FunID;
const stRefreshItem_ProtoFunID stRefreshItem::ProtoFunID_MIN;
const stRefreshItem_ProtoFunID stRefreshItem::ProtoFunID_MAX;
const int stRefreshItem::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRefreshItem::kDataFieldNumber;
#endif  // !_MSC_VER

stRefreshItem::stRefreshItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRefreshItem::InitAsDefaultInstance() {
  data_ = const_cast< ::Role::stSynItemInfo*>(&::Role::stSynItemInfo::default_instance());
}

stRefreshItem::stRefreshItem(const stRefreshItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRefreshItem::SharedCtor() {
  _cached_size_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRefreshItem::~stRefreshItem() {
  SharedDtor();
}

void stRefreshItem::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void stRefreshItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRefreshItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRefreshItem_descriptor_;
}

const stRefreshItem& stRefreshItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stRefreshItem* stRefreshItem::default_instance_ = NULL;

stRefreshItem* stRefreshItem::New() const {
  return new stRefreshItem;
}

void stRefreshItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_data()) {
      if (data_ != NULL) data_->::Role::stSynItemInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRefreshItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Role.stSynItemInfo data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRefreshItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Role.stSynItemInfo data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRefreshItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Role.stSynItemInfo data = 1;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRefreshItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Role.stSynItemInfo data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRefreshItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRefreshItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRefreshItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRefreshItem::MergeFrom(const stRefreshItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      mutable_data()->::Role::stSynItemInfo::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRefreshItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRefreshItem::CopyFrom(const stRefreshItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRefreshItem::IsInitialized() const {

  return true;
}

void stRefreshItem::Swap(stRefreshItem* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRefreshItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRefreshItem_descriptor_;
  metadata.reflection = stRefreshItem_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stInitAllItem_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stInitAllItem_ProtoModID_descriptor_;
}
bool stInitAllItem_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stInitAllItem_ProtoModID stInitAllItem::ModID;
const stInitAllItem_ProtoModID stInitAllItem::ProtoModID_MIN;
const stInitAllItem_ProtoModID stInitAllItem::ProtoModID_MAX;
const int stInitAllItem::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stInitAllItem_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stInitAllItem_ProtoFunID_descriptor_;
}
bool stInitAllItem_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 10:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stInitAllItem_ProtoFunID stInitAllItem::FunID;
const stInitAllItem_ProtoFunID stInitAllItem::ProtoFunID_MIN;
const stInitAllItem_ProtoFunID stInitAllItem::ProtoFunID_MAX;
const int stInitAllItem::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stInitAllItem::kDataFieldNumber;
#endif  // !_MSC_VER

stInitAllItem::stInitAllItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stInitAllItem::InitAsDefaultInstance() {
}

stInitAllItem::stInitAllItem(const stInitAllItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stInitAllItem::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stInitAllItem::~stInitAllItem() {
  SharedDtor();
}

void stInitAllItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stInitAllItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stInitAllItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stInitAllItem_descriptor_;
}

const stInitAllItem& stInitAllItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stInitAllItem* stInitAllItem::default_instance_ = NULL;

stInitAllItem* stInitAllItem::New() const {
  return new stInitAllItem;
}

void stInitAllItem::Clear() {
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stInitAllItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Role.stSynItemInfo data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stInitAllItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Role.stSynItemInfo data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stInitAllItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Role.stSynItemInfo data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stInitAllItem::ByteSize() const {
  int total_size = 0;

  // repeated .Role.stSynItemInfo data = 1;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stInitAllItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stInitAllItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stInitAllItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stInitAllItem::MergeFrom(const stInitAllItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stInitAllItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stInitAllItem::CopyFrom(const stInitAllItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stInitAllItem::IsInitialized() const {

  return true;
}

void stInitAllItem::Swap(stInitAllItem* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stInitAllItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stInitAllItem_descriptor_;
  metadata.reflection = stInitAllItem_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqOpenShop_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqOpenShop_ProtoModID_descriptor_;
}
bool stReqOpenShop_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqOpenShop_ProtoModID stReqOpenShop::ModID;
const stReqOpenShop_ProtoModID stReqOpenShop::ProtoModID_MIN;
const stReqOpenShop_ProtoModID stReqOpenShop::ProtoModID_MAX;
const int stReqOpenShop::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqOpenShop_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqOpenShop_ProtoFunID_descriptor_;
}
bool stReqOpenShop_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 11:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqOpenShop_ProtoFunID stReqOpenShop::FunID;
const stReqOpenShop_ProtoFunID stReqOpenShop::ProtoFunID_MIN;
const stReqOpenShop_ProtoFunID stReqOpenShop::ProtoFunID_MAX;
const int stReqOpenShop::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqOpenShop::kShopIDFieldNumber;
#endif  // !_MSC_VER

stReqOpenShop::stReqOpenShop()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqOpenShop::InitAsDefaultInstance() {
}

stReqOpenShop::stReqOpenShop(const stReqOpenShop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqOpenShop::SharedCtor() {
  _cached_size_ = 0;
  shopid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqOpenShop::~stReqOpenShop() {
  SharedDtor();
}

void stReqOpenShop::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqOpenShop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqOpenShop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqOpenShop_descriptor_;
}

const stReqOpenShop& stReqOpenShop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stReqOpenShop* stReqOpenShop::default_instance_ = NULL;

stReqOpenShop* stReqOpenShop::New() const {
  return new stReqOpenShop;
}

void stReqOpenShop::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    shopid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqOpenShop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 shopID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shopid_)));
          set_has_shopid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqOpenShop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 shopID = 1;
  if (has_shopid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->shopid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqOpenShop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 shopID = 1;
  if (has_shopid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->shopid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqOpenShop::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 shopID = 1;
    if (has_shopid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shopid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqOpenShop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqOpenShop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqOpenShop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqOpenShop::MergeFrom(const stReqOpenShop& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_shopid()) {
      set_shopid(from.shopid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqOpenShop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqOpenShop::CopyFrom(const stReqOpenShop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqOpenShop::IsInitialized() const {

  return true;
}

void stReqOpenShop::Swap(stReqOpenShop* other) {
  if (other != this) {
    std::swap(shopid_, other->shopid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqOpenShop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqOpenShop_descriptor_;
  metadata.reflection = stReqOpenShop_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stShopItem::kIndexFieldNumber;
const int stShopItem::kUniqueIDFieldNumber;
const int stShopItem::kItemIDFieldNumber;
const int stShopItem::kBuyNumFieldNumber;
const int stShopItem::kBuyNumPerTimeFieldNumber;
#endif  // !_MSC_VER

stShopItem::stShopItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stShopItem::InitAsDefaultInstance() {
}

stShopItem::stShopItem(const stShopItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stShopItem::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0u;
  uniqueid_ = 0u;
  itemid_ = 0u;
  buynum_ = 0u;
  buynumpertime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stShopItem::~stShopItem() {
  SharedDtor();
}

void stShopItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stShopItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stShopItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stShopItem_descriptor_;
}

const stShopItem& stShopItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stShopItem* stShopItem::default_instance_ = NULL;

stShopItem* stShopItem::New() const {
  return new stShopItem;
}

void stShopItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0u;
    uniqueid_ = 0u;
    itemid_ = 0u;
    buynum_ = 0u;
    buynumpertime_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stShopItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uniqueID;
        break;
      }

      // optional uint32 uniqueID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uniqueID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uniqueid_)));
          set_has_uniqueid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_itemID;
        break;
      }

      // optional uint32 itemID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_buyNum;
        break;
      }

      // optional uint32 buyNum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buyNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buynum_)));
          set_has_buynum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_buyNumPerTime;
        break;
      }

      // optional uint32 buyNumPerTime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buyNumPerTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buynumpertime_)));
          set_has_buynumpertime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stShopItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->index(), output);
  }

  // optional uint32 uniqueID = 2;
  if (has_uniqueid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uniqueid(), output);
  }

  // optional uint32 itemID = 3;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->itemid(), output);
  }

  // optional uint32 buyNum = 4;
  if (has_buynum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->buynum(), output);
  }

  // optional uint32 buyNumPerTime = 5;
  if (has_buynumpertime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->buynumpertime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stShopItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->index(), target);
  }

  // optional uint32 uniqueID = 2;
  if (has_uniqueid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uniqueid(), target);
  }

  // optional uint32 itemID = 3;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->itemid(), target);
  }

  // optional uint32 buyNum = 4;
  if (has_buynum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->buynum(), target);
  }

  // optional uint32 buyNumPerTime = 5;
  if (has_buynumpertime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->buynumpertime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stShopItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

    // optional uint32 uniqueID = 2;
    if (has_uniqueid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uniqueid());
    }

    // optional uint32 itemID = 3;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // optional uint32 buyNum = 4;
    if (has_buynum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buynum());
    }

    // optional uint32 buyNumPerTime = 5;
    if (has_buynumpertime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buynumpertime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stShopItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stShopItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stShopItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stShopItem::MergeFrom(const stShopItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_uniqueid()) {
      set_uniqueid(from.uniqueid());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_buynum()) {
      set_buynum(from.buynum());
    }
    if (from.has_buynumpertime()) {
      set_buynumpertime(from.buynumpertime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stShopItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stShopItem::CopyFrom(const stShopItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stShopItem::IsInitialized() const {

  return true;
}

void stShopItem::Swap(stShopItem* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(uniqueid_, other->uniqueid_);
    std::swap(itemid_, other->itemid_);
    std::swap(buynum_, other->buynum_);
    std::swap(buynumpertime_, other->buynumpertime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stShopItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stShopItem_descriptor_;
  metadata.reflection = stShopItem_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRetShopItemList_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetShopItemList_ProtoModID_descriptor_;
}
bool stRetShopItemList_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetShopItemList_ProtoModID stRetShopItemList::ModID;
const stRetShopItemList_ProtoModID stRetShopItemList::ProtoModID_MIN;
const stRetShopItemList_ProtoModID stRetShopItemList::ProtoModID_MAX;
const int stRetShopItemList::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetShopItemList_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetShopItemList_ProtoFunID_descriptor_;
}
bool stRetShopItemList_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 12:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetShopItemList_ProtoFunID stRetShopItemList::FunID;
const stRetShopItemList_ProtoFunID stRetShopItemList::ProtoFunID_MIN;
const stRetShopItemList_ProtoFunID stRetShopItemList::ProtoFunID_MAX;
const int stRetShopItemList::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRetShopItemList::kShopIDFieldNumber;
const int stRetShopItemList::kShopListFieldNumber;
const int stRetShopItemList::kRefreshRemainTimeFieldNumber;
const int stRetShopItemList::kRefreshNumFieldNumber;
#endif  // !_MSC_VER

stRetShopItemList::stRetShopItemList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRetShopItemList::InitAsDefaultInstance() {
}

stRetShopItemList::stRetShopItemList(const stRetShopItemList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRetShopItemList::SharedCtor() {
  _cached_size_ = 0;
  shopid_ = 0u;
  refreshremaintime_ = 0u;
  refreshnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRetShopItemList::~stRetShopItemList() {
  SharedDtor();
}

void stRetShopItemList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRetShopItemList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRetShopItemList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetShopItemList_descriptor_;
}

const stRetShopItemList& stRetShopItemList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stRetShopItemList* stRetShopItemList::default_instance_ = NULL;

stRetShopItemList* stRetShopItemList::New() const {
  return new stRetShopItemList;
}

void stRetShopItemList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    shopid_ = 0u;
    refreshremaintime_ = 0u;
    refreshnum_ = 0u;
  }
  shoplist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRetShopItemList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 shopID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shopid_)));
          set_has_shopid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_shopList;
        break;
      }

      // repeated .Role.stShopItem shopList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shopList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_shoplist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_shopList;
        if (input->ExpectTag(24)) goto parse_refreshRemainTime;
        break;
      }

      // optional uint32 refreshRemainTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_refreshRemainTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &refreshremaintime_)));
          set_has_refreshremaintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_refreshNum;
        break;
      }

      // optional uint32 refreshNum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_refreshNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &refreshnum_)));
          set_has_refreshnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRetShopItemList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 shopID = 1;
  if (has_shopid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->shopid(), output);
  }

  // repeated .Role.stShopItem shopList = 2;
  for (int i = 0; i < this->shoplist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->shoplist(i), output);
  }

  // optional uint32 refreshRemainTime = 3;
  if (has_refreshremaintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->refreshremaintime(), output);
  }

  // optional uint32 refreshNum = 4;
  if (has_refreshnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->refreshnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRetShopItemList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 shopID = 1;
  if (has_shopid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->shopid(), target);
  }

  // repeated .Role.stShopItem shopList = 2;
  for (int i = 0; i < this->shoplist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->shoplist(i), target);
  }

  // optional uint32 refreshRemainTime = 3;
  if (has_refreshremaintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->refreshremaintime(), target);
  }

  // optional uint32 refreshNum = 4;
  if (has_refreshnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->refreshnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRetShopItemList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 shopID = 1;
    if (has_shopid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shopid());
    }

    // optional uint32 refreshRemainTime = 3;
    if (has_refreshremaintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->refreshremaintime());
    }

    // optional uint32 refreshNum = 4;
    if (has_refreshnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->refreshnum());
    }

  }
  // repeated .Role.stShopItem shopList = 2;
  total_size += 1 * this->shoplist_size();
  for (int i = 0; i < this->shoplist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->shoplist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRetShopItemList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRetShopItemList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRetShopItemList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRetShopItemList::MergeFrom(const stRetShopItemList& from) {
  GOOGLE_CHECK_NE(&from, this);
  shoplist_.MergeFrom(from.shoplist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_shopid()) {
      set_shopid(from.shopid());
    }
    if (from.has_refreshremaintime()) {
      set_refreshremaintime(from.refreshremaintime());
    }
    if (from.has_refreshnum()) {
      set_refreshnum(from.refreshnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRetShopItemList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRetShopItemList::CopyFrom(const stRetShopItemList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRetShopItemList::IsInitialized() const {

  return true;
}

void stRetShopItemList::Swap(stRetShopItemList* other) {
  if (other != this) {
    std::swap(shopid_, other->shopid_);
    shoplist_.Swap(&other->shoplist_);
    std::swap(refreshremaintime_, other->refreshremaintime_);
    std::swap(refreshnum_, other->refreshnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRetShopItemList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRetShopItemList_descriptor_;
  metadata.reflection = stRetShopItemList_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqBuyItem_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqBuyItem_ProtoModID_descriptor_;
}
bool stReqBuyItem_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqBuyItem_ProtoModID stReqBuyItem::ModID;
const stReqBuyItem_ProtoModID stReqBuyItem::ProtoModID_MIN;
const stReqBuyItem_ProtoModID stReqBuyItem::ProtoModID_MAX;
const int stReqBuyItem::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqBuyItem_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqBuyItem_ProtoFunID_descriptor_;
}
bool stReqBuyItem_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 13:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqBuyItem_ProtoFunID stReqBuyItem::FunID;
const stReqBuyItem_ProtoFunID stReqBuyItem::ProtoFunID_MIN;
const stReqBuyItem_ProtoFunID stReqBuyItem::ProtoFunID_MAX;
const int stReqBuyItem::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqBuyItem::kShopIDFieldNumber;
const int stReqBuyItem::kIndexFieldNumber;
const int stReqBuyItem::kNumFieldNumber;
const int stReqBuyItem::kIsFashionFieldNumber;
#endif  // !_MSC_VER

stReqBuyItem::stReqBuyItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqBuyItem::InitAsDefaultInstance() {
}

stReqBuyItem::stReqBuyItem(const stReqBuyItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqBuyItem::SharedCtor() {
  _cached_size_ = 0;
  shopid_ = 0u;
  index_ = 0u;
  num_ = 0u;
  isfashion_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqBuyItem::~stReqBuyItem() {
  SharedDtor();
}

void stReqBuyItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqBuyItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqBuyItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqBuyItem_descriptor_;
}

const stReqBuyItem& stReqBuyItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stReqBuyItem* stReqBuyItem::default_instance_ = NULL;

stReqBuyItem* stReqBuyItem::New() const {
  return new stReqBuyItem;
}

void stReqBuyItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    shopid_ = 0u;
    index_ = 0u;
    num_ = 0u;
    isfashion_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqBuyItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 shopID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shopid_)));
          set_has_shopid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }

      // optional uint32 index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }

      // optional uint32 num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_isFashion;
        break;
      }

      // optional bool isFashion = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isFashion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isfashion_)));
          set_has_isfashion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqBuyItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 shopID = 1;
  if (has_shopid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->shopid(), output);
  }

  // optional uint32 index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->index(), output);
  }

  // optional uint32 num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->num(), output);
  }

  // optional bool isFashion = 4;
  if (has_isfashion()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->isfashion(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqBuyItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 shopID = 1;
  if (has_shopid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->shopid(), target);
  }

  // optional uint32 index = 2;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->index(), target);
  }

  // optional uint32 num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->num(), target);
  }

  // optional bool isFashion = 4;
  if (has_isfashion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->isfashion(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqBuyItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 shopID = 1;
    if (has_shopid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shopid());
    }

    // optional uint32 index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

    // optional uint32 num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

    // optional bool isFashion = 4;
    if (has_isfashion()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqBuyItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqBuyItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqBuyItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqBuyItem::MergeFrom(const stReqBuyItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_shopid()) {
      set_shopid(from.shopid());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_isfashion()) {
      set_isfashion(from.isfashion());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqBuyItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqBuyItem::CopyFrom(const stReqBuyItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqBuyItem::IsInitialized() const {

  return true;
}

void stReqBuyItem::Swap(stReqBuyItem* other) {
  if (other != this) {
    std::swap(shopid_, other->shopid_);
    std::swap(index_, other->index_);
    std::swap(num_, other->num_);
    std::swap(isfashion_, other->isfashion_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqBuyItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqBuyItem_descriptor_;
  metadata.reflection = stReqBuyItem_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stBuyItemResult_BUYRESULT_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stBuyItemResult_BUYRESULT_descriptor_;
}
bool stBuyItemResult_BUYRESULT_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stBuyItemResult_BUYRESULT stBuyItemResult::BUY_SUCCESS;
const stBuyItemResult_BUYRESULT stBuyItemResult::RESOURCE_NOT_ENOUGH;
const stBuyItemResult_BUYRESULT stBuyItemResult::BUY_FULL;
const stBuyItemResult_BUYRESULT stBuyItemResult::ITEM_NOT_EXIST;
const stBuyItemResult_BUYRESULT stBuyItemResult::BUY_OUT;
const stBuyItemResult_BUYRESULT stBuyItemResult::LV_LIMIT;
const stBuyItemResult_BUYRESULT stBuyItemResult::GUILD_LV_LIMIT;
const stBuyItemResult_BUYRESULT stBuyItemResult::ARENA_RANK_LIMIT;
const stBuyItemResult_BUYRESULT stBuyItemResult::NOT_OPEN_TIME;
const stBuyItemResult_BUYRESULT stBuyItemResult::BUYRESULT_MIN;
const stBuyItemResult_BUYRESULT stBuyItemResult::BUYRESULT_MAX;
const int stBuyItemResult::BUYRESULT_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stBuyItemResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stBuyItemResult_ProtoModID_descriptor_;
}
bool stBuyItemResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stBuyItemResult_ProtoModID stBuyItemResult::ModID;
const stBuyItemResult_ProtoModID stBuyItemResult::ProtoModID_MIN;
const stBuyItemResult_ProtoModID stBuyItemResult::ProtoModID_MAX;
const int stBuyItemResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stBuyItemResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stBuyItemResult_ProtoFunID_descriptor_;
}
bool stBuyItemResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 14:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stBuyItemResult_ProtoFunID stBuyItemResult::FunID;
const stBuyItemResult_ProtoFunID stBuyItemResult::ProtoFunID_MIN;
const stBuyItemResult_ProtoFunID stBuyItemResult::ProtoFunID_MAX;
const int stBuyItemResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stBuyItemResult::kRetCodeFieldNumber;
const int stBuyItemResult::kShopItemFieldNumber;
const int stBuyItemResult::kShopIDFieldNumber;
#endif  // !_MSC_VER

stBuyItemResult::stBuyItemResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stBuyItemResult::InitAsDefaultInstance() {
  shopitem_ = const_cast< ::Role::stShopItem*>(&::Role::stShopItem::default_instance());
}

stBuyItemResult::stBuyItemResult(const stBuyItemResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stBuyItemResult::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 1;
  shopitem_ = NULL;
  shopid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stBuyItemResult::~stBuyItemResult() {
  SharedDtor();
}

void stBuyItemResult::SharedDtor() {
  if (this != default_instance_) {
    delete shopitem_;
  }
}

void stBuyItemResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stBuyItemResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stBuyItemResult_descriptor_;
}

const stBuyItemResult& stBuyItemResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stBuyItemResult* stBuyItemResult::default_instance_ = NULL;

stBuyItemResult* stBuyItemResult::New() const {
  return new stBuyItemResult;
}

void stBuyItemResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    retcode_ = 1;
    if (has_shopitem()) {
      if (shopitem_ != NULL) shopitem_->::Role::stShopItem::Clear();
    }
    shopid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stBuyItemResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Role.stBuyItemResult.BUYRESULT retCode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Role::stBuyItemResult_BUYRESULT_IsValid(value)) {
            set_retcode(static_cast< ::Role::stBuyItemResult_BUYRESULT >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_shopItem;
        break;
      }

      // optional .Role.stShopItem shopItem = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shopItem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shopitem()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_shopID;
        break;
      }

      // optional uint32 shopID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shopID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shopid_)));
          set_has_shopid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stBuyItemResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Role.stBuyItemResult.BUYRESULT retCode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->retcode(), output);
  }

  // optional .Role.stShopItem shopItem = 2;
  if (has_shopitem()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->shopitem(), output);
  }

  // optional uint32 shopID = 3;
  if (has_shopid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->shopid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stBuyItemResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Role.stBuyItemResult.BUYRESULT retCode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->retcode(), target);
  }

  // optional .Role.stShopItem shopItem = 2;
  if (has_shopitem()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->shopitem(), target);
  }

  // optional uint32 shopID = 3;
  if (has_shopid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->shopid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stBuyItemResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Role.stBuyItemResult.BUYRESULT retCode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->retcode());
    }

    // optional .Role.stShopItem shopItem = 2;
    if (has_shopitem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shopitem());
    }

    // optional uint32 shopID = 3;
    if (has_shopid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shopid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stBuyItemResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stBuyItemResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stBuyItemResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stBuyItemResult::MergeFrom(const stBuyItemResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_shopitem()) {
      mutable_shopitem()->::Role::stShopItem::MergeFrom(from.shopitem());
    }
    if (from.has_shopid()) {
      set_shopid(from.shopid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stBuyItemResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stBuyItemResult::CopyFrom(const stBuyItemResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stBuyItemResult::IsInitialized() const {

  return true;
}

void stBuyItemResult::Swap(stBuyItemResult* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(shopitem_, other->shopitem_);
    std::swap(shopid_, other->shopid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stBuyItemResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stBuyItemResult_descriptor_;
  metadata.reflection = stBuyItemResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stSynHeroSkill::kSkillIDFieldNumber;
const int stSynHeroSkill::kSkillLvFieldNumber;
const int stSynHeroSkill::kSkillPosFieldNumber;
#endif  // !_MSC_VER

stSynHeroSkill::stSynHeroSkill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSynHeroSkill::InitAsDefaultInstance() {
}

stSynHeroSkill::stSynHeroSkill(const stSynHeroSkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSynHeroSkill::SharedCtor() {
  _cached_size_ = 0;
  skillid_ = 0u;
  skilllv_ = 0u;
  skillpos_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSynHeroSkill::~stSynHeroSkill() {
  SharedDtor();
}

void stSynHeroSkill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stSynHeroSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSynHeroSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynHeroSkill_descriptor_;
}

const stSynHeroSkill& stSynHeroSkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stSynHeroSkill* stSynHeroSkill::default_instance_ = NULL;

stSynHeroSkill* stSynHeroSkill::New() const {
  return new stSynHeroSkill;
}

void stSynHeroSkill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skillid_ = 0u;
    skilllv_ = 0u;
    skillpos_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSynHeroSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 skillID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skillLv;
        break;
      }

      // optional uint32 skillLv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skilllv_)));
          set_has_skilllv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_skillPos;
        break;
      }

      // optional uint32 skillPos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillpos_)));
          set_has_skillpos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSynHeroSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 skillID = 1;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->skillid(), output);
  }

  // optional uint32 skillLv = 2;
  if (has_skilllv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->skilllv(), output);
  }

  // optional uint32 skillPos = 3;
  if (has_skillpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->skillpos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSynHeroSkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 skillID = 1;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->skillid(), target);
  }

  // optional uint32 skillLv = 2;
  if (has_skilllv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->skilllv(), target);
  }

  // optional uint32 skillPos = 3;
  if (has_skillpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->skillpos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSynHeroSkill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 skillID = 1;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillid());
    }

    // optional uint32 skillLv = 2;
    if (has_skilllv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skilllv());
    }

    // optional uint32 skillPos = 3;
    if (has_skillpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillpos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSynHeroSkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSynHeroSkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSynHeroSkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSynHeroSkill::MergeFrom(const stSynHeroSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_skilllv()) {
      set_skilllv(from.skilllv());
    }
    if (from.has_skillpos()) {
      set_skillpos(from.skillpos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSynHeroSkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSynHeroSkill::CopyFrom(const stSynHeroSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSynHeroSkill::IsInitialized() const {

  return true;
}

void stSynHeroSkill::Swap(stSynHeroSkill* other) {
  if (other != this) {
    std::swap(skillid_, other->skillid_);
    std::swap(skilllv_, other->skilllv_);
    std::swap(skillpos_, other->skillpos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSynHeroSkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSynHeroSkill_descriptor_;
  metadata.reflection = stSynHeroSkill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stImpactHeroInfo::kHeroIDFieldNumber;
const int stImpactHeroInfo::kBattlePropFieldNumber;
#endif  // !_MSC_VER

stImpactHeroInfo::stImpactHeroInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stImpactHeroInfo::InitAsDefaultInstance() {
}

stImpactHeroInfo::stImpactHeroInfo(const stImpactHeroInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stImpactHeroInfo::SharedCtor() {
  _cached_size_ = 0;
  heroid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stImpactHeroInfo::~stImpactHeroInfo() {
  SharedDtor();
}

void stImpactHeroInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stImpactHeroInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stImpactHeroInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stImpactHeroInfo_descriptor_;
}

const stImpactHeroInfo& stImpactHeroInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stImpactHeroInfo* stImpactHeroInfo::default_instance_ = NULL;

stImpactHeroInfo* stImpactHeroInfo::New() const {
  return new stImpactHeroInfo;
}

void stImpactHeroInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    heroid_ = 0u;
  }
  battleprop_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stImpactHeroInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 heroID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heroid_)));
          set_has_heroid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_battleProp;
        break;
      }

      // repeated .Role.stBattleProp battleProp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_battleProp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_battleprop()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_battleProp;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stImpactHeroInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 heroID = 1;
  if (has_heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->heroid(), output);
  }

  // repeated .Role.stBattleProp battleProp = 2;
  for (int i = 0; i < this->battleprop_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->battleprop(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stImpactHeroInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 heroID = 1;
  if (has_heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->heroid(), target);
  }

  // repeated .Role.stBattleProp battleProp = 2;
  for (int i = 0; i < this->battleprop_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->battleprop(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stImpactHeroInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 heroID = 1;
    if (has_heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heroid());
    }

  }
  // repeated .Role.stBattleProp battleProp = 2;
  total_size += 1 * this->battleprop_size();
  for (int i = 0; i < this->battleprop_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->battleprop(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stImpactHeroInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stImpactHeroInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stImpactHeroInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stImpactHeroInfo::MergeFrom(const stImpactHeroInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  battleprop_.MergeFrom(from.battleprop_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_heroid()) {
      set_heroid(from.heroid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stImpactHeroInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stImpactHeroInfo::CopyFrom(const stImpactHeroInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stImpactHeroInfo::IsInitialized() const {

  return true;
}

void stImpactHeroInfo::Swap(stImpactHeroInfo* other) {
  if (other != this) {
    std::swap(heroid_, other->heroid_);
    battleprop_.Swap(&other->battleprop_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stImpactHeroInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stImpactHeroInfo_descriptor_;
  metadata.reflection = stImpactHeroInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stSynHeroInfo::kHeroIDFieldNumber;
const int stSynHeroInfo::kLevelFieldNumber;
const int stSynHeroInfo::kStateFieldNumber;
const int stSynHeroInfo::kPosFieldNumber;
const int stSynHeroInfo::kSkillVecFieldNumber;
const int stSynHeroInfo::kMaxHPFieldNumber;
const int stSynHeroInfo::kDamageFieldNumber;
const int stSynHeroInfo::kEvolutionLvFieldNumber;
const int stSynHeroInfo::kBattlePowerFieldNumber;
const int stSynHeroInfo::kStudySkillIDFieldNumber;
const int stSynHeroInfo::kBattlePropFieldNumber;
const int stSynHeroInfo::kTrainLvFieldNumber;
const int stSynHeroInfo::kTrainExpFieldNumber;
#endif  // !_MSC_VER

stSynHeroInfo::stSynHeroInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSynHeroInfo::InitAsDefaultInstance() {
}

stSynHeroInfo::stSynHeroInfo(const stSynHeroInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSynHeroInfo::SharedCtor() {
  _cached_size_ = 0;
  heroid_ = 0u;
  level_ = 0u;
  state_ = 1;
  pos_ = 0u;
  maxhp_ = 0u;
  damage_ = 0u;
  evolutionlv_ = 0u;
  battlepower_ = 0u;
  studyskillid_ = 0u;
  trainlv_ = 0u;
  trainexp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSynHeroInfo::~stSynHeroInfo() {
  SharedDtor();
}

void stSynHeroInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stSynHeroInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSynHeroInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynHeroInfo_descriptor_;
}

const stSynHeroInfo& stSynHeroInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stSynHeroInfo* stSynHeroInfo::default_instance_ = NULL;

stSynHeroInfo* stSynHeroInfo::New() const {
  return new stSynHeroInfo;
}

void stSynHeroInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    heroid_ = 0u;
    level_ = 0u;
    state_ = 1;
    pos_ = 0u;
    maxhp_ = 0u;
    damage_ = 0u;
    evolutionlv_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    battlepower_ = 0u;
    studyskillid_ = 0u;
    trainlv_ = 0u;
    trainexp_ = 0u;
  }
  skillvec_.Clear();
  battleprop_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSynHeroInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 heroID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heroid_)));
          set_has_heroid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // optional uint32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_state;
        break;
      }

      // optional .Role.E_HERO_STATE state = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Role::E_HERO_STATE_IsValid(value)) {
            set_state(static_cast< ::Role::E_HERO_STATE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_pos;
        break;
      }

      // optional uint32 pos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_skillVec;
        break;
      }

      // repeated .Role.stSynHeroSkill skillVec = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skillVec:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skillvec()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_skillVec;
        if (input->ExpectTag(48)) goto parse_maxHP;
        break;
      }

      // optional uint32 maxHP = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxHP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxhp_)));
          set_has_maxhp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_damage;
        break;
      }

      // optional uint32 damage = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &damage_)));
          set_has_damage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_evolutionLv;
        break;
      }

      // optional uint32 evolutionLv = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_evolutionLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &evolutionlv_)));
          set_has_evolutionlv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_battlePower;
        break;
      }

      // optional uint32 battlePower = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battlePower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battlepower_)));
          set_has_battlepower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_studySkillID;
        break;
      }

      // optional uint32 studySkillID = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_studySkillID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &studyskillid_)));
          set_has_studyskillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_battleProp;
        break;
      }

      // repeated .Role.stBattleProp battleProp = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_battleProp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_battleprop()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_battleProp;
        if (input->ExpectTag(96)) goto parse_trainLv;
        break;
      }

      // optional uint32 trainLv = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trainLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &trainlv_)));
          set_has_trainlv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_trainExp;
        break;
      }

      // optional uint32 trainExp = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trainExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &trainexp_)));
          set_has_trainexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSynHeroInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 heroID = 1;
  if (has_heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->heroid(), output);
  }

  // optional uint32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }

  // optional .Role.E_HERO_STATE state = 3;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->state(), output);
  }

  // optional uint32 pos = 4;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->pos(), output);
  }

  // repeated .Role.stSynHeroSkill skillVec = 5;
  for (int i = 0; i < this->skillvec_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->skillvec(i), output);
  }

  // optional uint32 maxHP = 6;
  if (has_maxhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->maxhp(), output);
  }

  // optional uint32 damage = 7;
  if (has_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->damage(), output);
  }

  // optional uint32 evolutionLv = 8;
  if (has_evolutionlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->evolutionlv(), output);
  }

  // optional uint32 battlePower = 9;
  if (has_battlepower()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->battlepower(), output);
  }

  // optional uint32 studySkillID = 10;
  if (has_studyskillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->studyskillid(), output);
  }

  // repeated .Role.stBattleProp battleProp = 11;
  for (int i = 0; i < this->battleprop_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->battleprop(i), output);
  }

  // optional uint32 trainLv = 12;
  if (has_trainlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->trainlv(), output);
  }

  // optional uint32 trainExp = 13;
  if (has_trainexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->trainexp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSynHeroInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 heroID = 1;
  if (has_heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->heroid(), target);
  }

  // optional uint32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }

  // optional .Role.E_HERO_STATE state = 3;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->state(), target);
  }

  // optional uint32 pos = 4;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->pos(), target);
  }

  // repeated .Role.stSynHeroSkill skillVec = 5;
  for (int i = 0; i < this->skillvec_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->skillvec(i), target);
  }

  // optional uint32 maxHP = 6;
  if (has_maxhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->maxhp(), target);
  }

  // optional uint32 damage = 7;
  if (has_damage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->damage(), target);
  }

  // optional uint32 evolutionLv = 8;
  if (has_evolutionlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->evolutionlv(), target);
  }

  // optional uint32 battlePower = 9;
  if (has_battlepower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->battlepower(), target);
  }

  // optional uint32 studySkillID = 10;
  if (has_studyskillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->studyskillid(), target);
  }

  // repeated .Role.stBattleProp battleProp = 11;
  for (int i = 0; i < this->battleprop_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->battleprop(i), target);
  }

  // optional uint32 trainLv = 12;
  if (has_trainlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->trainlv(), target);
  }

  // optional uint32 trainExp = 13;
  if (has_trainexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->trainexp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSynHeroInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 heroID = 1;
    if (has_heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heroid());
    }

    // optional uint32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional .Role.E_HERO_STATE state = 3;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

    // optional uint32 pos = 4;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

    // optional uint32 maxHP = 6;
    if (has_maxhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxhp());
    }

    // optional uint32 damage = 7;
    if (has_damage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->damage());
    }

    // optional uint32 evolutionLv = 8;
    if (has_evolutionlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->evolutionlv());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 battlePower = 9;
    if (has_battlepower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battlepower());
    }

    // optional uint32 studySkillID = 10;
    if (has_studyskillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->studyskillid());
    }

    // optional uint32 trainLv = 12;
    if (has_trainlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->trainlv());
    }

    // optional uint32 trainExp = 13;
    if (has_trainexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->trainexp());
    }

  }
  // repeated .Role.stSynHeroSkill skillVec = 5;
  total_size += 1 * this->skillvec_size();
  for (int i = 0; i < this->skillvec_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skillvec(i));
  }

  // repeated .Role.stBattleProp battleProp = 11;
  total_size += 1 * this->battleprop_size();
  for (int i = 0; i < this->battleprop_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->battleprop(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSynHeroInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSynHeroInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSynHeroInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSynHeroInfo::MergeFrom(const stSynHeroInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  skillvec_.MergeFrom(from.skillvec_);
  battleprop_.MergeFrom(from.battleprop_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_heroid()) {
      set_heroid(from.heroid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_maxhp()) {
      set_maxhp(from.maxhp());
    }
    if (from.has_damage()) {
      set_damage(from.damage());
    }
    if (from.has_evolutionlv()) {
      set_evolutionlv(from.evolutionlv());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_battlepower()) {
      set_battlepower(from.battlepower());
    }
    if (from.has_studyskillid()) {
      set_studyskillid(from.studyskillid());
    }
    if (from.has_trainlv()) {
      set_trainlv(from.trainlv());
    }
    if (from.has_trainexp()) {
      set_trainexp(from.trainexp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSynHeroInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSynHeroInfo::CopyFrom(const stSynHeroInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSynHeroInfo::IsInitialized() const {

  return true;
}

void stSynHeroInfo::Swap(stSynHeroInfo* other) {
  if (other != this) {
    std::swap(heroid_, other->heroid_);
    std::swap(level_, other->level_);
    std::swap(state_, other->state_);
    std::swap(pos_, other->pos_);
    skillvec_.Swap(&other->skillvec_);
    std::swap(maxhp_, other->maxhp_);
    std::swap(damage_, other->damage_);
    std::swap(evolutionlv_, other->evolutionlv_);
    std::swap(battlepower_, other->battlepower_);
    std::swap(studyskillid_, other->studyskillid_);
    battleprop_.Swap(&other->battleprop_);
    std::swap(trainlv_, other->trainlv_);
    std::swap(trainexp_, other->trainexp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSynHeroInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSynHeroInfo_descriptor_;
  metadata.reflection = stSynHeroInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stInitAllHero_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stInitAllHero_ProtoModID_descriptor_;
}
bool stInitAllHero_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stInitAllHero_ProtoModID stInitAllHero::ModID;
const stInitAllHero_ProtoModID stInitAllHero::ProtoModID_MIN;
const stInitAllHero_ProtoModID stInitAllHero::ProtoModID_MAX;
const int stInitAllHero::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stInitAllHero_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stInitAllHero_ProtoFunID_descriptor_;
}
bool stInitAllHero_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 15:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stInitAllHero_ProtoFunID stInitAllHero::FunID;
const stInitAllHero_ProtoFunID stInitAllHero::ProtoFunID_MIN;
const stInitAllHero_ProtoFunID stInitAllHero::ProtoFunID_MAX;
const int stInitAllHero::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stInitAllHero::kSkillExpFieldNumber;
const int stInitAllHero::kUseDiamondNumFieldNumber;
const int stInitAllHero::kDataFieldNumber;
#endif  // !_MSC_VER

stInitAllHero::stInitAllHero()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stInitAllHero::InitAsDefaultInstance() {
}

stInitAllHero::stInitAllHero(const stInitAllHero& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stInitAllHero::SharedCtor() {
  _cached_size_ = 0;
  skillexp_ = 0u;
  usediamondnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stInitAllHero::~stInitAllHero() {
  SharedDtor();
}

void stInitAllHero::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stInitAllHero::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stInitAllHero::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stInitAllHero_descriptor_;
}

const stInitAllHero& stInitAllHero::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stInitAllHero* stInitAllHero::default_instance_ = NULL;

stInitAllHero* stInitAllHero::New() const {
  return new stInitAllHero;
}

void stInitAllHero::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skillexp_ = 0u;
    usediamondnum_ = 0u;
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stInitAllHero::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 skillExp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillexp_)));
          set_has_skillexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_useDiamondNum;
        break;
      }

      // optional uint32 useDiamondNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_useDiamondNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usediamondnum_)));
          set_has_usediamondnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // repeated .Role.stSynHeroInfo data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stInitAllHero::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 skillExp = 1;
  if (has_skillexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->skillexp(), output);
  }

  // optional uint32 useDiamondNum = 2;
  if (has_usediamondnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->usediamondnum(), output);
  }

  // repeated .Role.stSynHeroInfo data = 3;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stInitAllHero::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 skillExp = 1;
  if (has_skillexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->skillexp(), target);
  }

  // optional uint32 useDiamondNum = 2;
  if (has_usediamondnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->usediamondnum(), target);
  }

  // repeated .Role.stSynHeroInfo data = 3;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stInitAllHero::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 skillExp = 1;
    if (has_skillexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillexp());
    }

    // optional uint32 useDiamondNum = 2;
    if (has_usediamondnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->usediamondnum());
    }

  }
  // repeated .Role.stSynHeroInfo data = 3;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stInitAllHero::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stInitAllHero* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stInitAllHero*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stInitAllHero::MergeFrom(const stInitAllHero& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skillexp()) {
      set_skillexp(from.skillexp());
    }
    if (from.has_usediamondnum()) {
      set_usediamondnum(from.usediamondnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stInitAllHero::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stInitAllHero::CopyFrom(const stInitAllHero& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stInitAllHero::IsInitialized() const {

  return true;
}

void stInitAllHero::Swap(stInitAllHero* other) {
  if (other != this) {
    std::swap(skillexp_, other->skillexp_);
    std::swap(usediamondnum_, other->usediamondnum_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stInitAllHero::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stInitAllHero_descriptor_;
  metadata.reflection = stInitAllHero_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stNotifyAddHero_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyAddHero_ProtoModID_descriptor_;
}
bool stNotifyAddHero_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyAddHero_ProtoModID stNotifyAddHero::ModID;
const stNotifyAddHero_ProtoModID stNotifyAddHero::ProtoModID_MIN;
const stNotifyAddHero_ProtoModID stNotifyAddHero::ProtoModID_MAX;
const int stNotifyAddHero::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stNotifyAddHero_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyAddHero_ProtoFunID_descriptor_;
}
bool stNotifyAddHero_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 16:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyAddHero_ProtoFunID stNotifyAddHero::FunID;
const stNotifyAddHero_ProtoFunID stNotifyAddHero::ProtoFunID_MIN;
const stNotifyAddHero_ProtoFunID stNotifyAddHero::ProtoFunID_MAX;
const int stNotifyAddHero::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stNotifyAddHero::kDataFieldNumber;
#endif  // !_MSC_VER

stNotifyAddHero::stNotifyAddHero()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stNotifyAddHero::InitAsDefaultInstance() {
  data_ = const_cast< ::Role::stSynHeroInfo*>(&::Role::stSynHeroInfo::default_instance());
}

stNotifyAddHero::stNotifyAddHero(const stNotifyAddHero& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stNotifyAddHero::SharedCtor() {
  _cached_size_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stNotifyAddHero::~stNotifyAddHero() {
  SharedDtor();
}

void stNotifyAddHero::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void stNotifyAddHero::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stNotifyAddHero::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyAddHero_descriptor_;
}

const stNotifyAddHero& stNotifyAddHero::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stNotifyAddHero* stNotifyAddHero::default_instance_ = NULL;

stNotifyAddHero* stNotifyAddHero::New() const {
  return new stNotifyAddHero;
}

void stNotifyAddHero::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_data()) {
      if (data_ != NULL) data_->::Role::stSynHeroInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stNotifyAddHero::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Role.stSynHeroInfo data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stNotifyAddHero::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Role.stSynHeroInfo data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stNotifyAddHero::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Role.stSynHeroInfo data = 1;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stNotifyAddHero::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Role.stSynHeroInfo data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stNotifyAddHero::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stNotifyAddHero* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stNotifyAddHero*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stNotifyAddHero::MergeFrom(const stNotifyAddHero& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      mutable_data()->::Role::stSynHeroInfo::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stNotifyAddHero::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stNotifyAddHero::CopyFrom(const stNotifyAddHero& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stNotifyAddHero::IsInitialized() const {

  return true;
}

void stNotifyAddHero::Swap(stNotifyAddHero* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stNotifyAddHero::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stNotifyAddHero_descriptor_;
  metadata.reflection = stNotifyAddHero_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRefreshHero_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRefreshHero_ProtoModID_descriptor_;
}
bool stRefreshHero_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRefreshHero_ProtoModID stRefreshHero::ModID;
const stRefreshHero_ProtoModID stRefreshHero::ProtoModID_MIN;
const stRefreshHero_ProtoModID stRefreshHero::ProtoModID_MAX;
const int stRefreshHero::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRefreshHero_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRefreshHero_ProtoFunID_descriptor_;
}
bool stRefreshHero_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 17:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRefreshHero_ProtoFunID stRefreshHero::FunID;
const stRefreshHero_ProtoFunID stRefreshHero::ProtoFunID_MIN;
const stRefreshHero_ProtoFunID stRefreshHero::ProtoFunID_MAX;
const int stRefreshHero::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRefreshHero::kDataFieldNumber;
#endif  // !_MSC_VER

stRefreshHero::stRefreshHero()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRefreshHero::InitAsDefaultInstance() {
  data_ = const_cast< ::Role::stSynHeroInfo*>(&::Role::stSynHeroInfo::default_instance());
}

stRefreshHero::stRefreshHero(const stRefreshHero& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRefreshHero::SharedCtor() {
  _cached_size_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRefreshHero::~stRefreshHero() {
  SharedDtor();
}

void stRefreshHero::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void stRefreshHero::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRefreshHero::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRefreshHero_descriptor_;
}

const stRefreshHero& stRefreshHero::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stRefreshHero* stRefreshHero::default_instance_ = NULL;

stRefreshHero* stRefreshHero::New() const {
  return new stRefreshHero;
}

void stRefreshHero::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_data()) {
      if (data_ != NULL) data_->::Role::stSynHeroInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRefreshHero::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Role.stSynHeroInfo data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRefreshHero::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Role.stSynHeroInfo data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRefreshHero::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Role.stSynHeroInfo data = 1;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRefreshHero::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Role.stSynHeroInfo data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRefreshHero::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRefreshHero* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRefreshHero*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRefreshHero::MergeFrom(const stRefreshHero& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      mutable_data()->::Role::stSynHeroInfo::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRefreshHero::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRefreshHero::CopyFrom(const stRefreshHero& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRefreshHero::IsInitialized() const {

  return true;
}

void stRefreshHero::Swap(stRefreshHero* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRefreshHero::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRefreshHero_descriptor_;
  metadata.reflection = stRefreshHero_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqHeroGoOutForBattle_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqHeroGoOutForBattle_ProtoModID_descriptor_;
}
bool stReqHeroGoOutForBattle_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqHeroGoOutForBattle_ProtoModID stReqHeroGoOutForBattle::ModID;
const stReqHeroGoOutForBattle_ProtoModID stReqHeroGoOutForBattle::ProtoModID_MIN;
const stReqHeroGoOutForBattle_ProtoModID stReqHeroGoOutForBattle::ProtoModID_MAX;
const int stReqHeroGoOutForBattle::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqHeroGoOutForBattle_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqHeroGoOutForBattle_ProtoFunID_descriptor_;
}
bool stReqHeroGoOutForBattle_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 18:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqHeroGoOutForBattle_ProtoFunID stReqHeroGoOutForBattle::FunID;
const stReqHeroGoOutForBattle_ProtoFunID stReqHeroGoOutForBattle::ProtoFunID_MIN;
const stReqHeroGoOutForBattle_ProtoFunID stReqHeroGoOutForBattle::ProtoFunID_MAX;
const int stReqHeroGoOutForBattle::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqHeroGoOutForBattle::kHeroIDFieldNumber;
const int stReqHeroGoOutForBattle::kPosFieldNumber;
#endif  // !_MSC_VER

stReqHeroGoOutForBattle::stReqHeroGoOutForBattle()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqHeroGoOutForBattle::InitAsDefaultInstance() {
}

stReqHeroGoOutForBattle::stReqHeroGoOutForBattle(const stReqHeroGoOutForBattle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqHeroGoOutForBattle::SharedCtor() {
  _cached_size_ = 0;
  heroid_ = 0u;
  pos_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqHeroGoOutForBattle::~stReqHeroGoOutForBattle() {
  SharedDtor();
}

void stReqHeroGoOutForBattle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqHeroGoOutForBattle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqHeroGoOutForBattle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqHeroGoOutForBattle_descriptor_;
}

const stReqHeroGoOutForBattle& stReqHeroGoOutForBattle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stReqHeroGoOutForBattle* stReqHeroGoOutForBattle::default_instance_ = NULL;

stReqHeroGoOutForBattle* stReqHeroGoOutForBattle::New() const {
  return new stReqHeroGoOutForBattle;
}

void stReqHeroGoOutForBattle::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    heroid_ = 0u;
    pos_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqHeroGoOutForBattle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 heroID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heroid_)));
          set_has_heroid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pos;
        break;
      }

      // optional uint32 pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqHeroGoOutForBattle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 heroID = 1;
  if (has_heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->heroid(), output);
  }

  // optional uint32 pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqHeroGoOutForBattle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 heroID = 1;
  if (has_heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->heroid(), target);
  }

  // optional uint32 pos = 2;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqHeroGoOutForBattle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 heroID = 1;
    if (has_heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heroid());
    }

    // optional uint32 pos = 2;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqHeroGoOutForBattle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqHeroGoOutForBattle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqHeroGoOutForBattle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqHeroGoOutForBattle::MergeFrom(const stReqHeroGoOutForBattle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_heroid()) {
      set_heroid(from.heroid());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqHeroGoOutForBattle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqHeroGoOutForBattle::CopyFrom(const stReqHeroGoOutForBattle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqHeroGoOutForBattle::IsInitialized() const {

  return true;
}

void stReqHeroGoOutForBattle::Swap(stReqHeroGoOutForBattle* other) {
  if (other != this) {
    std::swap(heroid_, other->heroid_);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqHeroGoOutForBattle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqHeroGoOutForBattle_descriptor_;
  metadata.reflection = stReqHeroGoOutForBattle_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* HeroGoOutForBattleResult_ERESULT_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeroGoOutForBattleResult_ERESULT_descriptor_;
}
bool HeroGoOutForBattleResult_ERESULT_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const HeroGoOutForBattleResult_ERESULT HeroGoOutForBattleResult::SUCCESS;
const HeroGoOutForBattleResult_ERESULT HeroGoOutForBattleResult::HAS_GOOUT;
const HeroGoOutForBattleResult_ERESULT HeroGoOutForBattleResult::GO_OUT_TOO_MANY;
const HeroGoOutForBattleResult_ERESULT HeroGoOutForBattleResult::INNER_ERROR;
const HeroGoOutForBattleResult_ERESULT HeroGoOutForBattleResult::POS_WAS_LOCKED;
const HeroGoOutForBattleResult_ERESULT HeroGoOutForBattleResult::ERESULT_MIN;
const HeroGoOutForBattleResult_ERESULT HeroGoOutForBattleResult::ERESULT_MAX;
const int HeroGoOutForBattleResult::ERESULT_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* HeroGoOutForBattleResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeroGoOutForBattleResult_ProtoModID_descriptor_;
}
bool HeroGoOutForBattleResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const HeroGoOutForBattleResult_ProtoModID HeroGoOutForBattleResult::ModID;
const HeroGoOutForBattleResult_ProtoModID HeroGoOutForBattleResult::ProtoModID_MIN;
const HeroGoOutForBattleResult_ProtoModID HeroGoOutForBattleResult::ProtoModID_MAX;
const int HeroGoOutForBattleResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* HeroGoOutForBattleResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeroGoOutForBattleResult_ProtoFunID_descriptor_;
}
bool HeroGoOutForBattleResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 19:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const HeroGoOutForBattleResult_ProtoFunID HeroGoOutForBattleResult::FunID;
const HeroGoOutForBattleResult_ProtoFunID HeroGoOutForBattleResult::ProtoFunID_MIN;
const HeroGoOutForBattleResult_ProtoFunID HeroGoOutForBattleResult::ProtoFunID_MAX;
const int HeroGoOutForBattleResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int HeroGoOutForBattleResult::kHeroIDFieldNumber;
const int HeroGoOutForBattleResult::kRetCodeFieldNumber;
const int HeroGoOutForBattleResult::kPosFieldNumber;
#endif  // !_MSC_VER

HeroGoOutForBattleResult::HeroGoOutForBattleResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HeroGoOutForBattleResult::InitAsDefaultInstance() {
}

HeroGoOutForBattleResult::HeroGoOutForBattleResult(const HeroGoOutForBattleResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HeroGoOutForBattleResult::SharedCtor() {
  _cached_size_ = 0;
  heroid_ = 0u;
  retcode_ = 1;
  pos_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeroGoOutForBattleResult::~HeroGoOutForBattleResult() {
  SharedDtor();
}

void HeroGoOutForBattleResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HeroGoOutForBattleResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeroGoOutForBattleResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeroGoOutForBattleResult_descriptor_;
}

const HeroGoOutForBattleResult& HeroGoOutForBattleResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

HeroGoOutForBattleResult* HeroGoOutForBattleResult::default_instance_ = NULL;

HeroGoOutForBattleResult* HeroGoOutForBattleResult::New() const {
  return new HeroGoOutForBattleResult;
}

void HeroGoOutForBattleResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    heroid_ = 0u;
    retcode_ = 1;
    pos_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeroGoOutForBattleResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 heroID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heroid_)));
          set_has_heroid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_retCode;
        break;
      }

      // optional .Role.HeroGoOutForBattleResult.ERESULT retCode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_retCode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Role::HeroGoOutForBattleResult_ERESULT_IsValid(value)) {
            set_retcode(static_cast< ::Role::HeroGoOutForBattleResult_ERESULT >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pos;
        break;
      }

      // optional uint32 pos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HeroGoOutForBattleResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 heroID = 1;
  if (has_heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->heroid(), output);
  }

  // optional .Role.HeroGoOutForBattleResult.ERESULT retCode = 2;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->retcode(), output);
  }

  // optional uint32 pos = 3;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HeroGoOutForBattleResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 heroID = 1;
  if (has_heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->heroid(), target);
  }

  // optional .Role.HeroGoOutForBattleResult.ERESULT retCode = 2;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->retcode(), target);
  }

  // optional uint32 pos = 3;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HeroGoOutForBattleResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 heroID = 1;
    if (has_heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heroid());
    }

    // optional .Role.HeroGoOutForBattleResult.ERESULT retCode = 2;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->retcode());
    }

    // optional uint32 pos = 3;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeroGoOutForBattleResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeroGoOutForBattleResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeroGoOutForBattleResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeroGoOutForBattleResult::MergeFrom(const HeroGoOutForBattleResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_heroid()) {
      set_heroid(from.heroid());
    }
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeroGoOutForBattleResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeroGoOutForBattleResult::CopyFrom(const HeroGoOutForBattleResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeroGoOutForBattleResult::IsInitialized() const {

  return true;
}

void HeroGoOutForBattleResult::Swap(HeroGoOutForBattleResult* other) {
  if (other != this) {
    std::swap(heroid_, other->heroid_);
    std::swap(retcode_, other->retcode_);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeroGoOutForBattleResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeroGoOutForBattleResult_descriptor_;
  metadata.reflection = HeroGoOutForBattleResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ReqHeroChange2WaitState_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqHeroChange2WaitState_ProtoModID_descriptor_;
}
bool ReqHeroChange2WaitState_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ReqHeroChange2WaitState_ProtoModID ReqHeroChange2WaitState::ModID;
const ReqHeroChange2WaitState_ProtoModID ReqHeroChange2WaitState::ProtoModID_MIN;
const ReqHeroChange2WaitState_ProtoModID ReqHeroChange2WaitState::ProtoModID_MAX;
const int ReqHeroChange2WaitState::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* ReqHeroChange2WaitState_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqHeroChange2WaitState_ProtoFunID_descriptor_;
}
bool ReqHeroChange2WaitState_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 20:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ReqHeroChange2WaitState_ProtoFunID ReqHeroChange2WaitState::FunID;
const ReqHeroChange2WaitState_ProtoFunID ReqHeroChange2WaitState::ProtoFunID_MIN;
const ReqHeroChange2WaitState_ProtoFunID ReqHeroChange2WaitState::ProtoFunID_MAX;
const int ReqHeroChange2WaitState::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ReqHeroChange2WaitState::kHeroIDFieldNumber;
#endif  // !_MSC_VER

ReqHeroChange2WaitState::ReqHeroChange2WaitState()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqHeroChange2WaitState::InitAsDefaultInstance() {
}

ReqHeroChange2WaitState::ReqHeroChange2WaitState(const ReqHeroChange2WaitState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqHeroChange2WaitState::SharedCtor() {
  _cached_size_ = 0;
  heroid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqHeroChange2WaitState::~ReqHeroChange2WaitState() {
  SharedDtor();
}

void ReqHeroChange2WaitState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqHeroChange2WaitState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqHeroChange2WaitState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqHeroChange2WaitState_descriptor_;
}

const ReqHeroChange2WaitState& ReqHeroChange2WaitState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

ReqHeroChange2WaitState* ReqHeroChange2WaitState::default_instance_ = NULL;

ReqHeroChange2WaitState* ReqHeroChange2WaitState::New() const {
  return new ReqHeroChange2WaitState;
}

void ReqHeroChange2WaitState::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    heroid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqHeroChange2WaitState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 heroID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heroid_)));
          set_has_heroid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqHeroChange2WaitState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 heroID = 1;
  if (has_heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->heroid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqHeroChange2WaitState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 heroID = 1;
  if (has_heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->heroid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqHeroChange2WaitState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 heroID = 1;
    if (has_heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heroid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqHeroChange2WaitState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqHeroChange2WaitState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqHeroChange2WaitState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqHeroChange2WaitState::MergeFrom(const ReqHeroChange2WaitState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_heroid()) {
      set_heroid(from.heroid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqHeroChange2WaitState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqHeroChange2WaitState::CopyFrom(const ReqHeroChange2WaitState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqHeroChange2WaitState::IsInitialized() const {

  return true;
}

void ReqHeroChange2WaitState::Swap(ReqHeroChange2WaitState* other) {
  if (other != this) {
    std::swap(heroid_, other->heroid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqHeroChange2WaitState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqHeroChange2WaitState_descriptor_;
  metadata.reflection = ReqHeroChange2WaitState_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* HeroChange2WaitStateResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeroChange2WaitStateResult_ProtoModID_descriptor_;
}
bool HeroChange2WaitStateResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const HeroChange2WaitStateResult_ProtoModID HeroChange2WaitStateResult::ModID;
const HeroChange2WaitStateResult_ProtoModID HeroChange2WaitStateResult::ProtoModID_MIN;
const HeroChange2WaitStateResult_ProtoModID HeroChange2WaitStateResult::ProtoModID_MAX;
const int HeroChange2WaitStateResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* HeroChange2WaitStateResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeroChange2WaitStateResult_ProtoFunID_descriptor_;
}
bool HeroChange2WaitStateResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 21:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const HeroChange2WaitStateResult_ProtoFunID HeroChange2WaitStateResult::FunID;
const HeroChange2WaitStateResult_ProtoFunID HeroChange2WaitStateResult::ProtoFunID_MIN;
const HeroChange2WaitStateResult_ProtoFunID HeroChange2WaitStateResult::ProtoFunID_MAX;
const int HeroChange2WaitStateResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int HeroChange2WaitStateResult::kHeroIDFieldNumber;
const int HeroChange2WaitStateResult::kSuccessFieldNumber;
#endif  // !_MSC_VER

HeroChange2WaitStateResult::HeroChange2WaitStateResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HeroChange2WaitStateResult::InitAsDefaultInstance() {
}

HeroChange2WaitStateResult::HeroChange2WaitStateResult(const HeroChange2WaitStateResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HeroChange2WaitStateResult::SharedCtor() {
  _cached_size_ = 0;
  heroid_ = 0u;
  success_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeroChange2WaitStateResult::~HeroChange2WaitStateResult() {
  SharedDtor();
}

void HeroChange2WaitStateResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HeroChange2WaitStateResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeroChange2WaitStateResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeroChange2WaitStateResult_descriptor_;
}

const HeroChange2WaitStateResult& HeroChange2WaitStateResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

HeroChange2WaitStateResult* HeroChange2WaitStateResult::default_instance_ = NULL;

HeroChange2WaitStateResult* HeroChange2WaitStateResult::New() const {
  return new HeroChange2WaitStateResult;
}

void HeroChange2WaitStateResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    heroid_ = 0u;
    success_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeroChange2WaitStateResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 heroID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heroid_)));
          set_has_heroid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_success;
        break;
      }

      // optional bool success = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_success:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HeroChange2WaitStateResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 heroID = 1;
  if (has_heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->heroid(), output);
  }

  // optional bool success = 2;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->success(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HeroChange2WaitStateResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 heroID = 1;
  if (has_heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->heroid(), target);
  }

  // optional bool success = 2;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->success(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HeroChange2WaitStateResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 heroID = 1;
    if (has_heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heroid());
    }

    // optional bool success = 2;
    if (has_success()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeroChange2WaitStateResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeroChange2WaitStateResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeroChange2WaitStateResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeroChange2WaitStateResult::MergeFrom(const HeroChange2WaitStateResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_heroid()) {
      set_heroid(from.heroid());
    }
    if (from.has_success()) {
      set_success(from.success());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeroChange2WaitStateResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeroChange2WaitStateResult::CopyFrom(const HeroChange2WaitStateResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeroChange2WaitStateResult::IsInitialized() const {

  return true;
}

void HeroChange2WaitStateResult::Swap(HeroChange2WaitStateResult* other) {
  if (other != this) {
    std::swap(heroid_, other->heroid_);
    std::swap(success_, other->success_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeroChange2WaitStateResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeroChange2WaitStateResult_descriptor_;
  metadata.reflection = HeroChange2WaitStateResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stNotifyRoleAddExp_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyRoleAddExp_ProtoModID_descriptor_;
}
bool stNotifyRoleAddExp_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyRoleAddExp_ProtoModID stNotifyRoleAddExp::ModID;
const stNotifyRoleAddExp_ProtoModID stNotifyRoleAddExp::ProtoModID_MIN;
const stNotifyRoleAddExp_ProtoModID stNotifyRoleAddExp::ProtoModID_MAX;
const int stNotifyRoleAddExp::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stNotifyRoleAddExp_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyRoleAddExp_ProtoFunID_descriptor_;
}
bool stNotifyRoleAddExp_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 22:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyRoleAddExp_ProtoFunID stNotifyRoleAddExp::FunID;
const stNotifyRoleAddExp_ProtoFunID stNotifyRoleAddExp::ProtoFunID_MIN;
const stNotifyRoleAddExp_ProtoFunID stNotifyRoleAddExp::ProtoFunID_MAX;
const int stNotifyRoleAddExp::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stNotifyRoleAddExp::kAddExpFieldNumber;
#endif  // !_MSC_VER

stNotifyRoleAddExp::stNotifyRoleAddExp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stNotifyRoleAddExp::InitAsDefaultInstance() {
}

stNotifyRoleAddExp::stNotifyRoleAddExp(const stNotifyRoleAddExp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stNotifyRoleAddExp::SharedCtor() {
  _cached_size_ = 0;
  addexp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stNotifyRoleAddExp::~stNotifyRoleAddExp() {
  SharedDtor();
}

void stNotifyRoleAddExp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stNotifyRoleAddExp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stNotifyRoleAddExp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyRoleAddExp_descriptor_;
}

const stNotifyRoleAddExp& stNotifyRoleAddExp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stNotifyRoleAddExp* stNotifyRoleAddExp::default_instance_ = NULL;

stNotifyRoleAddExp* stNotifyRoleAddExp::New() const {
  return new stNotifyRoleAddExp;
}

void stNotifyRoleAddExp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    addexp_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stNotifyRoleAddExp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 addExp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &addexp_)));
          set_has_addexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stNotifyRoleAddExp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 addExp = 1;
  if (has_addexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->addexp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stNotifyRoleAddExp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 addExp = 1;
  if (has_addexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->addexp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stNotifyRoleAddExp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 addExp = 1;
    if (has_addexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->addexp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stNotifyRoleAddExp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stNotifyRoleAddExp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stNotifyRoleAddExp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stNotifyRoleAddExp::MergeFrom(const stNotifyRoleAddExp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_addexp()) {
      set_addexp(from.addexp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stNotifyRoleAddExp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stNotifyRoleAddExp::CopyFrom(const stNotifyRoleAddExp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stNotifyRoleAddExp::IsInitialized() const {

  return true;
}

void stNotifyRoleAddExp::Swap(stNotifyRoleAddExp* other) {
  if (other != this) {
    std::swap(addexp_, other->addexp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stNotifyRoleAddExp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stNotifyRoleAddExp_descriptor_;
  metadata.reflection = stNotifyRoleAddExp_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stSynRoleLevel_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynRoleLevel_ProtoModID_descriptor_;
}
bool stSynRoleLevel_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynRoleLevel_ProtoModID stSynRoleLevel::ModID;
const stSynRoleLevel_ProtoModID stSynRoleLevel::ProtoModID_MIN;
const stSynRoleLevel_ProtoModID stSynRoleLevel::ProtoModID_MAX;
const int stSynRoleLevel::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSynRoleLevel_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynRoleLevel_ProtoFunID_descriptor_;
}
bool stSynRoleLevel_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 23:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynRoleLevel_ProtoFunID stSynRoleLevel::FunID;
const stSynRoleLevel_ProtoFunID stSynRoleLevel::ProtoFunID_MIN;
const stSynRoleLevel_ProtoFunID stSynRoleLevel::ProtoFunID_MAX;
const int stSynRoleLevel::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stSynRoleLevel::kCurLevelFieldNumber;
const int stSynRoleLevel::kCurExpFieldNumber;
#endif  // !_MSC_VER

stSynRoleLevel::stSynRoleLevel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSynRoleLevel::InitAsDefaultInstance() {
}

stSynRoleLevel::stSynRoleLevel(const stSynRoleLevel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSynRoleLevel::SharedCtor() {
  _cached_size_ = 0;
  curlevel_ = 0u;
  curexp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSynRoleLevel::~stSynRoleLevel() {
  SharedDtor();
}

void stSynRoleLevel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stSynRoleLevel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSynRoleLevel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynRoleLevel_descriptor_;
}

const stSynRoleLevel& stSynRoleLevel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stSynRoleLevel* stSynRoleLevel::default_instance_ = NULL;

stSynRoleLevel* stSynRoleLevel::New() const {
  return new stSynRoleLevel;
}

void stSynRoleLevel::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    curlevel_ = 0u;
    curexp_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSynRoleLevel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 curLevel = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curlevel_)));
          set_has_curlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_curExp;
        break;
      }

      // optional uint32 curExp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curexp_)));
          set_has_curexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSynRoleLevel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 curLevel = 1;
  if (has_curlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->curlevel(), output);
  }

  // optional uint32 curExp = 2;
  if (has_curexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->curexp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSynRoleLevel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 curLevel = 1;
  if (has_curlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->curlevel(), target);
  }

  // optional uint32 curExp = 2;
  if (has_curexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->curexp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSynRoleLevel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 curLevel = 1;
    if (has_curlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curlevel());
    }

    // optional uint32 curExp = 2;
    if (has_curexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curexp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSynRoleLevel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSynRoleLevel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSynRoleLevel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSynRoleLevel::MergeFrom(const stSynRoleLevel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_curlevel()) {
      set_curlevel(from.curlevel());
    }
    if (from.has_curexp()) {
      set_curexp(from.curexp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSynRoleLevel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSynRoleLevel::CopyFrom(const stSynRoleLevel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSynRoleLevel::IsInitialized() const {

  return true;
}

void stSynRoleLevel::Swap(stSynRoleLevel* other) {
  if (other != this) {
    std::swap(curlevel_, other->curlevel_);
    std::swap(curexp_, other->curexp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSynRoleLevel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSynRoleLevel_descriptor_;
  metadata.reflection = stSynRoleLevel_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stSynHeroLv_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynHeroLv_ProtoModID_descriptor_;
}
bool stSynHeroLv_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynHeroLv_ProtoModID stSynHeroLv::ModID;
const stSynHeroLv_ProtoModID stSynHeroLv::ProtoModID_MIN;
const stSynHeroLv_ProtoModID stSynHeroLv::ProtoModID_MAX;
const int stSynHeroLv::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSynHeroLv_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynHeroLv_ProtoFunID_descriptor_;
}
bool stSynHeroLv_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 24:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynHeroLv_ProtoFunID stSynHeroLv::FunID;
const stSynHeroLv_ProtoFunID stSynHeroLv::ProtoFunID_MIN;
const stSynHeroLv_ProtoFunID stSynHeroLv::ProtoFunID_MAX;
const int stSynHeroLv::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stSynHeroLv::kHeroIDFieldNumber;
const int stSynHeroLv::kCurExpFieldNumber;
const int stSynHeroLv::kCurLvFieldNumber;
#endif  // !_MSC_VER

stSynHeroLv::stSynHeroLv()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSynHeroLv::InitAsDefaultInstance() {
}

stSynHeroLv::stSynHeroLv(const stSynHeroLv& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSynHeroLv::SharedCtor() {
  _cached_size_ = 0;
  heroid_ = 0u;
  curexp_ = 0u;
  curlv_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSynHeroLv::~stSynHeroLv() {
  SharedDtor();
}

void stSynHeroLv::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stSynHeroLv::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSynHeroLv::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynHeroLv_descriptor_;
}

const stSynHeroLv& stSynHeroLv::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stSynHeroLv* stSynHeroLv::default_instance_ = NULL;

stSynHeroLv* stSynHeroLv::New() const {
  return new stSynHeroLv;
}

void stSynHeroLv::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    heroid_ = 0u;
    curexp_ = 0u;
    curlv_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSynHeroLv::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 heroID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heroid_)));
          set_has_heroid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_curExp;
        break;
      }

      // optional uint32 curExp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curexp_)));
          set_has_curexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_curLv;
        break;
      }

      // optional uint32 curLv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curlv_)));
          set_has_curlv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSynHeroLv::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 heroID = 1;
  if (has_heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->heroid(), output);
  }

  // optional uint32 curExp = 2;
  if (has_curexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->curexp(), output);
  }

  // optional uint32 curLv = 3;
  if (has_curlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->curlv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSynHeroLv::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 heroID = 1;
  if (has_heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->heroid(), target);
  }

  // optional uint32 curExp = 2;
  if (has_curexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->curexp(), target);
  }

  // optional uint32 curLv = 3;
  if (has_curlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->curlv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSynHeroLv::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 heroID = 1;
    if (has_heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heroid());
    }

    // optional uint32 curExp = 2;
    if (has_curexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curexp());
    }

    // optional uint32 curLv = 3;
    if (has_curlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curlv());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSynHeroLv::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSynHeroLv* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSynHeroLv*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSynHeroLv::MergeFrom(const stSynHeroLv& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_heroid()) {
      set_heroid(from.heroid());
    }
    if (from.has_curexp()) {
      set_curexp(from.curexp());
    }
    if (from.has_curlv()) {
      set_curlv(from.curlv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSynHeroLv::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSynHeroLv::CopyFrom(const stSynHeroLv& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSynHeroLv::IsInitialized() const {

  return true;
}

void stSynHeroLv::Swap(stSynHeroLv* other) {
  if (other != this) {
    std::swap(heroid_, other->heroid_);
    std::swap(curexp_, other->curexp_);
    std::swap(curlv_, other->curlv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSynHeroLv::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSynHeroLv_descriptor_;
  metadata.reflection = stSynHeroLv_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stSynBagPos::kBagTypeFieldNumber;
const int stSynBagPos::kPosFieldNumber;
#endif  // !_MSC_VER

stSynBagPos::stSynBagPos()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSynBagPos::InitAsDefaultInstance() {
}

stSynBagPos::stSynBagPos(const stSynBagPos& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSynBagPos::SharedCtor() {
  _cached_size_ = 0;
  bagtype_ = 0u;
  pos_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSynBagPos::~stSynBagPos() {
  SharedDtor();
}

void stSynBagPos::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stSynBagPos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSynBagPos::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynBagPos_descriptor_;
}

const stSynBagPos& stSynBagPos::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stSynBagPos* stSynBagPos::default_instance_ = NULL;

stSynBagPos* stSynBagPos::New() const {
  return new stSynBagPos;
}

void stSynBagPos::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bagtype_ = 0u;
    pos_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSynBagPos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 bagType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bagtype_)));
          set_has_bagtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pos;
        break;
      }

      // optional uint32 pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSynBagPos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 bagType = 1;
  if (has_bagtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bagtype(), output);
  }

  // optional uint32 pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSynBagPos::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 bagType = 1;
  if (has_bagtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bagtype(), target);
  }

  // optional uint32 pos = 2;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSynBagPos::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 bagType = 1;
    if (has_bagtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bagtype());
    }

    // optional uint32 pos = 2;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSynBagPos::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSynBagPos* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSynBagPos*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSynBagPos::MergeFrom(const stSynBagPos& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bagtype()) {
      set_bagtype(from.bagtype());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSynBagPos::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSynBagPos::CopyFrom(const stSynBagPos& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSynBagPos::IsInitialized() const {

  return true;
}

void stSynBagPos::Swap(stSynBagPos* other) {
  if (other != this) {
    std::swap(bagtype_, other->bagtype_);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSynBagPos::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSynBagPos_descriptor_;
  metadata.reflection = stSynBagPos_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stMoveItem_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stMoveItem_ProtoModID_descriptor_;
}
bool stMoveItem_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stMoveItem_ProtoModID stMoveItem::ModID;
const stMoveItem_ProtoModID stMoveItem::ProtoModID_MIN;
const stMoveItem_ProtoModID stMoveItem::ProtoModID_MAX;
const int stMoveItem::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stMoveItem_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stMoveItem_ProtoFunID_descriptor_;
}
bool stMoveItem_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 25:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stMoveItem_ProtoFunID stMoveItem::FunID;
const stMoveItem_ProtoFunID stMoveItem::ProtoFunID_MIN;
const stMoveItem_ProtoFunID stMoveItem::ProtoFunID_MAX;
const int stMoveItem::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stMoveItem::kBagTypeFieldNumber;
const int stMoveItem::kInstanceIDFieldNumber;
const int stMoveItem::kBagPosFieldNumber;
#endif  // !_MSC_VER

stMoveItem::stMoveItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stMoveItem::InitAsDefaultInstance() {
  bagpos_ = const_cast< ::Role::stSynBagPos*>(&::Role::stSynBagPos::default_instance());
}

stMoveItem::stMoveItem(const stMoveItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stMoveItem::SharedCtor() {
  _cached_size_ = 0;
  bagtype_ = 0u;
  instanceid_ = GOOGLE_ULONGLONG(0);
  bagpos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stMoveItem::~stMoveItem() {
  SharedDtor();
}

void stMoveItem::SharedDtor() {
  if (this != default_instance_) {
    delete bagpos_;
  }
}

void stMoveItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stMoveItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stMoveItem_descriptor_;
}

const stMoveItem& stMoveItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stMoveItem* stMoveItem::default_instance_ = NULL;

stMoveItem* stMoveItem::New() const {
  return new stMoveItem;
}

void stMoveItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bagtype_ = 0u;
    instanceid_ = GOOGLE_ULONGLONG(0);
    if (has_bagpos()) {
      if (bagpos_ != NULL) bagpos_->::Role::stSynBagPos::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stMoveItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 bagType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bagtype_)));
          set_has_bagtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_instanceID;
        break;
      }

      // optional uint64 instanceID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_instanceID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &instanceid_)));
          set_has_instanceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_bagPos;
        break;
      }

      // optional .Role.stSynBagPos bagPos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bagPos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bagpos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stMoveItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 bagType = 1;
  if (has_bagtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bagtype(), output);
  }

  // optional uint64 instanceID = 2;
  if (has_instanceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->instanceid(), output);
  }

  // optional .Role.stSynBagPos bagPos = 3;
  if (has_bagpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->bagpos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stMoveItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 bagType = 1;
  if (has_bagtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bagtype(), target);
  }

  // optional uint64 instanceID = 2;
  if (has_instanceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->instanceid(), target);
  }

  // optional .Role.stSynBagPos bagPos = 3;
  if (has_bagpos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->bagpos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stMoveItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 bagType = 1;
    if (has_bagtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bagtype());
    }

    // optional uint64 instanceID = 2;
    if (has_instanceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->instanceid());
    }

    // optional .Role.stSynBagPos bagPos = 3;
    if (has_bagpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bagpos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stMoveItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stMoveItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stMoveItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stMoveItem::MergeFrom(const stMoveItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bagtype()) {
      set_bagtype(from.bagtype());
    }
    if (from.has_instanceid()) {
      set_instanceid(from.instanceid());
    }
    if (from.has_bagpos()) {
      mutable_bagpos()->::Role::stSynBagPos::MergeFrom(from.bagpos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stMoveItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stMoveItem::CopyFrom(const stMoveItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stMoveItem::IsInitialized() const {

  return true;
}

void stMoveItem::Swap(stMoveItem* other) {
  if (other != this) {
    std::swap(bagtype_, other->bagtype_);
    std::swap(instanceid_, other->instanceid_);
    std::swap(bagpos_, other->bagpos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stMoveItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stMoveItem_descriptor_;
  metadata.reflection = stMoveItem_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqArrangeMainBag_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqArrangeMainBag_ProtoModID_descriptor_;
}
bool stReqArrangeMainBag_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqArrangeMainBag_ProtoModID stReqArrangeMainBag::ModID;
const stReqArrangeMainBag_ProtoModID stReqArrangeMainBag::ProtoModID_MIN;
const stReqArrangeMainBag_ProtoModID stReqArrangeMainBag::ProtoModID_MAX;
const int stReqArrangeMainBag::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqArrangeMainBag_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqArrangeMainBag_ProtoFunID_descriptor_;
}
bool stReqArrangeMainBag_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 26:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqArrangeMainBag_ProtoFunID stReqArrangeMainBag::FunID;
const stReqArrangeMainBag_ProtoFunID stReqArrangeMainBag::ProtoFunID_MIN;
const stReqArrangeMainBag_ProtoFunID stReqArrangeMainBag::ProtoFunID_MAX;
const int stReqArrangeMainBag::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqArrangeMainBag::kBagTypeFieldNumber;
#endif  // !_MSC_VER

stReqArrangeMainBag::stReqArrangeMainBag()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqArrangeMainBag::InitAsDefaultInstance() {
}

stReqArrangeMainBag::stReqArrangeMainBag(const stReqArrangeMainBag& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqArrangeMainBag::SharedCtor() {
  _cached_size_ = 0;
  bagtype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqArrangeMainBag::~stReqArrangeMainBag() {
  SharedDtor();
}

void stReqArrangeMainBag::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqArrangeMainBag::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqArrangeMainBag::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqArrangeMainBag_descriptor_;
}

const stReqArrangeMainBag& stReqArrangeMainBag::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stReqArrangeMainBag* stReqArrangeMainBag::default_instance_ = NULL;

stReqArrangeMainBag* stReqArrangeMainBag::New() const {
  return new stReqArrangeMainBag;
}

void stReqArrangeMainBag::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bagtype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqArrangeMainBag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 bagType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bagtype_)));
          set_has_bagtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqArrangeMainBag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 bagType = 1;
  if (has_bagtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bagtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqArrangeMainBag::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 bagType = 1;
  if (has_bagtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bagtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqArrangeMainBag::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 bagType = 1;
    if (has_bagtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bagtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqArrangeMainBag::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqArrangeMainBag* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqArrangeMainBag*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqArrangeMainBag::MergeFrom(const stReqArrangeMainBag& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bagtype()) {
      set_bagtype(from.bagtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqArrangeMainBag::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqArrangeMainBag::CopyFrom(const stReqArrangeMainBag& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqArrangeMainBag::IsInitialized() const {

  return true;
}

void stReqArrangeMainBag::Swap(stReqArrangeMainBag* other) {
  if (other != this) {
    std::swap(bagtype_, other->bagtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqArrangeMainBag::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqArrangeMainBag_descriptor_;
  metadata.reflection = stReqArrangeMainBag_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReArrangeMainBagError_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReArrangeMainBagError_ProtoModID_descriptor_;
}
bool stReArrangeMainBagError_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReArrangeMainBagError_ProtoModID stReArrangeMainBagError::ModID;
const stReArrangeMainBagError_ProtoModID stReArrangeMainBagError::ProtoModID_MIN;
const stReArrangeMainBagError_ProtoModID stReArrangeMainBagError::ProtoModID_MAX;
const int stReArrangeMainBagError::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReArrangeMainBagError_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReArrangeMainBagError_ProtoFunID_descriptor_;
}
bool stReArrangeMainBagError_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 27:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReArrangeMainBagError_ProtoFunID stReArrangeMainBagError::FunID;
const stReArrangeMainBagError_ProtoFunID stReArrangeMainBagError::ProtoFunID_MIN;
const stReArrangeMainBagError_ProtoFunID stReArrangeMainBagError::ProtoFunID_MAX;
const int stReArrangeMainBagError::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReArrangeMainBagError::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

stReArrangeMainBagError::stReArrangeMainBagError()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReArrangeMainBagError::InitAsDefaultInstance() {
}

stReArrangeMainBagError::stReArrangeMainBagError(const stReArrangeMainBagError& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReArrangeMainBagError::SharedCtor() {
  _cached_size_ = 0;
  errorcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReArrangeMainBagError::~stReArrangeMainBagError() {
  SharedDtor();
}

void stReArrangeMainBagError::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReArrangeMainBagError::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReArrangeMainBagError::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReArrangeMainBagError_descriptor_;
}

const stReArrangeMainBagError& stReArrangeMainBagError::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stReArrangeMainBagError* stReArrangeMainBagError::default_instance_ = NULL;

stReArrangeMainBagError* stReArrangeMainBagError::New() const {
  return new stReArrangeMainBagError;
}

void stReArrangeMainBagError::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errorcode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReArrangeMainBagError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 errorCode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errorcode_)));
          set_has_errorcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReArrangeMainBagError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 errorCode = 1;
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->errorcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReArrangeMainBagError::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 errorCode = 1;
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->errorcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReArrangeMainBagError::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 errorCode = 1;
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->errorcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReArrangeMainBagError::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReArrangeMainBagError* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReArrangeMainBagError*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReArrangeMainBagError::MergeFrom(const stReArrangeMainBagError& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReArrangeMainBagError::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReArrangeMainBagError::CopyFrom(const stReArrangeMainBagError& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReArrangeMainBagError::IsInitialized() const {

  return true;
}

void stReArrangeMainBagError::Swap(stReArrangeMainBagError* other) {
  if (other != this) {
    std::swap(errorcode_, other->errorcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReArrangeMainBagError::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReArrangeMainBagError_descriptor_;
  metadata.reflection = stReArrangeMainBagError_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRefreshMainBag_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRefreshMainBag_ProtoModID_descriptor_;
}
bool stRefreshMainBag_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRefreshMainBag_ProtoModID stRefreshMainBag::ModID;
const stRefreshMainBag_ProtoModID stRefreshMainBag::ProtoModID_MIN;
const stRefreshMainBag_ProtoModID stRefreshMainBag::ProtoModID_MAX;
const int stRefreshMainBag::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRefreshMainBag_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRefreshMainBag_ProtoFunID_descriptor_;
}
bool stRefreshMainBag_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 28:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRefreshMainBag_ProtoFunID stRefreshMainBag::FunID;
const stRefreshMainBag_ProtoFunID stRefreshMainBag::ProtoFunID_MIN;
const stRefreshMainBag_ProtoFunID stRefreshMainBag::ProtoFunID_MAX;
const int stRefreshMainBag::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRefreshMainBag::kCdTimeFieldNumber;
const int stRefreshMainBag::kDataFieldNumber;
#endif  // !_MSC_VER

stRefreshMainBag::stRefreshMainBag()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRefreshMainBag::InitAsDefaultInstance() {
}

stRefreshMainBag::stRefreshMainBag(const stRefreshMainBag& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRefreshMainBag::SharedCtor() {
  _cached_size_ = 0;
  cdtime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRefreshMainBag::~stRefreshMainBag() {
  SharedDtor();
}

void stRefreshMainBag::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRefreshMainBag::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRefreshMainBag::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRefreshMainBag_descriptor_;
}

const stRefreshMainBag& stRefreshMainBag::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stRefreshMainBag* stRefreshMainBag::default_instance_ = NULL;

stRefreshMainBag* stRefreshMainBag::New() const {
  return new stRefreshMainBag;
}

void stRefreshMainBag::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cdtime_ = 0u;
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRefreshMainBag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 cdTime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cdtime_)));
          set_has_cdtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // repeated .Role.stSynItemInfo data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRefreshMainBag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 cdTime = 1;
  if (has_cdtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cdtime(), output);
  }

  // repeated .Role.stSynItemInfo data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRefreshMainBag::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 cdTime = 1;
  if (has_cdtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cdtime(), target);
  }

  // repeated .Role.stSynItemInfo data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRefreshMainBag::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 cdTime = 1;
    if (has_cdtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cdtime());
    }

  }
  // repeated .Role.stSynItemInfo data = 2;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRefreshMainBag::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRefreshMainBag* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRefreshMainBag*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRefreshMainBag::MergeFrom(const stRefreshMainBag& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cdtime()) {
      set_cdtime(from.cdtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRefreshMainBag::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRefreshMainBag::CopyFrom(const stRefreshMainBag& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRefreshMainBag::IsInitialized() const {

  return true;
}

void stRefreshMainBag::Swap(stRefreshMainBag* other) {
  if (other != this) {
    std::swap(cdtime_, other->cdtime_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRefreshMainBag::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRefreshMainBag_descriptor_;
  metadata.reflection = stRefreshMainBag_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqCombineHero_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqCombineHero_ProtoModID_descriptor_;
}
bool stReqCombineHero_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqCombineHero_ProtoModID stReqCombineHero::ModID;
const stReqCombineHero_ProtoModID stReqCombineHero::ProtoModID_MIN;
const stReqCombineHero_ProtoModID stReqCombineHero::ProtoModID_MAX;
const int stReqCombineHero::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqCombineHero_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqCombineHero_ProtoFunID_descriptor_;
}
bool stReqCombineHero_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 29:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqCombineHero_ProtoFunID stReqCombineHero::FunID;
const stReqCombineHero_ProtoFunID stReqCombineHero::ProtoFunID_MIN;
const stReqCombineHero_ProtoFunID stReqCombineHero::ProtoFunID_MAX;
const int stReqCombineHero::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqCombineHero::kHeroIDFieldNumber;
#endif  // !_MSC_VER

stReqCombineHero::stReqCombineHero()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqCombineHero::InitAsDefaultInstance() {
}

stReqCombineHero::stReqCombineHero(const stReqCombineHero& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqCombineHero::SharedCtor() {
  _cached_size_ = 0;
  heroid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqCombineHero::~stReqCombineHero() {
  SharedDtor();
}

void stReqCombineHero::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqCombineHero::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqCombineHero::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqCombineHero_descriptor_;
}

const stReqCombineHero& stReqCombineHero::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stReqCombineHero* stReqCombineHero::default_instance_ = NULL;

stReqCombineHero* stReqCombineHero::New() const {
  return new stReqCombineHero;
}

void stReqCombineHero::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    heroid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqCombineHero::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 heroID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heroid_)));
          set_has_heroid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqCombineHero::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 heroID = 1;
  if (has_heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->heroid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqCombineHero::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 heroID = 1;
  if (has_heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->heroid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqCombineHero::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 heroID = 1;
    if (has_heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heroid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqCombineHero::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqCombineHero* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqCombineHero*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqCombineHero::MergeFrom(const stReqCombineHero& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_heroid()) {
      set_heroid(from.heroid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqCombineHero::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqCombineHero::CopyFrom(const stReqCombineHero& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqCombineHero::IsInitialized() const {

  return true;
}

void stReqCombineHero::Swap(stReqCombineHero* other) {
  if (other != this) {
    std::swap(heroid_, other->heroid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqCombineHero::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqCombineHero_descriptor_;
  metadata.reflection = stReqCombineHero_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stCombineHeroResult_Result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCombineHeroResult_Result_descriptor_;
}
bool stCombineHeroResult_Result_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stCombineHeroResult_Result stCombineHeroResult::SUCCESS;
const stCombineHeroResult_Result stCombineHeroResult::NOT_ENOUGH_STONE;
const stCombineHeroResult_Result stCombineHeroResult::HAS_EXIST;
const stCombineHeroResult_Result stCombineHeroResult::INNER_ERROR;
const stCombineHeroResult_Result stCombineHeroResult::Result_MIN;
const stCombineHeroResult_Result stCombineHeroResult::Result_MAX;
const int stCombineHeroResult::Result_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stCombineHeroResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCombineHeroResult_ProtoModID_descriptor_;
}
bool stCombineHeroResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stCombineHeroResult_ProtoModID stCombineHeroResult::ModID;
const stCombineHeroResult_ProtoModID stCombineHeroResult::ProtoModID_MIN;
const stCombineHeroResult_ProtoModID stCombineHeroResult::ProtoModID_MAX;
const int stCombineHeroResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stCombineHeroResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCombineHeroResult_ProtoFunID_descriptor_;
}
bool stCombineHeroResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 30:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stCombineHeroResult_ProtoFunID stCombineHeroResult::FunID;
const stCombineHeroResult_ProtoFunID stCombineHeroResult::ProtoFunID_MIN;
const stCombineHeroResult_ProtoFunID stCombineHeroResult::ProtoFunID_MAX;
const int stCombineHeroResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stCombineHeroResult::kResultFieldNumber;
const int stCombineHeroResult::kHeroIDFieldNumber;
#endif  // !_MSC_VER

stCombineHeroResult::stCombineHeroResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stCombineHeroResult::InitAsDefaultInstance() {
}

stCombineHeroResult::stCombineHeroResult(const stCombineHeroResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stCombineHeroResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  heroid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stCombineHeroResult::~stCombineHeroResult() {
  SharedDtor();
}

void stCombineHeroResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stCombineHeroResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stCombineHeroResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCombineHeroResult_descriptor_;
}

const stCombineHeroResult& stCombineHeroResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stCombineHeroResult* stCombineHeroResult::default_instance_ = NULL;

stCombineHeroResult* stCombineHeroResult::New() const {
  return new stCombineHeroResult;
}

void stCombineHeroResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
    heroid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stCombineHeroResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Role.stCombineHeroResult.Result result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Role::stCombineHeroResult_Result_IsValid(value)) {
            set_result(static_cast< ::Role::stCombineHeroResult_Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_heroID;
        break;
      }

      // optional uint32 heroID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_heroID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heroid_)));
          set_has_heroid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stCombineHeroResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Role.stCombineHeroResult.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional uint32 heroID = 2;
  if (has_heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->heroid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stCombineHeroResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Role.stCombineHeroResult.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional uint32 heroID = 2;
  if (has_heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->heroid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stCombineHeroResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Role.stCombineHeroResult.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional uint32 heroID = 2;
    if (has_heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heroid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stCombineHeroResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stCombineHeroResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stCombineHeroResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stCombineHeroResult::MergeFrom(const stCombineHeroResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_heroid()) {
      set_heroid(from.heroid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stCombineHeroResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stCombineHeroResult::CopyFrom(const stCombineHeroResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stCombineHeroResult::IsInitialized() const {

  return true;
}

void stCombineHeroResult::Swap(stCombineHeroResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(heroid_, other->heroid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stCombineHeroResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stCombineHeroResult_descriptor_;
  metadata.reflection = stCombineHeroResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqLevelupHero_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqLevelupHero_ProtoModID_descriptor_;
}
bool stReqLevelupHero_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqLevelupHero_ProtoModID stReqLevelupHero::ModID;
const stReqLevelupHero_ProtoModID stReqLevelupHero::ProtoModID_MIN;
const stReqLevelupHero_ProtoModID stReqLevelupHero::ProtoModID_MAX;
const int stReqLevelupHero::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqLevelupHero_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqLevelupHero_ProtoFunID_descriptor_;
}
bool stReqLevelupHero_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 31:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqLevelupHero_ProtoFunID stReqLevelupHero::FunID;
const stReqLevelupHero_ProtoFunID stReqLevelupHero::ProtoFunID_MIN;
const stReqLevelupHero_ProtoFunID stReqLevelupHero::ProtoFunID_MAX;
const int stReqLevelupHero::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqLevelupHero::kHeroIDFieldNumber;
#endif  // !_MSC_VER

stReqLevelupHero::stReqLevelupHero()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqLevelupHero::InitAsDefaultInstance() {
}

stReqLevelupHero::stReqLevelupHero(const stReqLevelupHero& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqLevelupHero::SharedCtor() {
  _cached_size_ = 0;
  heroid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqLevelupHero::~stReqLevelupHero() {
  SharedDtor();
}

void stReqLevelupHero::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqLevelupHero::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqLevelupHero::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqLevelupHero_descriptor_;
}

const stReqLevelupHero& stReqLevelupHero::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stReqLevelupHero* stReqLevelupHero::default_instance_ = NULL;

stReqLevelupHero* stReqLevelupHero::New() const {
  return new stReqLevelupHero;
}

void stReqLevelupHero::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    heroid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqLevelupHero::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 heroID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heroid_)));
          set_has_heroid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqLevelupHero::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 heroID = 1;
  if (has_heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->heroid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqLevelupHero::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 heroID = 1;
  if (has_heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->heroid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqLevelupHero::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 heroID = 1;
    if (has_heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heroid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqLevelupHero::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqLevelupHero* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqLevelupHero*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqLevelupHero::MergeFrom(const stReqLevelupHero& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_heroid()) {
      set_heroid(from.heroid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqLevelupHero::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqLevelupHero::CopyFrom(const stReqLevelupHero& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqLevelupHero::IsInitialized() const {

  return true;
}

void stReqLevelupHero::Swap(stReqLevelupHero* other) {
  if (other != this) {
    std::swap(heroid_, other->heroid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqLevelupHero::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqLevelupHero_descriptor_;
  metadata.reflection = stReqLevelupHero_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stLevelupHeroResult_Result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stLevelupHeroResult_Result_descriptor_;
}
bool stLevelupHeroResult_Result_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stLevelupHeroResult_Result stLevelupHeroResult::SUCCESS;
const stLevelupHeroResult_Result stLevelupHeroResult::NOT_ENOUGH_STONE;
const stLevelupHeroResult_Result stLevelupHeroResult::NOT_ENOUGH_MONEY;
const stLevelupHeroResult_Result stLevelupHeroResult::HERO_NOT_EXIST;
const stLevelupHeroResult_Result stLevelupHeroResult::INNER_ERROR;
const stLevelupHeroResult_Result stLevelupHeroResult::ROLE_LV_LIMIT;
const stLevelupHeroResult_Result stLevelupHeroResult::Result_MIN;
const stLevelupHeroResult_Result stLevelupHeroResult::Result_MAX;
const int stLevelupHeroResult::Result_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stLevelupHeroResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stLevelupHeroResult_ProtoModID_descriptor_;
}
bool stLevelupHeroResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stLevelupHeroResult_ProtoModID stLevelupHeroResult::ModID;
const stLevelupHeroResult_ProtoModID stLevelupHeroResult::ProtoModID_MIN;
const stLevelupHeroResult_ProtoModID stLevelupHeroResult::ProtoModID_MAX;
const int stLevelupHeroResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stLevelupHeroResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stLevelupHeroResult_ProtoFunID_descriptor_;
}
bool stLevelupHeroResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 32:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stLevelupHeroResult_ProtoFunID stLevelupHeroResult::FunID;
const stLevelupHeroResult_ProtoFunID stLevelupHeroResult::ProtoFunID_MIN;
const stLevelupHeroResult_ProtoFunID stLevelupHeroResult::ProtoFunID_MAX;
const int stLevelupHeroResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stLevelupHeroResult::kResultFieldNumber;
const int stLevelupHeroResult::kHeroIDFieldNumber;
const int stLevelupHeroResult::kCurLvFieldNumber;
#endif  // !_MSC_VER

stLevelupHeroResult::stLevelupHeroResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stLevelupHeroResult::InitAsDefaultInstance() {
}

stLevelupHeroResult::stLevelupHeroResult(const stLevelupHeroResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stLevelupHeroResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  heroid_ = 0u;
  curlv_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stLevelupHeroResult::~stLevelupHeroResult() {
  SharedDtor();
}

void stLevelupHeroResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stLevelupHeroResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stLevelupHeroResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stLevelupHeroResult_descriptor_;
}

const stLevelupHeroResult& stLevelupHeroResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stLevelupHeroResult* stLevelupHeroResult::default_instance_ = NULL;

stLevelupHeroResult* stLevelupHeroResult::New() const {
  return new stLevelupHeroResult;
}

void stLevelupHeroResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
    heroid_ = 0u;
    curlv_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stLevelupHeroResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Role.stLevelupHeroResult.Result result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Role::stLevelupHeroResult_Result_IsValid(value)) {
            set_result(static_cast< ::Role::stLevelupHeroResult_Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_heroID;
        break;
      }

      // optional uint32 heroID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_heroID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heroid_)));
          set_has_heroid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_curLv;
        break;
      }

      // optional uint32 curLv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curlv_)));
          set_has_curlv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stLevelupHeroResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Role.stLevelupHeroResult.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional uint32 heroID = 2;
  if (has_heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->heroid(), output);
  }

  // optional uint32 curLv = 3;
  if (has_curlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->curlv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stLevelupHeroResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Role.stLevelupHeroResult.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional uint32 heroID = 2;
  if (has_heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->heroid(), target);
  }

  // optional uint32 curLv = 3;
  if (has_curlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->curlv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stLevelupHeroResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Role.stLevelupHeroResult.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional uint32 heroID = 2;
    if (has_heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heroid());
    }

    // optional uint32 curLv = 3;
    if (has_curlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curlv());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stLevelupHeroResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stLevelupHeroResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stLevelupHeroResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stLevelupHeroResult::MergeFrom(const stLevelupHeroResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_heroid()) {
      set_heroid(from.heroid());
    }
    if (from.has_curlv()) {
      set_curlv(from.curlv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stLevelupHeroResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stLevelupHeroResult::CopyFrom(const stLevelupHeroResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stLevelupHeroResult::IsInitialized() const {

  return true;
}

void stLevelupHeroResult::Swap(stLevelupHeroResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(heroid_, other->heroid_);
    std::swap(curlv_, other->curlv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stLevelupHeroResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stLevelupHeroResult_descriptor_;
  metadata.reflection = stLevelupHeroResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqHeroEvolution_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqHeroEvolution_ProtoModID_descriptor_;
}
bool stReqHeroEvolution_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqHeroEvolution_ProtoModID stReqHeroEvolution::ModID;
const stReqHeroEvolution_ProtoModID stReqHeroEvolution::ProtoModID_MIN;
const stReqHeroEvolution_ProtoModID stReqHeroEvolution::ProtoModID_MAX;
const int stReqHeroEvolution::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqHeroEvolution_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqHeroEvolution_ProtoFunID_descriptor_;
}
bool stReqHeroEvolution_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 33:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqHeroEvolution_ProtoFunID stReqHeroEvolution::FunID;
const stReqHeroEvolution_ProtoFunID stReqHeroEvolution::ProtoFunID_MIN;
const stReqHeroEvolution_ProtoFunID stReqHeroEvolution::ProtoFunID_MAX;
const int stReqHeroEvolution::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqHeroEvolution::kHeroIDFieldNumber;
#endif  // !_MSC_VER

stReqHeroEvolution::stReqHeroEvolution()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqHeroEvolution::InitAsDefaultInstance() {
}

stReqHeroEvolution::stReqHeroEvolution(const stReqHeroEvolution& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqHeroEvolution::SharedCtor() {
  _cached_size_ = 0;
  heroid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqHeroEvolution::~stReqHeroEvolution() {
  SharedDtor();
}

void stReqHeroEvolution::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqHeroEvolution::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqHeroEvolution::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqHeroEvolution_descriptor_;
}

const stReqHeroEvolution& stReqHeroEvolution::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stReqHeroEvolution* stReqHeroEvolution::default_instance_ = NULL;

stReqHeroEvolution* stReqHeroEvolution::New() const {
  return new stReqHeroEvolution;
}

void stReqHeroEvolution::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    heroid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqHeroEvolution::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 heroID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heroid_)));
          set_has_heroid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqHeroEvolution::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 heroID = 1;
  if (has_heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->heroid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqHeroEvolution::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 heroID = 1;
  if (has_heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->heroid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqHeroEvolution::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 heroID = 1;
    if (has_heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heroid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqHeroEvolution::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqHeroEvolution* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqHeroEvolution*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqHeroEvolution::MergeFrom(const stReqHeroEvolution& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_heroid()) {
      set_heroid(from.heroid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqHeroEvolution::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqHeroEvolution::CopyFrom(const stReqHeroEvolution& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqHeroEvolution::IsInitialized() const {

  return true;
}

void stReqHeroEvolution::Swap(stReqHeroEvolution* other) {
  if (other != this) {
    std::swap(heroid_, other->heroid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqHeroEvolution::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqHeroEvolution_descriptor_;
  metadata.reflection = stReqHeroEvolution_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stEvolutionHeroResult_Result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stEvolutionHeroResult_Result_descriptor_;
}
bool stEvolutionHeroResult_Result_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stEvolutionHeroResult_Result stEvolutionHeroResult::SUCCESS;
const stEvolutionHeroResult_Result stEvolutionHeroResult::NOT_ENOUGH_STONE;
const stEvolutionHeroResult_Result stEvolutionHeroResult::FULL_LEVEL;
const stEvolutionHeroResult_Result stEvolutionHeroResult::HERO_NOT_EXIST;
const stEvolutionHeroResult_Result stEvolutionHeroResult::INNER_ERROR;
const stEvolutionHeroResult_Result stEvolutionHeroResult::Result_MIN;
const stEvolutionHeroResult_Result stEvolutionHeroResult::Result_MAX;
const int stEvolutionHeroResult::Result_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stEvolutionHeroResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stEvolutionHeroResult_ProtoModID_descriptor_;
}
bool stEvolutionHeroResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stEvolutionHeroResult_ProtoModID stEvolutionHeroResult::ModID;
const stEvolutionHeroResult_ProtoModID stEvolutionHeroResult::ProtoModID_MIN;
const stEvolutionHeroResult_ProtoModID stEvolutionHeroResult::ProtoModID_MAX;
const int stEvolutionHeroResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stEvolutionHeroResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stEvolutionHeroResult_ProtoFunID_descriptor_;
}
bool stEvolutionHeroResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 34:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stEvolutionHeroResult_ProtoFunID stEvolutionHeroResult::FunID;
const stEvolutionHeroResult_ProtoFunID stEvolutionHeroResult::ProtoFunID_MIN;
const stEvolutionHeroResult_ProtoFunID stEvolutionHeroResult::ProtoFunID_MAX;
const int stEvolutionHeroResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stEvolutionHeroResult::kResultFieldNumber;
const int stEvolutionHeroResult::kHeroIDFieldNumber;
#endif  // !_MSC_VER

stEvolutionHeroResult::stEvolutionHeroResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stEvolutionHeroResult::InitAsDefaultInstance() {
}

stEvolutionHeroResult::stEvolutionHeroResult(const stEvolutionHeroResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stEvolutionHeroResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  heroid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stEvolutionHeroResult::~stEvolutionHeroResult() {
  SharedDtor();
}

void stEvolutionHeroResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stEvolutionHeroResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stEvolutionHeroResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stEvolutionHeroResult_descriptor_;
}

const stEvolutionHeroResult& stEvolutionHeroResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stEvolutionHeroResult* stEvolutionHeroResult::default_instance_ = NULL;

stEvolutionHeroResult* stEvolutionHeroResult::New() const {
  return new stEvolutionHeroResult;
}

void stEvolutionHeroResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
    heroid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stEvolutionHeroResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Role.stEvolutionHeroResult.Result result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Role::stEvolutionHeroResult_Result_IsValid(value)) {
            set_result(static_cast< ::Role::stEvolutionHeroResult_Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_heroID;
        break;
      }

      // optional uint32 heroID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_heroID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heroid_)));
          set_has_heroid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stEvolutionHeroResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Role.stEvolutionHeroResult.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional uint32 heroID = 2;
  if (has_heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->heroid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stEvolutionHeroResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Role.stEvolutionHeroResult.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional uint32 heroID = 2;
  if (has_heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->heroid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stEvolutionHeroResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Role.stEvolutionHeroResult.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional uint32 heroID = 2;
    if (has_heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heroid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stEvolutionHeroResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stEvolutionHeroResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stEvolutionHeroResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stEvolutionHeroResult::MergeFrom(const stEvolutionHeroResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_heroid()) {
      set_heroid(from.heroid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stEvolutionHeroResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stEvolutionHeroResult::CopyFrom(const stEvolutionHeroResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stEvolutionHeroResult::IsInitialized() const {

  return true;
}

void stEvolutionHeroResult::Swap(stEvolutionHeroResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(heroid_, other->heroid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stEvolutionHeroResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stEvolutionHeroResult_descriptor_;
  metadata.reflection = stEvolutionHeroResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqHeroStudySkill_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqHeroStudySkill_Type_descriptor_;
}
bool stReqHeroStudySkill_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqHeroStudySkill_Type stReqHeroStudySkill::USE_ITEM;
const stReqHeroStudySkill_Type stReqHeroStudySkill::USE_DIAMOND;
const stReqHeroStudySkill_Type stReqHeroStudySkill::Type_MIN;
const stReqHeroStudySkill_Type stReqHeroStudySkill::Type_MAX;
const int stReqHeroStudySkill::Type_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqHeroStudySkill_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqHeroStudySkill_ProtoModID_descriptor_;
}
bool stReqHeroStudySkill_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqHeroStudySkill_ProtoModID stReqHeroStudySkill::ModID;
const stReqHeroStudySkill_ProtoModID stReqHeroStudySkill::ProtoModID_MIN;
const stReqHeroStudySkill_ProtoModID stReqHeroStudySkill::ProtoModID_MAX;
const int stReqHeroStudySkill::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqHeroStudySkill_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqHeroStudySkill_ProtoFunID_descriptor_;
}
bool stReqHeroStudySkill_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 35:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqHeroStudySkill_ProtoFunID stReqHeroStudySkill::FunID;
const stReqHeroStudySkill_ProtoFunID stReqHeroStudySkill::ProtoFunID_MIN;
const stReqHeroStudySkill_ProtoFunID stReqHeroStudySkill::ProtoFunID_MAX;
const int stReqHeroStudySkill::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqHeroStudySkill::kHeroIDFieldNumber;
const int stReqHeroStudySkill::kTypeFieldNumber;
#endif  // !_MSC_VER

stReqHeroStudySkill::stReqHeroStudySkill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqHeroStudySkill::InitAsDefaultInstance() {
}

stReqHeroStudySkill::stReqHeroStudySkill(const stReqHeroStudySkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqHeroStudySkill::SharedCtor() {
  _cached_size_ = 0;
  heroid_ = 0u;
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqHeroStudySkill::~stReqHeroStudySkill() {
  SharedDtor();
}

void stReqHeroStudySkill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqHeroStudySkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqHeroStudySkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqHeroStudySkill_descriptor_;
}

const stReqHeroStudySkill& stReqHeroStudySkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stReqHeroStudySkill* stReqHeroStudySkill::default_instance_ = NULL;

stReqHeroStudySkill* stReqHeroStudySkill::New() const {
  return new stReqHeroStudySkill;
}

void stReqHeroStudySkill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    heroid_ = 0u;
    type_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqHeroStudySkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 heroID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heroid_)));
          set_has_heroid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .Role.stReqHeroStudySkill.Type type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Role::stReqHeroStudySkill_Type_IsValid(value)) {
            set_type(static_cast< ::Role::stReqHeroStudySkill_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqHeroStudySkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 heroID = 1;
  if (has_heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->heroid(), output);
  }

  // optional .Role.stReqHeroStudySkill.Type type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqHeroStudySkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 heroID = 1;
  if (has_heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->heroid(), target);
  }

  // optional .Role.stReqHeroStudySkill.Type type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqHeroStudySkill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 heroID = 1;
    if (has_heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heroid());
    }

    // optional .Role.stReqHeroStudySkill.Type type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqHeroStudySkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqHeroStudySkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqHeroStudySkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqHeroStudySkill::MergeFrom(const stReqHeroStudySkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_heroid()) {
      set_heroid(from.heroid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqHeroStudySkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqHeroStudySkill::CopyFrom(const stReqHeroStudySkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqHeroStudySkill::IsInitialized() const {

  return true;
}

void stReqHeroStudySkill::Swap(stReqHeroStudySkill* other) {
  if (other != this) {
    std::swap(heroid_, other->heroid_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqHeroStudySkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqHeroStudySkill_descriptor_;
  metadata.reflection = stReqHeroStudySkill_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stHeroStudySkillResult_Result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stHeroStudySkillResult_Result_descriptor_;
}
bool stHeroStudySkillResult_Result_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stHeroStudySkillResult_Result stHeroStudySkillResult::SUCCESS;
const stHeroStudySkillResult_Result stHeroStudySkillResult::NOT_ENOUGH_ITEM;
const stHeroStudySkillResult_Result stHeroStudySkillResult::NOT_ENOUGH_DIAMOND;
const stHeroStudySkillResult_Result stHeroStudySkillResult::USE_DIAMOND_NUM_NOT_ENOUGH;
const stHeroStudySkillResult_Result stHeroStudySkillResult::HERO_NOT_EXIST;
const stHeroStudySkillResult_Result stHeroStudySkillResult::INNER_ERROR;
const stHeroStudySkillResult_Result stHeroStudySkillResult::Result_MIN;
const stHeroStudySkillResult_Result stHeroStudySkillResult::Result_MAX;
const int stHeroStudySkillResult::Result_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stHeroStudySkillResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stHeroStudySkillResult_ProtoModID_descriptor_;
}
bool stHeroStudySkillResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stHeroStudySkillResult_ProtoModID stHeroStudySkillResult::ModID;
const stHeroStudySkillResult_ProtoModID stHeroStudySkillResult::ProtoModID_MIN;
const stHeroStudySkillResult_ProtoModID stHeroStudySkillResult::ProtoModID_MAX;
const int stHeroStudySkillResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stHeroStudySkillResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stHeroStudySkillResult_ProtoFunID_descriptor_;
}
bool stHeroStudySkillResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 36:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stHeroStudySkillResult_ProtoFunID stHeroStudySkillResult::FunID;
const stHeroStudySkillResult_ProtoFunID stHeroStudySkillResult::ProtoFunID_MIN;
const stHeroStudySkillResult_ProtoFunID stHeroStudySkillResult::ProtoFunID_MAX;
const int stHeroStudySkillResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stHeroStudySkillResult::kHeroIDFieldNumber;
const int stHeroStudySkillResult::kResultFieldNumber;
const int stHeroStudySkillResult::kSkillIDFieldNumber;
const int stHeroStudySkillResult::kSkillLvFieldNumber;
const int stHeroStudySkillResult::kUseDiamondNumFieldNumber;
#endif  // !_MSC_VER

stHeroStudySkillResult::stHeroStudySkillResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stHeroStudySkillResult::InitAsDefaultInstance() {
}

stHeroStudySkillResult::stHeroStudySkillResult(const stHeroStudySkillResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stHeroStudySkillResult::SharedCtor() {
  _cached_size_ = 0;
  heroid_ = 0u;
  result_ = 1;
  skillid_ = 0u;
  skilllv_ = 0u;
  usediamondnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stHeroStudySkillResult::~stHeroStudySkillResult() {
  SharedDtor();
}

void stHeroStudySkillResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stHeroStudySkillResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stHeroStudySkillResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stHeroStudySkillResult_descriptor_;
}

const stHeroStudySkillResult& stHeroStudySkillResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stHeroStudySkillResult* stHeroStudySkillResult::default_instance_ = NULL;

stHeroStudySkillResult* stHeroStudySkillResult::New() const {
  return new stHeroStudySkillResult;
}

void stHeroStudySkillResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    heroid_ = 0u;
    result_ = 1;
    skillid_ = 0u;
    skilllv_ = 0u;
    usediamondnum_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stHeroStudySkillResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 heroID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heroid_)));
          set_has_heroid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .Role.stHeroStudySkillResult.Result result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Role::stHeroStudySkillResult_Result_IsValid(value)) {
            set_result(static_cast< ::Role::stHeroStudySkillResult_Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_skillID;
        break;
      }

      // optional uint32 skillID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_skillLv;
        break;
      }

      // optional uint32 skillLv = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skilllv_)));
          set_has_skilllv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_useDiamondNum;
        break;
      }

      // optional uint32 useDiamondNum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_useDiamondNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usediamondnum_)));
          set_has_usediamondnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stHeroStudySkillResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 heroID = 1;
  if (has_heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->heroid(), output);
  }

  // optional .Role.stHeroStudySkillResult.Result result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  // optional uint32 skillID = 3;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->skillid(), output);
  }

  // optional uint32 skillLv = 4;
  if (has_skilllv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->skilllv(), output);
  }

  // optional uint32 useDiamondNum = 5;
  if (has_usediamondnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->usediamondnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stHeroStudySkillResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 heroID = 1;
  if (has_heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->heroid(), target);
  }

  // optional .Role.stHeroStudySkillResult.Result result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  // optional uint32 skillID = 3;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->skillid(), target);
  }

  // optional uint32 skillLv = 4;
  if (has_skilllv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->skilllv(), target);
  }

  // optional uint32 useDiamondNum = 5;
  if (has_usediamondnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->usediamondnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stHeroStudySkillResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 heroID = 1;
    if (has_heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heroid());
    }

    // optional .Role.stHeroStudySkillResult.Result result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional uint32 skillID = 3;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillid());
    }

    // optional uint32 skillLv = 4;
    if (has_skilllv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skilllv());
    }

    // optional uint32 useDiamondNum = 5;
    if (has_usediamondnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->usediamondnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stHeroStudySkillResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stHeroStudySkillResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stHeroStudySkillResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stHeroStudySkillResult::MergeFrom(const stHeroStudySkillResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_heroid()) {
      set_heroid(from.heroid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_skilllv()) {
      set_skilllv(from.skilllv());
    }
    if (from.has_usediamondnum()) {
      set_usediamondnum(from.usediamondnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stHeroStudySkillResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stHeroStudySkillResult::CopyFrom(const stHeroStudySkillResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stHeroStudySkillResult::IsInitialized() const {

  return true;
}

void stHeroStudySkillResult::Swap(stHeroStudySkillResult* other) {
  if (other != this) {
    std::swap(heroid_, other->heroid_);
    std::swap(result_, other->result_);
    std::swap(skillid_, other->skillid_);
    std::swap(skilllv_, other->skilllv_);
    std::swap(usediamondnum_, other->usediamondnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stHeroStudySkillResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stHeroStudySkillResult_descriptor_;
  metadata.reflection = stHeroStudySkillResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqRefineHeroSkill_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqRefineHeroSkill_ProtoModID_descriptor_;
}
bool stReqRefineHeroSkill_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqRefineHeroSkill_ProtoModID stReqRefineHeroSkill::ModID;
const stReqRefineHeroSkill_ProtoModID stReqRefineHeroSkill::ProtoModID_MIN;
const stReqRefineHeroSkill_ProtoModID stReqRefineHeroSkill::ProtoModID_MAX;
const int stReqRefineHeroSkill::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqRefineHeroSkill_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqRefineHeroSkill_ProtoFunID_descriptor_;
}
bool stReqRefineHeroSkill_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 37:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqRefineHeroSkill_ProtoFunID stReqRefineHeroSkill::FunID;
const stReqRefineHeroSkill_ProtoFunID stReqRefineHeroSkill::ProtoFunID_MIN;
const stReqRefineHeroSkill_ProtoFunID stReqRefineHeroSkill::ProtoFunID_MAX;
const int stReqRefineHeroSkill::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqRefineHeroSkill::kHeroIDFieldNumber;
#endif  // !_MSC_VER

stReqRefineHeroSkill::stReqRefineHeroSkill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqRefineHeroSkill::InitAsDefaultInstance() {
}

stReqRefineHeroSkill::stReqRefineHeroSkill(const stReqRefineHeroSkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqRefineHeroSkill::SharedCtor() {
  _cached_size_ = 0;
  heroid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqRefineHeroSkill::~stReqRefineHeroSkill() {
  SharedDtor();
}

void stReqRefineHeroSkill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqRefineHeroSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqRefineHeroSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqRefineHeroSkill_descriptor_;
}

const stReqRefineHeroSkill& stReqRefineHeroSkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stReqRefineHeroSkill* stReqRefineHeroSkill::default_instance_ = NULL;

stReqRefineHeroSkill* stReqRefineHeroSkill::New() const {
  return new stReqRefineHeroSkill;
}

void stReqRefineHeroSkill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    heroid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqRefineHeroSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 heroID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heroid_)));
          set_has_heroid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqRefineHeroSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 heroID = 1;
  if (has_heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->heroid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqRefineHeroSkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 heroID = 1;
  if (has_heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->heroid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqRefineHeroSkill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 heroID = 1;
    if (has_heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heroid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqRefineHeroSkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqRefineHeroSkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqRefineHeroSkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqRefineHeroSkill::MergeFrom(const stReqRefineHeroSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_heroid()) {
      set_heroid(from.heroid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqRefineHeroSkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqRefineHeroSkill::CopyFrom(const stReqRefineHeroSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqRefineHeroSkill::IsInitialized() const {

  return true;
}

void stReqRefineHeroSkill::Swap(stReqRefineHeroSkill* other) {
  if (other != this) {
    std::swap(heroid_, other->heroid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqRefineHeroSkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqRefineHeroSkill_descriptor_;
  metadata.reflection = stReqRefineHeroSkill_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRefineHeroSkillResult_Result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRefineHeroSkillResult_Result_descriptor_;
}
bool stRefineHeroSkillResult_Result_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRefineHeroSkillResult_Result stRefineHeroSkillResult::SUCCESS;
const stRefineHeroSkillResult_Result stRefineHeroSkillResult::HAS_NO_STUDY_SKILL;
const stRefineHeroSkillResult_Result stRefineHeroSkillResult::HERO_NOT_EXIST;
const stRefineHeroSkillResult_Result stRefineHeroSkillResult::INNER_ERROR;
const stRefineHeroSkillResult_Result stRefineHeroSkillResult::Result_MIN;
const stRefineHeroSkillResult_Result stRefineHeroSkillResult::Result_MAX;
const int stRefineHeroSkillResult::Result_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRefineHeroSkillResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRefineHeroSkillResult_ProtoModID_descriptor_;
}
bool stRefineHeroSkillResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRefineHeroSkillResult_ProtoModID stRefineHeroSkillResult::ModID;
const stRefineHeroSkillResult_ProtoModID stRefineHeroSkillResult::ProtoModID_MIN;
const stRefineHeroSkillResult_ProtoModID stRefineHeroSkillResult::ProtoModID_MAX;
const int stRefineHeroSkillResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRefineHeroSkillResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRefineHeroSkillResult_ProtoFunID_descriptor_;
}
bool stRefineHeroSkillResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 38:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRefineHeroSkillResult_ProtoFunID stRefineHeroSkillResult::FunID;
const stRefineHeroSkillResult_ProtoFunID stRefineHeroSkillResult::ProtoFunID_MIN;
const stRefineHeroSkillResult_ProtoFunID stRefineHeroSkillResult::ProtoFunID_MAX;
const int stRefineHeroSkillResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRefineHeroSkillResult::kHeroIDFieldNumber;
const int stRefineHeroSkillResult::kResultFieldNumber;
#endif  // !_MSC_VER

stRefineHeroSkillResult::stRefineHeroSkillResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRefineHeroSkillResult::InitAsDefaultInstance() {
}

stRefineHeroSkillResult::stRefineHeroSkillResult(const stRefineHeroSkillResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRefineHeroSkillResult::SharedCtor() {
  _cached_size_ = 0;
  heroid_ = 0u;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRefineHeroSkillResult::~stRefineHeroSkillResult() {
  SharedDtor();
}

void stRefineHeroSkillResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRefineHeroSkillResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRefineHeroSkillResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRefineHeroSkillResult_descriptor_;
}

const stRefineHeroSkillResult& stRefineHeroSkillResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stRefineHeroSkillResult* stRefineHeroSkillResult::default_instance_ = NULL;

stRefineHeroSkillResult* stRefineHeroSkillResult::New() const {
  return new stRefineHeroSkillResult;
}

void stRefineHeroSkillResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    heroid_ = 0u;
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRefineHeroSkillResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 heroID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heroid_)));
          set_has_heroid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .Role.stRefineHeroSkillResult.Result result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Role::stRefineHeroSkillResult_Result_IsValid(value)) {
            set_result(static_cast< ::Role::stRefineHeroSkillResult_Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRefineHeroSkillResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 heroID = 1;
  if (has_heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->heroid(), output);
  }

  // optional .Role.stRefineHeroSkillResult.Result result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRefineHeroSkillResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 heroID = 1;
  if (has_heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->heroid(), target);
  }

  // optional .Role.stRefineHeroSkillResult.Result result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRefineHeroSkillResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 heroID = 1;
    if (has_heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heroid());
    }

    // optional .Role.stRefineHeroSkillResult.Result result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRefineHeroSkillResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRefineHeroSkillResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRefineHeroSkillResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRefineHeroSkillResult::MergeFrom(const stRefineHeroSkillResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_heroid()) {
      set_heroid(from.heroid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRefineHeroSkillResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRefineHeroSkillResult::CopyFrom(const stRefineHeroSkillResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRefineHeroSkillResult::IsInitialized() const {

  return true;
}

void stRefineHeroSkillResult::Swap(stRefineHeroSkillResult* other) {
  if (other != this) {
    std::swap(heroid_, other->heroid_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRefineHeroSkillResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRefineHeroSkillResult_descriptor_;
  metadata.reflection = stRefineHeroSkillResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stSynSkillExp_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynSkillExp_ProtoModID_descriptor_;
}
bool stSynSkillExp_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynSkillExp_ProtoModID stSynSkillExp::ModID;
const stSynSkillExp_ProtoModID stSynSkillExp::ProtoModID_MIN;
const stSynSkillExp_ProtoModID stSynSkillExp::ProtoModID_MAX;
const int stSynSkillExp::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSynSkillExp_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynSkillExp_ProtoFunID_descriptor_;
}
bool stSynSkillExp_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 39:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynSkillExp_ProtoFunID stSynSkillExp::FunID;
const stSynSkillExp_ProtoFunID stSynSkillExp::ProtoFunID_MIN;
const stSynSkillExp_ProtoFunID stSynSkillExp::ProtoFunID_MAX;
const int stSynSkillExp::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stSynSkillExp::kCurExpFieldNumber;
#endif  // !_MSC_VER

stSynSkillExp::stSynSkillExp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSynSkillExp::InitAsDefaultInstance() {
}

stSynSkillExp::stSynSkillExp(const stSynSkillExp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSynSkillExp::SharedCtor() {
  _cached_size_ = 0;
  curexp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSynSkillExp::~stSynSkillExp() {
  SharedDtor();
}

void stSynSkillExp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stSynSkillExp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSynSkillExp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynSkillExp_descriptor_;
}

const stSynSkillExp& stSynSkillExp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stSynSkillExp* stSynSkillExp::default_instance_ = NULL;

stSynSkillExp* stSynSkillExp::New() const {
  return new stSynSkillExp;
}

void stSynSkillExp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    curexp_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSynSkillExp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 curExp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curexp_)));
          set_has_curexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSynSkillExp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 curExp = 1;
  if (has_curexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->curexp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSynSkillExp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 curExp = 1;
  if (has_curexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->curexp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSynSkillExp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 curExp = 1;
    if (has_curexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curexp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSynSkillExp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSynSkillExp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSynSkillExp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSynSkillExp::MergeFrom(const stSynSkillExp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_curexp()) {
      set_curexp(from.curexp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSynSkillExp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSynSkillExp::CopyFrom(const stSynSkillExp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSynSkillExp::IsInitialized() const {

  return true;
}

void stSynSkillExp::Swap(stSynSkillExp* other) {
  if (other != this) {
    std::swap(curexp_, other->curexp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSynSkillExp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSynSkillExp_descriptor_;
  metadata.reflection = stSynSkillExp_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqReplaceHeroSkill_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqReplaceHeroSkill_ProtoModID_descriptor_;
}
bool stReqReplaceHeroSkill_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqReplaceHeroSkill_ProtoModID stReqReplaceHeroSkill::ModID;
const stReqReplaceHeroSkill_ProtoModID stReqReplaceHeroSkill::ProtoModID_MIN;
const stReqReplaceHeroSkill_ProtoModID stReqReplaceHeroSkill::ProtoModID_MAX;
const int stReqReplaceHeroSkill::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqReplaceHeroSkill_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqReplaceHeroSkill_ProtoFunID_descriptor_;
}
bool stReqReplaceHeroSkill_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 40:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqReplaceHeroSkill_ProtoFunID stReqReplaceHeroSkill::FunID;
const stReqReplaceHeroSkill_ProtoFunID stReqReplaceHeroSkill::ProtoFunID_MIN;
const stReqReplaceHeroSkill_ProtoFunID stReqReplaceHeroSkill::ProtoFunID_MAX;
const int stReqReplaceHeroSkill::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqReplaceHeroSkill::kHeroIDFieldNumber;
const int stReqReplaceHeroSkill::kPosFieldNumber;
#endif  // !_MSC_VER

stReqReplaceHeroSkill::stReqReplaceHeroSkill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqReplaceHeroSkill::InitAsDefaultInstance() {
}

stReqReplaceHeroSkill::stReqReplaceHeroSkill(const stReqReplaceHeroSkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqReplaceHeroSkill::SharedCtor() {
  _cached_size_ = 0;
  heroid_ = 0u;
  pos_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqReplaceHeroSkill::~stReqReplaceHeroSkill() {
  SharedDtor();
}

void stReqReplaceHeroSkill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqReplaceHeroSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqReplaceHeroSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqReplaceHeroSkill_descriptor_;
}

const stReqReplaceHeroSkill& stReqReplaceHeroSkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stReqReplaceHeroSkill* stReqReplaceHeroSkill::default_instance_ = NULL;

stReqReplaceHeroSkill* stReqReplaceHeroSkill::New() const {
  return new stReqReplaceHeroSkill;
}

void stReqReplaceHeroSkill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    heroid_ = 0u;
    pos_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqReplaceHeroSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 heroID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heroid_)));
          set_has_heroid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pos;
        break;
      }

      // optional uint32 pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqReplaceHeroSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 heroID = 1;
  if (has_heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->heroid(), output);
  }

  // optional uint32 pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqReplaceHeroSkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 heroID = 1;
  if (has_heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->heroid(), target);
  }

  // optional uint32 pos = 2;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqReplaceHeroSkill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 heroID = 1;
    if (has_heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heroid());
    }

    // optional uint32 pos = 2;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqReplaceHeroSkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqReplaceHeroSkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqReplaceHeroSkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqReplaceHeroSkill::MergeFrom(const stReqReplaceHeroSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_heroid()) {
      set_heroid(from.heroid());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqReplaceHeroSkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqReplaceHeroSkill::CopyFrom(const stReqReplaceHeroSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqReplaceHeroSkill::IsInitialized() const {

  return true;
}

void stReqReplaceHeroSkill::Swap(stReqReplaceHeroSkill* other) {
  if (other != this) {
    std::swap(heroid_, other->heroid_);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqReplaceHeroSkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqReplaceHeroSkill_descriptor_;
  metadata.reflection = stReqReplaceHeroSkill_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReplaceHeroSkillResult_Result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReplaceHeroSkillResult_Result_descriptor_;
}
bool stReplaceHeroSkillResult_Result_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReplaceHeroSkillResult_Result stReplaceHeroSkillResult::SUCCESS;
const stReplaceHeroSkillResult_Result stReplaceHeroSkillResult::HERO_NOT_EXIST;
const stReplaceHeroSkillResult_Result stReplaceHeroSkillResult::STUDY_SKILL_NOT_EXIST;
const stReplaceHeroSkillResult_Result stReplaceHeroSkillResult::SKILL_HAS_EQUIP;
const stReplaceHeroSkillResult_Result stReplaceHeroSkillResult::INNER_ERRRO;
const stReplaceHeroSkillResult_Result stReplaceHeroSkillResult::Result_MIN;
const stReplaceHeroSkillResult_Result stReplaceHeroSkillResult::Result_MAX;
const int stReplaceHeroSkillResult::Result_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReplaceHeroSkillResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReplaceHeroSkillResult_ProtoModID_descriptor_;
}
bool stReplaceHeroSkillResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReplaceHeroSkillResult_ProtoModID stReplaceHeroSkillResult::ModID;
const stReplaceHeroSkillResult_ProtoModID stReplaceHeroSkillResult::ProtoModID_MIN;
const stReplaceHeroSkillResult_ProtoModID stReplaceHeroSkillResult::ProtoModID_MAX;
const int stReplaceHeroSkillResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReplaceHeroSkillResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReplaceHeroSkillResult_ProtoFunID_descriptor_;
}
bool stReplaceHeroSkillResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 41:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReplaceHeroSkillResult_ProtoFunID stReplaceHeroSkillResult::FunID;
const stReplaceHeroSkillResult_ProtoFunID stReplaceHeroSkillResult::ProtoFunID_MIN;
const stReplaceHeroSkillResult_ProtoFunID stReplaceHeroSkillResult::ProtoFunID_MAX;
const int stReplaceHeroSkillResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReplaceHeroSkillResult::kHeroIDFieldNumber;
const int stReplaceHeroSkillResult::kPosFieldNumber;
const int stReplaceHeroSkillResult::kSkillIDFieldNumber;
const int stReplaceHeroSkillResult::kResultFieldNumber;
#endif  // !_MSC_VER

stReplaceHeroSkillResult::stReplaceHeroSkillResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReplaceHeroSkillResult::InitAsDefaultInstance() {
}

stReplaceHeroSkillResult::stReplaceHeroSkillResult(const stReplaceHeroSkillResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReplaceHeroSkillResult::SharedCtor() {
  _cached_size_ = 0;
  heroid_ = 0u;
  pos_ = 0u;
  skillid_ = 0u;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReplaceHeroSkillResult::~stReplaceHeroSkillResult() {
  SharedDtor();
}

void stReplaceHeroSkillResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReplaceHeroSkillResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReplaceHeroSkillResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReplaceHeroSkillResult_descriptor_;
}

const stReplaceHeroSkillResult& stReplaceHeroSkillResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stReplaceHeroSkillResult* stReplaceHeroSkillResult::default_instance_ = NULL;

stReplaceHeroSkillResult* stReplaceHeroSkillResult::New() const {
  return new stReplaceHeroSkillResult;
}

void stReplaceHeroSkillResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    heroid_ = 0u;
    pos_ = 0u;
    skillid_ = 0u;
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReplaceHeroSkillResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 heroID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heroid_)));
          set_has_heroid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pos;
        break;
      }

      // optional uint32 pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_skillID;
        break;
      }

      // optional uint32 skillID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_result;
        break;
      }

      // optional .Role.stReplaceHeroSkillResult.Result result = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Role::stReplaceHeroSkillResult_Result_IsValid(value)) {
            set_result(static_cast< ::Role::stReplaceHeroSkillResult_Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReplaceHeroSkillResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 heroID = 1;
  if (has_heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->heroid(), output);
  }

  // optional uint32 pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pos(), output);
  }

  // optional uint32 skillID = 3;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->skillid(), output);
  }

  // optional .Role.stReplaceHeroSkillResult.Result result = 4;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReplaceHeroSkillResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 heroID = 1;
  if (has_heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->heroid(), target);
  }

  // optional uint32 pos = 2;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pos(), target);
  }

  // optional uint32 skillID = 3;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->skillid(), target);
  }

  // optional .Role.stReplaceHeroSkillResult.Result result = 4;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReplaceHeroSkillResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 heroID = 1;
    if (has_heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heroid());
    }

    // optional uint32 pos = 2;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

    // optional uint32 skillID = 3;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillid());
    }

    // optional .Role.stReplaceHeroSkillResult.Result result = 4;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReplaceHeroSkillResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReplaceHeroSkillResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReplaceHeroSkillResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReplaceHeroSkillResult::MergeFrom(const stReplaceHeroSkillResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_heroid()) {
      set_heroid(from.heroid());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReplaceHeroSkillResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReplaceHeroSkillResult::CopyFrom(const stReplaceHeroSkillResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReplaceHeroSkillResult::IsInitialized() const {

  return true;
}

void stReplaceHeroSkillResult::Swap(stReplaceHeroSkillResult* other) {
  if (other != this) {
    std::swap(heroid_, other->heroid_);
    std::swap(pos_, other->pos_);
    std::swap(skillid_, other->skillid_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReplaceHeroSkillResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReplaceHeroSkillResult_descriptor_;
  metadata.reflection = stReplaceHeroSkillResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqUpgradeHeroSkill_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqUpgradeHeroSkill_ProtoModID_descriptor_;
}
bool stReqUpgradeHeroSkill_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqUpgradeHeroSkill_ProtoModID stReqUpgradeHeroSkill::ModID;
const stReqUpgradeHeroSkill_ProtoModID stReqUpgradeHeroSkill::ProtoModID_MIN;
const stReqUpgradeHeroSkill_ProtoModID stReqUpgradeHeroSkill::ProtoModID_MAX;
const int stReqUpgradeHeroSkill::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqUpgradeHeroSkill_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqUpgradeHeroSkill_ProtoFunID_descriptor_;
}
bool stReqUpgradeHeroSkill_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 42:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqUpgradeHeroSkill_ProtoFunID stReqUpgradeHeroSkill::FunID;
const stReqUpgradeHeroSkill_ProtoFunID stReqUpgradeHeroSkill::ProtoFunID_MIN;
const stReqUpgradeHeroSkill_ProtoFunID stReqUpgradeHeroSkill::ProtoFunID_MAX;
const int stReqUpgradeHeroSkill::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqUpgradeHeroSkill::kHeroIDFieldNumber;
const int stReqUpgradeHeroSkill::kPosFieldNumber;
#endif  // !_MSC_VER

stReqUpgradeHeroSkill::stReqUpgradeHeroSkill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqUpgradeHeroSkill::InitAsDefaultInstance() {
}

stReqUpgradeHeroSkill::stReqUpgradeHeroSkill(const stReqUpgradeHeroSkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqUpgradeHeroSkill::SharedCtor() {
  _cached_size_ = 0;
  heroid_ = 0u;
  pos_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqUpgradeHeroSkill::~stReqUpgradeHeroSkill() {
  SharedDtor();
}

void stReqUpgradeHeroSkill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqUpgradeHeroSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqUpgradeHeroSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqUpgradeHeroSkill_descriptor_;
}

const stReqUpgradeHeroSkill& stReqUpgradeHeroSkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stReqUpgradeHeroSkill* stReqUpgradeHeroSkill::default_instance_ = NULL;

stReqUpgradeHeroSkill* stReqUpgradeHeroSkill::New() const {
  return new stReqUpgradeHeroSkill;
}

void stReqUpgradeHeroSkill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    heroid_ = 0u;
    pos_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqUpgradeHeroSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 heroID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heroid_)));
          set_has_heroid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pos;
        break;
      }

      // optional uint32 pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqUpgradeHeroSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 heroID = 1;
  if (has_heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->heroid(), output);
  }

  // optional uint32 pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqUpgradeHeroSkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 heroID = 1;
  if (has_heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->heroid(), target);
  }

  // optional uint32 pos = 2;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqUpgradeHeroSkill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 heroID = 1;
    if (has_heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heroid());
    }

    // optional uint32 pos = 2;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqUpgradeHeroSkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqUpgradeHeroSkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqUpgradeHeroSkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqUpgradeHeroSkill::MergeFrom(const stReqUpgradeHeroSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_heroid()) {
      set_heroid(from.heroid());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqUpgradeHeroSkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqUpgradeHeroSkill::CopyFrom(const stReqUpgradeHeroSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqUpgradeHeroSkill::IsInitialized() const {

  return true;
}

void stReqUpgradeHeroSkill::Swap(stReqUpgradeHeroSkill* other) {
  if (other != this) {
    std::swap(heroid_, other->heroid_);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqUpgradeHeroSkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqUpgradeHeroSkill_descriptor_;
  metadata.reflection = stReqUpgradeHeroSkill_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stUpgradeHeroSkillResult_Result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUpgradeHeroSkillResult_Result_descriptor_;
}
bool stUpgradeHeroSkillResult_Result_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stUpgradeHeroSkillResult_Result stUpgradeHeroSkillResult::SUCCESS;
const stUpgradeHeroSkillResult_Result stUpgradeHeroSkillResult::NOT_ENOUGH_EXP;
const stUpgradeHeroSkillResult_Result stUpgradeHeroSkillResult::HERO_NOT_EXIST;
const stUpgradeHeroSkillResult_Result stUpgradeHeroSkillResult::SKILL_NOT_EXIST;
const stUpgradeHeroSkillResult_Result stUpgradeHeroSkillResult::INNER_ERROR;
const stUpgradeHeroSkillResult_Result stUpgradeHeroSkillResult::Result_MIN;
const stUpgradeHeroSkillResult_Result stUpgradeHeroSkillResult::Result_MAX;
const int stUpgradeHeroSkillResult::Result_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stUpgradeHeroSkillResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUpgradeHeroSkillResult_ProtoModID_descriptor_;
}
bool stUpgradeHeroSkillResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stUpgradeHeroSkillResult_ProtoModID stUpgradeHeroSkillResult::ModID;
const stUpgradeHeroSkillResult_ProtoModID stUpgradeHeroSkillResult::ProtoModID_MIN;
const stUpgradeHeroSkillResult_ProtoModID stUpgradeHeroSkillResult::ProtoModID_MAX;
const int stUpgradeHeroSkillResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stUpgradeHeroSkillResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUpgradeHeroSkillResult_ProtoFunID_descriptor_;
}
bool stUpgradeHeroSkillResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 43:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stUpgradeHeroSkillResult_ProtoFunID stUpgradeHeroSkillResult::FunID;
const stUpgradeHeroSkillResult_ProtoFunID stUpgradeHeroSkillResult::ProtoFunID_MIN;
const stUpgradeHeroSkillResult_ProtoFunID stUpgradeHeroSkillResult::ProtoFunID_MAX;
const int stUpgradeHeroSkillResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stUpgradeHeroSkillResult::kHeroIDFieldNumber;
const int stUpgradeHeroSkillResult::kSkillIDFieldNumber;
const int stUpgradeHeroSkillResult::kSkillLvFieldNumber;
const int stUpgradeHeroSkillResult::kResultFieldNumber;
#endif  // !_MSC_VER

stUpgradeHeroSkillResult::stUpgradeHeroSkillResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stUpgradeHeroSkillResult::InitAsDefaultInstance() {
}

stUpgradeHeroSkillResult::stUpgradeHeroSkillResult(const stUpgradeHeroSkillResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stUpgradeHeroSkillResult::SharedCtor() {
  _cached_size_ = 0;
  heroid_ = 0u;
  skillid_ = 0u;
  skilllv_ = 0u;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stUpgradeHeroSkillResult::~stUpgradeHeroSkillResult() {
  SharedDtor();
}

void stUpgradeHeroSkillResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stUpgradeHeroSkillResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stUpgradeHeroSkillResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUpgradeHeroSkillResult_descriptor_;
}

const stUpgradeHeroSkillResult& stUpgradeHeroSkillResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stUpgradeHeroSkillResult* stUpgradeHeroSkillResult::default_instance_ = NULL;

stUpgradeHeroSkillResult* stUpgradeHeroSkillResult::New() const {
  return new stUpgradeHeroSkillResult;
}

void stUpgradeHeroSkillResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    heroid_ = 0u;
    skillid_ = 0u;
    skilllv_ = 0u;
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stUpgradeHeroSkillResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 heroID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heroid_)));
          set_has_heroid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skillID;
        break;
      }

      // optional uint32 skillID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_skillLv;
        break;
      }

      // optional uint32 skillLv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skilllv_)));
          set_has_skilllv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_result;
        break;
      }

      // optional .Role.stUpgradeHeroSkillResult.Result result = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Role::stUpgradeHeroSkillResult_Result_IsValid(value)) {
            set_result(static_cast< ::Role::stUpgradeHeroSkillResult_Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stUpgradeHeroSkillResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 heroID = 1;
  if (has_heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->heroid(), output);
  }

  // optional uint32 skillID = 2;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->skillid(), output);
  }

  // optional uint32 skillLv = 3;
  if (has_skilllv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->skilllv(), output);
  }

  // optional .Role.stUpgradeHeroSkillResult.Result result = 4;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stUpgradeHeroSkillResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 heroID = 1;
  if (has_heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->heroid(), target);
  }

  // optional uint32 skillID = 2;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->skillid(), target);
  }

  // optional uint32 skillLv = 3;
  if (has_skilllv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->skilllv(), target);
  }

  // optional .Role.stUpgradeHeroSkillResult.Result result = 4;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stUpgradeHeroSkillResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 heroID = 1;
    if (has_heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heroid());
    }

    // optional uint32 skillID = 2;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillid());
    }

    // optional uint32 skillLv = 3;
    if (has_skilllv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skilllv());
    }

    // optional .Role.stUpgradeHeroSkillResult.Result result = 4;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stUpgradeHeroSkillResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stUpgradeHeroSkillResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stUpgradeHeroSkillResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stUpgradeHeroSkillResult::MergeFrom(const stUpgradeHeroSkillResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_heroid()) {
      set_heroid(from.heroid());
    }
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_skilllv()) {
      set_skilllv(from.skilllv());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stUpgradeHeroSkillResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stUpgradeHeroSkillResult::CopyFrom(const stUpgradeHeroSkillResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stUpgradeHeroSkillResult::IsInitialized() const {

  return true;
}

void stUpgradeHeroSkillResult::Swap(stUpgradeHeroSkillResult* other) {
  if (other != this) {
    std::swap(heroid_, other->heroid_);
    std::swap(skillid_, other->skillid_);
    std::swap(skilllv_, other->skilllv_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stUpgradeHeroSkillResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stUpgradeHeroSkillResult_descriptor_;
  metadata.reflection = stUpgradeHeroSkillResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqSellItem_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqSellItem_ProtoModID_descriptor_;
}
bool stReqSellItem_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqSellItem_ProtoModID stReqSellItem::ModID;
const stReqSellItem_ProtoModID stReqSellItem::ProtoModID_MIN;
const stReqSellItem_ProtoModID stReqSellItem::ProtoModID_MAX;
const int stReqSellItem::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqSellItem_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqSellItem_ProtoFunID_descriptor_;
}
bool stReqSellItem_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 44:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqSellItem_ProtoFunID stReqSellItem::FunID;
const stReqSellItem_ProtoFunID stReqSellItem::ProtoFunID_MIN;
const stReqSellItem_ProtoFunID stReqSellItem::ProtoFunID_MAX;
const int stReqSellItem::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqSellItem::kBagTypeFieldNumber;
const int stReqSellItem::kInstanceIDFieldNumber;
const int stReqSellItem::kNumFieldNumber;
#endif  // !_MSC_VER

stReqSellItem::stReqSellItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqSellItem::InitAsDefaultInstance() {
}

stReqSellItem::stReqSellItem(const stReqSellItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqSellItem::SharedCtor() {
  _cached_size_ = 0;
  bagtype_ = 0u;
  instanceid_ = GOOGLE_ULONGLONG(0);
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqSellItem::~stReqSellItem() {
  SharedDtor();
}

void stReqSellItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqSellItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqSellItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqSellItem_descriptor_;
}

const stReqSellItem& stReqSellItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stReqSellItem* stReqSellItem::default_instance_ = NULL;

stReqSellItem* stReqSellItem::New() const {
  return new stReqSellItem;
}

void stReqSellItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bagtype_ = 0u;
    instanceid_ = GOOGLE_ULONGLONG(0);
    num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqSellItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 bagType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bagtype_)));
          set_has_bagtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_instanceID;
        break;
      }

      // optional uint64 instanceID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_instanceID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &instanceid_)));
          set_has_instanceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }

      // optional uint32 num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqSellItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 bagType = 1;
  if (has_bagtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bagtype(), output);
  }

  // optional uint64 instanceID = 2;
  if (has_instanceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->instanceid(), output);
  }

  // optional uint32 num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqSellItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 bagType = 1;
  if (has_bagtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bagtype(), target);
  }

  // optional uint64 instanceID = 2;
  if (has_instanceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->instanceid(), target);
  }

  // optional uint32 num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqSellItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 bagType = 1;
    if (has_bagtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bagtype());
    }

    // optional uint64 instanceID = 2;
    if (has_instanceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->instanceid());
    }

    // optional uint32 num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqSellItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqSellItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqSellItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqSellItem::MergeFrom(const stReqSellItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bagtype()) {
      set_bagtype(from.bagtype());
    }
    if (from.has_instanceid()) {
      set_instanceid(from.instanceid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqSellItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqSellItem::CopyFrom(const stReqSellItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqSellItem::IsInitialized() const {

  return true;
}

void stReqSellItem::Swap(stReqSellItem* other) {
  if (other != this) {
    std::swap(bagtype_, other->bagtype_);
    std::swap(instanceid_, other->instanceid_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqSellItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqSellItem_descriptor_;
  metadata.reflection = stReqSellItem_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stSellItemResult_Result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSellItemResult_Result_descriptor_;
}
bool stSellItemResult_Result_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSellItemResult_Result stSellItemResult::SUCCESS;
const stSellItemResult_Result stSellItemResult::NOT_EXIST;
const stSellItemResult_Result stSellItemResult::CAN_NOT_SELL;
const stSellItemResult_Result stSellItemResult::Result_MIN;
const stSellItemResult_Result stSellItemResult::Result_MAX;
const int stSellItemResult::Result_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSellItemResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSellItemResult_ProtoModID_descriptor_;
}
bool stSellItemResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSellItemResult_ProtoModID stSellItemResult::ModID;
const stSellItemResult_ProtoModID stSellItemResult::ProtoModID_MIN;
const stSellItemResult_ProtoModID stSellItemResult::ProtoModID_MAX;
const int stSellItemResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSellItemResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSellItemResult_ProtoFunID_descriptor_;
}
bool stSellItemResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 45:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSellItemResult_ProtoFunID stSellItemResult::FunID;
const stSellItemResult_ProtoFunID stSellItemResult::ProtoFunID_MIN;
const stSellItemResult_ProtoFunID stSellItemResult::ProtoFunID_MAX;
const int stSellItemResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stSellItemResult::kResultFieldNumber;
#endif  // !_MSC_VER

stSellItemResult::stSellItemResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSellItemResult::InitAsDefaultInstance() {
}

stSellItemResult::stSellItemResult(const stSellItemResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSellItemResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSellItemResult::~stSellItemResult() {
  SharedDtor();
}

void stSellItemResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stSellItemResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSellItemResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSellItemResult_descriptor_;
}

const stSellItemResult& stSellItemResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stSellItemResult* stSellItemResult::default_instance_ = NULL;

stSellItemResult* stSellItemResult::New() const {
  return new stSellItemResult;
}

void stSellItemResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSellItemResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Role.stSellItemResult.Result result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Role::stSellItemResult_Result_IsValid(value)) {
            set_result(static_cast< ::Role::stSellItemResult_Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSellItemResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Role.stSellItemResult.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSellItemResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Role.stSellItemResult.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSellItemResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Role.stSellItemResult.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSellItemResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSellItemResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSellItemResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSellItemResult::MergeFrom(const stSellItemResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSellItemResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSellItemResult::CopyFrom(const stSellItemResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSellItemResult::IsInitialized() const {

  return true;
}

void stSellItemResult::Swap(stSellItemResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSellItemResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSellItemResult_descriptor_;
  metadata.reflection = stSellItemResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqRaiseItem_eRaiseType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqRaiseItem_eRaiseType_descriptor_;
}
bool stReqRaiseItem_eRaiseType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqRaiseItem_eRaiseType stReqRaiseItem::USE_STONE;
const stReqRaiseItem_eRaiseType stReqRaiseItem::USE_EQUIP;
const stReqRaiseItem_eRaiseType stReqRaiseItem::eRaiseType_MIN;
const stReqRaiseItem_eRaiseType stReqRaiseItem::eRaiseType_MAX;
const int stReqRaiseItem::eRaiseType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqRaiseItem_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqRaiseItem_ProtoModID_descriptor_;
}
bool stReqRaiseItem_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqRaiseItem_ProtoModID stReqRaiseItem::ModID;
const stReqRaiseItem_ProtoModID stReqRaiseItem::ProtoModID_MIN;
const stReqRaiseItem_ProtoModID stReqRaiseItem::ProtoModID_MAX;
const int stReqRaiseItem::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqRaiseItem_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqRaiseItem_ProtoFunID_descriptor_;
}
bool stReqRaiseItem_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 46:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqRaiseItem_ProtoFunID stReqRaiseItem::FunID;
const stReqRaiseItem_ProtoFunID stReqRaiseItem::ProtoFunID_MIN;
const stReqRaiseItem_ProtoFunID stReqRaiseItem::ProtoFunID_MAX;
const int stReqRaiseItem::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqRaiseItem::kBagTypeFieldNumber;
const int stReqRaiseItem::kInstanceIDFieldNumber;
const int stReqRaiseItem::kRaiseTypeFieldNumber;
const int stReqRaiseItem::kEatInstanceIDFieldNumber;
const int stReqRaiseItem::kYunTieNumFieldNumber;
#endif  // !_MSC_VER

stReqRaiseItem::stReqRaiseItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqRaiseItem::InitAsDefaultInstance() {
}

stReqRaiseItem::stReqRaiseItem(const stReqRaiseItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqRaiseItem::SharedCtor() {
  _cached_size_ = 0;
  bagtype_ = 0u;
  instanceid_ = GOOGLE_ULONGLONG(0);
  raisetype_ = 0u;
  yuntienum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqRaiseItem::~stReqRaiseItem() {
  SharedDtor();
}

void stReqRaiseItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqRaiseItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqRaiseItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqRaiseItem_descriptor_;
}

const stReqRaiseItem& stReqRaiseItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stReqRaiseItem* stReqRaiseItem::default_instance_ = NULL;

stReqRaiseItem* stReqRaiseItem::New() const {
  return new stReqRaiseItem;
}

void stReqRaiseItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bagtype_ = 0u;
    instanceid_ = GOOGLE_ULONGLONG(0);
    raisetype_ = 0u;
    yuntienum_ = 0u;
  }
  eatinstanceid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqRaiseItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 bagType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bagtype_)));
          set_has_bagtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_instanceID;
        break;
      }

      // optional uint64 instanceID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_instanceID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &instanceid_)));
          set_has_instanceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_raiseType;
        break;
      }

      // optional uint32 raiseType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_raiseType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &raisetype_)));
          set_has_raisetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_eatInstanceID;
        break;
      }

      // repeated uint64 eatInstanceID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eatInstanceID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 32, input, this->mutable_eatinstanceid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_eatinstanceid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_eatInstanceID;
        if (input->ExpectTag(40)) goto parse_yunTieNum;
        break;
      }

      // optional uint32 yunTieNum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_yunTieNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &yuntienum_)));
          set_has_yuntienum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqRaiseItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 bagType = 1;
  if (has_bagtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bagtype(), output);
  }

  // optional uint64 instanceID = 2;
  if (has_instanceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->instanceid(), output);
  }

  // optional uint32 raiseType = 3;
  if (has_raisetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->raisetype(), output);
  }

  // repeated uint64 eatInstanceID = 4;
  for (int i = 0; i < this->eatinstanceid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      4, this->eatinstanceid(i), output);
  }

  // optional uint32 yunTieNum = 5;
  if (has_yuntienum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->yuntienum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqRaiseItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 bagType = 1;
  if (has_bagtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bagtype(), target);
  }

  // optional uint64 instanceID = 2;
  if (has_instanceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->instanceid(), target);
  }

  // optional uint32 raiseType = 3;
  if (has_raisetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->raisetype(), target);
  }

  // repeated uint64 eatInstanceID = 4;
  for (int i = 0; i < this->eatinstanceid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(4, this->eatinstanceid(i), target);
  }

  // optional uint32 yunTieNum = 5;
  if (has_yuntienum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->yuntienum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqRaiseItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 bagType = 1;
    if (has_bagtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bagtype());
    }

    // optional uint64 instanceID = 2;
    if (has_instanceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->instanceid());
    }

    // optional uint32 raiseType = 3;
    if (has_raisetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->raisetype());
    }

    // optional uint32 yunTieNum = 5;
    if (has_yuntienum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->yuntienum());
    }

  }
  // repeated uint64 eatInstanceID = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->eatinstanceid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->eatinstanceid(i));
    }
    total_size += 1 * this->eatinstanceid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqRaiseItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqRaiseItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqRaiseItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqRaiseItem::MergeFrom(const stReqRaiseItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  eatinstanceid_.MergeFrom(from.eatinstanceid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bagtype()) {
      set_bagtype(from.bagtype());
    }
    if (from.has_instanceid()) {
      set_instanceid(from.instanceid());
    }
    if (from.has_raisetype()) {
      set_raisetype(from.raisetype());
    }
    if (from.has_yuntienum()) {
      set_yuntienum(from.yuntienum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqRaiseItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqRaiseItem::CopyFrom(const stReqRaiseItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqRaiseItem::IsInitialized() const {

  return true;
}

void stReqRaiseItem::Swap(stReqRaiseItem* other) {
  if (other != this) {
    std::swap(bagtype_, other->bagtype_);
    std::swap(instanceid_, other->instanceid_);
    std::swap(raisetype_, other->raisetype_);
    eatinstanceid_.Swap(&other->eatinstanceid_);
    std::swap(yuntienum_, other->yuntienum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqRaiseItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqRaiseItem_descriptor_;
  metadata.reflection = stReqRaiseItem_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRaiseItemResult_Result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRaiseItemResult_Result_descriptor_;
}
bool stRaiseItemResult_Result_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRaiseItemResult_Result stRaiseItemResult::SUCCESS;
const stRaiseItemResult_Result stRaiseItemResult::EQUIP_NOT_EXIST;
const stRaiseItemResult_Result stRaiseItemResult::STONE_NOT_EXIST;
const stRaiseItemResult_Result stRaiseItemResult::MONEY_NOT_ENOUGH;
const stRaiseItemResult_Result stRaiseItemResult::INNER_ERROR;
const stRaiseItemResult_Result stRaiseItemResult::ROLE_LV_LIMIT;
const stRaiseItemResult_Result stRaiseItemResult::Result_MIN;
const stRaiseItemResult_Result stRaiseItemResult::Result_MAX;
const int stRaiseItemResult::Result_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRaiseItemResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRaiseItemResult_ProtoModID_descriptor_;
}
bool stRaiseItemResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRaiseItemResult_ProtoModID stRaiseItemResult::ModID;
const stRaiseItemResult_ProtoModID stRaiseItemResult::ProtoModID_MIN;
const stRaiseItemResult_ProtoModID stRaiseItemResult::ProtoModID_MAX;
const int stRaiseItemResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRaiseItemResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRaiseItemResult_ProtoFunID_descriptor_;
}
bool stRaiseItemResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 47:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRaiseItemResult_ProtoFunID stRaiseItemResult::FunID;
const stRaiseItemResult_ProtoFunID stRaiseItemResult::ProtoFunID_MIN;
const stRaiseItemResult_ProtoFunID stRaiseItemResult::ProtoFunID_MAX;
const int stRaiseItemResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRaiseItemResult::kBagTypeFieldNumber;
const int stRaiseItemResult::kInstanceIDFieldNumber;
const int stRaiseItemResult::kResultFieldNumber;
#endif  // !_MSC_VER

stRaiseItemResult::stRaiseItemResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRaiseItemResult::InitAsDefaultInstance() {
}

stRaiseItemResult::stRaiseItemResult(const stRaiseItemResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRaiseItemResult::SharedCtor() {
  _cached_size_ = 0;
  bagtype_ = 0u;
  instanceid_ = GOOGLE_ULONGLONG(0);
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRaiseItemResult::~stRaiseItemResult() {
  SharedDtor();
}

void stRaiseItemResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRaiseItemResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRaiseItemResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRaiseItemResult_descriptor_;
}

const stRaiseItemResult& stRaiseItemResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stRaiseItemResult* stRaiseItemResult::default_instance_ = NULL;

stRaiseItemResult* stRaiseItemResult::New() const {
  return new stRaiseItemResult;
}

void stRaiseItemResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bagtype_ = 0u;
    instanceid_ = GOOGLE_ULONGLONG(0);
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRaiseItemResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 bagType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bagtype_)));
          set_has_bagtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_instanceID;
        break;
      }

      // optional uint64 instanceID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_instanceID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &instanceid_)));
          set_has_instanceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // optional .Role.stRaiseItemResult.Result result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Role::stRaiseItemResult_Result_IsValid(value)) {
            set_result(static_cast< ::Role::stRaiseItemResult_Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRaiseItemResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 bagType = 1;
  if (has_bagtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bagtype(), output);
  }

  // optional uint64 instanceID = 2;
  if (has_instanceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->instanceid(), output);
  }

  // optional .Role.stRaiseItemResult.Result result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRaiseItemResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 bagType = 1;
  if (has_bagtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bagtype(), target);
  }

  // optional uint64 instanceID = 2;
  if (has_instanceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->instanceid(), target);
  }

  // optional .Role.stRaiseItemResult.Result result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRaiseItemResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 bagType = 1;
    if (has_bagtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bagtype());
    }

    // optional uint64 instanceID = 2;
    if (has_instanceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->instanceid());
    }

    // optional .Role.stRaiseItemResult.Result result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRaiseItemResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRaiseItemResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRaiseItemResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRaiseItemResult::MergeFrom(const stRaiseItemResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bagtype()) {
      set_bagtype(from.bagtype());
    }
    if (from.has_instanceid()) {
      set_instanceid(from.instanceid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRaiseItemResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRaiseItemResult::CopyFrom(const stRaiseItemResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRaiseItemResult::IsInitialized() const {

  return true;
}

void stRaiseItemResult::Swap(stRaiseItemResult* other) {
  if (other != this) {
    std::swap(bagtype_, other->bagtype_);
    std::swap(instanceid_, other->instanceid_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRaiseItemResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRaiseItemResult_descriptor_;
  metadata.reflection = stRaiseItemResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqSmeltEquip_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqSmeltEquip_ProtoModID_descriptor_;
}
bool stReqSmeltEquip_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqSmeltEquip_ProtoModID stReqSmeltEquip::ModID;
const stReqSmeltEquip_ProtoModID stReqSmeltEquip::ProtoModID_MIN;
const stReqSmeltEquip_ProtoModID stReqSmeltEquip::ProtoModID_MAX;
const int stReqSmeltEquip::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqSmeltEquip_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqSmeltEquip_ProtoFunID_descriptor_;
}
bool stReqSmeltEquip_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 48:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqSmeltEquip_ProtoFunID stReqSmeltEquip::FunID;
const stReqSmeltEquip_ProtoFunID stReqSmeltEquip::ProtoFunID_MIN;
const stReqSmeltEquip_ProtoFunID stReqSmeltEquip::ProtoFunID_MAX;
const int stReqSmeltEquip::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqSmeltEquip::kBagTypeFieldNumber;
const int stReqSmeltEquip::kInstanceIDFieldNumber;
#endif  // !_MSC_VER

stReqSmeltEquip::stReqSmeltEquip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqSmeltEquip::InitAsDefaultInstance() {
}

stReqSmeltEquip::stReqSmeltEquip(const stReqSmeltEquip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqSmeltEquip::SharedCtor() {
  _cached_size_ = 0;
  bagtype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqSmeltEquip::~stReqSmeltEquip() {
  SharedDtor();
}

void stReqSmeltEquip::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqSmeltEquip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqSmeltEquip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqSmeltEquip_descriptor_;
}

const stReqSmeltEquip& stReqSmeltEquip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stReqSmeltEquip* stReqSmeltEquip::default_instance_ = NULL;

stReqSmeltEquip* stReqSmeltEquip::New() const {
  return new stReqSmeltEquip;
}

void stReqSmeltEquip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bagtype_ = 0u;
  }
  instanceid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqSmeltEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 bagType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bagtype_)));
          set_has_bagtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_instanceID;
        break;
      }

      // repeated uint64 instanceID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_instanceID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_instanceid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_instanceid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_instanceID;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqSmeltEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 bagType = 1;
  if (has_bagtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bagtype(), output);
  }

  // repeated uint64 instanceID = 2;
  for (int i = 0; i < this->instanceid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->instanceid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqSmeltEquip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 bagType = 1;
  if (has_bagtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bagtype(), target);
  }

  // repeated uint64 instanceID = 2;
  for (int i = 0; i < this->instanceid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->instanceid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqSmeltEquip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 bagType = 1;
    if (has_bagtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bagtype());
    }

  }
  // repeated uint64 instanceID = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->instanceid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->instanceid(i));
    }
    total_size += 1 * this->instanceid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqSmeltEquip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqSmeltEquip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqSmeltEquip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqSmeltEquip::MergeFrom(const stReqSmeltEquip& from) {
  GOOGLE_CHECK_NE(&from, this);
  instanceid_.MergeFrom(from.instanceid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bagtype()) {
      set_bagtype(from.bagtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqSmeltEquip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqSmeltEquip::CopyFrom(const stReqSmeltEquip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqSmeltEquip::IsInitialized() const {

  return true;
}

void stReqSmeltEquip::Swap(stReqSmeltEquip* other) {
  if (other != this) {
    std::swap(bagtype_, other->bagtype_);
    instanceid_.Swap(&other->instanceid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqSmeltEquip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqSmeltEquip_descriptor_;
  metadata.reflection = stReqSmeltEquip_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stSmeltEquipResult_Result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSmeltEquipResult_Result_descriptor_;
}
bool stSmeltEquipResult_Result_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSmeltEquipResult_Result stSmeltEquipResult::SUCCESS;
const stSmeltEquipResult_Result stSmeltEquipResult::BAG_FULL;
const stSmeltEquipResult_Result stSmeltEquipResult::CANNT_SMELT;
const stSmeltEquipResult_Result stSmeltEquipResult::EQUIP_NOT_EXIST;
const stSmeltEquipResult_Result stSmeltEquipResult::INNER_ERROR;
const stSmeltEquipResult_Result stSmeltEquipResult::Result_MIN;
const stSmeltEquipResult_Result stSmeltEquipResult::Result_MAX;
const int stSmeltEquipResult::Result_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSmeltEquipResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSmeltEquipResult_ProtoModID_descriptor_;
}
bool stSmeltEquipResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSmeltEquipResult_ProtoModID stSmeltEquipResult::ModID;
const stSmeltEquipResult_ProtoModID stSmeltEquipResult::ProtoModID_MIN;
const stSmeltEquipResult_ProtoModID stSmeltEquipResult::ProtoModID_MAX;
const int stSmeltEquipResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSmeltEquipResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSmeltEquipResult_ProtoFunID_descriptor_;
}
bool stSmeltEquipResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 49:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSmeltEquipResult_ProtoFunID stSmeltEquipResult::FunID;
const stSmeltEquipResult_ProtoFunID stSmeltEquipResult::ProtoFunID_MIN;
const stSmeltEquipResult_ProtoFunID stSmeltEquipResult::ProtoFunID_MAX;
const int stSmeltEquipResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stSmeltEquipResult::kResultFieldNumber;
#endif  // !_MSC_VER

stSmeltEquipResult::stSmeltEquipResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSmeltEquipResult::InitAsDefaultInstance() {
}

stSmeltEquipResult::stSmeltEquipResult(const stSmeltEquipResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSmeltEquipResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSmeltEquipResult::~stSmeltEquipResult() {
  SharedDtor();
}

void stSmeltEquipResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stSmeltEquipResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSmeltEquipResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSmeltEquipResult_descriptor_;
}

const stSmeltEquipResult& stSmeltEquipResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stSmeltEquipResult* stSmeltEquipResult::default_instance_ = NULL;

stSmeltEquipResult* stSmeltEquipResult::New() const {
  return new stSmeltEquipResult;
}

void stSmeltEquipResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSmeltEquipResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Role.stSmeltEquipResult.Result result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Role::stSmeltEquipResult_Result_IsValid(value)) {
            set_result(static_cast< ::Role::stSmeltEquipResult_Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSmeltEquipResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Role.stSmeltEquipResult.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSmeltEquipResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Role.stSmeltEquipResult.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSmeltEquipResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Role.stSmeltEquipResult.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSmeltEquipResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSmeltEquipResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSmeltEquipResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSmeltEquipResult::MergeFrom(const stSmeltEquipResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSmeltEquipResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSmeltEquipResult::CopyFrom(const stSmeltEquipResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSmeltEquipResult::IsInitialized() const {

  return true;
}

void stSmeltEquipResult::Swap(stSmeltEquipResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSmeltEquipResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSmeltEquipResult_descriptor_;
  metadata.reflection = stSmeltEquipResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqRecastEquip_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqRecastEquip_ProtoModID_descriptor_;
}
bool stReqRecastEquip_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqRecastEquip_ProtoModID stReqRecastEquip::ModID;
const stReqRecastEquip_ProtoModID stReqRecastEquip::ProtoModID_MIN;
const stReqRecastEquip_ProtoModID stReqRecastEquip::ProtoModID_MAX;
const int stReqRecastEquip::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqRecastEquip_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqRecastEquip_ProtoFunID_descriptor_;
}
bool stReqRecastEquip_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 50:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqRecastEquip_ProtoFunID stReqRecastEquip::FunID;
const stReqRecastEquip_ProtoFunID stReqRecastEquip::ProtoFunID_MIN;
const stReqRecastEquip_ProtoFunID stReqRecastEquip::ProtoFunID_MAX;
const int stReqRecastEquip::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqRecastEquip::kBagTypeFieldNumber;
const int stReqRecastEquip::kInstanceIDFieldNumber;
#endif  // !_MSC_VER

stReqRecastEquip::stReqRecastEquip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqRecastEquip::InitAsDefaultInstance() {
}

stReqRecastEquip::stReqRecastEquip(const stReqRecastEquip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqRecastEquip::SharedCtor() {
  _cached_size_ = 0;
  bagtype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqRecastEquip::~stReqRecastEquip() {
  SharedDtor();
}

void stReqRecastEquip::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqRecastEquip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqRecastEquip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqRecastEquip_descriptor_;
}

const stReqRecastEquip& stReqRecastEquip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stReqRecastEquip* stReqRecastEquip::default_instance_ = NULL;

stReqRecastEquip* stReqRecastEquip::New() const {
  return new stReqRecastEquip;
}

void stReqRecastEquip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bagtype_ = 0u;
  }
  instanceid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqRecastEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 bagType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bagtype_)));
          set_has_bagtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_instanceID;
        break;
      }

      // repeated uint64 instanceID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_instanceID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_instanceid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_instanceid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_instanceID;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqRecastEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 bagType = 1;
  if (has_bagtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bagtype(), output);
  }

  // repeated uint64 instanceID = 2;
  for (int i = 0; i < this->instanceid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->instanceid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqRecastEquip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 bagType = 1;
  if (has_bagtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bagtype(), target);
  }

  // repeated uint64 instanceID = 2;
  for (int i = 0; i < this->instanceid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->instanceid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqRecastEquip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 bagType = 1;
    if (has_bagtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bagtype());
    }

  }
  // repeated uint64 instanceID = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->instanceid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->instanceid(i));
    }
    total_size += 1 * this->instanceid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqRecastEquip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqRecastEquip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqRecastEquip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqRecastEquip::MergeFrom(const stReqRecastEquip& from) {
  GOOGLE_CHECK_NE(&from, this);
  instanceid_.MergeFrom(from.instanceid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bagtype()) {
      set_bagtype(from.bagtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqRecastEquip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqRecastEquip::CopyFrom(const stReqRecastEquip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqRecastEquip::IsInitialized() const {

  return true;
}

void stReqRecastEquip::Swap(stReqRecastEquip* other) {
  if (other != this) {
    std::swap(bagtype_, other->bagtype_);
    instanceid_.Swap(&other->instanceid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqRecastEquip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqRecastEquip_descriptor_;
  metadata.reflection = stReqRecastEquip_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* RecastEquipResult_Result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecastEquipResult_Result_descriptor_;
}
bool RecastEquipResult_Result_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const RecastEquipResult_Result RecastEquipResult::SUCCESS;
const RecastEquipResult_Result RecastEquipResult::DIAMOND_NOT_ENOUGH;
const RecastEquipResult_Result RecastEquipResult::BAG_FULL;
const RecastEquipResult_Result RecastEquipResult::CANNT_SMELT;
const RecastEquipResult_Result RecastEquipResult::EQUIP_NOT_EXIST;
const RecastEquipResult_Result RecastEquipResult::INNER_ERROR;
const RecastEquipResult_Result RecastEquipResult::Result_MIN;
const RecastEquipResult_Result RecastEquipResult::Result_MAX;
const int RecastEquipResult::Result_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* RecastEquipResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecastEquipResult_ProtoModID_descriptor_;
}
bool RecastEquipResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const RecastEquipResult_ProtoModID RecastEquipResult::ModID;
const RecastEquipResult_ProtoModID RecastEquipResult::ProtoModID_MIN;
const RecastEquipResult_ProtoModID RecastEquipResult::ProtoModID_MAX;
const int RecastEquipResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* RecastEquipResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecastEquipResult_ProtoFunID_descriptor_;
}
bool RecastEquipResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 51:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const RecastEquipResult_ProtoFunID RecastEquipResult::FunID;
const RecastEquipResult_ProtoFunID RecastEquipResult::ProtoFunID_MIN;
const RecastEquipResult_ProtoFunID RecastEquipResult::ProtoFunID_MAX;
const int RecastEquipResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int RecastEquipResult::kResultFieldNumber;
#endif  // !_MSC_VER

RecastEquipResult::RecastEquipResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RecastEquipResult::InitAsDefaultInstance() {
}

RecastEquipResult::RecastEquipResult(const RecastEquipResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RecastEquipResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecastEquipResult::~RecastEquipResult() {
  SharedDtor();
}

void RecastEquipResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RecastEquipResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecastEquipResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecastEquipResult_descriptor_;
}

const RecastEquipResult& RecastEquipResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

RecastEquipResult* RecastEquipResult::default_instance_ = NULL;

RecastEquipResult* RecastEquipResult::New() const {
  return new RecastEquipResult;
}

void RecastEquipResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecastEquipResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Role.RecastEquipResult.Result result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Role::RecastEquipResult_Result_IsValid(value)) {
            set_result(static_cast< ::Role::RecastEquipResult_Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RecastEquipResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Role.RecastEquipResult.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RecastEquipResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Role.RecastEquipResult.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RecastEquipResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Role.RecastEquipResult.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecastEquipResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecastEquipResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecastEquipResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecastEquipResult::MergeFrom(const RecastEquipResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecastEquipResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecastEquipResult::CopyFrom(const RecastEquipResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecastEquipResult::IsInitialized() const {

  return true;
}

void RecastEquipResult::Swap(RecastEquipResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RecastEquipResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecastEquipResult_descriptor_;
  metadata.reflection = RecastEquipResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqCombineItem_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqCombineItem_ProtoModID_descriptor_;
}
bool stReqCombineItem_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqCombineItem_ProtoModID stReqCombineItem::ModID;
const stReqCombineItem_ProtoModID stReqCombineItem::ProtoModID_MIN;
const stReqCombineItem_ProtoModID stReqCombineItem::ProtoModID_MAX;
const int stReqCombineItem::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqCombineItem_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqCombineItem_ProtoFunID_descriptor_;
}
bool stReqCombineItem_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 52:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqCombineItem_ProtoFunID stReqCombineItem::FunID;
const stReqCombineItem_ProtoFunID stReqCombineItem::ProtoFunID_MIN;
const stReqCombineItem_ProtoFunID stReqCombineItem::ProtoFunID_MAX;
const int stReqCombineItem::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqCombineItem::kPieceIDFieldNumber;
const int stReqCombineItem::kCombineNumFieldNumber;
#endif  // !_MSC_VER

stReqCombineItem::stReqCombineItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqCombineItem::InitAsDefaultInstance() {
}

stReqCombineItem::stReqCombineItem(const stReqCombineItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqCombineItem::SharedCtor() {
  _cached_size_ = 0;
  pieceid_ = 0u;
  combinenum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqCombineItem::~stReqCombineItem() {
  SharedDtor();
}

void stReqCombineItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqCombineItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqCombineItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqCombineItem_descriptor_;
}

const stReqCombineItem& stReqCombineItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stReqCombineItem* stReqCombineItem::default_instance_ = NULL;

stReqCombineItem* stReqCombineItem::New() const {
  return new stReqCombineItem;
}

void stReqCombineItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pieceid_ = 0u;
    combinenum_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqCombineItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 pieceID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pieceid_)));
          set_has_pieceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_combineNum;
        break;
      }

      // optional uint32 combineNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_combineNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &combinenum_)));
          set_has_combinenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqCombineItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 pieceID = 1;
  if (has_pieceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pieceid(), output);
  }

  // optional uint32 combineNum = 2;
  if (has_combinenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->combinenum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqCombineItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 pieceID = 1;
  if (has_pieceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pieceid(), target);
  }

  // optional uint32 combineNum = 2;
  if (has_combinenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->combinenum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqCombineItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 pieceID = 1;
    if (has_pieceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pieceid());
    }

    // optional uint32 combineNum = 2;
    if (has_combinenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->combinenum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqCombineItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqCombineItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqCombineItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqCombineItem::MergeFrom(const stReqCombineItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pieceid()) {
      set_pieceid(from.pieceid());
    }
    if (from.has_combinenum()) {
      set_combinenum(from.combinenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqCombineItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqCombineItem::CopyFrom(const stReqCombineItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqCombineItem::IsInitialized() const {

  return true;
}

void stReqCombineItem::Swap(stReqCombineItem* other) {
  if (other != this) {
    std::swap(pieceid_, other->pieceid_);
    std::swap(combinenum_, other->combinenum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqCombineItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqCombineItem_descriptor_;
  metadata.reflection = stReqCombineItem_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stCombineItemResult_Result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCombineItemResult_Result_descriptor_;
}
bool stCombineItemResult_Result_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stCombineItemResult_Result stCombineItemResult::SUCCESS;
const stCombineItemResult_Result stCombineItemResult::FAILURE;
const stCombineItemResult_Result stCombineItemResult::BAG_FULL;
const stCombineItemResult_Result stCombineItemResult::NOT_ENOUGH_PIECE;
const stCombineItemResult_Result stCombineItemResult::Result_MIN;
const stCombineItemResult_Result stCombineItemResult::Result_MAX;
const int stCombineItemResult::Result_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stCombineItemResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCombineItemResult_ProtoModID_descriptor_;
}
bool stCombineItemResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stCombineItemResult_ProtoModID stCombineItemResult::ModID;
const stCombineItemResult_ProtoModID stCombineItemResult::ProtoModID_MIN;
const stCombineItemResult_ProtoModID stCombineItemResult::ProtoModID_MAX;
const int stCombineItemResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stCombineItemResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCombineItemResult_ProtoFunID_descriptor_;
}
bool stCombineItemResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 53:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stCombineItemResult_ProtoFunID stCombineItemResult::FunID;
const stCombineItemResult_ProtoFunID stCombineItemResult::ProtoFunID_MIN;
const stCombineItemResult_ProtoFunID stCombineItemResult::ProtoFunID_MAX;
const int stCombineItemResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stCombineItemResult::kResultFieldNumber;
#endif  // !_MSC_VER

stCombineItemResult::stCombineItemResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stCombineItemResult::InitAsDefaultInstance() {
}

stCombineItemResult::stCombineItemResult(const stCombineItemResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stCombineItemResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stCombineItemResult::~stCombineItemResult() {
  SharedDtor();
}

void stCombineItemResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stCombineItemResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stCombineItemResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCombineItemResult_descriptor_;
}

const stCombineItemResult& stCombineItemResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stCombineItemResult* stCombineItemResult::default_instance_ = NULL;

stCombineItemResult* stCombineItemResult::New() const {
  return new stCombineItemResult;
}

void stCombineItemResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stCombineItemResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Role.stCombineItemResult.Result result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Role::stCombineItemResult_Result_IsValid(value)) {
            set_result(static_cast< ::Role::stCombineItemResult_Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stCombineItemResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Role.stCombineItemResult.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stCombineItemResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Role.stCombineItemResult.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stCombineItemResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Role.stCombineItemResult.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stCombineItemResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stCombineItemResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stCombineItemResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stCombineItemResult::MergeFrom(const stCombineItemResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stCombineItemResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stCombineItemResult::CopyFrom(const stCombineItemResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stCombineItemResult::IsInitialized() const {

  return true;
}

void stCombineItemResult::Swap(stCombineItemResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stCombineItemResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stCombineItemResult_descriptor_;
  metadata.reflection = stCombineItemResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqRefreshShoplist_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqRefreshShoplist_ProtoModID_descriptor_;
}
bool stReqRefreshShoplist_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqRefreshShoplist_ProtoModID stReqRefreshShoplist::ModID;
const stReqRefreshShoplist_ProtoModID stReqRefreshShoplist::ProtoModID_MIN;
const stReqRefreshShoplist_ProtoModID stReqRefreshShoplist::ProtoModID_MAX;
const int stReqRefreshShoplist::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqRefreshShoplist_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqRefreshShoplist_ProtoFunID_descriptor_;
}
bool stReqRefreshShoplist_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 54:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqRefreshShoplist_ProtoFunID stReqRefreshShoplist::FunID;
const stReqRefreshShoplist_ProtoFunID stReqRefreshShoplist::ProtoFunID_MIN;
const stReqRefreshShoplist_ProtoFunID stReqRefreshShoplist::ProtoFunID_MAX;
const int stReqRefreshShoplist::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqRefreshShoplist::kShopIDFieldNumber;
#endif  // !_MSC_VER

stReqRefreshShoplist::stReqRefreshShoplist()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqRefreshShoplist::InitAsDefaultInstance() {
}

stReqRefreshShoplist::stReqRefreshShoplist(const stReqRefreshShoplist& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqRefreshShoplist::SharedCtor() {
  _cached_size_ = 0;
  shopid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqRefreshShoplist::~stReqRefreshShoplist() {
  SharedDtor();
}

void stReqRefreshShoplist::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqRefreshShoplist::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqRefreshShoplist::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqRefreshShoplist_descriptor_;
}

const stReqRefreshShoplist& stReqRefreshShoplist::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stReqRefreshShoplist* stReqRefreshShoplist::default_instance_ = NULL;

stReqRefreshShoplist* stReqRefreshShoplist::New() const {
  return new stReqRefreshShoplist;
}

void stReqRefreshShoplist::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    shopid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqRefreshShoplist::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 shopID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shopid_)));
          set_has_shopid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqRefreshShoplist::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 shopID = 1;
  if (has_shopid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->shopid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqRefreshShoplist::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 shopID = 1;
  if (has_shopid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->shopid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqRefreshShoplist::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 shopID = 1;
    if (has_shopid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shopid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqRefreshShoplist::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqRefreshShoplist* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqRefreshShoplist*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqRefreshShoplist::MergeFrom(const stReqRefreshShoplist& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_shopid()) {
      set_shopid(from.shopid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqRefreshShoplist::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqRefreshShoplist::CopyFrom(const stReqRefreshShoplist& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqRefreshShoplist::IsInitialized() const {

  return true;
}

void stReqRefreshShoplist::Swap(stReqRefreshShoplist* other) {
  if (other != this) {
    std::swap(shopid_, other->shopid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqRefreshShoplist::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqRefreshShoplist_descriptor_;
  metadata.reflection = stReqRefreshShoplist_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRefreshShoplistResult_Result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRefreshShoplistResult_Result_descriptor_;
}
bool stRefreshShoplistResult_Result_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRefreshShoplistResult_Result stRefreshShoplistResult::SUCCESS;
const stRefreshShoplistResult_Result stRefreshShoplistResult::RESOURCE_NOT_ENOUGH;
const stRefreshShoplistResult_Result stRefreshShoplistResult::SHOP_NOT_EXIST;
const stRefreshShoplistResult_Result stRefreshShoplistResult::REFRESH_NUM_USE_OUT;
const stRefreshShoplistResult_Result stRefreshShoplistResult::Result_MIN;
const stRefreshShoplistResult_Result stRefreshShoplistResult::Result_MAX;
const int stRefreshShoplistResult::Result_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRefreshShoplistResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRefreshShoplistResult_ProtoModID_descriptor_;
}
bool stRefreshShoplistResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRefreshShoplistResult_ProtoModID stRefreshShoplistResult::ModID;
const stRefreshShoplistResult_ProtoModID stRefreshShoplistResult::ProtoModID_MIN;
const stRefreshShoplistResult_ProtoModID stRefreshShoplistResult::ProtoModID_MAX;
const int stRefreshShoplistResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRefreshShoplistResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRefreshShoplistResult_ProtoFunID_descriptor_;
}
bool stRefreshShoplistResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 54:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRefreshShoplistResult_ProtoFunID stRefreshShoplistResult::FunID;
const stRefreshShoplistResult_ProtoFunID stRefreshShoplistResult::ProtoFunID_MIN;
const stRefreshShoplistResult_ProtoFunID stRefreshShoplistResult::ProtoFunID_MAX;
const int stRefreshShoplistResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRefreshShoplistResult::kShopIDFieldNumber;
const int stRefreshShoplistResult::kShoplistFieldNumber;
const int stRefreshShoplistResult::kResultFieldNumber;
#endif  // !_MSC_VER

stRefreshShoplistResult::stRefreshShoplistResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRefreshShoplistResult::InitAsDefaultInstance() {
}

stRefreshShoplistResult::stRefreshShoplistResult(const stRefreshShoplistResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRefreshShoplistResult::SharedCtor() {
  _cached_size_ = 0;
  shopid_ = 0u;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRefreshShoplistResult::~stRefreshShoplistResult() {
  SharedDtor();
}

void stRefreshShoplistResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRefreshShoplistResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRefreshShoplistResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRefreshShoplistResult_descriptor_;
}

const stRefreshShoplistResult& stRefreshShoplistResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stRefreshShoplistResult* stRefreshShoplistResult::default_instance_ = NULL;

stRefreshShoplistResult* stRefreshShoplistResult::New() const {
  return new stRefreshShoplistResult;
}

void stRefreshShoplistResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    shopid_ = 0u;
    result_ = 1;
  }
  shoplist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRefreshShoplistResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 shopID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shopid_)));
          set_has_shopid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_shoplist;
        break;
      }

      // repeated .Role.stShopItem shoplist = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shoplist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_shoplist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_shoplist;
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // optional .Role.stRefreshShoplistResult.Result result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Role::stRefreshShoplistResult_Result_IsValid(value)) {
            set_result(static_cast< ::Role::stRefreshShoplistResult_Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRefreshShoplistResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 shopID = 1;
  if (has_shopid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->shopid(), output);
  }

  // repeated .Role.stShopItem shoplist = 2;
  for (int i = 0; i < this->shoplist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->shoplist(i), output);
  }

  // optional .Role.stRefreshShoplistResult.Result result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRefreshShoplistResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 shopID = 1;
  if (has_shopid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->shopid(), target);
  }

  // repeated .Role.stShopItem shoplist = 2;
  for (int i = 0; i < this->shoplist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->shoplist(i), target);
  }

  // optional .Role.stRefreshShoplistResult.Result result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRefreshShoplistResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 shopID = 1;
    if (has_shopid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shopid());
    }

    // optional .Role.stRefreshShoplistResult.Result result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  // repeated .Role.stShopItem shoplist = 2;
  total_size += 1 * this->shoplist_size();
  for (int i = 0; i < this->shoplist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->shoplist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRefreshShoplistResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRefreshShoplistResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRefreshShoplistResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRefreshShoplistResult::MergeFrom(const stRefreshShoplistResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  shoplist_.MergeFrom(from.shoplist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_shopid()) {
      set_shopid(from.shopid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRefreshShoplistResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRefreshShoplistResult::CopyFrom(const stRefreshShoplistResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRefreshShoplistResult::IsInitialized() const {

  return true;
}

void stRefreshShoplistResult::Swap(stRefreshShoplistResult* other) {
  if (other != this) {
    std::swap(shopid_, other->shopid_);
    shoplist_.Swap(&other->shoplist_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRefreshShoplistResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRefreshShoplistResult_descriptor_;
  metadata.reflection = stRefreshShoplistResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stChatCmd_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stChatCmd_ProtoModID_descriptor_;
}
bool stChatCmd_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stChatCmd_ProtoModID stChatCmd::ModID;
const stChatCmd_ProtoModID stChatCmd::ProtoModID_MIN;
const stChatCmd_ProtoModID stChatCmd::ProtoModID_MAX;
const int stChatCmd::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stChatCmd_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stChatCmd_ProtoFunID_descriptor_;
}
bool stChatCmd_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 55:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stChatCmd_ProtoFunID stChatCmd::FunID;
const stChatCmd_ProtoFunID stChatCmd::ProtoFunID_MIN;
const stChatCmd_ProtoFunID stChatCmd::ProtoFunID_MAX;
const int stChatCmd::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stChatCmd::kTypeFieldNumber;
const int stChatCmd::kDestCharIDFieldNumber;
const int stChatCmd::kDestCharNameFieldNumber;
const int stChatCmd::kSrcCharIDFieldNumber;
const int stChatCmd::kSrcCharNameFieldNumber;
const int stChatCmd::kContentFieldNumber;
const int stChatCmd::kJobFieldNumber;
const int stChatCmd::kSexFieldNumber;
const int stChatCmd::kVipLvFieldNumber;
const int stChatCmd::kIsVoiceFieldNumber;
const int stChatCmd::kVoiceUrlFieldNumber;
const int stChatCmd::kVoiceLenghtFieldNumber;
const int stChatCmd::kPhotoIDFieldNumber;
#endif  // !_MSC_VER

stChatCmd::stChatCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stChatCmd::InitAsDefaultInstance() {
}

stChatCmd::stChatCmd(const stChatCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stChatCmd::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  destcharid_ = 0u;
  destcharname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  srccharid_ = 0u;
  srccharname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  job_ = 0u;
  sex_ = 0u;
  viplv_ = 0u;
  isvoice_ = false;
  voiceurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  voicelenght_ = 0u;
  photoid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stChatCmd::~stChatCmd() {
  SharedDtor();
}

void stChatCmd::SharedDtor() {
  if (destcharname_ != &::google::protobuf::internal::kEmptyString) {
    delete destcharname_;
  }
  if (srccharname_ != &::google::protobuf::internal::kEmptyString) {
    delete srccharname_;
  }
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (voiceurl_ != &::google::protobuf::internal::kEmptyString) {
    delete voiceurl_;
  }
  if (this != default_instance_) {
  }
}

void stChatCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stChatCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stChatCmd_descriptor_;
}

const stChatCmd& stChatCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stChatCmd* stChatCmd::default_instance_ = NULL;

stChatCmd* stChatCmd::New() const {
  return new stChatCmd;
}

void stChatCmd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    destcharid_ = 0u;
    if (has_destcharname()) {
      if (destcharname_ != &::google::protobuf::internal::kEmptyString) {
        destcharname_->clear();
      }
    }
    srccharid_ = 0u;
    if (has_srccharname()) {
      if (srccharname_ != &::google::protobuf::internal::kEmptyString) {
        srccharname_->clear();
      }
    }
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    job_ = 0u;
    sex_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    viplv_ = 0u;
    isvoice_ = false;
    if (has_voiceurl()) {
      if (voiceurl_ != &::google::protobuf::internal::kEmptyString) {
        voiceurl_->clear();
      }
    }
    voicelenght_ = 0u;
    photoid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stChatCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Role.eChatType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Role::eChatType_IsValid(value)) {
            set_type(static_cast< ::Role::eChatType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_destCharID;
        break;
      }

      // optional uint32 destCharID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_destCharID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &destcharid_)));
          set_has_destcharid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_destCharName;
        break;
      }

      // optional string destCharName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_destCharName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_destcharname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->destcharname().data(), this->destcharname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_srcCharID;
        break;
      }

      // optional uint32 srcCharID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_srcCharID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &srccharid_)));
          set_has_srccharid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_srcCharName;
        break;
      }

      // optional string srcCharName = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_srcCharName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_srccharname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->srccharname().data(), this->srccharname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_content;
        break;
      }

      // optional string content = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_job;
        break;
      }

      // optional uint32 job = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &job_)));
          set_has_job();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_sex;
        break;
      }

      // optional uint32 sex = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_vipLv;
        break;
      }

      // optional uint32 vipLv = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vipLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &viplv_)));
          set_has_viplv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_isVoice;
        break;
      }

      // optional bool isVoice = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isVoice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isvoice_)));
          set_has_isvoice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_voiceUrl;
        break;
      }

      // optional string voiceUrl = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_voiceUrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_voiceurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->voiceurl().data(), this->voiceurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_voiceLenght;
        break;
      }

      // optional uint32 voiceLenght = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_voiceLenght:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &voicelenght_)));
          set_has_voicelenght();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_photoID;
        break;
      }

      // optional uint32 photoID = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_photoID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &photoid_)));
          set_has_photoid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stChatCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Role.eChatType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint32 destCharID = 2;
  if (has_destcharid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->destcharid(), output);
  }

  // optional string destCharName = 3;
  if (has_destcharname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->destcharname().data(), this->destcharname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->destcharname(), output);
  }

  // optional uint32 srcCharID = 4;
  if (has_srccharid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->srccharid(), output);
  }

  // optional string srcCharName = 5;
  if (has_srccharname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->srccharname().data(), this->srccharname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->srccharname(), output);
  }

  // optional string content = 6;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->content(), output);
  }

  // optional uint32 job = 7;
  if (has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->job(), output);
  }

  // optional uint32 sex = 8;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->sex(), output);
  }

  // optional uint32 vipLv = 9;
  if (has_viplv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->viplv(), output);
  }

  // optional bool isVoice = 10;
  if (has_isvoice()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->isvoice(), output);
  }

  // optional string voiceUrl = 11;
  if (has_voiceurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->voiceurl().data(), this->voiceurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->voiceurl(), output);
  }

  // optional uint32 voiceLenght = 12;
  if (has_voicelenght()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->voicelenght(), output);
  }

  // optional uint32 photoID = 13;
  if (has_photoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->photoid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stChatCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Role.eChatType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional uint32 destCharID = 2;
  if (has_destcharid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->destcharid(), target);
  }

  // optional string destCharName = 3;
  if (has_destcharname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->destcharname().data(), this->destcharname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->destcharname(), target);
  }

  // optional uint32 srcCharID = 4;
  if (has_srccharid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->srccharid(), target);
  }

  // optional string srcCharName = 5;
  if (has_srccharname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->srccharname().data(), this->srccharname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->srccharname(), target);
  }

  // optional string content = 6;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->content(), target);
  }

  // optional uint32 job = 7;
  if (has_job()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->job(), target);
  }

  // optional uint32 sex = 8;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->sex(), target);
  }

  // optional uint32 vipLv = 9;
  if (has_viplv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->viplv(), target);
  }

  // optional bool isVoice = 10;
  if (has_isvoice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->isvoice(), target);
  }

  // optional string voiceUrl = 11;
  if (has_voiceurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->voiceurl().data(), this->voiceurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->voiceurl(), target);
  }

  // optional uint32 voiceLenght = 12;
  if (has_voicelenght()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->voicelenght(), target);
  }

  // optional uint32 photoID = 13;
  if (has_photoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->photoid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stChatCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Role.eChatType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 destCharID = 2;
    if (has_destcharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->destcharid());
    }

    // optional string destCharName = 3;
    if (has_destcharname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->destcharname());
    }

    // optional uint32 srcCharID = 4;
    if (has_srccharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->srccharid());
    }

    // optional string srcCharName = 5;
    if (has_srccharname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->srccharname());
    }

    // optional string content = 6;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional uint32 job = 7;
    if (has_job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->job());
    }

    // optional uint32 sex = 8;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sex());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 vipLv = 9;
    if (has_viplv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->viplv());
    }

    // optional bool isVoice = 10;
    if (has_isvoice()) {
      total_size += 1 + 1;
    }

    // optional string voiceUrl = 11;
    if (has_voiceurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->voiceurl());
    }

    // optional uint32 voiceLenght = 12;
    if (has_voicelenght()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->voicelenght());
    }

    // optional uint32 photoID = 13;
    if (has_photoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->photoid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stChatCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stChatCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stChatCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stChatCmd::MergeFrom(const stChatCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_destcharid()) {
      set_destcharid(from.destcharid());
    }
    if (from.has_destcharname()) {
      set_destcharname(from.destcharname());
    }
    if (from.has_srccharid()) {
      set_srccharid(from.srccharid());
    }
    if (from.has_srccharname()) {
      set_srccharname(from.srccharname());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_job()) {
      set_job(from.job());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_viplv()) {
      set_viplv(from.viplv());
    }
    if (from.has_isvoice()) {
      set_isvoice(from.isvoice());
    }
    if (from.has_voiceurl()) {
      set_voiceurl(from.voiceurl());
    }
    if (from.has_voicelenght()) {
      set_voicelenght(from.voicelenght());
    }
    if (from.has_photoid()) {
      set_photoid(from.photoid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stChatCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stChatCmd::CopyFrom(const stChatCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stChatCmd::IsInitialized() const {

  return true;
}

void stChatCmd::Swap(stChatCmd* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(destcharid_, other->destcharid_);
    std::swap(destcharname_, other->destcharname_);
    std::swap(srccharid_, other->srccharid_);
    std::swap(srccharname_, other->srccharname_);
    std::swap(content_, other->content_);
    std::swap(job_, other->job_);
    std::swap(sex_, other->sex_);
    std::swap(viplv_, other->viplv_);
    std::swap(isvoice_, other->isvoice_);
    std::swap(voiceurl_, other->voiceurl_);
    std::swap(voicelenght_, other->voicelenght_);
    std::swap(photoid_, other->photoid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stChatCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stChatCmd_descriptor_;
  metadata.reflection = stChatCmd_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stSynResource_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynResource_ProtoModID_descriptor_;
}
bool stSynResource_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynResource_ProtoModID stSynResource::ModID;
const stSynResource_ProtoModID stSynResource::ProtoModID_MIN;
const stSynResource_ProtoModID stSynResource::ProtoModID_MAX;
const int stSynResource::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSynResource_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynResource_ProtoFunID_descriptor_;
}
bool stSynResource_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 56:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynResource_ProtoFunID stSynResource::FunID;
const stSynResource_ProtoFunID stSynResource::ProtoFunID_MIN;
const stSynResource_ProtoFunID stSynResource::ProtoFunID_MAX;
const int stSynResource::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stSynResource::kResTypeFieldNumber;
const int stSynResource::kNumFieldNumber;
#endif  // !_MSC_VER

stSynResource::stSynResource()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSynResource::InitAsDefaultInstance() {
}

stSynResource::stSynResource(const stSynResource& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSynResource::SharedCtor() {
  _cached_size_ = 0;
  restype_ = 0u;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSynResource::~stSynResource() {
  SharedDtor();
}

void stSynResource::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stSynResource::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSynResource::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynResource_descriptor_;
}

const stSynResource& stSynResource::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stSynResource* stSynResource::default_instance_ = NULL;

stSynResource* stSynResource::New() const {
  return new stSynResource;
}

void stSynResource::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    restype_ = 0u;
    num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSynResource::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 resType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &restype_)));
          set_has_restype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional uint32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSynResource::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 resType = 1;
  if (has_restype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->restype(), output);
  }

  // optional uint32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSynResource::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 resType = 1;
  if (has_restype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->restype(), target);
  }

  // optional uint32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSynResource::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 resType = 1;
    if (has_restype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->restype());
    }

    // optional uint32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSynResource::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSynResource* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSynResource*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSynResource::MergeFrom(const stSynResource& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_restype()) {
      set_restype(from.restype());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSynResource::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSynResource::CopyFrom(const stSynResource& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSynResource::IsInitialized() const {

  return true;
}

void stSynResource::Swap(stSynResource* other) {
  if (other != this) {
    std::swap(restype_, other->restype_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSynResource::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSynResource_descriptor_;
  metadata.reflection = stSynResource_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stSynLevelInfo::kLevelIDFieldNumber;
const int stSynLevelInfo::kStarFieldNumber;
const int stSynLevelInfo::kRushNumFieldNumber;
const int stSynLevelInfo::kResetNumFieldNumber;
#endif  // !_MSC_VER

stSynLevelInfo::stSynLevelInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSynLevelInfo::InitAsDefaultInstance() {
}

stSynLevelInfo::stSynLevelInfo(const stSynLevelInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSynLevelInfo::SharedCtor() {
  _cached_size_ = 0;
  levelid_ = 0u;
  star_ = 0;
  rushnum_ = 0u;
  resetnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSynLevelInfo::~stSynLevelInfo() {
  SharedDtor();
}

void stSynLevelInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stSynLevelInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSynLevelInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynLevelInfo_descriptor_;
}

const stSynLevelInfo& stSynLevelInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stSynLevelInfo* stSynLevelInfo::default_instance_ = NULL;

stSynLevelInfo* stSynLevelInfo::New() const {
  return new stSynLevelInfo;
}

void stSynLevelInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    levelid_ = 0u;
    star_ = 0;
    rushnum_ = 0u;
    resetnum_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSynLevelInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 levelID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &levelid_)));
          set_has_levelid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_star;
        break;
      }

      // optional .Role.eLevelStar star = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Role::eLevelStar_IsValid(value)) {
            set_star(static_cast< ::Role::eLevelStar >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rushNum;
        break;
      }

      // optional uint32 rushNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rushNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rushnum_)));
          set_has_rushnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_resetNum;
        break;
      }

      // optional uint32 resetNum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_resetNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resetnum_)));
          set_has_resetnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSynLevelInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 levelID = 1;
  if (has_levelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->levelid(), output);
  }

  // optional .Role.eLevelStar star = 2;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->star(), output);
  }

  // optional uint32 rushNum = 3;
  if (has_rushnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->rushnum(), output);
  }

  // optional uint32 resetNum = 4;
  if (has_resetnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->resetnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSynLevelInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 levelID = 1;
  if (has_levelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->levelid(), target);
  }

  // optional .Role.eLevelStar star = 2;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->star(), target);
  }

  // optional uint32 rushNum = 3;
  if (has_rushnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->rushnum(), target);
  }

  // optional uint32 resetNum = 4;
  if (has_resetnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->resetnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSynLevelInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 levelID = 1;
    if (has_levelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->levelid());
    }

    // optional .Role.eLevelStar star = 2;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->star());
    }

    // optional uint32 rushNum = 3;
    if (has_rushnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rushnum());
    }

    // optional uint32 resetNum = 4;
    if (has_resetnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->resetnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSynLevelInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSynLevelInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSynLevelInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSynLevelInfo::MergeFrom(const stSynLevelInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_levelid()) {
      set_levelid(from.levelid());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
    if (from.has_rushnum()) {
      set_rushnum(from.rushnum());
    }
    if (from.has_resetnum()) {
      set_resetnum(from.resetnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSynLevelInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSynLevelInfo::CopyFrom(const stSynLevelInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSynLevelInfo::IsInitialized() const {

  return true;
}

void stSynLevelInfo::Swap(stSynLevelInfo* other) {
  if (other != this) {
    std::swap(levelid_, other->levelid_);
    std::swap(star_, other->star_);
    std::swap(rushnum_, other->rushnum_);
    std::swap(resetnum_, other->resetnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSynLevelInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSynLevelInfo_descriptor_;
  metadata.reflection = stSynLevelInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stSynCharpterInfo::kCharpterIDFieldNumber;
const int stSynCharpterInfo::kRewardStepFieldNumber;
const int stSynCharpterInfo::kLevelInfoFieldNumber;
#endif  // !_MSC_VER

stSynCharpterInfo::stSynCharpterInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSynCharpterInfo::InitAsDefaultInstance() {
}

stSynCharpterInfo::stSynCharpterInfo(const stSynCharpterInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSynCharpterInfo::SharedCtor() {
  _cached_size_ = 0;
  charpterid_ = 0u;
  rewardstep_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSynCharpterInfo::~stSynCharpterInfo() {
  SharedDtor();
}

void stSynCharpterInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stSynCharpterInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSynCharpterInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynCharpterInfo_descriptor_;
}

const stSynCharpterInfo& stSynCharpterInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stSynCharpterInfo* stSynCharpterInfo::default_instance_ = NULL;

stSynCharpterInfo* stSynCharpterInfo::New() const {
  return new stSynCharpterInfo;
}

void stSynCharpterInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charpterid_ = 0u;
    rewardstep_ = 0u;
  }
  levelinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSynCharpterInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charpterID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charpterid_)));
          set_has_charpterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rewardStep;
        break;
      }

      // optional uint32 rewardStep = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rewardStep:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rewardstep_)));
          set_has_rewardstep();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_levelInfo;
        break;
      }

      // repeated .Role.stSynLevelInfo levelInfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_levelInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_levelinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_levelInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSynCharpterInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charpterID = 1;
  if (has_charpterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charpterid(), output);
  }

  // optional uint32 rewardStep = 2;
  if (has_rewardstep()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rewardstep(), output);
  }

  // repeated .Role.stSynLevelInfo levelInfo = 3;
  for (int i = 0; i < this->levelinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->levelinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSynCharpterInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charpterID = 1;
  if (has_charpterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charpterid(), target);
  }

  // optional uint32 rewardStep = 2;
  if (has_rewardstep()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->rewardstep(), target);
  }

  // repeated .Role.stSynLevelInfo levelInfo = 3;
  for (int i = 0; i < this->levelinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->levelinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSynCharpterInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charpterID = 1;
    if (has_charpterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charpterid());
    }

    // optional uint32 rewardStep = 2;
    if (has_rewardstep()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rewardstep());
    }

  }
  // repeated .Role.stSynLevelInfo levelInfo = 3;
  total_size += 1 * this->levelinfo_size();
  for (int i = 0; i < this->levelinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->levelinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSynCharpterInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSynCharpterInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSynCharpterInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSynCharpterInfo::MergeFrom(const stSynCharpterInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  levelinfo_.MergeFrom(from.levelinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charpterid()) {
      set_charpterid(from.charpterid());
    }
    if (from.has_rewardstep()) {
      set_rewardstep(from.rewardstep());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSynCharpterInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSynCharpterInfo::CopyFrom(const stSynCharpterInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSynCharpterInfo::IsInitialized() const {

  return true;
}

void stSynCharpterInfo::Swap(stSynCharpterInfo* other) {
  if (other != this) {
    std::swap(charpterid_, other->charpterid_);
    std::swap(rewardstep_, other->rewardstep_);
    levelinfo_.Swap(&other->levelinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSynCharpterInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSynCharpterInfo_descriptor_;
  metadata.reflection = stSynCharpterInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stSynAllLevelInfo_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynAllLevelInfo_ProtoModID_descriptor_;
}
bool stSynAllLevelInfo_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynAllLevelInfo_ProtoModID stSynAllLevelInfo::ModID;
const stSynAllLevelInfo_ProtoModID stSynAllLevelInfo::ProtoModID_MIN;
const stSynAllLevelInfo_ProtoModID stSynAllLevelInfo::ProtoModID_MAX;
const int stSynAllLevelInfo::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSynAllLevelInfo_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynAllLevelInfo_ProtoFunID_descriptor_;
}
bool stSynAllLevelInfo_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 57:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynAllLevelInfo_ProtoFunID stSynAllLevelInfo::FunID;
const stSynAllLevelInfo_ProtoFunID stSynAllLevelInfo::ProtoFunID_MIN;
const stSynAllLevelInfo_ProtoFunID stSynAllLevelInfo::ProtoFunID_MAX;
const int stSynAllLevelInfo::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stSynAllLevelInfo::kCharpterInfoFieldNumber;
#endif  // !_MSC_VER

stSynAllLevelInfo::stSynAllLevelInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSynAllLevelInfo::InitAsDefaultInstance() {
}

stSynAllLevelInfo::stSynAllLevelInfo(const stSynAllLevelInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSynAllLevelInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSynAllLevelInfo::~stSynAllLevelInfo() {
  SharedDtor();
}

void stSynAllLevelInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stSynAllLevelInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSynAllLevelInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynAllLevelInfo_descriptor_;
}

const stSynAllLevelInfo& stSynAllLevelInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stSynAllLevelInfo* stSynAllLevelInfo::default_instance_ = NULL;

stSynAllLevelInfo* stSynAllLevelInfo::New() const {
  return new stSynAllLevelInfo;
}

void stSynAllLevelInfo::Clear() {
  charpterinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSynAllLevelInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Role.stSynCharpterInfo charpterInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_charpterInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_charpterinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_charpterInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSynAllLevelInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Role.stSynCharpterInfo charpterInfo = 1;
  for (int i = 0; i < this->charpterinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->charpterinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSynAllLevelInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Role.stSynCharpterInfo charpterInfo = 1;
  for (int i = 0; i < this->charpterinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->charpterinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSynAllLevelInfo::ByteSize() const {
  int total_size = 0;

  // repeated .Role.stSynCharpterInfo charpterInfo = 1;
  total_size += 1 * this->charpterinfo_size();
  for (int i = 0; i < this->charpterinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->charpterinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSynAllLevelInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSynAllLevelInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSynAllLevelInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSynAllLevelInfo::MergeFrom(const stSynAllLevelInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  charpterinfo_.MergeFrom(from.charpterinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSynAllLevelInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSynAllLevelInfo::CopyFrom(const stSynAllLevelInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSynAllLevelInfo::IsInitialized() const {

  return true;
}

void stSynAllLevelInfo::Swap(stSynAllLevelInfo* other) {
  if (other != this) {
    charpterinfo_.Swap(&other->charpterinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSynAllLevelInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSynAllLevelInfo_descriptor_;
  metadata.reflection = stSynAllLevelInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stObtainItem::kItemIDFieldNumber;
const int stObtainItem::kNumFieldNumber;
#endif  // !_MSC_VER

stObtainItem::stObtainItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stObtainItem::InitAsDefaultInstance() {
}

stObtainItem::stObtainItem(const stObtainItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stObtainItem::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0u;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stObtainItem::~stObtainItem() {
  SharedDtor();
}

void stObtainItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stObtainItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stObtainItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stObtainItem_descriptor_;
}

const stObtainItem& stObtainItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stObtainItem* stObtainItem::default_instance_ = NULL;

stObtainItem* stObtainItem::New() const {
  return new stObtainItem;
}

void stObtainItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = 0u;
    num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stObtainItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 itemID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional uint32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stObtainItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 itemID = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itemid(), output);
  }

  // optional uint32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stObtainItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 itemID = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->itemid(), target);
  }

  // optional uint32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stObtainItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 itemID = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // optional uint32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stObtainItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stObtainItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stObtainItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stObtainItem::MergeFrom(const stObtainItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stObtainItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stObtainItem::CopyFrom(const stObtainItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stObtainItem::IsInitialized() const {

  return true;
}

void stObtainItem::Swap(stObtainItem* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stObtainItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stObtainItem_descriptor_;
  metadata.reflection = stObtainItem_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqFinishLv_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqFinishLv_ProtoModID_descriptor_;
}
bool stReqFinishLv_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqFinishLv_ProtoModID stReqFinishLv::ModID;
const stReqFinishLv_ProtoModID stReqFinishLv::ProtoModID_MIN;
const stReqFinishLv_ProtoModID stReqFinishLv::ProtoModID_MAX;
const int stReqFinishLv::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqFinishLv_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqFinishLv_ProtoFunID_descriptor_;
}
bool stReqFinishLv_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 58:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqFinishLv_ProtoFunID stReqFinishLv::FunID;
const stReqFinishLv_ProtoFunID stReqFinishLv::ProtoFunID_MIN;
const stReqFinishLv_ProtoFunID stReqFinishLv::ProtoFunID_MAX;
const int stReqFinishLv::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqFinishLv::kLevelIDFieldNumber;
const int stReqFinishLv::kStarFieldNumber;
const int stReqFinishLv::kGoldCoinFieldNumber;
const int stReqFinishLv::kGetItemFieldNumber;
#endif  // !_MSC_VER

stReqFinishLv::stReqFinishLv()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqFinishLv::InitAsDefaultInstance() {
}

stReqFinishLv::stReqFinishLv(const stReqFinishLv& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqFinishLv::SharedCtor() {
  _cached_size_ = 0;
  levelid_ = 0u;
  star_ = 0;
  goldcoin_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqFinishLv::~stReqFinishLv() {
  SharedDtor();
}

void stReqFinishLv::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqFinishLv::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqFinishLv::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqFinishLv_descriptor_;
}

const stReqFinishLv& stReqFinishLv::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stReqFinishLv* stReqFinishLv::default_instance_ = NULL;

stReqFinishLv* stReqFinishLv::New() const {
  return new stReqFinishLv;
}

void stReqFinishLv::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    levelid_ = 0u;
    star_ = 0;
    goldcoin_ = 0u;
  }
  getitem_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqFinishLv::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 levelID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &levelid_)));
          set_has_levelid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_star;
        break;
      }

      // optional .Role.eLevelStar star = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Role::eLevelStar_IsValid(value)) {
            set_star(static_cast< ::Role::eLevelStar >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_goldCoin;
        break;
      }

      // optional uint32 goldCoin = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_goldCoin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &goldcoin_)));
          set_has_goldcoin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_getItem;
        break;
      }

      // repeated .Role.stObtainItem getItem = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_getItem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_getitem()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_getItem;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqFinishLv::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 levelID = 1;
  if (has_levelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->levelid(), output);
  }

  // optional .Role.eLevelStar star = 2;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->star(), output);
  }

  // optional uint32 goldCoin = 3;
  if (has_goldcoin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->goldcoin(), output);
  }

  // repeated .Role.stObtainItem getItem = 4;
  for (int i = 0; i < this->getitem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->getitem(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqFinishLv::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 levelID = 1;
  if (has_levelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->levelid(), target);
  }

  // optional .Role.eLevelStar star = 2;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->star(), target);
  }

  // optional uint32 goldCoin = 3;
  if (has_goldcoin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->goldcoin(), target);
  }

  // repeated .Role.stObtainItem getItem = 4;
  for (int i = 0; i < this->getitem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->getitem(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqFinishLv::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 levelID = 1;
    if (has_levelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->levelid());
    }

    // optional .Role.eLevelStar star = 2;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->star());
    }

    // optional uint32 goldCoin = 3;
    if (has_goldcoin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->goldcoin());
    }

  }
  // repeated .Role.stObtainItem getItem = 4;
  total_size += 1 * this->getitem_size();
  for (int i = 0; i < this->getitem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->getitem(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqFinishLv::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqFinishLv* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqFinishLv*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqFinishLv::MergeFrom(const stReqFinishLv& from) {
  GOOGLE_CHECK_NE(&from, this);
  getitem_.MergeFrom(from.getitem_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_levelid()) {
      set_levelid(from.levelid());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
    if (from.has_goldcoin()) {
      set_goldcoin(from.goldcoin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqFinishLv::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqFinishLv::CopyFrom(const stReqFinishLv& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqFinishLv::IsInitialized() const {

  return true;
}

void stReqFinishLv::Swap(stReqFinishLv* other) {
  if (other != this) {
    std::swap(levelid_, other->levelid_);
    std::swap(star_, other->star_);
    std::swap(goldcoin_, other->goldcoin_);
    getitem_.Swap(&other->getitem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqFinishLv::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqFinishLv_descriptor_;
  metadata.reflection = stReqFinishLv_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stFinishLvResult_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stFinishLvResult_eResult_descriptor_;
}
bool stFinishLvResult_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stFinishLvResult_eResult stFinishLvResult::SUCCESS;
const stFinishLvResult_eResult stFinishLvResult::COND_NOT_MEET;
const stFinishLvResult_eResult stFinishLvResult::INNER_ERROR;
const stFinishLvResult_eResult stFinishLvResult::SP_NOT_ENOUGH;
const stFinishLvResult_eResult stFinishLvResult::LILIAN_NOT_ENOUGH;
const stFinishLvResult_eResult stFinishLvResult::ROLE_LV_TOO_LOW;
const stFinishLvResult_eResult stFinishLvResult::PRE_LEVEL_NOT_FINISH;
const stFinishLvResult_eResult stFinishLvResult::TIME_USE_OUT;
const stFinishLvResult_eResult stFinishLvResult::eResult_MIN;
const stFinishLvResult_eResult stFinishLvResult::eResult_MAX;
const int stFinishLvResult::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stFinishLvResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stFinishLvResult_ProtoModID_descriptor_;
}
bool stFinishLvResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stFinishLvResult_ProtoModID stFinishLvResult::ModID;
const stFinishLvResult_ProtoModID stFinishLvResult::ProtoModID_MIN;
const stFinishLvResult_ProtoModID stFinishLvResult::ProtoModID_MAX;
const int stFinishLvResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stFinishLvResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stFinishLvResult_ProtoFunID_descriptor_;
}
bool stFinishLvResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 59:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stFinishLvResult_ProtoFunID stFinishLvResult::FunID;
const stFinishLvResult_ProtoFunID stFinishLvResult::ProtoFunID_MIN;
const stFinishLvResult_ProtoFunID stFinishLvResult::ProtoFunID_MAX;
const int stFinishLvResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stFinishLvResult::kResultFieldNumber;
#endif  // !_MSC_VER

stFinishLvResult::stFinishLvResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stFinishLvResult::InitAsDefaultInstance() {
}

stFinishLvResult::stFinishLvResult(const stFinishLvResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stFinishLvResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stFinishLvResult::~stFinishLvResult() {
  SharedDtor();
}

void stFinishLvResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stFinishLvResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stFinishLvResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stFinishLvResult_descriptor_;
}

const stFinishLvResult& stFinishLvResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stFinishLvResult* stFinishLvResult::default_instance_ = NULL;

stFinishLvResult* stFinishLvResult::New() const {
  return new stFinishLvResult;
}

void stFinishLvResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stFinishLvResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Role.stFinishLvResult.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Role::stFinishLvResult_eResult_IsValid(value)) {
            set_result(static_cast< ::Role::stFinishLvResult_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stFinishLvResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Role.stFinishLvResult.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stFinishLvResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Role.stFinishLvResult.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stFinishLvResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Role.stFinishLvResult.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stFinishLvResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stFinishLvResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stFinishLvResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stFinishLvResult::MergeFrom(const stFinishLvResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stFinishLvResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stFinishLvResult::CopyFrom(const stFinishLvResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stFinishLvResult::IsInitialized() const {

  return true;
}

void stFinishLvResult::Swap(stFinishLvResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stFinishLvResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stFinishLvResult_descriptor_;
  metadata.reflection = stFinishLvResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqCharpterReward_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqCharpterReward_ProtoModID_descriptor_;
}
bool stReqCharpterReward_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqCharpterReward_ProtoModID stReqCharpterReward::ModID;
const stReqCharpterReward_ProtoModID stReqCharpterReward::ProtoModID_MIN;
const stReqCharpterReward_ProtoModID stReqCharpterReward::ProtoModID_MAX;
const int stReqCharpterReward::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqCharpterReward_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqCharpterReward_ProtoFunID_descriptor_;
}
bool stReqCharpterReward_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 60:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqCharpterReward_ProtoFunID stReqCharpterReward::FunID;
const stReqCharpterReward_ProtoFunID stReqCharpterReward::ProtoFunID_MIN;
const stReqCharpterReward_ProtoFunID stReqCharpterReward::ProtoFunID_MAX;
const int stReqCharpterReward::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqCharpterReward::kCharpterIDFieldNumber;
const int stReqCharpterReward::kStepFieldNumber;
#endif  // !_MSC_VER

stReqCharpterReward::stReqCharpterReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqCharpterReward::InitAsDefaultInstance() {
}

stReqCharpterReward::stReqCharpterReward(const stReqCharpterReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqCharpterReward::SharedCtor() {
  _cached_size_ = 0;
  charpterid_ = 0u;
  step_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqCharpterReward::~stReqCharpterReward() {
  SharedDtor();
}

void stReqCharpterReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqCharpterReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqCharpterReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqCharpterReward_descriptor_;
}

const stReqCharpterReward& stReqCharpterReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stReqCharpterReward* stReqCharpterReward::default_instance_ = NULL;

stReqCharpterReward* stReqCharpterReward::New() const {
  return new stReqCharpterReward;
}

void stReqCharpterReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charpterid_ = 0u;
    step_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqCharpterReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charpterID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charpterid_)));
          set_has_charpterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_step;
        break;
      }

      // optional uint32 step = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_step:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &step_)));
          set_has_step();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqCharpterReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charpterID = 1;
  if (has_charpterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charpterid(), output);
  }

  // optional uint32 step = 2;
  if (has_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->step(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqCharpterReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charpterID = 1;
  if (has_charpterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charpterid(), target);
  }

  // optional uint32 step = 2;
  if (has_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->step(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqCharpterReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charpterID = 1;
    if (has_charpterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charpterid());
    }

    // optional uint32 step = 2;
    if (has_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->step());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqCharpterReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqCharpterReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqCharpterReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqCharpterReward::MergeFrom(const stReqCharpterReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charpterid()) {
      set_charpterid(from.charpterid());
    }
    if (from.has_step()) {
      set_step(from.step());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqCharpterReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqCharpterReward::CopyFrom(const stReqCharpterReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqCharpterReward::IsInitialized() const {

  return true;
}

void stReqCharpterReward::Swap(stReqCharpterReward* other) {
  if (other != this) {
    std::swap(charpterid_, other->charpterid_);
    std::swap(step_, other->step_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqCharpterReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqCharpterReward_descriptor_;
  metadata.reflection = stReqCharpterReward_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stCharpterRewardResult_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCharpterRewardResult_eResult_descriptor_;
}
bool stCharpterRewardResult_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stCharpterRewardResult_eResult stCharpterRewardResult::SUCCESS;
const stCharpterRewardResult_eResult stCharpterRewardResult::INNER_ERROR;
const stCharpterRewardResult_eResult stCharpterRewardResult::CHARPTER_NOT_EXSIT;
const stCharpterRewardResult_eResult stCharpterRewardResult::STARNUM_NOT_ENOUGH;
const stCharpterRewardResult_eResult stCharpterRewardResult::HAS_GET_REWARD;
const stCharpterRewardResult_eResult stCharpterRewardResult::BAG_FULL;
const stCharpterRewardResult_eResult stCharpterRewardResult::eResult_MIN;
const stCharpterRewardResult_eResult stCharpterRewardResult::eResult_MAX;
const int stCharpterRewardResult::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stCharpterRewardResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCharpterRewardResult_ProtoModID_descriptor_;
}
bool stCharpterRewardResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stCharpterRewardResult_ProtoModID stCharpterRewardResult::ModID;
const stCharpterRewardResult_ProtoModID stCharpterRewardResult::ProtoModID_MIN;
const stCharpterRewardResult_ProtoModID stCharpterRewardResult::ProtoModID_MAX;
const int stCharpterRewardResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stCharpterRewardResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCharpterRewardResult_ProtoFunID_descriptor_;
}
bool stCharpterRewardResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 61:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stCharpterRewardResult_ProtoFunID stCharpterRewardResult::FunID;
const stCharpterRewardResult_ProtoFunID stCharpterRewardResult::ProtoFunID_MIN;
const stCharpterRewardResult_ProtoFunID stCharpterRewardResult::ProtoFunID_MAX;
const int stCharpterRewardResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stCharpterRewardResult::kResultFieldNumber;
const int stCharpterRewardResult::kStepFieldNumber;
#endif  // !_MSC_VER

stCharpterRewardResult::stCharpterRewardResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stCharpterRewardResult::InitAsDefaultInstance() {
}

stCharpterRewardResult::stCharpterRewardResult(const stCharpterRewardResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stCharpterRewardResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  step_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stCharpterRewardResult::~stCharpterRewardResult() {
  SharedDtor();
}

void stCharpterRewardResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stCharpterRewardResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stCharpterRewardResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCharpterRewardResult_descriptor_;
}

const stCharpterRewardResult& stCharpterRewardResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stCharpterRewardResult* stCharpterRewardResult::default_instance_ = NULL;

stCharpterRewardResult* stCharpterRewardResult::New() const {
  return new stCharpterRewardResult;
}

void stCharpterRewardResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
    step_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stCharpterRewardResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Role.stCharpterRewardResult.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Role::stCharpterRewardResult_eResult_IsValid(value)) {
            set_result(static_cast< ::Role::stCharpterRewardResult_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_step;
        break;
      }

      // optional uint32 step = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_step:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &step_)));
          set_has_step();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stCharpterRewardResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Role.stCharpterRewardResult.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional uint32 step = 2;
  if (has_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->step(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stCharpterRewardResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Role.stCharpterRewardResult.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional uint32 step = 2;
  if (has_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->step(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stCharpterRewardResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Role.stCharpterRewardResult.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional uint32 step = 2;
    if (has_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->step());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stCharpterRewardResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stCharpterRewardResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stCharpterRewardResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stCharpterRewardResult::MergeFrom(const stCharpterRewardResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_step()) {
      set_step(from.step());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stCharpterRewardResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stCharpterRewardResult::CopyFrom(const stCharpterRewardResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stCharpterRewardResult::IsInitialized() const {

  return true;
}

void stCharpterRewardResult::Swap(stCharpterRewardResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(step_, other->step_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stCharpterRewardResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stCharpterRewardResult_descriptor_;
  metadata.reflection = stCharpterRewardResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqRushLevel_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqRushLevel_ProtoModID_descriptor_;
}
bool stReqRushLevel_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqRushLevel_ProtoModID stReqRushLevel::ModID;
const stReqRushLevel_ProtoModID stReqRushLevel::ProtoModID_MIN;
const stReqRushLevel_ProtoModID stReqRushLevel::ProtoModID_MAX;
const int stReqRushLevel::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqRushLevel_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqRushLevel_ProtoFunID_descriptor_;
}
bool stReqRushLevel_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 62:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqRushLevel_ProtoFunID stReqRushLevel::FunID;
const stReqRushLevel_ProtoFunID stReqRushLevel::ProtoFunID_MIN;
const stReqRushLevel_ProtoFunID stReqRushLevel::ProtoFunID_MAX;
const int stReqRushLevel::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqRushLevel::kLevelIDFieldNumber;
const int stReqRushLevel::kTypeFieldNumber;
const int stReqRushLevel::kNumFieldNumber;
#endif  // !_MSC_VER

stReqRushLevel::stReqRushLevel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqRushLevel::InitAsDefaultInstance() {
}

stReqRushLevel::stReqRushLevel(const stReqRushLevel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqRushLevel::SharedCtor() {
  _cached_size_ = 0;
  levelid_ = 0u;
  type_ = 1;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqRushLevel::~stReqRushLevel() {
  SharedDtor();
}

void stReqRushLevel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqRushLevel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqRushLevel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqRushLevel_descriptor_;
}

const stReqRushLevel& stReqRushLevel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stReqRushLevel* stReqRushLevel::default_instance_ = NULL;

stReqRushLevel* stReqRushLevel::New() const {
  return new stReqRushLevel;
}

void stReqRushLevel::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    levelid_ = 0u;
    type_ = 1;
    num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqRushLevel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 levelID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &levelid_)));
          set_has_levelid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .Role.eRushType type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Role::eRushType_IsValid(value)) {
            set_type(static_cast< ::Role::eRushType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }

      // optional uint32 num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqRushLevel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 levelID = 1;
  if (has_levelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->levelid(), output);
  }

  // optional .Role.eRushType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional uint32 num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqRushLevel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 levelID = 1;
  if (has_levelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->levelid(), target);
  }

  // optional .Role.eRushType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional uint32 num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqRushLevel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 levelID = 1;
    if (has_levelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->levelid());
    }

    // optional .Role.eRushType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqRushLevel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqRushLevel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqRushLevel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqRushLevel::MergeFrom(const stReqRushLevel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_levelid()) {
      set_levelid(from.levelid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqRushLevel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqRushLevel::CopyFrom(const stReqRushLevel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqRushLevel::IsInitialized() const {

  return true;
}

void stReqRushLevel::Swap(stReqRushLevel* other) {
  if (other != this) {
    std::swap(levelid_, other->levelid_);
    std::swap(type_, other->type_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqRushLevel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqRushLevel_descriptor_;
  metadata.reflection = stReqRushLevel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stSynRushReward::kItemIDFieldNumber;
const int stSynRushReward::kNumFieldNumber;
#endif  // !_MSC_VER

stSynRushReward::stSynRushReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSynRushReward::InitAsDefaultInstance() {
}

stSynRushReward::stSynRushReward(const stSynRushReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSynRushReward::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0u;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSynRushReward::~stSynRushReward() {
  SharedDtor();
}

void stSynRushReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stSynRushReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSynRushReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynRushReward_descriptor_;
}

const stSynRushReward& stSynRushReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stSynRushReward* stSynRushReward::default_instance_ = NULL;

stSynRushReward* stSynRushReward::New() const {
  return new stSynRushReward;
}

void stSynRushReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = 0u;
    num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSynRushReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 itemID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional uint32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSynRushReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 itemID = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itemid(), output);
  }

  // optional uint32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSynRushReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 itemID = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->itemid(), target);
  }

  // optional uint32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSynRushReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 itemID = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // optional uint32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSynRushReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSynRushReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSynRushReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSynRushReward::MergeFrom(const stSynRushReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSynRushReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSynRushReward::CopyFrom(const stSynRushReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSynRushReward::IsInitialized() const {

  return true;
}

void stSynRushReward::Swap(stSynRushReward* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSynRushReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSynRushReward_descriptor_;
  metadata.reflection = stSynRushReward_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stLevelRushResult_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stLevelRushResult_eResult_descriptor_;
}
bool stLevelRushResult_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stLevelRushResult_eResult stLevelRushResult::SUCCESS;
const stLevelRushResult_eResult stLevelRushResult::INNER_ERROR;
const stLevelRushResult_eResult stLevelRushResult::NOT_3_STAR;
const stLevelRushResult_eResult stLevelRushResult::SP_NOT_ENOUGH;
const stLevelRushResult_eResult stLevelRushResult::LILIAN_NOT_ENOUGH;
const stLevelRushResult_eResult stLevelRushResult::RUSH_NUM_OUT;
const stLevelRushResult_eResult stLevelRushResult::LV_CANNT_RUSH;
const stLevelRushResult_eResult stLevelRushResult::BAG_FULL;
const stLevelRushResult_eResult stLevelRushResult::VIP_LV_TOO_LOW;
const stLevelRushResult_eResult stLevelRushResult::RUSH_TICKET_NOT_ENOUGH;
const stLevelRushResult_eResult stLevelRushResult::BATTLEPOWER;
const stLevelRushResult_eResult stLevelRushResult::eResult_MIN;
const stLevelRushResult_eResult stLevelRushResult::eResult_MAX;
const int stLevelRushResult::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stLevelRushResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stLevelRushResult_ProtoModID_descriptor_;
}
bool stLevelRushResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stLevelRushResult_ProtoModID stLevelRushResult::ModID;
const stLevelRushResult_ProtoModID stLevelRushResult::ProtoModID_MIN;
const stLevelRushResult_ProtoModID stLevelRushResult::ProtoModID_MAX;
const int stLevelRushResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stLevelRushResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stLevelRushResult_ProtoFunID_descriptor_;
}
bool stLevelRushResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 63:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stLevelRushResult_ProtoFunID stLevelRushResult::FunID;
const stLevelRushResult_ProtoFunID stLevelRushResult::ProtoFunID_MIN;
const stLevelRushResult_ProtoFunID stLevelRushResult::ProtoFunID_MAX;
const int stLevelRushResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stLevelRushResult::kResultFieldNumber;
const int stLevelRushResult::kLevelIDFieldNumber;
const int stLevelRushResult::kItemsFieldNumber;
const int stLevelRushResult::kExpFieldNumber;
const int stLevelRushResult::kGoldCoinFieldNumber;
const int stLevelRushResult::kTypeFieldNumber;
#endif  // !_MSC_VER

stLevelRushResult::stLevelRushResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stLevelRushResult::InitAsDefaultInstance() {
}

stLevelRushResult::stLevelRushResult(const stLevelRushResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stLevelRushResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  levelid_ = 0u;
  exp_ = 0u;
  goldcoin_ = 0u;
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stLevelRushResult::~stLevelRushResult() {
  SharedDtor();
}

void stLevelRushResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stLevelRushResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stLevelRushResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stLevelRushResult_descriptor_;
}

const stLevelRushResult& stLevelRushResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stLevelRushResult* stLevelRushResult::default_instance_ = NULL;

stLevelRushResult* stLevelRushResult::New() const {
  return new stLevelRushResult;
}

void stLevelRushResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
    levelid_ = 0u;
    exp_ = 0u;
    goldcoin_ = 0u;
    type_ = 1;
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stLevelRushResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Role.stLevelRushResult.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Role::stLevelRushResult_eResult_IsValid(value)) {
            set_result(static_cast< ::Role::stLevelRushResult_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_levelID;
        break;
      }

      // optional uint32 levelID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_levelID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &levelid_)));
          set_has_levelid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_items;
        break;
      }

      // repeated .Role.stSynRushReward items = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_items;
        if (input->ExpectTag(32)) goto parse_exp;
        break;
      }

      // optional uint32 exp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_goldCoin;
        break;
      }

      // optional uint32 goldCoin = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_goldCoin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &goldcoin_)));
          set_has_goldcoin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_type;
        break;
      }

      // optional .Role.eRushType type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Role::eRushType_IsValid(value)) {
            set_type(static_cast< ::Role::eRushType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stLevelRushResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Role.stLevelRushResult.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional uint32 levelID = 2;
  if (has_levelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->levelid(), output);
  }

  // repeated .Role.stSynRushReward items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->items(i), output);
  }

  // optional uint32 exp = 4;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->exp(), output);
  }

  // optional uint32 goldCoin = 5;
  if (has_goldcoin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->goldcoin(), output);
  }

  // optional .Role.eRushType type = 6;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stLevelRushResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Role.stLevelRushResult.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional uint32 levelID = 2;
  if (has_levelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->levelid(), target);
  }

  // repeated .Role.stSynRushReward items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->items(i), target);
  }

  // optional uint32 exp = 4;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->exp(), target);
  }

  // optional uint32 goldCoin = 5;
  if (has_goldcoin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->goldcoin(), target);
  }

  // optional .Role.eRushType type = 6;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stLevelRushResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Role.stLevelRushResult.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional uint32 levelID = 2;
    if (has_levelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->levelid());
    }

    // optional uint32 exp = 4;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
    }

    // optional uint32 goldCoin = 5;
    if (has_goldcoin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->goldcoin());
    }

    // optional .Role.eRushType type = 6;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  // repeated .Role.stSynRushReward items = 3;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stLevelRushResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stLevelRushResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stLevelRushResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stLevelRushResult::MergeFrom(const stLevelRushResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_levelid()) {
      set_levelid(from.levelid());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_goldcoin()) {
      set_goldcoin(from.goldcoin());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stLevelRushResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stLevelRushResult::CopyFrom(const stLevelRushResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stLevelRushResult::IsInitialized() const {

  return true;
}

void stLevelRushResult::Swap(stLevelRushResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(levelid_, other->levelid_);
    items_.Swap(&other->items_);
    std::swap(exp_, other->exp_);
    std::swap(goldcoin_, other->goldcoin_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stLevelRushResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stLevelRushResult_descriptor_;
  metadata.reflection = stLevelRushResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqResetRushNum_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqResetRushNum_ProtoModID_descriptor_;
}
bool stReqResetRushNum_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqResetRushNum_ProtoModID stReqResetRushNum::ModID;
const stReqResetRushNum_ProtoModID stReqResetRushNum::ProtoModID_MIN;
const stReqResetRushNum_ProtoModID stReqResetRushNum::ProtoModID_MAX;
const int stReqResetRushNum::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqResetRushNum_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqResetRushNum_ProtoFunID_descriptor_;
}
bool stReqResetRushNum_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 64:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqResetRushNum_ProtoFunID stReqResetRushNum::FunID;
const stReqResetRushNum_ProtoFunID stReqResetRushNum::ProtoFunID_MIN;
const stReqResetRushNum_ProtoFunID stReqResetRushNum::ProtoFunID_MAX;
const int stReqResetRushNum::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqResetRushNum::kLevelIDFieldNumber;
#endif  // !_MSC_VER

stReqResetRushNum::stReqResetRushNum()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqResetRushNum::InitAsDefaultInstance() {
}

stReqResetRushNum::stReqResetRushNum(const stReqResetRushNum& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqResetRushNum::SharedCtor() {
  _cached_size_ = 0;
  levelid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqResetRushNum::~stReqResetRushNum() {
  SharedDtor();
}

void stReqResetRushNum::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqResetRushNum::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqResetRushNum::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqResetRushNum_descriptor_;
}

const stReqResetRushNum& stReqResetRushNum::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stReqResetRushNum* stReqResetRushNum::default_instance_ = NULL;

stReqResetRushNum* stReqResetRushNum::New() const {
  return new stReqResetRushNum;
}

void stReqResetRushNum::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    levelid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqResetRushNum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 levelID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &levelid_)));
          set_has_levelid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqResetRushNum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 levelID = 1;
  if (has_levelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->levelid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqResetRushNum::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 levelID = 1;
  if (has_levelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->levelid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqResetRushNum::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 levelID = 1;
    if (has_levelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->levelid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqResetRushNum::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqResetRushNum* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqResetRushNum*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqResetRushNum::MergeFrom(const stReqResetRushNum& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_levelid()) {
      set_levelid(from.levelid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqResetRushNum::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqResetRushNum::CopyFrom(const stReqResetRushNum& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqResetRushNum::IsInitialized() const {

  return true;
}

void stReqResetRushNum::Swap(stReqResetRushNum* other) {
  if (other != this) {
    std::swap(levelid_, other->levelid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqResetRushNum::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqResetRushNum_descriptor_;
  metadata.reflection = stReqResetRushNum_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stResetRushNumResult_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stResetRushNumResult_eResult_descriptor_;
}
bool stResetRushNumResult_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stResetRushNumResult_eResult stResetRushNumResult::SUCCESS;
const stResetRushNumResult_eResult stResetRushNumResult::INNER_ERROR;
const stResetRushNumResult_eResult stResetRushNumResult::CHARPTER_NOT_FINISH;
const stResetRushNumResult_eResult stResetRushNumResult::LEVEL_NOT_FINISH;
const stResetRushNumResult_eResult stResetRushNumResult::DIAMOND_NOT_ENOUGH;
const stResetRushNumResult_eResult stResetRushNumResult::eResult_MIN;
const stResetRushNumResult_eResult stResetRushNumResult::eResult_MAX;
const int stResetRushNumResult::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stResetRushNumResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stResetRushNumResult_ProtoModID_descriptor_;
}
bool stResetRushNumResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stResetRushNumResult_ProtoModID stResetRushNumResult::ModID;
const stResetRushNumResult_ProtoModID stResetRushNumResult::ProtoModID_MIN;
const stResetRushNumResult_ProtoModID stResetRushNumResult::ProtoModID_MAX;
const int stResetRushNumResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stResetRushNumResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stResetRushNumResult_ProtoFunID_descriptor_;
}
bool stResetRushNumResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 65:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stResetRushNumResult_ProtoFunID stResetRushNumResult::FunID;
const stResetRushNumResult_ProtoFunID stResetRushNumResult::ProtoFunID_MIN;
const stResetRushNumResult_ProtoFunID stResetRushNumResult::ProtoFunID_MAX;
const int stResetRushNumResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stResetRushNumResult::kLevelIDFieldNumber;
const int stResetRushNumResult::kResultFieldNumber;
#endif  // !_MSC_VER

stResetRushNumResult::stResetRushNumResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stResetRushNumResult::InitAsDefaultInstance() {
}

stResetRushNumResult::stResetRushNumResult(const stResetRushNumResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stResetRushNumResult::SharedCtor() {
  _cached_size_ = 0;
  levelid_ = 0u;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stResetRushNumResult::~stResetRushNumResult() {
  SharedDtor();
}

void stResetRushNumResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stResetRushNumResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stResetRushNumResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stResetRushNumResult_descriptor_;
}

const stResetRushNumResult& stResetRushNumResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stResetRushNumResult* stResetRushNumResult::default_instance_ = NULL;

stResetRushNumResult* stResetRushNumResult::New() const {
  return new stResetRushNumResult;
}

void stResetRushNumResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    levelid_ = 0u;
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stResetRushNumResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 levelID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &levelid_)));
          set_has_levelid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .Role.stResetRushNumResult.eResult result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Role::stResetRushNumResult_eResult_IsValid(value)) {
            set_result(static_cast< ::Role::stResetRushNumResult_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stResetRushNumResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 levelID = 1;
  if (has_levelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->levelid(), output);
  }

  // optional .Role.stResetRushNumResult.eResult result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stResetRushNumResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 levelID = 1;
  if (has_levelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->levelid(), target);
  }

  // optional .Role.stResetRushNumResult.eResult result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stResetRushNumResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 levelID = 1;
    if (has_levelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->levelid());
    }

    // optional .Role.stResetRushNumResult.eResult result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stResetRushNumResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stResetRushNumResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stResetRushNumResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stResetRushNumResult::MergeFrom(const stResetRushNumResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_levelid()) {
      set_levelid(from.levelid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stResetRushNumResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stResetRushNumResult::CopyFrom(const stResetRushNumResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stResetRushNumResult::IsInitialized() const {

  return true;
}

void stResetRushNumResult::Swap(stResetRushNumResult* other) {
  if (other != this) {
    std::swap(levelid_, other->levelid_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stResetRushNumResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stResetRushNumResult_descriptor_;
  metadata.reflection = stResetRushNumResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqRefineEquip_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqRefineEquip_ProtoModID_descriptor_;
}
bool stReqRefineEquip_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqRefineEquip_ProtoModID stReqRefineEquip::ModID;
const stReqRefineEquip_ProtoModID stReqRefineEquip::ProtoModID_MIN;
const stReqRefineEquip_ProtoModID stReqRefineEquip::ProtoModID_MAX;
const int stReqRefineEquip::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqRefineEquip_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqRefineEquip_ProtoFunID_descriptor_;
}
bool stReqRefineEquip_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 66:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqRefineEquip_ProtoFunID stReqRefineEquip::FunID;
const stReqRefineEquip_ProtoFunID stReqRefineEquip::ProtoFunID_MIN;
const stReqRefineEquip_ProtoFunID stReqRefineEquip::ProtoFunID_MAX;
const int stReqRefineEquip::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqRefineEquip::kBagTypeFieldNumber;
const int stReqRefineEquip::kInstanceIDFieldNumber;
#endif  // !_MSC_VER

stReqRefineEquip::stReqRefineEquip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqRefineEquip::InitAsDefaultInstance() {
}

stReqRefineEquip::stReqRefineEquip(const stReqRefineEquip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqRefineEquip::SharedCtor() {
  _cached_size_ = 0;
  bagtype_ = 0u;
  instanceid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqRefineEquip::~stReqRefineEquip() {
  SharedDtor();
}

void stReqRefineEquip::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqRefineEquip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqRefineEquip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqRefineEquip_descriptor_;
}

const stReqRefineEquip& stReqRefineEquip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stReqRefineEquip* stReqRefineEquip::default_instance_ = NULL;

stReqRefineEquip* stReqRefineEquip::New() const {
  return new stReqRefineEquip;
}

void stReqRefineEquip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bagtype_ = 0u;
    instanceid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqRefineEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 bagType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bagtype_)));
          set_has_bagtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_instanceID;
        break;
      }

      // optional uint64 instanceID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_instanceID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &instanceid_)));
          set_has_instanceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqRefineEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 bagType = 1;
  if (has_bagtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bagtype(), output);
  }

  // optional uint64 instanceID = 2;
  if (has_instanceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->instanceid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqRefineEquip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 bagType = 1;
  if (has_bagtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bagtype(), target);
  }

  // optional uint64 instanceID = 2;
  if (has_instanceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->instanceid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqRefineEquip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 bagType = 1;
    if (has_bagtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bagtype());
    }

    // optional uint64 instanceID = 2;
    if (has_instanceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->instanceid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqRefineEquip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqRefineEquip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqRefineEquip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqRefineEquip::MergeFrom(const stReqRefineEquip& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bagtype()) {
      set_bagtype(from.bagtype());
    }
    if (from.has_instanceid()) {
      set_instanceid(from.instanceid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqRefineEquip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqRefineEquip::CopyFrom(const stReqRefineEquip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqRefineEquip::IsInitialized() const {

  return true;
}

void stReqRefineEquip::Swap(stReqRefineEquip* other) {
  if (other != this) {
    std::swap(bagtype_, other->bagtype_);
    std::swap(instanceid_, other->instanceid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqRefineEquip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqRefineEquip_descriptor_;
  metadata.reflection = stReqRefineEquip_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRefineEquipResult_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRefineEquipResult_eResult_descriptor_;
}
bool stRefineEquipResult_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRefineEquipResult_eResult stRefineEquipResult::eSUCCESS;
const stRefineEquipResult_eResult stRefineEquipResult::eEQUIP_NOT_EXIST;
const stRefineEquipResult_eResult stRefineEquipResult::eINNER_ERROR;
const stRefineEquipResult_eResult stRefineEquipResult::eGOLDCOIN_NOT_ENOUGH;
const stRefineEquipResult_eResult stRefineEquipResult::eITEM_NOT_ENOUGH;
const stRefineEquipResult_eResult stRefineEquipResult::eFULL_LV;
const stRefineEquipResult_eResult stRefineEquipResult::eResult_MIN;
const stRefineEquipResult_eResult stRefineEquipResult::eResult_MAX;
const int stRefineEquipResult::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRefineEquipResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRefineEquipResult_ProtoModID_descriptor_;
}
bool stRefineEquipResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRefineEquipResult_ProtoModID stRefineEquipResult::ModID;
const stRefineEquipResult_ProtoModID stRefineEquipResult::ProtoModID_MIN;
const stRefineEquipResult_ProtoModID stRefineEquipResult::ProtoModID_MAX;
const int stRefineEquipResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRefineEquipResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRefineEquipResult_ProtoFunID_descriptor_;
}
bool stRefineEquipResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 67:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRefineEquipResult_ProtoFunID stRefineEquipResult::FunID;
const stRefineEquipResult_ProtoFunID stRefineEquipResult::ProtoFunID_MIN;
const stRefineEquipResult_ProtoFunID stRefineEquipResult::ProtoFunID_MAX;
const int stRefineEquipResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRefineEquipResult::kBagTypeFieldNumber;
const int stRefineEquipResult::kInstanceIDFieldNumber;
const int stRefineEquipResult::kResultFieldNumber;
#endif  // !_MSC_VER

stRefineEquipResult::stRefineEquipResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRefineEquipResult::InitAsDefaultInstance() {
}

stRefineEquipResult::stRefineEquipResult(const stRefineEquipResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRefineEquipResult::SharedCtor() {
  _cached_size_ = 0;
  bagtype_ = 0u;
  instanceid_ = GOOGLE_ULONGLONG(0);
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRefineEquipResult::~stRefineEquipResult() {
  SharedDtor();
}

void stRefineEquipResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRefineEquipResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRefineEquipResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRefineEquipResult_descriptor_;
}

const stRefineEquipResult& stRefineEquipResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stRefineEquipResult* stRefineEquipResult::default_instance_ = NULL;

stRefineEquipResult* stRefineEquipResult::New() const {
  return new stRefineEquipResult;
}

void stRefineEquipResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bagtype_ = 0u;
    instanceid_ = GOOGLE_ULONGLONG(0);
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRefineEquipResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 bagType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bagtype_)));
          set_has_bagtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_instanceID;
        break;
      }

      // optional uint64 instanceID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_instanceID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &instanceid_)));
          set_has_instanceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // optional .Role.stRefineEquipResult.eResult result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Role::stRefineEquipResult_eResult_IsValid(value)) {
            set_result(static_cast< ::Role::stRefineEquipResult_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRefineEquipResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 bagType = 1;
  if (has_bagtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bagtype(), output);
  }

  // optional uint64 instanceID = 2;
  if (has_instanceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->instanceid(), output);
  }

  // optional .Role.stRefineEquipResult.eResult result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRefineEquipResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 bagType = 1;
  if (has_bagtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bagtype(), target);
  }

  // optional uint64 instanceID = 2;
  if (has_instanceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->instanceid(), target);
  }

  // optional .Role.stRefineEquipResult.eResult result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRefineEquipResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 bagType = 1;
    if (has_bagtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bagtype());
    }

    // optional uint64 instanceID = 2;
    if (has_instanceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->instanceid());
    }

    // optional .Role.stRefineEquipResult.eResult result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRefineEquipResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRefineEquipResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRefineEquipResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRefineEquipResult::MergeFrom(const stRefineEquipResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bagtype()) {
      set_bagtype(from.bagtype());
    }
    if (from.has_instanceid()) {
      set_instanceid(from.instanceid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRefineEquipResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRefineEquipResult::CopyFrom(const stRefineEquipResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRefineEquipResult::IsInitialized() const {

  return true;
}

void stRefineEquipResult::Swap(stRefineEquipResult* other) {
  if (other != this) {
    std::swap(bagtype_, other->bagtype_);
    std::swap(instanceid_, other->instanceid_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRefineEquipResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRefineEquipResult_descriptor_;
  metadata.reflection = stRefineEquipResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stSynTotoalRecharge_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynTotoalRecharge_ProtoModID_descriptor_;
}
bool stSynTotoalRecharge_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynTotoalRecharge_ProtoModID stSynTotoalRecharge::ModID;
const stSynTotoalRecharge_ProtoModID stSynTotoalRecharge::ProtoModID_MIN;
const stSynTotoalRecharge_ProtoModID stSynTotoalRecharge::ProtoModID_MAX;
const int stSynTotoalRecharge::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSynTotoalRecharge_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynTotoalRecharge_ProtoFunID_descriptor_;
}
bool stSynTotoalRecharge_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 68:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynTotoalRecharge_ProtoFunID stSynTotoalRecharge::FunID;
const stSynTotoalRecharge_ProtoFunID stSynTotoalRecharge::ProtoFunID_MIN;
const stSynTotoalRecharge_ProtoFunID stSynTotoalRecharge::ProtoFunID_MAX;
const int stSynTotoalRecharge::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stSynTotoalRecharge::kTotalRechargeFieldNumber;
const int stSynTotoalRecharge::kTodayRechargeFieldNumber;
#endif  // !_MSC_VER

stSynTotoalRecharge::stSynTotoalRecharge()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSynTotoalRecharge::InitAsDefaultInstance() {
}

stSynTotoalRecharge::stSynTotoalRecharge(const stSynTotoalRecharge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSynTotoalRecharge::SharedCtor() {
  _cached_size_ = 0;
  totalrecharge_ = 0u;
  todayrecharge_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSynTotoalRecharge::~stSynTotoalRecharge() {
  SharedDtor();
}

void stSynTotoalRecharge::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stSynTotoalRecharge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSynTotoalRecharge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynTotoalRecharge_descriptor_;
}

const stSynTotoalRecharge& stSynTotoalRecharge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stSynTotoalRecharge* stSynTotoalRecharge::default_instance_ = NULL;

stSynTotoalRecharge* stSynTotoalRecharge::New() const {
  return new stSynTotoalRecharge;
}

void stSynTotoalRecharge::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    totalrecharge_ = 0u;
    todayrecharge_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSynTotoalRecharge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 totalRecharge = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totalrecharge_)));
          set_has_totalrecharge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_todayRecharge;
        break;
      }

      // optional uint32 todayRecharge = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_todayRecharge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &todayrecharge_)));
          set_has_todayrecharge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSynTotoalRecharge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 totalRecharge = 1;
  if (has_totalrecharge()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->totalrecharge(), output);
  }

  // optional uint32 todayRecharge = 2;
  if (has_todayrecharge()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->todayrecharge(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSynTotoalRecharge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 totalRecharge = 1;
  if (has_totalrecharge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->totalrecharge(), target);
  }

  // optional uint32 todayRecharge = 2;
  if (has_todayrecharge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->todayrecharge(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSynTotoalRecharge::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 totalRecharge = 1;
    if (has_totalrecharge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->totalrecharge());
    }

    // optional uint32 todayRecharge = 2;
    if (has_todayrecharge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->todayrecharge());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSynTotoalRecharge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSynTotoalRecharge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSynTotoalRecharge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSynTotoalRecharge::MergeFrom(const stSynTotoalRecharge& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_totalrecharge()) {
      set_totalrecharge(from.totalrecharge());
    }
    if (from.has_todayrecharge()) {
      set_todayrecharge(from.todayrecharge());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSynTotoalRecharge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSynTotoalRecharge::CopyFrom(const stSynTotoalRecharge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSynTotoalRecharge::IsInitialized() const {

  return true;
}

void stSynTotoalRecharge::Swap(stSynTotoalRecharge* other) {
  if (other != this) {
    std::swap(totalrecharge_, other->totalrecharge_);
    std::swap(todayrecharge_, other->todayrecharge_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSynTotoalRecharge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSynTotoalRecharge_descriptor_;
  metadata.reflection = stSynTotoalRecharge_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stSynSkillInfo::kSkillIDFieldNumber;
const int stSynSkillInfo::kSkillLvFieldNumber;
#endif  // !_MSC_VER

stSynSkillInfo::stSynSkillInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSynSkillInfo::InitAsDefaultInstance() {
}

stSynSkillInfo::stSynSkillInfo(const stSynSkillInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSynSkillInfo::SharedCtor() {
  _cached_size_ = 0;
  skillid_ = 0u;
  skilllv_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSynSkillInfo::~stSynSkillInfo() {
  SharedDtor();
}

void stSynSkillInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stSynSkillInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSynSkillInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynSkillInfo_descriptor_;
}

const stSynSkillInfo& stSynSkillInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stSynSkillInfo* stSynSkillInfo::default_instance_ = NULL;

stSynSkillInfo* stSynSkillInfo::New() const {
  return new stSynSkillInfo;
}

void stSynSkillInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skillid_ = 0u;
    skilllv_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSynSkillInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 skillID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skillLv;
        break;
      }

      // optional uint32 skillLv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skilllv_)));
          set_has_skilllv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSynSkillInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 skillID = 1;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->skillid(), output);
  }

  // optional uint32 skillLv = 2;
  if (has_skilllv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->skilllv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSynSkillInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 skillID = 1;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->skillid(), target);
  }

  // optional uint32 skillLv = 2;
  if (has_skilllv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->skilllv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSynSkillInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 skillID = 1;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillid());
    }

    // optional uint32 skillLv = 2;
    if (has_skilllv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skilllv());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSynSkillInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSynSkillInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSynSkillInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSynSkillInfo::MergeFrom(const stSynSkillInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_skilllv()) {
      set_skilllv(from.skilllv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSynSkillInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSynSkillInfo::CopyFrom(const stSynSkillInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSynSkillInfo::IsInitialized() const {

  return true;
}

void stSynSkillInfo::Swap(stSynSkillInfo* other) {
  if (other != this) {
    std::swap(skillid_, other->skillid_);
    std::swap(skilllv_, other->skilllv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSynSkillInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSynSkillInfo_descriptor_;
  metadata.reflection = stSynSkillInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stSynUserAllSkill_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynUserAllSkill_ProtoModID_descriptor_;
}
bool stSynUserAllSkill_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynUserAllSkill_ProtoModID stSynUserAllSkill::ModID;
const stSynUserAllSkill_ProtoModID stSynUserAllSkill::ProtoModID_MIN;
const stSynUserAllSkill_ProtoModID stSynUserAllSkill::ProtoModID_MAX;
const int stSynUserAllSkill::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSynUserAllSkill_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynUserAllSkill_ProtoFunID_descriptor_;
}
bool stSynUserAllSkill_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 69:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynUserAllSkill_ProtoFunID stSynUserAllSkill::FunID;
const stSynUserAllSkill_ProtoFunID stSynUserAllSkill::ProtoFunID_MIN;
const stSynUserAllSkill_ProtoFunID stSynUserAllSkill::ProtoFunID_MAX;
const int stSynUserAllSkill::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stSynUserAllSkill::kSkillInfoFieldNumber;
#endif  // !_MSC_VER

stSynUserAllSkill::stSynUserAllSkill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSynUserAllSkill::InitAsDefaultInstance() {
}

stSynUserAllSkill::stSynUserAllSkill(const stSynUserAllSkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSynUserAllSkill::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSynUserAllSkill::~stSynUserAllSkill() {
  SharedDtor();
}

void stSynUserAllSkill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stSynUserAllSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSynUserAllSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynUserAllSkill_descriptor_;
}

const stSynUserAllSkill& stSynUserAllSkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stSynUserAllSkill* stSynUserAllSkill::default_instance_ = NULL;

stSynUserAllSkill* stSynUserAllSkill::New() const {
  return new stSynUserAllSkill;
}

void stSynUserAllSkill::Clear() {
  skillinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSynUserAllSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Role.stSynSkillInfo skillInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skillInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skillinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_skillInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSynUserAllSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Role.stSynSkillInfo skillInfo = 1;
  for (int i = 0; i < this->skillinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->skillinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSynUserAllSkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Role.stSynSkillInfo skillInfo = 1;
  for (int i = 0; i < this->skillinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->skillinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSynUserAllSkill::ByteSize() const {
  int total_size = 0;

  // repeated .Role.stSynSkillInfo skillInfo = 1;
  total_size += 1 * this->skillinfo_size();
  for (int i = 0; i < this->skillinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skillinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSynUserAllSkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSynUserAllSkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSynUserAllSkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSynUserAllSkill::MergeFrom(const stSynUserAllSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  skillinfo_.MergeFrom(from.skillinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSynUserAllSkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSynUserAllSkill::CopyFrom(const stSynUserAllSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSynUserAllSkill::IsInitialized() const {

  return true;
}

void stSynUserAllSkill::Swap(stSynUserAllSkill* other) {
  if (other != this) {
    skillinfo_.Swap(&other->skillinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSynUserAllSkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSynUserAllSkill_descriptor_;
  metadata.reflection = stSynUserAllSkill_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stAddUserSkill_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stAddUserSkill_ProtoModID_descriptor_;
}
bool stAddUserSkill_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stAddUserSkill_ProtoModID stAddUserSkill::ModID;
const stAddUserSkill_ProtoModID stAddUserSkill::ProtoModID_MIN;
const stAddUserSkill_ProtoModID stAddUserSkill::ProtoModID_MAX;
const int stAddUserSkill::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stAddUserSkill_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stAddUserSkill_ProtoFunID_descriptor_;
}
bool stAddUserSkill_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 70:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stAddUserSkill_ProtoFunID stAddUserSkill::FunID;
const stAddUserSkill_ProtoFunID stAddUserSkill::ProtoFunID_MIN;
const stAddUserSkill_ProtoFunID stAddUserSkill::ProtoFunID_MAX;
const int stAddUserSkill::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stAddUserSkill::kDataFieldNumber;
#endif  // !_MSC_VER

stAddUserSkill::stAddUserSkill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stAddUserSkill::InitAsDefaultInstance() {
  data_ = const_cast< ::Role::stSynSkillInfo*>(&::Role::stSynSkillInfo::default_instance());
}

stAddUserSkill::stAddUserSkill(const stAddUserSkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stAddUserSkill::SharedCtor() {
  _cached_size_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stAddUserSkill::~stAddUserSkill() {
  SharedDtor();
}

void stAddUserSkill::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void stAddUserSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stAddUserSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stAddUserSkill_descriptor_;
}

const stAddUserSkill& stAddUserSkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stAddUserSkill* stAddUserSkill::default_instance_ = NULL;

stAddUserSkill* stAddUserSkill::New() const {
  return new stAddUserSkill;
}

void stAddUserSkill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_data()) {
      if (data_ != NULL) data_->::Role::stSynSkillInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stAddUserSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Role.stSynSkillInfo data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stAddUserSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Role.stSynSkillInfo data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stAddUserSkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Role.stSynSkillInfo data = 1;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stAddUserSkill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Role.stSynSkillInfo data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stAddUserSkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stAddUserSkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stAddUserSkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stAddUserSkill::MergeFrom(const stAddUserSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      mutable_data()->::Role::stSynSkillInfo::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stAddUserSkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stAddUserSkill::CopyFrom(const stAddUserSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stAddUserSkill::IsInitialized() const {

  return true;
}

void stAddUserSkill::Swap(stAddUserSkill* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stAddUserSkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stAddUserSkill_descriptor_;
  metadata.reflection = stAddUserSkill_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqUserDetailInfo_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqUserDetailInfo_ProtoModID_descriptor_;
}
bool stReqUserDetailInfo_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqUserDetailInfo_ProtoModID stReqUserDetailInfo::ModID;
const stReqUserDetailInfo_ProtoModID stReqUserDetailInfo::ProtoModID_MIN;
const stReqUserDetailInfo_ProtoModID stReqUserDetailInfo::ProtoModID_MAX;
const int stReqUserDetailInfo::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqUserDetailInfo_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqUserDetailInfo_ProtoFunID_descriptor_;
}
bool stReqUserDetailInfo_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 71:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqUserDetailInfo_ProtoFunID stReqUserDetailInfo::FunID;
const stReqUserDetailInfo_ProtoFunID stReqUserDetailInfo::ProtoFunID_MIN;
const stReqUserDetailInfo_ProtoFunID stReqUserDetailInfo::ProtoFunID_MAX;
const int stReqUserDetailInfo::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqUserDetailInfo::kCharIDFieldNumber;
#endif  // !_MSC_VER

stReqUserDetailInfo::stReqUserDetailInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqUserDetailInfo::InitAsDefaultInstance() {
}

stReqUserDetailInfo::stReqUserDetailInfo(const stReqUserDetailInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqUserDetailInfo::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqUserDetailInfo::~stReqUserDetailInfo() {
  SharedDtor();
}

void stReqUserDetailInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqUserDetailInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqUserDetailInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqUserDetailInfo_descriptor_;
}

const stReqUserDetailInfo& stReqUserDetailInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stReqUserDetailInfo* stReqUserDetailInfo::default_instance_ = NULL;

stReqUserDetailInfo* stReqUserDetailInfo::New() const {
  return new stReqUserDetailInfo;
}

void stReqUserDetailInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqUserDetailInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqUserDetailInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqUserDetailInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqUserDetailInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqUserDetailInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqUserDetailInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqUserDetailInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqUserDetailInfo::MergeFrom(const stReqUserDetailInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqUserDetailInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqUserDetailInfo::CopyFrom(const stReqUserDetailInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqUserDetailInfo::IsInitialized() const {

  return true;
}

void stReqUserDetailInfo::Swap(stReqUserDetailInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqUserDetailInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqUserDetailInfo_descriptor_;
  metadata.reflection = stReqUserDetailInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stUserDetailInfo_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUserDetailInfo_ProtoModID_descriptor_;
}
bool stUserDetailInfo_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stUserDetailInfo_ProtoModID stUserDetailInfo::ModID;
const stUserDetailInfo_ProtoModID stUserDetailInfo::ProtoModID_MIN;
const stUserDetailInfo_ProtoModID stUserDetailInfo::ProtoModID_MAX;
const int stUserDetailInfo::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stUserDetailInfo_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUserDetailInfo_ProtoFunID_descriptor_;
}
bool stUserDetailInfo_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 72:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stUserDetailInfo_ProtoFunID stUserDetailInfo::FunID;
const stUserDetailInfo_ProtoFunID stUserDetailInfo::ProtoFunID_MIN;
const stUserDetailInfo_ProtoFunID stUserDetailInfo::ProtoFunID_MAX;
const int stUserDetailInfo::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stUserDetailInfo::kMainDataFieldNumber;
const int stUserDetailInfo::kItemDataFieldNumber;
const int stUserDetailInfo::kHeroDataFieldNumber;
const int stUserDetailInfo::kGuildNameFieldNumber;
const int stUserDetailInfo::kCoupleNameFieldNumber;
const int stUserDetailInfo::kMountIDFieldNumber;
#endif  // !_MSC_VER

stUserDetailInfo::stUserDetailInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stUserDetailInfo::InitAsDefaultInstance() {
  maindata_ = const_cast< ::Role::stRoleMainData*>(&::Role::stRoleMainData::default_instance());
}

stUserDetailInfo::stUserDetailInfo(const stUserDetailInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stUserDetailInfo::SharedCtor() {
  _cached_size_ = 0;
  maindata_ = NULL;
  guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  couplename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mountid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stUserDetailInfo::~stUserDetailInfo() {
  SharedDtor();
}

void stUserDetailInfo::SharedDtor() {
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    delete guildname_;
  }
  if (couplename_ != &::google::protobuf::internal::kEmptyString) {
    delete couplename_;
  }
  if (this != default_instance_) {
    delete maindata_;
  }
}

void stUserDetailInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stUserDetailInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUserDetailInfo_descriptor_;
}

const stUserDetailInfo& stUserDetailInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stUserDetailInfo* stUserDetailInfo::default_instance_ = NULL;

stUserDetailInfo* stUserDetailInfo::New() const {
  return new stUserDetailInfo;
}

void stUserDetailInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_maindata()) {
      if (maindata_ != NULL) maindata_->::Role::stRoleMainData::Clear();
    }
    if (has_guildname()) {
      if (guildname_ != &::google::protobuf::internal::kEmptyString) {
        guildname_->clear();
      }
    }
    if (has_couplename()) {
      if (couplename_ != &::google::protobuf::internal::kEmptyString) {
        couplename_->clear();
      }
    }
    mountid_ = 0u;
  }
  itemdata_.Clear();
  herodata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stUserDetailInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Role.stRoleMainData mainData = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_maindata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_itemData;
        break;
      }

      // repeated .Role.stSynItemInfo itemData = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_itemData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_itemdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_itemData;
        if (input->ExpectTag(26)) goto parse_heroData;
        break;
      }

      // repeated .Role.stSynHeroInfo heroData = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_heroData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_herodata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_heroData;
        if (input->ExpectTag(34)) goto parse_guildName;
        break;
      }

      // optional string guildName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guildName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guildname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guildname().data(), this->guildname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_coupleName;
        break;
      }

      // optional string coupleName = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_coupleName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_couplename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->couplename().data(), this->couplename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_mountID;
        break;
      }

      // optional uint32 mountID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mountID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mountid_)));
          set_has_mountid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stUserDetailInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Role.stRoleMainData mainData = 1;
  if (has_maindata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->maindata(), output);
  }

  // repeated .Role.stSynItemInfo itemData = 2;
  for (int i = 0; i < this->itemdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->itemdata(i), output);
  }

  // repeated .Role.stSynHeroInfo heroData = 3;
  for (int i = 0; i < this->herodata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->herodata(i), output);
  }

  // optional string guildName = 4;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->guildname(), output);
  }

  // optional string coupleName = 5;
  if (has_couplename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->couplename().data(), this->couplename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->couplename(), output);
  }

  // optional uint32 mountID = 6;
  if (has_mountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->mountid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stUserDetailInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Role.stRoleMainData mainData = 1;
  if (has_maindata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->maindata(), target);
  }

  // repeated .Role.stSynItemInfo itemData = 2;
  for (int i = 0; i < this->itemdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->itemdata(i), target);
  }

  // repeated .Role.stSynHeroInfo heroData = 3;
  for (int i = 0; i < this->herodata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->herodata(i), target);
  }

  // optional string guildName = 4;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->guildname(), target);
  }

  // optional string coupleName = 5;
  if (has_couplename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->couplename().data(), this->couplename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->couplename(), target);
  }

  // optional uint32 mountID = 6;
  if (has_mountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->mountid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stUserDetailInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Role.stRoleMainData mainData = 1;
    if (has_maindata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->maindata());
    }

    // optional string guildName = 4;
    if (has_guildname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildname());
    }

    // optional string coupleName = 5;
    if (has_couplename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->couplename());
    }

    // optional uint32 mountID = 6;
    if (has_mountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mountid());
    }

  }
  // repeated .Role.stSynItemInfo itemData = 2;
  total_size += 1 * this->itemdata_size();
  for (int i = 0; i < this->itemdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->itemdata(i));
  }

  // repeated .Role.stSynHeroInfo heroData = 3;
  total_size += 1 * this->herodata_size();
  for (int i = 0; i < this->herodata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->herodata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stUserDetailInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stUserDetailInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stUserDetailInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stUserDetailInfo::MergeFrom(const stUserDetailInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  itemdata_.MergeFrom(from.itemdata_);
  herodata_.MergeFrom(from.herodata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_maindata()) {
      mutable_maindata()->::Role::stRoleMainData::MergeFrom(from.maindata());
    }
    if (from.has_guildname()) {
      set_guildname(from.guildname());
    }
    if (from.has_couplename()) {
      set_couplename(from.couplename());
    }
    if (from.has_mountid()) {
      set_mountid(from.mountid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stUserDetailInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stUserDetailInfo::CopyFrom(const stUserDetailInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stUserDetailInfo::IsInitialized() const {

  return true;
}

void stUserDetailInfo::Swap(stUserDetailInfo* other) {
  if (other != this) {
    std::swap(maindata_, other->maindata_);
    itemdata_.Swap(&other->itemdata_);
    herodata_.Swap(&other->herodata_);
    std::swap(guildname_, other->guildname_);
    std::swap(couplename_, other->couplename_);
    std::swap(mountid_, other->mountid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stUserDetailInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stUserDetailInfo_descriptor_;
  metadata.reflection = stUserDetailInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stUseItem_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUseItem_ProtoModID_descriptor_;
}
bool stUseItem_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stUseItem_ProtoModID stUseItem::ModID;
const stUseItem_ProtoModID stUseItem::ProtoModID_MIN;
const stUseItem_ProtoModID stUseItem::ProtoModID_MAX;
const int stUseItem::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stUseItem_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUseItem_ProtoFunID_descriptor_;
}
bool stUseItem_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 73:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stUseItem_ProtoFunID stUseItem::FunID;
const stUseItem_ProtoFunID stUseItem::ProtoFunID_MIN;
const stUseItem_ProtoFunID stUseItem::ProtoFunID_MAX;
const int stUseItem::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stUseItem::kBagTypeFieldNumber;
const int stUseItem::kInstanceIDFieldNumber;
const int stUseItem::kBatchUseFieldNumber;
#endif  // !_MSC_VER

stUseItem::stUseItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stUseItem::InitAsDefaultInstance() {
}

stUseItem::stUseItem(const stUseItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stUseItem::SharedCtor() {
  _cached_size_ = 0;
  bagtype_ = 0u;
  instanceid_ = GOOGLE_ULONGLONG(0);
  batchuse_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stUseItem::~stUseItem() {
  SharedDtor();
}

void stUseItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stUseItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stUseItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUseItem_descriptor_;
}

const stUseItem& stUseItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stUseItem* stUseItem::default_instance_ = NULL;

stUseItem* stUseItem::New() const {
  return new stUseItem;
}

void stUseItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bagtype_ = 0u;
    instanceid_ = GOOGLE_ULONGLONG(0);
    batchuse_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stUseItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 bagType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bagtype_)));
          set_has_bagtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_instanceID;
        break;
      }

      // optional uint64 instanceID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_instanceID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &instanceid_)));
          set_has_instanceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_batchUse;
        break;
      }

      // optional bool batchUse = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_batchUse:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &batchuse_)));
          set_has_batchuse();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stUseItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 bagType = 1;
  if (has_bagtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bagtype(), output);
  }

  // optional uint64 instanceID = 2;
  if (has_instanceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->instanceid(), output);
  }

  // optional bool batchUse = 3;
  if (has_batchuse()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->batchuse(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stUseItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 bagType = 1;
  if (has_bagtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bagtype(), target);
  }

  // optional uint64 instanceID = 2;
  if (has_instanceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->instanceid(), target);
  }

  // optional bool batchUse = 3;
  if (has_batchuse()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->batchuse(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stUseItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 bagType = 1;
    if (has_bagtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bagtype());
    }

    // optional uint64 instanceID = 2;
    if (has_instanceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->instanceid());
    }

    // optional bool batchUse = 3;
    if (has_batchuse()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stUseItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stUseItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stUseItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stUseItem::MergeFrom(const stUseItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bagtype()) {
      set_bagtype(from.bagtype());
    }
    if (from.has_instanceid()) {
      set_instanceid(from.instanceid());
    }
    if (from.has_batchuse()) {
      set_batchuse(from.batchuse());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stUseItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stUseItem::CopyFrom(const stUseItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stUseItem::IsInitialized() const {

  return true;
}

void stUseItem::Swap(stUseItem* other) {
  if (other != this) {
    std::swap(bagtype_, other->bagtype_);
    std::swap(instanceid_, other->instanceid_);
    std::swap(batchuse_, other->batchuse_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stUseItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stUseItem_descriptor_;
  metadata.reflection = stUseItem_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stUseItemError_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUseItemError_eResult_descriptor_;
}
bool stUseItemError_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stUseItemError_eResult stUseItemError::eItem_Not_Exist;
const stUseItemError_eResult stUseItemError::eBag_Slot_Not_Enough;
const stUseItemError_eResult stUseItemError::eBag_Need_Media_Not_Exist;
const stUseItemError_eResult stUseItemError::eSuccess;
const stUseItemError_eResult stUseItemError::eUse_Item_Invalid;
const stUseItemError_eResult stUseItemError::eResult_MIN;
const stUseItemError_eResult stUseItemError::eResult_MAX;
const int stUseItemError::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stUseItemError_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUseItemError_ProtoModID_descriptor_;
}
bool stUseItemError_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stUseItemError_ProtoModID stUseItemError::ModID;
const stUseItemError_ProtoModID stUseItemError::ProtoModID_MIN;
const stUseItemError_ProtoModID stUseItemError::ProtoModID_MAX;
const int stUseItemError::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stUseItemError_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUseItemError_ProtoFunID_descriptor_;
}
bool stUseItemError_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 74:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stUseItemError_ProtoFunID stUseItemError::FunID;
const stUseItemError_ProtoFunID stUseItemError::ProtoFunID_MIN;
const stUseItemError_ProtoFunID stUseItemError::ProtoFunID_MAX;
const int stUseItemError::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stUseItemError::kResultFieldNumber;
const int stUseItemError::kItemIDFieldNumber;
#endif  // !_MSC_VER

stUseItemError::stUseItemError()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stUseItemError::InitAsDefaultInstance() {
}

stUseItemError::stUseItemError(const stUseItemError& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stUseItemError::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  itemid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stUseItemError::~stUseItemError() {
  SharedDtor();
}

void stUseItemError::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stUseItemError::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stUseItemError::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUseItemError_descriptor_;
}

const stUseItemError& stUseItemError::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stUseItemError* stUseItemError::default_instance_ = NULL;

stUseItemError* stUseItemError::New() const {
  return new stUseItemError;
}

void stUseItemError::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
    itemid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stUseItemError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Role.stUseItemError.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Role::stUseItemError_eResult_IsValid(value)) {
            set_result(static_cast< ::Role::stUseItemError_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemID;
        break;
      }

      // optional uint32 itemID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stUseItemError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Role.stUseItemError.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional uint32 itemID = 2;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->itemid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stUseItemError::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Role.stUseItemError.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional uint32 itemID = 2;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->itemid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stUseItemError::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Role.stUseItemError.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional uint32 itemID = 2;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stUseItemError::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stUseItemError* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stUseItemError*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stUseItemError::MergeFrom(const stUseItemError& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stUseItemError::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stUseItemError::CopyFrom(const stUseItemError& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stUseItemError::IsInitialized() const {

  return true;
}

void stUseItemError::Swap(stUseItemError* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(itemid_, other->itemid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stUseItemError::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stUseItemError_descriptor_;
  metadata.reflection = stUseItemError_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stSynTipItem::kItemIDFieldNumber;
const int stSynTipItem::kNumFieldNumber;
#endif  // !_MSC_VER

stSynTipItem::stSynTipItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSynTipItem::InitAsDefaultInstance() {
}

stSynTipItem::stSynTipItem(const stSynTipItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSynTipItem::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0u;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSynTipItem::~stSynTipItem() {
  SharedDtor();
}

void stSynTipItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stSynTipItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSynTipItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynTipItem_descriptor_;
}

const stSynTipItem& stSynTipItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stSynTipItem* stSynTipItem::default_instance_ = NULL;

stSynTipItem* stSynTipItem::New() const {
  return new stSynTipItem;
}

void stSynTipItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = 0u;
    num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSynTipItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 itemID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional uint32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSynTipItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 itemID = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itemid(), output);
  }

  // optional uint32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSynTipItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 itemID = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->itemid(), target);
  }

  // optional uint32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSynTipItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 itemID = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // optional uint32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSynTipItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSynTipItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSynTipItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSynTipItem::MergeFrom(const stSynTipItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSynTipItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSynTipItem::CopyFrom(const stSynTipItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSynTipItem::IsInitialized() const {

  return true;
}

void stSynTipItem::Swap(stSynTipItem* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSynTipItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSynTipItem_descriptor_;
  metadata.reflection = stSynTipItem_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stObtainItemTip_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stObtainItemTip_ProtoModID_descriptor_;
}
bool stObtainItemTip_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stObtainItemTip_ProtoModID stObtainItemTip::ModID;
const stObtainItemTip_ProtoModID stObtainItemTip::ProtoModID_MIN;
const stObtainItemTip_ProtoModID stObtainItemTip::ProtoModID_MAX;
const int stObtainItemTip::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stObtainItemTip_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stObtainItemTip_ProtoFunID_descriptor_;
}
bool stObtainItemTip_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 75:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stObtainItemTip_ProtoFunID stObtainItemTip::FunID;
const stObtainItemTip_ProtoFunID stObtainItemTip::ProtoFunID_MIN;
const stObtainItemTip_ProtoFunID stObtainItemTip::ProtoFunID_MAX;
const int stObtainItemTip::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stObtainItemTip::kGetItemsFieldNumber;
#endif  // !_MSC_VER

stObtainItemTip::stObtainItemTip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stObtainItemTip::InitAsDefaultInstance() {
}

stObtainItemTip::stObtainItemTip(const stObtainItemTip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stObtainItemTip::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stObtainItemTip::~stObtainItemTip() {
  SharedDtor();
}

void stObtainItemTip::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stObtainItemTip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stObtainItemTip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stObtainItemTip_descriptor_;
}

const stObtainItemTip& stObtainItemTip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stObtainItemTip* stObtainItemTip::default_instance_ = NULL;

stObtainItemTip* stObtainItemTip::New() const {
  return new stObtainItemTip;
}

void stObtainItemTip::Clear() {
  getitems_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stObtainItemTip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Role.stSynTipItem getItems = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_getItems:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_getitems()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_getItems;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stObtainItemTip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Role.stSynTipItem getItems = 1;
  for (int i = 0; i < this->getitems_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->getitems(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stObtainItemTip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Role.stSynTipItem getItems = 1;
  for (int i = 0; i < this->getitems_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->getitems(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stObtainItemTip::ByteSize() const {
  int total_size = 0;

  // repeated .Role.stSynTipItem getItems = 1;
  total_size += 1 * this->getitems_size();
  for (int i = 0; i < this->getitems_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->getitems(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stObtainItemTip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stObtainItemTip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stObtainItemTip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stObtainItemTip::MergeFrom(const stObtainItemTip& from) {
  GOOGLE_CHECK_NE(&from, this);
  getitems_.MergeFrom(from.getitems_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stObtainItemTip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stObtainItemTip::CopyFrom(const stObtainItemTip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stObtainItemTip::IsInitialized() const {

  return true;
}

void stObtainItemTip::Swap(stObtainItemTip* other) {
  if (other != this) {
    getitems_.Swap(&other->getitems_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stObtainItemTip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stObtainItemTip_descriptor_;
  metadata.reflection = stObtainItemTip_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqGetEquipSkill_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqGetEquipSkill_ProtoModID_descriptor_;
}
bool stReqGetEquipSkill_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqGetEquipSkill_ProtoModID stReqGetEquipSkill::ModID;
const stReqGetEquipSkill_ProtoModID stReqGetEquipSkill::ProtoModID_MIN;
const stReqGetEquipSkill_ProtoModID stReqGetEquipSkill::ProtoModID_MAX;
const int stReqGetEquipSkill::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqGetEquipSkill_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqGetEquipSkill_ProtoFunID_descriptor_;
}
bool stReqGetEquipSkill_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 76:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqGetEquipSkill_ProtoFunID stReqGetEquipSkill::FunID;
const stReqGetEquipSkill_ProtoFunID stReqGetEquipSkill::ProtoFunID_MIN;
const stReqGetEquipSkill_ProtoFunID stReqGetEquipSkill::ProtoFunID_MAX;
const int stReqGetEquipSkill::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqGetEquipSkill::kBagTypeFieldNumber;
const int stReqGetEquipSkill::kInstanceIDFieldNumber;
#endif  // !_MSC_VER

stReqGetEquipSkill::stReqGetEquipSkill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqGetEquipSkill::InitAsDefaultInstance() {
}

stReqGetEquipSkill::stReqGetEquipSkill(const stReqGetEquipSkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqGetEquipSkill::SharedCtor() {
  _cached_size_ = 0;
  bagtype_ = 0u;
  instanceid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqGetEquipSkill::~stReqGetEquipSkill() {
  SharedDtor();
}

void stReqGetEquipSkill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqGetEquipSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqGetEquipSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqGetEquipSkill_descriptor_;
}

const stReqGetEquipSkill& stReqGetEquipSkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stReqGetEquipSkill* stReqGetEquipSkill::default_instance_ = NULL;

stReqGetEquipSkill* stReqGetEquipSkill::New() const {
  return new stReqGetEquipSkill;
}

void stReqGetEquipSkill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bagtype_ = 0u;
    instanceid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqGetEquipSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 bagType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bagtype_)));
          set_has_bagtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_instanceID;
        break;
      }

      // optional uint64 instanceID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_instanceID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &instanceid_)));
          set_has_instanceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqGetEquipSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 bagType = 1;
  if (has_bagtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bagtype(), output);
  }

  // optional uint64 instanceID = 2;
  if (has_instanceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->instanceid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqGetEquipSkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 bagType = 1;
  if (has_bagtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bagtype(), target);
  }

  // optional uint64 instanceID = 2;
  if (has_instanceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->instanceid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqGetEquipSkill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 bagType = 1;
    if (has_bagtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bagtype());
    }

    // optional uint64 instanceID = 2;
    if (has_instanceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->instanceid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqGetEquipSkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqGetEquipSkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqGetEquipSkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqGetEquipSkill::MergeFrom(const stReqGetEquipSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bagtype()) {
      set_bagtype(from.bagtype());
    }
    if (from.has_instanceid()) {
      set_instanceid(from.instanceid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqGetEquipSkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqGetEquipSkill::CopyFrom(const stReqGetEquipSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqGetEquipSkill::IsInitialized() const {

  return true;
}

void stReqGetEquipSkill::Swap(stReqGetEquipSkill* other) {
  if (other != this) {
    std::swap(bagtype_, other->bagtype_);
    std::swap(instanceid_, other->instanceid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqGetEquipSkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqGetEquipSkill_descriptor_;
  metadata.reflection = stReqGetEquipSkill_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stGetEquipSkillResult_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGetEquipSkillResult_eResult_descriptor_;
}
bool stGetEquipSkillResult_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stGetEquipSkillResult_eResult stGetEquipSkillResult::SUCCESS;
const stGetEquipSkillResult_eResult stGetEquipSkillResult::NOT_ENOUGH_DIAMOND;
const stGetEquipSkillResult_eResult stGetEquipSkillResult::TIME_USE_OUT;
const stGetEquipSkillResult_eResult stGetEquipSkillResult::HAS_GOT_SKILL;
const stGetEquipSkillResult_eResult stGetEquipSkillResult::eResult_MIN;
const stGetEquipSkillResult_eResult stGetEquipSkillResult::eResult_MAX;
const int stGetEquipSkillResult::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stGetEquipSkillResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGetEquipSkillResult_ProtoModID_descriptor_;
}
bool stGetEquipSkillResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stGetEquipSkillResult_ProtoModID stGetEquipSkillResult::ModID;
const stGetEquipSkillResult_ProtoModID stGetEquipSkillResult::ProtoModID_MIN;
const stGetEquipSkillResult_ProtoModID stGetEquipSkillResult::ProtoModID_MAX;
const int stGetEquipSkillResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stGetEquipSkillResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGetEquipSkillResult_ProtoFunID_descriptor_;
}
bool stGetEquipSkillResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 77:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stGetEquipSkillResult_ProtoFunID stGetEquipSkillResult::FunID;
const stGetEquipSkillResult_ProtoFunID stGetEquipSkillResult::ProtoFunID_MIN;
const stGetEquipSkillResult_ProtoFunID stGetEquipSkillResult::ProtoFunID_MAX;
const int stGetEquipSkillResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stGetEquipSkillResult::kBagTypeFieldNumber;
const int stGetEquipSkillResult::kInstanceIDFieldNumber;
const int stGetEquipSkillResult::kResultFieldNumber;
const int stGetEquipSkillResult::kSkillIDFieldNumber;
#endif  // !_MSC_VER

stGetEquipSkillResult::stGetEquipSkillResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stGetEquipSkillResult::InitAsDefaultInstance() {
}

stGetEquipSkillResult::stGetEquipSkillResult(const stGetEquipSkillResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stGetEquipSkillResult::SharedCtor() {
  _cached_size_ = 0;
  bagtype_ = 0u;
  instanceid_ = GOOGLE_ULONGLONG(0);
  result_ = 1;
  skillid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stGetEquipSkillResult::~stGetEquipSkillResult() {
  SharedDtor();
}

void stGetEquipSkillResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stGetEquipSkillResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stGetEquipSkillResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGetEquipSkillResult_descriptor_;
}

const stGetEquipSkillResult& stGetEquipSkillResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stGetEquipSkillResult* stGetEquipSkillResult::default_instance_ = NULL;

stGetEquipSkillResult* stGetEquipSkillResult::New() const {
  return new stGetEquipSkillResult;
}

void stGetEquipSkillResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bagtype_ = 0u;
    instanceid_ = GOOGLE_ULONGLONG(0);
    result_ = 1;
    skillid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stGetEquipSkillResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 bagType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bagtype_)));
          set_has_bagtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_instanceID;
        break;
      }

      // optional uint64 instanceID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_instanceID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &instanceid_)));
          set_has_instanceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // optional .Role.stGetEquipSkillResult.eResult result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Role::stGetEquipSkillResult_eResult_IsValid(value)) {
            set_result(static_cast< ::Role::stGetEquipSkillResult_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_skillID;
        break;
      }

      // optional uint32 skillID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stGetEquipSkillResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 bagType = 1;
  if (has_bagtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bagtype(), output);
  }

  // optional uint64 instanceID = 2;
  if (has_instanceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->instanceid(), output);
  }

  // optional .Role.stGetEquipSkillResult.eResult result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->result(), output);
  }

  // optional uint32 skillID = 4;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->skillid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stGetEquipSkillResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 bagType = 1;
  if (has_bagtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bagtype(), target);
  }

  // optional uint64 instanceID = 2;
  if (has_instanceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->instanceid(), target);
  }

  // optional .Role.stGetEquipSkillResult.eResult result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->result(), target);
  }

  // optional uint32 skillID = 4;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->skillid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stGetEquipSkillResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 bagType = 1;
    if (has_bagtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bagtype());
    }

    // optional uint64 instanceID = 2;
    if (has_instanceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->instanceid());
    }

    // optional .Role.stGetEquipSkillResult.eResult result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional uint32 skillID = 4;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stGetEquipSkillResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stGetEquipSkillResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stGetEquipSkillResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stGetEquipSkillResult::MergeFrom(const stGetEquipSkillResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bagtype()) {
      set_bagtype(from.bagtype());
    }
    if (from.has_instanceid()) {
      set_instanceid(from.instanceid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stGetEquipSkillResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stGetEquipSkillResult::CopyFrom(const stGetEquipSkillResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stGetEquipSkillResult::IsInitialized() const {

  return true;
}

void stGetEquipSkillResult::Swap(stGetEquipSkillResult* other) {
  if (other != this) {
    std::swap(bagtype_, other->bagtype_);
    std::swap(instanceid_, other->instanceid_);
    std::swap(result_, other->result_);
    std::swap(skillid_, other->skillid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stGetEquipSkillResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stGetEquipSkillResult_descriptor_;
  metadata.reflection = stGetEquipSkillResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqRefineEquipSkill_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqRefineEquipSkill_ProtoModID_descriptor_;
}
bool stReqRefineEquipSkill_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqRefineEquipSkill_ProtoModID stReqRefineEquipSkill::ModID;
const stReqRefineEquipSkill_ProtoModID stReqRefineEquipSkill::ProtoModID_MIN;
const stReqRefineEquipSkill_ProtoModID stReqRefineEquipSkill::ProtoModID_MAX;
const int stReqRefineEquipSkill::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqRefineEquipSkill_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqRefineEquipSkill_ProtoFunID_descriptor_;
}
bool stReqRefineEquipSkill_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 78:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqRefineEquipSkill_ProtoFunID stReqRefineEquipSkill::FunID;
const stReqRefineEquipSkill_ProtoFunID stReqRefineEquipSkill::ProtoFunID_MIN;
const stReqRefineEquipSkill_ProtoFunID stReqRefineEquipSkill::ProtoFunID_MAX;
const int stReqRefineEquipSkill::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqRefineEquipSkill::kBagTypeFieldNumber;
const int stReqRefineEquipSkill::kInstanceIDFieldNumber;
#endif  // !_MSC_VER

stReqRefineEquipSkill::stReqRefineEquipSkill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqRefineEquipSkill::InitAsDefaultInstance() {
}

stReqRefineEquipSkill::stReqRefineEquipSkill(const stReqRefineEquipSkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqRefineEquipSkill::SharedCtor() {
  _cached_size_ = 0;
  bagtype_ = 0u;
  instanceid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqRefineEquipSkill::~stReqRefineEquipSkill() {
  SharedDtor();
}

void stReqRefineEquipSkill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqRefineEquipSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqRefineEquipSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqRefineEquipSkill_descriptor_;
}

const stReqRefineEquipSkill& stReqRefineEquipSkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stReqRefineEquipSkill* stReqRefineEquipSkill::default_instance_ = NULL;

stReqRefineEquipSkill* stReqRefineEquipSkill::New() const {
  return new stReqRefineEquipSkill;
}

void stReqRefineEquipSkill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bagtype_ = 0u;
    instanceid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqRefineEquipSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 bagType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bagtype_)));
          set_has_bagtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_instanceID;
        break;
      }

      // optional uint64 instanceID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_instanceID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &instanceid_)));
          set_has_instanceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqRefineEquipSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 bagType = 1;
  if (has_bagtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bagtype(), output);
  }

  // optional uint64 instanceID = 2;
  if (has_instanceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->instanceid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqRefineEquipSkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 bagType = 1;
  if (has_bagtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bagtype(), target);
  }

  // optional uint64 instanceID = 2;
  if (has_instanceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->instanceid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqRefineEquipSkill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 bagType = 1;
    if (has_bagtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bagtype());
    }

    // optional uint64 instanceID = 2;
    if (has_instanceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->instanceid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqRefineEquipSkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqRefineEquipSkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqRefineEquipSkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqRefineEquipSkill::MergeFrom(const stReqRefineEquipSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bagtype()) {
      set_bagtype(from.bagtype());
    }
    if (from.has_instanceid()) {
      set_instanceid(from.instanceid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqRefineEquipSkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqRefineEquipSkill::CopyFrom(const stReqRefineEquipSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqRefineEquipSkill::IsInitialized() const {

  return true;
}

void stReqRefineEquipSkill::Swap(stReqRefineEquipSkill* other) {
  if (other != this) {
    std::swap(bagtype_, other->bagtype_);
    std::swap(instanceid_, other->instanceid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqRefineEquipSkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqRefineEquipSkill_descriptor_;
  metadata.reflection = stReqRefineEquipSkill_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRefineEquipSkillResult_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRefineEquipSkillResult_eResult_descriptor_;
}
bool stRefineEquipSkillResult_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRefineEquipSkillResult_eResult stRefineEquipSkillResult::eSuccess;
const stRefineEquipSkillResult_eResult stRefineEquipSkillResult::eSkill_Not_Exist;
const stRefineEquipSkillResult_eResult stRefineEquipSkillResult::eInner_Error;
const stRefineEquipSkillResult_eResult stRefineEquipSkillResult::eResult_MIN;
const stRefineEquipSkillResult_eResult stRefineEquipSkillResult::eResult_MAX;
const int stRefineEquipSkillResult::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRefineEquipSkillResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRefineEquipSkillResult_ProtoModID_descriptor_;
}
bool stRefineEquipSkillResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRefineEquipSkillResult_ProtoModID stRefineEquipSkillResult::ModID;
const stRefineEquipSkillResult_ProtoModID stRefineEquipSkillResult::ProtoModID_MIN;
const stRefineEquipSkillResult_ProtoModID stRefineEquipSkillResult::ProtoModID_MAX;
const int stRefineEquipSkillResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRefineEquipSkillResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRefineEquipSkillResult_ProtoFunID_descriptor_;
}
bool stRefineEquipSkillResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 79:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRefineEquipSkillResult_ProtoFunID stRefineEquipSkillResult::FunID;
const stRefineEquipSkillResult_ProtoFunID stRefineEquipSkillResult::ProtoFunID_MIN;
const stRefineEquipSkillResult_ProtoFunID stRefineEquipSkillResult::ProtoFunID_MAX;
const int stRefineEquipSkillResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRefineEquipSkillResult::kBagTypeFieldNumber;
const int stRefineEquipSkillResult::kInstanceIDFieldNumber;
const int stRefineEquipSkillResult::kResultFieldNumber;
#endif  // !_MSC_VER

stRefineEquipSkillResult::stRefineEquipSkillResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRefineEquipSkillResult::InitAsDefaultInstance() {
}

stRefineEquipSkillResult::stRefineEquipSkillResult(const stRefineEquipSkillResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRefineEquipSkillResult::SharedCtor() {
  _cached_size_ = 0;
  bagtype_ = 0u;
  instanceid_ = GOOGLE_ULONGLONG(0);
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRefineEquipSkillResult::~stRefineEquipSkillResult() {
  SharedDtor();
}

void stRefineEquipSkillResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRefineEquipSkillResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRefineEquipSkillResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRefineEquipSkillResult_descriptor_;
}

const stRefineEquipSkillResult& stRefineEquipSkillResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stRefineEquipSkillResult* stRefineEquipSkillResult::default_instance_ = NULL;

stRefineEquipSkillResult* stRefineEquipSkillResult::New() const {
  return new stRefineEquipSkillResult;
}

void stRefineEquipSkillResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bagtype_ = 0u;
    instanceid_ = GOOGLE_ULONGLONG(0);
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRefineEquipSkillResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 bagType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bagtype_)));
          set_has_bagtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_instanceID;
        break;
      }

      // optional uint64 instanceID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_instanceID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &instanceid_)));
          set_has_instanceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // optional .Role.stRefineEquipSkillResult.eResult result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Role::stRefineEquipSkillResult_eResult_IsValid(value)) {
            set_result(static_cast< ::Role::stRefineEquipSkillResult_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRefineEquipSkillResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 bagType = 1;
  if (has_bagtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bagtype(), output);
  }

  // optional uint64 instanceID = 2;
  if (has_instanceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->instanceid(), output);
  }

  // optional .Role.stRefineEquipSkillResult.eResult result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRefineEquipSkillResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 bagType = 1;
  if (has_bagtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bagtype(), target);
  }

  // optional uint64 instanceID = 2;
  if (has_instanceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->instanceid(), target);
  }

  // optional .Role.stRefineEquipSkillResult.eResult result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRefineEquipSkillResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 bagType = 1;
    if (has_bagtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bagtype());
    }

    // optional uint64 instanceID = 2;
    if (has_instanceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->instanceid());
    }

    // optional .Role.stRefineEquipSkillResult.eResult result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRefineEquipSkillResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRefineEquipSkillResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRefineEquipSkillResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRefineEquipSkillResult::MergeFrom(const stRefineEquipSkillResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bagtype()) {
      set_bagtype(from.bagtype());
    }
    if (from.has_instanceid()) {
      set_instanceid(from.instanceid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRefineEquipSkillResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRefineEquipSkillResult::CopyFrom(const stRefineEquipSkillResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRefineEquipSkillResult::IsInitialized() const {

  return true;
}

void stRefineEquipSkillResult::Swap(stRefineEquipSkillResult* other) {
  if (other != this) {
    std::swap(bagtype_, other->bagtype_);
    std::swap(instanceid_, other->instanceid_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRefineEquipSkillResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRefineEquipSkillResult_descriptor_;
  metadata.reflection = stRefineEquipSkillResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stMoveEquipSkill2Slot_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stMoveEquipSkill2Slot_ProtoModID_descriptor_;
}
bool stMoveEquipSkill2Slot_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stMoveEquipSkill2Slot_ProtoModID stMoveEquipSkill2Slot::ModID;
const stMoveEquipSkill2Slot_ProtoModID stMoveEquipSkill2Slot::ProtoModID_MIN;
const stMoveEquipSkill2Slot_ProtoModID stMoveEquipSkill2Slot::ProtoModID_MAX;
const int stMoveEquipSkill2Slot::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stMoveEquipSkill2Slot_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stMoveEquipSkill2Slot_ProtoFunID_descriptor_;
}
bool stMoveEquipSkill2Slot_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 80:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stMoveEquipSkill2Slot_ProtoFunID stMoveEquipSkill2Slot::FunID;
const stMoveEquipSkill2Slot_ProtoFunID stMoveEquipSkill2Slot::ProtoFunID_MIN;
const stMoveEquipSkill2Slot_ProtoFunID stMoveEquipSkill2Slot::ProtoFunID_MAX;
const int stMoveEquipSkill2Slot::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stMoveEquipSkill2Slot::kBagTypeFieldNumber;
const int stMoveEquipSkill2Slot::kInstanceIDFieldNumber;
const int stMoveEquipSkill2Slot::kIndexFieldNumber;
#endif  // !_MSC_VER

stMoveEquipSkill2Slot::stMoveEquipSkill2Slot()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stMoveEquipSkill2Slot::InitAsDefaultInstance() {
}

stMoveEquipSkill2Slot::stMoveEquipSkill2Slot(const stMoveEquipSkill2Slot& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stMoveEquipSkill2Slot::SharedCtor() {
  _cached_size_ = 0;
  bagtype_ = 0u;
  instanceid_ = GOOGLE_ULONGLONG(0);
  index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stMoveEquipSkill2Slot::~stMoveEquipSkill2Slot() {
  SharedDtor();
}

void stMoveEquipSkill2Slot::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stMoveEquipSkill2Slot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stMoveEquipSkill2Slot::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stMoveEquipSkill2Slot_descriptor_;
}

const stMoveEquipSkill2Slot& stMoveEquipSkill2Slot::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stMoveEquipSkill2Slot* stMoveEquipSkill2Slot::default_instance_ = NULL;

stMoveEquipSkill2Slot* stMoveEquipSkill2Slot::New() const {
  return new stMoveEquipSkill2Slot;
}

void stMoveEquipSkill2Slot::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bagtype_ = 0u;
    instanceid_ = GOOGLE_ULONGLONG(0);
    index_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stMoveEquipSkill2Slot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 bagType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bagtype_)));
          set_has_bagtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_instanceID;
        break;
      }

      // optional uint64 instanceID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_instanceID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &instanceid_)));
          set_has_instanceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_index;
        break;
      }

      // optional uint32 index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stMoveEquipSkill2Slot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 bagType = 1;
  if (has_bagtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bagtype(), output);
  }

  // optional uint64 instanceID = 2;
  if (has_instanceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->instanceid(), output);
  }

  // optional uint32 index = 3;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stMoveEquipSkill2Slot::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 bagType = 1;
  if (has_bagtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bagtype(), target);
  }

  // optional uint64 instanceID = 2;
  if (has_instanceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->instanceid(), target);
  }

  // optional uint32 index = 3;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stMoveEquipSkill2Slot::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 bagType = 1;
    if (has_bagtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bagtype());
    }

    // optional uint64 instanceID = 2;
    if (has_instanceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->instanceid());
    }

    // optional uint32 index = 3;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stMoveEquipSkill2Slot::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stMoveEquipSkill2Slot* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stMoveEquipSkill2Slot*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stMoveEquipSkill2Slot::MergeFrom(const stMoveEquipSkill2Slot& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bagtype()) {
      set_bagtype(from.bagtype());
    }
    if (from.has_instanceid()) {
      set_instanceid(from.instanceid());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stMoveEquipSkill2Slot::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stMoveEquipSkill2Slot::CopyFrom(const stMoveEquipSkill2Slot& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stMoveEquipSkill2Slot::IsInitialized() const {

  return true;
}

void stMoveEquipSkill2Slot::Swap(stMoveEquipSkill2Slot* other) {
  if (other != this) {
    std::swap(bagtype_, other->bagtype_);
    std::swap(instanceid_, other->instanceid_);
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stMoveEquipSkill2Slot::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stMoveEquipSkill2Slot_descriptor_;
  metadata.reflection = stMoveEquipSkill2Slot_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stMoveEquipSkillResult_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stMoveEquipSkillResult_eResult_descriptor_;
}
bool stMoveEquipSkillResult_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stMoveEquipSkillResult_eResult stMoveEquipSkillResult::eSuccess;
const stMoveEquipSkillResult_eResult stMoveEquipSkillResult::eSlot_Was_Locked;
const stMoveEquipSkillResult_eResult stMoveEquipSkillResult::eResult_MIN;
const stMoveEquipSkillResult_eResult stMoveEquipSkillResult::eResult_MAX;
const int stMoveEquipSkillResult::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stMoveEquipSkillResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stMoveEquipSkillResult_ProtoModID_descriptor_;
}
bool stMoveEquipSkillResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stMoveEquipSkillResult_ProtoModID stMoveEquipSkillResult::ModID;
const stMoveEquipSkillResult_ProtoModID stMoveEquipSkillResult::ProtoModID_MIN;
const stMoveEquipSkillResult_ProtoModID stMoveEquipSkillResult::ProtoModID_MAX;
const int stMoveEquipSkillResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stMoveEquipSkillResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stMoveEquipSkillResult_ProtoFunID_descriptor_;
}
bool stMoveEquipSkillResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 81:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stMoveEquipSkillResult_ProtoFunID stMoveEquipSkillResult::FunID;
const stMoveEquipSkillResult_ProtoFunID stMoveEquipSkillResult::ProtoFunID_MIN;
const stMoveEquipSkillResult_ProtoFunID stMoveEquipSkillResult::ProtoFunID_MAX;
const int stMoveEquipSkillResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stMoveEquipSkillResult::kBagTypeFieldNumber;
const int stMoveEquipSkillResult::kInstanceIDFieldNumber;
const int stMoveEquipSkillResult::kIndexFieldNumber;
const int stMoveEquipSkillResult::kSkillIDFieldNumber;
const int stMoveEquipSkillResult::kResultFieldNumber;
#endif  // !_MSC_VER

stMoveEquipSkillResult::stMoveEquipSkillResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stMoveEquipSkillResult::InitAsDefaultInstance() {
}

stMoveEquipSkillResult::stMoveEquipSkillResult(const stMoveEquipSkillResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stMoveEquipSkillResult::SharedCtor() {
  _cached_size_ = 0;
  bagtype_ = 0u;
  instanceid_ = GOOGLE_ULONGLONG(0);
  index_ = 0u;
  skillid_ = 0u;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stMoveEquipSkillResult::~stMoveEquipSkillResult() {
  SharedDtor();
}

void stMoveEquipSkillResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stMoveEquipSkillResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stMoveEquipSkillResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stMoveEquipSkillResult_descriptor_;
}

const stMoveEquipSkillResult& stMoveEquipSkillResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stMoveEquipSkillResult* stMoveEquipSkillResult::default_instance_ = NULL;

stMoveEquipSkillResult* stMoveEquipSkillResult::New() const {
  return new stMoveEquipSkillResult;
}

void stMoveEquipSkillResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bagtype_ = 0u;
    instanceid_ = GOOGLE_ULONGLONG(0);
    index_ = 0u;
    skillid_ = 0u;
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stMoveEquipSkillResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 bagType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bagtype_)));
          set_has_bagtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_instanceID;
        break;
      }

      // optional uint64 instanceID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_instanceID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &instanceid_)));
          set_has_instanceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_index;
        break;
      }

      // optional uint32 index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_skillID;
        break;
      }

      // optional uint32 skillID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_result;
        break;
      }

      // optional .Role.stMoveEquipSkillResult.eResult result = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Role::stMoveEquipSkillResult_eResult_IsValid(value)) {
            set_result(static_cast< ::Role::stMoveEquipSkillResult_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stMoveEquipSkillResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 bagType = 1;
  if (has_bagtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bagtype(), output);
  }

  // optional uint64 instanceID = 2;
  if (has_instanceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->instanceid(), output);
  }

  // optional uint32 index = 3;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->index(), output);
  }

  // optional uint32 skillID = 4;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->skillid(), output);
  }

  // optional .Role.stMoveEquipSkillResult.eResult result = 5;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stMoveEquipSkillResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 bagType = 1;
  if (has_bagtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bagtype(), target);
  }

  // optional uint64 instanceID = 2;
  if (has_instanceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->instanceid(), target);
  }

  // optional uint32 index = 3;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->index(), target);
  }

  // optional uint32 skillID = 4;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->skillid(), target);
  }

  // optional .Role.stMoveEquipSkillResult.eResult result = 5;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stMoveEquipSkillResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 bagType = 1;
    if (has_bagtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bagtype());
    }

    // optional uint64 instanceID = 2;
    if (has_instanceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->instanceid());
    }

    // optional uint32 index = 3;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

    // optional uint32 skillID = 4;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillid());
    }

    // optional .Role.stMoveEquipSkillResult.eResult result = 5;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stMoveEquipSkillResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stMoveEquipSkillResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stMoveEquipSkillResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stMoveEquipSkillResult::MergeFrom(const stMoveEquipSkillResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bagtype()) {
      set_bagtype(from.bagtype());
    }
    if (from.has_instanceid()) {
      set_instanceid(from.instanceid());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stMoveEquipSkillResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stMoveEquipSkillResult::CopyFrom(const stMoveEquipSkillResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stMoveEquipSkillResult::IsInitialized() const {

  return true;
}

void stMoveEquipSkillResult::Swap(stMoveEquipSkillResult* other) {
  if (other != this) {
    std::swap(bagtype_, other->bagtype_);
    std::swap(instanceid_, other->instanceid_);
    std::swap(index_, other->index_);
    std::swap(skillid_, other->skillid_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stMoveEquipSkillResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stMoveEquipSkillResult_descriptor_;
  metadata.reflection = stMoveEquipSkillResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqUpgradeEquipSkill_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqUpgradeEquipSkill_ProtoModID_descriptor_;
}
bool stReqUpgradeEquipSkill_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqUpgradeEquipSkill_ProtoModID stReqUpgradeEquipSkill::ModID;
const stReqUpgradeEquipSkill_ProtoModID stReqUpgradeEquipSkill::ProtoModID_MIN;
const stReqUpgradeEquipSkill_ProtoModID stReqUpgradeEquipSkill::ProtoModID_MAX;
const int stReqUpgradeEquipSkill::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqUpgradeEquipSkill_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqUpgradeEquipSkill_ProtoFunID_descriptor_;
}
bool stReqUpgradeEquipSkill_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 82:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqUpgradeEquipSkill_ProtoFunID stReqUpgradeEquipSkill::FunID;
const stReqUpgradeEquipSkill_ProtoFunID stReqUpgradeEquipSkill::ProtoFunID_MIN;
const stReqUpgradeEquipSkill_ProtoFunID stReqUpgradeEquipSkill::ProtoFunID_MAX;
const int stReqUpgradeEquipSkill::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqUpgradeEquipSkill::kBagTypeFieldNumber;
const int stReqUpgradeEquipSkill::kInstanceIDFieldNumber;
const int stReqUpgradeEquipSkill::kIndexFieldNumber;
#endif  // !_MSC_VER

stReqUpgradeEquipSkill::stReqUpgradeEquipSkill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqUpgradeEquipSkill::InitAsDefaultInstance() {
}

stReqUpgradeEquipSkill::stReqUpgradeEquipSkill(const stReqUpgradeEquipSkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqUpgradeEquipSkill::SharedCtor() {
  _cached_size_ = 0;
  bagtype_ = 0u;
  instanceid_ = GOOGLE_ULONGLONG(0);
  index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqUpgradeEquipSkill::~stReqUpgradeEquipSkill() {
  SharedDtor();
}

void stReqUpgradeEquipSkill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqUpgradeEquipSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqUpgradeEquipSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqUpgradeEquipSkill_descriptor_;
}

const stReqUpgradeEquipSkill& stReqUpgradeEquipSkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stReqUpgradeEquipSkill* stReqUpgradeEquipSkill::default_instance_ = NULL;

stReqUpgradeEquipSkill* stReqUpgradeEquipSkill::New() const {
  return new stReqUpgradeEquipSkill;
}

void stReqUpgradeEquipSkill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bagtype_ = 0u;
    instanceid_ = GOOGLE_ULONGLONG(0);
    index_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqUpgradeEquipSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 bagType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bagtype_)));
          set_has_bagtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_instanceID;
        break;
      }

      // optional uint64 instanceID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_instanceID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &instanceid_)));
          set_has_instanceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_index;
        break;
      }

      // optional uint32 index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqUpgradeEquipSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 bagType = 1;
  if (has_bagtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bagtype(), output);
  }

  // optional uint64 instanceID = 2;
  if (has_instanceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->instanceid(), output);
  }

  // optional uint32 index = 3;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqUpgradeEquipSkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 bagType = 1;
  if (has_bagtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bagtype(), target);
  }

  // optional uint64 instanceID = 2;
  if (has_instanceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->instanceid(), target);
  }

  // optional uint32 index = 3;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqUpgradeEquipSkill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 bagType = 1;
    if (has_bagtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bagtype());
    }

    // optional uint64 instanceID = 2;
    if (has_instanceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->instanceid());
    }

    // optional uint32 index = 3;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqUpgradeEquipSkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqUpgradeEquipSkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqUpgradeEquipSkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqUpgradeEquipSkill::MergeFrom(const stReqUpgradeEquipSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bagtype()) {
      set_bagtype(from.bagtype());
    }
    if (from.has_instanceid()) {
      set_instanceid(from.instanceid());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqUpgradeEquipSkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqUpgradeEquipSkill::CopyFrom(const stReqUpgradeEquipSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqUpgradeEquipSkill::IsInitialized() const {

  return true;
}

void stReqUpgradeEquipSkill::Swap(stReqUpgradeEquipSkill* other) {
  if (other != this) {
    std::swap(bagtype_, other->bagtype_);
    std::swap(instanceid_, other->instanceid_);
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqUpgradeEquipSkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqUpgradeEquipSkill_descriptor_;
  metadata.reflection = stReqUpgradeEquipSkill_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stUpgradeEquipSkillResult_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUpgradeEquipSkillResult_eResult_descriptor_;
}
bool stUpgradeEquipSkillResult_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stUpgradeEquipSkillResult_eResult stUpgradeEquipSkillResult::eSuccess;
const stUpgradeEquipSkillResult_eResult stUpgradeEquipSkillResult::eMoney_Not_Enough;
const stUpgradeEquipSkillResult_eResult stUpgradeEquipSkillResult::eFull_Lv;
const stUpgradeEquipSkillResult_eResult stUpgradeEquipSkillResult::eInner_Error;
const stUpgradeEquipSkillResult_eResult stUpgradeEquipSkillResult::eResult_MIN;
const stUpgradeEquipSkillResult_eResult stUpgradeEquipSkillResult::eResult_MAX;
const int stUpgradeEquipSkillResult::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stUpgradeEquipSkillResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUpgradeEquipSkillResult_ProtoModID_descriptor_;
}
bool stUpgradeEquipSkillResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stUpgradeEquipSkillResult_ProtoModID stUpgradeEquipSkillResult::ModID;
const stUpgradeEquipSkillResult_ProtoModID stUpgradeEquipSkillResult::ProtoModID_MIN;
const stUpgradeEquipSkillResult_ProtoModID stUpgradeEquipSkillResult::ProtoModID_MAX;
const int stUpgradeEquipSkillResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stUpgradeEquipSkillResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUpgradeEquipSkillResult_ProtoFunID_descriptor_;
}
bool stUpgradeEquipSkillResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 83:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stUpgradeEquipSkillResult_ProtoFunID stUpgradeEquipSkillResult::FunID;
const stUpgradeEquipSkillResult_ProtoFunID stUpgradeEquipSkillResult::ProtoFunID_MIN;
const stUpgradeEquipSkillResult_ProtoFunID stUpgradeEquipSkillResult::ProtoFunID_MAX;
const int stUpgradeEquipSkillResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stUpgradeEquipSkillResult::kBagTypeFieldNumber;
const int stUpgradeEquipSkillResult::kInstanceIDFieldNumber;
const int stUpgradeEquipSkillResult::kIndexFieldNumber;
const int stUpgradeEquipSkillResult::kLvFieldNumber;
const int stUpgradeEquipSkillResult::kResultFieldNumber;
#endif  // !_MSC_VER

stUpgradeEquipSkillResult::stUpgradeEquipSkillResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stUpgradeEquipSkillResult::InitAsDefaultInstance() {
}

stUpgradeEquipSkillResult::stUpgradeEquipSkillResult(const stUpgradeEquipSkillResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stUpgradeEquipSkillResult::SharedCtor() {
  _cached_size_ = 0;
  bagtype_ = 0u;
  instanceid_ = GOOGLE_ULONGLONG(0);
  index_ = 0u;
  lv_ = 0u;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stUpgradeEquipSkillResult::~stUpgradeEquipSkillResult() {
  SharedDtor();
}

void stUpgradeEquipSkillResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stUpgradeEquipSkillResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stUpgradeEquipSkillResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUpgradeEquipSkillResult_descriptor_;
}

const stUpgradeEquipSkillResult& stUpgradeEquipSkillResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stUpgradeEquipSkillResult* stUpgradeEquipSkillResult::default_instance_ = NULL;

stUpgradeEquipSkillResult* stUpgradeEquipSkillResult::New() const {
  return new stUpgradeEquipSkillResult;
}

void stUpgradeEquipSkillResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bagtype_ = 0u;
    instanceid_ = GOOGLE_ULONGLONG(0);
    index_ = 0u;
    lv_ = 0u;
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stUpgradeEquipSkillResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 bagType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bagtype_)));
          set_has_bagtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_instanceID;
        break;
      }

      // optional uint64 instanceID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_instanceID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &instanceid_)));
          set_has_instanceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_index;
        break;
      }

      // optional uint32 index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_lv;
        break;
      }

      // optional uint32 lv = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_result;
        break;
      }

      // optional .Role.stUpgradeEquipSkillResult.eResult result = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Role::stUpgradeEquipSkillResult_eResult_IsValid(value)) {
            set_result(static_cast< ::Role::stUpgradeEquipSkillResult_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stUpgradeEquipSkillResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 bagType = 1;
  if (has_bagtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bagtype(), output);
  }

  // optional uint64 instanceID = 2;
  if (has_instanceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->instanceid(), output);
  }

  // optional uint32 index = 3;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->index(), output);
  }

  // optional uint32 lv = 4;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->lv(), output);
  }

  // optional .Role.stUpgradeEquipSkillResult.eResult result = 5;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stUpgradeEquipSkillResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 bagType = 1;
  if (has_bagtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bagtype(), target);
  }

  // optional uint64 instanceID = 2;
  if (has_instanceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->instanceid(), target);
  }

  // optional uint32 index = 3;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->index(), target);
  }

  // optional uint32 lv = 4;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->lv(), target);
  }

  // optional .Role.stUpgradeEquipSkillResult.eResult result = 5;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stUpgradeEquipSkillResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 bagType = 1;
    if (has_bagtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bagtype());
    }

    // optional uint64 instanceID = 2;
    if (has_instanceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->instanceid());
    }

    // optional uint32 index = 3;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

    // optional uint32 lv = 4;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lv());
    }

    // optional .Role.stUpgradeEquipSkillResult.eResult result = 5;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stUpgradeEquipSkillResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stUpgradeEquipSkillResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stUpgradeEquipSkillResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stUpgradeEquipSkillResult::MergeFrom(const stUpgradeEquipSkillResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bagtype()) {
      set_bagtype(from.bagtype());
    }
    if (from.has_instanceid()) {
      set_instanceid(from.instanceid());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stUpgradeEquipSkillResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stUpgradeEquipSkillResult::CopyFrom(const stUpgradeEquipSkillResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stUpgradeEquipSkillResult::IsInitialized() const {

  return true;
}

void stUpgradeEquipSkillResult::Swap(stUpgradeEquipSkillResult* other) {
  if (other != this) {
    std::swap(bagtype_, other->bagtype_);
    std::swap(instanceid_, other->instanceid_);
    std::swap(index_, other->index_);
    std::swap(lv_, other->lv_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stUpgradeEquipSkillResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stUpgradeEquipSkillResult_descriptor_;
  metadata.reflection = stUpgradeEquipSkillResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stSendPKUserData_ePKType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSendPKUserData_ePKType_descriptor_;
}
bool stSendPKUserData_ePKType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSendPKUserData_ePKType stSendPKUserData::eArena_PK;
const stSendPKUserData_ePKType stSendPKUserData::eLeitai_PK;
const stSendPKUserData_ePKType stSendPKUserData::eIntercept_PK;
const stSendPKUserData_ePKType stSendPKUserData::ePKType_MIN;
const stSendPKUserData_ePKType stSendPKUserData::ePKType_MAX;
const int stSendPKUserData::ePKType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSendPKUserData_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSendPKUserData_ProtoModID_descriptor_;
}
bool stSendPKUserData_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSendPKUserData_ProtoModID stSendPKUserData::ModID;
const stSendPKUserData_ProtoModID stSendPKUserData::ProtoModID_MIN;
const stSendPKUserData_ProtoModID stSendPKUserData::ProtoModID_MAX;
const int stSendPKUserData::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSendPKUserData_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSendPKUserData_ProtoFunID_descriptor_;
}
bool stSendPKUserData_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 84:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSendPKUserData_ProtoFunID stSendPKUserData::FunID;
const stSendPKUserData_ProtoFunID stSendPKUserData::ProtoFunID_MIN;
const stSendPKUserData_ProtoFunID stSendPKUserData::ProtoFunID_MAX;
const int stSendPKUserData::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stSendPKUserData::kMainDataFieldNumber;
const int stSendPKUserData::kItemDataFieldNumber;
const int stSendPKUserData::kHeroDataFieldNumber;
const int stSendPKUserData::kPkTypeFieldNumber;
const int stSendPKUserData::kChallengeRankFieldNumber;
#endif  // !_MSC_VER

stSendPKUserData::stSendPKUserData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSendPKUserData::InitAsDefaultInstance() {
  maindata_ = const_cast< ::Role::stRoleMainData*>(&::Role::stRoleMainData::default_instance());
}

stSendPKUserData::stSendPKUserData(const stSendPKUserData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSendPKUserData::SharedCtor() {
  _cached_size_ = 0;
  maindata_ = NULL;
  pktype_ = 1;
  challengerank_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSendPKUserData::~stSendPKUserData() {
  SharedDtor();
}

void stSendPKUserData::SharedDtor() {
  if (this != default_instance_) {
    delete maindata_;
  }
}

void stSendPKUserData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSendPKUserData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSendPKUserData_descriptor_;
}

const stSendPKUserData& stSendPKUserData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stSendPKUserData* stSendPKUserData::default_instance_ = NULL;

stSendPKUserData* stSendPKUserData::New() const {
  return new stSendPKUserData;
}

void stSendPKUserData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_maindata()) {
      if (maindata_ != NULL) maindata_->::Role::stRoleMainData::Clear();
    }
    pktype_ = 1;
    challengerank_ = 0u;
  }
  itemdata_.Clear();
  herodata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSendPKUserData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Role.stRoleMainData mainData = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_maindata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_itemData;
        break;
      }

      // repeated .Role.stSynItemInfo itemData = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_itemData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_itemdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_itemData;
        if (input->ExpectTag(26)) goto parse_heroData;
        break;
      }

      // repeated .Role.stSynHeroInfo heroData = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_heroData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_herodata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_heroData;
        if (input->ExpectTag(32)) goto parse_pkType;
        break;
      }

      // optional .Role.stSendPKUserData.ePKType pkType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pkType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Role::stSendPKUserData_ePKType_IsValid(value)) {
            set_pktype(static_cast< ::Role::stSendPKUserData_ePKType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_challengeRank;
        break;
      }

      // optional uint32 challengeRank = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_challengeRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &challengerank_)));
          set_has_challengerank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSendPKUserData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Role.stRoleMainData mainData = 1;
  if (has_maindata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->maindata(), output);
  }

  // repeated .Role.stSynItemInfo itemData = 2;
  for (int i = 0; i < this->itemdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->itemdata(i), output);
  }

  // repeated .Role.stSynHeroInfo heroData = 3;
  for (int i = 0; i < this->herodata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->herodata(i), output);
  }

  // optional .Role.stSendPKUserData.ePKType pkType = 4;
  if (has_pktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->pktype(), output);
  }

  // optional uint32 challengeRank = 5;
  if (has_challengerank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->challengerank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSendPKUserData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Role.stRoleMainData mainData = 1;
  if (has_maindata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->maindata(), target);
  }

  // repeated .Role.stSynItemInfo itemData = 2;
  for (int i = 0; i < this->itemdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->itemdata(i), target);
  }

  // repeated .Role.stSynHeroInfo heroData = 3;
  for (int i = 0; i < this->herodata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->herodata(i), target);
  }

  // optional .Role.stSendPKUserData.ePKType pkType = 4;
  if (has_pktype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->pktype(), target);
  }

  // optional uint32 challengeRank = 5;
  if (has_challengerank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->challengerank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSendPKUserData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Role.stRoleMainData mainData = 1;
    if (has_maindata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->maindata());
    }

    // optional .Role.stSendPKUserData.ePKType pkType = 4;
    if (has_pktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pktype());
    }

    // optional uint32 challengeRank = 5;
    if (has_challengerank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->challengerank());
    }

  }
  // repeated .Role.stSynItemInfo itemData = 2;
  total_size += 1 * this->itemdata_size();
  for (int i = 0; i < this->itemdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->itemdata(i));
  }

  // repeated .Role.stSynHeroInfo heroData = 3;
  total_size += 1 * this->herodata_size();
  for (int i = 0; i < this->herodata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->herodata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSendPKUserData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSendPKUserData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSendPKUserData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSendPKUserData::MergeFrom(const stSendPKUserData& from) {
  GOOGLE_CHECK_NE(&from, this);
  itemdata_.MergeFrom(from.itemdata_);
  herodata_.MergeFrom(from.herodata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_maindata()) {
      mutable_maindata()->::Role::stRoleMainData::MergeFrom(from.maindata());
    }
    if (from.has_pktype()) {
      set_pktype(from.pktype());
    }
    if (from.has_challengerank()) {
      set_challengerank(from.challengerank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSendPKUserData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSendPKUserData::CopyFrom(const stSendPKUserData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSendPKUserData::IsInitialized() const {

  return true;
}

void stSendPKUserData::Swap(stSendPKUserData* other) {
  if (other != this) {
    std::swap(maindata_, other->maindata_);
    itemdata_.Swap(&other->itemdata_);
    herodata_.Swap(&other->herodata_);
    std::swap(pktype_, other->pktype_);
    std::swap(challengerank_, other->challengerank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSendPKUserData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSendPKUserData_descriptor_;
  metadata.reflection = stSendPKUserData_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqRaiseUserSkillLv_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqRaiseUserSkillLv_ProtoModID_descriptor_;
}
bool stReqRaiseUserSkillLv_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqRaiseUserSkillLv_ProtoModID stReqRaiseUserSkillLv::ModID;
const stReqRaiseUserSkillLv_ProtoModID stReqRaiseUserSkillLv::ProtoModID_MIN;
const stReqRaiseUserSkillLv_ProtoModID stReqRaiseUserSkillLv::ProtoModID_MAX;
const int stReqRaiseUserSkillLv::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqRaiseUserSkillLv_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqRaiseUserSkillLv_ProtoFunID_descriptor_;
}
bool stReqRaiseUserSkillLv_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 85:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqRaiseUserSkillLv_ProtoFunID stReqRaiseUserSkillLv::FunID;
const stReqRaiseUserSkillLv_ProtoFunID stReqRaiseUserSkillLv::ProtoFunID_MIN;
const stReqRaiseUserSkillLv_ProtoFunID stReqRaiseUserSkillLv::ProtoFunID_MAX;
const int stReqRaiseUserSkillLv::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqRaiseUserSkillLv::kSkillIDFieldNumber;
#endif  // !_MSC_VER

stReqRaiseUserSkillLv::stReqRaiseUserSkillLv()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqRaiseUserSkillLv::InitAsDefaultInstance() {
}

stReqRaiseUserSkillLv::stReqRaiseUserSkillLv(const stReqRaiseUserSkillLv& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqRaiseUserSkillLv::SharedCtor() {
  _cached_size_ = 0;
  skillid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqRaiseUserSkillLv::~stReqRaiseUserSkillLv() {
  SharedDtor();
}

void stReqRaiseUserSkillLv::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqRaiseUserSkillLv::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqRaiseUserSkillLv::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqRaiseUserSkillLv_descriptor_;
}

const stReqRaiseUserSkillLv& stReqRaiseUserSkillLv::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stReqRaiseUserSkillLv* stReqRaiseUserSkillLv::default_instance_ = NULL;

stReqRaiseUserSkillLv* stReqRaiseUserSkillLv::New() const {
  return new stReqRaiseUserSkillLv;
}

void stReqRaiseUserSkillLv::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skillid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqRaiseUserSkillLv::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 skillID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqRaiseUserSkillLv::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 skillID = 1;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->skillid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqRaiseUserSkillLv::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 skillID = 1;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->skillid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqRaiseUserSkillLv::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 skillID = 1;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqRaiseUserSkillLv::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqRaiseUserSkillLv* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqRaiseUserSkillLv*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqRaiseUserSkillLv::MergeFrom(const stReqRaiseUserSkillLv& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqRaiseUserSkillLv::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqRaiseUserSkillLv::CopyFrom(const stReqRaiseUserSkillLv& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqRaiseUserSkillLv::IsInitialized() const {

  return true;
}

void stReqRaiseUserSkillLv::Swap(stReqRaiseUserSkillLv* other) {
  if (other != this) {
    std::swap(skillid_, other->skillid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqRaiseUserSkillLv::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqRaiseUserSkillLv_descriptor_;
  metadata.reflection = stReqRaiseUserSkillLv_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRaiseUserSkillLvResult_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRaiseUserSkillLvResult_eResult_descriptor_;
}
bool stRaiseUserSkillLvResult_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRaiseUserSkillLvResult_eResult stRaiseUserSkillLvResult::eSuccess;
const stRaiseUserSkillLvResult_eResult stRaiseUserSkillLvResult::eSkill_Not_Exist;
const stRaiseUserSkillLvResult_eResult stRaiseUserSkillLvResult::eInner_Cfg_Error;
const stRaiseUserSkillLvResult_eResult stRaiseUserSkillLvResult::eGoldCoin_Not_Enough;
const stRaiseUserSkillLvResult_eResult stRaiseUserSkillLvResult::eRole_Lv_Limit;
const stRaiseUserSkillLvResult_eResult stRaiseUserSkillLvResult::eResult_MIN;
const stRaiseUserSkillLvResult_eResult stRaiseUserSkillLvResult::eResult_MAX;
const int stRaiseUserSkillLvResult::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRaiseUserSkillLvResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRaiseUserSkillLvResult_ProtoModID_descriptor_;
}
bool stRaiseUserSkillLvResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRaiseUserSkillLvResult_ProtoModID stRaiseUserSkillLvResult::ModID;
const stRaiseUserSkillLvResult_ProtoModID stRaiseUserSkillLvResult::ProtoModID_MIN;
const stRaiseUserSkillLvResult_ProtoModID stRaiseUserSkillLvResult::ProtoModID_MAX;
const int stRaiseUserSkillLvResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRaiseUserSkillLvResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRaiseUserSkillLvResult_ProtoFunID_descriptor_;
}
bool stRaiseUserSkillLvResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 86:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRaiseUserSkillLvResult_ProtoFunID stRaiseUserSkillLvResult::FunID;
const stRaiseUserSkillLvResult_ProtoFunID stRaiseUserSkillLvResult::ProtoFunID_MIN;
const stRaiseUserSkillLvResult_ProtoFunID stRaiseUserSkillLvResult::ProtoFunID_MAX;
const int stRaiseUserSkillLvResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRaiseUserSkillLvResult::kResultFieldNumber;
const int stRaiseUserSkillLvResult::kSkillIDFieldNumber;
const int stRaiseUserSkillLvResult::kSkillLvFieldNumber;
#endif  // !_MSC_VER

stRaiseUserSkillLvResult::stRaiseUserSkillLvResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRaiseUserSkillLvResult::InitAsDefaultInstance() {
}

stRaiseUserSkillLvResult::stRaiseUserSkillLvResult(const stRaiseUserSkillLvResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRaiseUserSkillLvResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  skillid_ = 0u;
  skilllv_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRaiseUserSkillLvResult::~stRaiseUserSkillLvResult() {
  SharedDtor();
}

void stRaiseUserSkillLvResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRaiseUserSkillLvResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRaiseUserSkillLvResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRaiseUserSkillLvResult_descriptor_;
}

const stRaiseUserSkillLvResult& stRaiseUserSkillLvResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stRaiseUserSkillLvResult* stRaiseUserSkillLvResult::default_instance_ = NULL;

stRaiseUserSkillLvResult* stRaiseUserSkillLvResult::New() const {
  return new stRaiseUserSkillLvResult;
}

void stRaiseUserSkillLvResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
    skillid_ = 0u;
    skilllv_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRaiseUserSkillLvResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Role.stRaiseUserSkillLvResult.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Role::stRaiseUserSkillLvResult_eResult_IsValid(value)) {
            set_result(static_cast< ::Role::stRaiseUserSkillLvResult_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skillID;
        break;
      }

      // optional uint32 skillID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_skillLv;
        break;
      }

      // optional uint32 skillLv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skilllv_)));
          set_has_skilllv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRaiseUserSkillLvResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Role.stRaiseUserSkillLvResult.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional uint32 skillID = 2;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->skillid(), output);
  }

  // optional uint32 skillLv = 3;
  if (has_skilllv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->skilllv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRaiseUserSkillLvResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Role.stRaiseUserSkillLvResult.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional uint32 skillID = 2;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->skillid(), target);
  }

  // optional uint32 skillLv = 3;
  if (has_skilllv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->skilllv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRaiseUserSkillLvResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Role.stRaiseUserSkillLvResult.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional uint32 skillID = 2;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillid());
    }

    // optional uint32 skillLv = 3;
    if (has_skilllv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skilllv());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRaiseUserSkillLvResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRaiseUserSkillLvResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRaiseUserSkillLvResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRaiseUserSkillLvResult::MergeFrom(const stRaiseUserSkillLvResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_skilllv()) {
      set_skilllv(from.skilllv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRaiseUserSkillLvResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRaiseUserSkillLvResult::CopyFrom(const stRaiseUserSkillLvResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRaiseUserSkillLvResult::IsInitialized() const {

  return true;
}

void stRaiseUserSkillLvResult::Swap(stRaiseUserSkillLvResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(skillid_, other->skillid_);
    std::swap(skilllv_, other->skilllv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRaiseUserSkillLvResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRaiseUserSkillLvResult_descriptor_;
  metadata.reflection = stRaiseUserSkillLvResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stNotifyNewBieGuideStep_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyNewBieGuideStep_ProtoModID_descriptor_;
}
bool stNotifyNewBieGuideStep_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyNewBieGuideStep_ProtoModID stNotifyNewBieGuideStep::ModID;
const stNotifyNewBieGuideStep_ProtoModID stNotifyNewBieGuideStep::ProtoModID_MIN;
const stNotifyNewBieGuideStep_ProtoModID stNotifyNewBieGuideStep::ProtoModID_MAX;
const int stNotifyNewBieGuideStep::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stNotifyNewBieGuideStep_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyNewBieGuideStep_ProtoFunID_descriptor_;
}
bool stNotifyNewBieGuideStep_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 87:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyNewBieGuideStep_ProtoFunID stNotifyNewBieGuideStep::FunID;
const stNotifyNewBieGuideStep_ProtoFunID stNotifyNewBieGuideStep::ProtoFunID_MIN;
const stNotifyNewBieGuideStep_ProtoFunID stNotifyNewBieGuideStep::ProtoFunID_MAX;
const int stNotifyNewBieGuideStep::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stNotifyNewBieGuideStep::kStepIDFieldNumber;
const int stNotifyNewBieGuideStep::kSubStepIDFieldNumber;
#endif  // !_MSC_VER

stNotifyNewBieGuideStep::stNotifyNewBieGuideStep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stNotifyNewBieGuideStep::InitAsDefaultInstance() {
}

stNotifyNewBieGuideStep::stNotifyNewBieGuideStep(const stNotifyNewBieGuideStep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stNotifyNewBieGuideStep::SharedCtor() {
  _cached_size_ = 0;
  stepid_ = 0u;
  substepid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stNotifyNewBieGuideStep::~stNotifyNewBieGuideStep() {
  SharedDtor();
}

void stNotifyNewBieGuideStep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stNotifyNewBieGuideStep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stNotifyNewBieGuideStep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyNewBieGuideStep_descriptor_;
}

const stNotifyNewBieGuideStep& stNotifyNewBieGuideStep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stNotifyNewBieGuideStep* stNotifyNewBieGuideStep::default_instance_ = NULL;

stNotifyNewBieGuideStep* stNotifyNewBieGuideStep::New() const {
  return new stNotifyNewBieGuideStep;
}

void stNotifyNewBieGuideStep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    stepid_ = 0u;
    substepid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stNotifyNewBieGuideStep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 stepID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stepid_)));
          set_has_stepid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_subStepID;
        break;
      }

      // optional uint32 subStepID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_subStepID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &substepid_)));
          set_has_substepid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stNotifyNewBieGuideStep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 stepID = 1;
  if (has_stepid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->stepid(), output);
  }

  // optional uint32 subStepID = 2;
  if (has_substepid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->substepid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stNotifyNewBieGuideStep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 stepID = 1;
  if (has_stepid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->stepid(), target);
  }

  // optional uint32 subStepID = 2;
  if (has_substepid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->substepid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stNotifyNewBieGuideStep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 stepID = 1;
    if (has_stepid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stepid());
    }

    // optional uint32 subStepID = 2;
    if (has_substepid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->substepid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stNotifyNewBieGuideStep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stNotifyNewBieGuideStep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stNotifyNewBieGuideStep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stNotifyNewBieGuideStep::MergeFrom(const stNotifyNewBieGuideStep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stepid()) {
      set_stepid(from.stepid());
    }
    if (from.has_substepid()) {
      set_substepid(from.substepid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stNotifyNewBieGuideStep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stNotifyNewBieGuideStep::CopyFrom(const stNotifyNewBieGuideStep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stNotifyNewBieGuideStep::IsInitialized() const {

  return true;
}

void stNotifyNewBieGuideStep::Swap(stNotifyNewBieGuideStep* other) {
  if (other != this) {
    std::swap(stepid_, other->stepid_);
    std::swap(substepid_, other->substepid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stNotifyNewBieGuideStep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stNotifyNewBieGuideStep_descriptor_;
  metadata.reflection = stNotifyNewBieGuideStep_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stSaveNewBieGuideStep_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSaveNewBieGuideStep_ProtoModID_descriptor_;
}
bool stSaveNewBieGuideStep_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSaveNewBieGuideStep_ProtoModID stSaveNewBieGuideStep::ModID;
const stSaveNewBieGuideStep_ProtoModID stSaveNewBieGuideStep::ProtoModID_MIN;
const stSaveNewBieGuideStep_ProtoModID stSaveNewBieGuideStep::ProtoModID_MAX;
const int stSaveNewBieGuideStep::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSaveNewBieGuideStep_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSaveNewBieGuideStep_ProtoFunID_descriptor_;
}
bool stSaveNewBieGuideStep_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 88:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSaveNewBieGuideStep_ProtoFunID stSaveNewBieGuideStep::FunID;
const stSaveNewBieGuideStep_ProtoFunID stSaveNewBieGuideStep::ProtoFunID_MIN;
const stSaveNewBieGuideStep_ProtoFunID stSaveNewBieGuideStep::ProtoFunID_MAX;
const int stSaveNewBieGuideStep::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stSaveNewBieGuideStep::kStepIDFieldNumber;
#endif  // !_MSC_VER

stSaveNewBieGuideStep::stSaveNewBieGuideStep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSaveNewBieGuideStep::InitAsDefaultInstance() {
}

stSaveNewBieGuideStep::stSaveNewBieGuideStep(const stSaveNewBieGuideStep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSaveNewBieGuideStep::SharedCtor() {
  _cached_size_ = 0;
  stepid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSaveNewBieGuideStep::~stSaveNewBieGuideStep() {
  SharedDtor();
}

void stSaveNewBieGuideStep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stSaveNewBieGuideStep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSaveNewBieGuideStep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSaveNewBieGuideStep_descriptor_;
}

const stSaveNewBieGuideStep& stSaveNewBieGuideStep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stSaveNewBieGuideStep* stSaveNewBieGuideStep::default_instance_ = NULL;

stSaveNewBieGuideStep* stSaveNewBieGuideStep::New() const {
  return new stSaveNewBieGuideStep;
}

void stSaveNewBieGuideStep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    stepid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSaveNewBieGuideStep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 stepID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stepid_)));
          set_has_stepid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSaveNewBieGuideStep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 stepID = 1;
  if (has_stepid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->stepid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSaveNewBieGuideStep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 stepID = 1;
  if (has_stepid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->stepid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSaveNewBieGuideStep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 stepID = 1;
    if (has_stepid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stepid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSaveNewBieGuideStep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSaveNewBieGuideStep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSaveNewBieGuideStep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSaveNewBieGuideStep::MergeFrom(const stSaveNewBieGuideStep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stepid()) {
      set_stepid(from.stepid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSaveNewBieGuideStep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSaveNewBieGuideStep::CopyFrom(const stSaveNewBieGuideStep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSaveNewBieGuideStep::IsInitialized() const {

  return true;
}

void stSaveNewBieGuideStep::Swap(stSaveNewBieGuideStep* other) {
  if (other != this) {
    std::swap(stepid_, other->stepid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSaveNewBieGuideStep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSaveNewBieGuideStep_descriptor_;
  metadata.reflection = stSaveNewBieGuideStep_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stOpenLevelBox_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stOpenLevelBox_ProtoModID_descriptor_;
}
bool stOpenLevelBox_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stOpenLevelBox_ProtoModID stOpenLevelBox::ModID;
const stOpenLevelBox_ProtoModID stOpenLevelBox::ProtoModID_MIN;
const stOpenLevelBox_ProtoModID stOpenLevelBox::ProtoModID_MAX;
const int stOpenLevelBox::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stOpenLevelBox_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stOpenLevelBox_ProtoFunID_descriptor_;
}
bool stOpenLevelBox_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 89:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stOpenLevelBox_ProtoFunID stOpenLevelBox::FunID;
const stOpenLevelBox_ProtoFunID stOpenLevelBox::ProtoFunID_MIN;
const stOpenLevelBox_ProtoFunID stOpenLevelBox::ProtoFunID_MAX;
const int stOpenLevelBox::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stOpenLevelBox::kCharIDFieldNumber;
#endif  // !_MSC_VER

stOpenLevelBox::stOpenLevelBox()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stOpenLevelBox::InitAsDefaultInstance() {
}

stOpenLevelBox::stOpenLevelBox(const stOpenLevelBox& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stOpenLevelBox::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stOpenLevelBox::~stOpenLevelBox() {
  SharedDtor();
}

void stOpenLevelBox::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stOpenLevelBox::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stOpenLevelBox::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stOpenLevelBox_descriptor_;
}

const stOpenLevelBox& stOpenLevelBox::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stOpenLevelBox* stOpenLevelBox::default_instance_ = NULL;

stOpenLevelBox* stOpenLevelBox::New() const {
  return new stOpenLevelBox;
}

void stOpenLevelBox::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stOpenLevelBox::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stOpenLevelBox::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stOpenLevelBox::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stOpenLevelBox::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stOpenLevelBox::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stOpenLevelBox* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stOpenLevelBox*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stOpenLevelBox::MergeFrom(const stOpenLevelBox& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stOpenLevelBox::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stOpenLevelBox::CopyFrom(const stOpenLevelBox& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stOpenLevelBox::IsInitialized() const {

  return true;
}

void stOpenLevelBox::Swap(stOpenLevelBox* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stOpenLevelBox::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stOpenLevelBox_descriptor_;
  metadata.reflection = stOpenLevelBox_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stChangeRole_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stChangeRole_ProtoModID_descriptor_;
}
bool stChangeRole_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stChangeRole_ProtoModID stChangeRole::ModID;
const stChangeRole_ProtoModID stChangeRole::ProtoModID_MIN;
const stChangeRole_ProtoModID stChangeRole::ProtoModID_MAX;
const int stChangeRole::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stChangeRole_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stChangeRole_ProtoFunID_descriptor_;
}
bool stChangeRole_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 90:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stChangeRole_ProtoFunID stChangeRole::FunID;
const stChangeRole_ProtoFunID stChangeRole::ProtoFunID_MIN;
const stChangeRole_ProtoFunID stChangeRole::ProtoFunID_MAX;
const int stChangeRole::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stChangeRole::kCharIDFieldNumber;
#endif  // !_MSC_VER

stChangeRole::stChangeRole()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stChangeRole::InitAsDefaultInstance() {
}

stChangeRole::stChangeRole(const stChangeRole& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stChangeRole::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stChangeRole::~stChangeRole() {
  SharedDtor();
}

void stChangeRole::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stChangeRole::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stChangeRole::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stChangeRole_descriptor_;
}

const stChangeRole& stChangeRole::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stChangeRole* stChangeRole::default_instance_ = NULL;

stChangeRole* stChangeRole::New() const {
  return new stChangeRole;
}

void stChangeRole::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stChangeRole::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stChangeRole::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stChangeRole::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stChangeRole::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stChangeRole::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stChangeRole* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stChangeRole*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stChangeRole::MergeFrom(const stChangeRole& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stChangeRole::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stChangeRole::CopyFrom(const stChangeRole& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stChangeRole::IsInitialized() const {

  return true;
}

void stChangeRole::Swap(stChangeRole* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stChangeRole::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stChangeRole_descriptor_;
  metadata.reflection = stChangeRole_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stGotoSelectRole_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGotoSelectRole_ProtoModID_descriptor_;
}
bool stGotoSelectRole_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stGotoSelectRole_ProtoModID stGotoSelectRole::ModID;
const stGotoSelectRole_ProtoModID stGotoSelectRole::ProtoModID_MIN;
const stGotoSelectRole_ProtoModID stGotoSelectRole::ProtoModID_MAX;
const int stGotoSelectRole::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stGotoSelectRole_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGotoSelectRole_ProtoFunID_descriptor_;
}
bool stGotoSelectRole_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 91:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stGotoSelectRole_ProtoFunID stGotoSelectRole::FunID;
const stGotoSelectRole_ProtoFunID stGotoSelectRole::ProtoFunID_MIN;
const stGotoSelectRole_ProtoFunID stGotoSelectRole::ProtoFunID_MAX;
const int stGotoSelectRole::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stGotoSelectRole::kCurCharIDFieldNumber;
#endif  // !_MSC_VER

stGotoSelectRole::stGotoSelectRole()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stGotoSelectRole::InitAsDefaultInstance() {
}

stGotoSelectRole::stGotoSelectRole(const stGotoSelectRole& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stGotoSelectRole::SharedCtor() {
  _cached_size_ = 0;
  curcharid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stGotoSelectRole::~stGotoSelectRole() {
  SharedDtor();
}

void stGotoSelectRole::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stGotoSelectRole::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stGotoSelectRole::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGotoSelectRole_descriptor_;
}

const stGotoSelectRole& stGotoSelectRole::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stGotoSelectRole* stGotoSelectRole::default_instance_ = NULL;

stGotoSelectRole* stGotoSelectRole::New() const {
  return new stGotoSelectRole;
}

void stGotoSelectRole::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    curcharid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stGotoSelectRole::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 curCharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curcharid_)));
          set_has_curcharid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stGotoSelectRole::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 curCharID = 1;
  if (has_curcharid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->curcharid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stGotoSelectRole::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 curCharID = 1;
  if (has_curcharid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->curcharid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stGotoSelectRole::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 curCharID = 1;
    if (has_curcharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curcharid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stGotoSelectRole::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stGotoSelectRole* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stGotoSelectRole*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stGotoSelectRole::MergeFrom(const stGotoSelectRole& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_curcharid()) {
      set_curcharid(from.curcharid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stGotoSelectRole::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stGotoSelectRole::CopyFrom(const stGotoSelectRole& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stGotoSelectRole::IsInitialized() const {

  return true;
}

void stGotoSelectRole::Swap(stGotoSelectRole* other) {
  if (other != this) {
    std::swap(curcharid_, other->curcharid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stGotoSelectRole::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stGotoSelectRole_descriptor_;
  metadata.reflection = stGotoSelectRole_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stSynRMPShopItem::kIdFieldNumber;
const int stSynRMPShopItem::kHasBuyFieldNumber;
const int stSynRMPShopItem::kRemainTimeFieldNumber;
const int stSynRMPShopItem::kBuyCountFieldNumber;
#endif  // !_MSC_VER

stSynRMPShopItem::stSynRMPShopItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSynRMPShopItem::InitAsDefaultInstance() {
}

stSynRMPShopItem::stSynRMPShopItem(const stSynRMPShopItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSynRMPShopItem::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  hasbuy_ = false;
  remaintime_ = 0u;
  buycount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSynRMPShopItem::~stSynRMPShopItem() {
  SharedDtor();
}

void stSynRMPShopItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stSynRMPShopItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSynRMPShopItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynRMPShopItem_descriptor_;
}

const stSynRMPShopItem& stSynRMPShopItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stSynRMPShopItem* stSynRMPShopItem::default_instance_ = NULL;

stSynRMPShopItem* stSynRMPShopItem::New() const {
  return new stSynRMPShopItem;
}

void stSynRMPShopItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    hasbuy_ = false;
    remaintime_ = 0u;
    buycount_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSynRMPShopItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hasBuy;
        break;
      }

      // optional bool hasBuy = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hasBuy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hasbuy_)));
          set_has_hasbuy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_remainTime;
        break;
      }

      // optional uint32 remainTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remainTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &remaintime_)));
          set_has_remaintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_buyCount;
        break;
      }

      // optional uint32 buyCount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buyCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buycount_)));
          set_has_buycount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSynRMPShopItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional bool hasBuy = 2;
  if (has_hasbuy()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->hasbuy(), output);
  }

  // optional uint32 remainTime = 3;
  if (has_remaintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->remaintime(), output);
  }

  // optional uint32 buyCount = 4;
  if (has_buycount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->buycount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSynRMPShopItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional bool hasBuy = 2;
  if (has_hasbuy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->hasbuy(), target);
  }

  // optional uint32 remainTime = 3;
  if (has_remaintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->remaintime(), target);
  }

  // optional uint32 buyCount = 4;
  if (has_buycount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->buycount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSynRMPShopItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional bool hasBuy = 2;
    if (has_hasbuy()) {
      total_size += 1 + 1;
    }

    // optional uint32 remainTime = 3;
    if (has_remaintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->remaintime());
    }

    // optional uint32 buyCount = 4;
    if (has_buycount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buycount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSynRMPShopItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSynRMPShopItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSynRMPShopItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSynRMPShopItem::MergeFrom(const stSynRMPShopItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_hasbuy()) {
      set_hasbuy(from.hasbuy());
    }
    if (from.has_remaintime()) {
      set_remaintime(from.remaintime());
    }
    if (from.has_buycount()) {
      set_buycount(from.buycount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSynRMPShopItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSynRMPShopItem::CopyFrom(const stSynRMPShopItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSynRMPShopItem::IsInitialized() const {

  return true;
}

void stSynRMPShopItem::Swap(stSynRMPShopItem* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(hasbuy_, other->hasbuy_);
    std::swap(remaintime_, other->remaintime_);
    std::swap(buycount_, other->buycount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSynRMPShopItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSynRMPShopItem_descriptor_;
  metadata.reflection = stSynRMPShopItem_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stSynRMBShopInfo_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynRMBShopInfo_ProtoModID_descriptor_;
}
bool stSynRMBShopInfo_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynRMBShopInfo_ProtoModID stSynRMBShopInfo::ModID;
const stSynRMBShopInfo_ProtoModID stSynRMBShopInfo::ProtoModID_MIN;
const stSynRMBShopInfo_ProtoModID stSynRMBShopInfo::ProtoModID_MAX;
const int stSynRMBShopInfo::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSynRMBShopInfo_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynRMBShopInfo_ProtoFunID_descriptor_;
}
bool stSynRMBShopInfo_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 92:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynRMBShopInfo_ProtoFunID stSynRMBShopInfo::FunID;
const stSynRMBShopInfo_ProtoFunID stSynRMBShopInfo::ProtoFunID_MIN;
const stSynRMBShopInfo_ProtoFunID stSynRMBShopInfo::ProtoFunID_MAX;
const int stSynRMBShopInfo::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stSynRMBShopInfo::kItemsFieldNumber;
#endif  // !_MSC_VER

stSynRMBShopInfo::stSynRMBShopInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSynRMBShopInfo::InitAsDefaultInstance() {
}

stSynRMBShopInfo::stSynRMBShopInfo(const stSynRMBShopInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSynRMBShopInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSynRMBShopInfo::~stSynRMBShopInfo() {
  SharedDtor();
}

void stSynRMBShopInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stSynRMBShopInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSynRMBShopInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynRMBShopInfo_descriptor_;
}

const stSynRMBShopInfo& stSynRMBShopInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stSynRMBShopInfo* stSynRMBShopInfo::default_instance_ = NULL;

stSynRMBShopInfo* stSynRMBShopInfo::New() const {
  return new stSynRMBShopInfo;
}

void stSynRMBShopInfo::Clear() {
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSynRMBShopInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Role.stSynRMPShopItem items = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSynRMBShopInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Role.stSynRMPShopItem items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSynRMBShopInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Role.stSynRMPShopItem items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSynRMBShopInfo::ByteSize() const {
  int total_size = 0;

  // repeated .Role.stSynRMPShopItem items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSynRMBShopInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSynRMBShopInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSynRMBShopInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSynRMBShopInfo::MergeFrom(const stSynRMBShopInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSynRMBShopInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSynRMBShopInfo::CopyFrom(const stSynRMBShopInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSynRMBShopInfo::IsInitialized() const {

  return true;
}

void stSynRMBShopInfo::Swap(stSynRMBShopInfo* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSynRMBShopInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSynRMBShopInfo_descriptor_;
  metadata.reflection = stSynRMBShopInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stSynOne2OnePVPItem::kNameFieldNumber;
const int stSynOne2OnePVPItem::kLevelFieldNumber;
const int stSynOne2OnePVPItem::kBattlePowerFieldNumber;
const int stSynOne2OnePVPItem::kScoreFieldNumber;
const int stSynOne2OnePVPItem::kCharidFieldNumber;
#endif  // !_MSC_VER

stSynOne2OnePVPItem::stSynOne2OnePVPItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSynOne2OnePVPItem::InitAsDefaultInstance() {
}

stSynOne2OnePVPItem::stSynOne2OnePVPItem(const stSynOne2OnePVPItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSynOne2OnePVPItem::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0u;
  battlepower_ = 0u;
  score_ = 0u;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSynOne2OnePVPItem::~stSynOne2OnePVPItem() {
  SharedDtor();
}

void stSynOne2OnePVPItem::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void stSynOne2OnePVPItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSynOne2OnePVPItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynOne2OnePVPItem_descriptor_;
}

const stSynOne2OnePVPItem& stSynOne2OnePVPItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stSynOne2OnePVPItem* stSynOne2OnePVPItem::default_instance_ = NULL;

stSynOne2OnePVPItem* stSynOne2OnePVPItem::New() const {
  return new stSynOne2OnePVPItem;
}

void stSynOne2OnePVPItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    level_ = 0u;
    battlepower_ = 0u;
    score_ = 0u;
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSynOne2OnePVPItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // optional uint32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_battlePower;
        break;
      }

      // optional uint32 battlePower = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battlePower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battlepower_)));
          set_has_battlepower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_score;
        break;
      }

      // optional uint32 score = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_charid;
        break;
      }

      // optional uint32 charid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSynOne2OnePVPItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional uint32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }

  // optional uint32 battlePower = 3;
  if (has_battlepower()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->battlepower(), output);
  }

  // optional uint32 score = 4;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->score(), output);
  }

  // optional uint32 charid = 5;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSynOne2OnePVPItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional uint32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }

  // optional uint32 battlePower = 3;
  if (has_battlepower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->battlepower(), target);
  }

  // optional uint32 score = 4;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->score(), target);
  }

  // optional uint32 charid = 5;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSynOne2OnePVPItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 battlePower = 3;
    if (has_battlepower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battlepower());
    }

    // optional uint32 score = 4;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

    // optional uint32 charid = 5;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSynOne2OnePVPItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSynOne2OnePVPItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSynOne2OnePVPItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSynOne2OnePVPItem::MergeFrom(const stSynOne2OnePVPItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_battlepower()) {
      set_battlepower(from.battlepower());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSynOne2OnePVPItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSynOne2OnePVPItem::CopyFrom(const stSynOne2OnePVPItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSynOne2OnePVPItem::IsInitialized() const {

  return true;
}

void stSynOne2OnePVPItem::Swap(stSynOne2OnePVPItem* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(level_, other->level_);
    std::swap(battlepower_, other->battlepower_);
    std::swap(score_, other->score_);
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSynOne2OnePVPItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSynOne2OnePVPItem_descriptor_;
  metadata.reflection = stSynOne2OnePVPItem_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stOne2OnePVPResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stOne2OnePVPResult_ProtoModID_descriptor_;
}
bool stOne2OnePVPResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stOne2OnePVPResult_ProtoModID stOne2OnePVPResult::ModID;
const stOne2OnePVPResult_ProtoModID stOne2OnePVPResult::ProtoModID_MIN;
const stOne2OnePVPResult_ProtoModID stOne2OnePVPResult::ProtoModID_MAX;
const int stOne2OnePVPResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stOne2OnePVPResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stOne2OnePVPResult_ProtoFunID_descriptor_;
}
bool stOne2OnePVPResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 93:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stOne2OnePVPResult_ProtoFunID stOne2OnePVPResult::FunID;
const stOne2OnePVPResult_ProtoFunID stOne2OnePVPResult::ProtoFunID_MIN;
const stOne2OnePVPResult_ProtoFunID stOne2OnePVPResult::ProtoFunID_MAX;
const int stOne2OnePVPResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stOne2OnePVPResult::kWinerFieldNumber;
const int stOne2OnePVPResult::kLoserFieldNumber;
const int stOne2OnePVPResult::kAddScoreFieldNumber;
const int stOne2OnePVPResult::kDelScoreFieldNumber;
#endif  // !_MSC_VER

stOne2OnePVPResult::stOne2OnePVPResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stOne2OnePVPResult::InitAsDefaultInstance() {
  winer_ = const_cast< ::Role::stSynOne2OnePVPItem*>(&::Role::stSynOne2OnePVPItem::default_instance());
  loser_ = const_cast< ::Role::stSynOne2OnePVPItem*>(&::Role::stSynOne2OnePVPItem::default_instance());
}

stOne2OnePVPResult::stOne2OnePVPResult(const stOne2OnePVPResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stOne2OnePVPResult::SharedCtor() {
  _cached_size_ = 0;
  winer_ = NULL;
  loser_ = NULL;
  addscore_ = 0u;
  delscore_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stOne2OnePVPResult::~stOne2OnePVPResult() {
  SharedDtor();
}

void stOne2OnePVPResult::SharedDtor() {
  if (this != default_instance_) {
    delete winer_;
    delete loser_;
  }
}

void stOne2OnePVPResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stOne2OnePVPResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stOne2OnePVPResult_descriptor_;
}

const stOne2OnePVPResult& stOne2OnePVPResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stOne2OnePVPResult* stOne2OnePVPResult::default_instance_ = NULL;

stOne2OnePVPResult* stOne2OnePVPResult::New() const {
  return new stOne2OnePVPResult;
}

void stOne2OnePVPResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_winer()) {
      if (winer_ != NULL) winer_->::Role::stSynOne2OnePVPItem::Clear();
    }
    if (has_loser()) {
      if (loser_ != NULL) loser_->::Role::stSynOne2OnePVPItem::Clear();
    }
    addscore_ = 0u;
    delscore_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stOne2OnePVPResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Role.stSynOne2OnePVPItem winer = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_winer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_loser;
        break;
      }

      // optional .Role.stSynOne2OnePVPItem loser = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_loser:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_loser()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_addScore;
        break;
      }

      // optional uint32 addScore = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &addscore_)));
          set_has_addscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_delScore;
        break;
      }

      // optional uint32 delScore = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_delScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &delscore_)));
          set_has_delscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stOne2OnePVPResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Role.stSynOne2OnePVPItem winer = 1;
  if (has_winer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->winer(), output);
  }

  // optional .Role.stSynOne2OnePVPItem loser = 2;
  if (has_loser()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->loser(), output);
  }

  // optional uint32 addScore = 3;
  if (has_addscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->addscore(), output);
  }

  // optional uint32 delScore = 4;
  if (has_delscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->delscore(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stOne2OnePVPResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Role.stSynOne2OnePVPItem winer = 1;
  if (has_winer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->winer(), target);
  }

  // optional .Role.stSynOne2OnePVPItem loser = 2;
  if (has_loser()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->loser(), target);
  }

  // optional uint32 addScore = 3;
  if (has_addscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->addscore(), target);
  }

  // optional uint32 delScore = 4;
  if (has_delscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->delscore(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stOne2OnePVPResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Role.stSynOne2OnePVPItem winer = 1;
    if (has_winer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->winer());
    }

    // optional .Role.stSynOne2OnePVPItem loser = 2;
    if (has_loser()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->loser());
    }

    // optional uint32 addScore = 3;
    if (has_addscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->addscore());
    }

    // optional uint32 delScore = 4;
    if (has_delscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->delscore());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stOne2OnePVPResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stOne2OnePVPResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stOne2OnePVPResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stOne2OnePVPResult::MergeFrom(const stOne2OnePVPResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_winer()) {
      mutable_winer()->::Role::stSynOne2OnePVPItem::MergeFrom(from.winer());
    }
    if (from.has_loser()) {
      mutable_loser()->::Role::stSynOne2OnePVPItem::MergeFrom(from.loser());
    }
    if (from.has_addscore()) {
      set_addscore(from.addscore());
    }
    if (from.has_delscore()) {
      set_delscore(from.delscore());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stOne2OnePVPResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stOne2OnePVPResult::CopyFrom(const stOne2OnePVPResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stOne2OnePVPResult::IsInitialized() const {

  return true;
}

void stOne2OnePVPResult::Swap(stOne2OnePVPResult* other) {
  if (other != this) {
    std::swap(winer_, other->winer_);
    std::swap(loser_, other->loser_);
    std::swap(addscore_, other->addscore_);
    std::swap(delscore_, other->delscore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stOne2OnePVPResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stOne2OnePVPResult_descriptor_;
  metadata.reflection = stOne2OnePVPResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stPrivateChatNotUser_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stPrivateChatNotUser_ProtoModID_descriptor_;
}
bool stPrivateChatNotUser_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stPrivateChatNotUser_ProtoModID stPrivateChatNotUser::ModID;
const stPrivateChatNotUser_ProtoModID stPrivateChatNotUser::ProtoModID_MIN;
const stPrivateChatNotUser_ProtoModID stPrivateChatNotUser::ProtoModID_MAX;
const int stPrivateChatNotUser::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stPrivateChatNotUser_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stPrivateChatNotUser_ProtoFunID_descriptor_;
}
bool stPrivateChatNotUser_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 94:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stPrivateChatNotUser_ProtoFunID stPrivateChatNotUser::FunID;
const stPrivateChatNotUser_ProtoFunID stPrivateChatNotUser::ProtoFunID_MIN;
const stPrivateChatNotUser_ProtoFunID stPrivateChatNotUser::ProtoFunID_MAX;
const int stPrivateChatNotUser::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stPrivateChatNotUser::kDestNameFieldNumber;
#endif  // !_MSC_VER

stPrivateChatNotUser::stPrivateChatNotUser()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stPrivateChatNotUser::InitAsDefaultInstance() {
}

stPrivateChatNotUser::stPrivateChatNotUser(const stPrivateChatNotUser& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stPrivateChatNotUser::SharedCtor() {
  _cached_size_ = 0;
  destname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stPrivateChatNotUser::~stPrivateChatNotUser() {
  SharedDtor();
}

void stPrivateChatNotUser::SharedDtor() {
  if (destname_ != &::google::protobuf::internal::kEmptyString) {
    delete destname_;
  }
  if (this != default_instance_) {
  }
}

void stPrivateChatNotUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stPrivateChatNotUser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stPrivateChatNotUser_descriptor_;
}

const stPrivateChatNotUser& stPrivateChatNotUser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stPrivateChatNotUser* stPrivateChatNotUser::default_instance_ = NULL;

stPrivateChatNotUser* stPrivateChatNotUser::New() const {
  return new stPrivateChatNotUser;
}

void stPrivateChatNotUser::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_destname()) {
      if (destname_ != &::google::protobuf::internal::kEmptyString) {
        destname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stPrivateChatNotUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string destName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_destname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->destname().data(), this->destname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stPrivateChatNotUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string destName = 1;
  if (has_destname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->destname().data(), this->destname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->destname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stPrivateChatNotUser::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string destName = 1;
  if (has_destname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->destname().data(), this->destname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->destname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stPrivateChatNotUser::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string destName = 1;
    if (has_destname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->destname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stPrivateChatNotUser::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stPrivateChatNotUser* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stPrivateChatNotUser*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stPrivateChatNotUser::MergeFrom(const stPrivateChatNotUser& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_destname()) {
      set_destname(from.destname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stPrivateChatNotUser::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stPrivateChatNotUser::CopyFrom(const stPrivateChatNotUser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stPrivateChatNotUser::IsInitialized() const {

  return true;
}

void stPrivateChatNotUser::Swap(stPrivateChatNotUser* other) {
  if (other != this) {
    std::swap(destname_, other->destname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stPrivateChatNotUser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stPrivateChatNotUser_descriptor_;
  metadata.reflection = stPrivateChatNotUser_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqRecoverRemainTime_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqRecoverRemainTime_ProtoModID_descriptor_;
}
bool stReqRecoverRemainTime_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqRecoverRemainTime_ProtoModID stReqRecoverRemainTime::ModID;
const stReqRecoverRemainTime_ProtoModID stReqRecoverRemainTime::ProtoModID_MIN;
const stReqRecoverRemainTime_ProtoModID stReqRecoverRemainTime::ProtoModID_MAX;
const int stReqRecoverRemainTime::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqRecoverRemainTime_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqRecoverRemainTime_ProtoFunID_descriptor_;
}
bool stReqRecoverRemainTime_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 95:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqRecoverRemainTime_ProtoFunID stReqRecoverRemainTime::FunID;
const stReqRecoverRemainTime_ProtoFunID stReqRecoverRemainTime::ProtoFunID_MIN;
const stReqRecoverRemainTime_ProtoFunID stReqRecoverRemainTime::ProtoFunID_MAX;
const int stReqRecoverRemainTime::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqRecoverRemainTime::kCharIDFieldNumber;
#endif  // !_MSC_VER

stReqRecoverRemainTime::stReqRecoverRemainTime()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqRecoverRemainTime::InitAsDefaultInstance() {
}

stReqRecoverRemainTime::stReqRecoverRemainTime(const stReqRecoverRemainTime& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqRecoverRemainTime::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqRecoverRemainTime::~stReqRecoverRemainTime() {
  SharedDtor();
}

void stReqRecoverRemainTime::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqRecoverRemainTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqRecoverRemainTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqRecoverRemainTime_descriptor_;
}

const stReqRecoverRemainTime& stReqRecoverRemainTime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stReqRecoverRemainTime* stReqRecoverRemainTime::default_instance_ = NULL;

stReqRecoverRemainTime* stReqRecoverRemainTime::New() const {
  return new stReqRecoverRemainTime;
}

void stReqRecoverRemainTime::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqRecoverRemainTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqRecoverRemainTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqRecoverRemainTime::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqRecoverRemainTime::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqRecoverRemainTime::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqRecoverRemainTime* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqRecoverRemainTime*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqRecoverRemainTime::MergeFrom(const stReqRecoverRemainTime& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqRecoverRemainTime::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqRecoverRemainTime::CopyFrom(const stReqRecoverRemainTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqRecoverRemainTime::IsInitialized() const {

  return true;
}

void stReqRecoverRemainTime::Swap(stReqRecoverRemainTime* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqRecoverRemainTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqRecoverRemainTime_descriptor_;
  metadata.reflection = stReqRecoverRemainTime_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stSPAndLilianRecoverRemainTime_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSPAndLilianRecoverRemainTime_ProtoModID_descriptor_;
}
bool stSPAndLilianRecoverRemainTime_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSPAndLilianRecoverRemainTime_ProtoModID stSPAndLilianRecoverRemainTime::ModID;
const stSPAndLilianRecoverRemainTime_ProtoModID stSPAndLilianRecoverRemainTime::ProtoModID_MIN;
const stSPAndLilianRecoverRemainTime_ProtoModID stSPAndLilianRecoverRemainTime::ProtoModID_MAX;
const int stSPAndLilianRecoverRemainTime::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSPAndLilianRecoverRemainTime_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSPAndLilianRecoverRemainTime_ProtoFunID_descriptor_;
}
bool stSPAndLilianRecoverRemainTime_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 96:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSPAndLilianRecoverRemainTime_ProtoFunID stSPAndLilianRecoverRemainTime::FunID;
const stSPAndLilianRecoverRemainTime_ProtoFunID stSPAndLilianRecoverRemainTime::ProtoFunID_MIN;
const stSPAndLilianRecoverRemainTime_ProtoFunID stSPAndLilianRecoverRemainTime::ProtoFunID_MAX;
const int stSPAndLilianRecoverRemainTime::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stSPAndLilianRecoverRemainTime::kSpRemainTimeFieldNumber;
const int stSPAndLilianRecoverRemainTime::kLilianRemainTimeFieldNumber;
const int stSPAndLilianRecoverRemainTime::kTrainSpRemainTimeFieldNumber;
#endif  // !_MSC_VER

stSPAndLilianRecoverRemainTime::stSPAndLilianRecoverRemainTime()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSPAndLilianRecoverRemainTime::InitAsDefaultInstance() {
}

stSPAndLilianRecoverRemainTime::stSPAndLilianRecoverRemainTime(const stSPAndLilianRecoverRemainTime& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSPAndLilianRecoverRemainTime::SharedCtor() {
  _cached_size_ = 0;
  spremaintime_ = 0u;
  lilianremaintime_ = 0u;
  trainspremaintime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSPAndLilianRecoverRemainTime::~stSPAndLilianRecoverRemainTime() {
  SharedDtor();
}

void stSPAndLilianRecoverRemainTime::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stSPAndLilianRecoverRemainTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSPAndLilianRecoverRemainTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSPAndLilianRecoverRemainTime_descriptor_;
}

const stSPAndLilianRecoverRemainTime& stSPAndLilianRecoverRemainTime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stSPAndLilianRecoverRemainTime* stSPAndLilianRecoverRemainTime::default_instance_ = NULL;

stSPAndLilianRecoverRemainTime* stSPAndLilianRecoverRemainTime::New() const {
  return new stSPAndLilianRecoverRemainTime;
}

void stSPAndLilianRecoverRemainTime::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    spremaintime_ = 0u;
    lilianremaintime_ = 0u;
    trainspremaintime_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSPAndLilianRecoverRemainTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 spRemainTime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &spremaintime_)));
          set_has_spremaintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lilianRemainTime;
        break;
      }

      // optional uint32 lilianRemainTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lilianRemainTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lilianremaintime_)));
          set_has_lilianremaintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_trainSpRemainTime;
        break;
      }

      // optional uint32 trainSpRemainTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trainSpRemainTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &trainspremaintime_)));
          set_has_trainspremaintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSPAndLilianRecoverRemainTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 spRemainTime = 1;
  if (has_spremaintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->spremaintime(), output);
  }

  // optional uint32 lilianRemainTime = 2;
  if (has_lilianremaintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->lilianremaintime(), output);
  }

  // optional uint32 trainSpRemainTime = 3;
  if (has_trainspremaintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->trainspremaintime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSPAndLilianRecoverRemainTime::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 spRemainTime = 1;
  if (has_spremaintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->spremaintime(), target);
  }

  // optional uint32 lilianRemainTime = 2;
  if (has_lilianremaintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->lilianremaintime(), target);
  }

  // optional uint32 trainSpRemainTime = 3;
  if (has_trainspremaintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->trainspremaintime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSPAndLilianRecoverRemainTime::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 spRemainTime = 1;
    if (has_spremaintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->spremaintime());
    }

    // optional uint32 lilianRemainTime = 2;
    if (has_lilianremaintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lilianremaintime());
    }

    // optional uint32 trainSpRemainTime = 3;
    if (has_trainspremaintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->trainspremaintime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSPAndLilianRecoverRemainTime::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSPAndLilianRecoverRemainTime* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSPAndLilianRecoverRemainTime*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSPAndLilianRecoverRemainTime::MergeFrom(const stSPAndLilianRecoverRemainTime& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_spremaintime()) {
      set_spremaintime(from.spremaintime());
    }
    if (from.has_lilianremaintime()) {
      set_lilianremaintime(from.lilianremaintime());
    }
    if (from.has_trainspremaintime()) {
      set_trainspremaintime(from.trainspremaintime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSPAndLilianRecoverRemainTime::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSPAndLilianRecoverRemainTime::CopyFrom(const stSPAndLilianRecoverRemainTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSPAndLilianRecoverRemainTime::IsInitialized() const {

  return true;
}

void stSPAndLilianRecoverRemainTime::Swap(stSPAndLilianRecoverRemainTime* other) {
  if (other != this) {
    std::swap(spremaintime_, other->spremaintime_);
    std::swap(lilianremaintime_, other->lilianremaintime_);
    std::swap(trainspremaintime_, other->trainspremaintime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSPAndLilianRecoverRemainTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSPAndLilianRecoverRemainTime_descriptor_;
  metadata.reflection = stSPAndLilianRecoverRemainTime_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stSwapHeroBattlePos_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSwapHeroBattlePos_ProtoModID_descriptor_;
}
bool stSwapHeroBattlePos_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSwapHeroBattlePos_ProtoModID stSwapHeroBattlePos::ModID;
const stSwapHeroBattlePos_ProtoModID stSwapHeroBattlePos::ProtoModID_MIN;
const stSwapHeroBattlePos_ProtoModID stSwapHeroBattlePos::ProtoModID_MAX;
const int stSwapHeroBattlePos::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSwapHeroBattlePos_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSwapHeroBattlePos_ProtoFunID_descriptor_;
}
bool stSwapHeroBattlePos_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 97:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSwapHeroBattlePos_ProtoFunID stSwapHeroBattlePos::FunID;
const stSwapHeroBattlePos_ProtoFunID stSwapHeroBattlePos::ProtoFunID_MIN;
const stSwapHeroBattlePos_ProtoFunID stSwapHeroBattlePos::ProtoFunID_MAX;
const int stSwapHeroBattlePos::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stSwapHeroBattlePos::kSrcHeroIDFieldNumber;
const int stSwapHeroBattlePos::kSrcPosFieldNumber;
const int stSwapHeroBattlePos::kDestHeroIDFieldNumber;
const int stSwapHeroBattlePos::kDestPosFieldNumber;
#endif  // !_MSC_VER

stSwapHeroBattlePos::stSwapHeroBattlePos()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSwapHeroBattlePos::InitAsDefaultInstance() {
}

stSwapHeroBattlePos::stSwapHeroBattlePos(const stSwapHeroBattlePos& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSwapHeroBattlePos::SharedCtor() {
  _cached_size_ = 0;
  srcheroid_ = 0u;
  srcpos_ = 0u;
  destheroid_ = 0u;
  destpos_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSwapHeroBattlePos::~stSwapHeroBattlePos() {
  SharedDtor();
}

void stSwapHeroBattlePos::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stSwapHeroBattlePos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSwapHeroBattlePos::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSwapHeroBattlePos_descriptor_;
}

const stSwapHeroBattlePos& stSwapHeroBattlePos::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stSwapHeroBattlePos* stSwapHeroBattlePos::default_instance_ = NULL;

stSwapHeroBattlePos* stSwapHeroBattlePos::New() const {
  return new stSwapHeroBattlePos;
}

void stSwapHeroBattlePos::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    srcheroid_ = 0u;
    srcpos_ = 0u;
    destheroid_ = 0u;
    destpos_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSwapHeroBattlePos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 srcHeroID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &srcheroid_)));
          set_has_srcheroid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_srcPos;
        break;
      }

      // optional uint32 srcPos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_srcPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &srcpos_)));
          set_has_srcpos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_destHeroID;
        break;
      }

      // optional uint32 destHeroID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_destHeroID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &destheroid_)));
          set_has_destheroid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_destPos;
        break;
      }

      // optional uint32 destPos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_destPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &destpos_)));
          set_has_destpos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSwapHeroBattlePos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 srcHeroID = 1;
  if (has_srcheroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->srcheroid(), output);
  }

  // optional uint32 srcPos = 2;
  if (has_srcpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->srcpos(), output);
  }

  // optional uint32 destHeroID = 3;
  if (has_destheroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->destheroid(), output);
  }

  // optional uint32 destPos = 4;
  if (has_destpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->destpos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSwapHeroBattlePos::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 srcHeroID = 1;
  if (has_srcheroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->srcheroid(), target);
  }

  // optional uint32 srcPos = 2;
  if (has_srcpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->srcpos(), target);
  }

  // optional uint32 destHeroID = 3;
  if (has_destheroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->destheroid(), target);
  }

  // optional uint32 destPos = 4;
  if (has_destpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->destpos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSwapHeroBattlePos::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 srcHeroID = 1;
    if (has_srcheroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->srcheroid());
    }

    // optional uint32 srcPos = 2;
    if (has_srcpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->srcpos());
    }

    // optional uint32 destHeroID = 3;
    if (has_destheroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->destheroid());
    }

    // optional uint32 destPos = 4;
    if (has_destpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->destpos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSwapHeroBattlePos::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSwapHeroBattlePos* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSwapHeroBattlePos*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSwapHeroBattlePos::MergeFrom(const stSwapHeroBattlePos& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_srcheroid()) {
      set_srcheroid(from.srcheroid());
    }
    if (from.has_srcpos()) {
      set_srcpos(from.srcpos());
    }
    if (from.has_destheroid()) {
      set_destheroid(from.destheroid());
    }
    if (from.has_destpos()) {
      set_destpos(from.destpos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSwapHeroBattlePos::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSwapHeroBattlePos::CopyFrom(const stSwapHeroBattlePos& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSwapHeroBattlePos::IsInitialized() const {

  return true;
}

void stSwapHeroBattlePos::Swap(stSwapHeroBattlePos* other) {
  if (other != this) {
    std::swap(srcheroid_, other->srcheroid_);
    std::swap(srcpos_, other->srcpos_);
    std::swap(destheroid_, other->destheroid_);
    std::swap(destpos_, other->destpos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSwapHeroBattlePos::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSwapHeroBattlePos_descriptor_;
  metadata.reflection = stSwapHeroBattlePos_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stSwapHeroBattlePosError_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSwapHeroBattlePosError_eResult_descriptor_;
}
bool stSwapHeroBattlePosError_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSwapHeroBattlePosError_eResult stSwapHeroBattlePosError::eHERO_NOT_EXIST;
const stSwapHeroBattlePosError_eResult stSwapHeroBattlePosError::eHERO_NOT_GOOUT;
const stSwapHeroBattlePosError_eResult stSwapHeroBattlePosError::eResult_MIN;
const stSwapHeroBattlePosError_eResult stSwapHeroBattlePosError::eResult_MAX;
const int stSwapHeroBattlePosError::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSwapHeroBattlePosError_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSwapHeroBattlePosError_ProtoModID_descriptor_;
}
bool stSwapHeroBattlePosError_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSwapHeroBattlePosError_ProtoModID stSwapHeroBattlePosError::ModID;
const stSwapHeroBattlePosError_ProtoModID stSwapHeroBattlePosError::ProtoModID_MIN;
const stSwapHeroBattlePosError_ProtoModID stSwapHeroBattlePosError::ProtoModID_MAX;
const int stSwapHeroBattlePosError::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSwapHeroBattlePosError_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSwapHeroBattlePosError_ProtoFunID_descriptor_;
}
bool stSwapHeroBattlePosError_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 98:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSwapHeroBattlePosError_ProtoFunID stSwapHeroBattlePosError::FunID;
const stSwapHeroBattlePosError_ProtoFunID stSwapHeroBattlePosError::ProtoFunID_MIN;
const stSwapHeroBattlePosError_ProtoFunID stSwapHeroBattlePosError::ProtoFunID_MAX;
const int stSwapHeroBattlePosError::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stSwapHeroBattlePosError::kResultFieldNumber;
#endif  // !_MSC_VER

stSwapHeroBattlePosError::stSwapHeroBattlePosError()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSwapHeroBattlePosError::InitAsDefaultInstance() {
}

stSwapHeroBattlePosError::stSwapHeroBattlePosError(const stSwapHeroBattlePosError& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSwapHeroBattlePosError::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSwapHeroBattlePosError::~stSwapHeroBattlePosError() {
  SharedDtor();
}

void stSwapHeroBattlePosError::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stSwapHeroBattlePosError::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSwapHeroBattlePosError::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSwapHeroBattlePosError_descriptor_;
}

const stSwapHeroBattlePosError& stSwapHeroBattlePosError::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stSwapHeroBattlePosError* stSwapHeroBattlePosError::default_instance_ = NULL;

stSwapHeroBattlePosError* stSwapHeroBattlePosError::New() const {
  return new stSwapHeroBattlePosError;
}

void stSwapHeroBattlePosError::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSwapHeroBattlePosError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Role.stSwapHeroBattlePosError.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Role::stSwapHeroBattlePosError_eResult_IsValid(value)) {
            set_result(static_cast< ::Role::stSwapHeroBattlePosError_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSwapHeroBattlePosError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Role.stSwapHeroBattlePosError.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSwapHeroBattlePosError::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Role.stSwapHeroBattlePosError.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSwapHeroBattlePosError::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Role.stSwapHeroBattlePosError.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSwapHeroBattlePosError::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSwapHeroBattlePosError* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSwapHeroBattlePosError*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSwapHeroBattlePosError::MergeFrom(const stSwapHeroBattlePosError& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSwapHeroBattlePosError::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSwapHeroBattlePosError::CopyFrom(const stSwapHeroBattlePosError& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSwapHeroBattlePosError::IsInitialized() const {

  return true;
}

void stSwapHeroBattlePosError::Swap(stSwapHeroBattlePosError* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSwapHeroBattlePosError::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSwapHeroBattlePosError_descriptor_;
  metadata.reflection = stSwapHeroBattlePosError_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stSynSystemSetting_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynSystemSetting_ProtoModID_descriptor_;
}
bool stSynSystemSetting_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynSystemSetting_ProtoModID stSynSystemSetting::ModID;
const stSynSystemSetting_ProtoModID stSynSystemSetting::ProtoModID_MIN;
const stSynSystemSetting_ProtoModID stSynSystemSetting::ProtoModID_MAX;
const int stSynSystemSetting::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSynSystemSetting_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynSystemSetting_ProtoFunID_descriptor_;
}
bool stSynSystemSetting_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 99:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynSystemSetting_ProtoFunID stSynSystemSetting::FunID;
const stSynSystemSetting_ProtoFunID stSynSystemSetting::ProtoFunID_MIN;
const stSynSystemSetting_ProtoFunID stSynSystemSetting::ProtoFunID_MAX;
const int stSynSystemSetting::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stSynSystemSetting::kSystemSettingFieldNumber;
#endif  // !_MSC_VER

stSynSystemSetting::stSynSystemSetting()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSynSystemSetting::InitAsDefaultInstance() {
}

stSynSystemSetting::stSynSystemSetting(const stSynSystemSetting& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSynSystemSetting::SharedCtor() {
  _cached_size_ = 0;
  systemsetting_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSynSystemSetting::~stSynSystemSetting() {
  SharedDtor();
}

void stSynSystemSetting::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stSynSystemSetting::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSynSystemSetting::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynSystemSetting_descriptor_;
}

const stSynSystemSetting& stSynSystemSetting::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stSynSystemSetting* stSynSystemSetting::default_instance_ = NULL;

stSynSystemSetting* stSynSystemSetting::New() const {
  return new stSynSystemSetting;
}

void stSynSystemSetting::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    systemsetting_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSynSystemSetting::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 systemSetting = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &systemsetting_)));
          set_has_systemsetting();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSynSystemSetting::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 systemSetting = 1;
  if (has_systemsetting()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->systemsetting(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSynSystemSetting::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 systemSetting = 1;
  if (has_systemsetting()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->systemsetting(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSynSystemSetting::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 systemSetting = 1;
    if (has_systemsetting()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->systemsetting());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSynSystemSetting::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSynSystemSetting* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSynSystemSetting*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSynSystemSetting::MergeFrom(const stSynSystemSetting& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_systemsetting()) {
      set_systemsetting(from.systemsetting());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSynSystemSetting::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSynSystemSetting::CopyFrom(const stSynSystemSetting& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSynSystemSetting::IsInitialized() const {

  return true;
}

void stSynSystemSetting::Swap(stSynSystemSetting* other) {
  if (other != this) {
    std::swap(systemsetting_, other->systemsetting_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSynSystemSetting::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSynSystemSetting_descriptor_;
  metadata.reflection = stSynSystemSetting_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqSaveSystemSetting_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqSaveSystemSetting_ProtoModID_descriptor_;
}
bool stReqSaveSystemSetting_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqSaveSystemSetting_ProtoModID stReqSaveSystemSetting::ModID;
const stReqSaveSystemSetting_ProtoModID stReqSaveSystemSetting::ProtoModID_MIN;
const stReqSaveSystemSetting_ProtoModID stReqSaveSystemSetting::ProtoModID_MAX;
const int stReqSaveSystemSetting::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqSaveSystemSetting_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqSaveSystemSetting_ProtoFunID_descriptor_;
}
bool stReqSaveSystemSetting_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 100:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqSaveSystemSetting_ProtoFunID stReqSaveSystemSetting::FunID;
const stReqSaveSystemSetting_ProtoFunID stReqSaveSystemSetting::ProtoFunID_MIN;
const stReqSaveSystemSetting_ProtoFunID stReqSaveSystemSetting::ProtoFunID_MAX;
const int stReqSaveSystemSetting::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqSaveSystemSetting::kCharIDFieldNumber;
const int stReqSaveSystemSetting::kSystemSettingFieldNumber;
#endif  // !_MSC_VER

stReqSaveSystemSetting::stReqSaveSystemSetting()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqSaveSystemSetting::InitAsDefaultInstance() {
}

stReqSaveSystemSetting::stReqSaveSystemSetting(const stReqSaveSystemSetting& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqSaveSystemSetting::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  systemsetting_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqSaveSystemSetting::~stReqSaveSystemSetting() {
  SharedDtor();
}

void stReqSaveSystemSetting::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqSaveSystemSetting::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqSaveSystemSetting::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqSaveSystemSetting_descriptor_;
}

const stReqSaveSystemSetting& stReqSaveSystemSetting::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stReqSaveSystemSetting* stReqSaveSystemSetting::default_instance_ = NULL;

stReqSaveSystemSetting* stReqSaveSystemSetting::New() const {
  return new stReqSaveSystemSetting;
}

void stReqSaveSystemSetting::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    systemsetting_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqSaveSystemSetting::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_systemSetting;
        break;
      }

      // optional uint64 systemSetting = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_systemSetting:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &systemsetting_)));
          set_has_systemsetting();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqSaveSystemSetting::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint64 systemSetting = 2;
  if (has_systemsetting()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->systemsetting(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqSaveSystemSetting::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint64 systemSetting = 2;
  if (has_systemsetting()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->systemsetting(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqSaveSystemSetting::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint64 systemSetting = 2;
    if (has_systemsetting()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->systemsetting());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqSaveSystemSetting::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqSaveSystemSetting* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqSaveSystemSetting*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqSaveSystemSetting::MergeFrom(const stReqSaveSystemSetting& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_systemsetting()) {
      set_systemsetting(from.systemsetting());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqSaveSystemSetting::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqSaveSystemSetting::CopyFrom(const stReqSaveSystemSetting& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqSaveSystemSetting::IsInitialized() const {

  return true;
}

void stReqSaveSystemSetting::Swap(stReqSaveSystemSetting* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(systemsetting_, other->systemsetting_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqSaveSystemSetting::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqSaveSystemSetting_descriptor_;
  metadata.reflection = stReqSaveSystemSetting_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stUnlockRareSkill_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUnlockRareSkill_ProtoModID_descriptor_;
}
bool stUnlockRareSkill_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stUnlockRareSkill_ProtoModID stUnlockRareSkill::ModID;
const stUnlockRareSkill_ProtoModID stUnlockRareSkill::ProtoModID_MIN;
const stUnlockRareSkill_ProtoModID stUnlockRareSkill::ProtoModID_MAX;
const int stUnlockRareSkill::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stUnlockRareSkill_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUnlockRareSkill_ProtoFunID_descriptor_;
}
bool stUnlockRareSkill_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 101:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stUnlockRareSkill_ProtoFunID stUnlockRareSkill::FunID;
const stUnlockRareSkill_ProtoFunID stUnlockRareSkill::ProtoFunID_MIN;
const stUnlockRareSkill_ProtoFunID stUnlockRareSkill::ProtoFunID_MAX;
const int stUnlockRareSkill::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stUnlockRareSkill::kHeroIDFieldNumber;
#endif  // !_MSC_VER

stUnlockRareSkill::stUnlockRareSkill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stUnlockRareSkill::InitAsDefaultInstance() {
}

stUnlockRareSkill::stUnlockRareSkill(const stUnlockRareSkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stUnlockRareSkill::SharedCtor() {
  _cached_size_ = 0;
  heroid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stUnlockRareSkill::~stUnlockRareSkill() {
  SharedDtor();
}

void stUnlockRareSkill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stUnlockRareSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stUnlockRareSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUnlockRareSkill_descriptor_;
}

const stUnlockRareSkill& stUnlockRareSkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stUnlockRareSkill* stUnlockRareSkill::default_instance_ = NULL;

stUnlockRareSkill* stUnlockRareSkill::New() const {
  return new stUnlockRareSkill;
}

void stUnlockRareSkill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    heroid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stUnlockRareSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 heroID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heroid_)));
          set_has_heroid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stUnlockRareSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 heroID = 1;
  if (has_heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->heroid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stUnlockRareSkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 heroID = 1;
  if (has_heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->heroid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stUnlockRareSkill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 heroID = 1;
    if (has_heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heroid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stUnlockRareSkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stUnlockRareSkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stUnlockRareSkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stUnlockRareSkill::MergeFrom(const stUnlockRareSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_heroid()) {
      set_heroid(from.heroid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stUnlockRareSkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stUnlockRareSkill::CopyFrom(const stUnlockRareSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stUnlockRareSkill::IsInitialized() const {

  return true;
}

void stUnlockRareSkill::Swap(stUnlockRareSkill* other) {
  if (other != this) {
    std::swap(heroid_, other->heroid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stUnlockRareSkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stUnlockRareSkill_descriptor_;
  metadata.reflection = stUnlockRareSkill_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stUnlockRareSkillResult_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUnlockRareSkillResult_eResult_descriptor_;
}
bool stUnlockRareSkillResult_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stUnlockRareSkillResult_eResult stUnlockRareSkillResult::eSuccess;
const stUnlockRareSkillResult_eResult stUnlockRareSkillResult::eHas_No_GoldCoin;
const stUnlockRareSkillResult_eResult stUnlockRareSkillResult::eLevel_Limit;
const stUnlockRareSkillResult_eResult stUnlockRareSkillResult::eHero_Not_Exist;
const stUnlockRareSkillResult_eResult stUnlockRareSkillResult::eInner_Error;
const stUnlockRareSkillResult_eResult stUnlockRareSkillResult::eResult_MIN;
const stUnlockRareSkillResult_eResult stUnlockRareSkillResult::eResult_MAX;
const int stUnlockRareSkillResult::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stUnlockRareSkillResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUnlockRareSkillResult_ProtoModID_descriptor_;
}
bool stUnlockRareSkillResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stUnlockRareSkillResult_ProtoModID stUnlockRareSkillResult::ModID;
const stUnlockRareSkillResult_ProtoModID stUnlockRareSkillResult::ProtoModID_MIN;
const stUnlockRareSkillResult_ProtoModID stUnlockRareSkillResult::ProtoModID_MAX;
const int stUnlockRareSkillResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stUnlockRareSkillResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUnlockRareSkillResult_ProtoFunID_descriptor_;
}
bool stUnlockRareSkillResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 102:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stUnlockRareSkillResult_ProtoFunID stUnlockRareSkillResult::FunID;
const stUnlockRareSkillResult_ProtoFunID stUnlockRareSkillResult::ProtoFunID_MIN;
const stUnlockRareSkillResult_ProtoFunID stUnlockRareSkillResult::ProtoFunID_MAX;
const int stUnlockRareSkillResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stUnlockRareSkillResult::kHeroIDFieldNumber;
const int stUnlockRareSkillResult::kSkillIDFieldNumber;
const int stUnlockRareSkillResult::kResultFieldNumber;
#endif  // !_MSC_VER

stUnlockRareSkillResult::stUnlockRareSkillResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stUnlockRareSkillResult::InitAsDefaultInstance() {
}

stUnlockRareSkillResult::stUnlockRareSkillResult(const stUnlockRareSkillResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stUnlockRareSkillResult::SharedCtor() {
  _cached_size_ = 0;
  heroid_ = 0u;
  skillid_ = 0u;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stUnlockRareSkillResult::~stUnlockRareSkillResult() {
  SharedDtor();
}

void stUnlockRareSkillResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stUnlockRareSkillResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stUnlockRareSkillResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUnlockRareSkillResult_descriptor_;
}

const stUnlockRareSkillResult& stUnlockRareSkillResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stUnlockRareSkillResult* stUnlockRareSkillResult::default_instance_ = NULL;

stUnlockRareSkillResult* stUnlockRareSkillResult::New() const {
  return new stUnlockRareSkillResult;
}

void stUnlockRareSkillResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    heroid_ = 0u;
    skillid_ = 0u;
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stUnlockRareSkillResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 heroID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heroid_)));
          set_has_heroid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skillID;
        break;
      }

      // optional uint32 skillID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // optional .Role.stUnlockRareSkillResult.eResult result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Role::stUnlockRareSkillResult_eResult_IsValid(value)) {
            set_result(static_cast< ::Role::stUnlockRareSkillResult_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stUnlockRareSkillResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 heroID = 1;
  if (has_heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->heroid(), output);
  }

  // optional uint32 skillID = 2;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->skillid(), output);
  }

  // optional .Role.stUnlockRareSkillResult.eResult result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stUnlockRareSkillResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 heroID = 1;
  if (has_heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->heroid(), target);
  }

  // optional uint32 skillID = 2;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->skillid(), target);
  }

  // optional .Role.stUnlockRareSkillResult.eResult result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stUnlockRareSkillResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 heroID = 1;
    if (has_heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heroid());
    }

    // optional uint32 skillID = 2;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillid());
    }

    // optional .Role.stUnlockRareSkillResult.eResult result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stUnlockRareSkillResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stUnlockRareSkillResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stUnlockRareSkillResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stUnlockRareSkillResult::MergeFrom(const stUnlockRareSkillResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_heroid()) {
      set_heroid(from.heroid());
    }
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stUnlockRareSkillResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stUnlockRareSkillResult::CopyFrom(const stUnlockRareSkillResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stUnlockRareSkillResult::IsInitialized() const {

  return true;
}

void stUnlockRareSkillResult::Swap(stUnlockRareSkillResult* other) {
  if (other != this) {
    std::swap(heroid_, other->heroid_);
    std::swap(skillid_, other->skillid_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stUnlockRareSkillResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stUnlockRareSkillResult_descriptor_;
  metadata.reflection = stUnlockRareSkillResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stUpgradeRareSkill_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUpgradeRareSkill_ProtoModID_descriptor_;
}
bool stUpgradeRareSkill_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stUpgradeRareSkill_ProtoModID stUpgradeRareSkill::ModID;
const stUpgradeRareSkill_ProtoModID stUpgradeRareSkill::ProtoModID_MIN;
const stUpgradeRareSkill_ProtoModID stUpgradeRareSkill::ProtoModID_MAX;
const int stUpgradeRareSkill::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stUpgradeRareSkill_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUpgradeRareSkill_ProtoFunID_descriptor_;
}
bool stUpgradeRareSkill_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 103:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stUpgradeRareSkill_ProtoFunID stUpgradeRareSkill::FunID;
const stUpgradeRareSkill_ProtoFunID stUpgradeRareSkill::ProtoFunID_MIN;
const stUpgradeRareSkill_ProtoFunID stUpgradeRareSkill::ProtoFunID_MAX;
const int stUpgradeRareSkill::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stUpgradeRareSkill::kHeroIDFieldNumber;
const int stUpgradeRareSkill::kSkillIDFieldNumber;
#endif  // !_MSC_VER

stUpgradeRareSkill::stUpgradeRareSkill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stUpgradeRareSkill::InitAsDefaultInstance() {
}

stUpgradeRareSkill::stUpgradeRareSkill(const stUpgradeRareSkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stUpgradeRareSkill::SharedCtor() {
  _cached_size_ = 0;
  heroid_ = 0u;
  skillid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stUpgradeRareSkill::~stUpgradeRareSkill() {
  SharedDtor();
}

void stUpgradeRareSkill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stUpgradeRareSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stUpgradeRareSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUpgradeRareSkill_descriptor_;
}

const stUpgradeRareSkill& stUpgradeRareSkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stUpgradeRareSkill* stUpgradeRareSkill::default_instance_ = NULL;

stUpgradeRareSkill* stUpgradeRareSkill::New() const {
  return new stUpgradeRareSkill;
}

void stUpgradeRareSkill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    heroid_ = 0u;
    skillid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stUpgradeRareSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 heroID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heroid_)));
          set_has_heroid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skillID;
        break;
      }

      // optional uint32 skillID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stUpgradeRareSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 heroID = 1;
  if (has_heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->heroid(), output);
  }

  // optional uint32 skillID = 2;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->skillid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stUpgradeRareSkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 heroID = 1;
  if (has_heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->heroid(), target);
  }

  // optional uint32 skillID = 2;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->skillid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stUpgradeRareSkill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 heroID = 1;
    if (has_heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heroid());
    }

    // optional uint32 skillID = 2;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stUpgradeRareSkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stUpgradeRareSkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stUpgradeRareSkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stUpgradeRareSkill::MergeFrom(const stUpgradeRareSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_heroid()) {
      set_heroid(from.heroid());
    }
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stUpgradeRareSkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stUpgradeRareSkill::CopyFrom(const stUpgradeRareSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stUpgradeRareSkill::IsInitialized() const {

  return true;
}

void stUpgradeRareSkill::Swap(stUpgradeRareSkill* other) {
  if (other != this) {
    std::swap(heroid_, other->heroid_);
    std::swap(skillid_, other->skillid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stUpgradeRareSkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stUpgradeRareSkill_descriptor_;
  metadata.reflection = stUpgradeRareSkill_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stUpgradeRareSkillResult_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUpgradeRareSkillResult_eResult_descriptor_;
}
bool stUpgradeRareSkillResult_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stUpgradeRareSkillResult_eResult stUpgradeRareSkillResult::eSuccess;
const stUpgradeRareSkillResult_eResult stUpgradeRareSkillResult::eHas_No_GoldCoin;
const stUpgradeRareSkillResult_eResult stUpgradeRareSkillResult::eLevel_Limit;
const stUpgradeRareSkillResult_eResult stUpgradeRareSkillResult::eHero_Not_Exist;
const stUpgradeRareSkillResult_eResult stUpgradeRareSkillResult::eInner_Error;
const stUpgradeRareSkillResult_eResult stUpgradeRareSkillResult::eResult_MIN;
const stUpgradeRareSkillResult_eResult stUpgradeRareSkillResult::eResult_MAX;
const int stUpgradeRareSkillResult::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stUpgradeRareSkillResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUpgradeRareSkillResult_ProtoModID_descriptor_;
}
bool stUpgradeRareSkillResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stUpgradeRareSkillResult_ProtoModID stUpgradeRareSkillResult::ModID;
const stUpgradeRareSkillResult_ProtoModID stUpgradeRareSkillResult::ProtoModID_MIN;
const stUpgradeRareSkillResult_ProtoModID stUpgradeRareSkillResult::ProtoModID_MAX;
const int stUpgradeRareSkillResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stUpgradeRareSkillResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUpgradeRareSkillResult_ProtoFunID_descriptor_;
}
bool stUpgradeRareSkillResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 104:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stUpgradeRareSkillResult_ProtoFunID stUpgradeRareSkillResult::FunID;
const stUpgradeRareSkillResult_ProtoFunID stUpgradeRareSkillResult::ProtoFunID_MIN;
const stUpgradeRareSkillResult_ProtoFunID stUpgradeRareSkillResult::ProtoFunID_MAX;
const int stUpgradeRareSkillResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stUpgradeRareSkillResult::kHeroIDFieldNumber;
const int stUpgradeRareSkillResult::kSkillIDFieldNumber;
const int stUpgradeRareSkillResult::kResultFieldNumber;
#endif  // !_MSC_VER

stUpgradeRareSkillResult::stUpgradeRareSkillResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stUpgradeRareSkillResult::InitAsDefaultInstance() {
}

stUpgradeRareSkillResult::stUpgradeRareSkillResult(const stUpgradeRareSkillResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stUpgradeRareSkillResult::SharedCtor() {
  _cached_size_ = 0;
  heroid_ = 0u;
  skillid_ = 0u;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stUpgradeRareSkillResult::~stUpgradeRareSkillResult() {
  SharedDtor();
}

void stUpgradeRareSkillResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stUpgradeRareSkillResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stUpgradeRareSkillResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUpgradeRareSkillResult_descriptor_;
}

const stUpgradeRareSkillResult& stUpgradeRareSkillResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stUpgradeRareSkillResult* stUpgradeRareSkillResult::default_instance_ = NULL;

stUpgradeRareSkillResult* stUpgradeRareSkillResult::New() const {
  return new stUpgradeRareSkillResult;
}

void stUpgradeRareSkillResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    heroid_ = 0u;
    skillid_ = 0u;
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stUpgradeRareSkillResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 heroID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heroid_)));
          set_has_heroid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skillID;
        break;
      }

      // optional uint32 skillID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // optional .Role.stUpgradeRareSkillResult.eResult result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Role::stUpgradeRareSkillResult_eResult_IsValid(value)) {
            set_result(static_cast< ::Role::stUpgradeRareSkillResult_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stUpgradeRareSkillResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 heroID = 1;
  if (has_heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->heroid(), output);
  }

  // optional uint32 skillID = 2;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->skillid(), output);
  }

  // optional .Role.stUpgradeRareSkillResult.eResult result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stUpgradeRareSkillResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 heroID = 1;
  if (has_heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->heroid(), target);
  }

  // optional uint32 skillID = 2;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->skillid(), target);
  }

  // optional .Role.stUpgradeRareSkillResult.eResult result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stUpgradeRareSkillResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 heroID = 1;
    if (has_heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heroid());
    }

    // optional uint32 skillID = 2;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillid());
    }

    // optional .Role.stUpgradeRareSkillResult.eResult result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stUpgradeRareSkillResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stUpgradeRareSkillResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stUpgradeRareSkillResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stUpgradeRareSkillResult::MergeFrom(const stUpgradeRareSkillResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_heroid()) {
      set_heroid(from.heroid());
    }
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stUpgradeRareSkillResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stUpgradeRareSkillResult::CopyFrom(const stUpgradeRareSkillResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stUpgradeRareSkillResult::IsInitialized() const {

  return true;
}

void stUpgradeRareSkillResult::Swap(stUpgradeRareSkillResult* other) {
  if (other != this) {
    std::swap(heroid_, other->heroid_);
    std::swap(skillid_, other->skillid_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stUpgradeRareSkillResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stUpgradeRareSkillResult_descriptor_;
  metadata.reflection = stUpgradeRareSkillResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqGiftBag_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqGiftBag_ProtoModID_descriptor_;
}
bool stReqGiftBag_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqGiftBag_ProtoModID stReqGiftBag::ModID;
const stReqGiftBag_ProtoModID stReqGiftBag::ProtoModID_MIN;
const stReqGiftBag_ProtoModID stReqGiftBag::ProtoModID_MAX;
const int stReqGiftBag::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqGiftBag_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqGiftBag_ProtoFunID_descriptor_;
}
bool stReqGiftBag_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 105:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqGiftBag_ProtoFunID stReqGiftBag::FunID;
const stReqGiftBag_ProtoFunID stReqGiftBag::ProtoFunID_MIN;
const stReqGiftBag_ProtoFunID stReqGiftBag::ProtoFunID_MAX;
const int stReqGiftBag::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqGiftBag::kCodeFieldNumber;
#endif  // !_MSC_VER

stReqGiftBag::stReqGiftBag()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqGiftBag::InitAsDefaultInstance() {
}

stReqGiftBag::stReqGiftBag(const stReqGiftBag& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqGiftBag::SharedCtor() {
  _cached_size_ = 0;
  code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqGiftBag::~stReqGiftBag() {
  SharedDtor();
}

void stReqGiftBag::SharedDtor() {
  if (code_ != &::google::protobuf::internal::kEmptyString) {
    delete code_;
  }
  if (this != default_instance_) {
  }
}

void stReqGiftBag::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqGiftBag::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqGiftBag_descriptor_;
}

const stReqGiftBag& stReqGiftBag::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stReqGiftBag* stReqGiftBag::default_instance_ = NULL;

stReqGiftBag* stReqGiftBag::New() const {
  return new stReqGiftBag;
}

void stReqGiftBag::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_code()) {
      if (code_ != &::google::protobuf::internal::kEmptyString) {
        code_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqGiftBag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->code().data(), this->code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqGiftBag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqGiftBag::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqGiftBag::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqGiftBag::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqGiftBag* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqGiftBag*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqGiftBag::MergeFrom(const stReqGiftBag& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqGiftBag::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqGiftBag::CopyFrom(const stReqGiftBag& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqGiftBag::IsInitialized() const {

  return true;
}

void stReqGiftBag::Swap(stReqGiftBag* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqGiftBag::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqGiftBag_descriptor_;
  metadata.reflection = stReqGiftBag_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stGotGiftBagResult_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGotGiftBagResult_eResult_descriptor_;
}
bool stGotGiftBagResult_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stGotGiftBagResult_eResult stGotGiftBagResult::eSuccess;
const stGotGiftBagResult_eResult stGotGiftBagResult::eInnerError;
const stGotGiftBagResult_eResult stGotGiftBagResult::eTime_Expire;
const stGotGiftBagResult_eResult stGotGiftBagResult::eCode_Invalid;
const stGotGiftBagResult_eResult stGotGiftBagResult::eCode_Not_Exist;
const stGotGiftBagResult_eResult stGotGiftBagResult::eCode_Error_Other;
const stGotGiftBagResult_eResult stGotGiftBagResult::eCode_Used_Not_Other;
const stGotGiftBagResult_eResult stGotGiftBagResult::eResult_MIN;
const stGotGiftBagResult_eResult stGotGiftBagResult::eResult_MAX;
const int stGotGiftBagResult::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stGotGiftBagResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGotGiftBagResult_ProtoModID_descriptor_;
}
bool stGotGiftBagResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stGotGiftBagResult_ProtoModID stGotGiftBagResult::ModID;
const stGotGiftBagResult_ProtoModID stGotGiftBagResult::ProtoModID_MIN;
const stGotGiftBagResult_ProtoModID stGotGiftBagResult::ProtoModID_MAX;
const int stGotGiftBagResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stGotGiftBagResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGotGiftBagResult_ProtoFunID_descriptor_;
}
bool stGotGiftBagResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 106:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stGotGiftBagResult_ProtoFunID stGotGiftBagResult::FunID;
const stGotGiftBagResult_ProtoFunID stGotGiftBagResult::ProtoFunID_MIN;
const stGotGiftBagResult_ProtoFunID stGotGiftBagResult::ProtoFunID_MAX;
const int stGotGiftBagResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stGotGiftBagResult::kResultFieldNumber;
#endif  // !_MSC_VER

stGotGiftBagResult::stGotGiftBagResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stGotGiftBagResult::InitAsDefaultInstance() {
}

stGotGiftBagResult::stGotGiftBagResult(const stGotGiftBagResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stGotGiftBagResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stGotGiftBagResult::~stGotGiftBagResult() {
  SharedDtor();
}

void stGotGiftBagResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stGotGiftBagResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stGotGiftBagResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGotGiftBagResult_descriptor_;
}

const stGotGiftBagResult& stGotGiftBagResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stGotGiftBagResult* stGotGiftBagResult::default_instance_ = NULL;

stGotGiftBagResult* stGotGiftBagResult::New() const {
  return new stGotGiftBagResult;
}

void stGotGiftBagResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stGotGiftBagResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Role.stGotGiftBagResult.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Role::stGotGiftBagResult_eResult_IsValid(value)) {
            set_result(static_cast< ::Role::stGotGiftBagResult_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stGotGiftBagResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Role.stGotGiftBagResult.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stGotGiftBagResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Role.stGotGiftBagResult.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stGotGiftBagResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Role.stGotGiftBagResult.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stGotGiftBagResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stGotGiftBagResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stGotGiftBagResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stGotGiftBagResult::MergeFrom(const stGotGiftBagResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stGotGiftBagResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stGotGiftBagResult::CopyFrom(const stGotGiftBagResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stGotGiftBagResult::IsInitialized() const {

  return true;
}

void stGotGiftBagResult::Swap(stGotGiftBagResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stGotGiftBagResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stGotGiftBagResult_descriptor_;
  metadata.reflection = stGotGiftBagResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stSynRealTimeItem::kRoleNameFieldNumber;
const int stSynRealTimeItem::kLevelFieldNumber;
const int stSynRealTimeItem::kBattlePowerFieldNumber;
const int stSynRealTimeItem::kAddHonourFieldNumber;
const int stSynRealTimeItem::kKillNumFieldNumber;
const int stSynRealTimeItem::kIsDieFieldNumber;
const int stSynRealTimeItem::kCharidFieldNumber;
#endif  // !_MSC_VER

stSynRealTimeItem::stSynRealTimeItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSynRealTimeItem::InitAsDefaultInstance() {
}

stSynRealTimeItem::stSynRealTimeItem(const stSynRealTimeItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSynRealTimeItem::SharedCtor() {
  _cached_size_ = 0;
  rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0u;
  battlepower_ = 0u;
  addhonour_ = 0u;
  killnum_ = 0u;
  isdie_ = false;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSynRealTimeItem::~stSynRealTimeItem() {
  SharedDtor();
}

void stSynRealTimeItem::SharedDtor() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  if (this != default_instance_) {
  }
}

void stSynRealTimeItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSynRealTimeItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynRealTimeItem_descriptor_;
}

const stSynRealTimeItem& stSynRealTimeItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stSynRealTimeItem* stSynRealTimeItem::default_instance_ = NULL;

stSynRealTimeItem* stSynRealTimeItem::New() const {
  return new stSynRealTimeItem;
}

void stSynRealTimeItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_rolename()) {
      if (rolename_ != &::google::protobuf::internal::kEmptyString) {
        rolename_->clear();
      }
    }
    level_ = 0u;
    battlepower_ = 0u;
    addhonour_ = 0u;
    killnum_ = 0u;
    isdie_ = false;
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSynRealTimeItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string roleName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rolename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rolename().data(), this->rolename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // optional uint32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_battlePower;
        break;
      }

      // optional uint32 battlePower = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battlePower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battlepower_)));
          set_has_battlepower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_addHonour;
        break;
      }

      // optional uint32 addHonour = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addHonour:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &addhonour_)));
          set_has_addhonour();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_killNum;
        break;
      }

      // optional uint32 killNum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_killNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &killnum_)));
          set_has_killnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_isDie;
        break;
      }

      // optional bool isDie = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isDie:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdie_)));
          set_has_isdie();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_charid;
        break;
      }

      // optional uint32 charid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSynRealTimeItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string roleName = 1;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->rolename(), output);
  }

  // optional uint32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }

  // optional uint32 battlePower = 3;
  if (has_battlepower()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->battlepower(), output);
  }

  // optional uint32 addHonour = 4;
  if (has_addhonour()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->addhonour(), output);
  }

  // optional uint32 killNum = 5;
  if (has_killnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->killnum(), output);
  }

  // optional bool isDie = 6;
  if (has_isdie()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->isdie(), output);
  }

  // optional uint32 charid = 7;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSynRealTimeItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string roleName = 1;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->rolename(), target);
  }

  // optional uint32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }

  // optional uint32 battlePower = 3;
  if (has_battlepower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->battlepower(), target);
  }

  // optional uint32 addHonour = 4;
  if (has_addhonour()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->addhonour(), target);
  }

  // optional uint32 killNum = 5;
  if (has_killnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->killnum(), target);
  }

  // optional bool isDie = 6;
  if (has_isdie()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->isdie(), target);
  }

  // optional uint32 charid = 7;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSynRealTimeItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string roleName = 1;
    if (has_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rolename());
    }

    // optional uint32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 battlePower = 3;
    if (has_battlepower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battlepower());
    }

    // optional uint32 addHonour = 4;
    if (has_addhonour()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->addhonour());
    }

    // optional uint32 killNum = 5;
    if (has_killnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->killnum());
    }

    // optional bool isDie = 6;
    if (has_isdie()) {
      total_size += 1 + 1;
    }

    // optional uint32 charid = 7;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSynRealTimeItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSynRealTimeItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSynRealTimeItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSynRealTimeItem::MergeFrom(const stSynRealTimeItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rolename()) {
      set_rolename(from.rolename());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_battlepower()) {
      set_battlepower(from.battlepower());
    }
    if (from.has_addhonour()) {
      set_addhonour(from.addhonour());
    }
    if (from.has_killnum()) {
      set_killnum(from.killnum());
    }
    if (from.has_isdie()) {
      set_isdie(from.isdie());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSynRealTimeItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSynRealTimeItem::CopyFrom(const stSynRealTimeItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSynRealTimeItem::IsInitialized() const {

  return true;
}

void stSynRealTimeItem::Swap(stSynRealTimeItem* other) {
  if (other != this) {
    std::swap(rolename_, other->rolename_);
    std::swap(level_, other->level_);
    std::swap(battlepower_, other->battlepower_);
    std::swap(addhonour_, other->addhonour_);
    std::swap(killnum_, other->killnum_);
    std::swap(isdie_, other->isdie_);
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSynRealTimeItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSynRealTimeItem_descriptor_;
  metadata.reflection = stSynRealTimeItem_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRealTimePKResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRealTimePKResult_ProtoModID_descriptor_;
}
bool stRealTimePKResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRealTimePKResult_ProtoModID stRealTimePKResult::ModID;
const stRealTimePKResult_ProtoModID stRealTimePKResult::ProtoModID_MIN;
const stRealTimePKResult_ProtoModID stRealTimePKResult::ProtoModID_MAX;
const int stRealTimePKResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRealTimePKResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRealTimePKResult_ProtoFunID_descriptor_;
}
bool stRealTimePKResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 107:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRealTimePKResult_ProtoFunID stRealTimePKResult::FunID;
const stRealTimePKResult_ProtoFunID stRealTimePKResult::ProtoFunID_MIN;
const stRealTimePKResult_ProtoFunID stRealTimePKResult::ProtoFunID_MAX;
const int stRealTimePKResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRealTimePKResult::kSideAFieldNumber;
const int stRealTimePKResult::kSideBFieldNumber;
#endif  // !_MSC_VER

stRealTimePKResult::stRealTimePKResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRealTimePKResult::InitAsDefaultInstance() {
}

stRealTimePKResult::stRealTimePKResult(const stRealTimePKResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRealTimePKResult::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRealTimePKResult::~stRealTimePKResult() {
  SharedDtor();
}

void stRealTimePKResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRealTimePKResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRealTimePKResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRealTimePKResult_descriptor_;
}

const stRealTimePKResult& stRealTimePKResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stRealTimePKResult* stRealTimePKResult::default_instance_ = NULL;

stRealTimePKResult* stRealTimePKResult::New() const {
  return new stRealTimePKResult;
}

void stRealTimePKResult::Clear() {
  sidea_.Clear();
  sideb_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRealTimePKResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Role.stSynRealTimeItem sideA = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sideA:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sidea()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_sideA;
        if (input->ExpectTag(18)) goto parse_sideB;
        break;
      }

      // repeated .Role.stSynRealTimeItem sideB = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sideB:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sideb()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sideB;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRealTimePKResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Role.stSynRealTimeItem sideA = 1;
  for (int i = 0; i < this->sidea_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sidea(i), output);
  }

  // repeated .Role.stSynRealTimeItem sideB = 2;
  for (int i = 0; i < this->sideb_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->sideb(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRealTimePKResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Role.stSynRealTimeItem sideA = 1;
  for (int i = 0; i < this->sidea_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->sidea(i), target);
  }

  // repeated .Role.stSynRealTimeItem sideB = 2;
  for (int i = 0; i < this->sideb_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->sideb(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRealTimePKResult::ByteSize() const {
  int total_size = 0;

  // repeated .Role.stSynRealTimeItem sideA = 1;
  total_size += 1 * this->sidea_size();
  for (int i = 0; i < this->sidea_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sidea(i));
  }

  // repeated .Role.stSynRealTimeItem sideB = 2;
  total_size += 1 * this->sideb_size();
  for (int i = 0; i < this->sideb_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sideb(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRealTimePKResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRealTimePKResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRealTimePKResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRealTimePKResult::MergeFrom(const stRealTimePKResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  sidea_.MergeFrom(from.sidea_);
  sideb_.MergeFrom(from.sideb_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRealTimePKResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRealTimePKResult::CopyFrom(const stRealTimePKResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRealTimePKResult::IsInitialized() const {

  return true;
}

void stRealTimePKResult::Swap(stRealTimePKResult* other) {
  if (other != this) {
    sidea_.Swap(&other->sidea_);
    sideb_.Swap(&other->sideb_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRealTimePKResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRealTimePKResult_descriptor_;
  metadata.reflection = stRealTimePKResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqFiveRaiseEquip_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqFiveRaiseEquip_ProtoModID_descriptor_;
}
bool stReqFiveRaiseEquip_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqFiveRaiseEquip_ProtoModID stReqFiveRaiseEquip::ModID;
const stReqFiveRaiseEquip_ProtoModID stReqFiveRaiseEquip::ProtoModID_MIN;
const stReqFiveRaiseEquip_ProtoModID stReqFiveRaiseEquip::ProtoModID_MAX;
const int stReqFiveRaiseEquip::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqFiveRaiseEquip_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqFiveRaiseEquip_ProtoFunID_descriptor_;
}
bool stReqFiveRaiseEquip_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 108:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqFiveRaiseEquip_ProtoFunID stReqFiveRaiseEquip::FunID;
const stReqFiveRaiseEquip_ProtoFunID stReqFiveRaiseEquip::ProtoFunID_MIN;
const stReqFiveRaiseEquip_ProtoFunID stReqFiveRaiseEquip::ProtoFunID_MAX;
const int stReqFiveRaiseEquip::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqFiveRaiseEquip::kBagTypeFieldNumber;
const int stReqFiveRaiseEquip::kInstanceIDFieldNumber;
const int stReqFiveRaiseEquip::kToLvFieldNumber;
#endif  // !_MSC_VER

stReqFiveRaiseEquip::stReqFiveRaiseEquip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqFiveRaiseEquip::InitAsDefaultInstance() {
}

stReqFiveRaiseEquip::stReqFiveRaiseEquip(const stReqFiveRaiseEquip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqFiveRaiseEquip::SharedCtor() {
  _cached_size_ = 0;
  bagtype_ = 0u;
  instanceid_ = GOOGLE_ULONGLONG(0);
  tolv_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqFiveRaiseEquip::~stReqFiveRaiseEquip() {
  SharedDtor();
}

void stReqFiveRaiseEquip::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqFiveRaiseEquip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqFiveRaiseEquip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqFiveRaiseEquip_descriptor_;
}

const stReqFiveRaiseEquip& stReqFiveRaiseEquip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stReqFiveRaiseEquip* stReqFiveRaiseEquip::default_instance_ = NULL;

stReqFiveRaiseEquip* stReqFiveRaiseEquip::New() const {
  return new stReqFiveRaiseEquip;
}

void stReqFiveRaiseEquip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bagtype_ = 0u;
    instanceid_ = GOOGLE_ULONGLONG(0);
    tolv_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqFiveRaiseEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 bagType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bagtype_)));
          set_has_bagtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_instanceID;
        break;
      }

      // optional uint64 instanceID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_instanceID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &instanceid_)));
          set_has_instanceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_toLv;
        break;
      }

      // optional uint32 toLv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_toLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tolv_)));
          set_has_tolv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqFiveRaiseEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 bagType = 1;
  if (has_bagtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bagtype(), output);
  }

  // optional uint64 instanceID = 2;
  if (has_instanceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->instanceid(), output);
  }

  // optional uint32 toLv = 3;
  if (has_tolv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->tolv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqFiveRaiseEquip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 bagType = 1;
  if (has_bagtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bagtype(), target);
  }

  // optional uint64 instanceID = 2;
  if (has_instanceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->instanceid(), target);
  }

  // optional uint32 toLv = 3;
  if (has_tolv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->tolv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqFiveRaiseEquip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 bagType = 1;
    if (has_bagtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bagtype());
    }

    // optional uint64 instanceID = 2;
    if (has_instanceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->instanceid());
    }

    // optional uint32 toLv = 3;
    if (has_tolv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tolv());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqFiveRaiseEquip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqFiveRaiseEquip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqFiveRaiseEquip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqFiveRaiseEquip::MergeFrom(const stReqFiveRaiseEquip& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bagtype()) {
      set_bagtype(from.bagtype());
    }
    if (from.has_instanceid()) {
      set_instanceid(from.instanceid());
    }
    if (from.has_tolv()) {
      set_tolv(from.tolv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqFiveRaiseEquip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqFiveRaiseEquip::CopyFrom(const stReqFiveRaiseEquip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqFiveRaiseEquip::IsInitialized() const {

  return true;
}

void stReqFiveRaiseEquip::Swap(stReqFiveRaiseEquip* other) {
  if (other != this) {
    std::swap(bagtype_, other->bagtype_);
    std::swap(instanceid_, other->instanceid_);
    std::swap(tolv_, other->tolv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqFiveRaiseEquip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqFiveRaiseEquip_descriptor_;
  metadata.reflection = stReqFiveRaiseEquip_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stFiveRaiseEquipResult_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stFiveRaiseEquipResult_eResult_descriptor_;
}
bool stFiveRaiseEquipResult_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stFiveRaiseEquipResult_eResult stFiveRaiseEquipResult::eSUCCESS;
const stFiveRaiseEquipResult_eResult stFiveRaiseEquipResult::eINNER_ERROR;
const stFiveRaiseEquipResult_eResult stFiveRaiseEquipResult::eROLE_LV_LIMIT;
const stFiveRaiseEquipResult_eResult stFiveRaiseEquipResult::eYUNTIE_NOT_ENOUGH;
const stFiveRaiseEquipResult_eResult stFiveRaiseEquipResult::eMONEY_NOT_ENOUGH;
const stFiveRaiseEquipResult_eResult stFiveRaiseEquipResult::eResult_MIN;
const stFiveRaiseEquipResult_eResult stFiveRaiseEquipResult::eResult_MAX;
const int stFiveRaiseEquipResult::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stFiveRaiseEquipResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stFiveRaiseEquipResult_ProtoModID_descriptor_;
}
bool stFiveRaiseEquipResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stFiveRaiseEquipResult_ProtoModID stFiveRaiseEquipResult::ModID;
const stFiveRaiseEquipResult_ProtoModID stFiveRaiseEquipResult::ProtoModID_MIN;
const stFiveRaiseEquipResult_ProtoModID stFiveRaiseEquipResult::ProtoModID_MAX;
const int stFiveRaiseEquipResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stFiveRaiseEquipResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stFiveRaiseEquipResult_ProtoFunID_descriptor_;
}
bool stFiveRaiseEquipResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 109:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stFiveRaiseEquipResult_ProtoFunID stFiveRaiseEquipResult::FunID;
const stFiveRaiseEquipResult_ProtoFunID stFiveRaiseEquipResult::ProtoFunID_MIN;
const stFiveRaiseEquipResult_ProtoFunID stFiveRaiseEquipResult::ProtoFunID_MAX;
const int stFiveRaiseEquipResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stFiveRaiseEquipResult::kBagTypeFieldNumber;
const int stFiveRaiseEquipResult::kInstanceIDFieldNumber;
const int stFiveRaiseEquipResult::kResultFieldNumber;
#endif  // !_MSC_VER

stFiveRaiseEquipResult::stFiveRaiseEquipResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stFiveRaiseEquipResult::InitAsDefaultInstance() {
}

stFiveRaiseEquipResult::stFiveRaiseEquipResult(const stFiveRaiseEquipResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stFiveRaiseEquipResult::SharedCtor() {
  _cached_size_ = 0;
  bagtype_ = 0u;
  instanceid_ = GOOGLE_ULONGLONG(0);
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stFiveRaiseEquipResult::~stFiveRaiseEquipResult() {
  SharedDtor();
}

void stFiveRaiseEquipResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stFiveRaiseEquipResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stFiveRaiseEquipResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stFiveRaiseEquipResult_descriptor_;
}

const stFiveRaiseEquipResult& stFiveRaiseEquipResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stFiveRaiseEquipResult* stFiveRaiseEquipResult::default_instance_ = NULL;

stFiveRaiseEquipResult* stFiveRaiseEquipResult::New() const {
  return new stFiveRaiseEquipResult;
}

void stFiveRaiseEquipResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bagtype_ = 0u;
    instanceid_ = GOOGLE_ULONGLONG(0);
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stFiveRaiseEquipResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 bagType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bagtype_)));
          set_has_bagtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_instanceID;
        break;
      }

      // optional uint64 instanceID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_instanceID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &instanceid_)));
          set_has_instanceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // optional .Role.stFiveRaiseEquipResult.eResult result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Role::stFiveRaiseEquipResult_eResult_IsValid(value)) {
            set_result(static_cast< ::Role::stFiveRaiseEquipResult_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stFiveRaiseEquipResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 bagType = 1;
  if (has_bagtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bagtype(), output);
  }

  // optional uint64 instanceID = 2;
  if (has_instanceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->instanceid(), output);
  }

  // optional .Role.stFiveRaiseEquipResult.eResult result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stFiveRaiseEquipResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 bagType = 1;
  if (has_bagtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bagtype(), target);
  }

  // optional uint64 instanceID = 2;
  if (has_instanceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->instanceid(), target);
  }

  // optional .Role.stFiveRaiseEquipResult.eResult result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stFiveRaiseEquipResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 bagType = 1;
    if (has_bagtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bagtype());
    }

    // optional uint64 instanceID = 2;
    if (has_instanceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->instanceid());
    }

    // optional .Role.stFiveRaiseEquipResult.eResult result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stFiveRaiseEquipResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stFiveRaiseEquipResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stFiveRaiseEquipResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stFiveRaiseEquipResult::MergeFrom(const stFiveRaiseEquipResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bagtype()) {
      set_bagtype(from.bagtype());
    }
    if (from.has_instanceid()) {
      set_instanceid(from.instanceid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stFiveRaiseEquipResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stFiveRaiseEquipResult::CopyFrom(const stFiveRaiseEquipResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stFiveRaiseEquipResult::IsInitialized() const {

  return true;
}

void stFiveRaiseEquipResult::Swap(stFiveRaiseEquipResult* other) {
  if (other != this) {
    std::swap(bagtype_, other->bagtype_);
    std::swap(instanceid_, other->instanceid_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stFiveRaiseEquipResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stFiveRaiseEquipResult_descriptor_;
  metadata.reflection = stFiveRaiseEquipResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stSynBattleProp_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynBattleProp_ProtoModID_descriptor_;
}
bool stSynBattleProp_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynBattleProp_ProtoModID stSynBattleProp::ModID;
const stSynBattleProp_ProtoModID stSynBattleProp::ProtoModID_MIN;
const stSynBattleProp_ProtoModID stSynBattleProp::ProtoModID_MAX;
const int stSynBattleProp::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSynBattleProp_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynBattleProp_ProtoFunID_descriptor_;
}
bool stSynBattleProp_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 110:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynBattleProp_ProtoFunID stSynBattleProp::FunID;
const stSynBattleProp_ProtoFunID stSynBattleProp::ProtoFunID_MIN;
const stSynBattleProp_ProtoFunID stSynBattleProp::ProtoFunID_MAX;
const int stSynBattleProp::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stSynBattleProp::kBattlePowerFieldNumber;
const int stSynBattleProp::kBattlePropFieldNumber;
#endif  // !_MSC_VER

stSynBattleProp::stSynBattleProp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSynBattleProp::InitAsDefaultInstance() {
}

stSynBattleProp::stSynBattleProp(const stSynBattleProp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSynBattleProp::SharedCtor() {
  _cached_size_ = 0;
  battlepower_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSynBattleProp::~stSynBattleProp() {
  SharedDtor();
}

void stSynBattleProp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stSynBattleProp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSynBattleProp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynBattleProp_descriptor_;
}

const stSynBattleProp& stSynBattleProp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stSynBattleProp* stSynBattleProp::default_instance_ = NULL;

stSynBattleProp* stSynBattleProp::New() const {
  return new stSynBattleProp;
}

void stSynBattleProp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    battlepower_ = 0u;
  }
  battleprop_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSynBattleProp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 battlePower = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battlepower_)));
          set_has_battlepower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_battleProp;
        break;
      }

      // repeated .Role.stBattleProp battleProp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_battleProp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_battleprop()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_battleProp;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSynBattleProp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 battlePower = 1;
  if (has_battlepower()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->battlepower(), output);
  }

  // repeated .Role.stBattleProp battleProp = 2;
  for (int i = 0; i < this->battleprop_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->battleprop(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSynBattleProp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 battlePower = 1;
  if (has_battlepower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->battlepower(), target);
  }

  // repeated .Role.stBattleProp battleProp = 2;
  for (int i = 0; i < this->battleprop_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->battleprop(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSynBattleProp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 battlePower = 1;
    if (has_battlepower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battlepower());
    }

  }
  // repeated .Role.stBattleProp battleProp = 2;
  total_size += 1 * this->battleprop_size();
  for (int i = 0; i < this->battleprop_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->battleprop(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSynBattleProp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSynBattleProp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSynBattleProp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSynBattleProp::MergeFrom(const stSynBattleProp& from) {
  GOOGLE_CHECK_NE(&from, this);
  battleprop_.MergeFrom(from.battleprop_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_battlepower()) {
      set_battlepower(from.battlepower());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSynBattleProp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSynBattleProp::CopyFrom(const stSynBattleProp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSynBattleProp::IsInitialized() const {

  return true;
}

void stSynBattleProp::Swap(stSynBattleProp* other) {
  if (other != this) {
    std::swap(battlepower_, other->battlepower_);
    battleprop_.Swap(&other->battleprop_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSynBattleProp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSynBattleProp_descriptor_;
  metadata.reflection = stSynBattleProp_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stSynTeamCopyMapNum_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynTeamCopyMapNum_ProtoModID_descriptor_;
}
bool stSynTeamCopyMapNum_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynTeamCopyMapNum_ProtoModID stSynTeamCopyMapNum::ModID;
const stSynTeamCopyMapNum_ProtoModID stSynTeamCopyMapNum::ProtoModID_MIN;
const stSynTeamCopyMapNum_ProtoModID stSynTeamCopyMapNum::ProtoModID_MAX;
const int stSynTeamCopyMapNum::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSynTeamCopyMapNum_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynTeamCopyMapNum_ProtoFunID_descriptor_;
}
bool stSynTeamCopyMapNum_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 111:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynTeamCopyMapNum_ProtoFunID stSynTeamCopyMapNum::FunID;
const stSynTeamCopyMapNum_ProtoFunID stSynTeamCopyMapNum::ProtoFunID_MIN;
const stSynTeamCopyMapNum_ProtoFunID stSynTeamCopyMapNum::ProtoFunID_MAX;
const int stSynTeamCopyMapNum::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stSynTeamCopyMapNum::kNumFieldNumber;
#endif  // !_MSC_VER

stSynTeamCopyMapNum::stSynTeamCopyMapNum()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSynTeamCopyMapNum::InitAsDefaultInstance() {
}

stSynTeamCopyMapNum::stSynTeamCopyMapNum(const stSynTeamCopyMapNum& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSynTeamCopyMapNum::SharedCtor() {
  _cached_size_ = 0;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSynTeamCopyMapNum::~stSynTeamCopyMapNum() {
  SharedDtor();
}

void stSynTeamCopyMapNum::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stSynTeamCopyMapNum::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSynTeamCopyMapNum::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynTeamCopyMapNum_descriptor_;
}

const stSynTeamCopyMapNum& stSynTeamCopyMapNum::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stSynTeamCopyMapNum* stSynTeamCopyMapNum::default_instance_ = NULL;

stSynTeamCopyMapNum* stSynTeamCopyMapNum::New() const {
  return new stSynTeamCopyMapNum;
}

void stSynTeamCopyMapNum::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSynTeamCopyMapNum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSynTeamCopyMapNum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 num = 1;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSynTeamCopyMapNum::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 num = 1;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSynTeamCopyMapNum::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 num = 1;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSynTeamCopyMapNum::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSynTeamCopyMapNum* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSynTeamCopyMapNum*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSynTeamCopyMapNum::MergeFrom(const stSynTeamCopyMapNum& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSynTeamCopyMapNum::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSynTeamCopyMapNum::CopyFrom(const stSynTeamCopyMapNum& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSynTeamCopyMapNum::IsInitialized() const {

  return true;
}

void stSynTeamCopyMapNum::Swap(stSynTeamCopyMapNum* other) {
  if (other != this) {
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSynTeamCopyMapNum::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSynTeamCopyMapNum_descriptor_;
  metadata.reflection = stSynTeamCopyMapNum_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stSynRealTimePKNum_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynRealTimePKNum_ProtoModID_descriptor_;
}
bool stSynRealTimePKNum_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynRealTimePKNum_ProtoModID stSynRealTimePKNum::ModID;
const stSynRealTimePKNum_ProtoModID stSynRealTimePKNum::ProtoModID_MIN;
const stSynRealTimePKNum_ProtoModID stSynRealTimePKNum::ProtoModID_MAX;
const int stSynRealTimePKNum::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSynRealTimePKNum_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynRealTimePKNum_ProtoFunID_descriptor_;
}
bool stSynRealTimePKNum_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 112:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynRealTimePKNum_ProtoFunID stSynRealTimePKNum::FunID;
const stSynRealTimePKNum_ProtoFunID stSynRealTimePKNum::ProtoFunID_MIN;
const stSynRealTimePKNum_ProtoFunID stSynRealTimePKNum::ProtoFunID_MAX;
const int stSynRealTimePKNum::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stSynRealTimePKNum::kNumFieldNumber;
#endif  // !_MSC_VER

stSynRealTimePKNum::stSynRealTimePKNum()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSynRealTimePKNum::InitAsDefaultInstance() {
}

stSynRealTimePKNum::stSynRealTimePKNum(const stSynRealTimePKNum& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSynRealTimePKNum::SharedCtor() {
  _cached_size_ = 0;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSynRealTimePKNum::~stSynRealTimePKNum() {
  SharedDtor();
}

void stSynRealTimePKNum::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stSynRealTimePKNum::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSynRealTimePKNum::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynRealTimePKNum_descriptor_;
}

const stSynRealTimePKNum& stSynRealTimePKNum::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stSynRealTimePKNum* stSynRealTimePKNum::default_instance_ = NULL;

stSynRealTimePKNum* stSynRealTimePKNum::New() const {
  return new stSynRealTimePKNum;
}

void stSynRealTimePKNum::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSynRealTimePKNum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSynRealTimePKNum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 num = 1;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSynRealTimePKNum::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 num = 1;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSynRealTimePKNum::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 num = 1;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSynRealTimePKNum::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSynRealTimePKNum* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSynRealTimePKNum*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSynRealTimePKNum::MergeFrom(const stSynRealTimePKNum& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSynRealTimePKNum::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSynRealTimePKNum::CopyFrom(const stSynRealTimePKNum& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSynRealTimePKNum::IsInitialized() const {

  return true;
}

void stSynRealTimePKNum::Swap(stSynRealTimePKNum* other) {
  if (other != this) {
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSynRealTimePKNum::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSynRealTimePKNum_descriptor_;
  metadata.reflection = stSynRealTimePKNum_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stCopymapFail_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCopymapFail_ProtoModID_descriptor_;
}
bool stCopymapFail_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stCopymapFail_ProtoModID stCopymapFail::ModID;
const stCopymapFail_ProtoModID stCopymapFail::ProtoModID_MIN;
const stCopymapFail_ProtoModID stCopymapFail::ProtoModID_MAX;
const int stCopymapFail::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stCopymapFail_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCopymapFail_ProtoFunID_descriptor_;
}
bool stCopymapFail_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 113:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stCopymapFail_ProtoFunID stCopymapFail::FunID;
const stCopymapFail_ProtoFunID stCopymapFail::ProtoFunID_MIN;
const stCopymapFail_ProtoFunID stCopymapFail::ProtoFunID_MAX;
const int stCopymapFail::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stCopymapFail::kCopyMapIDFieldNumber;
#endif  // !_MSC_VER

stCopymapFail::stCopymapFail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stCopymapFail::InitAsDefaultInstance() {
}

stCopymapFail::stCopymapFail(const stCopymapFail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stCopymapFail::SharedCtor() {
  _cached_size_ = 0;
  copymapid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stCopymapFail::~stCopymapFail() {
  SharedDtor();
}

void stCopymapFail::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stCopymapFail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stCopymapFail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCopymapFail_descriptor_;
}

const stCopymapFail& stCopymapFail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stCopymapFail* stCopymapFail::default_instance_ = NULL;

stCopymapFail* stCopymapFail::New() const {
  return new stCopymapFail;
}

void stCopymapFail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    copymapid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stCopymapFail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 copyMapID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &copymapid_)));
          set_has_copymapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stCopymapFail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 copyMapID = 1;
  if (has_copymapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->copymapid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stCopymapFail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 copyMapID = 1;
  if (has_copymapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->copymapid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stCopymapFail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 copyMapID = 1;
    if (has_copymapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->copymapid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stCopymapFail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stCopymapFail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stCopymapFail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stCopymapFail::MergeFrom(const stCopymapFail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_copymapid()) {
      set_copymapid(from.copymapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stCopymapFail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stCopymapFail::CopyFrom(const stCopymapFail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stCopymapFail::IsInitialized() const {

  return true;
}

void stCopymapFail::Swap(stCopymapFail* other) {
  if (other != this) {
    std::swap(copymapid_, other->copymapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stCopymapFail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stCopymapFail_descriptor_;
  metadata.reflection = stCopymapFail_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqHero10TimeStudySkill_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqHero10TimeStudySkill_ProtoModID_descriptor_;
}
bool stReqHero10TimeStudySkill_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqHero10TimeStudySkill_ProtoModID stReqHero10TimeStudySkill::ModID;
const stReqHero10TimeStudySkill_ProtoModID stReqHero10TimeStudySkill::ProtoModID_MIN;
const stReqHero10TimeStudySkill_ProtoModID stReqHero10TimeStudySkill::ProtoModID_MAX;
const int stReqHero10TimeStudySkill::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqHero10TimeStudySkill_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqHero10TimeStudySkill_ProtoFunID_descriptor_;
}
bool stReqHero10TimeStudySkill_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 114:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqHero10TimeStudySkill_ProtoFunID stReqHero10TimeStudySkill::FunID;
const stReqHero10TimeStudySkill_ProtoFunID stReqHero10TimeStudySkill::ProtoFunID_MIN;
const stReqHero10TimeStudySkill_ProtoFunID stReqHero10TimeStudySkill::ProtoFunID_MAX;
const int stReqHero10TimeStudySkill::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqHero10TimeStudySkill::kHeroIDFieldNumber;
#endif  // !_MSC_VER

stReqHero10TimeStudySkill::stReqHero10TimeStudySkill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqHero10TimeStudySkill::InitAsDefaultInstance() {
}

stReqHero10TimeStudySkill::stReqHero10TimeStudySkill(const stReqHero10TimeStudySkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqHero10TimeStudySkill::SharedCtor() {
  _cached_size_ = 0;
  heroid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqHero10TimeStudySkill::~stReqHero10TimeStudySkill() {
  SharedDtor();
}

void stReqHero10TimeStudySkill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqHero10TimeStudySkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqHero10TimeStudySkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqHero10TimeStudySkill_descriptor_;
}

const stReqHero10TimeStudySkill& stReqHero10TimeStudySkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stReqHero10TimeStudySkill* stReqHero10TimeStudySkill::default_instance_ = NULL;

stReqHero10TimeStudySkill* stReqHero10TimeStudySkill::New() const {
  return new stReqHero10TimeStudySkill;
}

void stReqHero10TimeStudySkill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    heroid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqHero10TimeStudySkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 heroID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heroid_)));
          set_has_heroid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqHero10TimeStudySkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 heroID = 1;
  if (has_heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->heroid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqHero10TimeStudySkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 heroID = 1;
  if (has_heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->heroid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqHero10TimeStudySkill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 heroID = 1;
    if (has_heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heroid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqHero10TimeStudySkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqHero10TimeStudySkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqHero10TimeStudySkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqHero10TimeStudySkill::MergeFrom(const stReqHero10TimeStudySkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_heroid()) {
      set_heroid(from.heroid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqHero10TimeStudySkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqHero10TimeStudySkill::CopyFrom(const stReqHero10TimeStudySkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqHero10TimeStudySkill::IsInitialized() const {

  return true;
}

void stReqHero10TimeStudySkill::Swap(stReqHero10TimeStudySkill* other) {
  if (other != this) {
    std::swap(heroid_, other->heroid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqHero10TimeStudySkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqHero10TimeStudySkill_descriptor_;
  metadata.reflection = stReqHero10TimeStudySkill_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stHero10TimesStudySkillResult_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stHero10TimesStudySkillResult_eResult_descriptor_;
}
bool stHero10TimesStudySkillResult_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stHero10TimesStudySkillResult_eResult stHero10TimesStudySkillResult::eSuccess;
const stHero10TimesStudySkillResult_eResult stHero10TimesStudySkillResult::eHero_Not_Exist;
const stHero10TimesStudySkillResult_eResult stHero10TimesStudySkillResult::eInner_Error;
const stHero10TimesStudySkillResult_eResult stHero10TimesStudySkillResult::eNot_Enough_Diamond;
const stHero10TimesStudySkillResult_eResult stHero10TimesStudySkillResult::eNot_Enough_Item;
const stHero10TimesStudySkillResult_eResult stHero10TimesStudySkillResult::eUse_Diamond_Num_Not_Enough;
const stHero10TimesStudySkillResult_eResult stHero10TimesStudySkillResult::eHas_VipRight;
const stHero10TimesStudySkillResult_eResult stHero10TimesStudySkillResult::eResult_MIN;
const stHero10TimesStudySkillResult_eResult stHero10TimesStudySkillResult::eResult_MAX;
const int stHero10TimesStudySkillResult::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stHero10TimesStudySkillResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stHero10TimesStudySkillResult_ProtoModID_descriptor_;
}
bool stHero10TimesStudySkillResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stHero10TimesStudySkillResult_ProtoModID stHero10TimesStudySkillResult::ModID;
const stHero10TimesStudySkillResult_ProtoModID stHero10TimesStudySkillResult::ProtoModID_MIN;
const stHero10TimesStudySkillResult_ProtoModID stHero10TimesStudySkillResult::ProtoModID_MAX;
const int stHero10TimesStudySkillResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stHero10TimesStudySkillResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stHero10TimesStudySkillResult_ProtoFunID_descriptor_;
}
bool stHero10TimesStudySkillResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 115:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stHero10TimesStudySkillResult_ProtoFunID stHero10TimesStudySkillResult::FunID;
const stHero10TimesStudySkillResult_ProtoFunID stHero10TimesStudySkillResult::ProtoFunID_MIN;
const stHero10TimesStudySkillResult_ProtoFunID stHero10TimesStudySkillResult::ProtoFunID_MAX;
const int stHero10TimesStudySkillResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stHero10TimesStudySkillResult::kResultFieldNumber;
const int stHero10TimesStudySkillResult::kHeroIDFieldNumber;
const int stHero10TimesStudySkillResult::kSkillIDFieldNumber;
const int stHero10TimesStudySkillResult::kUseDiamondNumFieldNumber;
const int stHero10TimesStudySkillResult::kAddSkillExpFieldNumber;
const int stHero10TimesStudySkillResult::kStudySkillNumFieldNumber;
#endif  // !_MSC_VER

stHero10TimesStudySkillResult::stHero10TimesStudySkillResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stHero10TimesStudySkillResult::InitAsDefaultInstance() {
}

stHero10TimesStudySkillResult::stHero10TimesStudySkillResult(const stHero10TimesStudySkillResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stHero10TimesStudySkillResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  heroid_ = 0u;
  skillid_ = 0u;
  usediamondnum_ = 0u;
  addskillexp_ = 0u;
  studyskillnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stHero10TimesStudySkillResult::~stHero10TimesStudySkillResult() {
  SharedDtor();
}

void stHero10TimesStudySkillResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stHero10TimesStudySkillResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stHero10TimesStudySkillResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stHero10TimesStudySkillResult_descriptor_;
}

const stHero10TimesStudySkillResult& stHero10TimesStudySkillResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stHero10TimesStudySkillResult* stHero10TimesStudySkillResult::default_instance_ = NULL;

stHero10TimesStudySkillResult* stHero10TimesStudySkillResult::New() const {
  return new stHero10TimesStudySkillResult;
}

void stHero10TimesStudySkillResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
    heroid_ = 0u;
    skillid_ = 0u;
    usediamondnum_ = 0u;
    addskillexp_ = 0u;
    studyskillnum_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stHero10TimesStudySkillResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Role.stHero10TimesStudySkillResult.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Role::stHero10TimesStudySkillResult_eResult_IsValid(value)) {
            set_result(static_cast< ::Role::stHero10TimesStudySkillResult_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_heroID;
        break;
      }

      // optional uint32 heroID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_heroID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heroid_)));
          set_has_heroid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_skillID;
        break;
      }

      // optional uint32 skillID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_useDiamondNum;
        break;
      }

      // optional uint32 useDiamondNum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_useDiamondNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usediamondnum_)));
          set_has_usediamondnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_addSkillExp;
        break;
      }

      // optional uint32 addSkillExp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addSkillExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &addskillexp_)));
          set_has_addskillexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_studySkillNum;
        break;
      }

      // optional uint32 studySkillNum = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_studySkillNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &studyskillnum_)));
          set_has_studyskillnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stHero10TimesStudySkillResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Role.stHero10TimesStudySkillResult.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional uint32 heroID = 2;
  if (has_heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->heroid(), output);
  }

  // optional uint32 skillID = 3;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->skillid(), output);
  }

  // optional uint32 useDiamondNum = 4;
  if (has_usediamondnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->usediamondnum(), output);
  }

  // optional uint32 addSkillExp = 5;
  if (has_addskillexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->addskillexp(), output);
  }

  // optional uint32 studySkillNum = 6;
  if (has_studyskillnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->studyskillnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stHero10TimesStudySkillResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Role.stHero10TimesStudySkillResult.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional uint32 heroID = 2;
  if (has_heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->heroid(), target);
  }

  // optional uint32 skillID = 3;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->skillid(), target);
  }

  // optional uint32 useDiamondNum = 4;
  if (has_usediamondnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->usediamondnum(), target);
  }

  // optional uint32 addSkillExp = 5;
  if (has_addskillexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->addskillexp(), target);
  }

  // optional uint32 studySkillNum = 6;
  if (has_studyskillnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->studyskillnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stHero10TimesStudySkillResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Role.stHero10TimesStudySkillResult.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional uint32 heroID = 2;
    if (has_heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heroid());
    }

    // optional uint32 skillID = 3;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillid());
    }

    // optional uint32 useDiamondNum = 4;
    if (has_usediamondnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->usediamondnum());
    }

    // optional uint32 addSkillExp = 5;
    if (has_addskillexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->addskillexp());
    }

    // optional uint32 studySkillNum = 6;
    if (has_studyskillnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->studyskillnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stHero10TimesStudySkillResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stHero10TimesStudySkillResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stHero10TimesStudySkillResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stHero10TimesStudySkillResult::MergeFrom(const stHero10TimesStudySkillResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_heroid()) {
      set_heroid(from.heroid());
    }
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_usediamondnum()) {
      set_usediamondnum(from.usediamondnum());
    }
    if (from.has_addskillexp()) {
      set_addskillexp(from.addskillexp());
    }
    if (from.has_studyskillnum()) {
      set_studyskillnum(from.studyskillnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stHero10TimesStudySkillResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stHero10TimesStudySkillResult::CopyFrom(const stHero10TimesStudySkillResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stHero10TimesStudySkillResult::IsInitialized() const {

  return true;
}

void stHero10TimesStudySkillResult::Swap(stHero10TimesStudySkillResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(heroid_, other->heroid_);
    std::swap(skillid_, other->skillid_);
    std::swap(usediamondnum_, other->usediamondnum_);
    std::swap(addskillexp_, other->addskillexp_);
    std::swap(studyskillnum_, other->studyskillnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stHero10TimesStudySkillResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stHero10TimesStudySkillResult_descriptor_;
  metadata.reflection = stHero10TimesStudySkillResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* st10TimesGetEquipSkill_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return st10TimesGetEquipSkill_ProtoModID_descriptor_;
}
bool st10TimesGetEquipSkill_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const st10TimesGetEquipSkill_ProtoModID st10TimesGetEquipSkill::ModID;
const st10TimesGetEquipSkill_ProtoModID st10TimesGetEquipSkill::ProtoModID_MIN;
const st10TimesGetEquipSkill_ProtoModID st10TimesGetEquipSkill::ProtoModID_MAX;
const int st10TimesGetEquipSkill::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* st10TimesGetEquipSkill_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return st10TimesGetEquipSkill_ProtoFunID_descriptor_;
}
bool st10TimesGetEquipSkill_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 116:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const st10TimesGetEquipSkill_ProtoFunID st10TimesGetEquipSkill::FunID;
const st10TimesGetEquipSkill_ProtoFunID st10TimesGetEquipSkill::ProtoFunID_MIN;
const st10TimesGetEquipSkill_ProtoFunID st10TimesGetEquipSkill::ProtoFunID_MAX;
const int st10TimesGetEquipSkill::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int st10TimesGetEquipSkill::kBagTypeFieldNumber;
const int st10TimesGetEquipSkill::kInstanceIDFieldNumber;
#endif  // !_MSC_VER

st10TimesGetEquipSkill::st10TimesGetEquipSkill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void st10TimesGetEquipSkill::InitAsDefaultInstance() {
}

st10TimesGetEquipSkill::st10TimesGetEquipSkill(const st10TimesGetEquipSkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void st10TimesGetEquipSkill::SharedCtor() {
  _cached_size_ = 0;
  bagtype_ = 0u;
  instanceid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

st10TimesGetEquipSkill::~st10TimesGetEquipSkill() {
  SharedDtor();
}

void st10TimesGetEquipSkill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void st10TimesGetEquipSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* st10TimesGetEquipSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return st10TimesGetEquipSkill_descriptor_;
}

const st10TimesGetEquipSkill& st10TimesGetEquipSkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

st10TimesGetEquipSkill* st10TimesGetEquipSkill::default_instance_ = NULL;

st10TimesGetEquipSkill* st10TimesGetEquipSkill::New() const {
  return new st10TimesGetEquipSkill;
}

void st10TimesGetEquipSkill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bagtype_ = 0u;
    instanceid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool st10TimesGetEquipSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 bagType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bagtype_)));
          set_has_bagtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_instanceID;
        break;
      }

      // optional uint64 instanceID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_instanceID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &instanceid_)));
          set_has_instanceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void st10TimesGetEquipSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 bagType = 1;
  if (has_bagtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bagtype(), output);
  }

  // optional uint64 instanceID = 2;
  if (has_instanceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->instanceid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* st10TimesGetEquipSkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 bagType = 1;
  if (has_bagtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bagtype(), target);
  }

  // optional uint64 instanceID = 2;
  if (has_instanceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->instanceid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int st10TimesGetEquipSkill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 bagType = 1;
    if (has_bagtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bagtype());
    }

    // optional uint64 instanceID = 2;
    if (has_instanceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->instanceid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void st10TimesGetEquipSkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const st10TimesGetEquipSkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const st10TimesGetEquipSkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void st10TimesGetEquipSkill::MergeFrom(const st10TimesGetEquipSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bagtype()) {
      set_bagtype(from.bagtype());
    }
    if (from.has_instanceid()) {
      set_instanceid(from.instanceid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void st10TimesGetEquipSkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void st10TimesGetEquipSkill::CopyFrom(const st10TimesGetEquipSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool st10TimesGetEquipSkill::IsInitialized() const {

  return true;
}

void st10TimesGetEquipSkill::Swap(st10TimesGetEquipSkill* other) {
  if (other != this) {
    std::swap(bagtype_, other->bagtype_);
    std::swap(instanceid_, other->instanceid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata st10TimesGetEquipSkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = st10TimesGetEquipSkill_descriptor_;
  metadata.reflection = st10TimesGetEquipSkill_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* st10TimesGetEquipSkillResult_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return st10TimesGetEquipSkillResult_eResult_descriptor_;
}
bool st10TimesGetEquipSkillResult_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const st10TimesGetEquipSkillResult_eResult st10TimesGetEquipSkillResult::eSuccess;
const st10TimesGetEquipSkillResult_eResult st10TimesGetEquipSkillResult::eEquip_Not_Exist;
const st10TimesGetEquipSkillResult_eResult st10TimesGetEquipSkillResult::eTime_Use_Out;
const st10TimesGetEquipSkillResult_eResult st10TimesGetEquipSkillResult::eItem_Not_Enough;
const st10TimesGetEquipSkillResult_eResult st10TimesGetEquipSkillResult::eDiamond_Not_Enough;
const st10TimesGetEquipSkillResult_eResult st10TimesGetEquipSkillResult::eHas_Exist_Skill;
const st10TimesGetEquipSkillResult_eResult st10TimesGetEquipSkillResult::eInner_Error;
const st10TimesGetEquipSkillResult_eResult st10TimesGetEquipSkillResult::eHas_No_VipRight;
const st10TimesGetEquipSkillResult_eResult st10TimesGetEquipSkillResult::eResult_MIN;
const st10TimesGetEquipSkillResult_eResult st10TimesGetEquipSkillResult::eResult_MAX;
const int st10TimesGetEquipSkillResult::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* st10TimesGetEquipSkillResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return st10TimesGetEquipSkillResult_ProtoModID_descriptor_;
}
bool st10TimesGetEquipSkillResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const st10TimesGetEquipSkillResult_ProtoModID st10TimesGetEquipSkillResult::ModID;
const st10TimesGetEquipSkillResult_ProtoModID st10TimesGetEquipSkillResult::ProtoModID_MIN;
const st10TimesGetEquipSkillResult_ProtoModID st10TimesGetEquipSkillResult::ProtoModID_MAX;
const int st10TimesGetEquipSkillResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* st10TimesGetEquipSkillResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return st10TimesGetEquipSkillResult_ProtoFunID_descriptor_;
}
bool st10TimesGetEquipSkillResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 117:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const st10TimesGetEquipSkillResult_ProtoFunID st10TimesGetEquipSkillResult::FunID;
const st10TimesGetEquipSkillResult_ProtoFunID st10TimesGetEquipSkillResult::ProtoFunID_MIN;
const st10TimesGetEquipSkillResult_ProtoFunID st10TimesGetEquipSkillResult::ProtoFunID_MAX;
const int st10TimesGetEquipSkillResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int st10TimesGetEquipSkillResult::kBagTypeFieldNumber;
const int st10TimesGetEquipSkillResult::kInstanceIDFieldNumber;
const int st10TimesGetEquipSkillResult::kResultFieldNumber;
const int st10TimesGetEquipSkillResult::kSkillIDFieldNumber;
const int st10TimesGetEquipSkillResult::kJuexingNumFieldNumber;
const int st10TimesGetEquipSkillResult::kGetJueXingExpFieldNumber;
#endif  // !_MSC_VER

st10TimesGetEquipSkillResult::st10TimesGetEquipSkillResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void st10TimesGetEquipSkillResult::InitAsDefaultInstance() {
}

st10TimesGetEquipSkillResult::st10TimesGetEquipSkillResult(const st10TimesGetEquipSkillResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void st10TimesGetEquipSkillResult::SharedCtor() {
  _cached_size_ = 0;
  bagtype_ = 0u;
  instanceid_ = GOOGLE_ULONGLONG(0);
  result_ = 1;
  skillid_ = 0u;
  juexingnum_ = 0u;
  getjuexingexp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

st10TimesGetEquipSkillResult::~st10TimesGetEquipSkillResult() {
  SharedDtor();
}

void st10TimesGetEquipSkillResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void st10TimesGetEquipSkillResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* st10TimesGetEquipSkillResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return st10TimesGetEquipSkillResult_descriptor_;
}

const st10TimesGetEquipSkillResult& st10TimesGetEquipSkillResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

st10TimesGetEquipSkillResult* st10TimesGetEquipSkillResult::default_instance_ = NULL;

st10TimesGetEquipSkillResult* st10TimesGetEquipSkillResult::New() const {
  return new st10TimesGetEquipSkillResult;
}

void st10TimesGetEquipSkillResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bagtype_ = 0u;
    instanceid_ = GOOGLE_ULONGLONG(0);
    result_ = 1;
    skillid_ = 0u;
    juexingnum_ = 0u;
    getjuexingexp_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool st10TimesGetEquipSkillResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 bagType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bagtype_)));
          set_has_bagtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_instanceID;
        break;
      }

      // optional uint64 instanceID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_instanceID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &instanceid_)));
          set_has_instanceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // optional .Role.st10TimesGetEquipSkillResult.eResult result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Role::st10TimesGetEquipSkillResult_eResult_IsValid(value)) {
            set_result(static_cast< ::Role::st10TimesGetEquipSkillResult_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_skillID;
        break;
      }

      // optional uint32 skillID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_juexingNum;
        break;
      }

      // optional uint32 juexingNum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_juexingNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &juexingnum_)));
          set_has_juexingnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_getJueXingExp;
        break;
      }

      // optional uint32 getJueXingExp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_getJueXingExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &getjuexingexp_)));
          set_has_getjuexingexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void st10TimesGetEquipSkillResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 bagType = 1;
  if (has_bagtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bagtype(), output);
  }

  // optional uint64 instanceID = 2;
  if (has_instanceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->instanceid(), output);
  }

  // optional .Role.st10TimesGetEquipSkillResult.eResult result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->result(), output);
  }

  // optional uint32 skillID = 4;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->skillid(), output);
  }

  // optional uint32 juexingNum = 5;
  if (has_juexingnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->juexingnum(), output);
  }

  // optional uint32 getJueXingExp = 6;
  if (has_getjuexingexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->getjuexingexp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* st10TimesGetEquipSkillResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 bagType = 1;
  if (has_bagtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bagtype(), target);
  }

  // optional uint64 instanceID = 2;
  if (has_instanceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->instanceid(), target);
  }

  // optional .Role.st10TimesGetEquipSkillResult.eResult result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->result(), target);
  }

  // optional uint32 skillID = 4;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->skillid(), target);
  }

  // optional uint32 juexingNum = 5;
  if (has_juexingnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->juexingnum(), target);
  }

  // optional uint32 getJueXingExp = 6;
  if (has_getjuexingexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->getjuexingexp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int st10TimesGetEquipSkillResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 bagType = 1;
    if (has_bagtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bagtype());
    }

    // optional uint64 instanceID = 2;
    if (has_instanceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->instanceid());
    }

    // optional .Role.st10TimesGetEquipSkillResult.eResult result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional uint32 skillID = 4;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillid());
    }

    // optional uint32 juexingNum = 5;
    if (has_juexingnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->juexingnum());
    }

    // optional uint32 getJueXingExp = 6;
    if (has_getjuexingexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->getjuexingexp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void st10TimesGetEquipSkillResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const st10TimesGetEquipSkillResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const st10TimesGetEquipSkillResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void st10TimesGetEquipSkillResult::MergeFrom(const st10TimesGetEquipSkillResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bagtype()) {
      set_bagtype(from.bagtype());
    }
    if (from.has_instanceid()) {
      set_instanceid(from.instanceid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_juexingnum()) {
      set_juexingnum(from.juexingnum());
    }
    if (from.has_getjuexingexp()) {
      set_getjuexingexp(from.getjuexingexp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void st10TimesGetEquipSkillResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void st10TimesGetEquipSkillResult::CopyFrom(const st10TimesGetEquipSkillResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool st10TimesGetEquipSkillResult::IsInitialized() const {

  return true;
}

void st10TimesGetEquipSkillResult::Swap(st10TimesGetEquipSkillResult* other) {
  if (other != this) {
    std::swap(bagtype_, other->bagtype_);
    std::swap(instanceid_, other->instanceid_);
    std::swap(result_, other->result_);
    std::swap(skillid_, other->skillid_);
    std::swap(juexingnum_, other->juexingnum_);
    std::swap(getjuexingexp_, other->getjuexingexp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata st10TimesGetEquipSkillResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = st10TimesGetEquipSkillResult_descriptor_;
  metadata.reflection = st10TimesGetEquipSkillResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqFirstRechargeReward_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqFirstRechargeReward_ProtoModID_descriptor_;
}
bool stReqFirstRechargeReward_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqFirstRechargeReward_ProtoModID stReqFirstRechargeReward::ModID;
const stReqFirstRechargeReward_ProtoModID stReqFirstRechargeReward::ProtoModID_MIN;
const stReqFirstRechargeReward_ProtoModID stReqFirstRechargeReward::ProtoModID_MAX;
const int stReqFirstRechargeReward::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqFirstRechargeReward_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqFirstRechargeReward_ProtoFunID_descriptor_;
}
bool stReqFirstRechargeReward_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 118:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqFirstRechargeReward_ProtoFunID stReqFirstRechargeReward::FunID;
const stReqFirstRechargeReward_ProtoFunID stReqFirstRechargeReward::ProtoFunID_MIN;
const stReqFirstRechargeReward_ProtoFunID stReqFirstRechargeReward::ProtoFunID_MAX;
const int stReqFirstRechargeReward::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqFirstRechargeReward::kCharIDFieldNumber;
#endif  // !_MSC_VER

stReqFirstRechargeReward::stReqFirstRechargeReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqFirstRechargeReward::InitAsDefaultInstance() {
}

stReqFirstRechargeReward::stReqFirstRechargeReward(const stReqFirstRechargeReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqFirstRechargeReward::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqFirstRechargeReward::~stReqFirstRechargeReward() {
  SharedDtor();
}

void stReqFirstRechargeReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqFirstRechargeReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqFirstRechargeReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqFirstRechargeReward_descriptor_;
}

const stReqFirstRechargeReward& stReqFirstRechargeReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stReqFirstRechargeReward* stReqFirstRechargeReward::default_instance_ = NULL;

stReqFirstRechargeReward* stReqFirstRechargeReward::New() const {
  return new stReqFirstRechargeReward;
}

void stReqFirstRechargeReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqFirstRechargeReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqFirstRechargeReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqFirstRechargeReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqFirstRechargeReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqFirstRechargeReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqFirstRechargeReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqFirstRechargeReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqFirstRechargeReward::MergeFrom(const stReqFirstRechargeReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqFirstRechargeReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqFirstRechargeReward::CopyFrom(const stReqFirstRechargeReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqFirstRechargeReward::IsInitialized() const {

  return true;
}

void stReqFirstRechargeReward::Swap(stReqFirstRechargeReward* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqFirstRechargeReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqFirstRechargeReward_descriptor_;
  metadata.reflection = stReqFirstRechargeReward_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRetFirstRechargeReward_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetFirstRechargeReward_eResult_descriptor_;
}
bool stRetFirstRechargeReward_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetFirstRechargeReward_eResult stRetFirstRechargeReward::eSuccess;
const stRetFirstRechargeReward_eResult stRetFirstRechargeReward::eHas_Not_Recharge;
const stRetFirstRechargeReward_eResult stRetFirstRechargeReward::eHas_Got_Reward;
const stRetFirstRechargeReward_eResult stRetFirstRechargeReward::eBag_Full;
const stRetFirstRechargeReward_eResult stRetFirstRechargeReward::eResult_MIN;
const stRetFirstRechargeReward_eResult stRetFirstRechargeReward::eResult_MAX;
const int stRetFirstRechargeReward::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetFirstRechargeReward_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetFirstRechargeReward_ProtoModID_descriptor_;
}
bool stRetFirstRechargeReward_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetFirstRechargeReward_ProtoModID stRetFirstRechargeReward::ModID;
const stRetFirstRechargeReward_ProtoModID stRetFirstRechargeReward::ProtoModID_MIN;
const stRetFirstRechargeReward_ProtoModID stRetFirstRechargeReward::ProtoModID_MAX;
const int stRetFirstRechargeReward::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetFirstRechargeReward_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetFirstRechargeReward_ProtoFunID_descriptor_;
}
bool stRetFirstRechargeReward_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 119:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetFirstRechargeReward_ProtoFunID stRetFirstRechargeReward::FunID;
const stRetFirstRechargeReward_ProtoFunID stRetFirstRechargeReward::ProtoFunID_MIN;
const stRetFirstRechargeReward_ProtoFunID stRetFirstRechargeReward::ProtoFunID_MAX;
const int stRetFirstRechargeReward::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRetFirstRechargeReward::kResultFieldNumber;
#endif  // !_MSC_VER

stRetFirstRechargeReward::stRetFirstRechargeReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRetFirstRechargeReward::InitAsDefaultInstance() {
}

stRetFirstRechargeReward::stRetFirstRechargeReward(const stRetFirstRechargeReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRetFirstRechargeReward::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRetFirstRechargeReward::~stRetFirstRechargeReward() {
  SharedDtor();
}

void stRetFirstRechargeReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRetFirstRechargeReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRetFirstRechargeReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetFirstRechargeReward_descriptor_;
}

const stRetFirstRechargeReward& stRetFirstRechargeReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stRetFirstRechargeReward* stRetFirstRechargeReward::default_instance_ = NULL;

stRetFirstRechargeReward* stRetFirstRechargeReward::New() const {
  return new stRetFirstRechargeReward;
}

void stRetFirstRechargeReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRetFirstRechargeReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Role.stRetFirstRechargeReward.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Role::stRetFirstRechargeReward_eResult_IsValid(value)) {
            set_result(static_cast< ::Role::stRetFirstRechargeReward_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRetFirstRechargeReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Role.stRetFirstRechargeReward.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRetFirstRechargeReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Role.stRetFirstRechargeReward.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRetFirstRechargeReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Role.stRetFirstRechargeReward.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRetFirstRechargeReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRetFirstRechargeReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRetFirstRechargeReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRetFirstRechargeReward::MergeFrom(const stRetFirstRechargeReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRetFirstRechargeReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRetFirstRechargeReward::CopyFrom(const stRetFirstRechargeReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRetFirstRechargeReward::IsInitialized() const {

  return true;
}

void stRetFirstRechargeReward::Swap(stRetFirstRechargeReward* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRetFirstRechargeReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRetFirstRechargeReward_descriptor_;
  metadata.reflection = stRetFirstRechargeReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stSynMobaItem::kRoleNameFieldNumber;
const int stSynMobaItem::kLevelFieldNumber;
const int stSynMobaItem::kBattlePowerFieldNumber;
const int stSynMobaItem::kAddHonourFieldNumber;
const int stSynMobaItem::kKillNumFieldNumber;
const int stSynMobaItem::kBeKillNumFieldNumber;
const int stSynMobaItem::kCharidFieldNumber;
#endif  // !_MSC_VER

stSynMobaItem::stSynMobaItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSynMobaItem::InitAsDefaultInstance() {
}

stSynMobaItem::stSynMobaItem(const stSynMobaItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSynMobaItem::SharedCtor() {
  _cached_size_ = 0;
  rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0u;
  battlepower_ = 0u;
  addhonour_ = 0u;
  killnum_ = 0u;
  bekillnum_ = 0u;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSynMobaItem::~stSynMobaItem() {
  SharedDtor();
}

void stSynMobaItem::SharedDtor() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  if (this != default_instance_) {
  }
}

void stSynMobaItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSynMobaItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynMobaItem_descriptor_;
}

const stSynMobaItem& stSynMobaItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stSynMobaItem* stSynMobaItem::default_instance_ = NULL;

stSynMobaItem* stSynMobaItem::New() const {
  return new stSynMobaItem;
}

void stSynMobaItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_rolename()) {
      if (rolename_ != &::google::protobuf::internal::kEmptyString) {
        rolename_->clear();
      }
    }
    level_ = 0u;
    battlepower_ = 0u;
    addhonour_ = 0u;
    killnum_ = 0u;
    bekillnum_ = 0u;
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSynMobaItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string roleName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rolename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rolename().data(), this->rolename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // optional uint32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_battlePower;
        break;
      }

      // optional uint32 battlePower = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battlePower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battlepower_)));
          set_has_battlepower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_addHonour;
        break;
      }

      // optional uint32 addHonour = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addHonour:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &addhonour_)));
          set_has_addhonour();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_killNum;
        break;
      }

      // optional uint32 killNum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_killNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &killnum_)));
          set_has_killnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_beKillNum;
        break;
      }

      // optional uint32 beKillNum = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_beKillNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bekillnum_)));
          set_has_bekillnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_charid;
        break;
      }

      // optional uint32 charid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSynMobaItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string roleName = 1;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->rolename(), output);
  }

  // optional uint32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }

  // optional uint32 battlePower = 3;
  if (has_battlepower()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->battlepower(), output);
  }

  // optional uint32 addHonour = 4;
  if (has_addhonour()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->addhonour(), output);
  }

  // optional uint32 killNum = 5;
  if (has_killnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->killnum(), output);
  }

  // optional uint32 beKillNum = 6;
  if (has_bekillnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->bekillnum(), output);
  }

  // optional uint32 charid = 7;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSynMobaItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string roleName = 1;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->rolename(), target);
  }

  // optional uint32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }

  // optional uint32 battlePower = 3;
  if (has_battlepower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->battlepower(), target);
  }

  // optional uint32 addHonour = 4;
  if (has_addhonour()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->addhonour(), target);
  }

  // optional uint32 killNum = 5;
  if (has_killnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->killnum(), target);
  }

  // optional uint32 beKillNum = 6;
  if (has_bekillnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->bekillnum(), target);
  }

  // optional uint32 charid = 7;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSynMobaItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string roleName = 1;
    if (has_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rolename());
    }

    // optional uint32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 battlePower = 3;
    if (has_battlepower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battlepower());
    }

    // optional uint32 addHonour = 4;
    if (has_addhonour()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->addhonour());
    }

    // optional uint32 killNum = 5;
    if (has_killnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->killnum());
    }

    // optional uint32 beKillNum = 6;
    if (has_bekillnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bekillnum());
    }

    // optional uint32 charid = 7;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSynMobaItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSynMobaItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSynMobaItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSynMobaItem::MergeFrom(const stSynMobaItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rolename()) {
      set_rolename(from.rolename());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_battlepower()) {
      set_battlepower(from.battlepower());
    }
    if (from.has_addhonour()) {
      set_addhonour(from.addhonour());
    }
    if (from.has_killnum()) {
      set_killnum(from.killnum());
    }
    if (from.has_bekillnum()) {
      set_bekillnum(from.bekillnum());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSynMobaItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSynMobaItem::CopyFrom(const stSynMobaItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSynMobaItem::IsInitialized() const {

  return true;
}

void stSynMobaItem::Swap(stSynMobaItem* other) {
  if (other != this) {
    std::swap(rolename_, other->rolename_);
    std::swap(level_, other->level_);
    std::swap(battlepower_, other->battlepower_);
    std::swap(addhonour_, other->addhonour_);
    std::swap(killnum_, other->killnum_);
    std::swap(bekillnum_, other->bekillnum_);
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSynMobaItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSynMobaItem_descriptor_;
  metadata.reflection = stSynMobaItem_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stMobaPKResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stMobaPKResult_ProtoModID_descriptor_;
}
bool stMobaPKResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stMobaPKResult_ProtoModID stMobaPKResult::ModID;
const stMobaPKResult_ProtoModID stMobaPKResult::ProtoModID_MIN;
const stMobaPKResult_ProtoModID stMobaPKResult::ProtoModID_MAX;
const int stMobaPKResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stMobaPKResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stMobaPKResult_ProtoFunID_descriptor_;
}
bool stMobaPKResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 120:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stMobaPKResult_ProtoFunID stMobaPKResult::FunID;
const stMobaPKResult_ProtoFunID stMobaPKResult::ProtoFunID_MIN;
const stMobaPKResult_ProtoFunID stMobaPKResult::ProtoFunID_MAX;
const int stMobaPKResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stMobaPKResult::kSideAFieldNumber;
const int stMobaPKResult::kSideBFieldNumber;
#endif  // !_MSC_VER

stMobaPKResult::stMobaPKResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stMobaPKResult::InitAsDefaultInstance() {
}

stMobaPKResult::stMobaPKResult(const stMobaPKResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stMobaPKResult::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stMobaPKResult::~stMobaPKResult() {
  SharedDtor();
}

void stMobaPKResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stMobaPKResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stMobaPKResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stMobaPKResult_descriptor_;
}

const stMobaPKResult& stMobaPKResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stMobaPKResult* stMobaPKResult::default_instance_ = NULL;

stMobaPKResult* stMobaPKResult::New() const {
  return new stMobaPKResult;
}

void stMobaPKResult::Clear() {
  sidea_.Clear();
  sideb_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stMobaPKResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Role.stSynMobaItem sideA = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sideA:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sidea()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_sideA;
        if (input->ExpectTag(18)) goto parse_sideB;
        break;
      }

      // repeated .Role.stSynMobaItem sideB = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sideB:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sideb()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sideB;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stMobaPKResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Role.stSynMobaItem sideA = 1;
  for (int i = 0; i < this->sidea_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sidea(i), output);
  }

  // repeated .Role.stSynMobaItem sideB = 2;
  for (int i = 0; i < this->sideb_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->sideb(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stMobaPKResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Role.stSynMobaItem sideA = 1;
  for (int i = 0; i < this->sidea_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->sidea(i), target);
  }

  // repeated .Role.stSynMobaItem sideB = 2;
  for (int i = 0; i < this->sideb_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->sideb(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stMobaPKResult::ByteSize() const {
  int total_size = 0;

  // repeated .Role.stSynMobaItem sideA = 1;
  total_size += 1 * this->sidea_size();
  for (int i = 0; i < this->sidea_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sidea(i));
  }

  // repeated .Role.stSynMobaItem sideB = 2;
  total_size += 1 * this->sideb_size();
  for (int i = 0; i < this->sideb_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sideb(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stMobaPKResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stMobaPKResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stMobaPKResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stMobaPKResult::MergeFrom(const stMobaPKResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  sidea_.MergeFrom(from.sidea_);
  sideb_.MergeFrom(from.sideb_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stMobaPKResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stMobaPKResult::CopyFrom(const stMobaPKResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stMobaPKResult::IsInitialized() const {

  return true;
}

void stMobaPKResult::Swap(stMobaPKResult* other) {
  if (other != this) {
    sidea_.Swap(&other->sidea_);
    sideb_.Swap(&other->sideb_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stMobaPKResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stMobaPKResult_descriptor_;
  metadata.reflection = stMobaPKResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stSubNewBieGuideID_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSubNewBieGuideID_ProtoModID_descriptor_;
}
bool stSubNewBieGuideID_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSubNewBieGuideID_ProtoModID stSubNewBieGuideID::ModID;
const stSubNewBieGuideID_ProtoModID stSubNewBieGuideID::ProtoModID_MIN;
const stSubNewBieGuideID_ProtoModID stSubNewBieGuideID::ProtoModID_MAX;
const int stSubNewBieGuideID::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSubNewBieGuideID_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSubNewBieGuideID_ProtoFunID_descriptor_;
}
bool stSubNewBieGuideID_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 121:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSubNewBieGuideID_ProtoFunID stSubNewBieGuideID::FunID;
const stSubNewBieGuideID_ProtoFunID stSubNewBieGuideID::ProtoFunID_MIN;
const stSubNewBieGuideID_ProtoFunID stSubNewBieGuideID::ProtoFunID_MAX;
const int stSubNewBieGuideID::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stSubNewBieGuideID::kIdFieldNumber;
#endif  // !_MSC_VER

stSubNewBieGuideID::stSubNewBieGuideID()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSubNewBieGuideID::InitAsDefaultInstance() {
}

stSubNewBieGuideID::stSubNewBieGuideID(const stSubNewBieGuideID& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSubNewBieGuideID::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSubNewBieGuideID::~stSubNewBieGuideID() {
  SharedDtor();
}

void stSubNewBieGuideID::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stSubNewBieGuideID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSubNewBieGuideID::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSubNewBieGuideID_descriptor_;
}

const stSubNewBieGuideID& stSubNewBieGuideID::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stSubNewBieGuideID* stSubNewBieGuideID::default_instance_ = NULL;

stSubNewBieGuideID* stSubNewBieGuideID::New() const {
  return new stSubNewBieGuideID;
}

void stSubNewBieGuideID::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSubNewBieGuideID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSubNewBieGuideID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSubNewBieGuideID::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSubNewBieGuideID::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSubNewBieGuideID::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSubNewBieGuideID* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSubNewBieGuideID*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSubNewBieGuideID::MergeFrom(const stSubNewBieGuideID& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSubNewBieGuideID::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSubNewBieGuideID::CopyFrom(const stSubNewBieGuideID& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSubNewBieGuideID::IsInitialized() const {

  return true;
}

void stSubNewBieGuideID::Swap(stSubNewBieGuideID* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSubNewBieGuideID::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSubNewBieGuideID_descriptor_;
  metadata.reflection = stSubNewBieGuideID_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stResetTeamCopyMapNum_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stResetTeamCopyMapNum_ProtoModID_descriptor_;
}
bool stResetTeamCopyMapNum_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stResetTeamCopyMapNum_ProtoModID stResetTeamCopyMapNum::ModID;
const stResetTeamCopyMapNum_ProtoModID stResetTeamCopyMapNum::ProtoModID_MIN;
const stResetTeamCopyMapNum_ProtoModID stResetTeamCopyMapNum::ProtoModID_MAX;
const int stResetTeamCopyMapNum::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stResetTeamCopyMapNum_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stResetTeamCopyMapNum_ProtoFunID_descriptor_;
}
bool stResetTeamCopyMapNum_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 122:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stResetTeamCopyMapNum_ProtoFunID stResetTeamCopyMapNum::FunID;
const stResetTeamCopyMapNum_ProtoFunID stResetTeamCopyMapNum::ProtoFunID_MIN;
const stResetTeamCopyMapNum_ProtoFunID stResetTeamCopyMapNum::ProtoFunID_MAX;
const int stResetTeamCopyMapNum::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stResetTeamCopyMapNum::kCharIDFieldNumber;
#endif  // !_MSC_VER

stResetTeamCopyMapNum::stResetTeamCopyMapNum()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stResetTeamCopyMapNum::InitAsDefaultInstance() {
}

stResetTeamCopyMapNum::stResetTeamCopyMapNum(const stResetTeamCopyMapNum& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stResetTeamCopyMapNum::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stResetTeamCopyMapNum::~stResetTeamCopyMapNum() {
  SharedDtor();
}

void stResetTeamCopyMapNum::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stResetTeamCopyMapNum::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stResetTeamCopyMapNum::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stResetTeamCopyMapNum_descriptor_;
}

const stResetTeamCopyMapNum& stResetTeamCopyMapNum::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stResetTeamCopyMapNum* stResetTeamCopyMapNum::default_instance_ = NULL;

stResetTeamCopyMapNum* stResetTeamCopyMapNum::New() const {
  return new stResetTeamCopyMapNum;
}

void stResetTeamCopyMapNum::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stResetTeamCopyMapNum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stResetTeamCopyMapNum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stResetTeamCopyMapNum::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stResetTeamCopyMapNum::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stResetTeamCopyMapNum::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stResetTeamCopyMapNum* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stResetTeamCopyMapNum*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stResetTeamCopyMapNum::MergeFrom(const stResetTeamCopyMapNum& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stResetTeamCopyMapNum::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stResetTeamCopyMapNum::CopyFrom(const stResetTeamCopyMapNum& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stResetTeamCopyMapNum::IsInitialized() const {

  return true;
}

void stResetTeamCopyMapNum::Swap(stResetTeamCopyMapNum* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stResetTeamCopyMapNum::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stResetTeamCopyMapNum_descriptor_;
  metadata.reflection = stResetTeamCopyMapNum_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stResetTeampCopyMapNumResult_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stResetTeampCopyMapNumResult_eResult_descriptor_;
}
bool stResetTeampCopyMapNumResult_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stResetTeampCopyMapNumResult_eResult stResetTeampCopyMapNumResult::eReset_Time_Use_Out;
const stResetTeampCopyMapNumResult_eResult stResetTeampCopyMapNumResult::eDiamond_Not_Enough;
const stResetTeampCopyMapNumResult_eResult stResetTeampCopyMapNumResult::eSuccess;
const stResetTeampCopyMapNumResult_eResult stResetTeampCopyMapNumResult::eResult_MIN;
const stResetTeampCopyMapNumResult_eResult stResetTeampCopyMapNumResult::eResult_MAX;
const int stResetTeampCopyMapNumResult::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stResetTeampCopyMapNumResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stResetTeampCopyMapNumResult_ProtoModID_descriptor_;
}
bool stResetTeampCopyMapNumResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stResetTeampCopyMapNumResult_ProtoModID stResetTeampCopyMapNumResult::ModID;
const stResetTeampCopyMapNumResult_ProtoModID stResetTeampCopyMapNumResult::ProtoModID_MIN;
const stResetTeampCopyMapNumResult_ProtoModID stResetTeampCopyMapNumResult::ProtoModID_MAX;
const int stResetTeampCopyMapNumResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stResetTeampCopyMapNumResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stResetTeampCopyMapNumResult_ProtoFunID_descriptor_;
}
bool stResetTeampCopyMapNumResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 123:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stResetTeampCopyMapNumResult_ProtoFunID stResetTeampCopyMapNumResult::FunID;
const stResetTeampCopyMapNumResult_ProtoFunID stResetTeampCopyMapNumResult::ProtoFunID_MIN;
const stResetTeampCopyMapNumResult_ProtoFunID stResetTeampCopyMapNumResult::ProtoFunID_MAX;
const int stResetTeampCopyMapNumResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stResetTeampCopyMapNumResult::kResultFieldNumber;
#endif  // !_MSC_VER

stResetTeampCopyMapNumResult::stResetTeampCopyMapNumResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stResetTeampCopyMapNumResult::InitAsDefaultInstance() {
}

stResetTeampCopyMapNumResult::stResetTeampCopyMapNumResult(const stResetTeampCopyMapNumResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stResetTeampCopyMapNumResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stResetTeampCopyMapNumResult::~stResetTeampCopyMapNumResult() {
  SharedDtor();
}

void stResetTeampCopyMapNumResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stResetTeampCopyMapNumResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stResetTeampCopyMapNumResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stResetTeampCopyMapNumResult_descriptor_;
}

const stResetTeampCopyMapNumResult& stResetTeampCopyMapNumResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stResetTeampCopyMapNumResult* stResetTeampCopyMapNumResult::default_instance_ = NULL;

stResetTeampCopyMapNumResult* stResetTeampCopyMapNumResult::New() const {
  return new stResetTeampCopyMapNumResult;
}

void stResetTeampCopyMapNumResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stResetTeampCopyMapNumResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Role.stResetTeampCopyMapNumResult.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Role::stResetTeampCopyMapNumResult_eResult_IsValid(value)) {
            set_result(static_cast< ::Role::stResetTeampCopyMapNumResult_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stResetTeampCopyMapNumResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Role.stResetTeampCopyMapNumResult.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stResetTeampCopyMapNumResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Role.stResetTeampCopyMapNumResult.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stResetTeampCopyMapNumResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Role.stResetTeampCopyMapNumResult.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stResetTeampCopyMapNumResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stResetTeampCopyMapNumResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stResetTeampCopyMapNumResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stResetTeampCopyMapNumResult::MergeFrom(const stResetTeampCopyMapNumResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stResetTeampCopyMapNumResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stResetTeampCopyMapNumResult::CopyFrom(const stResetTeampCopyMapNumResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stResetTeampCopyMapNumResult::IsInitialized() const {

  return true;
}

void stResetTeampCopyMapNumResult::Swap(stResetTeampCopyMapNumResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stResetTeampCopyMapNumResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stResetTeampCopyMapNumResult_descriptor_;
  metadata.reflection = stResetTeampCopyMapNumResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stResetRealTimeCopyMapNum_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stResetRealTimeCopyMapNum_ProtoModID_descriptor_;
}
bool stResetRealTimeCopyMapNum_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stResetRealTimeCopyMapNum_ProtoModID stResetRealTimeCopyMapNum::ModID;
const stResetRealTimeCopyMapNum_ProtoModID stResetRealTimeCopyMapNum::ProtoModID_MIN;
const stResetRealTimeCopyMapNum_ProtoModID stResetRealTimeCopyMapNum::ProtoModID_MAX;
const int stResetRealTimeCopyMapNum::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stResetRealTimeCopyMapNum_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stResetRealTimeCopyMapNum_ProtoFunID_descriptor_;
}
bool stResetRealTimeCopyMapNum_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 124:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stResetRealTimeCopyMapNum_ProtoFunID stResetRealTimeCopyMapNum::FunID;
const stResetRealTimeCopyMapNum_ProtoFunID stResetRealTimeCopyMapNum::ProtoFunID_MIN;
const stResetRealTimeCopyMapNum_ProtoFunID stResetRealTimeCopyMapNum::ProtoFunID_MAX;
const int stResetRealTimeCopyMapNum::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stResetRealTimeCopyMapNum::kCharIDFieldNumber;
#endif  // !_MSC_VER

stResetRealTimeCopyMapNum::stResetRealTimeCopyMapNum()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stResetRealTimeCopyMapNum::InitAsDefaultInstance() {
}

stResetRealTimeCopyMapNum::stResetRealTimeCopyMapNum(const stResetRealTimeCopyMapNum& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stResetRealTimeCopyMapNum::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stResetRealTimeCopyMapNum::~stResetRealTimeCopyMapNum() {
  SharedDtor();
}

void stResetRealTimeCopyMapNum::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stResetRealTimeCopyMapNum::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stResetRealTimeCopyMapNum::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stResetRealTimeCopyMapNum_descriptor_;
}

const stResetRealTimeCopyMapNum& stResetRealTimeCopyMapNum::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stResetRealTimeCopyMapNum* stResetRealTimeCopyMapNum::default_instance_ = NULL;

stResetRealTimeCopyMapNum* stResetRealTimeCopyMapNum::New() const {
  return new stResetRealTimeCopyMapNum;
}

void stResetRealTimeCopyMapNum::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stResetRealTimeCopyMapNum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stResetRealTimeCopyMapNum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stResetRealTimeCopyMapNum::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stResetRealTimeCopyMapNum::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stResetRealTimeCopyMapNum::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stResetRealTimeCopyMapNum* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stResetRealTimeCopyMapNum*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stResetRealTimeCopyMapNum::MergeFrom(const stResetRealTimeCopyMapNum& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stResetRealTimeCopyMapNum::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stResetRealTimeCopyMapNum::CopyFrom(const stResetRealTimeCopyMapNum& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stResetRealTimeCopyMapNum::IsInitialized() const {

  return true;
}

void stResetRealTimeCopyMapNum::Swap(stResetRealTimeCopyMapNum* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stResetRealTimeCopyMapNum::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stResetRealTimeCopyMapNum_descriptor_;
  metadata.reflection = stResetRealTimeCopyMapNum_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stResetRealTimeCopymapNumResult_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stResetRealTimeCopymapNumResult_eResult_descriptor_;
}
bool stResetRealTimeCopymapNumResult_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stResetRealTimeCopymapNumResult_eResult stResetRealTimeCopymapNumResult::eReset_Time_Use_Out;
const stResetRealTimeCopymapNumResult_eResult stResetRealTimeCopymapNumResult::eDiamond_Not_Enough;
const stResetRealTimeCopymapNumResult_eResult stResetRealTimeCopymapNumResult::eSuccess;
const stResetRealTimeCopymapNumResult_eResult stResetRealTimeCopymapNumResult::eResult_MIN;
const stResetRealTimeCopymapNumResult_eResult stResetRealTimeCopymapNumResult::eResult_MAX;
const int stResetRealTimeCopymapNumResult::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stResetRealTimeCopymapNumResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stResetRealTimeCopymapNumResult_ProtoModID_descriptor_;
}
bool stResetRealTimeCopymapNumResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stResetRealTimeCopymapNumResult_ProtoModID stResetRealTimeCopymapNumResult::ModID;
const stResetRealTimeCopymapNumResult_ProtoModID stResetRealTimeCopymapNumResult::ProtoModID_MIN;
const stResetRealTimeCopymapNumResult_ProtoModID stResetRealTimeCopymapNumResult::ProtoModID_MAX;
const int stResetRealTimeCopymapNumResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stResetRealTimeCopymapNumResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stResetRealTimeCopymapNumResult_ProtoFunID_descriptor_;
}
bool stResetRealTimeCopymapNumResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 125:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stResetRealTimeCopymapNumResult_ProtoFunID stResetRealTimeCopymapNumResult::FunID;
const stResetRealTimeCopymapNumResult_ProtoFunID stResetRealTimeCopymapNumResult::ProtoFunID_MIN;
const stResetRealTimeCopymapNumResult_ProtoFunID stResetRealTimeCopymapNumResult::ProtoFunID_MAX;
const int stResetRealTimeCopymapNumResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stResetRealTimeCopymapNumResult::kResultFieldNumber;
#endif  // !_MSC_VER

stResetRealTimeCopymapNumResult::stResetRealTimeCopymapNumResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stResetRealTimeCopymapNumResult::InitAsDefaultInstance() {
}

stResetRealTimeCopymapNumResult::stResetRealTimeCopymapNumResult(const stResetRealTimeCopymapNumResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stResetRealTimeCopymapNumResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stResetRealTimeCopymapNumResult::~stResetRealTimeCopymapNumResult() {
  SharedDtor();
}

void stResetRealTimeCopymapNumResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stResetRealTimeCopymapNumResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stResetRealTimeCopymapNumResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stResetRealTimeCopymapNumResult_descriptor_;
}

const stResetRealTimeCopymapNumResult& stResetRealTimeCopymapNumResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stResetRealTimeCopymapNumResult* stResetRealTimeCopymapNumResult::default_instance_ = NULL;

stResetRealTimeCopymapNumResult* stResetRealTimeCopymapNumResult::New() const {
  return new stResetRealTimeCopymapNumResult;
}

void stResetRealTimeCopymapNumResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stResetRealTimeCopymapNumResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Role.stResetRealTimeCopymapNumResult.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Role::stResetRealTimeCopymapNumResult_eResult_IsValid(value)) {
            set_result(static_cast< ::Role::stResetRealTimeCopymapNumResult_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stResetRealTimeCopymapNumResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Role.stResetRealTimeCopymapNumResult.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stResetRealTimeCopymapNumResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Role.stResetRealTimeCopymapNumResult.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stResetRealTimeCopymapNumResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Role.stResetRealTimeCopymapNumResult.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stResetRealTimeCopymapNumResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stResetRealTimeCopymapNumResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stResetRealTimeCopymapNumResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stResetRealTimeCopymapNumResult::MergeFrom(const stResetRealTimeCopymapNumResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stResetRealTimeCopymapNumResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stResetRealTimeCopymapNumResult::CopyFrom(const stResetRealTimeCopymapNumResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stResetRealTimeCopymapNumResult::IsInitialized() const {

  return true;
}

void stResetRealTimeCopymapNumResult::Swap(stResetRealTimeCopymapNumResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stResetRealTimeCopymapNumResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stResetRealTimeCopymapNumResult_descriptor_;
  metadata.reflection = stResetRealTimeCopymapNumResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stBuyRMBItemSuccess_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stBuyRMBItemSuccess_ProtoModID_descriptor_;
}
bool stBuyRMBItemSuccess_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stBuyRMBItemSuccess_ProtoModID stBuyRMBItemSuccess::ModID;
const stBuyRMBItemSuccess_ProtoModID stBuyRMBItemSuccess::ProtoModID_MIN;
const stBuyRMBItemSuccess_ProtoModID stBuyRMBItemSuccess::ProtoModID_MAX;
const int stBuyRMBItemSuccess::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stBuyRMBItemSuccess_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stBuyRMBItemSuccess_ProtoFunID_descriptor_;
}
bool stBuyRMBItemSuccess_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 126:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stBuyRMBItemSuccess_ProtoFunID stBuyRMBItemSuccess::FunID;
const stBuyRMBItemSuccess_ProtoFunID stBuyRMBItemSuccess::ProtoFunID_MIN;
const stBuyRMBItemSuccess_ProtoFunID stBuyRMBItemSuccess::ProtoFunID_MAX;
const int stBuyRMBItemSuccess::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stBuyRMBItemSuccess::kItemInfoFieldNumber;
#endif  // !_MSC_VER

stBuyRMBItemSuccess::stBuyRMBItemSuccess()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stBuyRMBItemSuccess::InitAsDefaultInstance() {
  iteminfo_ = const_cast< ::Role::stSynRMPShopItem*>(&::Role::stSynRMPShopItem::default_instance());
}

stBuyRMBItemSuccess::stBuyRMBItemSuccess(const stBuyRMBItemSuccess& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stBuyRMBItemSuccess::SharedCtor() {
  _cached_size_ = 0;
  iteminfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stBuyRMBItemSuccess::~stBuyRMBItemSuccess() {
  SharedDtor();
}

void stBuyRMBItemSuccess::SharedDtor() {
  if (this != default_instance_) {
    delete iteminfo_;
  }
}

void stBuyRMBItemSuccess::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stBuyRMBItemSuccess::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stBuyRMBItemSuccess_descriptor_;
}

const stBuyRMBItemSuccess& stBuyRMBItemSuccess::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stBuyRMBItemSuccess* stBuyRMBItemSuccess::default_instance_ = NULL;

stBuyRMBItemSuccess* stBuyRMBItemSuccess::New() const {
  return new stBuyRMBItemSuccess;
}

void stBuyRMBItemSuccess::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_iteminfo()) {
      if (iteminfo_ != NULL) iteminfo_->::Role::stSynRMPShopItem::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stBuyRMBItemSuccess::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Role.stSynRMPShopItem itemInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_iteminfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stBuyRMBItemSuccess::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Role.stSynRMPShopItem itemInfo = 1;
  if (has_iteminfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->iteminfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stBuyRMBItemSuccess::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Role.stSynRMPShopItem itemInfo = 1;
  if (has_iteminfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->iteminfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stBuyRMBItemSuccess::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Role.stSynRMPShopItem itemInfo = 1;
    if (has_iteminfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->iteminfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stBuyRMBItemSuccess::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stBuyRMBItemSuccess* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stBuyRMBItemSuccess*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stBuyRMBItemSuccess::MergeFrom(const stBuyRMBItemSuccess& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iteminfo()) {
      mutable_iteminfo()->::Role::stSynRMPShopItem::MergeFrom(from.iteminfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stBuyRMBItemSuccess::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stBuyRMBItemSuccess::CopyFrom(const stBuyRMBItemSuccess& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stBuyRMBItemSuccess::IsInitialized() const {

  return true;
}

void stBuyRMBItemSuccess::Swap(stBuyRMBItemSuccess* other) {
  if (other != this) {
    std::swap(iteminfo_, other->iteminfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stBuyRMBItemSuccess::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stBuyRMBItemSuccess_descriptor_;
  metadata.reflection = stBuyRMBItemSuccess_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stOne2OnePVPFail_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stOne2OnePVPFail_ProtoModID_descriptor_;
}
bool stOne2OnePVPFail_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stOne2OnePVPFail_ProtoModID stOne2OnePVPFail::ModID;
const stOne2OnePVPFail_ProtoModID stOne2OnePVPFail::ProtoModID_MIN;
const stOne2OnePVPFail_ProtoModID stOne2OnePVPFail::ProtoModID_MAX;
const int stOne2OnePVPFail::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stOne2OnePVPFail_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stOne2OnePVPFail_ProtoFunID_descriptor_;
}
bool stOne2OnePVPFail_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 127:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stOne2OnePVPFail_ProtoFunID stOne2OnePVPFail::FunID;
const stOne2OnePVPFail_ProtoFunID stOne2OnePVPFail::ProtoFunID_MIN;
const stOne2OnePVPFail_ProtoFunID stOne2OnePVPFail::ProtoFunID_MAX;
const int stOne2OnePVPFail::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stOne2OnePVPFail::kLoserFieldNumber;
const int stOne2OnePVPFail::kPkWithFriendFieldNumber;
#endif  // !_MSC_VER

stOne2OnePVPFail::stOne2OnePVPFail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stOne2OnePVPFail::InitAsDefaultInstance() {
}

stOne2OnePVPFail::stOne2OnePVPFail(const stOne2OnePVPFail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stOne2OnePVPFail::SharedCtor() {
  _cached_size_ = 0;
  pkwithfriend_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stOne2OnePVPFail::~stOne2OnePVPFail() {
  SharedDtor();
}

void stOne2OnePVPFail::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stOne2OnePVPFail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stOne2OnePVPFail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stOne2OnePVPFail_descriptor_;
}

const stOne2OnePVPFail& stOne2OnePVPFail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stOne2OnePVPFail* stOne2OnePVPFail::default_instance_ = NULL;

stOne2OnePVPFail* stOne2OnePVPFail::New() const {
  return new stOne2OnePVPFail;
}

void stOne2OnePVPFail::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    pkwithfriend_ = false;
  }
  loser_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stOne2OnePVPFail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Role.stSynOne2OnePVPItem loser = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_loser:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_loser()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_loser;
        if (input->ExpectTag(16)) goto parse_pkWithFriend;
        break;
      }

      // optional bool pkWithFriend = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pkWithFriend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &pkwithfriend_)));
          set_has_pkwithfriend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stOne2OnePVPFail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Role.stSynOne2OnePVPItem loser = 1;
  for (int i = 0; i < this->loser_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->loser(i), output);
  }

  // optional bool pkWithFriend = 2;
  if (has_pkwithfriend()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->pkwithfriend(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stOne2OnePVPFail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Role.stSynOne2OnePVPItem loser = 1;
  for (int i = 0; i < this->loser_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->loser(i), target);
  }

  // optional bool pkWithFriend = 2;
  if (has_pkwithfriend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->pkwithfriend(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stOne2OnePVPFail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional bool pkWithFriend = 2;
    if (has_pkwithfriend()) {
      total_size += 1 + 1;
    }

  }
  // repeated .Role.stSynOne2OnePVPItem loser = 1;
  total_size += 1 * this->loser_size();
  for (int i = 0; i < this->loser_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->loser(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stOne2OnePVPFail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stOne2OnePVPFail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stOne2OnePVPFail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stOne2OnePVPFail::MergeFrom(const stOne2OnePVPFail& from) {
  GOOGLE_CHECK_NE(&from, this);
  loser_.MergeFrom(from.loser_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_pkwithfriend()) {
      set_pkwithfriend(from.pkwithfriend());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stOne2OnePVPFail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stOne2OnePVPFail::CopyFrom(const stOne2OnePVPFail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stOne2OnePVPFail::IsInitialized() const {

  return true;
}

void stOne2OnePVPFail::Swap(stOne2OnePVPFail* other) {
  if (other != this) {
    loser_.Swap(&other->loser_);
    std::swap(pkwithfriend_, other->pkwithfriend_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stOne2OnePVPFail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stOne2OnePVPFail_descriptor_;
  metadata.reflection = stOne2OnePVPFail_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRealTimeFail_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRealTimeFail_ProtoModID_descriptor_;
}
bool stRealTimeFail_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRealTimeFail_ProtoModID stRealTimeFail::ModID;
const stRealTimeFail_ProtoModID stRealTimeFail::ProtoModID_MIN;
const stRealTimeFail_ProtoModID stRealTimeFail::ProtoModID_MAX;
const int stRealTimeFail::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRealTimeFail_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRealTimeFail_ProtoFunID_descriptor_;
}
bool stRealTimeFail_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 128:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRealTimeFail_ProtoFunID stRealTimeFail::FunID;
const stRealTimeFail_ProtoFunID stRealTimeFail::ProtoFunID_MIN;
const stRealTimeFail_ProtoFunID stRealTimeFail::ProtoFunID_MAX;
const int stRealTimeFail::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRealTimeFail::kSideAFieldNumber;
const int stRealTimeFail::kSideBFieldNumber;
#endif  // !_MSC_VER

stRealTimeFail::stRealTimeFail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRealTimeFail::InitAsDefaultInstance() {
}

stRealTimeFail::stRealTimeFail(const stRealTimeFail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRealTimeFail::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRealTimeFail::~stRealTimeFail() {
  SharedDtor();
}

void stRealTimeFail::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRealTimeFail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRealTimeFail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRealTimeFail_descriptor_;
}

const stRealTimeFail& stRealTimeFail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stRealTimeFail* stRealTimeFail::default_instance_ = NULL;

stRealTimeFail* stRealTimeFail::New() const {
  return new stRealTimeFail;
}

void stRealTimeFail::Clear() {
  sidea_.Clear();
  sideb_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRealTimeFail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Role.stSynRealTimeItem sideA = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sideA:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sidea()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_sideA;
        if (input->ExpectTag(18)) goto parse_sideB;
        break;
      }

      // repeated .Role.stSynRealTimeItem sideB = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sideB:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sideb()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sideB;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRealTimeFail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Role.stSynRealTimeItem sideA = 1;
  for (int i = 0; i < this->sidea_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sidea(i), output);
  }

  // repeated .Role.stSynRealTimeItem sideB = 2;
  for (int i = 0; i < this->sideb_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->sideb(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRealTimeFail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Role.stSynRealTimeItem sideA = 1;
  for (int i = 0; i < this->sidea_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->sidea(i), target);
  }

  // repeated .Role.stSynRealTimeItem sideB = 2;
  for (int i = 0; i < this->sideb_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->sideb(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRealTimeFail::ByteSize() const {
  int total_size = 0;

  // repeated .Role.stSynRealTimeItem sideA = 1;
  total_size += 1 * this->sidea_size();
  for (int i = 0; i < this->sidea_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sidea(i));
  }

  // repeated .Role.stSynRealTimeItem sideB = 2;
  total_size += 1 * this->sideb_size();
  for (int i = 0; i < this->sideb_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sideb(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRealTimeFail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRealTimeFail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRealTimeFail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRealTimeFail::MergeFrom(const stRealTimeFail& from) {
  GOOGLE_CHECK_NE(&from, this);
  sidea_.MergeFrom(from.sidea_);
  sideb_.MergeFrom(from.sideb_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRealTimeFail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRealTimeFail::CopyFrom(const stRealTimeFail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRealTimeFail::IsInitialized() const {

  return true;
}

void stRealTimeFail::Swap(stRealTimeFail* other) {
  if (other != this) {
    sidea_.Swap(&other->sidea_);
    sideb_.Swap(&other->sideb_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRealTimeFail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRealTimeFail_descriptor_;
  metadata.reflection = stRealTimeFail_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stDataInitFinish_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stDataInitFinish_ProtoModID_descriptor_;
}
bool stDataInitFinish_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stDataInitFinish_ProtoModID stDataInitFinish::ModID;
const stDataInitFinish_ProtoModID stDataInitFinish::ProtoModID_MIN;
const stDataInitFinish_ProtoModID stDataInitFinish::ProtoModID_MAX;
const int stDataInitFinish::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stDataInitFinish_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stDataInitFinish_ProtoFunID_descriptor_;
}
bool stDataInitFinish_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 129:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stDataInitFinish_ProtoFunID stDataInitFinish::FunID;
const stDataInitFinish_ProtoFunID stDataInitFinish::ProtoFunID_MIN;
const stDataInitFinish_ProtoFunID stDataInitFinish::ProtoFunID_MAX;
const int stDataInitFinish::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stDataInitFinish::kResultFieldNumber;
const int stDataInitFinish::kIPFieldNumber;
#endif  // !_MSC_VER

stDataInitFinish::stDataInitFinish()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stDataInitFinish::InitAsDefaultInstance() {
}

stDataInitFinish::stDataInitFinish(const stDataInitFinish& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stDataInitFinish::SharedCtor() {
  _cached_size_ = 0;
  result_ = false;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stDataInitFinish::~stDataInitFinish() {
  SharedDtor();
}

void stDataInitFinish::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void stDataInitFinish::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stDataInitFinish::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stDataInitFinish_descriptor_;
}

const stDataInitFinish& stDataInitFinish::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stDataInitFinish* stDataInitFinish::default_instance_ = NULL;

stDataInitFinish* stDataInitFinish::New() const {
  return new stDataInitFinish;
}

void stDataInitFinish::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = false;
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stDataInitFinish::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_IP;
        break;
      }

      // optional string IP = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_IP:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stDataInitFinish::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->result(), output);
  }

  // optional string IP = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ip(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stDataInitFinish::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->result(), target);
  }

  // optional string IP = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ip(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stDataInitFinish::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool result = 1;
    if (has_result()) {
      total_size += 1 + 1;
    }

    // optional string IP = 2;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stDataInitFinish::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stDataInitFinish* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stDataInitFinish*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stDataInitFinish::MergeFrom(const stDataInitFinish& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stDataInitFinish::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stDataInitFinish::CopyFrom(const stDataInitFinish& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stDataInitFinish::IsInitialized() const {

  return true;
}

void stDataInitFinish::Swap(stDataInitFinish* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(ip_, other->ip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stDataInitFinish::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stDataInitFinish_descriptor_;
  metadata.reflection = stDataInitFinish_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqFirst10RechargeReward_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqFirst10RechargeReward_ProtoModID_descriptor_;
}
bool stReqFirst10RechargeReward_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqFirst10RechargeReward_ProtoModID stReqFirst10RechargeReward::ModID;
const stReqFirst10RechargeReward_ProtoModID stReqFirst10RechargeReward::ProtoModID_MIN;
const stReqFirst10RechargeReward_ProtoModID stReqFirst10RechargeReward::ProtoModID_MAX;
const int stReqFirst10RechargeReward::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqFirst10RechargeReward_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqFirst10RechargeReward_ProtoFunID_descriptor_;
}
bool stReqFirst10RechargeReward_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 130:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqFirst10RechargeReward_ProtoFunID stReqFirst10RechargeReward::FunID;
const stReqFirst10RechargeReward_ProtoFunID stReqFirst10RechargeReward::ProtoFunID_MIN;
const stReqFirst10RechargeReward_ProtoFunID stReqFirst10RechargeReward::ProtoFunID_MAX;
const int stReqFirst10RechargeReward::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqFirst10RechargeReward::kCharIDFieldNumber;
#endif  // !_MSC_VER

stReqFirst10RechargeReward::stReqFirst10RechargeReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqFirst10RechargeReward::InitAsDefaultInstance() {
}

stReqFirst10RechargeReward::stReqFirst10RechargeReward(const stReqFirst10RechargeReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqFirst10RechargeReward::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqFirst10RechargeReward::~stReqFirst10RechargeReward() {
  SharedDtor();
}

void stReqFirst10RechargeReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqFirst10RechargeReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqFirst10RechargeReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqFirst10RechargeReward_descriptor_;
}

const stReqFirst10RechargeReward& stReqFirst10RechargeReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stReqFirst10RechargeReward* stReqFirst10RechargeReward::default_instance_ = NULL;

stReqFirst10RechargeReward* stReqFirst10RechargeReward::New() const {
  return new stReqFirst10RechargeReward;
}

void stReqFirst10RechargeReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqFirst10RechargeReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqFirst10RechargeReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqFirst10RechargeReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqFirst10RechargeReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqFirst10RechargeReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqFirst10RechargeReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqFirst10RechargeReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqFirst10RechargeReward::MergeFrom(const stReqFirst10RechargeReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqFirst10RechargeReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqFirst10RechargeReward::CopyFrom(const stReqFirst10RechargeReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqFirst10RechargeReward::IsInitialized() const {

  return true;
}

void stReqFirst10RechargeReward::Swap(stReqFirst10RechargeReward* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqFirst10RechargeReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqFirst10RechargeReward_descriptor_;
  metadata.reflection = stReqFirst10RechargeReward_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRetFirst10RechargeReward_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetFirst10RechargeReward_eResult_descriptor_;
}
bool stRetFirst10RechargeReward_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetFirst10RechargeReward_eResult stRetFirst10RechargeReward::eSuccess;
const stRetFirst10RechargeReward_eResult stRetFirst10RechargeReward::eHas_Not_Enough_Recharge;
const stRetFirst10RechargeReward_eResult stRetFirst10RechargeReward::eHas_Got_Reward;
const stRetFirst10RechargeReward_eResult stRetFirst10RechargeReward::eBag_Full;
const stRetFirst10RechargeReward_eResult stRetFirst10RechargeReward::eResult_MIN;
const stRetFirst10RechargeReward_eResult stRetFirst10RechargeReward::eResult_MAX;
const int stRetFirst10RechargeReward::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetFirst10RechargeReward_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetFirst10RechargeReward_ProtoModID_descriptor_;
}
bool stRetFirst10RechargeReward_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetFirst10RechargeReward_ProtoModID stRetFirst10RechargeReward::ModID;
const stRetFirst10RechargeReward_ProtoModID stRetFirst10RechargeReward::ProtoModID_MIN;
const stRetFirst10RechargeReward_ProtoModID stRetFirst10RechargeReward::ProtoModID_MAX;
const int stRetFirst10RechargeReward::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetFirst10RechargeReward_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetFirst10RechargeReward_ProtoFunID_descriptor_;
}
bool stRetFirst10RechargeReward_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 131:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetFirst10RechargeReward_ProtoFunID stRetFirst10RechargeReward::FunID;
const stRetFirst10RechargeReward_ProtoFunID stRetFirst10RechargeReward::ProtoFunID_MIN;
const stRetFirst10RechargeReward_ProtoFunID stRetFirst10RechargeReward::ProtoFunID_MAX;
const int stRetFirst10RechargeReward::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRetFirst10RechargeReward::kResultFieldNumber;
#endif  // !_MSC_VER

stRetFirst10RechargeReward::stRetFirst10RechargeReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRetFirst10RechargeReward::InitAsDefaultInstance() {
}

stRetFirst10RechargeReward::stRetFirst10RechargeReward(const stRetFirst10RechargeReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRetFirst10RechargeReward::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRetFirst10RechargeReward::~stRetFirst10RechargeReward() {
  SharedDtor();
}

void stRetFirst10RechargeReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRetFirst10RechargeReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRetFirst10RechargeReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetFirst10RechargeReward_descriptor_;
}

const stRetFirst10RechargeReward& stRetFirst10RechargeReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stRetFirst10RechargeReward* stRetFirst10RechargeReward::default_instance_ = NULL;

stRetFirst10RechargeReward* stRetFirst10RechargeReward::New() const {
  return new stRetFirst10RechargeReward;
}

void stRetFirst10RechargeReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRetFirst10RechargeReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Role.stRetFirst10RechargeReward.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Role::stRetFirst10RechargeReward_eResult_IsValid(value)) {
            set_result(static_cast< ::Role::stRetFirst10RechargeReward_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRetFirst10RechargeReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Role.stRetFirst10RechargeReward.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRetFirst10RechargeReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Role.stRetFirst10RechargeReward.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRetFirst10RechargeReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Role.stRetFirst10RechargeReward.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRetFirst10RechargeReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRetFirst10RechargeReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRetFirst10RechargeReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRetFirst10RechargeReward::MergeFrom(const stRetFirst10RechargeReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRetFirst10RechargeReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRetFirst10RechargeReward::CopyFrom(const stRetFirst10RechargeReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRetFirst10RechargeReward::IsInitialized() const {

  return true;
}

void stRetFirst10RechargeReward::Swap(stRetFirst10RechargeReward* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRetFirst10RechargeReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRetFirst10RechargeReward_descriptor_;
  metadata.reflection = stRetFirst10RechargeReward_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stChatInWorldCoolDown_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stChatInWorldCoolDown_ProtoModID_descriptor_;
}
bool stChatInWorldCoolDown_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stChatInWorldCoolDown_ProtoModID stChatInWorldCoolDown::ModID;
const stChatInWorldCoolDown_ProtoModID stChatInWorldCoolDown::ProtoModID_MIN;
const stChatInWorldCoolDown_ProtoModID stChatInWorldCoolDown::ProtoModID_MAX;
const int stChatInWorldCoolDown::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stChatInWorldCoolDown_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stChatInWorldCoolDown_ProtoFunID_descriptor_;
}
bool stChatInWorldCoolDown_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 132:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stChatInWorldCoolDown_ProtoFunID stChatInWorldCoolDown::FunID;
const stChatInWorldCoolDown_ProtoFunID stChatInWorldCoolDown::ProtoFunID_MIN;
const stChatInWorldCoolDown_ProtoFunID stChatInWorldCoolDown::ProtoFunID_MAX;
const int stChatInWorldCoolDown::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stChatInWorldCoolDown::kRemainTimeFieldNumber;
#endif  // !_MSC_VER

stChatInWorldCoolDown::stChatInWorldCoolDown()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stChatInWorldCoolDown::InitAsDefaultInstance() {
}

stChatInWorldCoolDown::stChatInWorldCoolDown(const stChatInWorldCoolDown& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stChatInWorldCoolDown::SharedCtor() {
  _cached_size_ = 0;
  remaintime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stChatInWorldCoolDown::~stChatInWorldCoolDown() {
  SharedDtor();
}

void stChatInWorldCoolDown::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stChatInWorldCoolDown::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stChatInWorldCoolDown::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stChatInWorldCoolDown_descriptor_;
}

const stChatInWorldCoolDown& stChatInWorldCoolDown::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stChatInWorldCoolDown* stChatInWorldCoolDown::default_instance_ = NULL;

stChatInWorldCoolDown* stChatInWorldCoolDown::New() const {
  return new stChatInWorldCoolDown;
}

void stChatInWorldCoolDown::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    remaintime_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stChatInWorldCoolDown::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 remainTime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &remaintime_)));
          set_has_remaintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stChatInWorldCoolDown::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 remainTime = 1;
  if (has_remaintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->remaintime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stChatInWorldCoolDown::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 remainTime = 1;
  if (has_remaintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->remaintime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stChatInWorldCoolDown::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 remainTime = 1;
    if (has_remaintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->remaintime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stChatInWorldCoolDown::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stChatInWorldCoolDown* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stChatInWorldCoolDown*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stChatInWorldCoolDown::MergeFrom(const stChatInWorldCoolDown& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_remaintime()) {
      set_remaintime(from.remaintime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stChatInWorldCoolDown::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stChatInWorldCoolDown::CopyFrom(const stChatInWorldCoolDown& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stChatInWorldCoolDown::IsInitialized() const {

  return true;
}

void stChatInWorldCoolDown::Swap(stChatInWorldCoolDown* other) {
  if (other != this) {
    std::swap(remaintime_, other->remaintime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stChatInWorldCoolDown::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stChatInWorldCoolDown_descriptor_;
  metadata.reflection = stChatInWorldCoolDown_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stSynRoleCreateTime_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynRoleCreateTime_ProtoModID_descriptor_;
}
bool stSynRoleCreateTime_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynRoleCreateTime_ProtoModID stSynRoleCreateTime::ModID;
const stSynRoleCreateTime_ProtoModID stSynRoleCreateTime::ProtoModID_MIN;
const stSynRoleCreateTime_ProtoModID stSynRoleCreateTime::ProtoModID_MAX;
const int stSynRoleCreateTime::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSynRoleCreateTime_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynRoleCreateTime_ProtoFunID_descriptor_;
}
bool stSynRoleCreateTime_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 133:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynRoleCreateTime_ProtoFunID stSynRoleCreateTime::FunID;
const stSynRoleCreateTime_ProtoFunID stSynRoleCreateTime::ProtoFunID_MIN;
const stSynRoleCreateTime_ProtoFunID stSynRoleCreateTime::ProtoFunID_MAX;
const int stSynRoleCreateTime::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stSynRoleCreateTime::kCreateTimeFieldNumber;
#endif  // !_MSC_VER

stSynRoleCreateTime::stSynRoleCreateTime()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSynRoleCreateTime::InitAsDefaultInstance() {
}

stSynRoleCreateTime::stSynRoleCreateTime(const stSynRoleCreateTime& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSynRoleCreateTime::SharedCtor() {
  _cached_size_ = 0;
  createtime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSynRoleCreateTime::~stSynRoleCreateTime() {
  SharedDtor();
}

void stSynRoleCreateTime::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stSynRoleCreateTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSynRoleCreateTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynRoleCreateTime_descriptor_;
}

const stSynRoleCreateTime& stSynRoleCreateTime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stSynRoleCreateTime* stSynRoleCreateTime::default_instance_ = NULL;

stSynRoleCreateTime* stSynRoleCreateTime::New() const {
  return new stSynRoleCreateTime;
}

void stSynRoleCreateTime::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    createtime_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSynRoleCreateTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 createTime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSynRoleCreateTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 createTime = 1;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->createtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSynRoleCreateTime::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 createTime = 1;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->createtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSynRoleCreateTime::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 createTime = 1;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->createtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSynRoleCreateTime::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSynRoleCreateTime* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSynRoleCreateTime*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSynRoleCreateTime::MergeFrom(const stSynRoleCreateTime& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSynRoleCreateTime::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSynRoleCreateTime::CopyFrom(const stSynRoleCreateTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSynRoleCreateTime::IsInitialized() const {

  return true;
}

void stSynRoleCreateTime::Swap(stSynRoleCreateTime* other) {
  if (other != this) {
    std::swap(createtime_, other->createtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSynRoleCreateTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSynRoleCreateTime_descriptor_;
  metadata.reflection = stSynRoleCreateTime_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqChgEquipSkill_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqChgEquipSkill_ProtoModID_descriptor_;
}
bool stReqChgEquipSkill_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqChgEquipSkill_ProtoModID stReqChgEquipSkill::ModID;
const stReqChgEquipSkill_ProtoModID stReqChgEquipSkill::ProtoModID_MIN;
const stReqChgEquipSkill_ProtoModID stReqChgEquipSkill::ProtoModID_MAX;
const int stReqChgEquipSkill::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqChgEquipSkill_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqChgEquipSkill_ProtoFunID_descriptor_;
}
bool stReqChgEquipSkill_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 134:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqChgEquipSkill_ProtoFunID stReqChgEquipSkill::FunID;
const stReqChgEquipSkill_ProtoFunID stReqChgEquipSkill::ProtoFunID_MIN;
const stReqChgEquipSkill_ProtoFunID stReqChgEquipSkill::ProtoFunID_MAX;
const int stReqChgEquipSkill::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqChgEquipSkill::kSrcInstanceIDFieldNumber;
const int stReqChgEquipSkill::kDstInstanceIDFieldNumber;
const int stReqChgEquipSkill::kChgSoulItemInstanceIDFieldNumber;
#endif  // !_MSC_VER

stReqChgEquipSkill::stReqChgEquipSkill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqChgEquipSkill::InitAsDefaultInstance() {
}

stReqChgEquipSkill::stReqChgEquipSkill(const stReqChgEquipSkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqChgEquipSkill::SharedCtor() {
  _cached_size_ = 0;
  srcinstanceid_ = GOOGLE_ULONGLONG(0);
  dstinstanceid_ = GOOGLE_ULONGLONG(0);
  chgsouliteminstanceid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqChgEquipSkill::~stReqChgEquipSkill() {
  SharedDtor();
}

void stReqChgEquipSkill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqChgEquipSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqChgEquipSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqChgEquipSkill_descriptor_;
}

const stReqChgEquipSkill& stReqChgEquipSkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stReqChgEquipSkill* stReqChgEquipSkill::default_instance_ = NULL;

stReqChgEquipSkill* stReqChgEquipSkill::New() const {
  return new stReqChgEquipSkill;
}

void stReqChgEquipSkill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    srcinstanceid_ = GOOGLE_ULONGLONG(0);
    dstinstanceid_ = GOOGLE_ULONGLONG(0);
    chgsouliteminstanceid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqChgEquipSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 srcInstanceID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &srcinstanceid_)));
          set_has_srcinstanceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dstInstanceID;
        break;
      }

      // optional uint64 dstInstanceID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dstInstanceID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dstinstanceid_)));
          set_has_dstinstanceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_chgSoulItemInstanceID;
        break;
      }

      // optional uint64 chgSoulItemInstanceID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chgSoulItemInstanceID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &chgsouliteminstanceid_)));
          set_has_chgsouliteminstanceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqChgEquipSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 srcInstanceID = 1;
  if (has_srcinstanceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->srcinstanceid(), output);
  }

  // optional uint64 dstInstanceID = 2;
  if (has_dstinstanceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->dstinstanceid(), output);
  }

  // optional uint64 chgSoulItemInstanceID = 3;
  if (has_chgsouliteminstanceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->chgsouliteminstanceid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqChgEquipSkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 srcInstanceID = 1;
  if (has_srcinstanceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->srcinstanceid(), target);
  }

  // optional uint64 dstInstanceID = 2;
  if (has_dstinstanceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->dstinstanceid(), target);
  }

  // optional uint64 chgSoulItemInstanceID = 3;
  if (has_chgsouliteminstanceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->chgsouliteminstanceid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqChgEquipSkill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 srcInstanceID = 1;
    if (has_srcinstanceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->srcinstanceid());
    }

    // optional uint64 dstInstanceID = 2;
    if (has_dstinstanceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dstinstanceid());
    }

    // optional uint64 chgSoulItemInstanceID = 3;
    if (has_chgsouliteminstanceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->chgsouliteminstanceid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqChgEquipSkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqChgEquipSkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqChgEquipSkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqChgEquipSkill::MergeFrom(const stReqChgEquipSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_srcinstanceid()) {
      set_srcinstanceid(from.srcinstanceid());
    }
    if (from.has_dstinstanceid()) {
      set_dstinstanceid(from.dstinstanceid());
    }
    if (from.has_chgsouliteminstanceid()) {
      set_chgsouliteminstanceid(from.chgsouliteminstanceid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqChgEquipSkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqChgEquipSkill::CopyFrom(const stReqChgEquipSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqChgEquipSkill::IsInitialized() const {

  return true;
}

void stReqChgEquipSkill::Swap(stReqChgEquipSkill* other) {
  if (other != this) {
    std::swap(srcinstanceid_, other->srcinstanceid_);
    std::swap(dstinstanceid_, other->dstinstanceid_);
    std::swap(chgsouliteminstanceid_, other->chgsouliteminstanceid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqChgEquipSkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqChgEquipSkill_descriptor_;
  metadata.reflection = stReqChgEquipSkill_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRetChgEquipSkillResult_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetChgEquipSkillResult_eResult_descriptor_;
}
bool stRetChgEquipSkillResult_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetChgEquipSkillResult_eResult stRetChgEquipSkillResult::eSuccess;
const stRetChgEquipSkillResult_eResult stRetChgEquipSkillResult::eSrc_Item_Not_Exist;
const stRetChgEquipSkillResult_eResult stRetChgEquipSkillResult::eDst_Item_Not_Exist;
const stRetChgEquipSkillResult_eResult stRetChgEquipSkillResult::eHas_Not_Chg_Soul_Item;
const stRetChgEquipSkillResult_eResult stRetChgEquipSkillResult::eCond_Not_Meet;
const stRetChgEquipSkillResult_eResult stRetChgEquipSkillResult::eDec_Chg_Soul_Item_Fail;
const stRetChgEquipSkillResult_eResult stRetChgEquipSkillResult::eResult_MIN;
const stRetChgEquipSkillResult_eResult stRetChgEquipSkillResult::eResult_MAX;
const int stRetChgEquipSkillResult::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetChgEquipSkillResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetChgEquipSkillResult_ProtoModID_descriptor_;
}
bool stRetChgEquipSkillResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetChgEquipSkillResult_ProtoModID stRetChgEquipSkillResult::ModID;
const stRetChgEquipSkillResult_ProtoModID stRetChgEquipSkillResult::ProtoModID_MIN;
const stRetChgEquipSkillResult_ProtoModID stRetChgEquipSkillResult::ProtoModID_MAX;
const int stRetChgEquipSkillResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetChgEquipSkillResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetChgEquipSkillResult_ProtoFunID_descriptor_;
}
bool stRetChgEquipSkillResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 135:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetChgEquipSkillResult_ProtoFunID stRetChgEquipSkillResult::FunID;
const stRetChgEquipSkillResult_ProtoFunID stRetChgEquipSkillResult::ProtoFunID_MIN;
const stRetChgEquipSkillResult_ProtoFunID stRetChgEquipSkillResult::ProtoFunID_MAX;
const int stRetChgEquipSkillResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRetChgEquipSkillResult::kSrcInstanceIDFieldNumber;
const int stRetChgEquipSkillResult::kDstInstanceIDFieldNumber;
const int stRetChgEquipSkillResult::kResultFieldNumber;
#endif  // !_MSC_VER

stRetChgEquipSkillResult::stRetChgEquipSkillResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRetChgEquipSkillResult::InitAsDefaultInstance() {
}

stRetChgEquipSkillResult::stRetChgEquipSkillResult(const stRetChgEquipSkillResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRetChgEquipSkillResult::SharedCtor() {
  _cached_size_ = 0;
  srcinstanceid_ = GOOGLE_ULONGLONG(0);
  dstinstanceid_ = GOOGLE_ULONGLONG(0);
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRetChgEquipSkillResult::~stRetChgEquipSkillResult() {
  SharedDtor();
}

void stRetChgEquipSkillResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRetChgEquipSkillResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRetChgEquipSkillResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetChgEquipSkillResult_descriptor_;
}

const stRetChgEquipSkillResult& stRetChgEquipSkillResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stRetChgEquipSkillResult* stRetChgEquipSkillResult::default_instance_ = NULL;

stRetChgEquipSkillResult* stRetChgEquipSkillResult::New() const {
  return new stRetChgEquipSkillResult;
}

void stRetChgEquipSkillResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    srcinstanceid_ = GOOGLE_ULONGLONG(0);
    dstinstanceid_ = GOOGLE_ULONGLONG(0);
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRetChgEquipSkillResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 srcInstanceID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &srcinstanceid_)));
          set_has_srcinstanceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dstInstanceID;
        break;
      }

      // optional uint64 dstInstanceID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dstInstanceID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dstinstanceid_)));
          set_has_dstinstanceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // optional .Role.stRetChgEquipSkillResult.eResult result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Role::stRetChgEquipSkillResult_eResult_IsValid(value)) {
            set_result(static_cast< ::Role::stRetChgEquipSkillResult_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRetChgEquipSkillResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 srcInstanceID = 1;
  if (has_srcinstanceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->srcinstanceid(), output);
  }

  // optional uint64 dstInstanceID = 2;
  if (has_dstinstanceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->dstinstanceid(), output);
  }

  // optional .Role.stRetChgEquipSkillResult.eResult result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRetChgEquipSkillResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 srcInstanceID = 1;
  if (has_srcinstanceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->srcinstanceid(), target);
  }

  // optional uint64 dstInstanceID = 2;
  if (has_dstinstanceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->dstinstanceid(), target);
  }

  // optional .Role.stRetChgEquipSkillResult.eResult result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRetChgEquipSkillResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 srcInstanceID = 1;
    if (has_srcinstanceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->srcinstanceid());
    }

    // optional uint64 dstInstanceID = 2;
    if (has_dstinstanceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dstinstanceid());
    }

    // optional .Role.stRetChgEquipSkillResult.eResult result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRetChgEquipSkillResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRetChgEquipSkillResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRetChgEquipSkillResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRetChgEquipSkillResult::MergeFrom(const stRetChgEquipSkillResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_srcinstanceid()) {
      set_srcinstanceid(from.srcinstanceid());
    }
    if (from.has_dstinstanceid()) {
      set_dstinstanceid(from.dstinstanceid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRetChgEquipSkillResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRetChgEquipSkillResult::CopyFrom(const stRetChgEquipSkillResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRetChgEquipSkillResult::IsInitialized() const {

  return true;
}

void stRetChgEquipSkillResult::Swap(stRetChgEquipSkillResult* other) {
  if (other != this) {
    std::swap(srcinstanceid_, other->srcinstanceid_);
    std::swap(dstinstanceid_, other->dstinstanceid_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRetChgEquipSkillResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRetChgEquipSkillResult_descriptor_;
  metadata.reflection = stRetChgEquipSkillResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stHasCloseBetaReward_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stHasCloseBetaReward_ProtoModID_descriptor_;
}
bool stHasCloseBetaReward_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stHasCloseBetaReward_ProtoModID stHasCloseBetaReward::ModID;
const stHasCloseBetaReward_ProtoModID stHasCloseBetaReward::ProtoModID_MIN;
const stHasCloseBetaReward_ProtoModID stHasCloseBetaReward::ProtoModID_MAX;
const int stHasCloseBetaReward::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stHasCloseBetaReward_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stHasCloseBetaReward_ProtoFunID_descriptor_;
}
bool stHasCloseBetaReward_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 136:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stHasCloseBetaReward_ProtoFunID stHasCloseBetaReward::FunID;
const stHasCloseBetaReward_ProtoFunID stHasCloseBetaReward::ProtoFunID_MIN;
const stHasCloseBetaReward_ProtoFunID stHasCloseBetaReward::ProtoFunID_MAX;
const int stHasCloseBetaReward::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stHasCloseBetaReward::kBoxIDFieldNumber;
const int stHasCloseBetaReward::kGiveDiamondFieldNumber;
const int stHasCloseBetaReward::kGiveRechargeFieldNumber;
#endif  // !_MSC_VER

stHasCloseBetaReward::stHasCloseBetaReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stHasCloseBetaReward::InitAsDefaultInstance() {
}

stHasCloseBetaReward::stHasCloseBetaReward(const stHasCloseBetaReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stHasCloseBetaReward::SharedCtor() {
  _cached_size_ = 0;
  boxid_ = 0u;
  givediamond_ = 0u;
  giverecharge_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stHasCloseBetaReward::~stHasCloseBetaReward() {
  SharedDtor();
}

void stHasCloseBetaReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stHasCloseBetaReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stHasCloseBetaReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stHasCloseBetaReward_descriptor_;
}

const stHasCloseBetaReward& stHasCloseBetaReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stHasCloseBetaReward* stHasCloseBetaReward::default_instance_ = NULL;

stHasCloseBetaReward* stHasCloseBetaReward::New() const {
  return new stHasCloseBetaReward;
}

void stHasCloseBetaReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    boxid_ = 0u;
    givediamond_ = 0u;
    giverecharge_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stHasCloseBetaReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 boxID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &boxid_)));
          set_has_boxid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_giveDiamond;
        break;
      }

      // optional uint32 giveDiamond = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_giveDiamond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &givediamond_)));
          set_has_givediamond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_giveRecharge;
        break;
      }

      // optional uint32 giveRecharge = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_giveRecharge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &giverecharge_)));
          set_has_giverecharge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stHasCloseBetaReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 boxID = 1;
  if (has_boxid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->boxid(), output);
  }

  // optional uint32 giveDiamond = 2;
  if (has_givediamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->givediamond(), output);
  }

  // optional uint32 giveRecharge = 3;
  if (has_giverecharge()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->giverecharge(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stHasCloseBetaReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 boxID = 1;
  if (has_boxid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->boxid(), target);
  }

  // optional uint32 giveDiamond = 2;
  if (has_givediamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->givediamond(), target);
  }

  // optional uint32 giveRecharge = 3;
  if (has_giverecharge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->giverecharge(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stHasCloseBetaReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 boxID = 1;
    if (has_boxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->boxid());
    }

    // optional uint32 giveDiamond = 2;
    if (has_givediamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->givediamond());
    }

    // optional uint32 giveRecharge = 3;
    if (has_giverecharge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->giverecharge());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stHasCloseBetaReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stHasCloseBetaReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stHasCloseBetaReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stHasCloseBetaReward::MergeFrom(const stHasCloseBetaReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_boxid()) {
      set_boxid(from.boxid());
    }
    if (from.has_givediamond()) {
      set_givediamond(from.givediamond());
    }
    if (from.has_giverecharge()) {
      set_giverecharge(from.giverecharge());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stHasCloseBetaReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stHasCloseBetaReward::CopyFrom(const stHasCloseBetaReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stHasCloseBetaReward::IsInitialized() const {

  return true;
}

void stHasCloseBetaReward::Swap(stHasCloseBetaReward* other) {
  if (other != this) {
    std::swap(boxid_, other->boxid_);
    std::swap(givediamond_, other->givediamond_);
    std::swap(giverecharge_, other->giverecharge_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stHasCloseBetaReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stHasCloseBetaReward_descriptor_;
  metadata.reflection = stHasCloseBetaReward_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqGotCloseBetaReward_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqGotCloseBetaReward_ProtoModID_descriptor_;
}
bool stReqGotCloseBetaReward_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqGotCloseBetaReward_ProtoModID stReqGotCloseBetaReward::ModID;
const stReqGotCloseBetaReward_ProtoModID stReqGotCloseBetaReward::ProtoModID_MIN;
const stReqGotCloseBetaReward_ProtoModID stReqGotCloseBetaReward::ProtoModID_MAX;
const int stReqGotCloseBetaReward::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqGotCloseBetaReward_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqGotCloseBetaReward_ProtoFunID_descriptor_;
}
bool stReqGotCloseBetaReward_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 137:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqGotCloseBetaReward_ProtoFunID stReqGotCloseBetaReward::FunID;
const stReqGotCloseBetaReward_ProtoFunID stReqGotCloseBetaReward::ProtoFunID_MIN;
const stReqGotCloseBetaReward_ProtoFunID stReqGotCloseBetaReward::ProtoFunID_MAX;
const int stReqGotCloseBetaReward::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqGotCloseBetaReward::kCharIDFieldNumber;
#endif  // !_MSC_VER

stReqGotCloseBetaReward::stReqGotCloseBetaReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqGotCloseBetaReward::InitAsDefaultInstance() {
}

stReqGotCloseBetaReward::stReqGotCloseBetaReward(const stReqGotCloseBetaReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqGotCloseBetaReward::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqGotCloseBetaReward::~stReqGotCloseBetaReward() {
  SharedDtor();
}

void stReqGotCloseBetaReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqGotCloseBetaReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqGotCloseBetaReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqGotCloseBetaReward_descriptor_;
}

const stReqGotCloseBetaReward& stReqGotCloseBetaReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stReqGotCloseBetaReward* stReqGotCloseBetaReward::default_instance_ = NULL;

stReqGotCloseBetaReward* stReqGotCloseBetaReward::New() const {
  return new stReqGotCloseBetaReward;
}

void stReqGotCloseBetaReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqGotCloseBetaReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqGotCloseBetaReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqGotCloseBetaReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqGotCloseBetaReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqGotCloseBetaReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqGotCloseBetaReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqGotCloseBetaReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqGotCloseBetaReward::MergeFrom(const stReqGotCloseBetaReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqGotCloseBetaReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqGotCloseBetaReward::CopyFrom(const stReqGotCloseBetaReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqGotCloseBetaReward::IsInitialized() const {

  return true;
}

void stReqGotCloseBetaReward::Swap(stReqGotCloseBetaReward* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqGotCloseBetaReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqGotCloseBetaReward_descriptor_;
  metadata.reflection = stReqGotCloseBetaReward_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stGotCloseBetaRewardResult_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGotCloseBetaRewardResult_eResult_descriptor_;
}
bool stGotCloseBetaRewardResult_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stGotCloseBetaRewardResult_eResult stGotCloseBetaRewardResult::eSuccess;
const stGotCloseBetaRewardResult_eResult stGotCloseBetaRewardResult::eBagFull;
const stGotCloseBetaRewardResult_eResult stGotCloseBetaRewardResult::eHas_Got_Reward;
const stGotCloseBetaRewardResult_eResult stGotCloseBetaRewardResult::eHas_Not_Reward;
const stGotCloseBetaRewardResult_eResult stGotCloseBetaRewardResult::eResult_MIN;
const stGotCloseBetaRewardResult_eResult stGotCloseBetaRewardResult::eResult_MAX;
const int stGotCloseBetaRewardResult::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stGotCloseBetaRewardResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGotCloseBetaRewardResult_ProtoModID_descriptor_;
}
bool stGotCloseBetaRewardResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stGotCloseBetaRewardResult_ProtoModID stGotCloseBetaRewardResult::ModID;
const stGotCloseBetaRewardResult_ProtoModID stGotCloseBetaRewardResult::ProtoModID_MIN;
const stGotCloseBetaRewardResult_ProtoModID stGotCloseBetaRewardResult::ProtoModID_MAX;
const int stGotCloseBetaRewardResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stGotCloseBetaRewardResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGotCloseBetaRewardResult_ProtoFunID_descriptor_;
}
bool stGotCloseBetaRewardResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 138:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stGotCloseBetaRewardResult_ProtoFunID stGotCloseBetaRewardResult::FunID;
const stGotCloseBetaRewardResult_ProtoFunID stGotCloseBetaRewardResult::ProtoFunID_MIN;
const stGotCloseBetaRewardResult_ProtoFunID stGotCloseBetaRewardResult::ProtoFunID_MAX;
const int stGotCloseBetaRewardResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stGotCloseBetaRewardResult::kResultFieldNumber;
const int stGotCloseBetaRewardResult::kGiveDiamondFieldNumber;
const int stGotCloseBetaRewardResult::kGiveRechargeFieldNumber;
#endif  // !_MSC_VER

stGotCloseBetaRewardResult::stGotCloseBetaRewardResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stGotCloseBetaRewardResult::InitAsDefaultInstance() {
}

stGotCloseBetaRewardResult::stGotCloseBetaRewardResult(const stGotCloseBetaRewardResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stGotCloseBetaRewardResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  givediamond_ = 0u;
  giverecharge_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stGotCloseBetaRewardResult::~stGotCloseBetaRewardResult() {
  SharedDtor();
}

void stGotCloseBetaRewardResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stGotCloseBetaRewardResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stGotCloseBetaRewardResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGotCloseBetaRewardResult_descriptor_;
}

const stGotCloseBetaRewardResult& stGotCloseBetaRewardResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stGotCloseBetaRewardResult* stGotCloseBetaRewardResult::default_instance_ = NULL;

stGotCloseBetaRewardResult* stGotCloseBetaRewardResult::New() const {
  return new stGotCloseBetaRewardResult;
}

void stGotCloseBetaRewardResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
    givediamond_ = 0u;
    giverecharge_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stGotCloseBetaRewardResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Role.stGotCloseBetaRewardResult.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Role::stGotCloseBetaRewardResult_eResult_IsValid(value)) {
            set_result(static_cast< ::Role::stGotCloseBetaRewardResult_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_giveDiamond;
        break;
      }

      // optional uint32 giveDiamond = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_giveDiamond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &givediamond_)));
          set_has_givediamond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_giveRecharge;
        break;
      }

      // optional uint32 giveRecharge = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_giveRecharge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &giverecharge_)));
          set_has_giverecharge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stGotCloseBetaRewardResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Role.stGotCloseBetaRewardResult.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional uint32 giveDiamond = 2;
  if (has_givediamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->givediamond(), output);
  }

  // optional uint32 giveRecharge = 3;
  if (has_giverecharge()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->giverecharge(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stGotCloseBetaRewardResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Role.stGotCloseBetaRewardResult.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional uint32 giveDiamond = 2;
  if (has_givediamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->givediamond(), target);
  }

  // optional uint32 giveRecharge = 3;
  if (has_giverecharge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->giverecharge(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stGotCloseBetaRewardResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Role.stGotCloseBetaRewardResult.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional uint32 giveDiamond = 2;
    if (has_givediamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->givediamond());
    }

    // optional uint32 giveRecharge = 3;
    if (has_giverecharge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->giverecharge());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stGotCloseBetaRewardResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stGotCloseBetaRewardResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stGotCloseBetaRewardResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stGotCloseBetaRewardResult::MergeFrom(const stGotCloseBetaRewardResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_givediamond()) {
      set_givediamond(from.givediamond());
    }
    if (from.has_giverecharge()) {
      set_giverecharge(from.giverecharge());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stGotCloseBetaRewardResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stGotCloseBetaRewardResult::CopyFrom(const stGotCloseBetaRewardResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stGotCloseBetaRewardResult::IsInitialized() const {

  return true;
}

void stGotCloseBetaRewardResult::Swap(stGotCloseBetaRewardResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(givediamond_, other->givediamond_);
    std::swap(giverecharge_, other->giverecharge_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stGotCloseBetaRewardResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stGotCloseBetaRewardResult_descriptor_;
  metadata.reflection = stGotCloseBetaRewardResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqUseMonthCardItem_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqUseMonthCardItem_ProtoModID_descriptor_;
}
bool stReqUseMonthCardItem_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqUseMonthCardItem_ProtoModID stReqUseMonthCardItem::ModID;
const stReqUseMonthCardItem_ProtoModID stReqUseMonthCardItem::ProtoModID_MIN;
const stReqUseMonthCardItem_ProtoModID stReqUseMonthCardItem::ProtoModID_MAX;
const int stReqUseMonthCardItem::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqUseMonthCardItem_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqUseMonthCardItem_ProtoFunID_descriptor_;
}
bool stReqUseMonthCardItem_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 139:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqUseMonthCardItem_ProtoFunID stReqUseMonthCardItem::FunID;
const stReqUseMonthCardItem_ProtoFunID stReqUseMonthCardItem::ProtoFunID_MIN;
const stReqUseMonthCardItem_ProtoFunID stReqUseMonthCardItem::ProtoFunID_MAX;
const int stReqUseMonthCardItem::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqUseMonthCardItem::kInstanceIDFieldNumber;
#endif  // !_MSC_VER

stReqUseMonthCardItem::stReqUseMonthCardItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqUseMonthCardItem::InitAsDefaultInstance() {
}

stReqUseMonthCardItem::stReqUseMonthCardItem(const stReqUseMonthCardItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqUseMonthCardItem::SharedCtor() {
  _cached_size_ = 0;
  instanceid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqUseMonthCardItem::~stReqUseMonthCardItem() {
  SharedDtor();
}

void stReqUseMonthCardItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqUseMonthCardItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqUseMonthCardItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqUseMonthCardItem_descriptor_;
}

const stReqUseMonthCardItem& stReqUseMonthCardItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stReqUseMonthCardItem* stReqUseMonthCardItem::default_instance_ = NULL;

stReqUseMonthCardItem* stReqUseMonthCardItem::New() const {
  return new stReqUseMonthCardItem;
}

void stReqUseMonthCardItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    instanceid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqUseMonthCardItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 instanceID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &instanceid_)));
          set_has_instanceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqUseMonthCardItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 instanceID = 1;
  if (has_instanceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->instanceid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqUseMonthCardItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 instanceID = 1;
  if (has_instanceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->instanceid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqUseMonthCardItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 instanceID = 1;
    if (has_instanceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->instanceid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqUseMonthCardItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqUseMonthCardItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqUseMonthCardItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqUseMonthCardItem::MergeFrom(const stReqUseMonthCardItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_instanceid()) {
      set_instanceid(from.instanceid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqUseMonthCardItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqUseMonthCardItem::CopyFrom(const stReqUseMonthCardItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqUseMonthCardItem::IsInitialized() const {

  return true;
}

void stReqUseMonthCardItem::Swap(stReqUseMonthCardItem* other) {
  if (other != this) {
    std::swap(instanceid_, other->instanceid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqUseMonthCardItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqUseMonthCardItem_descriptor_;
  metadata.reflection = stReqUseMonthCardItem_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRetUseMonthCardItem_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetUseMonthCardItem_eResult_descriptor_;
}
bool stRetUseMonthCardItem_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetUseMonthCardItem_eResult stRetUseMonthCardItem::eSuccess;
const stRetUseMonthCardItem_eResult stRetUseMonthCardItem::eExpire;
const stRetUseMonthCardItem_eResult stRetUseMonthCardItem::eToday_Has_Use;
const stRetUseMonthCardItem_eResult stRetUseMonthCardItem::eItem_Not_Exist;
const stRetUseMonthCardItem_eResult stRetUseMonthCardItem::eResult_MIN;
const stRetUseMonthCardItem_eResult stRetUseMonthCardItem::eResult_MAX;
const int stRetUseMonthCardItem::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetUseMonthCardItem_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetUseMonthCardItem_ProtoModID_descriptor_;
}
bool stRetUseMonthCardItem_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetUseMonthCardItem_ProtoModID stRetUseMonthCardItem::ModID;
const stRetUseMonthCardItem_ProtoModID stRetUseMonthCardItem::ProtoModID_MIN;
const stRetUseMonthCardItem_ProtoModID stRetUseMonthCardItem::ProtoModID_MAX;
const int stRetUseMonthCardItem::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetUseMonthCardItem_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetUseMonthCardItem_ProtoFunID_descriptor_;
}
bool stRetUseMonthCardItem_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 140:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetUseMonthCardItem_ProtoFunID stRetUseMonthCardItem::FunID;
const stRetUseMonthCardItem_ProtoFunID stRetUseMonthCardItem::ProtoFunID_MIN;
const stRetUseMonthCardItem_ProtoFunID stRetUseMonthCardItem::ProtoFunID_MAX;
const int stRetUseMonthCardItem::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRetUseMonthCardItem::kResultFieldNumber;
#endif  // !_MSC_VER

stRetUseMonthCardItem::stRetUseMonthCardItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRetUseMonthCardItem::InitAsDefaultInstance() {
}

stRetUseMonthCardItem::stRetUseMonthCardItem(const stRetUseMonthCardItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRetUseMonthCardItem::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRetUseMonthCardItem::~stRetUseMonthCardItem() {
  SharedDtor();
}

void stRetUseMonthCardItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRetUseMonthCardItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRetUseMonthCardItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetUseMonthCardItem_descriptor_;
}

const stRetUseMonthCardItem& stRetUseMonthCardItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stRetUseMonthCardItem* stRetUseMonthCardItem::default_instance_ = NULL;

stRetUseMonthCardItem* stRetUseMonthCardItem::New() const {
  return new stRetUseMonthCardItem;
}

void stRetUseMonthCardItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRetUseMonthCardItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Role.stRetUseMonthCardItem.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Role::stRetUseMonthCardItem_eResult_IsValid(value)) {
            set_result(static_cast< ::Role::stRetUseMonthCardItem_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRetUseMonthCardItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Role.stRetUseMonthCardItem.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRetUseMonthCardItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Role.stRetUseMonthCardItem.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRetUseMonthCardItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Role.stRetUseMonthCardItem.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRetUseMonthCardItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRetUseMonthCardItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRetUseMonthCardItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRetUseMonthCardItem::MergeFrom(const stRetUseMonthCardItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRetUseMonthCardItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRetUseMonthCardItem::CopyFrom(const stRetUseMonthCardItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRetUseMonthCardItem::IsInitialized() const {

  return true;
}

void stRetUseMonthCardItem::Swap(stRetUseMonthCardItem* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRetUseMonthCardItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRetUseMonthCardItem_descriptor_;
  metadata.reflection = stRetUseMonthCardItem_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqUseSelectItemBox_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqUseSelectItemBox_ProtoModID_descriptor_;
}
bool stReqUseSelectItemBox_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqUseSelectItemBox_ProtoModID stReqUseSelectItemBox::ModID;
const stReqUseSelectItemBox_ProtoModID stReqUseSelectItemBox::ProtoModID_MIN;
const stReqUseSelectItemBox_ProtoModID stReqUseSelectItemBox::ProtoModID_MAX;
const int stReqUseSelectItemBox::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqUseSelectItemBox_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqUseSelectItemBox_ProtoFunID_descriptor_;
}
bool stReqUseSelectItemBox_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 141:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqUseSelectItemBox_ProtoFunID stReqUseSelectItemBox::FunID;
const stReqUseSelectItemBox_ProtoFunID stReqUseSelectItemBox::ProtoFunID_MIN;
const stReqUseSelectItemBox_ProtoFunID stReqUseSelectItemBox::ProtoFunID_MAX;
const int stReqUseSelectItemBox::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqUseSelectItemBox::kInstanceIDFieldNumber;
const int stReqUseSelectItemBox::kSelectIndexFieldNumber;
#endif  // !_MSC_VER

stReqUseSelectItemBox::stReqUseSelectItemBox()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqUseSelectItemBox::InitAsDefaultInstance() {
}

stReqUseSelectItemBox::stReqUseSelectItemBox(const stReqUseSelectItemBox& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqUseSelectItemBox::SharedCtor() {
  _cached_size_ = 0;
  instanceid_ = GOOGLE_ULONGLONG(0);
  selectindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqUseSelectItemBox::~stReqUseSelectItemBox() {
  SharedDtor();
}

void stReqUseSelectItemBox::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqUseSelectItemBox::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqUseSelectItemBox::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqUseSelectItemBox_descriptor_;
}

const stReqUseSelectItemBox& stReqUseSelectItemBox::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stReqUseSelectItemBox* stReqUseSelectItemBox::default_instance_ = NULL;

stReqUseSelectItemBox* stReqUseSelectItemBox::New() const {
  return new stReqUseSelectItemBox;
}

void stReqUseSelectItemBox::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    instanceid_ = GOOGLE_ULONGLONG(0);
    selectindex_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqUseSelectItemBox::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 instanceID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &instanceid_)));
          set_has_instanceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_selectIndex;
        break;
      }

      // optional uint32 selectIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_selectIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &selectindex_)));
          set_has_selectindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqUseSelectItemBox::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 instanceID = 1;
  if (has_instanceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->instanceid(), output);
  }

  // optional uint32 selectIndex = 2;
  if (has_selectindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->selectindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqUseSelectItemBox::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 instanceID = 1;
  if (has_instanceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->instanceid(), target);
  }

  // optional uint32 selectIndex = 2;
  if (has_selectindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->selectindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqUseSelectItemBox::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 instanceID = 1;
    if (has_instanceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->instanceid());
    }

    // optional uint32 selectIndex = 2;
    if (has_selectindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->selectindex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqUseSelectItemBox::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqUseSelectItemBox* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqUseSelectItemBox*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqUseSelectItemBox::MergeFrom(const stReqUseSelectItemBox& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_instanceid()) {
      set_instanceid(from.instanceid());
    }
    if (from.has_selectindex()) {
      set_selectindex(from.selectindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqUseSelectItemBox::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqUseSelectItemBox::CopyFrom(const stReqUseSelectItemBox& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqUseSelectItemBox::IsInitialized() const {

  return true;
}

void stReqUseSelectItemBox::Swap(stReqUseSelectItemBox* other) {
  if (other != this) {
    std::swap(instanceid_, other->instanceid_);
    std::swap(selectindex_, other->selectindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqUseSelectItemBox::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqUseSelectItemBox_descriptor_;
  metadata.reflection = stReqUseSelectItemBox_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRetUseSelectItemBox_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetUseSelectItemBox_eResult_descriptor_;
}
bool stRetUseSelectItemBox_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetUseSelectItemBox_eResult stRetUseSelectItemBox::eSuccess;
const stRetUseSelectItemBox_eResult stRetUseSelectItemBox::eItem_Not_Exist;
const stRetUseSelectItemBox_eResult stRetUseSelectItemBox::eDec_Item_Fail;
const stRetUseSelectItemBox_eResult stRetUseSelectItemBox::eResult_MIN;
const stRetUseSelectItemBox_eResult stRetUseSelectItemBox::eResult_MAX;
const int stRetUseSelectItemBox::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetUseSelectItemBox_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetUseSelectItemBox_ProtoModID_descriptor_;
}
bool stRetUseSelectItemBox_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetUseSelectItemBox_ProtoModID stRetUseSelectItemBox::ModID;
const stRetUseSelectItemBox_ProtoModID stRetUseSelectItemBox::ProtoModID_MIN;
const stRetUseSelectItemBox_ProtoModID stRetUseSelectItemBox::ProtoModID_MAX;
const int stRetUseSelectItemBox::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetUseSelectItemBox_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetUseSelectItemBox_ProtoFunID_descriptor_;
}
bool stRetUseSelectItemBox_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 142:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetUseSelectItemBox_ProtoFunID stRetUseSelectItemBox::FunID;
const stRetUseSelectItemBox_ProtoFunID stRetUseSelectItemBox::ProtoFunID_MIN;
const stRetUseSelectItemBox_ProtoFunID stRetUseSelectItemBox::ProtoFunID_MAX;
const int stRetUseSelectItemBox::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRetUseSelectItemBox::kResultFieldNumber;
#endif  // !_MSC_VER

stRetUseSelectItemBox::stRetUseSelectItemBox()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRetUseSelectItemBox::InitAsDefaultInstance() {
}

stRetUseSelectItemBox::stRetUseSelectItemBox(const stRetUseSelectItemBox& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRetUseSelectItemBox::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRetUseSelectItemBox::~stRetUseSelectItemBox() {
  SharedDtor();
}

void stRetUseSelectItemBox::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRetUseSelectItemBox::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRetUseSelectItemBox::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetUseSelectItemBox_descriptor_;
}

const stRetUseSelectItemBox& stRetUseSelectItemBox::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stRetUseSelectItemBox* stRetUseSelectItemBox::default_instance_ = NULL;

stRetUseSelectItemBox* stRetUseSelectItemBox::New() const {
  return new stRetUseSelectItemBox;
}

void stRetUseSelectItemBox::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRetUseSelectItemBox::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Role.stRetUseSelectItemBox.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Role::stRetUseSelectItemBox_eResult_IsValid(value)) {
            set_result(static_cast< ::Role::stRetUseSelectItemBox_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRetUseSelectItemBox::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Role.stRetUseSelectItemBox.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRetUseSelectItemBox::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Role.stRetUseSelectItemBox.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRetUseSelectItemBox::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Role.stRetUseSelectItemBox.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRetUseSelectItemBox::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRetUseSelectItemBox* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRetUseSelectItemBox*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRetUseSelectItemBox::MergeFrom(const stRetUseSelectItemBox& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRetUseSelectItemBox::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRetUseSelectItemBox::CopyFrom(const stRetUseSelectItemBox& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRetUseSelectItemBox::IsInitialized() const {

  return true;
}

void stRetUseSelectItemBox::Swap(stRetUseSelectItemBox* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRetUseSelectItemBox::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRetUseSelectItemBox_descriptor_;
  metadata.reflection = stRetUseSelectItemBox_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqUseHeroSkillBook_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqUseHeroSkillBook_ProtoModID_descriptor_;
}
bool stReqUseHeroSkillBook_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqUseHeroSkillBook_ProtoModID stReqUseHeroSkillBook::ModID;
const stReqUseHeroSkillBook_ProtoModID stReqUseHeroSkillBook::ProtoModID_MIN;
const stReqUseHeroSkillBook_ProtoModID stReqUseHeroSkillBook::ProtoModID_MAX;
const int stReqUseHeroSkillBook::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqUseHeroSkillBook_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqUseHeroSkillBook_ProtoFunID_descriptor_;
}
bool stReqUseHeroSkillBook_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 143:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqUseHeroSkillBook_ProtoFunID stReqUseHeroSkillBook::FunID;
const stReqUseHeroSkillBook_ProtoFunID stReqUseHeroSkillBook::ProtoFunID_MIN;
const stReqUseHeroSkillBook_ProtoFunID stReqUseHeroSkillBook::ProtoFunID_MAX;
const int stReqUseHeroSkillBook::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqUseHeroSkillBook::kInstanceIDFieldNumber;
const int stReqUseHeroSkillBook::kHeroIDFieldNumber;
#endif  // !_MSC_VER

stReqUseHeroSkillBook::stReqUseHeroSkillBook()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqUseHeroSkillBook::InitAsDefaultInstance() {
}

stReqUseHeroSkillBook::stReqUseHeroSkillBook(const stReqUseHeroSkillBook& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqUseHeroSkillBook::SharedCtor() {
  _cached_size_ = 0;
  instanceid_ = GOOGLE_ULONGLONG(0);
  heroid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqUseHeroSkillBook::~stReqUseHeroSkillBook() {
  SharedDtor();
}

void stReqUseHeroSkillBook::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqUseHeroSkillBook::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqUseHeroSkillBook::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqUseHeroSkillBook_descriptor_;
}

const stReqUseHeroSkillBook& stReqUseHeroSkillBook::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stReqUseHeroSkillBook* stReqUseHeroSkillBook::default_instance_ = NULL;

stReqUseHeroSkillBook* stReqUseHeroSkillBook::New() const {
  return new stReqUseHeroSkillBook;
}

void stReqUseHeroSkillBook::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    instanceid_ = GOOGLE_ULONGLONG(0);
    heroid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqUseHeroSkillBook::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 instanceID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &instanceid_)));
          set_has_instanceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_heroID;
        break;
      }

      // optional uint32 heroID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_heroID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heroid_)));
          set_has_heroid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqUseHeroSkillBook::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 instanceID = 1;
  if (has_instanceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->instanceid(), output);
  }

  // optional uint32 heroID = 2;
  if (has_heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->heroid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqUseHeroSkillBook::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 instanceID = 1;
  if (has_instanceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->instanceid(), target);
  }

  // optional uint32 heroID = 2;
  if (has_heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->heroid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqUseHeroSkillBook::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 instanceID = 1;
    if (has_instanceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->instanceid());
    }

    // optional uint32 heroID = 2;
    if (has_heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heroid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqUseHeroSkillBook::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqUseHeroSkillBook* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqUseHeroSkillBook*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqUseHeroSkillBook::MergeFrom(const stReqUseHeroSkillBook& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_instanceid()) {
      set_instanceid(from.instanceid());
    }
    if (from.has_heroid()) {
      set_heroid(from.heroid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqUseHeroSkillBook::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqUseHeroSkillBook::CopyFrom(const stReqUseHeroSkillBook& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqUseHeroSkillBook::IsInitialized() const {

  return true;
}

void stReqUseHeroSkillBook::Swap(stReqUseHeroSkillBook* other) {
  if (other != this) {
    std::swap(instanceid_, other->instanceid_);
    std::swap(heroid_, other->heroid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqUseHeroSkillBook::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqUseHeroSkillBook_descriptor_;
  metadata.reflection = stReqUseHeroSkillBook_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRetUseHeroSkillBook_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetUseHeroSkillBook_eResult_descriptor_;
}
bool stRetUseHeroSkillBook_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetUseHeroSkillBook_eResult stRetUseHeroSkillBook::eSuccess;
const stRetUseHeroSkillBook_eResult stRetUseHeroSkillBook::eItem_Not_Exist;
const stRetUseHeroSkillBook_eResult stRetUseHeroSkillBook::eDec_Item_Fail;
const stRetUseHeroSkillBook_eResult stRetUseHeroSkillBook::eSkill_Has_Exist;
const stRetUseHeroSkillBook_eResult stRetUseHeroSkillBook::eHero_Not_Exist;
const stRetUseHeroSkillBook_eResult stRetUseHeroSkillBook::eResult_MIN;
const stRetUseHeroSkillBook_eResult stRetUseHeroSkillBook::eResult_MAX;
const int stRetUseHeroSkillBook::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetUseHeroSkillBook_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetUseHeroSkillBook_ProtoModID_descriptor_;
}
bool stRetUseHeroSkillBook_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetUseHeroSkillBook_ProtoModID stRetUseHeroSkillBook::ModID;
const stRetUseHeroSkillBook_ProtoModID stRetUseHeroSkillBook::ProtoModID_MIN;
const stRetUseHeroSkillBook_ProtoModID stRetUseHeroSkillBook::ProtoModID_MAX;
const int stRetUseHeroSkillBook::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetUseHeroSkillBook_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetUseHeroSkillBook_ProtoFunID_descriptor_;
}
bool stRetUseHeroSkillBook_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 144:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetUseHeroSkillBook_ProtoFunID stRetUseHeroSkillBook::FunID;
const stRetUseHeroSkillBook_ProtoFunID stRetUseHeroSkillBook::ProtoFunID_MIN;
const stRetUseHeroSkillBook_ProtoFunID stRetUseHeroSkillBook::ProtoFunID_MAX;
const int stRetUseHeroSkillBook::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRetUseHeroSkillBook::kResultFieldNumber;
#endif  // !_MSC_VER

stRetUseHeroSkillBook::stRetUseHeroSkillBook()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRetUseHeroSkillBook::InitAsDefaultInstance() {
}

stRetUseHeroSkillBook::stRetUseHeroSkillBook(const stRetUseHeroSkillBook& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRetUseHeroSkillBook::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRetUseHeroSkillBook::~stRetUseHeroSkillBook() {
  SharedDtor();
}

void stRetUseHeroSkillBook::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRetUseHeroSkillBook::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRetUseHeroSkillBook::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetUseHeroSkillBook_descriptor_;
}

const stRetUseHeroSkillBook& stRetUseHeroSkillBook::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stRetUseHeroSkillBook* stRetUseHeroSkillBook::default_instance_ = NULL;

stRetUseHeroSkillBook* stRetUseHeroSkillBook::New() const {
  return new stRetUseHeroSkillBook;
}

void stRetUseHeroSkillBook::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRetUseHeroSkillBook::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Role.stRetUseHeroSkillBook.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Role::stRetUseHeroSkillBook_eResult_IsValid(value)) {
            set_result(static_cast< ::Role::stRetUseHeroSkillBook_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRetUseHeroSkillBook::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Role.stRetUseHeroSkillBook.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRetUseHeroSkillBook::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Role.stRetUseHeroSkillBook.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRetUseHeroSkillBook::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Role.stRetUseHeroSkillBook.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRetUseHeroSkillBook::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRetUseHeroSkillBook* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRetUseHeroSkillBook*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRetUseHeroSkillBook::MergeFrom(const stRetUseHeroSkillBook& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRetUseHeroSkillBook::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRetUseHeroSkillBook::CopyFrom(const stRetUseHeroSkillBook& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRetUseHeroSkillBook::IsInitialized() const {

  return true;
}

void stRetUseHeroSkillBook::Swap(stRetUseHeroSkillBook* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRetUseHeroSkillBook::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRetUseHeroSkillBook_descriptor_;
  metadata.reflection = stRetUseHeroSkillBook_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqUseEquipSkillBook_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqUseEquipSkillBook_ProtoModID_descriptor_;
}
bool stReqUseEquipSkillBook_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqUseEquipSkillBook_ProtoModID stReqUseEquipSkillBook::ModID;
const stReqUseEquipSkillBook_ProtoModID stReqUseEquipSkillBook::ProtoModID_MIN;
const stReqUseEquipSkillBook_ProtoModID stReqUseEquipSkillBook::ProtoModID_MAX;
const int stReqUseEquipSkillBook::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqUseEquipSkillBook_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqUseEquipSkillBook_ProtoFunID_descriptor_;
}
bool stReqUseEquipSkillBook_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 145:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqUseEquipSkillBook_ProtoFunID stReqUseEquipSkillBook::FunID;
const stReqUseEquipSkillBook_ProtoFunID stReqUseEquipSkillBook::ProtoFunID_MIN;
const stReqUseEquipSkillBook_ProtoFunID stReqUseEquipSkillBook::ProtoFunID_MAX;
const int stReqUseEquipSkillBook::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqUseEquipSkillBook::kInstanceIDFieldNumber;
const int stReqUseEquipSkillBook::kDestBagTypeFieldNumber;
const int stReqUseEquipSkillBook::kDestInstanceIDFieldNumber;
#endif  // !_MSC_VER

stReqUseEquipSkillBook::stReqUseEquipSkillBook()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqUseEquipSkillBook::InitAsDefaultInstance() {
}

stReqUseEquipSkillBook::stReqUseEquipSkillBook(const stReqUseEquipSkillBook& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqUseEquipSkillBook::SharedCtor() {
  _cached_size_ = 0;
  instanceid_ = GOOGLE_ULONGLONG(0);
  destbagtype_ = 0u;
  destinstanceid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqUseEquipSkillBook::~stReqUseEquipSkillBook() {
  SharedDtor();
}

void stReqUseEquipSkillBook::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqUseEquipSkillBook::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqUseEquipSkillBook::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqUseEquipSkillBook_descriptor_;
}

const stReqUseEquipSkillBook& stReqUseEquipSkillBook::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stReqUseEquipSkillBook* stReqUseEquipSkillBook::default_instance_ = NULL;

stReqUseEquipSkillBook* stReqUseEquipSkillBook::New() const {
  return new stReqUseEquipSkillBook;
}

void stReqUseEquipSkillBook::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    instanceid_ = GOOGLE_ULONGLONG(0);
    destbagtype_ = 0u;
    destinstanceid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqUseEquipSkillBook::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 instanceID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &instanceid_)));
          set_has_instanceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_destBagType;
        break;
      }

      // optional uint32 destBagType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_destBagType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &destbagtype_)));
          set_has_destbagtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_destInstanceID;
        break;
      }

      // optional uint64 destInstanceID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_destInstanceID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &destinstanceid_)));
          set_has_destinstanceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqUseEquipSkillBook::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 instanceID = 1;
  if (has_instanceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->instanceid(), output);
  }

  // optional uint32 destBagType = 2;
  if (has_destbagtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->destbagtype(), output);
  }

  // optional uint64 destInstanceID = 3;
  if (has_destinstanceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->destinstanceid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqUseEquipSkillBook::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 instanceID = 1;
  if (has_instanceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->instanceid(), target);
  }

  // optional uint32 destBagType = 2;
  if (has_destbagtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->destbagtype(), target);
  }

  // optional uint64 destInstanceID = 3;
  if (has_destinstanceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->destinstanceid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqUseEquipSkillBook::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 instanceID = 1;
    if (has_instanceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->instanceid());
    }

    // optional uint32 destBagType = 2;
    if (has_destbagtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->destbagtype());
    }

    // optional uint64 destInstanceID = 3;
    if (has_destinstanceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->destinstanceid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqUseEquipSkillBook::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqUseEquipSkillBook* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqUseEquipSkillBook*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqUseEquipSkillBook::MergeFrom(const stReqUseEquipSkillBook& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_instanceid()) {
      set_instanceid(from.instanceid());
    }
    if (from.has_destbagtype()) {
      set_destbagtype(from.destbagtype());
    }
    if (from.has_destinstanceid()) {
      set_destinstanceid(from.destinstanceid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqUseEquipSkillBook::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqUseEquipSkillBook::CopyFrom(const stReqUseEquipSkillBook& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqUseEquipSkillBook::IsInitialized() const {

  return true;
}

void stReqUseEquipSkillBook::Swap(stReqUseEquipSkillBook* other) {
  if (other != this) {
    std::swap(instanceid_, other->instanceid_);
    std::swap(destbagtype_, other->destbagtype_);
    std::swap(destinstanceid_, other->destinstanceid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqUseEquipSkillBook::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqUseEquipSkillBook_descriptor_;
  metadata.reflection = stReqUseEquipSkillBook_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRetUseEquipSkillBook_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetUseEquipSkillBook_eResult_descriptor_;
}
bool stRetUseEquipSkillBook_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetUseEquipSkillBook_eResult stRetUseEquipSkillBook::eSuccess;
const stRetUseEquipSkillBook_eResult stRetUseEquipSkillBook::eItem_Not_Exist;
const stRetUseEquipSkillBook_eResult stRetUseEquipSkillBook::eEquip_Cond_Not_Meet;
const stRetUseEquipSkillBook_eResult stRetUseEquipSkillBook::eDec_Item_Fail;
const stRetUseEquipSkillBook_eResult stRetUseEquipSkillBook::eSkill_Exist;
const stRetUseEquipSkillBook_eResult stRetUseEquipSkillBook::eResult_MIN;
const stRetUseEquipSkillBook_eResult stRetUseEquipSkillBook::eResult_MAX;
const int stRetUseEquipSkillBook::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetUseEquipSkillBook_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetUseEquipSkillBook_ProtoModID_descriptor_;
}
bool stRetUseEquipSkillBook_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetUseEquipSkillBook_ProtoModID stRetUseEquipSkillBook::ModID;
const stRetUseEquipSkillBook_ProtoModID stRetUseEquipSkillBook::ProtoModID_MIN;
const stRetUseEquipSkillBook_ProtoModID stRetUseEquipSkillBook::ProtoModID_MAX;
const int stRetUseEquipSkillBook::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetUseEquipSkillBook_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetUseEquipSkillBook_ProtoFunID_descriptor_;
}
bool stRetUseEquipSkillBook_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 146:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetUseEquipSkillBook_ProtoFunID stRetUseEquipSkillBook::FunID;
const stRetUseEquipSkillBook_ProtoFunID stRetUseEquipSkillBook::ProtoFunID_MIN;
const stRetUseEquipSkillBook_ProtoFunID stRetUseEquipSkillBook::ProtoFunID_MAX;
const int stRetUseEquipSkillBook::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRetUseEquipSkillBook::kResultFieldNumber;
#endif  // !_MSC_VER

stRetUseEquipSkillBook::stRetUseEquipSkillBook()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRetUseEquipSkillBook::InitAsDefaultInstance() {
}

stRetUseEquipSkillBook::stRetUseEquipSkillBook(const stRetUseEquipSkillBook& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRetUseEquipSkillBook::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRetUseEquipSkillBook::~stRetUseEquipSkillBook() {
  SharedDtor();
}

void stRetUseEquipSkillBook::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRetUseEquipSkillBook::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRetUseEquipSkillBook::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetUseEquipSkillBook_descriptor_;
}

const stRetUseEquipSkillBook& stRetUseEquipSkillBook::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stRetUseEquipSkillBook* stRetUseEquipSkillBook::default_instance_ = NULL;

stRetUseEquipSkillBook* stRetUseEquipSkillBook::New() const {
  return new stRetUseEquipSkillBook;
}

void stRetUseEquipSkillBook::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRetUseEquipSkillBook::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Role.stRetUseEquipSkillBook.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Role::stRetUseEquipSkillBook_eResult_IsValid(value)) {
            set_result(static_cast< ::Role::stRetUseEquipSkillBook_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRetUseEquipSkillBook::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Role.stRetUseEquipSkillBook.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRetUseEquipSkillBook::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Role.stRetUseEquipSkillBook.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRetUseEquipSkillBook::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Role.stRetUseEquipSkillBook.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRetUseEquipSkillBook::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRetUseEquipSkillBook* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRetUseEquipSkillBook*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRetUseEquipSkillBook::MergeFrom(const stRetUseEquipSkillBook& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRetUseEquipSkillBook::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRetUseEquipSkillBook::CopyFrom(const stRetUseEquipSkillBook& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRetUseEquipSkillBook::IsInitialized() const {

  return true;
}

void stRetUseEquipSkillBook::Swap(stRetUseEquipSkillBook* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRetUseEquipSkillBook::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRetUseEquipSkillBook_descriptor_;
  metadata.reflection = stRetUseEquipSkillBook_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqBreakEquip_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqBreakEquip_ProtoModID_descriptor_;
}
bool stReqBreakEquip_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqBreakEquip_ProtoModID stReqBreakEquip::ModID;
const stReqBreakEquip_ProtoModID stReqBreakEquip::ProtoModID_MIN;
const stReqBreakEquip_ProtoModID stReqBreakEquip::ProtoModID_MAX;
const int stReqBreakEquip::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqBreakEquip_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqBreakEquip_ProtoFunID_descriptor_;
}
bool stReqBreakEquip_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 147:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqBreakEquip_ProtoFunID stReqBreakEquip::FunID;
const stReqBreakEquip_ProtoFunID stReqBreakEquip::ProtoFunID_MIN;
const stReqBreakEquip_ProtoFunID stReqBreakEquip::ProtoFunID_MAX;
const int stReqBreakEquip::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqBreakEquip::kBagTypeFieldNumber;
const int stReqBreakEquip::kInstanceIDFieldNumber;
#endif  // !_MSC_VER

stReqBreakEquip::stReqBreakEquip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqBreakEquip::InitAsDefaultInstance() {
}

stReqBreakEquip::stReqBreakEquip(const stReqBreakEquip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqBreakEquip::SharedCtor() {
  _cached_size_ = 0;
  bagtype_ = 0u;
  instanceid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqBreakEquip::~stReqBreakEquip() {
  SharedDtor();
}

void stReqBreakEquip::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqBreakEquip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqBreakEquip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqBreakEquip_descriptor_;
}

const stReqBreakEquip& stReqBreakEquip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stReqBreakEquip* stReqBreakEquip::default_instance_ = NULL;

stReqBreakEquip* stReqBreakEquip::New() const {
  return new stReqBreakEquip;
}

void stReqBreakEquip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bagtype_ = 0u;
    instanceid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqBreakEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 bagType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bagtype_)));
          set_has_bagtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_instanceID;
        break;
      }

      // optional uint64 instanceID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_instanceID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &instanceid_)));
          set_has_instanceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqBreakEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 bagType = 1;
  if (has_bagtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bagtype(), output);
  }

  // optional uint64 instanceID = 2;
  if (has_instanceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->instanceid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqBreakEquip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 bagType = 1;
  if (has_bagtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bagtype(), target);
  }

  // optional uint64 instanceID = 2;
  if (has_instanceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->instanceid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqBreakEquip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 bagType = 1;
    if (has_bagtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bagtype());
    }

    // optional uint64 instanceID = 2;
    if (has_instanceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->instanceid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqBreakEquip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqBreakEquip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqBreakEquip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqBreakEquip::MergeFrom(const stReqBreakEquip& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bagtype()) {
      set_bagtype(from.bagtype());
    }
    if (from.has_instanceid()) {
      set_instanceid(from.instanceid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqBreakEquip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqBreakEquip::CopyFrom(const stReqBreakEquip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqBreakEquip::IsInitialized() const {

  return true;
}

void stReqBreakEquip::Swap(stReqBreakEquip* other) {
  if (other != this) {
    std::swap(bagtype_, other->bagtype_);
    std::swap(instanceid_, other->instanceid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqBreakEquip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqBreakEquip_descriptor_;
  metadata.reflection = stReqBreakEquip_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stBreakEquipResult_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stBreakEquipResult_eResult_descriptor_;
}
bool stBreakEquipResult_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stBreakEquipResult_eResult stBreakEquipResult::eSUCCESS;
const stBreakEquipResult_eResult stBreakEquipResult::eEQUIP_NOT_EXIST;
const stBreakEquipResult_eResult stBreakEquipResult::eINNER_ERROR;
const stBreakEquipResult_eResult stBreakEquipResult::eGOLDCOIN_NOT_ENOUGH;
const stBreakEquipResult_eResult stBreakEquipResult::eITEM_NOT_ENOUGH;
const stBreakEquipResult_eResult stBreakEquipResult::eRAISE_LV_LIMIT;
const stBreakEquipResult_eResult stBreakEquipResult::eFULL_LV;
const stBreakEquipResult_eResult stBreakEquipResult::eITEM_NOT_ORANGE;
const stBreakEquipResult_eResult stBreakEquipResult::eResult_MIN;
const stBreakEquipResult_eResult stBreakEquipResult::eResult_MAX;
const int stBreakEquipResult::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stBreakEquipResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stBreakEquipResult_ProtoModID_descriptor_;
}
bool stBreakEquipResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stBreakEquipResult_ProtoModID stBreakEquipResult::ModID;
const stBreakEquipResult_ProtoModID stBreakEquipResult::ProtoModID_MIN;
const stBreakEquipResult_ProtoModID stBreakEquipResult::ProtoModID_MAX;
const int stBreakEquipResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stBreakEquipResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stBreakEquipResult_ProtoFunID_descriptor_;
}
bool stBreakEquipResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 148:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stBreakEquipResult_ProtoFunID stBreakEquipResult::FunID;
const stBreakEquipResult_ProtoFunID stBreakEquipResult::ProtoFunID_MIN;
const stBreakEquipResult_ProtoFunID stBreakEquipResult::ProtoFunID_MAX;
const int stBreakEquipResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stBreakEquipResult::kBagTypeFieldNumber;
const int stBreakEquipResult::kInstanceIDFieldNumber;
const int stBreakEquipResult::kResultFieldNumber;
#endif  // !_MSC_VER

stBreakEquipResult::stBreakEquipResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stBreakEquipResult::InitAsDefaultInstance() {
}

stBreakEquipResult::stBreakEquipResult(const stBreakEquipResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stBreakEquipResult::SharedCtor() {
  _cached_size_ = 0;
  bagtype_ = 0u;
  instanceid_ = GOOGLE_ULONGLONG(0);
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stBreakEquipResult::~stBreakEquipResult() {
  SharedDtor();
}

void stBreakEquipResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stBreakEquipResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stBreakEquipResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stBreakEquipResult_descriptor_;
}

const stBreakEquipResult& stBreakEquipResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stBreakEquipResult* stBreakEquipResult::default_instance_ = NULL;

stBreakEquipResult* stBreakEquipResult::New() const {
  return new stBreakEquipResult;
}

void stBreakEquipResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bagtype_ = 0u;
    instanceid_ = GOOGLE_ULONGLONG(0);
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stBreakEquipResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 bagType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bagtype_)));
          set_has_bagtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_instanceID;
        break;
      }

      // optional uint64 instanceID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_instanceID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &instanceid_)));
          set_has_instanceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // optional .Role.stBreakEquipResult.eResult result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Role::stBreakEquipResult_eResult_IsValid(value)) {
            set_result(static_cast< ::Role::stBreakEquipResult_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stBreakEquipResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 bagType = 1;
  if (has_bagtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bagtype(), output);
  }

  // optional uint64 instanceID = 2;
  if (has_instanceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->instanceid(), output);
  }

  // optional .Role.stBreakEquipResult.eResult result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stBreakEquipResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 bagType = 1;
  if (has_bagtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bagtype(), target);
  }

  // optional uint64 instanceID = 2;
  if (has_instanceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->instanceid(), target);
  }

  // optional .Role.stBreakEquipResult.eResult result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stBreakEquipResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 bagType = 1;
    if (has_bagtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bagtype());
    }

    // optional uint64 instanceID = 2;
    if (has_instanceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->instanceid());
    }

    // optional .Role.stBreakEquipResult.eResult result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stBreakEquipResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stBreakEquipResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stBreakEquipResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stBreakEquipResult::MergeFrom(const stBreakEquipResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bagtype()) {
      set_bagtype(from.bagtype());
    }
    if (from.has_instanceid()) {
      set_instanceid(from.instanceid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stBreakEquipResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stBreakEquipResult::CopyFrom(const stBreakEquipResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stBreakEquipResult::IsInitialized() const {

  return true;
}

void stBreakEquipResult::Swap(stBreakEquipResult* other) {
  if (other != this) {
    std::swap(bagtype_, other->bagtype_);
    std::swap(instanceid_, other->instanceid_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stBreakEquipResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stBreakEquipResult_descriptor_;
  metadata.reflection = stBreakEquipResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqRecastHero_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqRecastHero_ProtoModID_descriptor_;
}
bool stReqRecastHero_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqRecastHero_ProtoModID stReqRecastHero::ModID;
const stReqRecastHero_ProtoModID stReqRecastHero::ProtoModID_MIN;
const stReqRecastHero_ProtoModID stReqRecastHero::ProtoModID_MAX;
const int stReqRecastHero::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqRecastHero_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqRecastHero_ProtoFunID_descriptor_;
}
bool stReqRecastHero_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 149:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqRecastHero_ProtoFunID stReqRecastHero::FunID;
const stReqRecastHero_ProtoFunID stReqRecastHero::ProtoFunID_MIN;
const stReqRecastHero_ProtoFunID stReqRecastHero::ProtoFunID_MAX;
const int stReqRecastHero::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqRecastHero::kHeroIDFieldNumber;
#endif  // !_MSC_VER

stReqRecastHero::stReqRecastHero()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqRecastHero::InitAsDefaultInstance() {
}

stReqRecastHero::stReqRecastHero(const stReqRecastHero& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqRecastHero::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqRecastHero::~stReqRecastHero() {
  SharedDtor();
}

void stReqRecastHero::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqRecastHero::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqRecastHero::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqRecastHero_descriptor_;
}

const stReqRecastHero& stReqRecastHero::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stReqRecastHero* stReqRecastHero::default_instance_ = NULL;

stReqRecastHero* stReqRecastHero::New() const {
  return new stReqRecastHero;
}

void stReqRecastHero::Clear() {
  heroid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqRecastHero::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 heroID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_heroID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_heroid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_heroid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_heroID;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqRecastHero::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 heroID = 2;
  for (int i = 0; i < this->heroid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->heroid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqRecastHero::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 heroID = 2;
  for (int i = 0; i < this->heroid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->heroid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqRecastHero::ByteSize() const {
  int total_size = 0;

  // repeated uint32 heroID = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->heroid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->heroid(i));
    }
    total_size += 1 * this->heroid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqRecastHero::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqRecastHero* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqRecastHero*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqRecastHero::MergeFrom(const stReqRecastHero& from) {
  GOOGLE_CHECK_NE(&from, this);
  heroid_.MergeFrom(from.heroid_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqRecastHero::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqRecastHero::CopyFrom(const stReqRecastHero& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqRecastHero::IsInitialized() const {

  return true;
}

void stReqRecastHero::Swap(stReqRecastHero* other) {
  if (other != this) {
    heroid_.Swap(&other->heroid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqRecastHero::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqRecastHero_descriptor_;
  metadata.reflection = stReqRecastHero_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRecastHeroResult_Result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRecastHeroResult_Result_descriptor_;
}
bool stRecastHeroResult_Result_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRecastHeroResult_Result stRecastHeroResult::SUCCESS;
const stRecastHeroResult_Result stRecastHeroResult::DIAMOND_NOT_ENOUGH;
const stRecastHeroResult_Result stRecastHeroResult::BAG_FULL;
const stRecastHeroResult_Result stRecastHeroResult::CANNT_SMELT;
const stRecastHeroResult_Result stRecastHeroResult::HERO_NOT_EXIST;
const stRecastHeroResult_Result stRecastHeroResult::INNER_ERROR;
const stRecastHeroResult_Result stRecastHeroResult::Result_MIN;
const stRecastHeroResult_Result stRecastHeroResult::Result_MAX;
const int stRecastHeroResult::Result_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRecastHeroResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRecastHeroResult_ProtoModID_descriptor_;
}
bool stRecastHeroResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRecastHeroResult_ProtoModID stRecastHeroResult::ModID;
const stRecastHeroResult_ProtoModID stRecastHeroResult::ProtoModID_MIN;
const stRecastHeroResult_ProtoModID stRecastHeroResult::ProtoModID_MAX;
const int stRecastHeroResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRecastHeroResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRecastHeroResult_ProtoFunID_descriptor_;
}
bool stRecastHeroResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 150:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRecastHeroResult_ProtoFunID stRecastHeroResult::FunID;
const stRecastHeroResult_ProtoFunID stRecastHeroResult::ProtoFunID_MIN;
const stRecastHeroResult_ProtoFunID stRecastHeroResult::ProtoFunID_MAX;
const int stRecastHeroResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRecastHeroResult::kResultFieldNumber;
#endif  // !_MSC_VER

stRecastHeroResult::stRecastHeroResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRecastHeroResult::InitAsDefaultInstance() {
}

stRecastHeroResult::stRecastHeroResult(const stRecastHeroResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRecastHeroResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRecastHeroResult::~stRecastHeroResult() {
  SharedDtor();
}

void stRecastHeroResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRecastHeroResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRecastHeroResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRecastHeroResult_descriptor_;
}

const stRecastHeroResult& stRecastHeroResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stRecastHeroResult* stRecastHeroResult::default_instance_ = NULL;

stRecastHeroResult* stRecastHeroResult::New() const {
  return new stRecastHeroResult;
}

void stRecastHeroResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRecastHeroResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Role.stRecastHeroResult.Result result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Role::stRecastHeroResult_Result_IsValid(value)) {
            set_result(static_cast< ::Role::stRecastHeroResult_Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRecastHeroResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Role.stRecastHeroResult.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRecastHeroResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Role.stRecastHeroResult.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRecastHeroResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Role.stRecastHeroResult.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRecastHeroResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRecastHeroResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRecastHeroResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRecastHeroResult::MergeFrom(const stRecastHeroResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRecastHeroResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRecastHeroResult::CopyFrom(const stRecastHeroResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRecastHeroResult::IsInitialized() const {

  return true;
}

void stRecastHeroResult::Swap(stRecastHeroResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRecastHeroResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRecastHeroResult_descriptor_;
  metadata.reflection = stRecastHeroResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqChangeName_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqChangeName_ProtoModID_descriptor_;
}
bool stReqChangeName_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqChangeName_ProtoModID stReqChangeName::ModID;
const stReqChangeName_ProtoModID stReqChangeName::ProtoModID_MIN;
const stReqChangeName_ProtoModID stReqChangeName::ProtoModID_MAX;
const int stReqChangeName::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqChangeName_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqChangeName_ProtoFunID_descriptor_;
}
bool stReqChangeName_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 151:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqChangeName_ProtoFunID stReqChangeName::FunID;
const stReqChangeName_ProtoFunID stReqChangeName::ProtoFunID_MIN;
const stReqChangeName_ProtoFunID stReqChangeName::ProtoFunID_MAX;
const int stReqChangeName::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqChangeName::kNameFieldNumber;
const int stReqChangeName::kCharIDFieldNumber;
#endif  // !_MSC_VER

stReqChangeName::stReqChangeName()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqChangeName::InitAsDefaultInstance() {
}

stReqChangeName::stReqChangeName(const stReqChangeName& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqChangeName::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqChangeName::~stReqChangeName() {
  SharedDtor();
}

void stReqChangeName::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void stReqChangeName::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqChangeName::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqChangeName_descriptor_;
}

const stReqChangeName& stReqChangeName::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stReqChangeName* stReqChangeName::default_instance_ = NULL;

stReqChangeName* stReqChangeName::New() const {
  return new stReqChangeName;
}

void stReqChangeName::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqChangeName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_charID;
        break;
      }

      // optional uint32 charID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqChangeName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional uint32 charID = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqChangeName::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional uint32 charID = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqChangeName::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 charID = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqChangeName::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqChangeName* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqChangeName*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqChangeName::MergeFrom(const stReqChangeName& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqChangeName::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqChangeName::CopyFrom(const stReqChangeName& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqChangeName::IsInitialized() const {

  return true;
}

void stReqChangeName::Swap(stReqChangeName* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqChangeName::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqChangeName_descriptor_;
  metadata.reflection = stReqChangeName_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stChangeNameResult_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stChangeNameResult_eResult_descriptor_;
}
bool stChangeNameResult_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stChangeNameResult_eResult stChangeNameResult::eSuccess;
const stChangeNameResult_eResult stChangeNameResult::eNot_Enough_Diamond;
const stChangeNameResult_eResult stChangeNameResult::eName_Occupied;
const stChangeNameResult_eResult stChangeNameResult::eResult_MIN;
const stChangeNameResult_eResult stChangeNameResult::eResult_MAX;
const int stChangeNameResult::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stChangeNameResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stChangeNameResult_ProtoModID_descriptor_;
}
bool stChangeNameResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stChangeNameResult_ProtoModID stChangeNameResult::ModID;
const stChangeNameResult_ProtoModID stChangeNameResult::ProtoModID_MIN;
const stChangeNameResult_ProtoModID stChangeNameResult::ProtoModID_MAX;
const int stChangeNameResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stChangeNameResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stChangeNameResult_ProtoFunID_descriptor_;
}
bool stChangeNameResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 152:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stChangeNameResult_ProtoFunID stChangeNameResult::FunID;
const stChangeNameResult_ProtoFunID stChangeNameResult::ProtoFunID_MIN;
const stChangeNameResult_ProtoFunID stChangeNameResult::ProtoFunID_MAX;
const int stChangeNameResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stChangeNameResult::kResultFieldNumber;
const int stChangeNameResult::kNameFieldNumber;
#endif  // !_MSC_VER

stChangeNameResult::stChangeNameResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stChangeNameResult::InitAsDefaultInstance() {
}

stChangeNameResult::stChangeNameResult(const stChangeNameResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stChangeNameResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stChangeNameResult::~stChangeNameResult() {
  SharedDtor();
}

void stChangeNameResult::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void stChangeNameResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stChangeNameResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stChangeNameResult_descriptor_;
}

const stChangeNameResult& stChangeNameResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stChangeNameResult* stChangeNameResult::default_instance_ = NULL;

stChangeNameResult* stChangeNameResult::New() const {
  return new stChangeNameResult;
}

void stChangeNameResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stChangeNameResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Role.stChangeNameResult.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Role::stChangeNameResult_eResult_IsValid(value)) {
            set_result(static_cast< ::Role::stChangeNameResult_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stChangeNameResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Role.stChangeNameResult.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stChangeNameResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Role.stChangeNameResult.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stChangeNameResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Role.stChangeNameResult.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stChangeNameResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stChangeNameResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stChangeNameResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stChangeNameResult::MergeFrom(const stChangeNameResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stChangeNameResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stChangeNameResult::CopyFrom(const stChangeNameResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stChangeNameResult::IsInitialized() const {

  return true;
}

void stChangeNameResult::Swap(stChangeNameResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stChangeNameResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stChangeNameResult_descriptor_;
  metadata.reflection = stChangeNameResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqOpenBuyGoldWindow_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqOpenBuyGoldWindow_ProtoModID_descriptor_;
}
bool stReqOpenBuyGoldWindow_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqOpenBuyGoldWindow_ProtoModID stReqOpenBuyGoldWindow::ModID;
const stReqOpenBuyGoldWindow_ProtoModID stReqOpenBuyGoldWindow::ProtoModID_MIN;
const stReqOpenBuyGoldWindow_ProtoModID stReqOpenBuyGoldWindow::ProtoModID_MAX;
const int stReqOpenBuyGoldWindow::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqOpenBuyGoldWindow_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqOpenBuyGoldWindow_ProtoFunID_descriptor_;
}
bool stReqOpenBuyGoldWindow_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 153:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqOpenBuyGoldWindow_ProtoFunID stReqOpenBuyGoldWindow::FunID;
const stReqOpenBuyGoldWindow_ProtoFunID stReqOpenBuyGoldWindow::ProtoFunID_MIN;
const stReqOpenBuyGoldWindow_ProtoFunID stReqOpenBuyGoldWindow::ProtoFunID_MAX;
const int stReqOpenBuyGoldWindow::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqOpenBuyGoldWindow::kCharIDFieldNumber;
#endif  // !_MSC_VER

stReqOpenBuyGoldWindow::stReqOpenBuyGoldWindow()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqOpenBuyGoldWindow::InitAsDefaultInstance() {
}

stReqOpenBuyGoldWindow::stReqOpenBuyGoldWindow(const stReqOpenBuyGoldWindow& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqOpenBuyGoldWindow::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqOpenBuyGoldWindow::~stReqOpenBuyGoldWindow() {
  SharedDtor();
}

void stReqOpenBuyGoldWindow::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqOpenBuyGoldWindow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqOpenBuyGoldWindow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqOpenBuyGoldWindow_descriptor_;
}

const stReqOpenBuyGoldWindow& stReqOpenBuyGoldWindow::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stReqOpenBuyGoldWindow* stReqOpenBuyGoldWindow::default_instance_ = NULL;

stReqOpenBuyGoldWindow* stReqOpenBuyGoldWindow::New() const {
  return new stReqOpenBuyGoldWindow;
}

void stReqOpenBuyGoldWindow::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqOpenBuyGoldWindow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqOpenBuyGoldWindow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqOpenBuyGoldWindow::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqOpenBuyGoldWindow::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqOpenBuyGoldWindow::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqOpenBuyGoldWindow* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqOpenBuyGoldWindow*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqOpenBuyGoldWindow::MergeFrom(const stReqOpenBuyGoldWindow& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqOpenBuyGoldWindow::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqOpenBuyGoldWindow::CopyFrom(const stReqOpenBuyGoldWindow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqOpenBuyGoldWindow::IsInitialized() const {

  return true;
}

void stReqOpenBuyGoldWindow::Swap(stReqOpenBuyGoldWindow* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqOpenBuyGoldWindow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqOpenBuyGoldWindow_descriptor_;
  metadata.reflection = stReqOpenBuyGoldWindow_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stOpenBuyGoldWindowResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stOpenBuyGoldWindowResult_ProtoModID_descriptor_;
}
bool stOpenBuyGoldWindowResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stOpenBuyGoldWindowResult_ProtoModID stOpenBuyGoldWindowResult::ModID;
const stOpenBuyGoldWindowResult_ProtoModID stOpenBuyGoldWindowResult::ProtoModID_MIN;
const stOpenBuyGoldWindowResult_ProtoModID stOpenBuyGoldWindowResult::ProtoModID_MAX;
const int stOpenBuyGoldWindowResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stOpenBuyGoldWindowResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stOpenBuyGoldWindowResult_ProtoFunID_descriptor_;
}
bool stOpenBuyGoldWindowResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 154:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stOpenBuyGoldWindowResult_ProtoFunID stOpenBuyGoldWindowResult::FunID;
const stOpenBuyGoldWindowResult_ProtoFunID stOpenBuyGoldWindowResult::ProtoFunID_MIN;
const stOpenBuyGoldWindowResult_ProtoFunID stOpenBuyGoldWindowResult::ProtoFunID_MAX;
const int stOpenBuyGoldWindowResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stOpenBuyGoldWindowResult::kBuyCountFieldNumber;
#endif  // !_MSC_VER

stOpenBuyGoldWindowResult::stOpenBuyGoldWindowResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stOpenBuyGoldWindowResult::InitAsDefaultInstance() {
}

stOpenBuyGoldWindowResult::stOpenBuyGoldWindowResult(const stOpenBuyGoldWindowResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stOpenBuyGoldWindowResult::SharedCtor() {
  _cached_size_ = 0;
  buycount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stOpenBuyGoldWindowResult::~stOpenBuyGoldWindowResult() {
  SharedDtor();
}

void stOpenBuyGoldWindowResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stOpenBuyGoldWindowResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stOpenBuyGoldWindowResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stOpenBuyGoldWindowResult_descriptor_;
}

const stOpenBuyGoldWindowResult& stOpenBuyGoldWindowResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stOpenBuyGoldWindowResult* stOpenBuyGoldWindowResult::default_instance_ = NULL;

stOpenBuyGoldWindowResult* stOpenBuyGoldWindowResult::New() const {
  return new stOpenBuyGoldWindowResult;
}

void stOpenBuyGoldWindowResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    buycount_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stOpenBuyGoldWindowResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 buyCount = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buycount_)));
          set_has_buycount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stOpenBuyGoldWindowResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 buyCount = 1;
  if (has_buycount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->buycount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stOpenBuyGoldWindowResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 buyCount = 1;
  if (has_buycount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->buycount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stOpenBuyGoldWindowResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 buyCount = 1;
    if (has_buycount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buycount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stOpenBuyGoldWindowResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stOpenBuyGoldWindowResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stOpenBuyGoldWindowResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stOpenBuyGoldWindowResult::MergeFrom(const stOpenBuyGoldWindowResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buycount()) {
      set_buycount(from.buycount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stOpenBuyGoldWindowResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stOpenBuyGoldWindowResult::CopyFrom(const stOpenBuyGoldWindowResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stOpenBuyGoldWindowResult::IsInitialized() const {

  return true;
}

void stOpenBuyGoldWindowResult::Swap(stOpenBuyGoldWindowResult* other) {
  if (other != this) {
    std::swap(buycount_, other->buycount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stOpenBuyGoldWindowResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stOpenBuyGoldWindowResult_descriptor_;
  metadata.reflection = stOpenBuyGoldWindowResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqBuyGold_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqBuyGold_ProtoModID_descriptor_;
}
bool stReqBuyGold_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqBuyGold_ProtoModID stReqBuyGold::ModID;
const stReqBuyGold_ProtoModID stReqBuyGold::ProtoModID_MIN;
const stReqBuyGold_ProtoModID stReqBuyGold::ProtoModID_MAX;
const int stReqBuyGold::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqBuyGold_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqBuyGold_ProtoFunID_descriptor_;
}
bool stReqBuyGold_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 155:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqBuyGold_ProtoFunID stReqBuyGold::FunID;
const stReqBuyGold_ProtoFunID stReqBuyGold::ProtoFunID_MIN;
const stReqBuyGold_ProtoFunID stReqBuyGold::ProtoFunID_MAX;
const int stReqBuyGold::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqBuyGold::kCharIDFieldNumber;
#endif  // !_MSC_VER

stReqBuyGold::stReqBuyGold()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqBuyGold::InitAsDefaultInstance() {
}

stReqBuyGold::stReqBuyGold(const stReqBuyGold& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqBuyGold::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqBuyGold::~stReqBuyGold() {
  SharedDtor();
}

void stReqBuyGold::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqBuyGold::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqBuyGold::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqBuyGold_descriptor_;
}

const stReqBuyGold& stReqBuyGold::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stReqBuyGold* stReqBuyGold::default_instance_ = NULL;

stReqBuyGold* stReqBuyGold::New() const {
  return new stReqBuyGold;
}

void stReqBuyGold::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqBuyGold::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqBuyGold::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqBuyGold::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqBuyGold::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqBuyGold::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqBuyGold* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqBuyGold*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqBuyGold::MergeFrom(const stReqBuyGold& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqBuyGold::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqBuyGold::CopyFrom(const stReqBuyGold& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqBuyGold::IsInitialized() const {

  return true;
}

void stReqBuyGold::Swap(stReqBuyGold* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqBuyGold::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqBuyGold_descriptor_;
  metadata.reflection = stReqBuyGold_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stBuyGoldResult_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stBuyGoldResult_eResult_descriptor_;
}
bool stBuyGoldResult_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stBuyGoldResult_eResult stBuyGoldResult::eSuccess;
const stBuyGoldResult_eResult stBuyGoldResult::eInner_Cfg_Error;
const stBuyGoldResult_eResult stBuyGoldResult::eGoldCoin_Not_Enough;
const stBuyGoldResult_eResult stBuyGoldResult::eRole_Vip_Limit;
const stBuyGoldResult_eResult stBuyGoldResult::eResult_MIN;
const stBuyGoldResult_eResult stBuyGoldResult::eResult_MAX;
const int stBuyGoldResult::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stBuyGoldResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stBuyGoldResult_ProtoModID_descriptor_;
}
bool stBuyGoldResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stBuyGoldResult_ProtoModID stBuyGoldResult::ModID;
const stBuyGoldResult_ProtoModID stBuyGoldResult::ProtoModID_MIN;
const stBuyGoldResult_ProtoModID stBuyGoldResult::ProtoModID_MAX;
const int stBuyGoldResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stBuyGoldResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stBuyGoldResult_ProtoFunID_descriptor_;
}
bool stBuyGoldResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 156:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stBuyGoldResult_ProtoFunID stBuyGoldResult::FunID;
const stBuyGoldResult_ProtoFunID stBuyGoldResult::ProtoFunID_MIN;
const stBuyGoldResult_ProtoFunID stBuyGoldResult::ProtoFunID_MAX;
const int stBuyGoldResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stBuyGoldResult::kResultFieldNumber;
#endif  // !_MSC_VER

stBuyGoldResult::stBuyGoldResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stBuyGoldResult::InitAsDefaultInstance() {
}

stBuyGoldResult::stBuyGoldResult(const stBuyGoldResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stBuyGoldResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stBuyGoldResult::~stBuyGoldResult() {
  SharedDtor();
}

void stBuyGoldResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stBuyGoldResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stBuyGoldResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stBuyGoldResult_descriptor_;
}

const stBuyGoldResult& stBuyGoldResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stBuyGoldResult* stBuyGoldResult::default_instance_ = NULL;

stBuyGoldResult* stBuyGoldResult::New() const {
  return new stBuyGoldResult;
}

void stBuyGoldResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stBuyGoldResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Role.stBuyGoldResult.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Role::stBuyGoldResult_eResult_IsValid(value)) {
            set_result(static_cast< ::Role::stBuyGoldResult_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stBuyGoldResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Role.stBuyGoldResult.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stBuyGoldResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Role.stBuyGoldResult.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stBuyGoldResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Role.stBuyGoldResult.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stBuyGoldResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stBuyGoldResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stBuyGoldResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stBuyGoldResult::MergeFrom(const stBuyGoldResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stBuyGoldResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stBuyGoldResult::CopyFrom(const stBuyGoldResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stBuyGoldResult::IsInitialized() const {

  return true;
}

void stBuyGoldResult::Swap(stBuyGoldResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stBuyGoldResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stBuyGoldResult_descriptor_;
  metadata.reflection = stBuyGoldResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stSendImpactHeroInfo_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSendImpactHeroInfo_ProtoModID_descriptor_;
}
bool stSendImpactHeroInfo_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSendImpactHeroInfo_ProtoModID stSendImpactHeroInfo::ModID;
const stSendImpactHeroInfo_ProtoModID stSendImpactHeroInfo::ProtoModID_MIN;
const stSendImpactHeroInfo_ProtoModID stSendImpactHeroInfo::ProtoModID_MAX;
const int stSendImpactHeroInfo::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSendImpactHeroInfo_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSendImpactHeroInfo_ProtoFunID_descriptor_;
}
bool stSendImpactHeroInfo_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 157:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSendImpactHeroInfo_ProtoFunID stSendImpactHeroInfo::FunID;
const stSendImpactHeroInfo_ProtoFunID stSendImpactHeroInfo::ProtoFunID_MIN;
const stSendImpactHeroInfo_ProtoFunID stSendImpactHeroInfo::ProtoFunID_MAX;
const int stSendImpactHeroInfo::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stSendImpactHeroInfo::kDataFieldNumber;
#endif  // !_MSC_VER

stSendImpactHeroInfo::stSendImpactHeroInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSendImpactHeroInfo::InitAsDefaultInstance() {
}

stSendImpactHeroInfo::stSendImpactHeroInfo(const stSendImpactHeroInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSendImpactHeroInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSendImpactHeroInfo::~stSendImpactHeroInfo() {
  SharedDtor();
}

void stSendImpactHeroInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stSendImpactHeroInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSendImpactHeroInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSendImpactHeroInfo_descriptor_;
}

const stSendImpactHeroInfo& stSendImpactHeroInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stSendImpactHeroInfo* stSendImpactHeroInfo::default_instance_ = NULL;

stSendImpactHeroInfo* stSendImpactHeroInfo::New() const {
  return new stSendImpactHeroInfo;
}

void stSendImpactHeroInfo::Clear() {
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSendImpactHeroInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Role.stImpactHeroInfo data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSendImpactHeroInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Role.stImpactHeroInfo data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSendImpactHeroInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Role.stImpactHeroInfo data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSendImpactHeroInfo::ByteSize() const {
  int total_size = 0;

  // repeated .Role.stImpactHeroInfo data = 1;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSendImpactHeroInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSendImpactHeroInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSendImpactHeroInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSendImpactHeroInfo::MergeFrom(const stSendImpactHeroInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSendImpactHeroInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSendImpactHeroInfo::CopyFrom(const stSendImpactHeroInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSendImpactHeroInfo::IsInitialized() const {

  return true;
}

void stSendImpactHeroInfo::Swap(stSendImpactHeroInfo* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSendImpactHeroInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSendImpactHeroInfo_descriptor_;
  metadata.reflection = stSendImpactHeroInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stExpBookLevelLimit_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stExpBookLevelLimit_eResult_descriptor_;
}
bool stExpBookLevelLimit_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stExpBookLevelLimit_eResult stExpBookLevelLimit::LV_TOO_LOW;
const stExpBookLevelLimit_eResult stExpBookLevelLimit::LV_TOO_HIGH;
const stExpBookLevelLimit_eResult stExpBookLevelLimit::eResult_MIN;
const stExpBookLevelLimit_eResult stExpBookLevelLimit::eResult_MAX;
const int stExpBookLevelLimit::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stExpBookLevelLimit_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stExpBookLevelLimit_ProtoModID_descriptor_;
}
bool stExpBookLevelLimit_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stExpBookLevelLimit_ProtoModID stExpBookLevelLimit::ModID;
const stExpBookLevelLimit_ProtoModID stExpBookLevelLimit::ProtoModID_MIN;
const stExpBookLevelLimit_ProtoModID stExpBookLevelLimit::ProtoModID_MAX;
const int stExpBookLevelLimit::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stExpBookLevelLimit_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stExpBookLevelLimit_ProtoFunID_descriptor_;
}
bool stExpBookLevelLimit_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 158:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stExpBookLevelLimit_ProtoFunID stExpBookLevelLimit::FunID;
const stExpBookLevelLimit_ProtoFunID stExpBookLevelLimit::ProtoFunID_MIN;
const stExpBookLevelLimit_ProtoFunID stExpBookLevelLimit::ProtoFunID_MAX;
const int stExpBookLevelLimit::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stExpBookLevelLimit::kResultFieldNumber;
#endif  // !_MSC_VER

stExpBookLevelLimit::stExpBookLevelLimit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stExpBookLevelLimit::InitAsDefaultInstance() {
}

stExpBookLevelLimit::stExpBookLevelLimit(const stExpBookLevelLimit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stExpBookLevelLimit::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stExpBookLevelLimit::~stExpBookLevelLimit() {
  SharedDtor();
}

void stExpBookLevelLimit::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stExpBookLevelLimit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stExpBookLevelLimit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stExpBookLevelLimit_descriptor_;
}

const stExpBookLevelLimit& stExpBookLevelLimit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stExpBookLevelLimit* stExpBookLevelLimit::default_instance_ = NULL;

stExpBookLevelLimit* stExpBookLevelLimit::New() const {
  return new stExpBookLevelLimit;
}

void stExpBookLevelLimit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stExpBookLevelLimit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Role.stExpBookLevelLimit.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Role::stExpBookLevelLimit_eResult_IsValid(value)) {
            set_result(static_cast< ::Role::stExpBookLevelLimit_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stExpBookLevelLimit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Role.stExpBookLevelLimit.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stExpBookLevelLimit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Role.stExpBookLevelLimit.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stExpBookLevelLimit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Role.stExpBookLevelLimit.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stExpBookLevelLimit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stExpBookLevelLimit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stExpBookLevelLimit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stExpBookLevelLimit::MergeFrom(const stExpBookLevelLimit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stExpBookLevelLimit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stExpBookLevelLimit::CopyFrom(const stExpBookLevelLimit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stExpBookLevelLimit::IsInitialized() const {

  return true;
}

void stExpBookLevelLimit::Swap(stExpBookLevelLimit* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stExpBookLevelLimit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stExpBookLevelLimit_descriptor_;
  metadata.reflection = stExpBookLevelLimit_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stNotifyPubUniqueID_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyPubUniqueID_ProtoModID_descriptor_;
}
bool stNotifyPubUniqueID_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyPubUniqueID_ProtoModID stNotifyPubUniqueID::ModID;
const stNotifyPubUniqueID_ProtoModID stNotifyPubUniqueID::ProtoModID_MIN;
const stNotifyPubUniqueID_ProtoModID stNotifyPubUniqueID::ProtoModID_MAX;
const int stNotifyPubUniqueID::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stNotifyPubUniqueID_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyPubUniqueID_ProtoFunID_descriptor_;
}
bool stNotifyPubUniqueID_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 159:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyPubUniqueID_ProtoFunID stNotifyPubUniqueID::FunID;
const stNotifyPubUniqueID_ProtoFunID stNotifyPubUniqueID::ProtoFunID_MIN;
const stNotifyPubUniqueID_ProtoFunID stNotifyPubUniqueID::ProtoFunID_MAX;
const int stNotifyPubUniqueID::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stNotifyPubUniqueID::kUniqueIDFieldNumber;
#endif  // !_MSC_VER

stNotifyPubUniqueID::stNotifyPubUniqueID()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stNotifyPubUniqueID::InitAsDefaultInstance() {
}

stNotifyPubUniqueID::stNotifyPubUniqueID(const stNotifyPubUniqueID& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stNotifyPubUniqueID::SharedCtor() {
  _cached_size_ = 0;
  uniqueid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stNotifyPubUniqueID::~stNotifyPubUniqueID() {
  SharedDtor();
}

void stNotifyPubUniqueID::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stNotifyPubUniqueID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stNotifyPubUniqueID::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyPubUniqueID_descriptor_;
}

const stNotifyPubUniqueID& stNotifyPubUniqueID::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stNotifyPubUniqueID* stNotifyPubUniqueID::default_instance_ = NULL;

stNotifyPubUniqueID* stNotifyPubUniqueID::New() const {
  return new stNotifyPubUniqueID;
}

void stNotifyPubUniqueID::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uniqueid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stNotifyPubUniqueID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uniqueID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uniqueid_)));
          set_has_uniqueid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stNotifyPubUniqueID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uniqueID = 1;
  if (has_uniqueid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uniqueid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stNotifyPubUniqueID::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uniqueID = 1;
  if (has_uniqueid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uniqueid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stNotifyPubUniqueID::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uniqueID = 1;
    if (has_uniqueid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uniqueid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stNotifyPubUniqueID::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stNotifyPubUniqueID* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stNotifyPubUniqueID*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stNotifyPubUniqueID::MergeFrom(const stNotifyPubUniqueID& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uniqueid()) {
      set_uniqueid(from.uniqueid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stNotifyPubUniqueID::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stNotifyPubUniqueID::CopyFrom(const stNotifyPubUniqueID& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stNotifyPubUniqueID::IsInitialized() const {

  return true;
}

void stNotifyPubUniqueID::Swap(stNotifyPubUniqueID* other) {
  if (other != this) {
    std::swap(uniqueid_, other->uniqueid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stNotifyPubUniqueID::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stNotifyPubUniqueID_descriptor_;
  metadata.reflection = stNotifyPubUniqueID_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EnchantItem::kIdFieldNumber;
const int EnchantItem::kNumFieldNumber;
#endif  // !_MSC_VER

EnchantItem::EnchantItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EnchantItem::InitAsDefaultInstance() {
}

EnchantItem::EnchantItem(const EnchantItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EnchantItem::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnchantItem::~EnchantItem() {
  SharedDtor();
}

void EnchantItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EnchantItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnchantItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnchantItem_descriptor_;
}

const EnchantItem& EnchantItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

EnchantItem* EnchantItem::default_instance_ = NULL;

EnchantItem* EnchantItem::New() const {
  return new EnchantItem;
}

void EnchantItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EnchantItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional uint32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EnchantItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional uint32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EnchantItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional uint32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EnchantItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnchantItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EnchantItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EnchantItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EnchantItem::MergeFrom(const EnchantItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EnchantItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnchantItem::CopyFrom(const EnchantItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnchantItem::IsInitialized() const {

  return true;
}

void EnchantItem::Swap(EnchantItem* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EnchantItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnchantItem_descriptor_;
  metadata.reflection = EnchantItem_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqEnchant_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqEnchant_ProtoModID_descriptor_;
}
bool stReqEnchant_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqEnchant_ProtoModID stReqEnchant::ModID;
const stReqEnchant_ProtoModID stReqEnchant::ProtoModID_MIN;
const stReqEnchant_ProtoModID stReqEnchant::ProtoModID_MAX;
const int stReqEnchant::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqEnchant_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqEnchant_ProtoFunID_descriptor_;
}
bool stReqEnchant_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 160:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqEnchant_ProtoFunID stReqEnchant::FunID;
const stReqEnchant_ProtoFunID stReqEnchant::ProtoFunID_MIN;
const stReqEnchant_ProtoFunID stReqEnchant::ProtoFunID_MAX;
const int stReqEnchant::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqEnchant::kBagTypeFieldNumber;
const int stReqEnchant::kIdFieldNumber;
const int stReqEnchant::kItemFieldNumber;
const int stReqEnchant::kEnchantIdFieldNumber;
#endif  // !_MSC_VER

stReqEnchant::stReqEnchant()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqEnchant::InitAsDefaultInstance() {
}

stReqEnchant::stReqEnchant(const stReqEnchant& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqEnchant::SharedCtor() {
  _cached_size_ = 0;
  bagtype_ = 0u;
  id_ = GOOGLE_ULONGLONG(0);
  enchantid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqEnchant::~stReqEnchant() {
  SharedDtor();
}

void stReqEnchant::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqEnchant::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqEnchant::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqEnchant_descriptor_;
}

const stReqEnchant& stReqEnchant::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stReqEnchant* stReqEnchant::default_instance_ = NULL;

stReqEnchant* stReqEnchant::New() const {
  return new stReqEnchant;
}

void stReqEnchant::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bagtype_ = 0u;
    id_ = GOOGLE_ULONGLONG(0);
    enchantid_ = GOOGLE_ULONGLONG(0);
  }
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqEnchant::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 bagType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bagtype_)));
          set_has_bagtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional uint64 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_item;
        break;
      }

      // repeated .Role.EnchantItem item = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_item;
        if (input->ExpectTag(32)) goto parse_enchantId;
        break;
      }

      // optional uint64 enchantId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enchantId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &enchantid_)));
          set_has_enchantid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqEnchant::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 bagType = 1;
  if (has_bagtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bagtype(), output);
  }

  // optional uint64 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->id(), output);
  }

  // repeated .Role.EnchantItem item = 3;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->item(i), output);
  }

  // optional uint64 enchantId = 4;
  if (has_enchantid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->enchantid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqEnchant::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 bagType = 1;
  if (has_bagtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bagtype(), target);
  }

  // optional uint64 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->id(), target);
  }

  // repeated .Role.EnchantItem item = 3;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->item(i), target);
  }

  // optional uint64 enchantId = 4;
  if (has_enchantid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->enchantid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqEnchant::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 bagType = 1;
    if (has_bagtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bagtype());
    }

    // optional uint64 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint64 enchantId = 4;
    if (has_enchantid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->enchantid());
    }

  }
  // repeated .Role.EnchantItem item = 3;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqEnchant::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqEnchant* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqEnchant*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqEnchant::MergeFrom(const stReqEnchant& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bagtype()) {
      set_bagtype(from.bagtype());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_enchantid()) {
      set_enchantid(from.enchantid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqEnchant::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqEnchant::CopyFrom(const stReqEnchant& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqEnchant::IsInitialized() const {

  return true;
}

void stReqEnchant::Swap(stReqEnchant* other) {
  if (other != this) {
    std::swap(bagtype_, other->bagtype_);
    std::swap(id_, other->id_);
    item_.Swap(&other->item_);
    std::swap(enchantid_, other->enchantid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqEnchant::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqEnchant_descriptor_;
  metadata.reflection = stReqEnchant_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRetEnchant_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetEnchant_eResult_descriptor_;
}
bool stRetEnchant_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetEnchant_eResult stRetEnchant::eSuccess;
const stRetEnchant_eResult stRetEnchant::eGold_Less;
const stRetEnchant_eResult stRetEnchant::ePiece_Less;
const stRetEnchant_eResult stRetEnchant::eEnchant_Less;
const stRetEnchant_eResult stRetEnchant::eNo_Such_Fashion;
const stRetEnchant_eResult stRetEnchant::eEnchant_Locked;
const stRetEnchant_eResult stRetEnchant::ePiece_Wrong_Num;
const stRetEnchant_eResult stRetEnchant::eNo_Such_Config;
const stRetEnchant_eResult stRetEnchant::eMax_Prop_Num;
const stRetEnchant_eResult stRetEnchant::eMax_Enchant_Num;
const stRetEnchant_eResult stRetEnchant::eResult_MIN;
const stRetEnchant_eResult stRetEnchant::eResult_MAX;
const int stRetEnchant::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetEnchant_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetEnchant_ProtoModID_descriptor_;
}
bool stRetEnchant_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetEnchant_ProtoModID stRetEnchant::ModID;
const stRetEnchant_ProtoModID stRetEnchant::ProtoModID_MIN;
const stRetEnchant_ProtoModID stRetEnchant::ProtoModID_MAX;
const int stRetEnchant::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetEnchant_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetEnchant_ProtoFunID_descriptor_;
}
bool stRetEnchant_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 161:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetEnchant_ProtoFunID stRetEnchant::FunID;
const stRetEnchant_ProtoFunID stRetEnchant::ProtoFunID_MIN;
const stRetEnchant_ProtoFunID stRetEnchant::ProtoFunID_MAX;
const int stRetEnchant::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRetEnchant::kBagTypeFieldNumber;
const int stRetEnchant::kIdFieldNumber;
const int stRetEnchant::kResultFieldNumber;
const int stRetEnchant::kEnchantFieldNumber;
#endif  // !_MSC_VER

stRetEnchant::stRetEnchant()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRetEnchant::InitAsDefaultInstance() {
  enchant_ = const_cast< ::Role::stEnchantInfo*>(&::Role::stEnchantInfo::default_instance());
}

stRetEnchant::stRetEnchant(const stRetEnchant& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRetEnchant::SharedCtor() {
  _cached_size_ = 0;
  bagtype_ = 0u;
  id_ = GOOGLE_ULONGLONG(0);
  result_ = 1;
  enchant_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRetEnchant::~stRetEnchant() {
  SharedDtor();
}

void stRetEnchant::SharedDtor() {
  if (this != default_instance_) {
    delete enchant_;
  }
}

void stRetEnchant::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRetEnchant::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetEnchant_descriptor_;
}

const stRetEnchant& stRetEnchant::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stRetEnchant* stRetEnchant::default_instance_ = NULL;

stRetEnchant* stRetEnchant::New() const {
  return new stRetEnchant;
}

void stRetEnchant::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bagtype_ = 0u;
    id_ = GOOGLE_ULONGLONG(0);
    result_ = 1;
    if (has_enchant()) {
      if (enchant_ != NULL) enchant_->::Role::stEnchantInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRetEnchant::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 bagType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bagtype_)));
          set_has_bagtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional uint64 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // optional .Role.stRetEnchant.eResult result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Role::stRetEnchant_eResult_IsValid(value)) {
            set_result(static_cast< ::Role::stRetEnchant_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_enchant;
        break;
      }

      // optional .Role.stEnchantInfo enchant = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_enchant:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_enchant()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRetEnchant::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 bagType = 1;
  if (has_bagtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bagtype(), output);
  }

  // optional uint64 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->id(), output);
  }

  // optional .Role.stRetEnchant.eResult result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->result(), output);
  }

  // optional .Role.stEnchantInfo enchant = 4;
  if (has_enchant()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->enchant(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRetEnchant::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 bagType = 1;
  if (has_bagtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bagtype(), target);
  }

  // optional uint64 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->id(), target);
  }

  // optional .Role.stRetEnchant.eResult result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->result(), target);
  }

  // optional .Role.stEnchantInfo enchant = 4;
  if (has_enchant()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->enchant(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRetEnchant::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 bagType = 1;
    if (has_bagtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bagtype());
    }

    // optional uint64 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional .Role.stRetEnchant.eResult result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional .Role.stEnchantInfo enchant = 4;
    if (has_enchant()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->enchant());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRetEnchant::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRetEnchant* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRetEnchant*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRetEnchant::MergeFrom(const stRetEnchant& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bagtype()) {
      set_bagtype(from.bagtype());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_enchant()) {
      mutable_enchant()->::Role::stEnchantInfo::MergeFrom(from.enchant());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRetEnchant::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRetEnchant::CopyFrom(const stRetEnchant& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRetEnchant::IsInitialized() const {

  return true;
}

void stRetEnchant::Swap(stRetEnchant* other) {
  if (other != this) {
    std::swap(bagtype_, other->bagtype_);
    std::swap(id_, other->id_);
    std::swap(result_, other->result_);
    std::swap(enchant_, other->enchant_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRetEnchant::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRetEnchant_descriptor_;
  metadata.reflection = stRetEnchant_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqRecastEnchant_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqRecastEnchant_ProtoModID_descriptor_;
}
bool stReqRecastEnchant_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqRecastEnchant_ProtoModID stReqRecastEnchant::ModID;
const stReqRecastEnchant_ProtoModID stReqRecastEnchant::ProtoModID_MIN;
const stReqRecastEnchant_ProtoModID stReqRecastEnchant::ProtoModID_MAX;
const int stReqRecastEnchant::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqRecastEnchant_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqRecastEnchant_ProtoFunID_descriptor_;
}
bool stReqRecastEnchant_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 162:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqRecastEnchant_ProtoFunID stReqRecastEnchant::FunID;
const stReqRecastEnchant_ProtoFunID stReqRecastEnchant::ProtoFunID_MIN;
const stReqRecastEnchant_ProtoFunID stReqRecastEnchant::ProtoFunID_MAX;
const int stReqRecastEnchant::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqRecastEnchant::kBagTypeFieldNumber;
const int stReqRecastEnchant::kInstanceIDFieldNumber;
#endif  // !_MSC_VER

stReqRecastEnchant::stReqRecastEnchant()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqRecastEnchant::InitAsDefaultInstance() {
}

stReqRecastEnchant::stReqRecastEnchant(const stReqRecastEnchant& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqRecastEnchant::SharedCtor() {
  _cached_size_ = 0;
  bagtype_ = 0u;
  instanceid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqRecastEnchant::~stReqRecastEnchant() {
  SharedDtor();
}

void stReqRecastEnchant::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqRecastEnchant::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqRecastEnchant::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqRecastEnchant_descriptor_;
}

const stReqRecastEnchant& stReqRecastEnchant::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stReqRecastEnchant* stReqRecastEnchant::default_instance_ = NULL;

stReqRecastEnchant* stReqRecastEnchant::New() const {
  return new stReqRecastEnchant;
}

void stReqRecastEnchant::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bagtype_ = 0u;
    instanceid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqRecastEnchant::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 bagType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bagtype_)));
          set_has_bagtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_instanceID;
        break;
      }

      // optional uint64 instanceID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_instanceID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &instanceid_)));
          set_has_instanceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqRecastEnchant::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 bagType = 1;
  if (has_bagtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bagtype(), output);
  }

  // optional uint64 instanceID = 2;
  if (has_instanceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->instanceid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqRecastEnchant::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 bagType = 1;
  if (has_bagtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bagtype(), target);
  }

  // optional uint64 instanceID = 2;
  if (has_instanceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->instanceid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqRecastEnchant::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 bagType = 1;
    if (has_bagtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bagtype());
    }

    // optional uint64 instanceID = 2;
    if (has_instanceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->instanceid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqRecastEnchant::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqRecastEnchant* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqRecastEnchant*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqRecastEnchant::MergeFrom(const stReqRecastEnchant& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bagtype()) {
      set_bagtype(from.bagtype());
    }
    if (from.has_instanceid()) {
      set_instanceid(from.instanceid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqRecastEnchant::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqRecastEnchant::CopyFrom(const stReqRecastEnchant& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqRecastEnchant::IsInitialized() const {

  return true;
}

void stReqRecastEnchant::Swap(stReqRecastEnchant* other) {
  if (other != this) {
    std::swap(bagtype_, other->bagtype_);
    std::swap(instanceid_, other->instanceid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqRecastEnchant::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqRecastEnchant_descriptor_;
  metadata.reflection = stReqRecastEnchant_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRetRecastEnchant_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetRecastEnchant_eResult_descriptor_;
}
bool stRetRecastEnchant_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetRecastEnchant_eResult stRetRecastEnchant::eSuccess;
const stRetRecastEnchant_eResult stRetRecastEnchant::eNo_Such_Fashion;
const stRetRecastEnchant_eResult stRetRecastEnchant::eBag_Full;
const stRetRecastEnchant_eResult stRetRecastEnchant::eLimited_Fashion;
const stRetRecastEnchant_eResult stRetRecastEnchant::eDiamond_Less;
const stRetRecastEnchant_eResult stRetRecastEnchant::eResult_MIN;
const stRetRecastEnchant_eResult stRetRecastEnchant::eResult_MAX;
const int stRetRecastEnchant::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetRecastEnchant_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetRecastEnchant_ProtoModID_descriptor_;
}
bool stRetRecastEnchant_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetRecastEnchant_ProtoModID stRetRecastEnchant::ModID;
const stRetRecastEnchant_ProtoModID stRetRecastEnchant::ProtoModID_MIN;
const stRetRecastEnchant_ProtoModID stRetRecastEnchant::ProtoModID_MAX;
const int stRetRecastEnchant::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetRecastEnchant_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetRecastEnchant_ProtoFunID_descriptor_;
}
bool stRetRecastEnchant_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 163:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetRecastEnchant_ProtoFunID stRetRecastEnchant::FunID;
const stRetRecastEnchant_ProtoFunID stRetRecastEnchant::ProtoFunID_MIN;
const stRetRecastEnchant_ProtoFunID stRetRecastEnchant::ProtoFunID_MAX;
const int stRetRecastEnchant::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRetRecastEnchant::kBagTypeFieldNumber;
const int stRetRecastEnchant::kInstanceIDFieldNumber;
const int stRetRecastEnchant::kResultFieldNumber;
#endif  // !_MSC_VER

stRetRecastEnchant::stRetRecastEnchant()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRetRecastEnchant::InitAsDefaultInstance() {
}

stRetRecastEnchant::stRetRecastEnchant(const stRetRecastEnchant& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRetRecastEnchant::SharedCtor() {
  _cached_size_ = 0;
  bagtype_ = 0u;
  instanceid_ = GOOGLE_ULONGLONG(0);
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRetRecastEnchant::~stRetRecastEnchant() {
  SharedDtor();
}

void stRetRecastEnchant::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRetRecastEnchant::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRetRecastEnchant::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetRecastEnchant_descriptor_;
}

const stRetRecastEnchant& stRetRecastEnchant::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stRetRecastEnchant* stRetRecastEnchant::default_instance_ = NULL;

stRetRecastEnchant* stRetRecastEnchant::New() const {
  return new stRetRecastEnchant;
}

void stRetRecastEnchant::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bagtype_ = 0u;
    instanceid_ = GOOGLE_ULONGLONG(0);
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRetRecastEnchant::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 bagType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bagtype_)));
          set_has_bagtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_instanceID;
        break;
      }

      // optional uint64 instanceID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_instanceID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &instanceid_)));
          set_has_instanceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // optional .Role.stRetRecastEnchant.eResult result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Role::stRetRecastEnchant_eResult_IsValid(value)) {
            set_result(static_cast< ::Role::stRetRecastEnchant_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRetRecastEnchant::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 bagType = 1;
  if (has_bagtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bagtype(), output);
  }

  // optional uint64 instanceID = 2;
  if (has_instanceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->instanceid(), output);
  }

  // optional .Role.stRetRecastEnchant.eResult result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRetRecastEnchant::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 bagType = 1;
  if (has_bagtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bagtype(), target);
  }

  // optional uint64 instanceID = 2;
  if (has_instanceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->instanceid(), target);
  }

  // optional .Role.stRetRecastEnchant.eResult result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRetRecastEnchant::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 bagType = 1;
    if (has_bagtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bagtype());
    }

    // optional uint64 instanceID = 2;
    if (has_instanceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->instanceid());
    }

    // optional .Role.stRetRecastEnchant.eResult result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRetRecastEnchant::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRetRecastEnchant* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRetRecastEnchant*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRetRecastEnchant::MergeFrom(const stRetRecastEnchant& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bagtype()) {
      set_bagtype(from.bagtype());
    }
    if (from.has_instanceid()) {
      set_instanceid(from.instanceid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRetRecastEnchant::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRetRecastEnchant::CopyFrom(const stRetRecastEnchant& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRetRecastEnchant::IsInitialized() const {

  return true;
}

void stRetRecastEnchant::Swap(stRetRecastEnchant* other) {
  if (other != this) {
    std::swap(bagtype_, other->bagtype_);
    std::swap(instanceid_, other->instanceid_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRetRecastEnchant::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRetRecastEnchant_descriptor_;
  metadata.reflection = stRetRecastEnchant_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqLockEnchant_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqLockEnchant_ProtoModID_descriptor_;
}
bool stReqLockEnchant_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqLockEnchant_ProtoModID stReqLockEnchant::ModID;
const stReqLockEnchant_ProtoModID stReqLockEnchant::ProtoModID_MIN;
const stReqLockEnchant_ProtoModID stReqLockEnchant::ProtoModID_MAX;
const int stReqLockEnchant::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqLockEnchant_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqLockEnchant_ProtoFunID_descriptor_;
}
bool stReqLockEnchant_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 164:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqLockEnchant_ProtoFunID stReqLockEnchant::FunID;
const stReqLockEnchant_ProtoFunID stReqLockEnchant::ProtoFunID_MIN;
const stReqLockEnchant_ProtoFunID stReqLockEnchant::ProtoFunID_MAX;
const int stReqLockEnchant::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqLockEnchant::kBagTypeFieldNumber;
const int stReqLockEnchant::kInstanceIDFieldNumber;
const int stReqLockEnchant::kIndexFieldNumber;
const int stReqLockEnchant::kIsLockFieldNumber;
#endif  // !_MSC_VER

stReqLockEnchant::stReqLockEnchant()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqLockEnchant::InitAsDefaultInstance() {
}

stReqLockEnchant::stReqLockEnchant(const stReqLockEnchant& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqLockEnchant::SharedCtor() {
  _cached_size_ = 0;
  bagtype_ = 0u;
  instanceid_ = GOOGLE_ULONGLONG(0);
  index_ = 0u;
  islock_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqLockEnchant::~stReqLockEnchant() {
  SharedDtor();
}

void stReqLockEnchant::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqLockEnchant::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqLockEnchant::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqLockEnchant_descriptor_;
}

const stReqLockEnchant& stReqLockEnchant::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stReqLockEnchant* stReqLockEnchant::default_instance_ = NULL;

stReqLockEnchant* stReqLockEnchant::New() const {
  return new stReqLockEnchant;
}

void stReqLockEnchant::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bagtype_ = 0u;
    instanceid_ = GOOGLE_ULONGLONG(0);
    index_ = 0u;
    islock_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqLockEnchant::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 bagType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bagtype_)));
          set_has_bagtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_instanceID;
        break;
      }

      // optional uint64 instanceID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_instanceID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &instanceid_)));
          set_has_instanceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_index;
        break;
      }

      // optional uint32 index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_isLock;
        break;
      }

      // optional uint32 isLock = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isLock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &islock_)));
          set_has_islock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqLockEnchant::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 bagType = 1;
  if (has_bagtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bagtype(), output);
  }

  // optional uint64 instanceID = 2;
  if (has_instanceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->instanceid(), output);
  }

  // optional uint32 index = 3;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->index(), output);
  }

  // optional uint32 isLock = 4;
  if (has_islock()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->islock(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqLockEnchant::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 bagType = 1;
  if (has_bagtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bagtype(), target);
  }

  // optional uint64 instanceID = 2;
  if (has_instanceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->instanceid(), target);
  }

  // optional uint32 index = 3;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->index(), target);
  }

  // optional uint32 isLock = 4;
  if (has_islock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->islock(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqLockEnchant::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 bagType = 1;
    if (has_bagtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bagtype());
    }

    // optional uint64 instanceID = 2;
    if (has_instanceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->instanceid());
    }

    // optional uint32 index = 3;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

    // optional uint32 isLock = 4;
    if (has_islock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->islock());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqLockEnchant::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqLockEnchant* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqLockEnchant*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqLockEnchant::MergeFrom(const stReqLockEnchant& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bagtype()) {
      set_bagtype(from.bagtype());
    }
    if (from.has_instanceid()) {
      set_instanceid(from.instanceid());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_islock()) {
      set_islock(from.islock());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqLockEnchant::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqLockEnchant::CopyFrom(const stReqLockEnchant& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqLockEnchant::IsInitialized() const {

  return true;
}

void stReqLockEnchant::Swap(stReqLockEnchant* other) {
  if (other != this) {
    std::swap(bagtype_, other->bagtype_);
    std::swap(instanceid_, other->instanceid_);
    std::swap(index_, other->index_);
    std::swap(islock_, other->islock_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqLockEnchant::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqLockEnchant_descriptor_;
  metadata.reflection = stReqLockEnchant_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRetLockEnchant_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetLockEnchant_eResult_descriptor_;
}
bool stRetLockEnchant_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetLockEnchant_eResult stRetLockEnchant::eSuccess;
const stRetLockEnchant_eResult stRetLockEnchant::eNo_Such_Fashion;
const stRetLockEnchant_eResult stRetLockEnchant::eNo_Such_Index;
const stRetLockEnchant_eResult stRetLockEnchant::eResult_MIN;
const stRetLockEnchant_eResult stRetLockEnchant::eResult_MAX;
const int stRetLockEnchant::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetLockEnchant_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetLockEnchant_ProtoModID_descriptor_;
}
bool stRetLockEnchant_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetLockEnchant_ProtoModID stRetLockEnchant::ModID;
const stRetLockEnchant_ProtoModID stRetLockEnchant::ProtoModID_MIN;
const stRetLockEnchant_ProtoModID stRetLockEnchant::ProtoModID_MAX;
const int stRetLockEnchant::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetLockEnchant_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetLockEnchant_ProtoFunID_descriptor_;
}
bool stRetLockEnchant_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 165:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetLockEnchant_ProtoFunID stRetLockEnchant::FunID;
const stRetLockEnchant_ProtoFunID stRetLockEnchant::ProtoFunID_MIN;
const stRetLockEnchant_ProtoFunID stRetLockEnchant::ProtoFunID_MAX;
const int stRetLockEnchant::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRetLockEnchant::kBagTypeFieldNumber;
const int stRetLockEnchant::kInstanceIDFieldNumber;
const int stRetLockEnchant::kIndexFieldNumber;
const int stRetLockEnchant::kIsLockFieldNumber;
const int stRetLockEnchant::kResultFieldNumber;
#endif  // !_MSC_VER

stRetLockEnchant::stRetLockEnchant()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRetLockEnchant::InitAsDefaultInstance() {
}

stRetLockEnchant::stRetLockEnchant(const stRetLockEnchant& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRetLockEnchant::SharedCtor() {
  _cached_size_ = 0;
  bagtype_ = 0u;
  instanceid_ = GOOGLE_ULONGLONG(0);
  index_ = 0u;
  islock_ = 0u;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRetLockEnchant::~stRetLockEnchant() {
  SharedDtor();
}

void stRetLockEnchant::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRetLockEnchant::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRetLockEnchant::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetLockEnchant_descriptor_;
}

const stRetLockEnchant& stRetLockEnchant::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stRetLockEnchant* stRetLockEnchant::default_instance_ = NULL;

stRetLockEnchant* stRetLockEnchant::New() const {
  return new stRetLockEnchant;
}

void stRetLockEnchant::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bagtype_ = 0u;
    instanceid_ = GOOGLE_ULONGLONG(0);
    index_ = 0u;
    islock_ = 0u;
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRetLockEnchant::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 bagType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bagtype_)));
          set_has_bagtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_instanceID;
        break;
      }

      // optional uint64 instanceID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_instanceID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &instanceid_)));
          set_has_instanceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_index;
        break;
      }

      // optional uint32 index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_isLock;
        break;
      }

      // optional uint32 isLock = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isLock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &islock_)));
          set_has_islock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_result;
        break;
      }

      // optional .Role.stRetLockEnchant.eResult result = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Role::stRetLockEnchant_eResult_IsValid(value)) {
            set_result(static_cast< ::Role::stRetLockEnchant_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRetLockEnchant::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 bagType = 1;
  if (has_bagtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bagtype(), output);
  }

  // optional uint64 instanceID = 2;
  if (has_instanceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->instanceid(), output);
  }

  // optional uint32 index = 3;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->index(), output);
  }

  // optional uint32 isLock = 4;
  if (has_islock()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->islock(), output);
  }

  // optional .Role.stRetLockEnchant.eResult result = 5;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRetLockEnchant::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 bagType = 1;
  if (has_bagtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bagtype(), target);
  }

  // optional uint64 instanceID = 2;
  if (has_instanceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->instanceid(), target);
  }

  // optional uint32 index = 3;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->index(), target);
  }

  // optional uint32 isLock = 4;
  if (has_islock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->islock(), target);
  }

  // optional .Role.stRetLockEnchant.eResult result = 5;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRetLockEnchant::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 bagType = 1;
    if (has_bagtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bagtype());
    }

    // optional uint64 instanceID = 2;
    if (has_instanceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->instanceid());
    }

    // optional uint32 index = 3;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

    // optional uint32 isLock = 4;
    if (has_islock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->islock());
    }

    // optional .Role.stRetLockEnchant.eResult result = 5;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRetLockEnchant::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRetLockEnchant* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRetLockEnchant*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRetLockEnchant::MergeFrom(const stRetLockEnchant& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bagtype()) {
      set_bagtype(from.bagtype());
    }
    if (from.has_instanceid()) {
      set_instanceid(from.instanceid());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_islock()) {
      set_islock(from.islock());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRetLockEnchant::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRetLockEnchant::CopyFrom(const stRetLockEnchant& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRetLockEnchant::IsInitialized() const {

  return true;
}

void stRetLockEnchant::Swap(stRetLockEnchant* other) {
  if (other != this) {
    std::swap(bagtype_, other->bagtype_);
    std::swap(instanceid_, other->instanceid_);
    std::swap(index_, other->index_);
    std::swap(islock_, other->islock_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRetLockEnchant::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRetLockEnchant_descriptor_;
  metadata.reflection = stRetLockEnchant_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stHeroLeagueItem::kNameFieldNumber;
const int stHeroLeagueItem::kLevelFieldNumber;
const int stHeroLeagueItem::kBattlePowerFieldNumber;
const int stHeroLeagueItem::kScoreFieldNumber;
#endif  // !_MSC_VER

stHeroLeagueItem::stHeroLeagueItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stHeroLeagueItem::InitAsDefaultInstance() {
}

stHeroLeagueItem::stHeroLeagueItem(const stHeroLeagueItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stHeroLeagueItem::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0u;
  battlepower_ = 0u;
  score_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stHeroLeagueItem::~stHeroLeagueItem() {
  SharedDtor();
}

void stHeroLeagueItem::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void stHeroLeagueItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stHeroLeagueItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stHeroLeagueItem_descriptor_;
}

const stHeroLeagueItem& stHeroLeagueItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stHeroLeagueItem* stHeroLeagueItem::default_instance_ = NULL;

stHeroLeagueItem* stHeroLeagueItem::New() const {
  return new stHeroLeagueItem;
}

void stHeroLeagueItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    level_ = 0u;
    battlepower_ = 0u;
    score_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stHeroLeagueItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // optional uint32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_battlePower;
        break;
      }

      // optional uint32 battlePower = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battlePower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battlepower_)));
          set_has_battlepower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_score;
        break;
      }

      // optional uint32 score = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stHeroLeagueItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional uint32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }

  // optional uint32 battlePower = 3;
  if (has_battlepower()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->battlepower(), output);
  }

  // optional uint32 score = 4;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stHeroLeagueItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional uint32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }

  // optional uint32 battlePower = 3;
  if (has_battlepower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->battlepower(), target);
  }

  // optional uint32 score = 4;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stHeroLeagueItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 battlePower = 3;
    if (has_battlepower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battlepower());
    }

    // optional uint32 score = 4;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stHeroLeagueItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stHeroLeagueItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stHeroLeagueItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stHeroLeagueItem::MergeFrom(const stHeroLeagueItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_battlepower()) {
      set_battlepower(from.battlepower());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stHeroLeagueItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stHeroLeagueItem::CopyFrom(const stHeroLeagueItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stHeroLeagueItem::IsInitialized() const {

  return true;
}

void stHeroLeagueItem::Swap(stHeroLeagueItem* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(level_, other->level_);
    std::swap(battlepower_, other->battlepower_);
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stHeroLeagueItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stHeroLeagueItem_descriptor_;
  metadata.reflection = stHeroLeagueItem_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stHerLeagueResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stHerLeagueResult_ProtoModID_descriptor_;
}
bool stHerLeagueResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stHerLeagueResult_ProtoModID stHerLeagueResult::ModID;
const stHerLeagueResult_ProtoModID stHerLeagueResult::ProtoModID_MIN;
const stHerLeagueResult_ProtoModID stHerLeagueResult::ProtoModID_MAX;
const int stHerLeagueResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stHerLeagueResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stHerLeagueResult_ProtoFunID_descriptor_;
}
bool stHerLeagueResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 166:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stHerLeagueResult_ProtoFunID stHerLeagueResult::FunID;
const stHerLeagueResult_ProtoFunID stHerLeagueResult::ProtoFunID_MIN;
const stHerLeagueResult_ProtoFunID stHerLeagueResult::ProtoFunID_MAX;
const int stHerLeagueResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stHerLeagueResult::kWinerFieldNumber;
const int stHerLeagueResult::kLoserFieldNumber;
const int stHerLeagueResult::kWinerScoreFieldNumber;
const int stHerLeagueResult::kLoserScoreFieldNumber;
#endif  // !_MSC_VER

stHerLeagueResult::stHerLeagueResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stHerLeagueResult::InitAsDefaultInstance() {
  winer_ = const_cast< ::Role::stHeroLeagueItem*>(&::Role::stHeroLeagueItem::default_instance());
  loser_ = const_cast< ::Role::stHeroLeagueItem*>(&::Role::stHeroLeagueItem::default_instance());
}

stHerLeagueResult::stHerLeagueResult(const stHerLeagueResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stHerLeagueResult::SharedCtor() {
  _cached_size_ = 0;
  winer_ = NULL;
  loser_ = NULL;
  winerscore_ = 0u;
  loserscore_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stHerLeagueResult::~stHerLeagueResult() {
  SharedDtor();
}

void stHerLeagueResult::SharedDtor() {
  if (this != default_instance_) {
    delete winer_;
    delete loser_;
  }
}

void stHerLeagueResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stHerLeagueResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stHerLeagueResult_descriptor_;
}

const stHerLeagueResult& stHerLeagueResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stHerLeagueResult* stHerLeagueResult::default_instance_ = NULL;

stHerLeagueResult* stHerLeagueResult::New() const {
  return new stHerLeagueResult;
}

void stHerLeagueResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_winer()) {
      if (winer_ != NULL) winer_->::Role::stHeroLeagueItem::Clear();
    }
    if (has_loser()) {
      if (loser_ != NULL) loser_->::Role::stHeroLeagueItem::Clear();
    }
    winerscore_ = 0u;
    loserscore_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stHerLeagueResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Role.stHeroLeagueItem winer = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_winer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_loser;
        break;
      }

      // optional .Role.stHeroLeagueItem loser = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_loser:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_loser()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_winerScore;
        break;
      }

      // optional uint32 winerScore = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winerScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &winerscore_)));
          set_has_winerscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_loserScore;
        break;
      }

      // optional uint32 loserScore = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_loserScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &loserscore_)));
          set_has_loserscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stHerLeagueResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Role.stHeroLeagueItem winer = 1;
  if (has_winer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->winer(), output);
  }

  // optional .Role.stHeroLeagueItem loser = 2;
  if (has_loser()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->loser(), output);
  }

  // optional uint32 winerScore = 3;
  if (has_winerscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->winerscore(), output);
  }

  // optional uint32 loserScore = 4;
  if (has_loserscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->loserscore(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stHerLeagueResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Role.stHeroLeagueItem winer = 1;
  if (has_winer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->winer(), target);
  }

  // optional .Role.stHeroLeagueItem loser = 2;
  if (has_loser()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->loser(), target);
  }

  // optional uint32 winerScore = 3;
  if (has_winerscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->winerscore(), target);
  }

  // optional uint32 loserScore = 4;
  if (has_loserscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->loserscore(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stHerLeagueResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Role.stHeroLeagueItem winer = 1;
    if (has_winer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->winer());
    }

    // optional .Role.stHeroLeagueItem loser = 2;
    if (has_loser()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->loser());
    }

    // optional uint32 winerScore = 3;
    if (has_winerscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->winerscore());
    }

    // optional uint32 loserScore = 4;
    if (has_loserscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->loserscore());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stHerLeagueResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stHerLeagueResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stHerLeagueResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stHerLeagueResult::MergeFrom(const stHerLeagueResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_winer()) {
      mutable_winer()->::Role::stHeroLeagueItem::MergeFrom(from.winer());
    }
    if (from.has_loser()) {
      mutable_loser()->::Role::stHeroLeagueItem::MergeFrom(from.loser());
    }
    if (from.has_winerscore()) {
      set_winerscore(from.winerscore());
    }
    if (from.has_loserscore()) {
      set_loserscore(from.loserscore());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stHerLeagueResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stHerLeagueResult::CopyFrom(const stHerLeagueResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stHerLeagueResult::IsInitialized() const {

  return true;
}

void stHerLeagueResult::Swap(stHerLeagueResult* other) {
  if (other != this) {
    std::swap(winer_, other->winer_);
    std::swap(loser_, other->loser_);
    std::swap(winerscore_, other->winerscore_);
    std::swap(loserscore_, other->loserscore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stHerLeagueResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stHerLeagueResult_descriptor_;
  metadata.reflection = stHerLeagueResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqHeroRune_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqHeroRune_ProtoModID_descriptor_;
}
bool stReqHeroRune_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqHeroRune_ProtoModID stReqHeroRune::ModID;
const stReqHeroRune_ProtoModID stReqHeroRune::ProtoModID_MIN;
const stReqHeroRune_ProtoModID stReqHeroRune::ProtoModID_MAX;
const int stReqHeroRune::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqHeroRune_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqHeroRune_ProtoFunID_descriptor_;
}
bool stReqHeroRune_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 167:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqHeroRune_ProtoFunID stReqHeroRune::FunID;
const stReqHeroRune_ProtoFunID stReqHeroRune::ProtoFunID_MIN;
const stReqHeroRune_ProtoFunID stReqHeroRune::ProtoFunID_MAX;
const int stReqHeroRune::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqHeroRune::kHeroIDFieldNumber;
#endif  // !_MSC_VER

stReqHeroRune::stReqHeroRune()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqHeroRune::InitAsDefaultInstance() {
}

stReqHeroRune::stReqHeroRune(const stReqHeroRune& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqHeroRune::SharedCtor() {
  _cached_size_ = 0;
  heroid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqHeroRune::~stReqHeroRune() {
  SharedDtor();
}

void stReqHeroRune::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqHeroRune::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqHeroRune::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqHeroRune_descriptor_;
}

const stReqHeroRune& stReqHeroRune::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stReqHeroRune* stReqHeroRune::default_instance_ = NULL;

stReqHeroRune* stReqHeroRune::New() const {
  return new stReqHeroRune;
}

void stReqHeroRune::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    heroid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqHeroRune::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 heroID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heroid_)));
          set_has_heroid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqHeroRune::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 heroID = 1;
  if (has_heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->heroid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqHeroRune::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 heroID = 1;
  if (has_heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->heroid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqHeroRune::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 heroID = 1;
    if (has_heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heroid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqHeroRune::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqHeroRune* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqHeroRune*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqHeroRune::MergeFrom(const stReqHeroRune& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_heroid()) {
      set_heroid(from.heroid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqHeroRune::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqHeroRune::CopyFrom(const stReqHeroRune& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqHeroRune::IsInitialized() const {

  return true;
}

void stReqHeroRune::Swap(stReqHeroRune* other) {
  if (other != this) {
    std::swap(heroid_, other->heroid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqHeroRune::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqHeroRune_descriptor_;
  metadata.reflection = stReqHeroRune_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stHeroRuneInfo::kItemIdFieldNumber;
const int stHeroRuneInfo::kInstanceIDFieldNumber;
const int stHeroRuneInfo::kSlotIndexFieldNumber;
const int stHeroRuneInfo::kPosFieldNumber;
#endif  // !_MSC_VER

stHeroRuneInfo::stHeroRuneInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stHeroRuneInfo::InitAsDefaultInstance() {
}

stHeroRuneInfo::stHeroRuneInfo(const stHeroRuneInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stHeroRuneInfo::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0u;
  instanceid_ = GOOGLE_ULONGLONG(0);
  slot_index_ = 0u;
  pos_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stHeroRuneInfo::~stHeroRuneInfo() {
  SharedDtor();
}

void stHeroRuneInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stHeroRuneInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stHeroRuneInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stHeroRuneInfo_descriptor_;
}

const stHeroRuneInfo& stHeroRuneInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stHeroRuneInfo* stHeroRuneInfo::default_instance_ = NULL;

stHeroRuneInfo* stHeroRuneInfo::New() const {
  return new stHeroRuneInfo;
}

void stHeroRuneInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = 0u;
    instanceid_ = GOOGLE_ULONGLONG(0);
    slot_index_ = 0u;
    pos_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stHeroRuneInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 itemId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_instanceID;
        break;
      }

      // optional uint64 instanceID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_instanceID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &instanceid_)));
          set_has_instanceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_slot_index;
        break;
      }

      // optional uint32 slot_index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slot_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slot_index_)));
          set_has_slot_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_pos;
        break;
      }

      // optional uint32 pos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stHeroRuneInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 itemId = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itemid(), output);
  }

  // optional uint64 instanceID = 2;
  if (has_instanceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->instanceid(), output);
  }

  // optional uint32 slot_index = 3;
  if (has_slot_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->slot_index(), output);
  }

  // optional uint32 pos = 4;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stHeroRuneInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 itemId = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->itemid(), target);
  }

  // optional uint64 instanceID = 2;
  if (has_instanceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->instanceid(), target);
  }

  // optional uint32 slot_index = 3;
  if (has_slot_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->slot_index(), target);
  }

  // optional uint32 pos = 4;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stHeroRuneInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 itemId = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // optional uint64 instanceID = 2;
    if (has_instanceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->instanceid());
    }

    // optional uint32 slot_index = 3;
    if (has_slot_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slot_index());
    }

    // optional uint32 pos = 4;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stHeroRuneInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stHeroRuneInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stHeroRuneInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stHeroRuneInfo::MergeFrom(const stHeroRuneInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_instanceid()) {
      set_instanceid(from.instanceid());
    }
    if (from.has_slot_index()) {
      set_slot_index(from.slot_index());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stHeroRuneInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stHeroRuneInfo::CopyFrom(const stHeroRuneInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stHeroRuneInfo::IsInitialized() const {

  return true;
}

void stHeroRuneInfo::Swap(stHeroRuneInfo* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(instanceid_, other->instanceid_);
    std::swap(slot_index_, other->slot_index_);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stHeroRuneInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stHeroRuneInfo_descriptor_;
  metadata.reflection = stHeroRuneInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRetHeroRune_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetHeroRune_ProtoModID_descriptor_;
}
bool stRetHeroRune_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetHeroRune_ProtoModID stRetHeroRune::ModID;
const stRetHeroRune_ProtoModID stRetHeroRune::ProtoModID_MIN;
const stRetHeroRune_ProtoModID stRetHeroRune::ProtoModID_MAX;
const int stRetHeroRune::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetHeroRune_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetHeroRune_ProtoFunID_descriptor_;
}
bool stRetHeroRune_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 168:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetHeroRune_ProtoFunID stRetHeroRune::FunID;
const stRetHeroRune_ProtoFunID stRetHeroRune::ProtoFunID_MIN;
const stRetHeroRune_ProtoFunID stRetHeroRune::ProtoFunID_MAX;
const int stRetHeroRune::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRetHeroRune::kHeroIDFieldNumber;
const int stRetHeroRune::kRunesFieldNumber;
#endif  // !_MSC_VER

stRetHeroRune::stRetHeroRune()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRetHeroRune::InitAsDefaultInstance() {
}

stRetHeroRune::stRetHeroRune(const stRetHeroRune& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRetHeroRune::SharedCtor() {
  _cached_size_ = 0;
  heroid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRetHeroRune::~stRetHeroRune() {
  SharedDtor();
}

void stRetHeroRune::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRetHeroRune::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRetHeroRune::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetHeroRune_descriptor_;
}

const stRetHeroRune& stRetHeroRune::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stRetHeroRune* stRetHeroRune::default_instance_ = NULL;

stRetHeroRune* stRetHeroRune::New() const {
  return new stRetHeroRune;
}

void stRetHeroRune::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    heroid_ = 0u;
  }
  runes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRetHeroRune::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 heroID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heroid_)));
          set_has_heroid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_runes;
        break;
      }

      // repeated .Role.stHeroRuneInfo runes = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_runes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_runes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_runes;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRetHeroRune::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 heroID = 1;
  if (has_heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->heroid(), output);
  }

  // repeated .Role.stHeroRuneInfo runes = 2;
  for (int i = 0; i < this->runes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->runes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRetHeroRune::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 heroID = 1;
  if (has_heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->heroid(), target);
  }

  // repeated .Role.stHeroRuneInfo runes = 2;
  for (int i = 0; i < this->runes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->runes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRetHeroRune::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 heroID = 1;
    if (has_heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heroid());
    }

  }
  // repeated .Role.stHeroRuneInfo runes = 2;
  total_size += 1 * this->runes_size();
  for (int i = 0; i < this->runes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->runes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRetHeroRune::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRetHeroRune* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRetHeroRune*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRetHeroRune::MergeFrom(const stRetHeroRune& from) {
  GOOGLE_CHECK_NE(&from, this);
  runes_.MergeFrom(from.runes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_heroid()) {
      set_heroid(from.heroid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRetHeroRune::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRetHeroRune::CopyFrom(const stRetHeroRune& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRetHeroRune::IsInitialized() const {

  return true;
}

void stRetHeroRune::Swap(stRetHeroRune* other) {
  if (other != this) {
    std::swap(heroid_, other->heroid_);
    runes_.Swap(&other->runes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRetHeroRune::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRetHeroRune_descriptor_;
  metadata.reflection = stRetHeroRune_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqAddHeroRune_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqAddHeroRune_ProtoModID_descriptor_;
}
bool stReqAddHeroRune_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqAddHeroRune_ProtoModID stReqAddHeroRune::ModID;
const stReqAddHeroRune_ProtoModID stReqAddHeroRune::ProtoModID_MIN;
const stReqAddHeroRune_ProtoModID stReqAddHeroRune::ProtoModID_MAX;
const int stReqAddHeroRune::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqAddHeroRune_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqAddHeroRune_ProtoFunID_descriptor_;
}
bool stReqAddHeroRune_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 169:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqAddHeroRune_ProtoFunID stReqAddHeroRune::FunID;
const stReqAddHeroRune_ProtoFunID stReqAddHeroRune::ProtoFunID_MIN;
const stReqAddHeroRune_ProtoFunID stReqAddHeroRune::ProtoFunID_MAX;
const int stReqAddHeroRune::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqAddHeroRune::kHeroIDFieldNumber;
const int stReqAddHeroRune::kInstanceIDFieldNumber;
const int stReqAddHeroRune::kPosFieldNumber;
#endif  // !_MSC_VER

stReqAddHeroRune::stReqAddHeroRune()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqAddHeroRune::InitAsDefaultInstance() {
}

stReqAddHeroRune::stReqAddHeroRune(const stReqAddHeroRune& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqAddHeroRune::SharedCtor() {
  _cached_size_ = 0;
  heroid_ = 0u;
  instanceid_ = GOOGLE_ULONGLONG(0);
  pos_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqAddHeroRune::~stReqAddHeroRune() {
  SharedDtor();
}

void stReqAddHeroRune::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqAddHeroRune::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqAddHeroRune::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqAddHeroRune_descriptor_;
}

const stReqAddHeroRune& stReqAddHeroRune::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stReqAddHeroRune* stReqAddHeroRune::default_instance_ = NULL;

stReqAddHeroRune* stReqAddHeroRune::New() const {
  return new stReqAddHeroRune;
}

void stReqAddHeroRune::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    heroid_ = 0u;
    instanceid_ = GOOGLE_ULONGLONG(0);
    pos_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqAddHeroRune::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 heroID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heroid_)));
          set_has_heroid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_instanceID;
        break;
      }

      // optional uint64 instanceID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_instanceID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &instanceid_)));
          set_has_instanceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pos;
        break;
      }

      // optional uint32 pos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqAddHeroRune::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 heroID = 1;
  if (has_heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->heroid(), output);
  }

  // optional uint64 instanceID = 2;
  if (has_instanceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->instanceid(), output);
  }

  // optional uint32 pos = 3;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqAddHeroRune::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 heroID = 1;
  if (has_heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->heroid(), target);
  }

  // optional uint64 instanceID = 2;
  if (has_instanceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->instanceid(), target);
  }

  // optional uint32 pos = 3;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqAddHeroRune::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 heroID = 1;
    if (has_heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heroid());
    }

    // optional uint64 instanceID = 2;
    if (has_instanceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->instanceid());
    }

    // optional uint32 pos = 3;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqAddHeroRune::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqAddHeroRune* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqAddHeroRune*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqAddHeroRune::MergeFrom(const stReqAddHeroRune& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_heroid()) {
      set_heroid(from.heroid());
    }
    if (from.has_instanceid()) {
      set_instanceid(from.instanceid());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqAddHeroRune::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqAddHeroRune::CopyFrom(const stReqAddHeroRune& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqAddHeroRune::IsInitialized() const {

  return true;
}

void stReqAddHeroRune::Swap(stReqAddHeroRune* other) {
  if (other != this) {
    std::swap(heroid_, other->heroid_);
    std::swap(instanceid_, other->instanceid_);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqAddHeroRune::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqAddHeroRune_descriptor_;
  metadata.reflection = stReqAddHeroRune_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRetAddHeroRune_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetAddHeroRune_eResult_descriptor_;
}
bool stRetAddHeroRune_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetAddHeroRune_eResult stRetAddHeroRune::eSuccess;
const stRetAddHeroRune_eResult stRetAddHeroRune::eNo_Such_Hero;
const stRetAddHeroRune_eResult stRetAddHeroRune::eNo_Such_Rune;
const stRetAddHeroRune_eResult stRetAddHeroRune::eRune_Same_Attr;
const stRetAddHeroRune_eResult stRetAddHeroRune::eNo_Such_Pos;
const stRetAddHeroRune_eResult stRetAddHeroRune::eInner_Error;
const stRetAddHeroRune_eResult stRetAddHeroRune::eResult_MIN;
const stRetAddHeroRune_eResult stRetAddHeroRune::eResult_MAX;
const int stRetAddHeroRune::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetAddHeroRune_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetAddHeroRune_ProtoModID_descriptor_;
}
bool stRetAddHeroRune_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetAddHeroRune_ProtoModID stRetAddHeroRune::ModID;
const stRetAddHeroRune_ProtoModID stRetAddHeroRune::ProtoModID_MIN;
const stRetAddHeroRune_ProtoModID stRetAddHeroRune::ProtoModID_MAX;
const int stRetAddHeroRune::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetAddHeroRune_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetAddHeroRune_ProtoFunID_descriptor_;
}
bool stRetAddHeroRune_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 170:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetAddHeroRune_ProtoFunID stRetAddHeroRune::FunID;
const stRetAddHeroRune_ProtoFunID stRetAddHeroRune::ProtoFunID_MIN;
const stRetAddHeroRune_ProtoFunID stRetAddHeroRune::ProtoFunID_MAX;
const int stRetAddHeroRune::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRetAddHeroRune::kHeroIDFieldNumber;
const int stRetAddHeroRune::kInstanceIDFieldNumber;
const int stRetAddHeroRune::kPosFieldNumber;
const int stRetAddHeroRune::kRunesFieldNumber;
const int stRetAddHeroRune::kResultFieldNumber;
#endif  // !_MSC_VER

stRetAddHeroRune::stRetAddHeroRune()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRetAddHeroRune::InitAsDefaultInstance() {
}

stRetAddHeroRune::stRetAddHeroRune(const stRetAddHeroRune& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRetAddHeroRune::SharedCtor() {
  _cached_size_ = 0;
  heroid_ = 0u;
  instanceid_ = GOOGLE_ULONGLONG(0);
  pos_ = 0u;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRetAddHeroRune::~stRetAddHeroRune() {
  SharedDtor();
}

void stRetAddHeroRune::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRetAddHeroRune::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRetAddHeroRune::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetAddHeroRune_descriptor_;
}

const stRetAddHeroRune& stRetAddHeroRune::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stRetAddHeroRune* stRetAddHeroRune::default_instance_ = NULL;

stRetAddHeroRune* stRetAddHeroRune::New() const {
  return new stRetAddHeroRune;
}

void stRetAddHeroRune::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    heroid_ = 0u;
    instanceid_ = GOOGLE_ULONGLONG(0);
    pos_ = 0u;
    result_ = 1;
  }
  runes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRetAddHeroRune::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 heroID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heroid_)));
          set_has_heroid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_instanceID;
        break;
      }

      // optional uint64 instanceID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_instanceID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &instanceid_)));
          set_has_instanceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pos;
        break;
      }

      // optional uint32 pos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_runes;
        break;
      }

      // repeated .Role.stHeroRuneInfo runes = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_runes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_runes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_runes;
        if (input->ExpectTag(40)) goto parse_result;
        break;
      }

      // optional .Role.stRetAddHeroRune.eResult result = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Role::stRetAddHeroRune_eResult_IsValid(value)) {
            set_result(static_cast< ::Role::stRetAddHeroRune_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRetAddHeroRune::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 heroID = 1;
  if (has_heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->heroid(), output);
  }

  // optional uint64 instanceID = 2;
  if (has_instanceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->instanceid(), output);
  }

  // optional uint32 pos = 3;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->pos(), output);
  }

  // repeated .Role.stHeroRuneInfo runes = 4;
  for (int i = 0; i < this->runes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->runes(i), output);
  }

  // optional .Role.stRetAddHeroRune.eResult result = 5;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRetAddHeroRune::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 heroID = 1;
  if (has_heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->heroid(), target);
  }

  // optional uint64 instanceID = 2;
  if (has_instanceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->instanceid(), target);
  }

  // optional uint32 pos = 3;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->pos(), target);
  }

  // repeated .Role.stHeroRuneInfo runes = 4;
  for (int i = 0; i < this->runes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->runes(i), target);
  }

  // optional .Role.stRetAddHeroRune.eResult result = 5;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRetAddHeroRune::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 heroID = 1;
    if (has_heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heroid());
    }

    // optional uint64 instanceID = 2;
    if (has_instanceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->instanceid());
    }

    // optional uint32 pos = 3;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

    // optional .Role.stRetAddHeroRune.eResult result = 5;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  // repeated .Role.stHeroRuneInfo runes = 4;
  total_size += 1 * this->runes_size();
  for (int i = 0; i < this->runes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->runes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRetAddHeroRune::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRetAddHeroRune* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRetAddHeroRune*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRetAddHeroRune::MergeFrom(const stRetAddHeroRune& from) {
  GOOGLE_CHECK_NE(&from, this);
  runes_.MergeFrom(from.runes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_heroid()) {
      set_heroid(from.heroid());
    }
    if (from.has_instanceid()) {
      set_instanceid(from.instanceid());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRetAddHeroRune::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRetAddHeroRune::CopyFrom(const stRetAddHeroRune& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRetAddHeroRune::IsInitialized() const {

  return true;
}

void stRetAddHeroRune::Swap(stRetAddHeroRune* other) {
  if (other != this) {
    std::swap(heroid_, other->heroid_);
    std::swap(instanceid_, other->instanceid_);
    std::swap(pos_, other->pos_);
    runes_.Swap(&other->runes_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRetAddHeroRune::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRetAddHeroRune_descriptor_;
  metadata.reflection = stRetAddHeroRune_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqDelHeroRune_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqDelHeroRune_ProtoModID_descriptor_;
}
bool stReqDelHeroRune_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqDelHeroRune_ProtoModID stReqDelHeroRune::ModID;
const stReqDelHeroRune_ProtoModID stReqDelHeroRune::ProtoModID_MIN;
const stReqDelHeroRune_ProtoModID stReqDelHeroRune::ProtoModID_MAX;
const int stReqDelHeroRune::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqDelHeroRune_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqDelHeroRune_ProtoFunID_descriptor_;
}
bool stReqDelHeroRune_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 171:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqDelHeroRune_ProtoFunID stReqDelHeroRune::FunID;
const stReqDelHeroRune_ProtoFunID stReqDelHeroRune::ProtoFunID_MIN;
const stReqDelHeroRune_ProtoFunID stReqDelHeroRune::ProtoFunID_MAX;
const int stReqDelHeroRune::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqDelHeroRune::kHeroIDFieldNumber;
const int stReqDelHeroRune::kInstanceIDFieldNumber;
const int stReqDelHeroRune::kPosFieldNumber;
#endif  // !_MSC_VER

stReqDelHeroRune::stReqDelHeroRune()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqDelHeroRune::InitAsDefaultInstance() {
}

stReqDelHeroRune::stReqDelHeroRune(const stReqDelHeroRune& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqDelHeroRune::SharedCtor() {
  _cached_size_ = 0;
  heroid_ = 0u;
  instanceid_ = GOOGLE_ULONGLONG(0);
  pos_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqDelHeroRune::~stReqDelHeroRune() {
  SharedDtor();
}

void stReqDelHeroRune::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqDelHeroRune::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqDelHeroRune::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqDelHeroRune_descriptor_;
}

const stReqDelHeroRune& stReqDelHeroRune::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stReqDelHeroRune* stReqDelHeroRune::default_instance_ = NULL;

stReqDelHeroRune* stReqDelHeroRune::New() const {
  return new stReqDelHeroRune;
}

void stReqDelHeroRune::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    heroid_ = 0u;
    instanceid_ = GOOGLE_ULONGLONG(0);
    pos_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqDelHeroRune::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 heroID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heroid_)));
          set_has_heroid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_instanceID;
        break;
      }

      // optional uint64 instanceID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_instanceID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &instanceid_)));
          set_has_instanceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pos;
        break;
      }

      // optional uint32 pos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqDelHeroRune::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 heroID = 1;
  if (has_heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->heroid(), output);
  }

  // optional uint64 instanceID = 2;
  if (has_instanceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->instanceid(), output);
  }

  // optional uint32 pos = 3;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqDelHeroRune::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 heroID = 1;
  if (has_heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->heroid(), target);
  }

  // optional uint64 instanceID = 2;
  if (has_instanceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->instanceid(), target);
  }

  // optional uint32 pos = 3;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqDelHeroRune::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 heroID = 1;
    if (has_heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heroid());
    }

    // optional uint64 instanceID = 2;
    if (has_instanceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->instanceid());
    }

    // optional uint32 pos = 3;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqDelHeroRune::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqDelHeroRune* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqDelHeroRune*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqDelHeroRune::MergeFrom(const stReqDelHeroRune& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_heroid()) {
      set_heroid(from.heroid());
    }
    if (from.has_instanceid()) {
      set_instanceid(from.instanceid());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqDelHeroRune::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqDelHeroRune::CopyFrom(const stReqDelHeroRune& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqDelHeroRune::IsInitialized() const {

  return true;
}

void stReqDelHeroRune::Swap(stReqDelHeroRune* other) {
  if (other != this) {
    std::swap(heroid_, other->heroid_);
    std::swap(instanceid_, other->instanceid_);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqDelHeroRune::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqDelHeroRune_descriptor_;
  metadata.reflection = stReqDelHeroRune_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRetDelHeroRune_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetDelHeroRune_eResult_descriptor_;
}
bool stRetDelHeroRune_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetDelHeroRune_eResult stRetDelHeroRune::eSuccess;
const stRetDelHeroRune_eResult stRetDelHeroRune::eNo_Such_Hero;
const stRetDelHeroRune_eResult stRetDelHeroRune::eNo_Such_Rune;
const stRetDelHeroRune_eResult stRetDelHeroRune::eNo_Such_Pos;
const stRetDelHeroRune_eResult stRetDelHeroRune::eRun_Bag_Full;
const stRetDelHeroRune_eResult stRetDelHeroRune::eInner_Error;
const stRetDelHeroRune_eResult stRetDelHeroRune::eResult_MIN;
const stRetDelHeroRune_eResult stRetDelHeroRune::eResult_MAX;
const int stRetDelHeroRune::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetDelHeroRune_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetDelHeroRune_ProtoModID_descriptor_;
}
bool stRetDelHeroRune_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetDelHeroRune_ProtoModID stRetDelHeroRune::ModID;
const stRetDelHeroRune_ProtoModID stRetDelHeroRune::ProtoModID_MIN;
const stRetDelHeroRune_ProtoModID stRetDelHeroRune::ProtoModID_MAX;
const int stRetDelHeroRune::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetDelHeroRune_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetDelHeroRune_ProtoFunID_descriptor_;
}
bool stRetDelHeroRune_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 172:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetDelHeroRune_ProtoFunID stRetDelHeroRune::FunID;
const stRetDelHeroRune_ProtoFunID stRetDelHeroRune::ProtoFunID_MIN;
const stRetDelHeroRune_ProtoFunID stRetDelHeroRune::ProtoFunID_MAX;
const int stRetDelHeroRune::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRetDelHeroRune::kHeroIDFieldNumber;
const int stRetDelHeroRune::kInstanceIDFieldNumber;
const int stRetDelHeroRune::kPosFieldNumber;
const int stRetDelHeroRune::kRunesFieldNumber;
const int stRetDelHeroRune::kResultFieldNumber;
#endif  // !_MSC_VER

stRetDelHeroRune::stRetDelHeroRune()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRetDelHeroRune::InitAsDefaultInstance() {
}

stRetDelHeroRune::stRetDelHeroRune(const stRetDelHeroRune& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRetDelHeroRune::SharedCtor() {
  _cached_size_ = 0;
  heroid_ = 0u;
  instanceid_ = GOOGLE_ULONGLONG(0);
  pos_ = 0u;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRetDelHeroRune::~stRetDelHeroRune() {
  SharedDtor();
}

void stRetDelHeroRune::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRetDelHeroRune::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRetDelHeroRune::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetDelHeroRune_descriptor_;
}

const stRetDelHeroRune& stRetDelHeroRune::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stRetDelHeroRune* stRetDelHeroRune::default_instance_ = NULL;

stRetDelHeroRune* stRetDelHeroRune::New() const {
  return new stRetDelHeroRune;
}

void stRetDelHeroRune::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    heroid_ = 0u;
    instanceid_ = GOOGLE_ULONGLONG(0);
    pos_ = 0u;
    result_ = 1;
  }
  runes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRetDelHeroRune::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 heroID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heroid_)));
          set_has_heroid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_instanceID;
        break;
      }

      // optional uint64 instanceID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_instanceID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &instanceid_)));
          set_has_instanceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pos;
        break;
      }

      // optional uint32 pos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_runes;
        break;
      }

      // repeated .Role.stHeroRuneInfo runes = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_runes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_runes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_runes;
        if (input->ExpectTag(40)) goto parse_result;
        break;
      }

      // optional .Role.stRetDelHeroRune.eResult result = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Role::stRetDelHeroRune_eResult_IsValid(value)) {
            set_result(static_cast< ::Role::stRetDelHeroRune_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRetDelHeroRune::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 heroID = 1;
  if (has_heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->heroid(), output);
  }

  // optional uint64 instanceID = 2;
  if (has_instanceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->instanceid(), output);
  }

  // optional uint32 pos = 3;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->pos(), output);
  }

  // repeated .Role.stHeroRuneInfo runes = 4;
  for (int i = 0; i < this->runes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->runes(i), output);
  }

  // optional .Role.stRetDelHeroRune.eResult result = 5;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRetDelHeroRune::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 heroID = 1;
  if (has_heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->heroid(), target);
  }

  // optional uint64 instanceID = 2;
  if (has_instanceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->instanceid(), target);
  }

  // optional uint32 pos = 3;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->pos(), target);
  }

  // repeated .Role.stHeroRuneInfo runes = 4;
  for (int i = 0; i < this->runes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->runes(i), target);
  }

  // optional .Role.stRetDelHeroRune.eResult result = 5;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRetDelHeroRune::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 heroID = 1;
    if (has_heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heroid());
    }

    // optional uint64 instanceID = 2;
    if (has_instanceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->instanceid());
    }

    // optional uint32 pos = 3;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

    // optional .Role.stRetDelHeroRune.eResult result = 5;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  // repeated .Role.stHeroRuneInfo runes = 4;
  total_size += 1 * this->runes_size();
  for (int i = 0; i < this->runes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->runes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRetDelHeroRune::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRetDelHeroRune* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRetDelHeroRune*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRetDelHeroRune::MergeFrom(const stRetDelHeroRune& from) {
  GOOGLE_CHECK_NE(&from, this);
  runes_.MergeFrom(from.runes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_heroid()) {
      set_heroid(from.heroid());
    }
    if (from.has_instanceid()) {
      set_instanceid(from.instanceid());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRetDelHeroRune::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRetDelHeroRune::CopyFrom(const stRetDelHeroRune& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRetDelHeroRune::IsInitialized() const {

  return true;
}

void stRetDelHeroRune::Swap(stRetDelHeroRune* other) {
  if (other != this) {
    std::swap(heroid_, other->heroid_);
    std::swap(instanceid_, other->instanceid_);
    std::swap(pos_, other->pos_);
    runes_.Swap(&other->runes_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRetDelHeroRune::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRetDelHeroRune_descriptor_;
  metadata.reflection = stRetDelHeroRune_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqRunePieceCombine_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqRunePieceCombine_ProtoModID_descriptor_;
}
bool stReqRunePieceCombine_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqRunePieceCombine_ProtoModID stReqRunePieceCombine::ModID;
const stReqRunePieceCombine_ProtoModID stReqRunePieceCombine::ProtoModID_MIN;
const stReqRunePieceCombine_ProtoModID stReqRunePieceCombine::ProtoModID_MAX;
const int stReqRunePieceCombine::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqRunePieceCombine_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqRunePieceCombine_ProtoFunID_descriptor_;
}
bool stReqRunePieceCombine_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 173:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqRunePieceCombine_ProtoFunID stReqRunePieceCombine::FunID;
const stReqRunePieceCombine_ProtoFunID stReqRunePieceCombine::ProtoFunID_MIN;
const stReqRunePieceCombine_ProtoFunID stReqRunePieceCombine::ProtoFunID_MAX;
const int stReqRunePieceCombine::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqRunePieceCombine::kInstanceIDFieldNumber;
#endif  // !_MSC_VER

stReqRunePieceCombine::stReqRunePieceCombine()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqRunePieceCombine::InitAsDefaultInstance() {
}

stReqRunePieceCombine::stReqRunePieceCombine(const stReqRunePieceCombine& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqRunePieceCombine::SharedCtor() {
  _cached_size_ = 0;
  instanceid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqRunePieceCombine::~stReqRunePieceCombine() {
  SharedDtor();
}

void stReqRunePieceCombine::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqRunePieceCombine::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqRunePieceCombine::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqRunePieceCombine_descriptor_;
}

const stReqRunePieceCombine& stReqRunePieceCombine::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stReqRunePieceCombine* stReqRunePieceCombine::default_instance_ = NULL;

stReqRunePieceCombine* stReqRunePieceCombine::New() const {
  return new stReqRunePieceCombine;
}

void stReqRunePieceCombine::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    instanceid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqRunePieceCombine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 instanceID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &instanceid_)));
          set_has_instanceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqRunePieceCombine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 instanceID = 1;
  if (has_instanceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->instanceid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqRunePieceCombine::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 instanceID = 1;
  if (has_instanceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->instanceid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqRunePieceCombine::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 instanceID = 1;
    if (has_instanceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->instanceid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqRunePieceCombine::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqRunePieceCombine* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqRunePieceCombine*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqRunePieceCombine::MergeFrom(const stReqRunePieceCombine& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_instanceid()) {
      set_instanceid(from.instanceid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqRunePieceCombine::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqRunePieceCombine::CopyFrom(const stReqRunePieceCombine& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqRunePieceCombine::IsInitialized() const {

  return true;
}

void stReqRunePieceCombine::Swap(stReqRunePieceCombine* other) {
  if (other != this) {
    std::swap(instanceid_, other->instanceid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqRunePieceCombine::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqRunePieceCombine_descriptor_;
  metadata.reflection = stReqRunePieceCombine_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRetRunePieceCombine_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetRunePieceCombine_eResult_descriptor_;
}
bool stRetRunePieceCombine_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetRunePieceCombine_eResult stRetRunePieceCombine::eSuccess;
const stRetRunePieceCombine_eResult stRetRunePieceCombine::eLess_Of_Rune_Piece;
const stRetRunePieceCombine_eResult stRetRunePieceCombine::eNo_Such_Rune_Piece;
const stRetRunePieceCombine_eResult stRetRunePieceCombine::eRune_Bag_Full;
const stRetRunePieceCombine_eResult stRetRunePieceCombine::eLess_Of_Soul_Fire;
const stRetRunePieceCombine_eResult stRetRunePieceCombine::eInner_Error;
const stRetRunePieceCombine_eResult stRetRunePieceCombine::eResult_MIN;
const stRetRunePieceCombine_eResult stRetRunePieceCombine::eResult_MAX;
const int stRetRunePieceCombine::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetRunePieceCombine_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetRunePieceCombine_ProtoModID_descriptor_;
}
bool stRetRunePieceCombine_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetRunePieceCombine_ProtoModID stRetRunePieceCombine::ModID;
const stRetRunePieceCombine_ProtoModID stRetRunePieceCombine::ProtoModID_MIN;
const stRetRunePieceCombine_ProtoModID stRetRunePieceCombine::ProtoModID_MAX;
const int stRetRunePieceCombine::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetRunePieceCombine_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetRunePieceCombine_ProtoFunID_descriptor_;
}
bool stRetRunePieceCombine_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 174:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetRunePieceCombine_ProtoFunID stRetRunePieceCombine::FunID;
const stRetRunePieceCombine_ProtoFunID stRetRunePieceCombine::ProtoFunID_MIN;
const stRetRunePieceCombine_ProtoFunID stRetRunePieceCombine::ProtoFunID_MAX;
const int stRetRunePieceCombine::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRetRunePieceCombine::kInstanceIDFieldNumber;
const int stRetRunePieceCombine::kItemIdFieldNumber;
const int stRetRunePieceCombine::kResultFieldNumber;
#endif  // !_MSC_VER

stRetRunePieceCombine::stRetRunePieceCombine()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRetRunePieceCombine::InitAsDefaultInstance() {
}

stRetRunePieceCombine::stRetRunePieceCombine(const stRetRunePieceCombine& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRetRunePieceCombine::SharedCtor() {
  _cached_size_ = 0;
  instanceid_ = GOOGLE_ULONGLONG(0);
  itemid_ = 0u;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRetRunePieceCombine::~stRetRunePieceCombine() {
  SharedDtor();
}

void stRetRunePieceCombine::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRetRunePieceCombine::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRetRunePieceCombine::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetRunePieceCombine_descriptor_;
}

const stRetRunePieceCombine& stRetRunePieceCombine::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stRetRunePieceCombine* stRetRunePieceCombine::default_instance_ = NULL;

stRetRunePieceCombine* stRetRunePieceCombine::New() const {
  return new stRetRunePieceCombine;
}

void stRetRunePieceCombine::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    instanceid_ = GOOGLE_ULONGLONG(0);
    itemid_ = 0u;
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRetRunePieceCombine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 instanceID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &instanceid_)));
          set_has_instanceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemId;
        break;
      }

      // optional uint32 itemId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // optional .Role.stRetRunePieceCombine.eResult result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Role::stRetRunePieceCombine_eResult_IsValid(value)) {
            set_result(static_cast< ::Role::stRetRunePieceCombine_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRetRunePieceCombine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 instanceID = 1;
  if (has_instanceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->instanceid(), output);
  }

  // optional uint32 itemId = 2;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->itemid(), output);
  }

  // optional .Role.stRetRunePieceCombine.eResult result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRetRunePieceCombine::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 instanceID = 1;
  if (has_instanceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->instanceid(), target);
  }

  // optional uint32 itemId = 2;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->itemid(), target);
  }

  // optional .Role.stRetRunePieceCombine.eResult result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRetRunePieceCombine::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 instanceID = 1;
    if (has_instanceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->instanceid());
    }

    // optional uint32 itemId = 2;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // optional .Role.stRetRunePieceCombine.eResult result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRetRunePieceCombine::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRetRunePieceCombine* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRetRunePieceCombine*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRetRunePieceCombine::MergeFrom(const stRetRunePieceCombine& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_instanceid()) {
      set_instanceid(from.instanceid());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRetRunePieceCombine::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRetRunePieceCombine::CopyFrom(const stRetRunePieceCombine& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRetRunePieceCombine::IsInitialized() const {

  return true;
}

void stRetRunePieceCombine::Swap(stRetRunePieceCombine* other) {
  if (other != this) {
    std::swap(instanceid_, other->instanceid_);
    std::swap(itemid_, other->itemid_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRetRunePieceCombine::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRetRunePieceCombine_descriptor_;
  metadata.reflection = stRetRunePieceCombine_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqRuneIntensify_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqRuneIntensify_ProtoModID_descriptor_;
}
bool stReqRuneIntensify_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqRuneIntensify_ProtoModID stReqRuneIntensify::ModID;
const stReqRuneIntensify_ProtoModID stReqRuneIntensify::ProtoModID_MIN;
const stReqRuneIntensify_ProtoModID stReqRuneIntensify::ProtoModID_MAX;
const int stReqRuneIntensify::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqRuneIntensify_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqRuneIntensify_ProtoFunID_descriptor_;
}
bool stReqRuneIntensify_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 175:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqRuneIntensify_ProtoFunID stReqRuneIntensify::FunID;
const stReqRuneIntensify_ProtoFunID stReqRuneIntensify::ProtoFunID_MIN;
const stReqRuneIntensify_ProtoFunID stReqRuneIntensify::ProtoFunID_MAX;
const int stReqRuneIntensify::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqRuneIntensify::kBagTypeFieldNumber;
const int stReqRuneIntensify::kInstanceIDFieldNumber;
const int stReqRuneIntensify::kEatInstanceIDFieldNumber;
const int stReqRuneIntensify::kHeroIDFieldNumber;
#endif  // !_MSC_VER

stReqRuneIntensify::stReqRuneIntensify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqRuneIntensify::InitAsDefaultInstance() {
}

stReqRuneIntensify::stReqRuneIntensify(const stReqRuneIntensify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqRuneIntensify::SharedCtor() {
  _cached_size_ = 0;
  bagtype_ = 0u;
  instanceid_ = GOOGLE_ULONGLONG(0);
  heroid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqRuneIntensify::~stReqRuneIntensify() {
  SharedDtor();
}

void stReqRuneIntensify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqRuneIntensify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqRuneIntensify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqRuneIntensify_descriptor_;
}

const stReqRuneIntensify& stReqRuneIntensify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stReqRuneIntensify* stReqRuneIntensify::default_instance_ = NULL;

stReqRuneIntensify* stReqRuneIntensify::New() const {
  return new stReqRuneIntensify;
}

void stReqRuneIntensify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bagtype_ = 0u;
    instanceid_ = GOOGLE_ULONGLONG(0);
    heroid_ = 0u;
  }
  eatinstanceid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqRuneIntensify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 bagType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bagtype_)));
          set_has_bagtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_instanceID;
        break;
      }

      // optional uint64 instanceID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_instanceID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &instanceid_)));
          set_has_instanceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_eatInstanceID;
        break;
      }

      // repeated uint64 eatInstanceID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eatInstanceID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 24, input, this->mutable_eatinstanceid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_eatinstanceid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_eatInstanceID;
        if (input->ExpectTag(32)) goto parse_heroID;
        break;
      }

      // optional uint32 heroID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_heroID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heroid_)));
          set_has_heroid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqRuneIntensify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 bagType = 1;
  if (has_bagtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bagtype(), output);
  }

  // optional uint64 instanceID = 2;
  if (has_instanceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->instanceid(), output);
  }

  // repeated uint64 eatInstanceID = 3;
  for (int i = 0; i < this->eatinstanceid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      3, this->eatinstanceid(i), output);
  }

  // optional uint32 heroID = 4;
  if (has_heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->heroid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqRuneIntensify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 bagType = 1;
  if (has_bagtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bagtype(), target);
  }

  // optional uint64 instanceID = 2;
  if (has_instanceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->instanceid(), target);
  }

  // repeated uint64 eatInstanceID = 3;
  for (int i = 0; i < this->eatinstanceid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(3, this->eatinstanceid(i), target);
  }

  // optional uint32 heroID = 4;
  if (has_heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->heroid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqRuneIntensify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 bagType = 1;
    if (has_bagtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bagtype());
    }

    // optional uint64 instanceID = 2;
    if (has_instanceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->instanceid());
    }

    // optional uint32 heroID = 4;
    if (has_heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heroid());
    }

  }
  // repeated uint64 eatInstanceID = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->eatinstanceid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->eatinstanceid(i));
    }
    total_size += 1 * this->eatinstanceid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqRuneIntensify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqRuneIntensify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqRuneIntensify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqRuneIntensify::MergeFrom(const stReqRuneIntensify& from) {
  GOOGLE_CHECK_NE(&from, this);
  eatinstanceid_.MergeFrom(from.eatinstanceid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bagtype()) {
      set_bagtype(from.bagtype());
    }
    if (from.has_instanceid()) {
      set_instanceid(from.instanceid());
    }
    if (from.has_heroid()) {
      set_heroid(from.heroid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqRuneIntensify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqRuneIntensify::CopyFrom(const stReqRuneIntensify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqRuneIntensify::IsInitialized() const {

  return true;
}

void stReqRuneIntensify::Swap(stReqRuneIntensify* other) {
  if (other != this) {
    std::swap(bagtype_, other->bagtype_);
    std::swap(instanceid_, other->instanceid_);
    eatinstanceid_.Swap(&other->eatinstanceid_);
    std::swap(heroid_, other->heroid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqRuneIntensify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqRuneIntensify_descriptor_;
  metadata.reflection = stReqRuneIntensify_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRetRuneIntensify_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetRuneIntensify_eResult_descriptor_;
}
bool stRetRuneIntensify_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetRuneIntensify_eResult stRetRuneIntensify::eSuccess;
const stRetRuneIntensify_eResult stRetRuneIntensify::eNo_Such_Rune;
const stRetRuneIntensify_eResult stRetRuneIntensify::eLess_Of_Gold;
const stRetRuneIntensify_eResult stRetRuneIntensify::eMax_Run_Lvl;
const stRetRuneIntensify_eResult stRetRuneIntensify::eLess_Of_Soul_Fire;
const stRetRuneIntensify_eResult stRetRuneIntensify::eMax_Eat_Num;
const stRetRuneIntensify_eResult stRetRuneIntensify::eEat_Self;
const stRetRuneIntensify_eResult stRetRuneIntensify::eNot_Exist_Eat_Rune;
const stRetRuneIntensify_eResult stRetRuneIntensify::eInner_Error;
const stRetRuneIntensify_eResult stRetRuneIntensify::eResult_MIN;
const stRetRuneIntensify_eResult stRetRuneIntensify::eResult_MAX;
const int stRetRuneIntensify::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetRuneIntensify_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetRuneIntensify_ProtoModID_descriptor_;
}
bool stRetRuneIntensify_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetRuneIntensify_ProtoModID stRetRuneIntensify::ModID;
const stRetRuneIntensify_ProtoModID stRetRuneIntensify::ProtoModID_MIN;
const stRetRuneIntensify_ProtoModID stRetRuneIntensify::ProtoModID_MAX;
const int stRetRuneIntensify::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetRuneIntensify_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetRuneIntensify_ProtoFunID_descriptor_;
}
bool stRetRuneIntensify_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 176:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetRuneIntensify_ProtoFunID stRetRuneIntensify::FunID;
const stRetRuneIntensify_ProtoFunID stRetRuneIntensify::ProtoFunID_MIN;
const stRetRuneIntensify_ProtoFunID stRetRuneIntensify::ProtoFunID_MAX;
const int stRetRuneIntensify::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRetRuneIntensify::kBagTypeFieldNumber;
const int stRetRuneIntensify::kInstanceIDFieldNumber;
const int stRetRuneIntensify::kResultFieldNumber;
#endif  // !_MSC_VER

stRetRuneIntensify::stRetRuneIntensify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRetRuneIntensify::InitAsDefaultInstance() {
}

stRetRuneIntensify::stRetRuneIntensify(const stRetRuneIntensify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRetRuneIntensify::SharedCtor() {
  _cached_size_ = 0;
  bagtype_ = 0u;
  instanceid_ = GOOGLE_ULONGLONG(0);
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRetRuneIntensify::~stRetRuneIntensify() {
  SharedDtor();
}

void stRetRuneIntensify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRetRuneIntensify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRetRuneIntensify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetRuneIntensify_descriptor_;
}

const stRetRuneIntensify& stRetRuneIntensify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stRetRuneIntensify* stRetRuneIntensify::default_instance_ = NULL;

stRetRuneIntensify* stRetRuneIntensify::New() const {
  return new stRetRuneIntensify;
}

void stRetRuneIntensify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bagtype_ = 0u;
    instanceid_ = GOOGLE_ULONGLONG(0);
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRetRuneIntensify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 bagType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bagtype_)));
          set_has_bagtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_instanceID;
        break;
      }

      // optional uint64 instanceID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_instanceID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &instanceid_)));
          set_has_instanceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // optional .Role.stRetRuneIntensify.eResult result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Role::stRetRuneIntensify_eResult_IsValid(value)) {
            set_result(static_cast< ::Role::stRetRuneIntensify_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRetRuneIntensify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 bagType = 1;
  if (has_bagtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bagtype(), output);
  }

  // optional uint64 instanceID = 2;
  if (has_instanceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->instanceid(), output);
  }

  // optional .Role.stRetRuneIntensify.eResult result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRetRuneIntensify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 bagType = 1;
  if (has_bagtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bagtype(), target);
  }

  // optional uint64 instanceID = 2;
  if (has_instanceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->instanceid(), target);
  }

  // optional .Role.stRetRuneIntensify.eResult result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRetRuneIntensify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 bagType = 1;
    if (has_bagtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bagtype());
    }

    // optional uint64 instanceID = 2;
    if (has_instanceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->instanceid());
    }

    // optional .Role.stRetRuneIntensify.eResult result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRetRuneIntensify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRetRuneIntensify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRetRuneIntensify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRetRuneIntensify::MergeFrom(const stRetRuneIntensify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bagtype()) {
      set_bagtype(from.bagtype());
    }
    if (from.has_instanceid()) {
      set_instanceid(from.instanceid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRetRuneIntensify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRetRuneIntensify::CopyFrom(const stRetRuneIntensify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRetRuneIntensify::IsInitialized() const {

  return true;
}

void stRetRuneIntensify::Swap(stRetRuneIntensify* other) {
  if (other != this) {
    std::swap(bagtype_, other->bagtype_);
    std::swap(instanceid_, other->instanceid_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRetRuneIntensify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRetRuneIntensify_descriptor_;
  metadata.reflection = stRetRuneIntensify_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqRuneEvolve_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqRuneEvolve_ProtoModID_descriptor_;
}
bool stReqRuneEvolve_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqRuneEvolve_ProtoModID stReqRuneEvolve::ModID;
const stReqRuneEvolve_ProtoModID stReqRuneEvolve::ProtoModID_MIN;
const stReqRuneEvolve_ProtoModID stReqRuneEvolve::ProtoModID_MAX;
const int stReqRuneEvolve::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqRuneEvolve_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqRuneEvolve_ProtoFunID_descriptor_;
}
bool stReqRuneEvolve_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 177:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqRuneEvolve_ProtoFunID stReqRuneEvolve::FunID;
const stReqRuneEvolve_ProtoFunID stReqRuneEvolve::ProtoFunID_MIN;
const stReqRuneEvolve_ProtoFunID stReqRuneEvolve::ProtoFunID_MAX;
const int stReqRuneEvolve::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqRuneEvolve::kBagTypeFieldNumber;
const int stReqRuneEvolve::kInstanceIDFieldNumber;
const int stReqRuneEvolve::kHeroIDFieldNumber;
#endif  // !_MSC_VER

stReqRuneEvolve::stReqRuneEvolve()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqRuneEvolve::InitAsDefaultInstance() {
}

stReqRuneEvolve::stReqRuneEvolve(const stReqRuneEvolve& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqRuneEvolve::SharedCtor() {
  _cached_size_ = 0;
  bagtype_ = 0u;
  instanceid_ = GOOGLE_ULONGLONG(0);
  heroid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqRuneEvolve::~stReqRuneEvolve() {
  SharedDtor();
}

void stReqRuneEvolve::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqRuneEvolve::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqRuneEvolve::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqRuneEvolve_descriptor_;
}

const stReqRuneEvolve& stReqRuneEvolve::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stReqRuneEvolve* stReqRuneEvolve::default_instance_ = NULL;

stReqRuneEvolve* stReqRuneEvolve::New() const {
  return new stReqRuneEvolve;
}

void stReqRuneEvolve::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bagtype_ = 0u;
    instanceid_ = GOOGLE_ULONGLONG(0);
    heroid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqRuneEvolve::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 bagType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bagtype_)));
          set_has_bagtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_instanceID;
        break;
      }

      // optional uint64 instanceID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_instanceID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &instanceid_)));
          set_has_instanceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_heroID;
        break;
      }

      // optional uint32 heroID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_heroID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heroid_)));
          set_has_heroid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqRuneEvolve::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 bagType = 1;
  if (has_bagtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bagtype(), output);
  }

  // optional uint64 instanceID = 2;
  if (has_instanceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->instanceid(), output);
  }

  // optional uint32 heroID = 3;
  if (has_heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->heroid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqRuneEvolve::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 bagType = 1;
  if (has_bagtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bagtype(), target);
  }

  // optional uint64 instanceID = 2;
  if (has_instanceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->instanceid(), target);
  }

  // optional uint32 heroID = 3;
  if (has_heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->heroid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqRuneEvolve::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 bagType = 1;
    if (has_bagtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bagtype());
    }

    // optional uint64 instanceID = 2;
    if (has_instanceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->instanceid());
    }

    // optional uint32 heroID = 3;
    if (has_heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heroid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqRuneEvolve::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqRuneEvolve* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqRuneEvolve*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqRuneEvolve::MergeFrom(const stReqRuneEvolve& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bagtype()) {
      set_bagtype(from.bagtype());
    }
    if (from.has_instanceid()) {
      set_instanceid(from.instanceid());
    }
    if (from.has_heroid()) {
      set_heroid(from.heroid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqRuneEvolve::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqRuneEvolve::CopyFrom(const stReqRuneEvolve& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqRuneEvolve::IsInitialized() const {

  return true;
}

void stReqRuneEvolve::Swap(stReqRuneEvolve* other) {
  if (other != this) {
    std::swap(bagtype_, other->bagtype_);
    std::swap(instanceid_, other->instanceid_);
    std::swap(heroid_, other->heroid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqRuneEvolve::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqRuneEvolve_descriptor_;
  metadata.reflection = stReqRuneEvolve_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRetRuneEvolve_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetRuneEvolve_eResult_descriptor_;
}
bool stRetRuneEvolve_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetRuneEvolve_eResult stRetRuneEvolve::eSuccess;
const stRetRuneEvolve_eResult stRetRuneEvolve::eNo_Such_Rune;
const stRetRuneEvolve_eResult stRetRuneEvolve::eLess_Of_Gold;
const stRetRuneEvolve_eResult stRetRuneEvolve::eRune_Max_Lvl;
const stRetRuneEvolve_eResult stRetRuneEvolve::eLess_Of_Rune;
const stRetRuneEvolve_eResult stRetRuneEvolve::eRole_Lvl_Limit;
const stRetRuneEvolve_eResult stRetRuneEvolve::eInner_Error;
const stRetRuneEvolve_eResult stRetRuneEvolve::eResult_MIN;
const stRetRuneEvolve_eResult stRetRuneEvolve::eResult_MAX;
const int stRetRuneEvolve::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetRuneEvolve_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetRuneEvolve_ProtoModID_descriptor_;
}
bool stRetRuneEvolve_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetRuneEvolve_ProtoModID stRetRuneEvolve::ModID;
const stRetRuneEvolve_ProtoModID stRetRuneEvolve::ProtoModID_MIN;
const stRetRuneEvolve_ProtoModID stRetRuneEvolve::ProtoModID_MAX;
const int stRetRuneEvolve::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetRuneEvolve_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetRuneEvolve_ProtoFunID_descriptor_;
}
bool stRetRuneEvolve_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 178:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetRuneEvolve_ProtoFunID stRetRuneEvolve::FunID;
const stRetRuneEvolve_ProtoFunID stRetRuneEvolve::ProtoFunID_MIN;
const stRetRuneEvolve_ProtoFunID stRetRuneEvolve::ProtoFunID_MAX;
const int stRetRuneEvolve::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRetRuneEvolve::kBagTypeFieldNumber;
const int stRetRuneEvolve::kInstanceIDFieldNumber;
const int stRetRuneEvolve::kResultFieldNumber;
#endif  // !_MSC_VER

stRetRuneEvolve::stRetRuneEvolve()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRetRuneEvolve::InitAsDefaultInstance() {
}

stRetRuneEvolve::stRetRuneEvolve(const stRetRuneEvolve& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRetRuneEvolve::SharedCtor() {
  _cached_size_ = 0;
  bagtype_ = 0u;
  instanceid_ = GOOGLE_ULONGLONG(0);
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRetRuneEvolve::~stRetRuneEvolve() {
  SharedDtor();
}

void stRetRuneEvolve::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRetRuneEvolve::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRetRuneEvolve::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetRuneEvolve_descriptor_;
}

const stRetRuneEvolve& stRetRuneEvolve::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stRetRuneEvolve* stRetRuneEvolve::default_instance_ = NULL;

stRetRuneEvolve* stRetRuneEvolve::New() const {
  return new stRetRuneEvolve;
}

void stRetRuneEvolve::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bagtype_ = 0u;
    instanceid_ = GOOGLE_ULONGLONG(0);
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRetRuneEvolve::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 bagType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bagtype_)));
          set_has_bagtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_instanceID;
        break;
      }

      // optional uint64 instanceID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_instanceID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &instanceid_)));
          set_has_instanceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // optional .Role.stRetRuneEvolve.eResult result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Role::stRetRuneEvolve_eResult_IsValid(value)) {
            set_result(static_cast< ::Role::stRetRuneEvolve_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRetRuneEvolve::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 bagType = 1;
  if (has_bagtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bagtype(), output);
  }

  // optional uint64 instanceID = 2;
  if (has_instanceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->instanceid(), output);
  }

  // optional .Role.stRetRuneEvolve.eResult result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRetRuneEvolve::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 bagType = 1;
  if (has_bagtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bagtype(), target);
  }

  // optional uint64 instanceID = 2;
  if (has_instanceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->instanceid(), target);
  }

  // optional .Role.stRetRuneEvolve.eResult result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRetRuneEvolve::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 bagType = 1;
    if (has_bagtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bagtype());
    }

    // optional uint64 instanceID = 2;
    if (has_instanceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->instanceid());
    }

    // optional .Role.stRetRuneEvolve.eResult result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRetRuneEvolve::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRetRuneEvolve* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRetRuneEvolve*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRetRuneEvolve::MergeFrom(const stRetRuneEvolve& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bagtype()) {
      set_bagtype(from.bagtype());
    }
    if (from.has_instanceid()) {
      set_instanceid(from.instanceid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRetRuneEvolve::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRetRuneEvolve::CopyFrom(const stRetRuneEvolve& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRetRuneEvolve::IsInitialized() const {

  return true;
}

void stRetRuneEvolve::Swap(stRetRuneEvolve* other) {
  if (other != this) {
    std::swap(bagtype_, other->bagtype_);
    std::swap(instanceid_, other->instanceid_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRetRuneEvolve::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRetRuneEvolve_descriptor_;
  metadata.reflection = stRetRuneEvolve_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqExtractGem_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqExtractGem_ProtoModID_descriptor_;
}
bool stReqExtractGem_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqExtractGem_ProtoModID stReqExtractGem::ModID;
const stReqExtractGem_ProtoModID stReqExtractGem::ProtoModID_MIN;
const stReqExtractGem_ProtoModID stReqExtractGem::ProtoModID_MAX;
const int stReqExtractGem::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqExtractGem_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqExtractGem_ProtoFunID_descriptor_;
}
bool stReqExtractGem_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 179:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqExtractGem_ProtoFunID stReqExtractGem::FunID;
const stReqExtractGem_ProtoFunID stReqExtractGem::ProtoFunID_MIN;
const stReqExtractGem_ProtoFunID stReqExtractGem::ProtoFunID_MAX;
const int stReqExtractGem::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqExtractGem::kIdFieldNumber;
const int stReqExtractGem::kPayFieldNumber;
const int stReqExtractGem::kSuccesspayFieldNumber;
#endif  // !_MSC_VER

stReqExtractGem::stReqExtractGem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqExtractGem::InitAsDefaultInstance() {
}

stReqExtractGem::stReqExtractGem(const stReqExtractGem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqExtractGem::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  successpay_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqExtractGem::~stReqExtractGem() {
  SharedDtor();
}

void stReqExtractGem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqExtractGem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqExtractGem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqExtractGem_descriptor_;
}

const stReqExtractGem& stReqExtractGem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stReqExtractGem* stReqExtractGem::default_instance_ = NULL;

stReqExtractGem* stReqExtractGem::New() const {
  return new stReqExtractGem;
}

void stReqExtractGem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    successpay_ = GOOGLE_ULONGLONG(0);
  }
  pay_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqExtractGem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pay;
        break;
      }

      // repeated uint64 pay = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_pay())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_pay())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pay;
        if (input->ExpectTag(24)) goto parse_successpay;
        break;
      }

      // optional uint64 successpay = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_successpay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &successpay_)));
          set_has_successpay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqExtractGem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // repeated uint64 pay = 2;
  for (int i = 0; i < this->pay_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->pay(i), output);
  }

  // optional uint64 successpay = 3;
  if (has_successpay()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->successpay(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqExtractGem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // repeated uint64 pay = 2;
  for (int i = 0; i < this->pay_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->pay(i), target);
  }

  // optional uint64 successpay = 3;
  if (has_successpay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->successpay(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqExtractGem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint64 successpay = 3;
    if (has_successpay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->successpay());
    }

  }
  // repeated uint64 pay = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->pay_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->pay(i));
    }
    total_size += 1 * this->pay_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqExtractGem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqExtractGem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqExtractGem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqExtractGem::MergeFrom(const stReqExtractGem& from) {
  GOOGLE_CHECK_NE(&from, this);
  pay_.MergeFrom(from.pay_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_successpay()) {
      set_successpay(from.successpay());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqExtractGem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqExtractGem::CopyFrom(const stReqExtractGem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqExtractGem::IsInitialized() const {

  return true;
}

void stReqExtractGem::Swap(stReqExtractGem* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    pay_.Swap(&other->pay_);
    std::swap(successpay_, other->successpay_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqExtractGem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqExtractGem_descriptor_;
  metadata.reflection = stReqExtractGem_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ExtractGemResult_Result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExtractGemResult_Result_descriptor_;
}
bool ExtractGemResult_Result_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ExtractGemResult_Result ExtractGemResult::RESULT_SUCCESS;
const ExtractGemResult_Result ExtractGemResult::RESULT_ERROR_LEVEL;
const ExtractGemResult_Result ExtractGemResult::RESULT_ERROR_GOLD;
const ExtractGemResult_Result ExtractGemResult::RESULT_ERROR_ID;
const ExtractGemResult_Result ExtractGemResult::RESULT_ERROR_LIST;
const ExtractGemResult_Result ExtractGemResult::RESULT_ERROR_SUCCESSLIST;
const ExtractGemResult_Result ExtractGemResult::RESULT_ERROR_MISS;
const ExtractGemResult_Result ExtractGemResult::RESULT_ERROR_SUCCESSMISS;
const ExtractGemResult_Result ExtractGemResult::RESULT_ERROR_UNKNOWN;
const ExtractGemResult_Result ExtractGemResult::Result_MIN;
const ExtractGemResult_Result ExtractGemResult::Result_MAX;
const int ExtractGemResult::Result_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* ExtractGemResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExtractGemResult_ProtoModID_descriptor_;
}
bool ExtractGemResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ExtractGemResult_ProtoModID ExtractGemResult::ModID;
const ExtractGemResult_ProtoModID ExtractGemResult::ProtoModID_MIN;
const ExtractGemResult_ProtoModID ExtractGemResult::ProtoModID_MAX;
const int ExtractGemResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* ExtractGemResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExtractGemResult_ProtoFunID_descriptor_;
}
bool ExtractGemResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 180:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ExtractGemResult_ProtoFunID ExtractGemResult::FunID;
const ExtractGemResult_ProtoFunID ExtractGemResult::ProtoFunID_MIN;
const ExtractGemResult_ProtoFunID ExtractGemResult::ProtoFunID_MAX;
const int ExtractGemResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ExtractGemResult::kResultFieldNumber;
const int ExtractGemResult::kIdFieldNumber;
#endif  // !_MSC_VER

ExtractGemResult::ExtractGemResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExtractGemResult::InitAsDefaultInstance() {
}

ExtractGemResult::ExtractGemResult(const ExtractGemResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExtractGemResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExtractGemResult::~ExtractGemResult() {
  SharedDtor();
}

void ExtractGemResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ExtractGemResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExtractGemResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExtractGemResult_descriptor_;
}

const ExtractGemResult& ExtractGemResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

ExtractGemResult* ExtractGemResult::default_instance_ = NULL;

ExtractGemResult* ExtractGemResult::New() const {
  return new ExtractGemResult;
}

void ExtractGemResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExtractGemResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Role.ExtractGemResult.Result result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Role::ExtractGemResult_Result_IsValid(value)) {
            set_result(static_cast< ::Role::ExtractGemResult_Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional uint32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExtractGemResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Role.ExtractGemResult.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional uint32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExtractGemResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Role.ExtractGemResult.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional uint32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExtractGemResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Role.ExtractGemResult.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional uint32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExtractGemResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExtractGemResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExtractGemResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExtractGemResult::MergeFrom(const ExtractGemResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExtractGemResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExtractGemResult::CopyFrom(const ExtractGemResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExtractGemResult::IsInitialized() const {

  return true;
}

void ExtractGemResult::Swap(ExtractGemResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExtractGemResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExtractGemResult_descriptor_;
  metadata.reflection = ExtractGemResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqWedding_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqWedding_ProtoModID_descriptor_;
}
bool stReqWedding_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqWedding_ProtoModID stReqWedding::ModID;
const stReqWedding_ProtoModID stReqWedding::ProtoModID_MIN;
const stReqWedding_ProtoModID stReqWedding::ProtoModID_MAX;
const int stReqWedding::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqWedding_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqWedding_ProtoFunID_descriptor_;
}
bool stReqWedding_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 182:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqWedding_ProtoFunID stReqWedding::FunID;
const stReqWedding_ProtoFunID stReqWedding::ProtoFunID_MIN;
const stReqWedding_ProtoFunID stReqWedding::ProtoFunID_MAX;
const int stReqWedding::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqWedding::kIdFieldNumber;
const int stReqWedding::kCfg1FieldNumber;
const int stReqWedding::kCfg2FieldNumber;
#endif  // !_MSC_VER

stReqWedding::stReqWedding()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqWedding::InitAsDefaultInstance() {
}

stReqWedding::stReqWedding(const stReqWedding& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqWedding::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  cfg1_ = 0u;
  cfg2_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqWedding::~stReqWedding() {
  SharedDtor();
}

void stReqWedding::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqWedding::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqWedding::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqWedding_descriptor_;
}

const stReqWedding& stReqWedding::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stReqWedding* stReqWedding::default_instance_ = NULL;

stReqWedding* stReqWedding::New() const {
  return new stReqWedding;
}

void stReqWedding::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    cfg1_ = 0u;
    cfg2_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqWedding::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cfg1;
        break;
      }

      // optional uint32 cfg1 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cfg1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cfg1_)));
          set_has_cfg1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cfg2;
        break;
      }

      // optional uint32 cfg2 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cfg2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cfg2_)));
          set_has_cfg2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqWedding::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 cfg1 = 2;
  if (has_cfg1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cfg1(), output);
  }

  // optional uint32 cfg2 = 3;
  if (has_cfg2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cfg2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqWedding::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 cfg1 = 2;
  if (has_cfg1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cfg1(), target);
  }

  // optional uint32 cfg2 = 3;
  if (has_cfg2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cfg2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqWedding::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 cfg1 = 2;
    if (has_cfg1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cfg1());
    }

    // optional uint32 cfg2 = 3;
    if (has_cfg2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cfg2());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqWedding::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqWedding* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqWedding*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqWedding::MergeFrom(const stReqWedding& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_cfg1()) {
      set_cfg1(from.cfg1());
    }
    if (from.has_cfg2()) {
      set_cfg2(from.cfg2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqWedding::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqWedding::CopyFrom(const stReqWedding& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqWedding::IsInitialized() const {

  return true;
}

void stReqWedding::Swap(stReqWedding* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(cfg1_, other->cfg1_);
    std::swap(cfg2_, other->cfg2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqWedding::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqWedding_descriptor_;
  metadata.reflection = stReqWedding_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqAgreeWedding_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqAgreeWedding_ProtoModID_descriptor_;
}
bool stReqAgreeWedding_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqAgreeWedding_ProtoModID stReqAgreeWedding::ModID;
const stReqAgreeWedding_ProtoModID stReqAgreeWedding::ProtoModID_MIN;
const stReqAgreeWedding_ProtoModID stReqAgreeWedding::ProtoModID_MAX;
const int stReqAgreeWedding::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqAgreeWedding_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqAgreeWedding_ProtoFunID_descriptor_;
}
bool stReqAgreeWedding_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 183:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqAgreeWedding_ProtoFunID stReqAgreeWedding::FunID;
const stReqAgreeWedding_ProtoFunID stReqAgreeWedding::ProtoFunID_MIN;
const stReqAgreeWedding_ProtoFunID stReqAgreeWedding::ProtoFunID_MAX;
const int stReqAgreeWedding::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqAgreeWedding::kIdFieldNumber;
const int stReqAgreeWedding::kCfg1FieldNumber;
const int stReqAgreeWedding::kCfg2FieldNumber;
#endif  // !_MSC_VER

stReqAgreeWedding::stReqAgreeWedding()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqAgreeWedding::InitAsDefaultInstance() {
}

stReqAgreeWedding::stReqAgreeWedding(const stReqAgreeWedding& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqAgreeWedding::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  cfg1_ = 0u;
  cfg2_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqAgreeWedding::~stReqAgreeWedding() {
  SharedDtor();
}

void stReqAgreeWedding::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqAgreeWedding::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqAgreeWedding::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqAgreeWedding_descriptor_;
}

const stReqAgreeWedding& stReqAgreeWedding::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stReqAgreeWedding* stReqAgreeWedding::default_instance_ = NULL;

stReqAgreeWedding* stReqAgreeWedding::New() const {
  return new stReqAgreeWedding;
}

void stReqAgreeWedding::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    cfg1_ = 0u;
    cfg2_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqAgreeWedding::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cfg1;
        break;
      }

      // optional uint32 cfg1 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cfg1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cfg1_)));
          set_has_cfg1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cfg2;
        break;
      }

      // optional uint32 cfg2 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cfg2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cfg2_)));
          set_has_cfg2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqAgreeWedding::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 cfg1 = 2;
  if (has_cfg1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cfg1(), output);
  }

  // optional uint32 cfg2 = 3;
  if (has_cfg2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cfg2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqAgreeWedding::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 cfg1 = 2;
  if (has_cfg1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cfg1(), target);
  }

  // optional uint32 cfg2 = 3;
  if (has_cfg2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cfg2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqAgreeWedding::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 cfg1 = 2;
    if (has_cfg1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cfg1());
    }

    // optional uint32 cfg2 = 3;
    if (has_cfg2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cfg2());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqAgreeWedding::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqAgreeWedding* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqAgreeWedding*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqAgreeWedding::MergeFrom(const stReqAgreeWedding& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_cfg1()) {
      set_cfg1(from.cfg1());
    }
    if (from.has_cfg2()) {
      set_cfg2(from.cfg2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqAgreeWedding::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqAgreeWedding::CopyFrom(const stReqAgreeWedding& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqAgreeWedding::IsInitialized() const {

  return true;
}

void stReqAgreeWedding::Swap(stReqAgreeWedding* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(cfg1_, other->cfg1_);
    std::swap(cfg2_, other->cfg2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqAgreeWedding::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqAgreeWedding_descriptor_;
  metadata.reflection = stReqAgreeWedding_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ResultWedding_Result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResultWedding_Result_descriptor_;
}
bool ResultWedding_Result_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ResultWedding_Result ResultWedding::RESULT_SUCCESS;
const ResultWedding_Result ResultWedding::RESULT_ERROR_ONLINE;
const ResultWedding_Result ResultWedding::RESULT_ERROR_MONEY;
const ResultWedding_Result ResultWedding::RESULT_ERROR_BAG;
const ResultWedding_Result ResultWedding::RESULT_ERROR_UNKNOWN;
const ResultWedding_Result ResultWedding::RESULT_SUCCESS_SEND;
const ResultWedding_Result ResultWedding::Result_MIN;
const ResultWedding_Result ResultWedding::Result_MAX;
const int ResultWedding::Result_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* ResultWedding_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResultWedding_ProtoModID_descriptor_;
}
bool ResultWedding_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ResultWedding_ProtoModID ResultWedding::ModID;
const ResultWedding_ProtoModID ResultWedding::ProtoModID_MIN;
const ResultWedding_ProtoModID ResultWedding::ProtoModID_MAX;
const int ResultWedding::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* ResultWedding_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResultWedding_ProtoFunID_descriptor_;
}
bool ResultWedding_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 184:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ResultWedding_ProtoFunID ResultWedding::FunID;
const ResultWedding_ProtoFunID ResultWedding::ProtoFunID_MIN;
const ResultWedding_ProtoFunID ResultWedding::ProtoFunID_MAX;
const int ResultWedding::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ResultWedding::kResultFieldNumber;
#endif  // !_MSC_VER

ResultWedding::ResultWedding()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResultWedding::InitAsDefaultInstance() {
}

ResultWedding::ResultWedding(const ResultWedding& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResultWedding::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResultWedding::~ResultWedding() {
  SharedDtor();
}

void ResultWedding::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResultWedding::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResultWedding::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResultWedding_descriptor_;
}

const ResultWedding& ResultWedding::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

ResultWedding* ResultWedding::default_instance_ = NULL;

ResultWedding* ResultWedding::New() const {
  return new ResultWedding;
}

void ResultWedding::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResultWedding::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Role.ResultWedding.Result result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Role::ResultWedding_Result_IsValid(value)) {
            set_result(static_cast< ::Role::ResultWedding_Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResultWedding::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Role.ResultWedding.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResultWedding::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Role.ResultWedding.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResultWedding::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Role.ResultWedding.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResultWedding::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResultWedding* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResultWedding*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResultWedding::MergeFrom(const ResultWedding& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResultWedding::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResultWedding::CopyFrom(const ResultWedding& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResultWedding::IsInitialized() const {

  return true;
}

void ResultWedding::Swap(ResultWedding* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResultWedding::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResultWedding_descriptor_;
  metadata.reflection = ResultWedding_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqInviteToRoom_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqInviteToRoom_ProtoModID_descriptor_;
}
bool stReqInviteToRoom_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqInviteToRoom_ProtoModID stReqInviteToRoom::ModID;
const stReqInviteToRoom_ProtoModID stReqInviteToRoom::ProtoModID_MIN;
const stReqInviteToRoom_ProtoModID stReqInviteToRoom::ProtoModID_MAX;
const int stReqInviteToRoom::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqInviteToRoom_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqInviteToRoom_ProtoFunID_descriptor_;
}
bool stReqInviteToRoom_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 185:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqInviteToRoom_ProtoFunID stReqInviteToRoom::FunID;
const stReqInviteToRoom_ProtoFunID stReqInviteToRoom::ProtoFunID_MIN;
const stReqInviteToRoom_ProtoFunID stReqInviteToRoom::ProtoFunID_MAX;
const int stReqInviteToRoom::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqInviteToRoom::kIdFieldNumber;
#endif  // !_MSC_VER

stReqInviteToRoom::stReqInviteToRoom()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqInviteToRoom::InitAsDefaultInstance() {
}

stReqInviteToRoom::stReqInviteToRoom(const stReqInviteToRoom& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqInviteToRoom::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqInviteToRoom::~stReqInviteToRoom() {
  SharedDtor();
}

void stReqInviteToRoom::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqInviteToRoom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqInviteToRoom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqInviteToRoom_descriptor_;
}

const stReqInviteToRoom& stReqInviteToRoom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stReqInviteToRoom* stReqInviteToRoom::default_instance_ = NULL;

stReqInviteToRoom* stReqInviteToRoom::New() const {
  return new stReqInviteToRoom;
}

void stReqInviteToRoom::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqInviteToRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqInviteToRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqInviteToRoom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqInviteToRoom::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqInviteToRoom::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqInviteToRoom* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqInviteToRoom*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqInviteToRoom::MergeFrom(const stReqInviteToRoom& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqInviteToRoom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqInviteToRoom::CopyFrom(const stReqInviteToRoom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqInviteToRoom::IsInitialized() const {

  return true;
}

void stReqInviteToRoom::Swap(stReqInviteToRoom* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqInviteToRoom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqInviteToRoom_descriptor_;
  metadata.reflection = stReqInviteToRoom_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NotifyEnterWedding_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyEnterWedding_ProtoModID_descriptor_;
}
bool NotifyEnterWedding_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NotifyEnterWedding_ProtoModID NotifyEnterWedding::ModID;
const NotifyEnterWedding_ProtoModID NotifyEnterWedding::ProtoModID_MIN;
const NotifyEnterWedding_ProtoModID NotifyEnterWedding::ProtoModID_MAX;
const int NotifyEnterWedding::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* NotifyEnterWedding_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyEnterWedding_ProtoFunID_descriptor_;
}
bool NotifyEnterWedding_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 186:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NotifyEnterWedding_ProtoFunID NotifyEnterWedding::FunID;
const NotifyEnterWedding_ProtoFunID NotifyEnterWedding::ProtoFunID_MIN;
const NotifyEnterWedding_ProtoFunID NotifyEnterWedding::ProtoFunID_MAX;
const int NotifyEnterWedding::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NotifyEnterWedding::kIdFieldNumber;
#endif  // !_MSC_VER

NotifyEnterWedding::NotifyEnterWedding()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyEnterWedding::InitAsDefaultInstance() {
}

NotifyEnterWedding::NotifyEnterWedding(const NotifyEnterWedding& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyEnterWedding::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyEnterWedding::~NotifyEnterWedding() {
  SharedDtor();
}

void NotifyEnterWedding::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyEnterWedding::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyEnterWedding::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyEnterWedding_descriptor_;
}

const NotifyEnterWedding& NotifyEnterWedding::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

NotifyEnterWedding* NotifyEnterWedding::default_instance_ = NULL;

NotifyEnterWedding* NotifyEnterWedding::New() const {
  return new NotifyEnterWedding;
}

void NotifyEnterWedding::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyEnterWedding::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyEnterWedding::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyEnterWedding::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyEnterWedding::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyEnterWedding::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyEnterWedding* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyEnterWedding*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyEnterWedding::MergeFrom(const NotifyEnterWedding& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyEnterWedding::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyEnterWedding::CopyFrom(const NotifyEnterWedding& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyEnterWedding::IsInitialized() const {

  return true;
}

void NotifyEnterWedding::Swap(NotifyEnterWedding* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyEnterWedding::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyEnterWedding_descriptor_;
  metadata.reflection = NotifyEnterWedding_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqAgreeEnterWedding_Result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqAgreeEnterWedding_Result_descriptor_;
}
bool stReqAgreeEnterWedding_Result_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqAgreeEnterWedding_Result stReqAgreeEnterWedding::RESULT_AGREE;
const stReqAgreeEnterWedding_Result stReqAgreeEnterWedding::RESULT_REFUSE;
const stReqAgreeEnterWedding_Result stReqAgreeEnterWedding::Result_MIN;
const stReqAgreeEnterWedding_Result stReqAgreeEnterWedding::Result_MAX;
const int stReqAgreeEnterWedding::Result_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqAgreeEnterWedding_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqAgreeEnterWedding_ProtoModID_descriptor_;
}
bool stReqAgreeEnterWedding_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqAgreeEnterWedding_ProtoModID stReqAgreeEnterWedding::ModID;
const stReqAgreeEnterWedding_ProtoModID stReqAgreeEnterWedding::ProtoModID_MIN;
const stReqAgreeEnterWedding_ProtoModID stReqAgreeEnterWedding::ProtoModID_MAX;
const int stReqAgreeEnterWedding::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqAgreeEnterWedding_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqAgreeEnterWedding_ProtoFunID_descriptor_;
}
bool stReqAgreeEnterWedding_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 187:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqAgreeEnterWedding_ProtoFunID stReqAgreeEnterWedding::FunID;
const stReqAgreeEnterWedding_ProtoFunID stReqAgreeEnterWedding::ProtoFunID_MIN;
const stReqAgreeEnterWedding_ProtoFunID stReqAgreeEnterWedding::ProtoFunID_MAX;
const int stReqAgreeEnterWedding::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqAgreeEnterWedding::kResultFieldNumber;
const int stReqAgreeEnterWedding::kIdFieldNumber;
#endif  // !_MSC_VER

stReqAgreeEnterWedding::stReqAgreeEnterWedding()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqAgreeEnterWedding::InitAsDefaultInstance() {
}

stReqAgreeEnterWedding::stReqAgreeEnterWedding(const stReqAgreeEnterWedding& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqAgreeEnterWedding::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqAgreeEnterWedding::~stReqAgreeEnterWedding() {
  SharedDtor();
}

void stReqAgreeEnterWedding::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqAgreeEnterWedding::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqAgreeEnterWedding::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqAgreeEnterWedding_descriptor_;
}

const stReqAgreeEnterWedding& stReqAgreeEnterWedding::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stReqAgreeEnterWedding* stReqAgreeEnterWedding::default_instance_ = NULL;

stReqAgreeEnterWedding* stReqAgreeEnterWedding::New() const {
  return new stReqAgreeEnterWedding;
}

void stReqAgreeEnterWedding::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqAgreeEnterWedding::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Role.stReqAgreeEnterWedding.Result result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Role::stReqAgreeEnterWedding_Result_IsValid(value)) {
            set_result(static_cast< ::Role::stReqAgreeEnterWedding_Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional uint32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqAgreeEnterWedding::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Role.stReqAgreeEnterWedding.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional uint32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqAgreeEnterWedding::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Role.stReqAgreeEnterWedding.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional uint32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqAgreeEnterWedding::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Role.stReqAgreeEnterWedding.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional uint32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqAgreeEnterWedding::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqAgreeEnterWedding* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqAgreeEnterWedding*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqAgreeEnterWedding::MergeFrom(const stReqAgreeEnterWedding& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqAgreeEnterWedding::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqAgreeEnterWedding::CopyFrom(const stReqAgreeEnterWedding& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqAgreeEnterWedding::IsInitialized() const {

  return true;
}

void stReqAgreeEnterWedding::Swap(stReqAgreeEnterWedding* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqAgreeEnterWedding::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqAgreeEnterWedding_descriptor_;
  metadata.reflection = stReqAgreeEnterWedding_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ResultEnterWedding_Result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResultEnterWedding_Result_descriptor_;
}
bool ResultEnterWedding_Result_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ResultEnterWedding_Result ResultEnterWedding::RESULT_SUCCESS;
const ResultEnterWedding_Result ResultEnterWedding::RESULT_FAILURE;
const ResultEnterWedding_Result ResultEnterWedding::Result_MIN;
const ResultEnterWedding_Result ResultEnterWedding::Result_MAX;
const int ResultEnterWedding::Result_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* ResultEnterWedding_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResultEnterWedding_ProtoModID_descriptor_;
}
bool ResultEnterWedding_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ResultEnterWedding_ProtoModID ResultEnterWedding::ModID;
const ResultEnterWedding_ProtoModID ResultEnterWedding::ProtoModID_MIN;
const ResultEnterWedding_ProtoModID ResultEnterWedding::ProtoModID_MAX;
const int ResultEnterWedding::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* ResultEnterWedding_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResultEnterWedding_ProtoFunID_descriptor_;
}
bool ResultEnterWedding_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 188:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ResultEnterWedding_ProtoFunID ResultEnterWedding::FunID;
const ResultEnterWedding_ProtoFunID ResultEnterWedding::ProtoFunID_MIN;
const ResultEnterWedding_ProtoFunID ResultEnterWedding::ProtoFunID_MAX;
const int ResultEnterWedding::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ResultEnterWedding::kResultFieldNumber;
#endif  // !_MSC_VER

ResultEnterWedding::ResultEnterWedding()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResultEnterWedding::InitAsDefaultInstance() {
}

ResultEnterWedding::ResultEnterWedding(const ResultEnterWedding& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResultEnterWedding::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResultEnterWedding::~ResultEnterWedding() {
  SharedDtor();
}

void ResultEnterWedding::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResultEnterWedding::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResultEnterWedding::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResultEnterWedding_descriptor_;
}

const ResultEnterWedding& ResultEnterWedding::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

ResultEnterWedding* ResultEnterWedding::default_instance_ = NULL;

ResultEnterWedding* ResultEnterWedding::New() const {
  return new ResultEnterWedding;
}

void ResultEnterWedding::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResultEnterWedding::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Role.ResultEnterWedding.Result result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Role::ResultEnterWedding_Result_IsValid(value)) {
            set_result(static_cast< ::Role::ResultEnterWedding_Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResultEnterWedding::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Role.ResultEnterWedding.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResultEnterWedding::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Role.ResultEnterWedding.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResultEnterWedding::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Role.ResultEnterWedding.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResultEnterWedding::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResultEnterWedding* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResultEnterWedding*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResultEnterWedding::MergeFrom(const ResultEnterWedding& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResultEnterWedding::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResultEnterWedding::CopyFrom(const ResultEnterWedding& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResultEnterWedding::IsInitialized() const {

  return true;
}

void ResultEnterWedding::Swap(ResultEnterWedding* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResultEnterWedding::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResultEnterWedding_descriptor_;
  metadata.reflection = ResultEnterWedding_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* MarryInviterPlace_State_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarryInviterPlace_State_descriptor_;
}
bool MarryInviterPlace_State_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MarryInviterPlace_State MarryInviterPlace::STATE_INVITER;
const MarryInviterPlace_State MarryInviterPlace::STATE_INVITEE;
const MarryInviterPlace_State MarryInviterPlace::State_MIN;
const MarryInviterPlace_State MarryInviterPlace::State_MAX;
const int MarryInviterPlace::State_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* MarryInviterPlace_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarryInviterPlace_ProtoModID_descriptor_;
}
bool MarryInviterPlace_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MarryInviterPlace_ProtoModID MarryInviterPlace::ModID;
const MarryInviterPlace_ProtoModID MarryInviterPlace::ProtoModID_MIN;
const MarryInviterPlace_ProtoModID MarryInviterPlace::ProtoModID_MAX;
const int MarryInviterPlace::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* MarryInviterPlace_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarryInviterPlace_ProtoFunID_descriptor_;
}
bool MarryInviterPlace_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 189:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MarryInviterPlace_ProtoFunID MarryInviterPlace::FunID;
const MarryInviterPlace_ProtoFunID MarryInviterPlace::ProtoFunID_MIN;
const MarryInviterPlace_ProtoFunID MarryInviterPlace::ProtoFunID_MAX;
const int MarryInviterPlace::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int MarryInviterPlace::kStateFieldNumber;
const int MarryInviterPlace::kCfg1FieldNumber;
const int MarryInviterPlace::kIdFieldNumber;
const int MarryInviterPlace::kName1FieldNumber;
const int MarryInviterPlace::kName2FieldNumber;
const int MarryInviterPlace::kTimeFieldNumber;
#endif  // !_MSC_VER

MarryInviterPlace::MarryInviterPlace()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MarryInviterPlace::InitAsDefaultInstance() {
}

MarryInviterPlace::MarryInviterPlace(const MarryInviterPlace& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MarryInviterPlace::SharedCtor() {
  _cached_size_ = 0;
  state_ = 1;
  cfg1_ = 0u;
  name1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarryInviterPlace::~MarryInviterPlace() {
  SharedDtor();
}

void MarryInviterPlace::SharedDtor() {
  if (name1_ != &::google::protobuf::internal::kEmptyString) {
    delete name1_;
  }
  if (name2_ != &::google::protobuf::internal::kEmptyString) {
    delete name2_;
  }
  if (this != default_instance_) {
  }
}

void MarryInviterPlace::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarryInviterPlace::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarryInviterPlace_descriptor_;
}

const MarryInviterPlace& MarryInviterPlace::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

MarryInviterPlace* MarryInviterPlace::default_instance_ = NULL;

MarryInviterPlace* MarryInviterPlace::New() const {
  return new MarryInviterPlace;
}

void MarryInviterPlace::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    state_ = 1;
    cfg1_ = 0u;
    if (has_name1()) {
      if (name1_ != &::google::protobuf::internal::kEmptyString) {
        name1_->clear();
      }
    }
    if (has_name2()) {
      if (name2_ != &::google::protobuf::internal::kEmptyString) {
        name2_->clear();
      }
    }
    time_ = 0u;
  }
  id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarryInviterPlace::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Role.MarryInviterPlace.State state = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Role::MarryInviterPlace_State_IsValid(value)) {
            set_state(static_cast< ::Role::MarryInviterPlace_State >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cfg1;
        break;
      }

      // optional uint32 cfg1 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cfg1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cfg1_)));
          set_has_cfg1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // repeated uint32 id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_id;
        if (input->ExpectTag(34)) goto parse_name1;
        break;
      }

      // optional string name1 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name1().data(), this->name1().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_name2;
        break;
      }

      // optional string name2 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name2().data(), this->name2().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_time;
        break;
      }

      // optional uint32 time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MarryInviterPlace::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Role.MarryInviterPlace.State state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->state(), output);
  }

  // optional uint32 cfg1 = 2;
  if (has_cfg1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cfg1(), output);
  }

  // repeated uint32 id = 3;
  for (int i = 0; i < this->id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->id(i), output);
  }

  // optional string name1 = 4;
  if (has_name1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name1().data(), this->name1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->name1(), output);
  }

  // optional string name2 = 5;
  if (has_name2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name2().data(), this->name2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->name2(), output);
  }

  // optional uint32 time = 6;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MarryInviterPlace::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Role.MarryInviterPlace.State state = 1;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->state(), target);
  }

  // optional uint32 cfg1 = 2;
  if (has_cfg1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cfg1(), target);
  }

  // repeated uint32 id = 3;
  for (int i = 0; i < this->id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->id(i), target);
  }

  // optional string name1 = 4;
  if (has_name1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name1().data(), this->name1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name1(), target);
  }

  // optional string name2 = 5;
  if (has_name2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name2().data(), this->name2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->name2(), target);
  }

  // optional uint32 time = 6;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MarryInviterPlace::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Role.MarryInviterPlace.State state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

    // optional uint32 cfg1 = 2;
    if (has_cfg1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cfg1());
    }

    // optional string name1 = 4;
    if (has_name1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name1());
    }

    // optional string name2 = 5;
    if (has_name2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name2());
    }

    // optional uint32 time = 6;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

  }
  // repeated uint32 id = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->id(i));
    }
    total_size += 1 * this->id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarryInviterPlace::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarryInviterPlace* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarryInviterPlace*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarryInviterPlace::MergeFrom(const MarryInviterPlace& from) {
  GOOGLE_CHECK_NE(&from, this);
  id_.MergeFrom(from.id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_cfg1()) {
      set_cfg1(from.cfg1());
    }
    if (from.has_name1()) {
      set_name1(from.name1());
    }
    if (from.has_name2()) {
      set_name2(from.name2());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarryInviterPlace::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarryInviterPlace::CopyFrom(const MarryInviterPlace& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarryInviterPlace::IsInitialized() const {

  return true;
}

void MarryInviterPlace::Swap(MarryInviterPlace* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(cfg1_, other->cfg1_);
    id_.Swap(&other->id_);
    std::swap(name1_, other->name1_);
    std::swap(name2_, other->name2_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarryInviterPlace::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarryInviterPlace_descriptor_;
  metadata.reflection = MarryInviterPlace_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqDivorce_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqDivorce_ProtoModID_descriptor_;
}
bool stReqDivorce_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqDivorce_ProtoModID stReqDivorce::ModID;
const stReqDivorce_ProtoModID stReqDivorce::ProtoModID_MIN;
const stReqDivorce_ProtoModID stReqDivorce::ProtoModID_MAX;
const int stReqDivorce::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqDivorce_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqDivorce_ProtoFunID_descriptor_;
}
bool stReqDivorce_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 190:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqDivorce_ProtoFunID stReqDivorce::FunID;
const stReqDivorce_ProtoFunID stReqDivorce::ProtoFunID_MIN;
const stReqDivorce_ProtoFunID stReqDivorce::ProtoFunID_MAX;
const int stReqDivorce::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqDivorce::kIsForceFieldNumber;
const int stReqDivorce::kCoupleIdFieldNumber;
#endif  // !_MSC_VER

stReqDivorce::stReqDivorce()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqDivorce::InitAsDefaultInstance() {
}

stReqDivorce::stReqDivorce(const stReqDivorce& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqDivorce::SharedCtor() {
  _cached_size_ = 0;
  isforce_ = false;
  coupleid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqDivorce::~stReqDivorce() {
  SharedDtor();
}

void stReqDivorce::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqDivorce::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqDivorce::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqDivorce_descriptor_;
}

const stReqDivorce& stReqDivorce::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stReqDivorce* stReqDivorce::default_instance_ = NULL;

stReqDivorce* stReqDivorce::New() const {
  return new stReqDivorce;
}

void stReqDivorce::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    isforce_ = false;
    coupleid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqDivorce::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool isForce = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isforce_)));
          set_has_isforce();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_coupleId;
        break;
      }

      // optional uint32 coupleId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_coupleId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coupleid_)));
          set_has_coupleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqDivorce::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool isForce = 1;
  if (has_isforce()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isforce(), output);
  }

  // optional uint32 coupleId = 2;
  if (has_coupleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->coupleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqDivorce::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool isForce = 1;
  if (has_isforce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isforce(), target);
  }

  // optional uint32 coupleId = 2;
  if (has_coupleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->coupleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqDivorce::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool isForce = 1;
    if (has_isforce()) {
      total_size += 1 + 1;
    }

    // optional uint32 coupleId = 2;
    if (has_coupleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->coupleid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqDivorce::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqDivorce* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqDivorce*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqDivorce::MergeFrom(const stReqDivorce& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isforce()) {
      set_isforce(from.isforce());
    }
    if (from.has_coupleid()) {
      set_coupleid(from.coupleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqDivorce::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqDivorce::CopyFrom(const stReqDivorce& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqDivorce::IsInitialized() const {

  return true;
}

void stReqDivorce::Swap(stReqDivorce* other) {
  if (other != this) {
    std::swap(isforce_, other->isforce_);
    std::swap(coupleid_, other->coupleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqDivorce::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqDivorce_descriptor_;
  metadata.reflection = stReqDivorce_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* RejectDivorce_Result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RejectDivorce_Result_descriptor_;
}
bool RejectDivorce_Result_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const RejectDivorce_Result RejectDivorce::eSuccess;
const RejectDivorce_Result RejectDivorce::eCouple_Not_Onlie;
const RejectDivorce_Result RejectDivorce::eLess_Of_Diamond;
const RejectDivorce_Result RejectDivorce::eNo_Couple;
const RejectDivorce_Result RejectDivorce::Result_MIN;
const RejectDivorce_Result RejectDivorce::Result_MAX;
const int RejectDivorce::Result_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* RejectDivorce_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RejectDivorce_ProtoModID_descriptor_;
}
bool RejectDivorce_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const RejectDivorce_ProtoModID RejectDivorce::ModID;
const RejectDivorce_ProtoModID RejectDivorce::ProtoModID_MIN;
const RejectDivorce_ProtoModID RejectDivorce::ProtoModID_MAX;
const int RejectDivorce::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* RejectDivorce_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RejectDivorce_ProtoFunID_descriptor_;
}
bool RejectDivorce_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 191:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const RejectDivorce_ProtoFunID RejectDivorce::FunID;
const RejectDivorce_ProtoFunID RejectDivorce::ProtoFunID_MIN;
const RejectDivorce_ProtoFunID RejectDivorce::ProtoFunID_MAX;
const int RejectDivorce::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int RejectDivorce::kResultFieldNumber;
#endif  // !_MSC_VER

RejectDivorce::RejectDivorce()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RejectDivorce::InitAsDefaultInstance() {
}

RejectDivorce::RejectDivorce(const RejectDivorce& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RejectDivorce::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RejectDivorce::~RejectDivorce() {
  SharedDtor();
}

void RejectDivorce::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RejectDivorce::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RejectDivorce::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RejectDivorce_descriptor_;
}

const RejectDivorce& RejectDivorce::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

RejectDivorce* RejectDivorce::default_instance_ = NULL;

RejectDivorce* RejectDivorce::New() const {
  return new RejectDivorce;
}

void RejectDivorce::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RejectDivorce::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Role.RejectDivorce.Result result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Role::RejectDivorce_Result_IsValid(value)) {
            set_result(static_cast< ::Role::RejectDivorce_Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RejectDivorce::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Role.RejectDivorce.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RejectDivorce::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Role.RejectDivorce.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RejectDivorce::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Role.RejectDivorce.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RejectDivorce::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RejectDivorce* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RejectDivorce*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RejectDivorce::MergeFrom(const RejectDivorce& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RejectDivorce::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RejectDivorce::CopyFrom(const RejectDivorce& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RejectDivorce::IsInitialized() const {

  return true;
}

void RejectDivorce::Swap(RejectDivorce* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RejectDivorce::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RejectDivorce_descriptor_;
  metadata.reflection = RejectDivorce_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqRejectDivorce_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqRejectDivorce_ProtoModID_descriptor_;
}
bool stReqRejectDivorce_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqRejectDivorce_ProtoModID stReqRejectDivorce::ModID;
const stReqRejectDivorce_ProtoModID stReqRejectDivorce::ProtoModID_MIN;
const stReqRejectDivorce_ProtoModID stReqRejectDivorce::ProtoModID_MAX;
const int stReqRejectDivorce::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqRejectDivorce_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqRejectDivorce_ProtoFunID_descriptor_;
}
bool stReqRejectDivorce_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 192:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqRejectDivorce_ProtoFunID stReqRejectDivorce::FunID;
const stReqRejectDivorce_ProtoFunID stReqRejectDivorce::ProtoFunID_MIN;
const stReqRejectDivorce_ProtoFunID stReqRejectDivorce::ProtoFunID_MAX;
const int stReqRejectDivorce::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqRejectDivorce::kRefusedFieldNumber;
#endif  // !_MSC_VER

stReqRejectDivorce::stReqRejectDivorce()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqRejectDivorce::InitAsDefaultInstance() {
}

stReqRejectDivorce::stReqRejectDivorce(const stReqRejectDivorce& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqRejectDivorce::SharedCtor() {
  _cached_size_ = 0;
  refused_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqRejectDivorce::~stReqRejectDivorce() {
  SharedDtor();
}

void stReqRejectDivorce::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqRejectDivorce::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqRejectDivorce::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqRejectDivorce_descriptor_;
}

const stReqRejectDivorce& stReqRejectDivorce::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stReqRejectDivorce* stReqRejectDivorce::default_instance_ = NULL;

stReqRejectDivorce* stReqRejectDivorce::New() const {
  return new stReqRejectDivorce;
}

void stReqRejectDivorce::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    refused_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqRejectDivorce::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool refused = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &refused_)));
          set_has_refused();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqRejectDivorce::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool refused = 1;
  if (has_refused()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->refused(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqRejectDivorce::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool refused = 1;
  if (has_refused()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->refused(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqRejectDivorce::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool refused = 1;
    if (has_refused()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqRejectDivorce::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqRejectDivorce* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqRejectDivorce*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqRejectDivorce::MergeFrom(const stReqRejectDivorce& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_refused()) {
      set_refused(from.refused());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqRejectDivorce::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqRejectDivorce::CopyFrom(const stReqRejectDivorce& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqRejectDivorce::IsInitialized() const {

  return true;
}

void stReqRejectDivorce::Swap(stReqRejectDivorce* other) {
  if (other != this) {
    std::swap(refused_, other->refused_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqRejectDivorce::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqRejectDivorce_descriptor_;
  metadata.reflection = stReqRejectDivorce_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRetRejectDivorce_Result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetRejectDivorce_Result_descriptor_;
}
bool stRetRejectDivorce_Result_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetRejectDivorce_Result stRetRejectDivorce::eSuccess;
const stRetRejectDivorce_Result stRetRejectDivorce::eReject;
const stRetRejectDivorce_Result stRetRejectDivorce::eNot_Marry;
const stRetRejectDivorce_Result stRetRejectDivorce::Result_MIN;
const stRetRejectDivorce_Result stRetRejectDivorce::Result_MAX;
const int stRetRejectDivorce::Result_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetRejectDivorce_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetRejectDivorce_ProtoModID_descriptor_;
}
bool stRetRejectDivorce_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetRejectDivorce_ProtoModID stRetRejectDivorce::ModID;
const stRetRejectDivorce_ProtoModID stRetRejectDivorce::ProtoModID_MIN;
const stRetRejectDivorce_ProtoModID stRetRejectDivorce::ProtoModID_MAX;
const int stRetRejectDivorce::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetRejectDivorce_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetRejectDivorce_ProtoFunID_descriptor_;
}
bool stRetRejectDivorce_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 193:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetRejectDivorce_ProtoFunID stRetRejectDivorce::FunID;
const stRetRejectDivorce_ProtoFunID stRetRejectDivorce::ProtoFunID_MIN;
const stRetRejectDivorce_ProtoFunID stRetRejectDivorce::ProtoFunID_MAX;
const int stRetRejectDivorce::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRetRejectDivorce::kResultFieldNumber;
#endif  // !_MSC_VER

stRetRejectDivorce::stRetRejectDivorce()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRetRejectDivorce::InitAsDefaultInstance() {
}

stRetRejectDivorce::stRetRejectDivorce(const stRetRejectDivorce& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRetRejectDivorce::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRetRejectDivorce::~stRetRejectDivorce() {
  SharedDtor();
}

void stRetRejectDivorce::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRetRejectDivorce::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRetRejectDivorce::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetRejectDivorce_descriptor_;
}

const stRetRejectDivorce& stRetRejectDivorce::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stRetRejectDivorce* stRetRejectDivorce::default_instance_ = NULL;

stRetRejectDivorce* stRetRejectDivorce::New() const {
  return new stRetRejectDivorce;
}

void stRetRejectDivorce::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRetRejectDivorce::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Role.stRetRejectDivorce.Result result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Role::stRetRejectDivorce_Result_IsValid(value)) {
            set_result(static_cast< ::Role::stRetRejectDivorce_Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRetRejectDivorce::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Role.stRetRejectDivorce.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRetRejectDivorce::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Role.stRetRejectDivorce.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRetRejectDivorce::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Role.stRetRejectDivorce.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRetRejectDivorce::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRetRejectDivorce* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRetRejectDivorce*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRetRejectDivorce::MergeFrom(const stRetRejectDivorce& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRetRejectDivorce::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRetRejectDivorce::CopyFrom(const stRetRejectDivorce& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRetRejectDivorce::IsInitialized() const {

  return true;
}

void stRetRejectDivorce::Swap(stRetRejectDivorce* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRetRejectDivorce::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRetRejectDivorce_descriptor_;
  metadata.reflection = stRetRejectDivorce_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* BoardcastMarryInfo_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BoardcastMarryInfo_ProtoModID_descriptor_;
}
bool BoardcastMarryInfo_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BoardcastMarryInfo_ProtoModID BoardcastMarryInfo::ModID;
const BoardcastMarryInfo_ProtoModID BoardcastMarryInfo::ProtoModID_MIN;
const BoardcastMarryInfo_ProtoModID BoardcastMarryInfo::ProtoModID_MAX;
const int BoardcastMarryInfo::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* BoardcastMarryInfo_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BoardcastMarryInfo_ProtoFunID_descriptor_;
}
bool BoardcastMarryInfo_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 194:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BoardcastMarryInfo_ProtoFunID BoardcastMarryInfo::FunID;
const BoardcastMarryInfo_ProtoFunID BoardcastMarryInfo::ProtoFunID_MIN;
const BoardcastMarryInfo_ProtoFunID BoardcastMarryInfo::ProtoFunID_MAX;
const int BoardcastMarryInfo::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int BoardcastMarryInfo::kName1FieldNumber;
const int BoardcastMarryInfo::kName2FieldNumber;
#endif  // !_MSC_VER

BoardcastMarryInfo::BoardcastMarryInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BoardcastMarryInfo::InitAsDefaultInstance() {
}

BoardcastMarryInfo::BoardcastMarryInfo(const BoardcastMarryInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BoardcastMarryInfo::SharedCtor() {
  _cached_size_ = 0;
  name1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BoardcastMarryInfo::~BoardcastMarryInfo() {
  SharedDtor();
}

void BoardcastMarryInfo::SharedDtor() {
  if (name1_ != &::google::protobuf::internal::kEmptyString) {
    delete name1_;
  }
  if (name2_ != &::google::protobuf::internal::kEmptyString) {
    delete name2_;
  }
  if (this != default_instance_) {
  }
}

void BoardcastMarryInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BoardcastMarryInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BoardcastMarryInfo_descriptor_;
}

const BoardcastMarryInfo& BoardcastMarryInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

BoardcastMarryInfo* BoardcastMarryInfo::default_instance_ = NULL;

BoardcastMarryInfo* BoardcastMarryInfo::New() const {
  return new BoardcastMarryInfo;
}

void BoardcastMarryInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name1()) {
      if (name1_ != &::google::protobuf::internal::kEmptyString) {
        name1_->clear();
      }
    }
    if (has_name2()) {
      if (name2_ != &::google::protobuf::internal::kEmptyString) {
        name2_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BoardcastMarryInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name1().data(), this->name1().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name2;
        break;
      }

      // optional string name2 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name2().data(), this->name2().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BoardcastMarryInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name1 = 1;
  if (has_name1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name1().data(), this->name1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name1(), output);
  }

  // optional string name2 = 2;
  if (has_name2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name2().data(), this->name2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BoardcastMarryInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name1 = 1;
  if (has_name1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name1().data(), this->name1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name1(), target);
  }

  // optional string name2 = 2;
  if (has_name2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name2().data(), this->name2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BoardcastMarryInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name1 = 1;
    if (has_name1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name1());
    }

    // optional string name2 = 2;
    if (has_name2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name2());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BoardcastMarryInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BoardcastMarryInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BoardcastMarryInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BoardcastMarryInfo::MergeFrom(const BoardcastMarryInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name1()) {
      set_name1(from.name1());
    }
    if (from.has_name2()) {
      set_name2(from.name2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BoardcastMarryInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoardcastMarryInfo::CopyFrom(const BoardcastMarryInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoardcastMarryInfo::IsInitialized() const {

  return true;
}

void BoardcastMarryInfo::Swap(BoardcastMarryInfo* other) {
  if (other != this) {
    std::swap(name1_, other->name1_);
    std::swap(name2_, other->name2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BoardcastMarryInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BoardcastMarryInfo_descriptor_;
  metadata.reflection = BoardcastMarryInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqUseFirework_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqUseFirework_ProtoModID_descriptor_;
}
bool stReqUseFirework_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqUseFirework_ProtoModID stReqUseFirework::ModID;
const stReqUseFirework_ProtoModID stReqUseFirework::ProtoModID_MIN;
const stReqUseFirework_ProtoModID stReqUseFirework::ProtoModID_MAX;
const int stReqUseFirework::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqUseFirework_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqUseFirework_ProtoFunID_descriptor_;
}
bool stReqUseFirework_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 195:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqUseFirework_ProtoFunID stReqUseFirework::FunID;
const stReqUseFirework_ProtoFunID stReqUseFirework::ProtoFunID_MIN;
const stReqUseFirework_ProtoFunID stReqUseFirework::ProtoFunID_MAX;
const int stReqUseFirework::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqUseFirework::kFireFieldNumber;
const int stReqUseFirework::kIdFieldNumber;
#endif  // !_MSC_VER

stReqUseFirework::stReqUseFirework()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqUseFirework::InitAsDefaultInstance() {
}

stReqUseFirework::stReqUseFirework(const stReqUseFirework& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqUseFirework::SharedCtor() {
  _cached_size_ = 0;
  fire_ = 0u;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqUseFirework::~stReqUseFirework() {
  SharedDtor();
}

void stReqUseFirework::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqUseFirework::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqUseFirework::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqUseFirework_descriptor_;
}

const stReqUseFirework& stReqUseFirework::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stReqUseFirework* stReqUseFirework::default_instance_ = NULL;

stReqUseFirework* stReqUseFirework::New() const {
  return new stReqUseFirework;
}

void stReqUseFirework::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fire_ = 0u;
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqUseFirework::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 fire = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fire_)));
          set_has_fire();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional uint32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqUseFirework::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 fire = 1;
  if (has_fire()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fire(), output);
  }

  // optional uint32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqUseFirework::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 fire = 1;
  if (has_fire()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fire(), target);
  }

  // optional uint32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqUseFirework::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 fire = 1;
    if (has_fire()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fire());
    }

    // optional uint32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqUseFirework::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqUseFirework* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqUseFirework*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqUseFirework::MergeFrom(const stReqUseFirework& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fire()) {
      set_fire(from.fire());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqUseFirework::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqUseFirework::CopyFrom(const stReqUseFirework& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqUseFirework::IsInitialized() const {

  return true;
}

void stReqUseFirework::Swap(stReqUseFirework* other) {
  if (other != this) {
    std::swap(fire_, other->fire_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqUseFirework::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqUseFirework_descriptor_;
  metadata.reflection = stReqUseFirework_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ResultUseFirework_Result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResultUseFirework_Result_descriptor_;
}
bool ResultUseFirework_Result_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ResultUseFirework_Result ResultUseFirework::RESULT_SUCCESS;
const ResultUseFirework_Result ResultUseFirework::RESULT_FAILURE;
const ResultUseFirework_Result ResultUseFirework::Result_MIN;
const ResultUseFirework_Result ResultUseFirework::Result_MAX;
const int ResultUseFirework::Result_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* ResultUseFirework_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResultUseFirework_ProtoModID_descriptor_;
}
bool ResultUseFirework_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ResultUseFirework_ProtoModID ResultUseFirework::ModID;
const ResultUseFirework_ProtoModID ResultUseFirework::ProtoModID_MIN;
const ResultUseFirework_ProtoModID ResultUseFirework::ProtoModID_MAX;
const int ResultUseFirework::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* ResultUseFirework_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResultUseFirework_ProtoFunID_descriptor_;
}
bool ResultUseFirework_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 196:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ResultUseFirework_ProtoFunID ResultUseFirework::FunID;
const ResultUseFirework_ProtoFunID ResultUseFirework::ProtoFunID_MIN;
const ResultUseFirework_ProtoFunID ResultUseFirework::ProtoFunID_MAX;
const int ResultUseFirework::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ResultUseFirework::kResultFieldNumber;
#endif  // !_MSC_VER

ResultUseFirework::ResultUseFirework()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResultUseFirework::InitAsDefaultInstance() {
}

ResultUseFirework::ResultUseFirework(const ResultUseFirework& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResultUseFirework::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResultUseFirework::~ResultUseFirework() {
  SharedDtor();
}

void ResultUseFirework::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResultUseFirework::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResultUseFirework::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResultUseFirework_descriptor_;
}

const ResultUseFirework& ResultUseFirework::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

ResultUseFirework* ResultUseFirework::default_instance_ = NULL;

ResultUseFirework* ResultUseFirework::New() const {
  return new ResultUseFirework;
}

void ResultUseFirework::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResultUseFirework::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Role.ResultUseFirework.Result result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Role::ResultUseFirework_Result_IsValid(value)) {
            set_result(static_cast< ::Role::ResultUseFirework_Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResultUseFirework::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Role.ResultUseFirework.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResultUseFirework::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Role.ResultUseFirework.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResultUseFirework::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Role.ResultUseFirework.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResultUseFirework::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResultUseFirework* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResultUseFirework*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResultUseFirework::MergeFrom(const ResultUseFirework& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResultUseFirework::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResultUseFirework::CopyFrom(const ResultUseFirework& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResultUseFirework::IsInitialized() const {

  return true;
}

void ResultUseFirework::Swap(ResultUseFirework* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResultUseFirework::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResultUseFirework_descriptor_;
  metadata.reflection = ResultUseFirework_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NotifyFirework_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyFirework_ProtoModID_descriptor_;
}
bool NotifyFirework_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NotifyFirework_ProtoModID NotifyFirework::ModID;
const NotifyFirework_ProtoModID NotifyFirework::ProtoModID_MIN;
const NotifyFirework_ProtoModID NotifyFirework::ProtoModID_MAX;
const int NotifyFirework::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* NotifyFirework_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyFirework_ProtoFunID_descriptor_;
}
bool NotifyFirework_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 197:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NotifyFirework_ProtoFunID NotifyFirework::FunID;
const NotifyFirework_ProtoFunID NotifyFirework::ProtoFunID_MIN;
const NotifyFirework_ProtoFunID NotifyFirework::ProtoFunID_MAX;
const int NotifyFirework::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NotifyFirework::kFireFieldNumber;
const int NotifyFirework::kNameFieldNumber;
#endif  // !_MSC_VER

NotifyFirework::NotifyFirework()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyFirework::InitAsDefaultInstance() {
}

NotifyFirework::NotifyFirework(const NotifyFirework& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyFirework::SharedCtor() {
  _cached_size_ = 0;
  fire_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyFirework::~NotifyFirework() {
  SharedDtor();
}

void NotifyFirework::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void NotifyFirework::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyFirework::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyFirework_descriptor_;
}

const NotifyFirework& NotifyFirework::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

NotifyFirework* NotifyFirework::default_instance_ = NULL;

NotifyFirework* NotifyFirework::New() const {
  return new NotifyFirework;
}

void NotifyFirework::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fire_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyFirework::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 fire = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fire_)));
          set_has_fire();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyFirework::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 fire = 1;
  if (has_fire()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fire(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyFirework::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 fire = 1;
  if (has_fire()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fire(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyFirework::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 fire = 1;
    if (has_fire()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fire());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyFirework::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyFirework* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyFirework*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyFirework::MergeFrom(const NotifyFirework& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fire()) {
      set_fire(from.fire());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyFirework::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyFirework::CopyFrom(const NotifyFirework& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyFirework::IsInitialized() const {

  return true;
}

void NotifyFirework::Swap(NotifyFirework* other) {
  if (other != this) {
    std::swap(fire_, other->fire_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyFirework::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyFirework_descriptor_;
  metadata.reflection = NotifyFirework_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqTakeCandy_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqTakeCandy_ProtoModID_descriptor_;
}
bool stReqTakeCandy_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqTakeCandy_ProtoModID stReqTakeCandy::ModID;
const stReqTakeCandy_ProtoModID stReqTakeCandy::ProtoModID_MIN;
const stReqTakeCandy_ProtoModID stReqTakeCandy::ProtoModID_MAX;
const int stReqTakeCandy::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqTakeCandy_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqTakeCandy_ProtoFunID_descriptor_;
}
bool stReqTakeCandy_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 198:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqTakeCandy_ProtoFunID stReqTakeCandy::FunID;
const stReqTakeCandy_ProtoFunID stReqTakeCandy::ProtoFunID_MIN;
const stReqTakeCandy_ProtoFunID stReqTakeCandy::ProtoFunID_MAX;
const int stReqTakeCandy::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqTakeCandy::kDataFieldNumber;
#endif  // !_MSC_VER

stReqTakeCandy::stReqTakeCandy()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqTakeCandy::InitAsDefaultInstance() {
}

stReqTakeCandy::stReqTakeCandy(const stReqTakeCandy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqTakeCandy::SharedCtor() {
  _cached_size_ = 0;
  data_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqTakeCandy::~stReqTakeCandy() {
  SharedDtor();
}

void stReqTakeCandy::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqTakeCandy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqTakeCandy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqTakeCandy_descriptor_;
}

const stReqTakeCandy& stReqTakeCandy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stReqTakeCandy* stReqTakeCandy::default_instance_ = NULL;

stReqTakeCandy* stReqTakeCandy::New() const {
  return new stReqTakeCandy;
}

void stReqTakeCandy::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    data_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqTakeCandy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data_)));
          set_has_data();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqTakeCandy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqTakeCandy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 data = 1;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqTakeCandy::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqTakeCandy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqTakeCandy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqTakeCandy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqTakeCandy::MergeFrom(const stReqTakeCandy& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqTakeCandy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqTakeCandy::CopyFrom(const stReqTakeCandy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqTakeCandy::IsInitialized() const {

  return true;
}

void stReqTakeCandy::Swap(stReqTakeCandy* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqTakeCandy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqTakeCandy_descriptor_;
  metadata.reflection = stReqTakeCandy_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ResultTakeCandy_Result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResultTakeCandy_Result_descriptor_;
}
bool ResultTakeCandy_Result_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ResultTakeCandy_Result ResultTakeCandy::RESULT_SUCCESS;
const ResultTakeCandy_Result ResultTakeCandy::RESULT_FAILURE;
const ResultTakeCandy_Result ResultTakeCandy::Result_MIN;
const ResultTakeCandy_Result ResultTakeCandy::Result_MAX;
const int ResultTakeCandy::Result_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* ResultTakeCandy_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResultTakeCandy_ProtoModID_descriptor_;
}
bool ResultTakeCandy_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ResultTakeCandy_ProtoModID ResultTakeCandy::ModID;
const ResultTakeCandy_ProtoModID ResultTakeCandy::ProtoModID_MIN;
const ResultTakeCandy_ProtoModID ResultTakeCandy::ProtoModID_MAX;
const int ResultTakeCandy::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* ResultTakeCandy_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResultTakeCandy_ProtoFunID_descriptor_;
}
bool ResultTakeCandy_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 199:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ResultTakeCandy_ProtoFunID ResultTakeCandy::FunID;
const ResultTakeCandy_ProtoFunID ResultTakeCandy::ProtoFunID_MIN;
const ResultTakeCandy_ProtoFunID ResultTakeCandy::ProtoFunID_MAX;
const int ResultTakeCandy::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ResultTakeCandy::kResultFieldNumber;
#endif  // !_MSC_VER

ResultTakeCandy::ResultTakeCandy()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResultTakeCandy::InitAsDefaultInstance() {
}

ResultTakeCandy::ResultTakeCandy(const ResultTakeCandy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResultTakeCandy::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResultTakeCandy::~ResultTakeCandy() {
  SharedDtor();
}

void ResultTakeCandy::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResultTakeCandy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResultTakeCandy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResultTakeCandy_descriptor_;
}

const ResultTakeCandy& ResultTakeCandy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

ResultTakeCandy* ResultTakeCandy::default_instance_ = NULL;

ResultTakeCandy* ResultTakeCandy::New() const {
  return new ResultTakeCandy;
}

void ResultTakeCandy::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResultTakeCandy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Role.ResultTakeCandy.Result result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Role::ResultTakeCandy_Result_IsValid(value)) {
            set_result(static_cast< ::Role::ResultTakeCandy_Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResultTakeCandy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Role.ResultTakeCandy.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResultTakeCandy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Role.ResultTakeCandy.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResultTakeCandy::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Role.ResultTakeCandy.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResultTakeCandy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResultTakeCandy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResultTakeCandy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResultTakeCandy::MergeFrom(const ResultTakeCandy& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResultTakeCandy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResultTakeCandy::CopyFrom(const ResultTakeCandy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResultTakeCandy::IsInitialized() const {

  return true;
}

void ResultTakeCandy::Swap(ResultTakeCandy* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResultTakeCandy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResultTakeCandy_descriptor_;
  metadata.reflection = ResultTakeCandy_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqBuyFirework_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqBuyFirework_ProtoModID_descriptor_;
}
bool stReqBuyFirework_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqBuyFirework_ProtoModID stReqBuyFirework::ModID;
const stReqBuyFirework_ProtoModID stReqBuyFirework::ProtoModID_MIN;
const stReqBuyFirework_ProtoModID stReqBuyFirework::ProtoModID_MAX;
const int stReqBuyFirework::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqBuyFirework_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqBuyFirework_ProtoFunID_descriptor_;
}
bool stReqBuyFirework_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 200:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqBuyFirework_ProtoFunID stReqBuyFirework::FunID;
const stReqBuyFirework_ProtoFunID stReqBuyFirework::ProtoFunID_MIN;
const stReqBuyFirework_ProtoFunID stReqBuyFirework::ProtoFunID_MAX;
const int stReqBuyFirework::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqBuyFirework::kIdFieldNumber;
#endif  // !_MSC_VER

stReqBuyFirework::stReqBuyFirework()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqBuyFirework::InitAsDefaultInstance() {
}

stReqBuyFirework::stReqBuyFirework(const stReqBuyFirework& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqBuyFirework::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqBuyFirework::~stReqBuyFirework() {
  SharedDtor();
}

void stReqBuyFirework::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqBuyFirework::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqBuyFirework::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqBuyFirework_descriptor_;
}

const stReqBuyFirework& stReqBuyFirework::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stReqBuyFirework* stReqBuyFirework::default_instance_ = NULL;

stReqBuyFirework* stReqBuyFirework::New() const {
  return new stReqBuyFirework;
}

void stReqBuyFirework::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqBuyFirework::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqBuyFirework::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqBuyFirework::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqBuyFirework::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqBuyFirework::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqBuyFirework* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqBuyFirework*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqBuyFirework::MergeFrom(const stReqBuyFirework& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqBuyFirework::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqBuyFirework::CopyFrom(const stReqBuyFirework& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqBuyFirework::IsInitialized() const {

  return true;
}

void stReqBuyFirework::Swap(stReqBuyFirework* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqBuyFirework::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqBuyFirework_descriptor_;
  metadata.reflection = stReqBuyFirework_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ResultBuyFirework_Result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResultBuyFirework_Result_descriptor_;
}
bool ResultBuyFirework_Result_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ResultBuyFirework_Result ResultBuyFirework::RESULT_SUCCESS;
const ResultBuyFirework_Result ResultBuyFirework::RESULT_FAILURE;
const ResultBuyFirework_Result ResultBuyFirework::Result_MIN;
const ResultBuyFirework_Result ResultBuyFirework::Result_MAX;
const int ResultBuyFirework::Result_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* ResultBuyFirework_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResultBuyFirework_ProtoModID_descriptor_;
}
bool ResultBuyFirework_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ResultBuyFirework_ProtoModID ResultBuyFirework::ModID;
const ResultBuyFirework_ProtoModID ResultBuyFirework::ProtoModID_MIN;
const ResultBuyFirework_ProtoModID ResultBuyFirework::ProtoModID_MAX;
const int ResultBuyFirework::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* ResultBuyFirework_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResultBuyFirework_ProtoFunID_descriptor_;
}
bool ResultBuyFirework_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 201:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ResultBuyFirework_ProtoFunID ResultBuyFirework::FunID;
const ResultBuyFirework_ProtoFunID ResultBuyFirework::ProtoFunID_MIN;
const ResultBuyFirework_ProtoFunID ResultBuyFirework::ProtoFunID_MAX;
const int ResultBuyFirework::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ResultBuyFirework::kResultFieldNumber;
#endif  // !_MSC_VER

ResultBuyFirework::ResultBuyFirework()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResultBuyFirework::InitAsDefaultInstance() {
}

ResultBuyFirework::ResultBuyFirework(const ResultBuyFirework& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResultBuyFirework::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResultBuyFirework::~ResultBuyFirework() {
  SharedDtor();
}

void ResultBuyFirework::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResultBuyFirework::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResultBuyFirework::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResultBuyFirework_descriptor_;
}

const ResultBuyFirework& ResultBuyFirework::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

ResultBuyFirework* ResultBuyFirework::default_instance_ = NULL;

ResultBuyFirework* ResultBuyFirework::New() const {
  return new ResultBuyFirework;
}

void ResultBuyFirework::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResultBuyFirework::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Role.ResultBuyFirework.Result result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Role::ResultBuyFirework_Result_IsValid(value)) {
            set_result(static_cast< ::Role::ResultBuyFirework_Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResultBuyFirework::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Role.ResultBuyFirework.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResultBuyFirework::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Role.ResultBuyFirework.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResultBuyFirework::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Role.ResultBuyFirework.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResultBuyFirework::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResultBuyFirework* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResultBuyFirework*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResultBuyFirework::MergeFrom(const ResultBuyFirework& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResultBuyFirework::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResultBuyFirework::CopyFrom(const ResultBuyFirework& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResultBuyFirework::IsInitialized() const {

  return true;
}

void ResultBuyFirework::Swap(ResultBuyFirework* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResultBuyFirework::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResultBuyFirework_descriptor_;
  metadata.reflection = ResultBuyFirework_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqEnterWeddingAlone_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqEnterWeddingAlone_ProtoModID_descriptor_;
}
bool stReqEnterWeddingAlone_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqEnterWeddingAlone_ProtoModID stReqEnterWeddingAlone::ModID;
const stReqEnterWeddingAlone_ProtoModID stReqEnterWeddingAlone::ProtoModID_MIN;
const stReqEnterWeddingAlone_ProtoModID stReqEnterWeddingAlone::ProtoModID_MAX;
const int stReqEnterWeddingAlone::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqEnterWeddingAlone_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqEnterWeddingAlone_ProtoFunID_descriptor_;
}
bool stReqEnterWeddingAlone_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 202:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqEnterWeddingAlone_ProtoFunID stReqEnterWeddingAlone::FunID;
const stReqEnterWeddingAlone_ProtoFunID stReqEnterWeddingAlone::ProtoFunID_MIN;
const stReqEnterWeddingAlone_ProtoFunID stReqEnterWeddingAlone::ProtoFunID_MAX;
const int stReqEnterWeddingAlone::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqEnterWeddingAlone::kDataFieldNumber;
#endif  // !_MSC_VER

stReqEnterWeddingAlone::stReqEnterWeddingAlone()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqEnterWeddingAlone::InitAsDefaultInstance() {
}

stReqEnterWeddingAlone::stReqEnterWeddingAlone(const stReqEnterWeddingAlone& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqEnterWeddingAlone::SharedCtor() {
  _cached_size_ = 0;
  data_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqEnterWeddingAlone::~stReqEnterWeddingAlone() {
  SharedDtor();
}

void stReqEnterWeddingAlone::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqEnterWeddingAlone::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqEnterWeddingAlone::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqEnterWeddingAlone_descriptor_;
}

const stReqEnterWeddingAlone& stReqEnterWeddingAlone::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stReqEnterWeddingAlone* stReqEnterWeddingAlone::default_instance_ = NULL;

stReqEnterWeddingAlone* stReqEnterWeddingAlone::New() const {
  return new stReqEnterWeddingAlone;
}

void stReqEnterWeddingAlone::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    data_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqEnterWeddingAlone::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data_)));
          set_has_data();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqEnterWeddingAlone::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqEnterWeddingAlone::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 data = 1;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqEnterWeddingAlone::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqEnterWeddingAlone::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqEnterWeddingAlone* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqEnterWeddingAlone*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqEnterWeddingAlone::MergeFrom(const stReqEnterWeddingAlone& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqEnterWeddingAlone::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqEnterWeddingAlone::CopyFrom(const stReqEnterWeddingAlone& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqEnterWeddingAlone::IsInitialized() const {

  return true;
}

void stReqEnterWeddingAlone::Swap(stReqEnterWeddingAlone* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqEnterWeddingAlone::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqEnterWeddingAlone_descriptor_;
  metadata.reflection = stReqEnterWeddingAlone_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ResultEnterWeddingAlone_Result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResultEnterWeddingAlone_Result_descriptor_;
}
bool ResultEnterWeddingAlone_Result_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ResultEnterWeddingAlone_Result ResultEnterWeddingAlone::RESULT_SUCCESS;
const ResultEnterWeddingAlone_Result ResultEnterWeddingAlone::RESULT_FAILURE;
const ResultEnterWeddingAlone_Result ResultEnterWeddingAlone::Result_MIN;
const ResultEnterWeddingAlone_Result ResultEnterWeddingAlone::Result_MAX;
const int ResultEnterWeddingAlone::Result_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* ResultEnterWeddingAlone_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResultEnterWeddingAlone_ProtoModID_descriptor_;
}
bool ResultEnterWeddingAlone_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ResultEnterWeddingAlone_ProtoModID ResultEnterWeddingAlone::ModID;
const ResultEnterWeddingAlone_ProtoModID ResultEnterWeddingAlone::ProtoModID_MIN;
const ResultEnterWeddingAlone_ProtoModID ResultEnterWeddingAlone::ProtoModID_MAX;
const int ResultEnterWeddingAlone::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* ResultEnterWeddingAlone_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResultEnterWeddingAlone_ProtoFunID_descriptor_;
}
bool ResultEnterWeddingAlone_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 203:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ResultEnterWeddingAlone_ProtoFunID ResultEnterWeddingAlone::FunID;
const ResultEnterWeddingAlone_ProtoFunID ResultEnterWeddingAlone::ProtoFunID_MIN;
const ResultEnterWeddingAlone_ProtoFunID ResultEnterWeddingAlone::ProtoFunID_MAX;
const int ResultEnterWeddingAlone::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ResultEnterWeddingAlone::kResultFieldNumber;
#endif  // !_MSC_VER

ResultEnterWeddingAlone::ResultEnterWeddingAlone()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResultEnterWeddingAlone::InitAsDefaultInstance() {
}

ResultEnterWeddingAlone::ResultEnterWeddingAlone(const ResultEnterWeddingAlone& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResultEnterWeddingAlone::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResultEnterWeddingAlone::~ResultEnterWeddingAlone() {
  SharedDtor();
}

void ResultEnterWeddingAlone::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResultEnterWeddingAlone::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResultEnterWeddingAlone::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResultEnterWeddingAlone_descriptor_;
}

const ResultEnterWeddingAlone& ResultEnterWeddingAlone::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

ResultEnterWeddingAlone* ResultEnterWeddingAlone::default_instance_ = NULL;

ResultEnterWeddingAlone* ResultEnterWeddingAlone::New() const {
  return new ResultEnterWeddingAlone;
}

void ResultEnterWeddingAlone::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResultEnterWeddingAlone::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Role.ResultEnterWeddingAlone.Result result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Role::ResultEnterWeddingAlone_Result_IsValid(value)) {
            set_result(static_cast< ::Role::ResultEnterWeddingAlone_Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResultEnterWeddingAlone::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Role.ResultEnterWeddingAlone.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResultEnterWeddingAlone::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Role.ResultEnterWeddingAlone.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResultEnterWeddingAlone::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Role.ResultEnterWeddingAlone.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResultEnterWeddingAlone::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResultEnterWeddingAlone* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResultEnterWeddingAlone*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResultEnterWeddingAlone::MergeFrom(const ResultEnterWeddingAlone& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResultEnterWeddingAlone::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResultEnterWeddingAlone::CopyFrom(const ResultEnterWeddingAlone& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResultEnterWeddingAlone::IsInitialized() const {

  return true;
}

void ResultEnterWeddingAlone::Swap(ResultEnterWeddingAlone* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResultEnterWeddingAlone::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResultEnterWeddingAlone_descriptor_;
  metadata.reflection = ResultEnterWeddingAlone_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqQuitWeddingScene_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqQuitWeddingScene_ProtoModID_descriptor_;
}
bool stReqQuitWeddingScene_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqQuitWeddingScene_ProtoModID stReqQuitWeddingScene::ModID;
const stReqQuitWeddingScene_ProtoModID stReqQuitWeddingScene::ProtoModID_MIN;
const stReqQuitWeddingScene_ProtoModID stReqQuitWeddingScene::ProtoModID_MAX;
const int stReqQuitWeddingScene::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqQuitWeddingScene_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqQuitWeddingScene_ProtoFunID_descriptor_;
}
bool stReqQuitWeddingScene_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 204:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqQuitWeddingScene_ProtoFunID stReqQuitWeddingScene::FunID;
const stReqQuitWeddingScene_ProtoFunID stReqQuitWeddingScene::ProtoFunID_MIN;
const stReqQuitWeddingScene_ProtoFunID stReqQuitWeddingScene::ProtoFunID_MAX;
const int stReqQuitWeddingScene::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqQuitWeddingScene::kLevelIdFieldNumber;
#endif  // !_MSC_VER

stReqQuitWeddingScene::stReqQuitWeddingScene()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqQuitWeddingScene::InitAsDefaultInstance() {
}

stReqQuitWeddingScene::stReqQuitWeddingScene(const stReqQuitWeddingScene& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqQuitWeddingScene::SharedCtor() {
  _cached_size_ = 0;
  levelid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqQuitWeddingScene::~stReqQuitWeddingScene() {
  SharedDtor();
}

void stReqQuitWeddingScene::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqQuitWeddingScene::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqQuitWeddingScene::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqQuitWeddingScene_descriptor_;
}

const stReqQuitWeddingScene& stReqQuitWeddingScene::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stReqQuitWeddingScene* stReqQuitWeddingScene::default_instance_ = NULL;

stReqQuitWeddingScene* stReqQuitWeddingScene::New() const {
  return new stReqQuitWeddingScene;
}

void stReqQuitWeddingScene::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    levelid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqQuitWeddingScene::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 levelId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &levelid_)));
          set_has_levelid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqQuitWeddingScene::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 levelId = 1;
  if (has_levelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->levelid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqQuitWeddingScene::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 levelId = 1;
  if (has_levelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->levelid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqQuitWeddingScene::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 levelId = 1;
    if (has_levelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->levelid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqQuitWeddingScene::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqQuitWeddingScene* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqQuitWeddingScene*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqQuitWeddingScene::MergeFrom(const stReqQuitWeddingScene& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_levelid()) {
      set_levelid(from.levelid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqQuitWeddingScene::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqQuitWeddingScene::CopyFrom(const stReqQuitWeddingScene& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqQuitWeddingScene::IsInitialized() const {

  return true;
}

void stReqQuitWeddingScene::Swap(stReqQuitWeddingScene* other) {
  if (other != this) {
    std::swap(levelid_, other->levelid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqQuitWeddingScene::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqQuitWeddingScene_descriptor_;
  metadata.reflection = stReqQuitWeddingScene_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRetQuitWeddingScene_Result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetQuitWeddingScene_Result_descriptor_;
}
bool stRetQuitWeddingScene_Result_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetQuitWeddingScene_Result stRetQuitWeddingScene::eSuccess;
const stRetQuitWeddingScene_Result stRetQuitWeddingScene::eNot_In_Scene;
const stRetQuitWeddingScene_Result stRetQuitWeddingScene::Result_MIN;
const stRetQuitWeddingScene_Result stRetQuitWeddingScene::Result_MAX;
const int stRetQuitWeddingScene::Result_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetQuitWeddingScene_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetQuitWeddingScene_ProtoModID_descriptor_;
}
bool stRetQuitWeddingScene_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetQuitWeddingScene_ProtoModID stRetQuitWeddingScene::ModID;
const stRetQuitWeddingScene_ProtoModID stRetQuitWeddingScene::ProtoModID_MIN;
const stRetQuitWeddingScene_ProtoModID stRetQuitWeddingScene::ProtoModID_MAX;
const int stRetQuitWeddingScene::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetQuitWeddingScene_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetQuitWeddingScene_ProtoFunID_descriptor_;
}
bool stRetQuitWeddingScene_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 205:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetQuitWeddingScene_ProtoFunID stRetQuitWeddingScene::FunID;
const stRetQuitWeddingScene_ProtoFunID stRetQuitWeddingScene::ProtoFunID_MIN;
const stRetQuitWeddingScene_ProtoFunID stRetQuitWeddingScene::ProtoFunID_MAX;
const int stRetQuitWeddingScene::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRetQuitWeddingScene::kResultFieldNumber;
#endif  // !_MSC_VER

stRetQuitWeddingScene::stRetQuitWeddingScene()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRetQuitWeddingScene::InitAsDefaultInstance() {
}

stRetQuitWeddingScene::stRetQuitWeddingScene(const stRetQuitWeddingScene& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRetQuitWeddingScene::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRetQuitWeddingScene::~stRetQuitWeddingScene() {
  SharedDtor();
}

void stRetQuitWeddingScene::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRetQuitWeddingScene::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRetQuitWeddingScene::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetQuitWeddingScene_descriptor_;
}

const stRetQuitWeddingScene& stRetQuitWeddingScene::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stRetQuitWeddingScene* stRetQuitWeddingScene::default_instance_ = NULL;

stRetQuitWeddingScene* stRetQuitWeddingScene::New() const {
  return new stRetQuitWeddingScene;
}

void stRetQuitWeddingScene::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRetQuitWeddingScene::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Role.stRetQuitWeddingScene.Result result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Role::stRetQuitWeddingScene_Result_IsValid(value)) {
            set_result(static_cast< ::Role::stRetQuitWeddingScene_Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRetQuitWeddingScene::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Role.stRetQuitWeddingScene.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRetQuitWeddingScene::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Role.stRetQuitWeddingScene.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRetQuitWeddingScene::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Role.stRetQuitWeddingScene.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRetQuitWeddingScene::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRetQuitWeddingScene* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRetQuitWeddingScene*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRetQuitWeddingScene::MergeFrom(const stRetQuitWeddingScene& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRetQuitWeddingScene::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRetQuitWeddingScene::CopyFrom(const stRetQuitWeddingScene& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRetQuitWeddingScene::IsInitialized() const {

  return true;
}

void stRetQuitWeddingScene::Swap(stRetQuitWeddingScene* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRetQuitWeddingScene::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRetQuitWeddingScene_descriptor_;
  metadata.reflection = stRetQuitWeddingScene_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stNotifyFriendAction_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyFriendAction_ProtoModID_descriptor_;
}
bool stNotifyFriendAction_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyFriendAction_ProtoModID stNotifyFriendAction::ModID;
const stNotifyFriendAction_ProtoModID stNotifyFriendAction::ProtoModID_MIN;
const stNotifyFriendAction_ProtoModID stNotifyFriendAction::ProtoModID_MAX;
const int stNotifyFriendAction::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stNotifyFriendAction_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyFriendAction_ProtoFunID_descriptor_;
}
bool stNotifyFriendAction_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 206:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyFriendAction_ProtoFunID stNotifyFriendAction::FunID;
const stNotifyFriendAction_ProtoFunID stNotifyFriendAction::ProtoFunID_MIN;
const stNotifyFriendAction_ProtoFunID stNotifyFriendAction::ProtoFunID_MAX;
const int stNotifyFriendAction::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stNotifyFriendAction::kInFieldNumber;
const int stNotifyFriendAction::kCharidFieldNumber;
#endif  // !_MSC_VER

stNotifyFriendAction::stNotifyFriendAction()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stNotifyFriendAction::InitAsDefaultInstance() {
}

stNotifyFriendAction::stNotifyFriendAction(const stNotifyFriendAction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stNotifyFriendAction::SharedCtor() {
  _cached_size_ = 0;
  in_ = false;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stNotifyFriendAction::~stNotifyFriendAction() {
  SharedDtor();
}

void stNotifyFriendAction::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stNotifyFriendAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stNotifyFriendAction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyFriendAction_descriptor_;
}

const stNotifyFriendAction& stNotifyFriendAction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stNotifyFriendAction* stNotifyFriendAction::default_instance_ = NULL;

stNotifyFriendAction* stNotifyFriendAction::New() const {
  return new stNotifyFriendAction;
}

void stNotifyFriendAction::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    in_ = false;
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stNotifyFriendAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool in = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &in_)));
          set_has_in();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_charid;
        break;
      }

      // optional uint32 charid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stNotifyFriendAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool in = 1;
  if (has_in()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->in(), output);
  }

  // optional uint32 charid = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stNotifyFriendAction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool in = 1;
  if (has_in()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->in(), target);
  }

  // optional uint32 charid = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stNotifyFriendAction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool in = 1;
    if (has_in()) {
      total_size += 1 + 1;
    }

    // optional uint32 charid = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stNotifyFriendAction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stNotifyFriendAction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stNotifyFriendAction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stNotifyFriendAction::MergeFrom(const stNotifyFriendAction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_in()) {
      set_in(from.in());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stNotifyFriendAction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stNotifyFriendAction::CopyFrom(const stNotifyFriendAction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stNotifyFriendAction::IsInitialized() const {

  return true;
}

void stNotifyFriendAction::Swap(stNotifyFriendAction* other) {
  if (other != this) {
    std::swap(in_, other->in_);
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stNotifyFriendAction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stNotifyFriendAction_descriptor_;
  metadata.reflection = stNotifyFriendAction_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stSendCharCreateTime_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSendCharCreateTime_ProtoModID_descriptor_;
}
bool stSendCharCreateTime_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSendCharCreateTime_ProtoModID stSendCharCreateTime::ModID;
const stSendCharCreateTime_ProtoModID stSendCharCreateTime::ProtoModID_MIN;
const stSendCharCreateTime_ProtoModID stSendCharCreateTime::ProtoModID_MAX;
const int stSendCharCreateTime::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSendCharCreateTime_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSendCharCreateTime_ProtoFunID_descriptor_;
}
bool stSendCharCreateTime_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 207:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSendCharCreateTime_ProtoFunID stSendCharCreateTime::FunID;
const stSendCharCreateTime_ProtoFunID stSendCharCreateTime::ProtoFunID_MIN;
const stSendCharCreateTime_ProtoFunID stSendCharCreateTime::ProtoFunID_MAX;
const int stSendCharCreateTime::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stSendCharCreateTime::kCreateTimeStrFieldNumber;
#endif  // !_MSC_VER

stSendCharCreateTime::stSendCharCreateTime()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSendCharCreateTime::InitAsDefaultInstance() {
}

stSendCharCreateTime::stSendCharCreateTime(const stSendCharCreateTime& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSendCharCreateTime::SharedCtor() {
  _cached_size_ = 0;
  createtimestr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSendCharCreateTime::~stSendCharCreateTime() {
  SharedDtor();
}

void stSendCharCreateTime::SharedDtor() {
  if (createtimestr_ != &::google::protobuf::internal::kEmptyString) {
    delete createtimestr_;
  }
  if (this != default_instance_) {
  }
}

void stSendCharCreateTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSendCharCreateTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSendCharCreateTime_descriptor_;
}

const stSendCharCreateTime& stSendCharCreateTime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stSendCharCreateTime* stSendCharCreateTime::default_instance_ = NULL;

stSendCharCreateTime* stSendCharCreateTime::New() const {
  return new stSendCharCreateTime;
}

void stSendCharCreateTime::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_createtimestr()) {
      if (createtimestr_ != &::google::protobuf::internal::kEmptyString) {
        createtimestr_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSendCharCreateTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string createTimeStr = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_createtimestr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->createtimestr().data(), this->createtimestr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSendCharCreateTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string createTimeStr = 1;
  if (has_createtimestr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->createtimestr().data(), this->createtimestr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->createtimestr(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSendCharCreateTime::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string createTimeStr = 1;
  if (has_createtimestr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->createtimestr().data(), this->createtimestr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->createtimestr(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSendCharCreateTime::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string createTimeStr = 1;
    if (has_createtimestr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->createtimestr());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSendCharCreateTime::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSendCharCreateTime* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSendCharCreateTime*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSendCharCreateTime::MergeFrom(const stSendCharCreateTime& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_createtimestr()) {
      set_createtimestr(from.createtimestr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSendCharCreateTime::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSendCharCreateTime::CopyFrom(const stSendCharCreateTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSendCharCreateTime::IsInitialized() const {

  return true;
}

void stSendCharCreateTime::Swap(stSendCharCreateTime* other) {
  if (other != this) {
    std::swap(createtimestr_, other->createtimestr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSendCharCreateTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSendCharCreateTime_descriptor_;
  metadata.reflection = stSendCharCreateTime_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqDrawWeddingRing_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqDrawWeddingRing_ProtoModID_descriptor_;
}
bool stReqDrawWeddingRing_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqDrawWeddingRing_ProtoModID stReqDrawWeddingRing::ModID;
const stReqDrawWeddingRing_ProtoModID stReqDrawWeddingRing::ProtoModID_MIN;
const stReqDrawWeddingRing_ProtoModID stReqDrawWeddingRing::ProtoModID_MAX;
const int stReqDrawWeddingRing::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqDrawWeddingRing_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqDrawWeddingRing_ProtoFunID_descriptor_;
}
bool stReqDrawWeddingRing_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 208:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqDrawWeddingRing_ProtoFunID stReqDrawWeddingRing::FunID;
const stReqDrawWeddingRing_ProtoFunID stReqDrawWeddingRing::ProtoFunID_MIN;
const stReqDrawWeddingRing_ProtoFunID stReqDrawWeddingRing::ProtoFunID_MAX;
const int stReqDrawWeddingRing::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqDrawWeddingRing::kCharIdFieldNumber;
#endif  // !_MSC_VER

stReqDrawWeddingRing::stReqDrawWeddingRing()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqDrawWeddingRing::InitAsDefaultInstance() {
}

stReqDrawWeddingRing::stReqDrawWeddingRing(const stReqDrawWeddingRing& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqDrawWeddingRing::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqDrawWeddingRing::~stReqDrawWeddingRing() {
  SharedDtor();
}

void stReqDrawWeddingRing::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqDrawWeddingRing::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqDrawWeddingRing::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqDrawWeddingRing_descriptor_;
}

const stReqDrawWeddingRing& stReqDrawWeddingRing::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stReqDrawWeddingRing* stReqDrawWeddingRing::default_instance_ = NULL;

stReqDrawWeddingRing* stReqDrawWeddingRing::New() const {
  return new stReqDrawWeddingRing;
}

void stReqDrawWeddingRing::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqDrawWeddingRing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqDrawWeddingRing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charId = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqDrawWeddingRing::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charId = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqDrawWeddingRing::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charId = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqDrawWeddingRing::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqDrawWeddingRing* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqDrawWeddingRing*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqDrawWeddingRing::MergeFrom(const stReqDrawWeddingRing& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqDrawWeddingRing::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqDrawWeddingRing::CopyFrom(const stReqDrawWeddingRing& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqDrawWeddingRing::IsInitialized() const {

  return true;
}

void stReqDrawWeddingRing::Swap(stReqDrawWeddingRing* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqDrawWeddingRing::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqDrawWeddingRing_descriptor_;
  metadata.reflection = stReqDrawWeddingRing_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRetDrawWeddingRing_Result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetDrawWeddingRing_Result_descriptor_;
}
bool stRetDrawWeddingRing_Result_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetDrawWeddingRing_Result stRetDrawWeddingRing::eSuccess;
const stRetDrawWeddingRing_Result stRetDrawWeddingRing::eNot_In_Scene;
const stRetDrawWeddingRing_Result stRetDrawWeddingRing::eAready_Draw;
const stRetDrawWeddingRing_Result stRetDrawWeddingRing::eNot_Marry;
const stRetDrawWeddingRing_Result stRetDrawWeddingRing::eInner_Error;
const stRetDrawWeddingRing_Result stRetDrawWeddingRing::Result_MIN;
const stRetDrawWeddingRing_Result stRetDrawWeddingRing::Result_MAX;
const int stRetDrawWeddingRing::Result_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetDrawWeddingRing_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetDrawWeddingRing_ProtoModID_descriptor_;
}
bool stRetDrawWeddingRing_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetDrawWeddingRing_ProtoModID stRetDrawWeddingRing::ModID;
const stRetDrawWeddingRing_ProtoModID stRetDrawWeddingRing::ProtoModID_MIN;
const stRetDrawWeddingRing_ProtoModID stRetDrawWeddingRing::ProtoModID_MAX;
const int stRetDrawWeddingRing::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetDrawWeddingRing_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetDrawWeddingRing_ProtoFunID_descriptor_;
}
bool stRetDrawWeddingRing_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 209:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetDrawWeddingRing_ProtoFunID stRetDrawWeddingRing::FunID;
const stRetDrawWeddingRing_ProtoFunID stRetDrawWeddingRing::ProtoFunID_MIN;
const stRetDrawWeddingRing_ProtoFunID stRetDrawWeddingRing::ProtoFunID_MAX;
const int stRetDrawWeddingRing::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRetDrawWeddingRing::kResultFieldNumber;
#endif  // !_MSC_VER

stRetDrawWeddingRing::stRetDrawWeddingRing()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRetDrawWeddingRing::InitAsDefaultInstance() {
}

stRetDrawWeddingRing::stRetDrawWeddingRing(const stRetDrawWeddingRing& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRetDrawWeddingRing::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRetDrawWeddingRing::~stRetDrawWeddingRing() {
  SharedDtor();
}

void stRetDrawWeddingRing::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRetDrawWeddingRing::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRetDrawWeddingRing::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetDrawWeddingRing_descriptor_;
}

const stRetDrawWeddingRing& stRetDrawWeddingRing::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stRetDrawWeddingRing* stRetDrawWeddingRing::default_instance_ = NULL;

stRetDrawWeddingRing* stRetDrawWeddingRing::New() const {
  return new stRetDrawWeddingRing;
}

void stRetDrawWeddingRing::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRetDrawWeddingRing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Role.stRetDrawWeddingRing.Result result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Role::stRetDrawWeddingRing_Result_IsValid(value)) {
            set_result(static_cast< ::Role::stRetDrawWeddingRing_Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRetDrawWeddingRing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Role.stRetDrawWeddingRing.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRetDrawWeddingRing::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Role.stRetDrawWeddingRing.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRetDrawWeddingRing::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Role.stRetDrawWeddingRing.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRetDrawWeddingRing::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRetDrawWeddingRing* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRetDrawWeddingRing*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRetDrawWeddingRing::MergeFrom(const stRetDrawWeddingRing& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRetDrawWeddingRing::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRetDrawWeddingRing::CopyFrom(const stRetDrawWeddingRing& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRetDrawWeddingRing::IsInitialized() const {

  return true;
}

void stRetDrawWeddingRing::Swap(stRetDrawWeddingRing* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRetDrawWeddingRing::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRetDrawWeddingRing_descriptor_;
  metadata.reflection = stRetDrawWeddingRing_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqBuyNum_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqBuyNum_ProtoModID_descriptor_;
}
bool stReqBuyNum_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqBuyNum_ProtoModID stReqBuyNum::ModID;
const stReqBuyNum_ProtoModID stReqBuyNum::ProtoModID_MIN;
const stReqBuyNum_ProtoModID stReqBuyNum::ProtoModID_MAX;
const int stReqBuyNum::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqBuyNum_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqBuyNum_ProtoFunID_descriptor_;
}
bool stReqBuyNum_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 210:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqBuyNum_ProtoFunID stReqBuyNum::FunID;
const stReqBuyNum_ProtoFunID stReqBuyNum::ProtoFunID_MIN;
const stReqBuyNum_ProtoFunID stReqBuyNum::ProtoFunID_MAX;
const int stReqBuyNum::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqBuyNum::kCharIdFieldNumber;
#endif  // !_MSC_VER

stReqBuyNum::stReqBuyNum()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqBuyNum::InitAsDefaultInstance() {
}

stReqBuyNum::stReqBuyNum(const stReqBuyNum& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqBuyNum::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqBuyNum::~stReqBuyNum() {
  SharedDtor();
}

void stReqBuyNum::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqBuyNum::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqBuyNum::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqBuyNum_descriptor_;
}

const stReqBuyNum& stReqBuyNum::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stReqBuyNum* stReqBuyNum::default_instance_ = NULL;

stReqBuyNum* stReqBuyNum::New() const {
  return new stReqBuyNum;
}

void stReqBuyNum::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqBuyNum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqBuyNum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charId = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqBuyNum::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charId = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqBuyNum::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charId = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqBuyNum::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqBuyNum* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqBuyNum*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqBuyNum::MergeFrom(const stReqBuyNum& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqBuyNum::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqBuyNum::CopyFrom(const stReqBuyNum& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqBuyNum::IsInitialized() const {

  return true;
}

void stReqBuyNum::Swap(stReqBuyNum* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqBuyNum::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqBuyNum_descriptor_;
  metadata.reflection = stReqBuyNum_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stBuyNumResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stBuyNumResult_ProtoModID_descriptor_;
}
bool stBuyNumResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stBuyNumResult_ProtoModID stBuyNumResult::ModID;
const stBuyNumResult_ProtoModID stBuyNumResult::ProtoModID_MIN;
const stBuyNumResult_ProtoModID stBuyNumResult::ProtoModID_MAX;
const int stBuyNumResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stBuyNumResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stBuyNumResult_ProtoFunID_descriptor_;
}
bool stBuyNumResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 211:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stBuyNumResult_ProtoFunID stBuyNumResult::FunID;
const stBuyNumResult_ProtoFunID stBuyNumResult::ProtoFunID_MIN;
const stBuyNumResult_ProtoFunID stBuyNumResult::ProtoFunID_MAX;
const int stBuyNumResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stBuyNumResult::kBuyNumFieldNumber;
#endif  // !_MSC_VER

stBuyNumResult::stBuyNumResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stBuyNumResult::InitAsDefaultInstance() {
}

stBuyNumResult::stBuyNumResult(const stBuyNumResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stBuyNumResult::SharedCtor() {
  _cached_size_ = 0;
  buynum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stBuyNumResult::~stBuyNumResult() {
  SharedDtor();
}

void stBuyNumResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stBuyNumResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stBuyNumResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stBuyNumResult_descriptor_;
}

const stBuyNumResult& stBuyNumResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stBuyNumResult* stBuyNumResult::default_instance_ = NULL;

stBuyNumResult* stBuyNumResult::New() const {
  return new stBuyNumResult;
}

void stBuyNumResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    buynum_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stBuyNumResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 buyNum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buynum_)));
          set_has_buynum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stBuyNumResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 buyNum = 1;
  if (has_buynum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->buynum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stBuyNumResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 buyNum = 1;
  if (has_buynum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->buynum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stBuyNumResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 buyNum = 1;
    if (has_buynum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buynum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stBuyNumResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stBuyNumResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stBuyNumResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stBuyNumResult::MergeFrom(const stBuyNumResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buynum()) {
      set_buynum(from.buynum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stBuyNumResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stBuyNumResult::CopyFrom(const stBuyNumResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stBuyNumResult::IsInitialized() const {

  return true;
}

void stBuyNumResult::Swap(stBuyNumResult* other) {
  if (other != this) {
    std::swap(buynum_, other->buynum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stBuyNumResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stBuyNumResult_descriptor_;
  metadata.reflection = stBuyNumResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqRefreshNum_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqRefreshNum_ProtoModID_descriptor_;
}
bool stReqRefreshNum_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqRefreshNum_ProtoModID stReqRefreshNum::ModID;
const stReqRefreshNum_ProtoModID stReqRefreshNum::ProtoModID_MIN;
const stReqRefreshNum_ProtoModID stReqRefreshNum::ProtoModID_MAX;
const int stReqRefreshNum::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqRefreshNum_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqRefreshNum_ProtoFunID_descriptor_;
}
bool stReqRefreshNum_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 212:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqRefreshNum_ProtoFunID stReqRefreshNum::FunID;
const stReqRefreshNum_ProtoFunID stReqRefreshNum::ProtoFunID_MIN;
const stReqRefreshNum_ProtoFunID stReqRefreshNum::ProtoFunID_MAX;
const int stReqRefreshNum::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqRefreshNum::kCharIdFieldNumber;
#endif  // !_MSC_VER

stReqRefreshNum::stReqRefreshNum()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqRefreshNum::InitAsDefaultInstance() {
}

stReqRefreshNum::stReqRefreshNum(const stReqRefreshNum& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqRefreshNum::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqRefreshNum::~stReqRefreshNum() {
  SharedDtor();
}

void stReqRefreshNum::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqRefreshNum::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqRefreshNum::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqRefreshNum_descriptor_;
}

const stReqRefreshNum& stReqRefreshNum::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stReqRefreshNum* stReqRefreshNum::default_instance_ = NULL;

stReqRefreshNum* stReqRefreshNum::New() const {
  return new stReqRefreshNum;
}

void stReqRefreshNum::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqRefreshNum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqRefreshNum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charId = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqRefreshNum::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charId = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqRefreshNum::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charId = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqRefreshNum::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqRefreshNum* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqRefreshNum*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqRefreshNum::MergeFrom(const stReqRefreshNum& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqRefreshNum::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqRefreshNum::CopyFrom(const stReqRefreshNum& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqRefreshNum::IsInitialized() const {

  return true;
}

void stReqRefreshNum::Swap(stReqRefreshNum* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqRefreshNum::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqRefreshNum_descriptor_;
  metadata.reflection = stReqRefreshNum_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRefreshNumResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRefreshNumResult_ProtoModID_descriptor_;
}
bool stRefreshNumResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRefreshNumResult_ProtoModID stRefreshNumResult::ModID;
const stRefreshNumResult_ProtoModID stRefreshNumResult::ProtoModID_MIN;
const stRefreshNumResult_ProtoModID stRefreshNumResult::ProtoModID_MAX;
const int stRefreshNumResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRefreshNumResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRefreshNumResult_ProtoFunID_descriptor_;
}
bool stRefreshNumResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 213:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRefreshNumResult_ProtoFunID stRefreshNumResult::FunID;
const stRefreshNumResult_ProtoFunID stRefreshNumResult::ProtoFunID_MIN;
const stRefreshNumResult_ProtoFunID stRefreshNumResult::ProtoFunID_MAX;
const int stRefreshNumResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRefreshNumResult::kRefreshNumFieldNumber;
const int stRefreshNumResult::kDiamondRefreshNumFieldNumber;
#endif  // !_MSC_VER

stRefreshNumResult::stRefreshNumResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRefreshNumResult::InitAsDefaultInstance() {
}

stRefreshNumResult::stRefreshNumResult(const stRefreshNumResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRefreshNumResult::SharedCtor() {
  _cached_size_ = 0;
  refreshnum_ = 0u;
  diamondrefreshnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRefreshNumResult::~stRefreshNumResult() {
  SharedDtor();
}

void stRefreshNumResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRefreshNumResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRefreshNumResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRefreshNumResult_descriptor_;
}

const stRefreshNumResult& stRefreshNumResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stRefreshNumResult* stRefreshNumResult::default_instance_ = NULL;

stRefreshNumResult* stRefreshNumResult::New() const {
  return new stRefreshNumResult;
}

void stRefreshNumResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    refreshnum_ = 0u;
    diamondrefreshnum_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRefreshNumResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 refreshNum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &refreshnum_)));
          set_has_refreshnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_diamondRefreshNum;
        break;
      }

      // optional uint32 diamondRefreshNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_diamondRefreshNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &diamondrefreshnum_)));
          set_has_diamondrefreshnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRefreshNumResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 refreshNum = 1;
  if (has_refreshnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->refreshnum(), output);
  }

  // optional uint32 diamondRefreshNum = 2;
  if (has_diamondrefreshnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->diamondrefreshnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRefreshNumResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 refreshNum = 1;
  if (has_refreshnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->refreshnum(), target);
  }

  // optional uint32 diamondRefreshNum = 2;
  if (has_diamondrefreshnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->diamondrefreshnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRefreshNumResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 refreshNum = 1;
    if (has_refreshnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->refreshnum());
    }

    // optional uint32 diamondRefreshNum = 2;
    if (has_diamondrefreshnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->diamondrefreshnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRefreshNumResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRefreshNumResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRefreshNumResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRefreshNumResult::MergeFrom(const stRefreshNumResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_refreshnum()) {
      set_refreshnum(from.refreshnum());
    }
    if (from.has_diamondrefreshnum()) {
      set_diamondrefreshnum(from.diamondrefreshnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRefreshNumResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRefreshNumResult::CopyFrom(const stRefreshNumResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRefreshNumResult::IsInitialized() const {

  return true;
}

void stRefreshNumResult::Swap(stRefreshNumResult* other) {
  if (other != this) {
    std::swap(refreshnum_, other->refreshnum_);
    std::swap(diamondrefreshnum_, other->diamondrefreshnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRefreshNumResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRefreshNumResult_descriptor_;
  metadata.reflection = stRefreshNumResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqColumnList_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqColumnList_ProtoModID_descriptor_;
}
bool stReqColumnList_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqColumnList_ProtoModID stReqColumnList::ModID;
const stReqColumnList_ProtoModID stReqColumnList::ProtoModID_MIN;
const stReqColumnList_ProtoModID stReqColumnList::ProtoModID_MAX;
const int stReqColumnList::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqColumnList_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqColumnList_ProtoFunID_descriptor_;
}
bool stReqColumnList_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 214:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqColumnList_ProtoFunID stReqColumnList::FunID;
const stReqColumnList_ProtoFunID stReqColumnList::ProtoFunID_MIN;
const stReqColumnList_ProtoFunID stReqColumnList::ProtoFunID_MAX;
const int stReqColumnList::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqColumnList::kTypeFieldNumber;
#endif  // !_MSC_VER

stReqColumnList::stReqColumnList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqColumnList::InitAsDefaultInstance() {
}

stReqColumnList::stReqColumnList(const stReqColumnList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqColumnList::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqColumnList::~stReqColumnList() {
  SharedDtor();
}

void stReqColumnList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqColumnList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqColumnList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqColumnList_descriptor_;
}

const stReqColumnList& stReqColumnList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stReqColumnList* stReqColumnList::default_instance_ = NULL;

stReqColumnList* stReqColumnList::New() const {
  return new stReqColumnList;
}

void stReqColumnList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqColumnList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Role.eColumn type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Role::eColumn_IsValid(value)) {
            set_type(static_cast< ::Role::eColumn >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqColumnList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Role.eColumn type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqColumnList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Role.eColumn type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqColumnList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Role.eColumn type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqColumnList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqColumnList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqColumnList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqColumnList::MergeFrom(const stReqColumnList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqColumnList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqColumnList::CopyFrom(const stReqColumnList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqColumnList::IsInitialized() const {

  return true;
}

void stReqColumnList::Swap(stReqColumnList* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqColumnList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqColumnList_descriptor_;
  metadata.reflection = stReqColumnList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stItemInfo::kUniqueIDFieldNumber;
const int stItemInfo::kItemNumFieldNumber;
const int stItemInfo::kCostResTypeFieldNumber;
const int stItemInfo::kItemPriceFieldNumber;
const int stItemInfo::kBuyNumFieldNumber;
#endif  // !_MSC_VER

stItemInfo::stItemInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stItemInfo::InitAsDefaultInstance() {
}

stItemInfo::stItemInfo(const stItemInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stItemInfo::SharedCtor() {
  _cached_size_ = 0;
  uniqueid_ = 0u;
  itemnum_ = 0u;
  costrestype_ = 0u;
  itemprice_ = 0u;
  buynum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stItemInfo::~stItemInfo() {
  SharedDtor();
}

void stItemInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stItemInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stItemInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stItemInfo_descriptor_;
}

const stItemInfo& stItemInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stItemInfo* stItemInfo::default_instance_ = NULL;

stItemInfo* stItemInfo::New() const {
  return new stItemInfo;
}

void stItemInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uniqueid_ = 0u;
    itemnum_ = 0u;
    costrestype_ = 0u;
    itemprice_ = 0u;
    buynum_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stItemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uniqueID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uniqueid_)));
          set_has_uniqueid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemNum;
        break;
      }

      // optional uint32 itemNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemnum_)));
          set_has_itemnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_costResType;
        break;
      }

      // optional uint32 costResType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_costResType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &costrestype_)));
          set_has_costrestype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_itemPrice;
        break;
      }

      // optional uint32 itemPrice = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemprice_)));
          set_has_itemprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_buyNum;
        break;
      }

      // optional uint32 buyNum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buyNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buynum_)));
          set_has_buynum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stItemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uniqueID = 1;
  if (has_uniqueid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uniqueid(), output);
  }

  // optional uint32 itemNum = 2;
  if (has_itemnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->itemnum(), output);
  }

  // optional uint32 costResType = 3;
  if (has_costrestype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->costrestype(), output);
  }

  // optional uint32 itemPrice = 4;
  if (has_itemprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->itemprice(), output);
  }

  // optional uint32 buyNum = 5;
  if (has_buynum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->buynum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stItemInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uniqueID = 1;
  if (has_uniqueid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uniqueid(), target);
  }

  // optional uint32 itemNum = 2;
  if (has_itemnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->itemnum(), target);
  }

  // optional uint32 costResType = 3;
  if (has_costrestype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->costrestype(), target);
  }

  // optional uint32 itemPrice = 4;
  if (has_itemprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->itemprice(), target);
  }

  // optional uint32 buyNum = 5;
  if (has_buynum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->buynum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stItemInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uniqueID = 1;
    if (has_uniqueid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uniqueid());
    }

    // optional uint32 itemNum = 2;
    if (has_itemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemnum());
    }

    // optional uint32 costResType = 3;
    if (has_costrestype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->costrestype());
    }

    // optional uint32 itemPrice = 4;
    if (has_itemprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemprice());
    }

    // optional uint32 buyNum = 5;
    if (has_buynum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buynum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stItemInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stItemInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stItemInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stItemInfo::MergeFrom(const stItemInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uniqueid()) {
      set_uniqueid(from.uniqueid());
    }
    if (from.has_itemnum()) {
      set_itemnum(from.itemnum());
    }
    if (from.has_costrestype()) {
      set_costrestype(from.costrestype());
    }
    if (from.has_itemprice()) {
      set_itemprice(from.itemprice());
    }
    if (from.has_buynum()) {
      set_buynum(from.buynum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stItemInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stItemInfo::CopyFrom(const stItemInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stItemInfo::IsInitialized() const {

  return true;
}

void stItemInfo::Swap(stItemInfo* other) {
  if (other != this) {
    std::swap(uniqueid_, other->uniqueid_);
    std::swap(itemnum_, other->itemnum_);
    std::swap(costrestype_, other->costrestype_);
    std::swap(itemprice_, other->itemprice_);
    std::swap(buynum_, other->buynum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stItemInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stItemInfo_descriptor_;
  metadata.reflection = stItemInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stColumnListResult_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stColumnListResult_eResult_descriptor_;
}
bool stColumnListResult_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stColumnListResult_eResult stColumnListResult::SUCCESS;
const stColumnListResult_eResult stColumnListResult::INNER_ERROR;
const stColumnListResult_eResult stColumnListResult::FAILURE;
const stColumnListResult_eResult stColumnListResult::eResult_MIN;
const stColumnListResult_eResult stColumnListResult::eResult_MAX;
const int stColumnListResult::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stColumnListResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stColumnListResult_ProtoModID_descriptor_;
}
bool stColumnListResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stColumnListResult_ProtoModID stColumnListResult::ModID;
const stColumnListResult_ProtoModID stColumnListResult::ProtoModID_MIN;
const stColumnListResult_ProtoModID stColumnListResult::ProtoModID_MAX;
const int stColumnListResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stColumnListResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stColumnListResult_ProtoFunID_descriptor_;
}
bool stColumnListResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 215:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stColumnListResult_ProtoFunID stColumnListResult::FunID;
const stColumnListResult_ProtoFunID stColumnListResult::ProtoFunID_MIN;
const stColumnListResult_ProtoFunID stColumnListResult::ProtoFunID_MAX;
const int stColumnListResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stColumnListResult::kResultFieldNumber;
const int stColumnListResult::kShopListFieldNumber;
#endif  // !_MSC_VER

stColumnListResult::stColumnListResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stColumnListResult::InitAsDefaultInstance() {
}

stColumnListResult::stColumnListResult(const stColumnListResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stColumnListResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stColumnListResult::~stColumnListResult() {
  SharedDtor();
}

void stColumnListResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stColumnListResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stColumnListResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stColumnListResult_descriptor_;
}

const stColumnListResult& stColumnListResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stColumnListResult* stColumnListResult::default_instance_ = NULL;

stColumnListResult* stColumnListResult::New() const {
  return new stColumnListResult;
}

void stColumnListResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
  }
  shoplist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stColumnListResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Role.stColumnListResult.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Role::stColumnListResult_eResult_IsValid(value)) {
            set_result(static_cast< ::Role::stColumnListResult_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_shopList;
        break;
      }

      // repeated .Role.stShopItem shopList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shopList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_shoplist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_shopList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stColumnListResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Role.stColumnListResult.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // repeated .Role.stShopItem shopList = 2;
  for (int i = 0; i < this->shoplist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->shoplist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stColumnListResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Role.stColumnListResult.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // repeated .Role.stShopItem shopList = 2;
  for (int i = 0; i < this->shoplist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->shoplist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stColumnListResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Role.stColumnListResult.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  // repeated .Role.stShopItem shopList = 2;
  total_size += 1 * this->shoplist_size();
  for (int i = 0; i < this->shoplist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->shoplist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stColumnListResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stColumnListResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stColumnListResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stColumnListResult::MergeFrom(const stColumnListResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  shoplist_.MergeFrom(from.shoplist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stColumnListResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stColumnListResult::CopyFrom(const stColumnListResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stColumnListResult::IsInitialized() const {

  return true;
}

void stColumnListResult::Swap(stColumnListResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    shoplist_.Swap(&other->shoplist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stColumnListResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stColumnListResult_descriptor_;
  metadata.reflection = stColumnListResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqMarketBuyItem_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqMarketBuyItem_ProtoModID_descriptor_;
}
bool stReqMarketBuyItem_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqMarketBuyItem_ProtoModID stReqMarketBuyItem::ModID;
const stReqMarketBuyItem_ProtoModID stReqMarketBuyItem::ProtoModID_MIN;
const stReqMarketBuyItem_ProtoModID stReqMarketBuyItem::ProtoModID_MAX;
const int stReqMarketBuyItem::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqMarketBuyItem_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqMarketBuyItem_ProtoFunID_descriptor_;
}
bool stReqMarketBuyItem_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 216:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqMarketBuyItem_ProtoFunID stReqMarketBuyItem::FunID;
const stReqMarketBuyItem_ProtoFunID stReqMarketBuyItem::ProtoFunID_MIN;
const stReqMarketBuyItem_ProtoFunID stReqMarketBuyItem::ProtoFunID_MAX;
const int stReqMarketBuyItem::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqMarketBuyItem::kTypeFieldNumber;
const int stReqMarketBuyItem::kIndexFieldNumber;
#endif  // !_MSC_VER

stReqMarketBuyItem::stReqMarketBuyItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqMarketBuyItem::InitAsDefaultInstance() {
}

stReqMarketBuyItem::stReqMarketBuyItem(const stReqMarketBuyItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqMarketBuyItem::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqMarketBuyItem::~stReqMarketBuyItem() {
  SharedDtor();
}

void stReqMarketBuyItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqMarketBuyItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqMarketBuyItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqMarketBuyItem_descriptor_;
}

const stReqMarketBuyItem& stReqMarketBuyItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stReqMarketBuyItem* stReqMarketBuyItem::default_instance_ = NULL;

stReqMarketBuyItem* stReqMarketBuyItem::New() const {
  return new stReqMarketBuyItem;
}

void stReqMarketBuyItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    index_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqMarketBuyItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Role.eColumn type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Role::eColumn_IsValid(value)) {
            set_type(static_cast< ::Role::eColumn >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }

      // optional uint32 index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqMarketBuyItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Role.eColumn type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint32 index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqMarketBuyItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Role.eColumn type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional uint32 index = 2;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqMarketBuyItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Role.eColumn type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqMarketBuyItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqMarketBuyItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqMarketBuyItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqMarketBuyItem::MergeFrom(const stReqMarketBuyItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqMarketBuyItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqMarketBuyItem::CopyFrom(const stReqMarketBuyItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqMarketBuyItem::IsInitialized() const {

  return true;
}

void stReqMarketBuyItem::Swap(stReqMarketBuyItem* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqMarketBuyItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqMarketBuyItem_descriptor_;
  metadata.reflection = stReqMarketBuyItem_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stMarketBuyItemResult_BUYRESULT_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stMarketBuyItemResult_BUYRESULT_descriptor_;
}
bool stMarketBuyItemResult_BUYRESULT_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stMarketBuyItemResult_BUYRESULT stMarketBuyItemResult::BUY_SUCCESS;
const stMarketBuyItemResult_BUYRESULT stMarketBuyItemResult::RESOURCE_NOT_ENOUGH;
const stMarketBuyItemResult_BUYRESULT stMarketBuyItemResult::BUY_FULL;
const stMarketBuyItemResult_BUYRESULT stMarketBuyItemResult::ITEM_NOT_EXIST;
const stMarketBuyItemResult_BUYRESULT stMarketBuyItemResult::BUY_OUT;
const stMarketBuyItemResult_BUYRESULT stMarketBuyItemResult::INNER_ERROR;
const stMarketBuyItemResult_BUYRESULT stMarketBuyItemResult::TIME_USE_OUT;
const stMarketBuyItemResult_BUYRESULT stMarketBuyItemResult::BUYRESULT_MIN;
const stMarketBuyItemResult_BUYRESULT stMarketBuyItemResult::BUYRESULT_MAX;
const int stMarketBuyItemResult::BUYRESULT_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stMarketBuyItemResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stMarketBuyItemResult_ProtoModID_descriptor_;
}
bool stMarketBuyItemResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stMarketBuyItemResult_ProtoModID stMarketBuyItemResult::ModID;
const stMarketBuyItemResult_ProtoModID stMarketBuyItemResult::ProtoModID_MIN;
const stMarketBuyItemResult_ProtoModID stMarketBuyItemResult::ProtoModID_MAX;
const int stMarketBuyItemResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stMarketBuyItemResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stMarketBuyItemResult_ProtoFunID_descriptor_;
}
bool stMarketBuyItemResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 217:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stMarketBuyItemResult_ProtoFunID stMarketBuyItemResult::FunID;
const stMarketBuyItemResult_ProtoFunID stMarketBuyItemResult::ProtoFunID_MIN;
const stMarketBuyItemResult_ProtoFunID stMarketBuyItemResult::ProtoFunID_MAX;
const int stMarketBuyItemResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stMarketBuyItemResult::kRetCodeFieldNumber;
const int stMarketBuyItemResult::kShopItemFieldNumber;
#endif  // !_MSC_VER

stMarketBuyItemResult::stMarketBuyItemResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stMarketBuyItemResult::InitAsDefaultInstance() {
  shopitem_ = const_cast< ::Role::stShopItem*>(&::Role::stShopItem::default_instance());
}

stMarketBuyItemResult::stMarketBuyItemResult(const stMarketBuyItemResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stMarketBuyItemResult::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 1;
  shopitem_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stMarketBuyItemResult::~stMarketBuyItemResult() {
  SharedDtor();
}

void stMarketBuyItemResult::SharedDtor() {
  if (this != default_instance_) {
    delete shopitem_;
  }
}

void stMarketBuyItemResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stMarketBuyItemResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stMarketBuyItemResult_descriptor_;
}

const stMarketBuyItemResult& stMarketBuyItemResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stMarketBuyItemResult* stMarketBuyItemResult::default_instance_ = NULL;

stMarketBuyItemResult* stMarketBuyItemResult::New() const {
  return new stMarketBuyItemResult;
}

void stMarketBuyItemResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    retcode_ = 1;
    if (has_shopitem()) {
      if (shopitem_ != NULL) shopitem_->::Role::stShopItem::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stMarketBuyItemResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Role.stMarketBuyItemResult.BUYRESULT retCode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Role::stMarketBuyItemResult_BUYRESULT_IsValid(value)) {
            set_retcode(static_cast< ::Role::stMarketBuyItemResult_BUYRESULT >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_shopItem;
        break;
      }

      // optional .Role.stShopItem shopItem = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shopItem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shopitem()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stMarketBuyItemResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Role.stMarketBuyItemResult.BUYRESULT retCode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->retcode(), output);
  }

  // optional .Role.stShopItem shopItem = 2;
  if (has_shopitem()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->shopitem(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stMarketBuyItemResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Role.stMarketBuyItemResult.BUYRESULT retCode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->retcode(), target);
  }

  // optional .Role.stShopItem shopItem = 2;
  if (has_shopitem()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->shopitem(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stMarketBuyItemResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Role.stMarketBuyItemResult.BUYRESULT retCode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->retcode());
    }

    // optional .Role.stShopItem shopItem = 2;
    if (has_shopitem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shopitem());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stMarketBuyItemResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stMarketBuyItemResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stMarketBuyItemResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stMarketBuyItemResult::MergeFrom(const stMarketBuyItemResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_shopitem()) {
      mutable_shopitem()->::Role::stShopItem::MergeFrom(from.shopitem());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stMarketBuyItemResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stMarketBuyItemResult::CopyFrom(const stMarketBuyItemResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stMarketBuyItemResult::IsInitialized() const {

  return true;
}

void stMarketBuyItemResult::Swap(stMarketBuyItemResult* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(shopitem_, other->shopitem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stMarketBuyItemResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stMarketBuyItemResult_descriptor_;
  metadata.reflection = stMarketBuyItemResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqOpenWindow_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqOpenWindow_ProtoModID_descriptor_;
}
bool stReqOpenWindow_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqOpenWindow_ProtoModID stReqOpenWindow::ModID;
const stReqOpenWindow_ProtoModID stReqOpenWindow::ProtoModID_MIN;
const stReqOpenWindow_ProtoModID stReqOpenWindow::ProtoModID_MAX;
const int stReqOpenWindow::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqOpenWindow_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqOpenWindow_ProtoFunID_descriptor_;
}
bool stReqOpenWindow_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 218:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqOpenWindow_ProtoFunID stReqOpenWindow::FunID;
const stReqOpenWindow_ProtoFunID stReqOpenWindow::ProtoFunID_MIN;
const stReqOpenWindow_ProtoFunID stReqOpenWindow::ProtoFunID_MAX;
const int stReqOpenWindow::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqOpenWindow::kCharIdFieldNumber;
#endif  // !_MSC_VER

stReqOpenWindow::stReqOpenWindow()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqOpenWindow::InitAsDefaultInstance() {
}

stReqOpenWindow::stReqOpenWindow(const stReqOpenWindow& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqOpenWindow::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqOpenWindow::~stReqOpenWindow() {
  SharedDtor();
}

void stReqOpenWindow::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqOpenWindow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqOpenWindow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqOpenWindow_descriptor_;
}

const stReqOpenWindow& stReqOpenWindow::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stReqOpenWindow* stReqOpenWindow::default_instance_ = NULL;

stReqOpenWindow* stReqOpenWindow::New() const {
  return new stReqOpenWindow;
}

void stReqOpenWindow::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqOpenWindow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqOpenWindow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charId = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqOpenWindow::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charId = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqOpenWindow::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charId = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqOpenWindow::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqOpenWindow* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqOpenWindow*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqOpenWindow::MergeFrom(const stReqOpenWindow& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqOpenWindow::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqOpenWindow::CopyFrom(const stReqOpenWindow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqOpenWindow::IsInitialized() const {

  return true;
}

void stReqOpenWindow::Swap(stReqOpenWindow* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqOpenWindow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqOpenWindow_descriptor_;
  metadata.reflection = stReqOpenWindow_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stOpenWindowResult_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stOpenWindowResult_eResult_descriptor_;
}
bool stOpenWindowResult_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stOpenWindowResult_eResult stOpenWindowResult::OPEN_SUCCESS;
const stOpenWindowResult_eResult stOpenWindowResult::TIME_LIMIT;
const stOpenWindowResult_eResult stOpenWindowResult::eResult_MIN;
const stOpenWindowResult_eResult stOpenWindowResult::eResult_MAX;
const int stOpenWindowResult::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stOpenWindowResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stOpenWindowResult_ProtoModID_descriptor_;
}
bool stOpenWindowResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stOpenWindowResult_ProtoModID stOpenWindowResult::ModID;
const stOpenWindowResult_ProtoModID stOpenWindowResult::ProtoModID_MIN;
const stOpenWindowResult_ProtoModID stOpenWindowResult::ProtoModID_MAX;
const int stOpenWindowResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stOpenWindowResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stOpenWindowResult_ProtoFunID_descriptor_;
}
bool stOpenWindowResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 219:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stOpenWindowResult_ProtoFunID stOpenWindowResult::FunID;
const stOpenWindowResult_ProtoFunID stOpenWindowResult::ProtoFunID_MIN;
const stOpenWindowResult_ProtoFunID stOpenWindowResult::ProtoFunID_MAX;
const int stOpenWindowResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stOpenWindowResult::kResultFieldNumber;
const int stOpenWindowResult::kLvFieldNumber;
#endif  // !_MSC_VER

stOpenWindowResult::stOpenWindowResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stOpenWindowResult::InitAsDefaultInstance() {
}

stOpenWindowResult::stOpenWindowResult(const stOpenWindowResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stOpenWindowResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  lv_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stOpenWindowResult::~stOpenWindowResult() {
  SharedDtor();
}

void stOpenWindowResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stOpenWindowResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stOpenWindowResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stOpenWindowResult_descriptor_;
}

const stOpenWindowResult& stOpenWindowResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stOpenWindowResult* stOpenWindowResult::default_instance_ = NULL;

stOpenWindowResult* stOpenWindowResult::New() const {
  return new stOpenWindowResult;
}

void stOpenWindowResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
    lv_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stOpenWindowResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Role.stOpenWindowResult.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Role::stOpenWindowResult_eResult_IsValid(value)) {
            set_result(static_cast< ::Role::stOpenWindowResult_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lv;
        break;
      }

      // optional uint32 lv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stOpenWindowResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Role.stOpenWindowResult.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional uint32 lv = 2;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->lv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stOpenWindowResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Role.stOpenWindowResult.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional uint32 lv = 2;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->lv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stOpenWindowResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Role.stOpenWindowResult.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional uint32 lv = 2;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lv());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stOpenWindowResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stOpenWindowResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stOpenWindowResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stOpenWindowResult::MergeFrom(const stOpenWindowResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stOpenWindowResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stOpenWindowResult::CopyFrom(const stOpenWindowResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stOpenWindowResult::IsInitialized() const {

  return true;
}

void stOpenWindowResult::Swap(stOpenWindowResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(lv_, other->lv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stOpenWindowResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stOpenWindowResult_descriptor_;
  metadata.reflection = stOpenWindowResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqRefreshList_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqRefreshList_ProtoModID_descriptor_;
}
bool stReqRefreshList_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqRefreshList_ProtoModID stReqRefreshList::ModID;
const stReqRefreshList_ProtoModID stReqRefreshList::ProtoModID_MIN;
const stReqRefreshList_ProtoModID stReqRefreshList::ProtoModID_MAX;
const int stReqRefreshList::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqRefreshList_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqRefreshList_ProtoFunID_descriptor_;
}
bool stReqRefreshList_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 220:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqRefreshList_ProtoFunID stReqRefreshList::FunID;
const stReqRefreshList_ProtoFunID stReqRefreshList::ProtoFunID_MIN;
const stReqRefreshList_ProtoFunID stReqRefreshList::ProtoFunID_MAX;
const int stReqRefreshList::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqRefreshList::kCharIdFieldNumber;
#endif  // !_MSC_VER

stReqRefreshList::stReqRefreshList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqRefreshList::InitAsDefaultInstance() {
}

stReqRefreshList::stReqRefreshList(const stReqRefreshList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqRefreshList::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqRefreshList::~stReqRefreshList() {
  SharedDtor();
}

void stReqRefreshList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqRefreshList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqRefreshList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqRefreshList_descriptor_;
}

const stReqRefreshList& stReqRefreshList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stReqRefreshList* stReqRefreshList::default_instance_ = NULL;

stReqRefreshList* stReqRefreshList::New() const {
  return new stReqRefreshList;
}

void stReqRefreshList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqRefreshList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqRefreshList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charId = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqRefreshList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charId = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqRefreshList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charId = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqRefreshList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqRefreshList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqRefreshList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqRefreshList::MergeFrom(const stReqRefreshList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqRefreshList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqRefreshList::CopyFrom(const stReqRefreshList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqRefreshList::IsInitialized() const {

  return true;
}

void stReqRefreshList::Swap(stReqRefreshList* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqRefreshList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqRefreshList_descriptor_;
  metadata.reflection = stReqRefreshList_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRefreshListResult_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRefreshListResult_eResult_descriptor_;
}
bool stRefreshListResult_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRefreshListResult_eResult stRefreshListResult::SUCCESS;
const stRefreshListResult_eResult stRefreshListResult::INNER_ERROR;
const stRefreshListResult_eResult stRefreshListResult::RESOURCE_NOT_ENOUGH;
const stRefreshListResult_eResult stRefreshListResult::SHOP_NOT_EXIST;
const stRefreshListResult_eResult stRefreshListResult::REFRESH_LIMIT;
const stRefreshListResult_eResult stRefreshListResult::eResult_MIN;
const stRefreshListResult_eResult stRefreshListResult::eResult_MAX;
const int stRefreshListResult::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRefreshListResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRefreshListResult_ProtoModID_descriptor_;
}
bool stRefreshListResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRefreshListResult_ProtoModID stRefreshListResult::ModID;
const stRefreshListResult_ProtoModID stRefreshListResult::ProtoModID_MIN;
const stRefreshListResult_ProtoModID stRefreshListResult::ProtoModID_MAX;
const int stRefreshListResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRefreshListResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRefreshListResult_ProtoFunID_descriptor_;
}
bool stRefreshListResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 221:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRefreshListResult_ProtoFunID stRefreshListResult::FunID;
const stRefreshListResult_ProtoFunID stRefreshListResult::ProtoFunID_MIN;
const stRefreshListResult_ProtoFunID stRefreshListResult::ProtoFunID_MAX;
const int stRefreshListResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRefreshListResult::kResultFieldNumber;
#endif  // !_MSC_VER

stRefreshListResult::stRefreshListResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRefreshListResult::InitAsDefaultInstance() {
}

stRefreshListResult::stRefreshListResult(const stRefreshListResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRefreshListResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRefreshListResult::~stRefreshListResult() {
  SharedDtor();
}

void stRefreshListResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRefreshListResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRefreshListResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRefreshListResult_descriptor_;
}

const stRefreshListResult& stRefreshListResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stRefreshListResult* stRefreshListResult::default_instance_ = NULL;

stRefreshListResult* stRefreshListResult::New() const {
  return new stRefreshListResult;
}

void stRefreshListResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRefreshListResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Role.stRefreshListResult.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Role::stRefreshListResult_eResult_IsValid(value)) {
            set_result(static_cast< ::Role::stRefreshListResult_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRefreshListResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Role.stRefreshListResult.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRefreshListResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Role.stRefreshListResult.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRefreshListResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Role.stRefreshListResult.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRefreshListResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRefreshListResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRefreshListResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRefreshListResult::MergeFrom(const stRefreshListResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRefreshListResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRefreshListResult::CopyFrom(const stRefreshListResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRefreshListResult::IsInitialized() const {

  return true;
}

void stRefreshListResult::Swap(stRefreshListResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRefreshListResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRefreshListResult_descriptor_;
  metadata.reflection = stRefreshListResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqAKeyRaiseUserSkillLv_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqAKeyRaiseUserSkillLv_ProtoModID_descriptor_;
}
bool stReqAKeyRaiseUserSkillLv_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqAKeyRaiseUserSkillLv_ProtoModID stReqAKeyRaiseUserSkillLv::ModID;
const stReqAKeyRaiseUserSkillLv_ProtoModID stReqAKeyRaiseUserSkillLv::ProtoModID_MIN;
const stReqAKeyRaiseUserSkillLv_ProtoModID stReqAKeyRaiseUserSkillLv::ProtoModID_MAX;
const int stReqAKeyRaiseUserSkillLv::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqAKeyRaiseUserSkillLv_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqAKeyRaiseUserSkillLv_ProtoFunID_descriptor_;
}
bool stReqAKeyRaiseUserSkillLv_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 222:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqAKeyRaiseUserSkillLv_ProtoFunID stReqAKeyRaiseUserSkillLv::FunID;
const stReqAKeyRaiseUserSkillLv_ProtoFunID stReqAKeyRaiseUserSkillLv::ProtoFunID_MIN;
const stReqAKeyRaiseUserSkillLv_ProtoFunID stReqAKeyRaiseUserSkillLv::ProtoFunID_MAX;
const int stReqAKeyRaiseUserSkillLv::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqAKeyRaiseUserSkillLv::kSkillIDFieldNumber;
#endif  // !_MSC_VER

stReqAKeyRaiseUserSkillLv::stReqAKeyRaiseUserSkillLv()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqAKeyRaiseUserSkillLv::InitAsDefaultInstance() {
}

stReqAKeyRaiseUserSkillLv::stReqAKeyRaiseUserSkillLv(const stReqAKeyRaiseUserSkillLv& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqAKeyRaiseUserSkillLv::SharedCtor() {
  _cached_size_ = 0;
  skillid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqAKeyRaiseUserSkillLv::~stReqAKeyRaiseUserSkillLv() {
  SharedDtor();
}

void stReqAKeyRaiseUserSkillLv::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqAKeyRaiseUserSkillLv::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqAKeyRaiseUserSkillLv::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqAKeyRaiseUserSkillLv_descriptor_;
}

const stReqAKeyRaiseUserSkillLv& stReqAKeyRaiseUserSkillLv::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stReqAKeyRaiseUserSkillLv* stReqAKeyRaiseUserSkillLv::default_instance_ = NULL;

stReqAKeyRaiseUserSkillLv* stReqAKeyRaiseUserSkillLv::New() const {
  return new stReqAKeyRaiseUserSkillLv;
}

void stReqAKeyRaiseUserSkillLv::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skillid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqAKeyRaiseUserSkillLv::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 skillID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqAKeyRaiseUserSkillLv::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 skillID = 1;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->skillid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqAKeyRaiseUserSkillLv::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 skillID = 1;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->skillid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqAKeyRaiseUserSkillLv::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 skillID = 1;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqAKeyRaiseUserSkillLv::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqAKeyRaiseUserSkillLv* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqAKeyRaiseUserSkillLv*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqAKeyRaiseUserSkillLv::MergeFrom(const stReqAKeyRaiseUserSkillLv& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqAKeyRaiseUserSkillLv::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqAKeyRaiseUserSkillLv::CopyFrom(const stReqAKeyRaiseUserSkillLv& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqAKeyRaiseUserSkillLv::IsInitialized() const {

  return true;
}

void stReqAKeyRaiseUserSkillLv::Swap(stReqAKeyRaiseUserSkillLv* other) {
  if (other != this) {
    std::swap(skillid_, other->skillid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqAKeyRaiseUserSkillLv::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqAKeyRaiseUserSkillLv_descriptor_;
  metadata.reflection = stReqAKeyRaiseUserSkillLv_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stAKeyRaiseUserSkillLvResult_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stAKeyRaiseUserSkillLvResult_eResult_descriptor_;
}
bool stAKeyRaiseUserSkillLvResult_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stAKeyRaiseUserSkillLvResult_eResult stAKeyRaiseUserSkillLvResult::eSuccess;
const stAKeyRaiseUserSkillLvResult_eResult stAKeyRaiseUserSkillLvResult::eSkill_Not_Exist;
const stAKeyRaiseUserSkillLvResult_eResult stAKeyRaiseUserSkillLvResult::eInner_Cfg_Error;
const stAKeyRaiseUserSkillLvResult_eResult stAKeyRaiseUserSkillLvResult::eGoldCoin_Not_Enough;
const stAKeyRaiseUserSkillLvResult_eResult stAKeyRaiseUserSkillLvResult::eRole_Lv_Limit;
const stAKeyRaiseUserSkillLvResult_eResult stAKeyRaiseUserSkillLvResult::eResult_MIN;
const stAKeyRaiseUserSkillLvResult_eResult stAKeyRaiseUserSkillLvResult::eResult_MAX;
const int stAKeyRaiseUserSkillLvResult::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stAKeyRaiseUserSkillLvResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stAKeyRaiseUserSkillLvResult_ProtoModID_descriptor_;
}
bool stAKeyRaiseUserSkillLvResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stAKeyRaiseUserSkillLvResult_ProtoModID stAKeyRaiseUserSkillLvResult::ModID;
const stAKeyRaiseUserSkillLvResult_ProtoModID stAKeyRaiseUserSkillLvResult::ProtoModID_MIN;
const stAKeyRaiseUserSkillLvResult_ProtoModID stAKeyRaiseUserSkillLvResult::ProtoModID_MAX;
const int stAKeyRaiseUserSkillLvResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stAKeyRaiseUserSkillLvResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stAKeyRaiseUserSkillLvResult_ProtoFunID_descriptor_;
}
bool stAKeyRaiseUserSkillLvResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 223:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stAKeyRaiseUserSkillLvResult_ProtoFunID stAKeyRaiseUserSkillLvResult::FunID;
const stAKeyRaiseUserSkillLvResult_ProtoFunID stAKeyRaiseUserSkillLvResult::ProtoFunID_MIN;
const stAKeyRaiseUserSkillLvResult_ProtoFunID stAKeyRaiseUserSkillLvResult::ProtoFunID_MAX;
const int stAKeyRaiseUserSkillLvResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stAKeyRaiseUserSkillLvResult::kResultFieldNumber;
const int stAKeyRaiseUserSkillLvResult::kSkillIDFieldNumber;
const int stAKeyRaiseUserSkillLvResult::kSkillLvFieldNumber;
#endif  // !_MSC_VER

stAKeyRaiseUserSkillLvResult::stAKeyRaiseUserSkillLvResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stAKeyRaiseUserSkillLvResult::InitAsDefaultInstance() {
}

stAKeyRaiseUserSkillLvResult::stAKeyRaiseUserSkillLvResult(const stAKeyRaiseUserSkillLvResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stAKeyRaiseUserSkillLvResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  skillid_ = 0u;
  skilllv_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stAKeyRaiseUserSkillLvResult::~stAKeyRaiseUserSkillLvResult() {
  SharedDtor();
}

void stAKeyRaiseUserSkillLvResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stAKeyRaiseUserSkillLvResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stAKeyRaiseUserSkillLvResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stAKeyRaiseUserSkillLvResult_descriptor_;
}

const stAKeyRaiseUserSkillLvResult& stAKeyRaiseUserSkillLvResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stAKeyRaiseUserSkillLvResult* stAKeyRaiseUserSkillLvResult::default_instance_ = NULL;

stAKeyRaiseUserSkillLvResult* stAKeyRaiseUserSkillLvResult::New() const {
  return new stAKeyRaiseUserSkillLvResult;
}

void stAKeyRaiseUserSkillLvResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
    skillid_ = 0u;
    skilllv_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stAKeyRaiseUserSkillLvResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Role.stAKeyRaiseUserSkillLvResult.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Role::stAKeyRaiseUserSkillLvResult_eResult_IsValid(value)) {
            set_result(static_cast< ::Role::stAKeyRaiseUserSkillLvResult_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skillID;
        break;
      }

      // optional uint32 skillID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_skillLv;
        break;
      }

      // optional uint32 skillLv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skilllv_)));
          set_has_skilllv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stAKeyRaiseUserSkillLvResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Role.stAKeyRaiseUserSkillLvResult.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional uint32 skillID = 2;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->skillid(), output);
  }

  // optional uint32 skillLv = 3;
  if (has_skilllv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->skilllv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stAKeyRaiseUserSkillLvResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Role.stAKeyRaiseUserSkillLvResult.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional uint32 skillID = 2;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->skillid(), target);
  }

  // optional uint32 skillLv = 3;
  if (has_skilllv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->skilllv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stAKeyRaiseUserSkillLvResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Role.stAKeyRaiseUserSkillLvResult.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional uint32 skillID = 2;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillid());
    }

    // optional uint32 skillLv = 3;
    if (has_skilllv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skilllv());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stAKeyRaiseUserSkillLvResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stAKeyRaiseUserSkillLvResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stAKeyRaiseUserSkillLvResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stAKeyRaiseUserSkillLvResult::MergeFrom(const stAKeyRaiseUserSkillLvResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_skilllv()) {
      set_skilllv(from.skilllv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stAKeyRaiseUserSkillLvResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stAKeyRaiseUserSkillLvResult::CopyFrom(const stAKeyRaiseUserSkillLvResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stAKeyRaiseUserSkillLvResult::IsInitialized() const {

  return true;
}

void stAKeyRaiseUserSkillLvResult::Swap(stAKeyRaiseUserSkillLvResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(skillid_, other->skillid_);
    std::swap(skilllv_, other->skilllv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stAKeyRaiseUserSkillLvResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stAKeyRaiseUserSkillLvResult_descriptor_;
  metadata.reflection = stAKeyRaiseUserSkillLvResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stMountItemInfo::kBagTypeFieldNumber;
const int stMountItemInfo::kPosFieldNumber;
const int stMountItemInfo::kInstanceIDFieldNumber;
#endif  // !_MSC_VER

stMountItemInfo::stMountItemInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stMountItemInfo::InitAsDefaultInstance() {
}

stMountItemInfo::stMountItemInfo(const stMountItemInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stMountItemInfo::SharedCtor() {
  _cached_size_ = 0;
  bagtype_ = 0u;
  pos_ = 0u;
  instanceid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stMountItemInfo::~stMountItemInfo() {
  SharedDtor();
}

void stMountItemInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stMountItemInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stMountItemInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stMountItemInfo_descriptor_;
}

const stMountItemInfo& stMountItemInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stMountItemInfo* stMountItemInfo::default_instance_ = NULL;

stMountItemInfo* stMountItemInfo::New() const {
  return new stMountItemInfo;
}

void stMountItemInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bagtype_ = 0u;
    pos_ = 0u;
    instanceid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stMountItemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 bagType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bagtype_)));
          set_has_bagtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pos;
        break;
      }

      // optional uint32 pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_instanceID;
        break;
      }

      // optional uint64 instanceID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_instanceID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &instanceid_)));
          set_has_instanceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stMountItemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 bagType = 1;
  if (has_bagtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bagtype(), output);
  }

  // optional uint32 pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pos(), output);
  }

  // optional uint64 instanceID = 3;
  if (has_instanceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->instanceid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stMountItemInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 bagType = 1;
  if (has_bagtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bagtype(), target);
  }

  // optional uint32 pos = 2;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pos(), target);
  }

  // optional uint64 instanceID = 3;
  if (has_instanceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->instanceid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stMountItemInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 bagType = 1;
    if (has_bagtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bagtype());
    }

    // optional uint32 pos = 2;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

    // optional uint64 instanceID = 3;
    if (has_instanceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->instanceid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stMountItemInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stMountItemInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stMountItemInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stMountItemInfo::MergeFrom(const stMountItemInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bagtype()) {
      set_bagtype(from.bagtype());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_instanceid()) {
      set_instanceid(from.instanceid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stMountItemInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stMountItemInfo::CopyFrom(const stMountItemInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stMountItemInfo::IsInitialized() const {

  return true;
}

void stMountItemInfo::Swap(stMountItemInfo* other) {
  if (other != this) {
    std::swap(bagtype_, other->bagtype_);
    std::swap(pos_, other->pos_);
    std::swap(instanceid_, other->instanceid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stMountItemInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stMountItemInfo_descriptor_;
  metadata.reflection = stMountItemInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqStoneSynthesis_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqStoneSynthesis_ProtoModID_descriptor_;
}
bool stReqStoneSynthesis_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqStoneSynthesis_ProtoModID stReqStoneSynthesis::ModID;
const stReqStoneSynthesis_ProtoModID stReqStoneSynthesis::ProtoModID_MIN;
const stReqStoneSynthesis_ProtoModID stReqStoneSynthesis::ProtoModID_MAX;
const int stReqStoneSynthesis::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqStoneSynthesis_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqStoneSynthesis_ProtoFunID_descriptor_;
}
bool stReqStoneSynthesis_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 224:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqStoneSynthesis_ProtoFunID stReqStoneSynthesis::FunID;
const stReqStoneSynthesis_ProtoFunID stReqStoneSynthesis::ProtoFunID_MIN;
const stReqStoneSynthesis_ProtoFunID stReqStoneSynthesis::ProtoFunID_MAX;
const int stReqStoneSynthesis::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqStoneSynthesis::kItemsFieldNumber;
#endif  // !_MSC_VER

stReqStoneSynthesis::stReqStoneSynthesis()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqStoneSynthesis::InitAsDefaultInstance() {
}

stReqStoneSynthesis::stReqStoneSynthesis(const stReqStoneSynthesis& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqStoneSynthesis::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqStoneSynthesis::~stReqStoneSynthesis() {
  SharedDtor();
}

void stReqStoneSynthesis::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqStoneSynthesis::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqStoneSynthesis::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqStoneSynthesis_descriptor_;
}

const stReqStoneSynthesis& stReqStoneSynthesis::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stReqStoneSynthesis* stReqStoneSynthesis::default_instance_ = NULL;

stReqStoneSynthesis* stReqStoneSynthesis::New() const {
  return new stReqStoneSynthesis;
}

void stReqStoneSynthesis::Clear() {
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqStoneSynthesis::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Role.stMountItemInfo items = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqStoneSynthesis::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Role.stMountItemInfo items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqStoneSynthesis::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Role.stMountItemInfo items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqStoneSynthesis::ByteSize() const {
  int total_size = 0;

  // repeated .Role.stMountItemInfo items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqStoneSynthesis::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqStoneSynthesis* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqStoneSynthesis*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqStoneSynthesis::MergeFrom(const stReqStoneSynthesis& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqStoneSynthesis::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqStoneSynthesis::CopyFrom(const stReqStoneSynthesis& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqStoneSynthesis::IsInitialized() const {

  return true;
}

void stReqStoneSynthesis::Swap(stReqStoneSynthesis* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqStoneSynthesis::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqStoneSynthesis_descriptor_;
  metadata.reflection = stReqStoneSynthesis_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stStoneSynthesisResult_Result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stStoneSynthesisResult_Result_descriptor_;
}
bool stStoneSynthesisResult_Result_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stStoneSynthesisResult_Result stStoneSynthesisResult::eSUCCESS;
const stStoneSynthesisResult_Result stStoneSynthesisResult::eFAILURE;
const stStoneSynthesisResult_Result stStoneSynthesisResult::eBAG_FULL;
const stStoneSynthesisResult_Result stStoneSynthesisResult::eRESOURCE_NOT_ENOUGH;
const stStoneSynthesisResult_Result stStoneSynthesisResult::Result_MIN;
const stStoneSynthesisResult_Result stStoneSynthesisResult::Result_MAX;
const int stStoneSynthesisResult::Result_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stStoneSynthesisResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stStoneSynthesisResult_ProtoModID_descriptor_;
}
bool stStoneSynthesisResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stStoneSynthesisResult_ProtoModID stStoneSynthesisResult::ModID;
const stStoneSynthesisResult_ProtoModID stStoneSynthesisResult::ProtoModID_MIN;
const stStoneSynthesisResult_ProtoModID stStoneSynthesisResult::ProtoModID_MAX;
const int stStoneSynthesisResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stStoneSynthesisResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stStoneSynthesisResult_ProtoFunID_descriptor_;
}
bool stStoneSynthesisResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 225:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stStoneSynthesisResult_ProtoFunID stStoneSynthesisResult::FunID;
const stStoneSynthesisResult_ProtoFunID stStoneSynthesisResult::ProtoFunID_MIN;
const stStoneSynthesisResult_ProtoFunID stStoneSynthesisResult::ProtoFunID_MAX;
const int stStoneSynthesisResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stStoneSynthesisResult::kResultFieldNumber;
const int stStoneSynthesisResult::kItemIDFieldNumber;
#endif  // !_MSC_VER

stStoneSynthesisResult::stStoneSynthesisResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stStoneSynthesisResult::InitAsDefaultInstance() {
}

stStoneSynthesisResult::stStoneSynthesisResult(const stStoneSynthesisResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stStoneSynthesisResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  itemid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stStoneSynthesisResult::~stStoneSynthesisResult() {
  SharedDtor();
}

void stStoneSynthesisResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stStoneSynthesisResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stStoneSynthesisResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stStoneSynthesisResult_descriptor_;
}

const stStoneSynthesisResult& stStoneSynthesisResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stStoneSynthesisResult* stStoneSynthesisResult::default_instance_ = NULL;

stStoneSynthesisResult* stStoneSynthesisResult::New() const {
  return new stStoneSynthesisResult;
}

void stStoneSynthesisResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
    itemid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stStoneSynthesisResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Role.stStoneSynthesisResult.Result result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Role::stStoneSynthesisResult_Result_IsValid(value)) {
            set_result(static_cast< ::Role::stStoneSynthesisResult_Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemID;
        break;
      }

      // optional uint32 itemID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stStoneSynthesisResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Role.stStoneSynthesisResult.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional uint32 itemID = 2;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->itemid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stStoneSynthesisResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Role.stStoneSynthesisResult.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional uint32 itemID = 2;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->itemid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stStoneSynthesisResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Role.stStoneSynthesisResult.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional uint32 itemID = 2;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stStoneSynthesisResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stStoneSynthesisResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stStoneSynthesisResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stStoneSynthesisResult::MergeFrom(const stStoneSynthesisResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stStoneSynthesisResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stStoneSynthesisResult::CopyFrom(const stStoneSynthesisResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stStoneSynthesisResult::IsInitialized() const {

  return true;
}

void stStoneSynthesisResult::Swap(stStoneSynthesisResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(itemid_, other->itemid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stStoneSynthesisResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stStoneSynthesisResult_descriptor_;
  metadata.reflection = stStoneSynthesisResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqStoneEvolvement_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqStoneEvolvement_ProtoModID_descriptor_;
}
bool stReqStoneEvolvement_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqStoneEvolvement_ProtoModID stReqStoneEvolvement::ModID;
const stReqStoneEvolvement_ProtoModID stReqStoneEvolvement::ProtoModID_MIN;
const stReqStoneEvolvement_ProtoModID stReqStoneEvolvement::ProtoModID_MAX;
const int stReqStoneEvolvement::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqStoneEvolvement_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqStoneEvolvement_ProtoFunID_descriptor_;
}
bool stReqStoneEvolvement_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 226:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqStoneEvolvement_ProtoFunID stReqStoneEvolvement::FunID;
const stReqStoneEvolvement_ProtoFunID stReqStoneEvolvement::ProtoFunID_MIN;
const stReqStoneEvolvement_ProtoFunID stReqStoneEvolvement::ProtoFunID_MAX;
const int stReqStoneEvolvement::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqStoneEvolvement::kItemsFieldNumber;
#endif  // !_MSC_VER

stReqStoneEvolvement::stReqStoneEvolvement()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqStoneEvolvement::InitAsDefaultInstance() {
}

stReqStoneEvolvement::stReqStoneEvolvement(const stReqStoneEvolvement& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqStoneEvolvement::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqStoneEvolvement::~stReqStoneEvolvement() {
  SharedDtor();
}

void stReqStoneEvolvement::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqStoneEvolvement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqStoneEvolvement::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqStoneEvolvement_descriptor_;
}

const stReqStoneEvolvement& stReqStoneEvolvement::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stReqStoneEvolvement* stReqStoneEvolvement::default_instance_ = NULL;

stReqStoneEvolvement* stReqStoneEvolvement::New() const {
  return new stReqStoneEvolvement;
}

void stReqStoneEvolvement::Clear() {
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqStoneEvolvement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Role.stMountItemInfo items = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqStoneEvolvement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Role.stMountItemInfo items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqStoneEvolvement::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Role.stMountItemInfo items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqStoneEvolvement::ByteSize() const {
  int total_size = 0;

  // repeated .Role.stMountItemInfo items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqStoneEvolvement::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqStoneEvolvement* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqStoneEvolvement*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqStoneEvolvement::MergeFrom(const stReqStoneEvolvement& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqStoneEvolvement::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqStoneEvolvement::CopyFrom(const stReqStoneEvolvement& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqStoneEvolvement::IsInitialized() const {

  return true;
}

void stReqStoneEvolvement::Swap(stReqStoneEvolvement* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqStoneEvolvement::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqStoneEvolvement_descriptor_;
  metadata.reflection = stReqStoneEvolvement_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stStoneEvolvementResult_Result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stStoneEvolvementResult_Result_descriptor_;
}
bool stStoneEvolvementResult_Result_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stStoneEvolvementResult_Result stStoneEvolvementResult::eSUCCESS;
const stStoneEvolvementResult_Result stStoneEvolvementResult::eFAILURE;
const stStoneEvolvementResult_Result stStoneEvolvementResult::eBAG_FULL;
const stStoneEvolvementResult_Result stStoneEvolvementResult::eRESOURCE_NOT_ENOUGH;
const stStoneEvolvementResult_Result stStoneEvolvementResult::Result_MIN;
const stStoneEvolvementResult_Result stStoneEvolvementResult::Result_MAX;
const int stStoneEvolvementResult::Result_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stStoneEvolvementResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stStoneEvolvementResult_ProtoModID_descriptor_;
}
bool stStoneEvolvementResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stStoneEvolvementResult_ProtoModID stStoneEvolvementResult::ModID;
const stStoneEvolvementResult_ProtoModID stStoneEvolvementResult::ProtoModID_MIN;
const stStoneEvolvementResult_ProtoModID stStoneEvolvementResult::ProtoModID_MAX;
const int stStoneEvolvementResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stStoneEvolvementResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stStoneEvolvementResult_ProtoFunID_descriptor_;
}
bool stStoneEvolvementResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 227:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stStoneEvolvementResult_ProtoFunID stStoneEvolvementResult::FunID;
const stStoneEvolvementResult_ProtoFunID stStoneEvolvementResult::ProtoFunID_MIN;
const stStoneEvolvementResult_ProtoFunID stStoneEvolvementResult::ProtoFunID_MAX;
const int stStoneEvolvementResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stStoneEvolvementResult::kResultFieldNumber;
const int stStoneEvolvementResult::kItemIDFieldNumber;
#endif  // !_MSC_VER

stStoneEvolvementResult::stStoneEvolvementResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stStoneEvolvementResult::InitAsDefaultInstance() {
}

stStoneEvolvementResult::stStoneEvolvementResult(const stStoneEvolvementResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stStoneEvolvementResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  itemid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stStoneEvolvementResult::~stStoneEvolvementResult() {
  SharedDtor();
}

void stStoneEvolvementResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stStoneEvolvementResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stStoneEvolvementResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stStoneEvolvementResult_descriptor_;
}

const stStoneEvolvementResult& stStoneEvolvementResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stStoneEvolvementResult* stStoneEvolvementResult::default_instance_ = NULL;

stStoneEvolvementResult* stStoneEvolvementResult::New() const {
  return new stStoneEvolvementResult;
}

void stStoneEvolvementResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
    itemid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stStoneEvolvementResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Role.stStoneEvolvementResult.Result result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Role::stStoneEvolvementResult_Result_IsValid(value)) {
            set_result(static_cast< ::Role::stStoneEvolvementResult_Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemID;
        break;
      }

      // optional uint32 itemID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stStoneEvolvementResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Role.stStoneEvolvementResult.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional uint32 itemID = 2;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->itemid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stStoneEvolvementResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Role.stStoneEvolvementResult.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional uint32 itemID = 2;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->itemid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stStoneEvolvementResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Role.stStoneEvolvementResult.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional uint32 itemID = 2;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stStoneEvolvementResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stStoneEvolvementResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stStoneEvolvementResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stStoneEvolvementResult::MergeFrom(const stStoneEvolvementResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stStoneEvolvementResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stStoneEvolvementResult::CopyFrom(const stStoneEvolvementResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stStoneEvolvementResult::IsInitialized() const {

  return true;
}

void stStoneEvolvementResult::Swap(stStoneEvolvementResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(itemid_, other->itemid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stStoneEvolvementResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stStoneEvolvementResult_descriptor_;
  metadata.reflection = stStoneEvolvementResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqStoneProp_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqStoneProp_ProtoModID_descriptor_;
}
bool stReqStoneProp_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqStoneProp_ProtoModID stReqStoneProp::ModID;
const stReqStoneProp_ProtoModID stReqStoneProp::ProtoModID_MIN;
const stReqStoneProp_ProtoModID stReqStoneProp::ProtoModID_MAX;
const int stReqStoneProp::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqStoneProp_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqStoneProp_ProtoFunID_descriptor_;
}
bool stReqStoneProp_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 228:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqStoneProp_ProtoFunID stReqStoneProp::FunID;
const stReqStoneProp_ProtoFunID stReqStoneProp::ProtoFunID_MIN;
const stReqStoneProp_ProtoFunID stReqStoneProp::ProtoFunID_MAX;
const int stReqStoneProp::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqStoneProp::kCharIDFieldNumber;
#endif  // !_MSC_VER

stReqStoneProp::stReqStoneProp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqStoneProp::InitAsDefaultInstance() {
}

stReqStoneProp::stReqStoneProp(const stReqStoneProp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqStoneProp::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqStoneProp::~stReqStoneProp() {
  SharedDtor();
}

void stReqStoneProp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqStoneProp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqStoneProp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqStoneProp_descriptor_;
}

const stReqStoneProp& stReqStoneProp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stReqStoneProp* stReqStoneProp::default_instance_ = NULL;

stReqStoneProp* stReqStoneProp::New() const {
  return new stReqStoneProp;
}

void stReqStoneProp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqStoneProp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqStoneProp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqStoneProp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqStoneProp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqStoneProp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqStoneProp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqStoneProp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqStoneProp::MergeFrom(const stReqStoneProp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqStoneProp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqStoneProp::CopyFrom(const stReqStoneProp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqStoneProp::IsInitialized() const {

  return true;
}

void stReqStoneProp::Swap(stReqStoneProp* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqStoneProp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqStoneProp_descriptor_;
  metadata.reflection = stReqStoneProp_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stStonePropResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stStonePropResult_ProtoModID_descriptor_;
}
bool stStonePropResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stStonePropResult_ProtoModID stStonePropResult::ModID;
const stStonePropResult_ProtoModID stStonePropResult::ProtoModID_MIN;
const stStonePropResult_ProtoModID stStonePropResult::ProtoModID_MAX;
const int stStonePropResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stStonePropResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stStonePropResult_ProtoFunID_descriptor_;
}
bool stStonePropResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 229:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stStonePropResult_ProtoFunID stStonePropResult::FunID;
const stStonePropResult_ProtoFunID stStonePropResult::ProtoFunID_MIN;
const stStonePropResult_ProtoFunID stStonePropResult::ProtoFunID_MAX;
const int stStonePropResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stStonePropResult::kBattlePropFieldNumber;
#endif  // !_MSC_VER

stStonePropResult::stStonePropResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stStonePropResult::InitAsDefaultInstance() {
}

stStonePropResult::stStonePropResult(const stStonePropResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stStonePropResult::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stStonePropResult::~stStonePropResult() {
  SharedDtor();
}

void stStonePropResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stStonePropResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stStonePropResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stStonePropResult_descriptor_;
}

const stStonePropResult& stStonePropResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stStonePropResult* stStonePropResult::default_instance_ = NULL;

stStonePropResult* stStonePropResult::New() const {
  return new stStonePropResult;
}

void stStonePropResult::Clear() {
  battleprop_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stStonePropResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Role.stBattleProp battleProp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_battleProp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_battleprop()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_battleProp;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stStonePropResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Role.stBattleProp battleProp = 1;
  for (int i = 0; i < this->battleprop_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->battleprop(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stStonePropResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Role.stBattleProp battleProp = 1;
  for (int i = 0; i < this->battleprop_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->battleprop(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stStonePropResult::ByteSize() const {
  int total_size = 0;

  // repeated .Role.stBattleProp battleProp = 1;
  total_size += 1 * this->battleprop_size();
  for (int i = 0; i < this->battleprop_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->battleprop(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stStonePropResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stStonePropResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stStonePropResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stStonePropResult::MergeFrom(const stStonePropResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  battleprop_.MergeFrom(from.battleprop_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stStonePropResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stStonePropResult::CopyFrom(const stStonePropResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stStonePropResult::IsInitialized() const {

  return true;
}

void stStonePropResult::Swap(stStonePropResult* other) {
  if (other != this) {
    battleprop_.Swap(&other->battleprop_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stStonePropResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stStonePropResult_descriptor_;
  metadata.reflection = stStonePropResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqChangePhoto_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqChangePhoto_ProtoModID_descriptor_;
}
bool stReqChangePhoto_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqChangePhoto_ProtoModID stReqChangePhoto::ModID;
const stReqChangePhoto_ProtoModID stReqChangePhoto::ProtoModID_MIN;
const stReqChangePhoto_ProtoModID stReqChangePhoto::ProtoModID_MAX;
const int stReqChangePhoto::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqChangePhoto_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqChangePhoto_ProtoFunID_descriptor_;
}
bool stReqChangePhoto_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 230:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqChangePhoto_ProtoFunID stReqChangePhoto::FunID;
const stReqChangePhoto_ProtoFunID stReqChangePhoto::ProtoFunID_MIN;
const stReqChangePhoto_ProtoFunID stReqChangePhoto::ProtoFunID_MAX;
const int stReqChangePhoto::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqChangePhoto::kIdFieldNumber;
#endif  // !_MSC_VER

stReqChangePhoto::stReqChangePhoto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqChangePhoto::InitAsDefaultInstance() {
}

stReqChangePhoto::stReqChangePhoto(const stReqChangePhoto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqChangePhoto::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqChangePhoto::~stReqChangePhoto() {
  SharedDtor();
}

void stReqChangePhoto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqChangePhoto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqChangePhoto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqChangePhoto_descriptor_;
}

const stReqChangePhoto& stReqChangePhoto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stReqChangePhoto* stReqChangePhoto::default_instance_ = NULL;

stReqChangePhoto* stReqChangePhoto::New() const {
  return new stReqChangePhoto;
}

void stReqChangePhoto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqChangePhoto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqChangePhoto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqChangePhoto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqChangePhoto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqChangePhoto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqChangePhoto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqChangePhoto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqChangePhoto::MergeFrom(const stReqChangePhoto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqChangePhoto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqChangePhoto::CopyFrom(const stReqChangePhoto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqChangePhoto::IsInitialized() const {

  return true;
}

void stReqChangePhoto::Swap(stReqChangePhoto* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqChangePhoto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqChangePhoto_descriptor_;
  metadata.reflection = stReqChangePhoto_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stChangePhotoResult_Result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stChangePhotoResult_Result_descriptor_;
}
bool stChangePhotoResult_Result_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stChangePhotoResult_Result stChangePhotoResult::eSUCCESS;
const stChangePhotoResult_Result stChangePhotoResult::eFAILURE;
const stChangePhotoResult_Result stChangePhotoResult::Result_MIN;
const stChangePhotoResult_Result stChangePhotoResult::Result_MAX;
const int stChangePhotoResult::Result_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stChangePhotoResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stChangePhotoResult_ProtoModID_descriptor_;
}
bool stChangePhotoResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stChangePhotoResult_ProtoModID stChangePhotoResult::ModID;
const stChangePhotoResult_ProtoModID stChangePhotoResult::ProtoModID_MIN;
const stChangePhotoResult_ProtoModID stChangePhotoResult::ProtoModID_MAX;
const int stChangePhotoResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stChangePhotoResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stChangePhotoResult_ProtoFunID_descriptor_;
}
bool stChangePhotoResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 231:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stChangePhotoResult_ProtoFunID stChangePhotoResult::FunID;
const stChangePhotoResult_ProtoFunID stChangePhotoResult::ProtoFunID_MIN;
const stChangePhotoResult_ProtoFunID stChangePhotoResult::ProtoFunID_MAX;
const int stChangePhotoResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stChangePhotoResult::kResultFieldNumber;
const int stChangePhotoResult::kIdFieldNumber;
#endif  // !_MSC_VER

stChangePhotoResult::stChangePhotoResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stChangePhotoResult::InitAsDefaultInstance() {
}

stChangePhotoResult::stChangePhotoResult(const stChangePhotoResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stChangePhotoResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stChangePhotoResult::~stChangePhotoResult() {
  SharedDtor();
}

void stChangePhotoResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stChangePhotoResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stChangePhotoResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stChangePhotoResult_descriptor_;
}

const stChangePhotoResult& stChangePhotoResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stChangePhotoResult* stChangePhotoResult::default_instance_ = NULL;

stChangePhotoResult* stChangePhotoResult::New() const {
  return new stChangePhotoResult;
}

void stChangePhotoResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stChangePhotoResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Role.stChangePhotoResult.Result result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Role::stChangePhotoResult_Result_IsValid(value)) {
            set_result(static_cast< ::Role::stChangePhotoResult_Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional uint32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stChangePhotoResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Role.stChangePhotoResult.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional uint32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stChangePhotoResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Role.stChangePhotoResult.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional uint32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stChangePhotoResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Role.stChangePhotoResult.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional uint32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stChangePhotoResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stChangePhotoResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stChangePhotoResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stChangePhotoResult::MergeFrom(const stChangePhotoResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stChangePhotoResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stChangePhotoResult::CopyFrom(const stChangePhotoResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stChangePhotoResult::IsInitialized() const {

  return true;
}

void stChangePhotoResult::Swap(stChangePhotoResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stChangePhotoResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stChangePhotoResult_descriptor_;
  metadata.reflection = stChangePhotoResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqHasPhotoID_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqHasPhotoID_ProtoModID_descriptor_;
}
bool stReqHasPhotoID_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqHasPhotoID_ProtoModID stReqHasPhotoID::ModID;
const stReqHasPhotoID_ProtoModID stReqHasPhotoID::ProtoModID_MIN;
const stReqHasPhotoID_ProtoModID stReqHasPhotoID::ProtoModID_MAX;
const int stReqHasPhotoID::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqHasPhotoID_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqHasPhotoID_ProtoFunID_descriptor_;
}
bool stReqHasPhotoID_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 232:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqHasPhotoID_ProtoFunID stReqHasPhotoID::FunID;
const stReqHasPhotoID_ProtoFunID stReqHasPhotoID::ProtoFunID_MIN;
const stReqHasPhotoID_ProtoFunID stReqHasPhotoID::ProtoFunID_MAX;
const int stReqHasPhotoID::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqHasPhotoID::kCharIDFieldNumber;
#endif  // !_MSC_VER

stReqHasPhotoID::stReqHasPhotoID()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqHasPhotoID::InitAsDefaultInstance() {
}

stReqHasPhotoID::stReqHasPhotoID(const stReqHasPhotoID& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqHasPhotoID::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqHasPhotoID::~stReqHasPhotoID() {
  SharedDtor();
}

void stReqHasPhotoID::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqHasPhotoID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqHasPhotoID::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqHasPhotoID_descriptor_;
}

const stReqHasPhotoID& stReqHasPhotoID::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stReqHasPhotoID* stReqHasPhotoID::default_instance_ = NULL;

stReqHasPhotoID* stReqHasPhotoID::New() const {
  return new stReqHasPhotoID;
}

void stReqHasPhotoID::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqHasPhotoID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqHasPhotoID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqHasPhotoID::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqHasPhotoID::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqHasPhotoID::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqHasPhotoID* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqHasPhotoID*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqHasPhotoID::MergeFrom(const stReqHasPhotoID& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqHasPhotoID::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqHasPhotoID::CopyFrom(const stReqHasPhotoID& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqHasPhotoID::IsInitialized() const {

  return true;
}

void stReqHasPhotoID::Swap(stReqHasPhotoID* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqHasPhotoID::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqHasPhotoID_descriptor_;
  metadata.reflection = stReqHasPhotoID_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stHasPhotoIDResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stHasPhotoIDResult_ProtoModID_descriptor_;
}
bool stHasPhotoIDResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stHasPhotoIDResult_ProtoModID stHasPhotoIDResult::ModID;
const stHasPhotoIDResult_ProtoModID stHasPhotoIDResult::ProtoModID_MIN;
const stHasPhotoIDResult_ProtoModID stHasPhotoIDResult::ProtoModID_MAX;
const int stHasPhotoIDResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stHasPhotoIDResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stHasPhotoIDResult_ProtoFunID_descriptor_;
}
bool stHasPhotoIDResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 233:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stHasPhotoIDResult_ProtoFunID stHasPhotoIDResult::FunID;
const stHasPhotoIDResult_ProtoFunID stHasPhotoIDResult::ProtoFunID_MIN;
const stHasPhotoIDResult_ProtoFunID stHasPhotoIDResult::ProtoFunID_MAX;
const int stHasPhotoIDResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stHasPhotoIDResult::kPhotoIDsFieldNumber;
#endif  // !_MSC_VER

stHasPhotoIDResult::stHasPhotoIDResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stHasPhotoIDResult::InitAsDefaultInstance() {
}

stHasPhotoIDResult::stHasPhotoIDResult(const stHasPhotoIDResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stHasPhotoIDResult::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stHasPhotoIDResult::~stHasPhotoIDResult() {
  SharedDtor();
}

void stHasPhotoIDResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stHasPhotoIDResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stHasPhotoIDResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stHasPhotoIDResult_descriptor_;
}

const stHasPhotoIDResult& stHasPhotoIDResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stHasPhotoIDResult* stHasPhotoIDResult::default_instance_ = NULL;

stHasPhotoIDResult* stHasPhotoIDResult::New() const {
  return new stHasPhotoIDResult;
}

void stHasPhotoIDResult::Clear() {
  photoids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stHasPhotoIDResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 photoIDs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_photoIDs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_photoids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_photoids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_photoIDs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stHasPhotoIDResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 photoIDs = 1;
  for (int i = 0; i < this->photoids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->photoids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stHasPhotoIDResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 photoIDs = 1;
  for (int i = 0; i < this->photoids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->photoids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stHasPhotoIDResult::ByteSize() const {
  int total_size = 0;

  // repeated uint32 photoIDs = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->photoids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->photoids(i));
    }
    total_size += 1 * this->photoids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stHasPhotoIDResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stHasPhotoIDResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stHasPhotoIDResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stHasPhotoIDResult::MergeFrom(const stHasPhotoIDResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  photoids_.MergeFrom(from.photoids_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stHasPhotoIDResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stHasPhotoIDResult::CopyFrom(const stHasPhotoIDResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stHasPhotoIDResult::IsInitialized() const {

  return true;
}

void stHasPhotoIDResult::Swap(stHasPhotoIDResult* other) {
  if (other != this) {
    photoids_.Swap(&other->photoids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stHasPhotoIDResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stHasPhotoIDResult_descriptor_;
  metadata.reflection = stHasPhotoIDResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqUnlockPhoto_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqUnlockPhoto_ProtoModID_descriptor_;
}
bool stReqUnlockPhoto_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqUnlockPhoto_ProtoModID stReqUnlockPhoto::ModID;
const stReqUnlockPhoto_ProtoModID stReqUnlockPhoto::ProtoModID_MIN;
const stReqUnlockPhoto_ProtoModID stReqUnlockPhoto::ProtoModID_MAX;
const int stReqUnlockPhoto::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqUnlockPhoto_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqUnlockPhoto_ProtoFunID_descriptor_;
}
bool stReqUnlockPhoto_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 234:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqUnlockPhoto_ProtoFunID stReqUnlockPhoto::FunID;
const stReqUnlockPhoto_ProtoFunID stReqUnlockPhoto::ProtoFunID_MIN;
const stReqUnlockPhoto_ProtoFunID stReqUnlockPhoto::ProtoFunID_MAX;
const int stReqUnlockPhoto::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqUnlockPhoto::kIdFieldNumber;
#endif  // !_MSC_VER

stReqUnlockPhoto::stReqUnlockPhoto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqUnlockPhoto::InitAsDefaultInstance() {
}

stReqUnlockPhoto::stReqUnlockPhoto(const stReqUnlockPhoto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqUnlockPhoto::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqUnlockPhoto::~stReqUnlockPhoto() {
  SharedDtor();
}

void stReqUnlockPhoto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqUnlockPhoto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqUnlockPhoto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqUnlockPhoto_descriptor_;
}

const stReqUnlockPhoto& stReqUnlockPhoto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stReqUnlockPhoto* stReqUnlockPhoto::default_instance_ = NULL;

stReqUnlockPhoto* stReqUnlockPhoto::New() const {
  return new stReqUnlockPhoto;
}

void stReqUnlockPhoto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqUnlockPhoto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqUnlockPhoto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqUnlockPhoto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqUnlockPhoto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqUnlockPhoto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqUnlockPhoto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqUnlockPhoto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqUnlockPhoto::MergeFrom(const stReqUnlockPhoto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqUnlockPhoto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqUnlockPhoto::CopyFrom(const stReqUnlockPhoto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqUnlockPhoto::IsInitialized() const {

  return true;
}

void stReqUnlockPhoto::Swap(stReqUnlockPhoto* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqUnlockPhoto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqUnlockPhoto_descriptor_;
  metadata.reflection = stReqUnlockPhoto_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stUnlockPhotoResult_Result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUnlockPhotoResult_Result_descriptor_;
}
bool stUnlockPhotoResult_Result_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stUnlockPhotoResult_Result stUnlockPhotoResult::eSUCCESS;
const stUnlockPhotoResult_Result stUnlockPhotoResult::eFAILURE;
const stUnlockPhotoResult_Result stUnlockPhotoResult::eCOND_NOT_ENOUGH;
const stUnlockPhotoResult_Result stUnlockPhotoResult::Result_MIN;
const stUnlockPhotoResult_Result stUnlockPhotoResult::Result_MAX;
const int stUnlockPhotoResult::Result_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stUnlockPhotoResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUnlockPhotoResult_ProtoModID_descriptor_;
}
bool stUnlockPhotoResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stUnlockPhotoResult_ProtoModID stUnlockPhotoResult::ModID;
const stUnlockPhotoResult_ProtoModID stUnlockPhotoResult::ProtoModID_MIN;
const stUnlockPhotoResult_ProtoModID stUnlockPhotoResult::ProtoModID_MAX;
const int stUnlockPhotoResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stUnlockPhotoResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUnlockPhotoResult_ProtoFunID_descriptor_;
}
bool stUnlockPhotoResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 235:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stUnlockPhotoResult_ProtoFunID stUnlockPhotoResult::FunID;
const stUnlockPhotoResult_ProtoFunID stUnlockPhotoResult::ProtoFunID_MIN;
const stUnlockPhotoResult_ProtoFunID stUnlockPhotoResult::ProtoFunID_MAX;
const int stUnlockPhotoResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stUnlockPhotoResult::kResultFieldNumber;
#endif  // !_MSC_VER

stUnlockPhotoResult::stUnlockPhotoResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stUnlockPhotoResult::InitAsDefaultInstance() {
}

stUnlockPhotoResult::stUnlockPhotoResult(const stUnlockPhotoResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stUnlockPhotoResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stUnlockPhotoResult::~stUnlockPhotoResult() {
  SharedDtor();
}

void stUnlockPhotoResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stUnlockPhotoResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stUnlockPhotoResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUnlockPhotoResult_descriptor_;
}

const stUnlockPhotoResult& stUnlockPhotoResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stUnlockPhotoResult* stUnlockPhotoResult::default_instance_ = NULL;

stUnlockPhotoResult* stUnlockPhotoResult::New() const {
  return new stUnlockPhotoResult;
}

void stUnlockPhotoResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stUnlockPhotoResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Role.stUnlockPhotoResult.Result result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Role::stUnlockPhotoResult_Result_IsValid(value)) {
            set_result(static_cast< ::Role::stUnlockPhotoResult_Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stUnlockPhotoResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Role.stUnlockPhotoResult.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stUnlockPhotoResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Role.stUnlockPhotoResult.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stUnlockPhotoResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Role.stUnlockPhotoResult.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stUnlockPhotoResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stUnlockPhotoResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stUnlockPhotoResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stUnlockPhotoResult::MergeFrom(const stUnlockPhotoResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stUnlockPhotoResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stUnlockPhotoResult::CopyFrom(const stUnlockPhotoResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stUnlockPhotoResult::IsInitialized() const {

  return true;
}

void stUnlockPhotoResult::Swap(stUnlockPhotoResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stUnlockPhotoResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stUnlockPhotoResult_descriptor_;
  metadata.reflection = stUnlockPhotoResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stSpriteInfo_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSpriteInfo_ProtoModID_descriptor_;
}
bool stSpriteInfo_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSpriteInfo_ProtoModID stSpriteInfo::ModID;
const stSpriteInfo_ProtoModID stSpriteInfo::ProtoModID_MIN;
const stSpriteInfo_ProtoModID stSpriteInfo::ProtoModID_MAX;
const int stSpriteInfo::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSpriteInfo_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSpriteInfo_ProtoFunID_descriptor_;
}
bool stSpriteInfo_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 236:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSpriteInfo_ProtoFunID stSpriteInfo::FunID;
const stSpriteInfo_ProtoFunID stSpriteInfo::ProtoFunID_MIN;
const stSpriteInfo_ProtoFunID stSpriteInfo::ProtoFunID_MAX;
const int stSpriteInfo::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stSpriteInfo::kTagFieldNumber;
#endif  // !_MSC_VER

stSpriteInfo::stSpriteInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSpriteInfo::InitAsDefaultInstance() {
}

stSpriteInfo::stSpriteInfo(const stSpriteInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSpriteInfo::SharedCtor() {
  _cached_size_ = 0;
  tag_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSpriteInfo::~stSpriteInfo() {
  SharedDtor();
}

void stSpriteInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stSpriteInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSpriteInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSpriteInfo_descriptor_;
}

const stSpriteInfo& stSpriteInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stSpriteInfo* stSpriteInfo::default_instance_ = NULL;

stSpriteInfo* stSpriteInfo::New() const {
  return new stSpriteInfo;
}

void stSpriteInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tag_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSpriteInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 tag = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tag_)));
          set_has_tag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSpriteInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 tag = 1;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSpriteInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 tag = 1;
  if (has_tag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSpriteInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 tag = 1;
    if (has_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSpriteInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSpriteInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSpriteInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSpriteInfo::MergeFrom(const stSpriteInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tag()) {
      set_tag(from.tag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSpriteInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSpriteInfo::CopyFrom(const stSpriteInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSpriteInfo::IsInitialized() const {

  return true;
}

void stSpriteInfo::Swap(stSpriteInfo* other) {
  if (other != this) {
    std::swap(tag_, other->tag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSpriteInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSpriteInfo_descriptor_;
  metadata.reflection = stSpriteInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stSpriteInfoResult_Result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSpriteInfoResult_Result_descriptor_;
}
bool stSpriteInfoResult_Result_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSpriteInfoResult_Result stSpriteInfoResult::eSUCCESS;
const stSpriteInfoResult_Result stSpriteInfoResult::eFAILURE;
const stSpriteInfoResult_Result stSpriteInfoResult::Result_MIN;
const stSpriteInfoResult_Result stSpriteInfoResult::Result_MAX;
const int stSpriteInfoResult::Result_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSpriteInfoResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSpriteInfoResult_ProtoModID_descriptor_;
}
bool stSpriteInfoResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSpriteInfoResult_ProtoModID stSpriteInfoResult::ModID;
const stSpriteInfoResult_ProtoModID stSpriteInfoResult::ProtoModID_MIN;
const stSpriteInfoResult_ProtoModID stSpriteInfoResult::ProtoModID_MAX;
const int stSpriteInfoResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSpriteInfoResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSpriteInfoResult_ProtoFunID_descriptor_;
}
bool stSpriteInfoResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 237:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSpriteInfoResult_ProtoFunID stSpriteInfoResult::FunID;
const stSpriteInfoResult_ProtoFunID stSpriteInfoResult::ProtoFunID_MIN;
const stSpriteInfoResult_ProtoFunID stSpriteInfoResult::ProtoFunID_MAX;
const int stSpriteInfoResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stSpriteInfoResult::kResultFieldNumber;
const int stSpriteInfoResult::kIdFieldNumber;
const int stSpriteInfoResult::kLevelFieldNumber;
#endif  // !_MSC_VER

stSpriteInfoResult::stSpriteInfoResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSpriteInfoResult::InitAsDefaultInstance() {
}

stSpriteInfoResult::stSpriteInfoResult(const stSpriteInfoResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSpriteInfoResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  id_ = 0u;
  level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSpriteInfoResult::~stSpriteInfoResult() {
  SharedDtor();
}

void stSpriteInfoResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stSpriteInfoResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSpriteInfoResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSpriteInfoResult_descriptor_;
}

const stSpriteInfoResult& stSpriteInfoResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stSpriteInfoResult* stSpriteInfoResult::default_instance_ = NULL;

stSpriteInfoResult* stSpriteInfoResult::New() const {
  return new stSpriteInfoResult;
}

void stSpriteInfoResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
    id_ = 0u;
    level_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSpriteInfoResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Role.stSpriteInfoResult.Result result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Role::stSpriteInfoResult_Result_IsValid(value)) {
            set_result(static_cast< ::Role::stSpriteInfoResult_Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional uint32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // optional uint32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSpriteInfoResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Role.stSpriteInfoResult.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional uint32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  // optional uint32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSpriteInfoResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Role.stSpriteInfoResult.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional uint32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  // optional uint32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSpriteInfoResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Role.stSpriteInfoResult.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional uint32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSpriteInfoResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSpriteInfoResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSpriteInfoResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSpriteInfoResult::MergeFrom(const stSpriteInfoResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSpriteInfoResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSpriteInfoResult::CopyFrom(const stSpriteInfoResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSpriteInfoResult::IsInitialized() const {

  return true;
}

void stSpriteInfoResult::Swap(stSpriteInfoResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(id_, other->id_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSpriteInfoResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSpriteInfoResult_descriptor_;
  metadata.reflection = stSpriteInfoResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stTrainHeroReq_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stTrainHeroReq_ProtoModID_descriptor_;
}
bool stTrainHeroReq_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stTrainHeroReq_ProtoModID stTrainHeroReq::ModID;
const stTrainHeroReq_ProtoModID stTrainHeroReq::ProtoModID_MIN;
const stTrainHeroReq_ProtoModID stTrainHeroReq::ProtoModID_MAX;
const int stTrainHeroReq::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stTrainHeroReq_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stTrainHeroReq_ProtoFunID_descriptor_;
}
bool stTrainHeroReq_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 238:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stTrainHeroReq_ProtoFunID stTrainHeroReq::FunID;
const stTrainHeroReq_ProtoFunID stTrainHeroReq::ProtoFunID_MIN;
const stTrainHeroReq_ProtoFunID stTrainHeroReq::ProtoFunID_MAX;
const int stTrainHeroReq::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stTrainHeroReq::kHeroIDFieldNumber;
const int stTrainHeroReq::kInstanceIDFieldNumber;
#endif  // !_MSC_VER

stTrainHeroReq::stTrainHeroReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stTrainHeroReq::InitAsDefaultInstance() {
}

stTrainHeroReq::stTrainHeroReq(const stTrainHeroReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stTrainHeroReq::SharedCtor() {
  _cached_size_ = 0;
  heroid_ = 0u;
  instanceid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stTrainHeroReq::~stTrainHeroReq() {
  SharedDtor();
}

void stTrainHeroReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stTrainHeroReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stTrainHeroReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stTrainHeroReq_descriptor_;
}

const stTrainHeroReq& stTrainHeroReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stTrainHeroReq* stTrainHeroReq::default_instance_ = NULL;

stTrainHeroReq* stTrainHeroReq::New() const {
  return new stTrainHeroReq;
}

void stTrainHeroReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    heroid_ = 0u;
    instanceid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stTrainHeroReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 heroID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heroid_)));
          set_has_heroid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_instanceID;
        break;
      }

      // optional uint64 instanceID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_instanceID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &instanceid_)));
          set_has_instanceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stTrainHeroReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 heroID = 1;
  if (has_heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->heroid(), output);
  }

  // optional uint64 instanceID = 2;
  if (has_instanceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->instanceid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stTrainHeroReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 heroID = 1;
  if (has_heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->heroid(), target);
  }

  // optional uint64 instanceID = 2;
  if (has_instanceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->instanceid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stTrainHeroReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 heroID = 1;
    if (has_heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heroid());
    }

    // optional uint64 instanceID = 2;
    if (has_instanceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->instanceid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stTrainHeroReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stTrainHeroReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stTrainHeroReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stTrainHeroReq::MergeFrom(const stTrainHeroReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_heroid()) {
      set_heroid(from.heroid());
    }
    if (from.has_instanceid()) {
      set_instanceid(from.instanceid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stTrainHeroReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stTrainHeroReq::CopyFrom(const stTrainHeroReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stTrainHeroReq::IsInitialized() const {

  return true;
}

void stTrainHeroReq::Swap(stTrainHeroReq* other) {
  if (other != this) {
    std::swap(heroid_, other->heroid_);
    std::swap(instanceid_, other->instanceid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stTrainHeroReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stTrainHeroReq_descriptor_;
  metadata.reflection = stTrainHeroReq_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stTrainHeroResult_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stTrainHeroResult_eResult_descriptor_;
}
bool stTrainHeroResult_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stTrainHeroResult_eResult stTrainHeroResult::eSuccess;
const stTrainHeroResult_eResult stTrainHeroResult::eHero_Not_Exist;
const stTrainHeroResult_eResult stTrainHeroResult::eItem_Not_Exist;
const stTrainHeroResult_eResult stTrainHeroResult::eHero_Max_Train_Level;
const stTrainHeroResult_eResult stTrainHeroResult::eInner_Error;
const stTrainHeroResult_eResult stTrainHeroResult::eTrainSP;
const stTrainHeroResult_eResult stTrainHeroResult::eResult_MIN;
const stTrainHeroResult_eResult stTrainHeroResult::eResult_MAX;
const int stTrainHeroResult::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stTrainHeroResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stTrainHeroResult_ProtoModID_descriptor_;
}
bool stTrainHeroResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stTrainHeroResult_ProtoModID stTrainHeroResult::ModID;
const stTrainHeroResult_ProtoModID stTrainHeroResult::ProtoModID_MIN;
const stTrainHeroResult_ProtoModID stTrainHeroResult::ProtoModID_MAX;
const int stTrainHeroResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stTrainHeroResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stTrainHeroResult_ProtoFunID_descriptor_;
}
bool stTrainHeroResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 239:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stTrainHeroResult_ProtoFunID stTrainHeroResult::FunID;
const stTrainHeroResult_ProtoFunID stTrainHeroResult::ProtoFunID_MIN;
const stTrainHeroResult_ProtoFunID stTrainHeroResult::ProtoFunID_MAX;
const int stTrainHeroResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stTrainHeroResult::kHeroIDFieldNumber;
const int stTrainHeroResult::kResultFieldNumber;
const int stTrainHeroResult::kLevelUpFieldNumber;
const int stTrainHeroResult::kNewLevelFieldNumber;
#endif  // !_MSC_VER

stTrainHeroResult::stTrainHeroResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stTrainHeroResult::InitAsDefaultInstance() {
}

stTrainHeroResult::stTrainHeroResult(const stTrainHeroResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stTrainHeroResult::SharedCtor() {
  _cached_size_ = 0;
  heroid_ = 0u;
  result_ = 1;
  levelup_ = false;
  newlevel_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stTrainHeroResult::~stTrainHeroResult() {
  SharedDtor();
}

void stTrainHeroResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stTrainHeroResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stTrainHeroResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stTrainHeroResult_descriptor_;
}

const stTrainHeroResult& stTrainHeroResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stTrainHeroResult* stTrainHeroResult::default_instance_ = NULL;

stTrainHeroResult* stTrainHeroResult::New() const {
  return new stTrainHeroResult;
}

void stTrainHeroResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    heroid_ = 0u;
    result_ = 1;
    levelup_ = false;
    newlevel_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stTrainHeroResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 heroID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heroid_)));
          set_has_heroid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .Role.stTrainHeroResult.eResult result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Role::stTrainHeroResult_eResult_IsValid(value)) {
            set_result(static_cast< ::Role::stTrainHeroResult_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_levelUp;
        break;
      }

      // optional bool levelUp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_levelUp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &levelup_)));
          set_has_levelup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_newLevel;
        break;
      }

      // optional uint32 newLevel = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_newLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &newlevel_)));
          set_has_newlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stTrainHeroResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 heroID = 1;
  if (has_heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->heroid(), output);
  }

  // optional .Role.stTrainHeroResult.eResult result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  // optional bool levelUp = 3;
  if (has_levelup()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->levelup(), output);
  }

  // optional uint32 newLevel = 4;
  if (has_newlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->newlevel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stTrainHeroResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 heroID = 1;
  if (has_heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->heroid(), target);
  }

  // optional .Role.stTrainHeroResult.eResult result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  // optional bool levelUp = 3;
  if (has_levelup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->levelup(), target);
  }

  // optional uint32 newLevel = 4;
  if (has_newlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->newlevel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stTrainHeroResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 heroID = 1;
    if (has_heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heroid());
    }

    // optional .Role.stTrainHeroResult.eResult result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional bool levelUp = 3;
    if (has_levelup()) {
      total_size += 1 + 1;
    }

    // optional uint32 newLevel = 4;
    if (has_newlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->newlevel());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stTrainHeroResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stTrainHeroResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stTrainHeroResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stTrainHeroResult::MergeFrom(const stTrainHeroResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_heroid()) {
      set_heroid(from.heroid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_levelup()) {
      set_levelup(from.levelup());
    }
    if (from.has_newlevel()) {
      set_newlevel(from.newlevel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stTrainHeroResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stTrainHeroResult::CopyFrom(const stTrainHeroResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stTrainHeroResult::IsInitialized() const {

  return true;
}

void stTrainHeroResult::Swap(stTrainHeroResult* other) {
  if (other != this) {
    std::swap(heroid_, other->heroid_);
    std::swap(result_, other->result_);
    std::swap(levelup_, other->levelup_);
    std::swap(newlevel_, other->newlevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stTrainHeroResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stTrainHeroResult_descriptor_;
  metadata.reflection = stTrainHeroResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stGuaJiTimeNtf_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGuaJiTimeNtf_ProtoModID_descriptor_;
}
bool stGuaJiTimeNtf_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stGuaJiTimeNtf_ProtoModID stGuaJiTimeNtf::ModID;
const stGuaJiTimeNtf_ProtoModID stGuaJiTimeNtf::ProtoModID_MIN;
const stGuaJiTimeNtf_ProtoModID stGuaJiTimeNtf::ProtoModID_MAX;
const int stGuaJiTimeNtf::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stGuaJiTimeNtf_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGuaJiTimeNtf_ProtoFunID_descriptor_;
}
bool stGuaJiTimeNtf_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 240:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stGuaJiTimeNtf_ProtoFunID stGuaJiTimeNtf::FunID;
const stGuaJiTimeNtf_ProtoFunID stGuaJiTimeNtf::ProtoFunID_MIN;
const stGuaJiTimeNtf_ProtoFunID stGuaJiTimeNtf::ProtoFunID_MAX;
const int stGuaJiTimeNtf::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stGuaJiTimeNtf::kGuajiStartFieldNumber;
const int stGuaJiTimeNtf::kGuajiEndFieldNumber;
const int stGuaJiTimeNtf::kTodayCountFieldNumber;
#endif  // !_MSC_VER

stGuaJiTimeNtf::stGuaJiTimeNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stGuaJiTimeNtf::InitAsDefaultInstance() {
}

stGuaJiTimeNtf::stGuaJiTimeNtf(const stGuaJiTimeNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stGuaJiTimeNtf::SharedCtor() {
  _cached_size_ = 0;
  guajistart_ = 0u;
  guajiend_ = 0u;
  todaycount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stGuaJiTimeNtf::~stGuaJiTimeNtf() {
  SharedDtor();
}

void stGuaJiTimeNtf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stGuaJiTimeNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stGuaJiTimeNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGuaJiTimeNtf_descriptor_;
}

const stGuaJiTimeNtf& stGuaJiTimeNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stGuaJiTimeNtf* stGuaJiTimeNtf::default_instance_ = NULL;

stGuaJiTimeNtf* stGuaJiTimeNtf::New() const {
  return new stGuaJiTimeNtf;
}

void stGuaJiTimeNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guajistart_ = 0u;
    guajiend_ = 0u;
    todaycount_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stGuaJiTimeNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 guajiStart = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guajistart_)));
          set_has_guajistart();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_guajiEnd;
        break;
      }

      // optional uint32 guajiEnd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guajiEnd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guajiend_)));
          set_has_guajiend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_todayCount;
        break;
      }

      // optional uint32 todayCount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_todayCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &todaycount_)));
          set_has_todaycount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stGuaJiTimeNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 guajiStart = 1;
  if (has_guajistart()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->guajistart(), output);
  }

  // optional uint32 guajiEnd = 2;
  if (has_guajiend()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->guajiend(), output);
  }

  // optional uint32 todayCount = 3;
  if (has_todaycount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->todaycount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stGuaJiTimeNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 guajiStart = 1;
  if (has_guajistart()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->guajistart(), target);
  }

  // optional uint32 guajiEnd = 2;
  if (has_guajiend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->guajiend(), target);
  }

  // optional uint32 todayCount = 3;
  if (has_todaycount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->todaycount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stGuaJiTimeNtf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 guajiStart = 1;
    if (has_guajistart()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guajistart());
    }

    // optional uint32 guajiEnd = 2;
    if (has_guajiend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guajiend());
    }

    // optional uint32 todayCount = 3;
    if (has_todaycount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->todaycount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stGuaJiTimeNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stGuaJiTimeNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stGuaJiTimeNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stGuaJiTimeNtf::MergeFrom(const stGuaJiTimeNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guajistart()) {
      set_guajistart(from.guajistart());
    }
    if (from.has_guajiend()) {
      set_guajiend(from.guajiend());
    }
    if (from.has_todaycount()) {
      set_todaycount(from.todaycount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stGuaJiTimeNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stGuaJiTimeNtf::CopyFrom(const stGuaJiTimeNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stGuaJiTimeNtf::IsInitialized() const {

  return true;
}

void stGuaJiTimeNtf::Swap(stGuaJiTimeNtf* other) {
  if (other != this) {
    std::swap(guajistart_, other->guajistart_);
    std::swap(guajiend_, other->guajiend_);
    std::swap(todaycount_, other->todaycount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stGuaJiTimeNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stGuaJiTimeNtf_descriptor_;
  metadata.reflection = stGuaJiTimeNtf_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stGuaJiAwardReq_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGuaJiAwardReq_ProtoModID_descriptor_;
}
bool stGuaJiAwardReq_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stGuaJiAwardReq_ProtoModID stGuaJiAwardReq::ModID;
const stGuaJiAwardReq_ProtoModID stGuaJiAwardReq::ProtoModID_MIN;
const stGuaJiAwardReq_ProtoModID stGuaJiAwardReq::ProtoModID_MAX;
const int stGuaJiAwardReq::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stGuaJiAwardReq_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGuaJiAwardReq_ProtoFunID_descriptor_;
}
bool stGuaJiAwardReq_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 241:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stGuaJiAwardReq_ProtoFunID stGuaJiAwardReq::FunID;
const stGuaJiAwardReq_ProtoFunID stGuaJiAwardReq::ProtoFunID_MIN;
const stGuaJiAwardReq_ProtoFunID stGuaJiAwardReq::ProtoFunID_MAX;
const int stGuaJiAwardReq::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stGuaJiAwardReq::kCharidFieldNumber;
#endif  // !_MSC_VER

stGuaJiAwardReq::stGuaJiAwardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stGuaJiAwardReq::InitAsDefaultInstance() {
}

stGuaJiAwardReq::stGuaJiAwardReq(const stGuaJiAwardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stGuaJiAwardReq::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stGuaJiAwardReq::~stGuaJiAwardReq() {
  SharedDtor();
}

void stGuaJiAwardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stGuaJiAwardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stGuaJiAwardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGuaJiAwardReq_descriptor_;
}

const stGuaJiAwardReq& stGuaJiAwardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stGuaJiAwardReq* stGuaJiAwardReq::default_instance_ = NULL;

stGuaJiAwardReq* stGuaJiAwardReq::New() const {
  return new stGuaJiAwardReq;
}

void stGuaJiAwardReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stGuaJiAwardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stGuaJiAwardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stGuaJiAwardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stGuaJiAwardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stGuaJiAwardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stGuaJiAwardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stGuaJiAwardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stGuaJiAwardReq::MergeFrom(const stGuaJiAwardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stGuaJiAwardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stGuaJiAwardReq::CopyFrom(const stGuaJiAwardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stGuaJiAwardReq::IsInitialized() const {

  return true;
}

void stGuaJiAwardReq::Swap(stGuaJiAwardReq* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stGuaJiAwardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stGuaJiAwardReq_descriptor_;
  metadata.reflection = stGuaJiAwardReq_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stGuaJiAwardResult_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGuaJiAwardResult_eResult_descriptor_;
}
bool stGuaJiAwardResult_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stGuaJiAwardResult_eResult stGuaJiAwardResult::eSuccess;
const stGuaJiAwardResult_eResult stGuaJiAwardResult::eTime;
const stGuaJiAwardResult_eResult stGuaJiAwardResult::eInner_Error;
const stGuaJiAwardResult_eResult stGuaJiAwardResult::eResult_MIN;
const stGuaJiAwardResult_eResult stGuaJiAwardResult::eResult_MAX;
const int stGuaJiAwardResult::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stGuaJiAwardResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGuaJiAwardResult_ProtoModID_descriptor_;
}
bool stGuaJiAwardResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stGuaJiAwardResult_ProtoModID stGuaJiAwardResult::ModID;
const stGuaJiAwardResult_ProtoModID stGuaJiAwardResult::ProtoModID_MIN;
const stGuaJiAwardResult_ProtoModID stGuaJiAwardResult::ProtoModID_MAX;
const int stGuaJiAwardResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stGuaJiAwardResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGuaJiAwardResult_ProtoFunID_descriptor_;
}
bool stGuaJiAwardResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 242:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stGuaJiAwardResult_ProtoFunID stGuaJiAwardResult::FunID;
const stGuaJiAwardResult_ProtoFunID stGuaJiAwardResult::ProtoFunID_MIN;
const stGuaJiAwardResult_ProtoFunID stGuaJiAwardResult::ProtoFunID_MAX;
const int stGuaJiAwardResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stGuaJiAwardResult::kResultFieldNumber;
#endif  // !_MSC_VER

stGuaJiAwardResult::stGuaJiAwardResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stGuaJiAwardResult::InitAsDefaultInstance() {
}

stGuaJiAwardResult::stGuaJiAwardResult(const stGuaJiAwardResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stGuaJiAwardResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stGuaJiAwardResult::~stGuaJiAwardResult() {
  SharedDtor();
}

void stGuaJiAwardResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stGuaJiAwardResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stGuaJiAwardResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGuaJiAwardResult_descriptor_;
}

const stGuaJiAwardResult& stGuaJiAwardResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stGuaJiAwardResult* stGuaJiAwardResult::default_instance_ = NULL;

stGuaJiAwardResult* stGuaJiAwardResult::New() const {
  return new stGuaJiAwardResult;
}

void stGuaJiAwardResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stGuaJiAwardResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Role.stGuaJiAwardResult.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Role::stGuaJiAwardResult_eResult_IsValid(value)) {
            set_result(static_cast< ::Role::stGuaJiAwardResult_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stGuaJiAwardResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Role.stGuaJiAwardResult.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stGuaJiAwardResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Role.stGuaJiAwardResult.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stGuaJiAwardResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Role.stGuaJiAwardResult.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stGuaJiAwardResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stGuaJiAwardResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stGuaJiAwardResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stGuaJiAwardResult::MergeFrom(const stGuaJiAwardResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stGuaJiAwardResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stGuaJiAwardResult::CopyFrom(const stGuaJiAwardResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stGuaJiAwardResult::IsInitialized() const {

  return true;
}

void stGuaJiAwardResult::Swap(stGuaJiAwardResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stGuaJiAwardResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stGuaJiAwardResult_descriptor_;
  metadata.reflection = stGuaJiAwardResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stNftVipNtf_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNftVipNtf_ProtoModID_descriptor_;
}
bool stNftVipNtf_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNftVipNtf_ProtoModID stNftVipNtf::ModID;
const stNftVipNtf_ProtoModID stNftVipNtf::ProtoModID_MIN;
const stNftVipNtf_ProtoModID stNftVipNtf::ProtoModID_MAX;
const int stNftVipNtf::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stNftVipNtf_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNftVipNtf_ProtoFunID_descriptor_;
}
bool stNftVipNtf_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 243:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNftVipNtf_ProtoFunID stNftVipNtf::FunID;
const stNftVipNtf_ProtoFunID stNftVipNtf::ProtoFunID_MIN;
const stNftVipNtf_ProtoFunID stNftVipNtf::ProtoFunID_MAX;
const int stNftVipNtf::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stNftVipNtf::kIsNftVipFieldNumber;
#endif  // !_MSC_VER

stNftVipNtf::stNftVipNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stNftVipNtf::InitAsDefaultInstance() {
}

stNftVipNtf::stNftVipNtf(const stNftVipNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stNftVipNtf::SharedCtor() {
  _cached_size_ = 0;
  isnftvip_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stNftVipNtf::~stNftVipNtf() {
  SharedDtor();
}

void stNftVipNtf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stNftVipNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stNftVipNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNftVipNtf_descriptor_;
}

const stNftVipNtf& stNftVipNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stNftVipNtf* stNftVipNtf::default_instance_ = NULL;

stNftVipNtf* stNftVipNtf::New() const {
  return new stNftVipNtf;
}

void stNftVipNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    isnftvip_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stNftVipNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 isNftVip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isnftvip_)));
          set_has_isnftvip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stNftVipNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 isNftVip = 1;
  if (has_isnftvip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->isnftvip(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stNftVipNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 isNftVip = 1;
  if (has_isnftvip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->isnftvip(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stNftVipNtf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 isNftVip = 1;
    if (has_isnftvip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isnftvip());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stNftVipNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stNftVipNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stNftVipNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stNftVipNtf::MergeFrom(const stNftVipNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isnftvip()) {
      set_isnftvip(from.isnftvip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stNftVipNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stNftVipNtf::CopyFrom(const stNftVipNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stNftVipNtf::IsInitialized() const {

  return true;
}

void stNftVipNtf::Swap(stNftVipNtf* other) {
  if (other != this) {
    std::swap(isnftvip_, other->isnftvip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stNftVipNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stNftVipNtf_descriptor_;
  metadata.reflection = stNftVipNtf_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stGuaJiStartReq_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGuaJiStartReq_ProtoModID_descriptor_;
}
bool stGuaJiStartReq_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stGuaJiStartReq_ProtoModID stGuaJiStartReq::ModID;
const stGuaJiStartReq_ProtoModID stGuaJiStartReq::ProtoModID_MIN;
const stGuaJiStartReq_ProtoModID stGuaJiStartReq::ProtoModID_MAX;
const int stGuaJiStartReq::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stGuaJiStartReq_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGuaJiStartReq_ProtoFunID_descriptor_;
}
bool stGuaJiStartReq_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 244:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stGuaJiStartReq_ProtoFunID stGuaJiStartReq::FunID;
const stGuaJiStartReq_ProtoFunID stGuaJiStartReq::ProtoFunID_MIN;
const stGuaJiStartReq_ProtoFunID stGuaJiStartReq::ProtoFunID_MAX;
const int stGuaJiStartReq::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stGuaJiStartReq::kCharidFieldNumber;
#endif  // !_MSC_VER

stGuaJiStartReq::stGuaJiStartReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stGuaJiStartReq::InitAsDefaultInstance() {
}

stGuaJiStartReq::stGuaJiStartReq(const stGuaJiStartReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stGuaJiStartReq::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stGuaJiStartReq::~stGuaJiStartReq() {
  SharedDtor();
}

void stGuaJiStartReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stGuaJiStartReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stGuaJiStartReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGuaJiStartReq_descriptor_;
}

const stGuaJiStartReq& stGuaJiStartReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stGuaJiStartReq* stGuaJiStartReq::default_instance_ = NULL;

stGuaJiStartReq* stGuaJiStartReq::New() const {
  return new stGuaJiStartReq;
}

void stGuaJiStartReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stGuaJiStartReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stGuaJiStartReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stGuaJiStartReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stGuaJiStartReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stGuaJiStartReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stGuaJiStartReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stGuaJiStartReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stGuaJiStartReq::MergeFrom(const stGuaJiStartReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stGuaJiStartReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stGuaJiStartReq::CopyFrom(const stGuaJiStartReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stGuaJiStartReq::IsInitialized() const {

  return true;
}

void stGuaJiStartReq::Swap(stGuaJiStartReq* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stGuaJiStartReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stGuaJiStartReq_descriptor_;
  metadata.reflection = stGuaJiStartReq_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stGuaJiStartResult_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGuaJiStartResult_eResult_descriptor_;
}
bool stGuaJiStartResult_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stGuaJiStartResult_eResult stGuaJiStartResult::eSuccess;
const stGuaJiStartResult_eResult stGuaJiStartResult::eTodaylimit;
const stGuaJiStartResult_eResult stGuaJiStartResult::eInner_Error;
const stGuaJiStartResult_eResult stGuaJiStartResult::eCoin;
const stGuaJiStartResult_eResult stGuaJiStartResult::eInGuaji;
const stGuaJiStartResult_eResult stGuaJiStartResult::eResult_MIN;
const stGuaJiStartResult_eResult stGuaJiStartResult::eResult_MAX;
const int stGuaJiStartResult::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stGuaJiStartResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGuaJiStartResult_ProtoModID_descriptor_;
}
bool stGuaJiStartResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stGuaJiStartResult_ProtoModID stGuaJiStartResult::ModID;
const stGuaJiStartResult_ProtoModID stGuaJiStartResult::ProtoModID_MIN;
const stGuaJiStartResult_ProtoModID stGuaJiStartResult::ProtoModID_MAX;
const int stGuaJiStartResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stGuaJiStartResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGuaJiStartResult_ProtoFunID_descriptor_;
}
bool stGuaJiStartResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 245:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stGuaJiStartResult_ProtoFunID stGuaJiStartResult::FunID;
const stGuaJiStartResult_ProtoFunID stGuaJiStartResult::ProtoFunID_MIN;
const stGuaJiStartResult_ProtoFunID stGuaJiStartResult::ProtoFunID_MAX;
const int stGuaJiStartResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stGuaJiStartResult::kResultFieldNumber;
#endif  // !_MSC_VER

stGuaJiStartResult::stGuaJiStartResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stGuaJiStartResult::InitAsDefaultInstance() {
}

stGuaJiStartResult::stGuaJiStartResult(const stGuaJiStartResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stGuaJiStartResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stGuaJiStartResult::~stGuaJiStartResult() {
  SharedDtor();
}

void stGuaJiStartResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stGuaJiStartResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stGuaJiStartResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGuaJiStartResult_descriptor_;
}

const stGuaJiStartResult& stGuaJiStartResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stGuaJiStartResult* stGuaJiStartResult::default_instance_ = NULL;

stGuaJiStartResult* stGuaJiStartResult::New() const {
  return new stGuaJiStartResult;
}

void stGuaJiStartResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stGuaJiStartResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Role.stGuaJiStartResult.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Role::stGuaJiStartResult_eResult_IsValid(value)) {
            set_result(static_cast< ::Role::stGuaJiStartResult_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stGuaJiStartResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Role.stGuaJiStartResult.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stGuaJiStartResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Role.stGuaJiStartResult.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stGuaJiStartResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Role.stGuaJiStartResult.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stGuaJiStartResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stGuaJiStartResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stGuaJiStartResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stGuaJiStartResult::MergeFrom(const stGuaJiStartResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stGuaJiStartResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stGuaJiStartResult::CopyFrom(const stGuaJiStartResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stGuaJiStartResult::IsInitialized() const {

  return true;
}

void stGuaJiStartResult::Swap(stGuaJiStartResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stGuaJiStartResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stGuaJiStartResult_descriptor_;
  metadata.reflection = stGuaJiStartResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stSynRMPShopItem2::kIdFieldNumber;
const int stSynRMPShopItem2::kDelayTimeFieldNumber;
const int stSynRMPShopItem2::kBuyCountFieldNumber;
const int stSynRMPShopItem2::kStartTimeFieldNumber;
const int stSynRMPShopItem2::kPlanNumberFieldNumber;
#endif  // !_MSC_VER

stSynRMPShopItem2::stSynRMPShopItem2()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSynRMPShopItem2::InitAsDefaultInstance() {
}

stSynRMPShopItem2::stSynRMPShopItem2(const stSynRMPShopItem2& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSynRMPShopItem2::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  delaytime_ = 0u;
  buycount_ = 0u;
  starttime_ = 0u;
  plannumber_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSynRMPShopItem2::~stSynRMPShopItem2() {
  SharedDtor();
}

void stSynRMPShopItem2::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stSynRMPShopItem2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSynRMPShopItem2::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynRMPShopItem2_descriptor_;
}

const stSynRMPShopItem2& stSynRMPShopItem2::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stSynRMPShopItem2* stSynRMPShopItem2::default_instance_ = NULL;

stSynRMPShopItem2* stSynRMPShopItem2::New() const {
  return new stSynRMPShopItem2;
}

void stSynRMPShopItem2::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    delaytime_ = 0u;
    buycount_ = 0u;
    starttime_ = 0u;
    plannumber_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSynRMPShopItem2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_delayTime;
        break;
      }

      // optional uint32 delayTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_delayTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &delaytime_)));
          set_has_delaytime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_buyCount;
        break;
      }

      // optional uint32 buyCount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buyCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buycount_)));
          set_has_buycount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_startTime;
        break;
      }

      // optional uint32 startTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_startTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_planNumber;
        break;
      }

      // optional uint32 planNumber = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_planNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &plannumber_)));
          set_has_plannumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSynRMPShopItem2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 delayTime = 2;
  if (has_delaytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->delaytime(), output);
  }

  // optional uint32 buyCount = 3;
  if (has_buycount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->buycount(), output);
  }

  // optional uint32 startTime = 4;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->starttime(), output);
  }

  // optional uint32 planNumber = 5;
  if (has_plannumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->plannumber(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSynRMPShopItem2::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 delayTime = 2;
  if (has_delaytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->delaytime(), target);
  }

  // optional uint32 buyCount = 3;
  if (has_buycount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->buycount(), target);
  }

  // optional uint32 startTime = 4;
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->starttime(), target);
  }

  // optional uint32 planNumber = 5;
  if (has_plannumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->plannumber(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSynRMPShopItem2::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 delayTime = 2;
    if (has_delaytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->delaytime());
    }

    // optional uint32 buyCount = 3;
    if (has_buycount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buycount());
    }

    // optional uint32 startTime = 4;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->starttime());
    }

    // optional uint32 planNumber = 5;
    if (has_plannumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->plannumber());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSynRMPShopItem2::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSynRMPShopItem2* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSynRMPShopItem2*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSynRMPShopItem2::MergeFrom(const stSynRMPShopItem2& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_delaytime()) {
      set_delaytime(from.delaytime());
    }
    if (from.has_buycount()) {
      set_buycount(from.buycount());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_plannumber()) {
      set_plannumber(from.plannumber());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSynRMPShopItem2::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSynRMPShopItem2::CopyFrom(const stSynRMPShopItem2& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSynRMPShopItem2::IsInitialized() const {

  return true;
}

void stSynRMPShopItem2::Swap(stSynRMPShopItem2* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(delaytime_, other->delaytime_);
    std::swap(buycount_, other->buycount_);
    std::swap(starttime_, other->starttime_);
    std::swap(plannumber_, other->plannumber_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSynRMPShopItem2::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSynRMPShopItem2_descriptor_;
  metadata.reflection = stSynRMPShopItem2_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stSynRMBShopInfo2_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynRMBShopInfo2_ProtoModID_descriptor_;
}
bool stSynRMBShopInfo2_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynRMBShopInfo2_ProtoModID stSynRMBShopInfo2::ModID;
const stSynRMBShopInfo2_ProtoModID stSynRMBShopInfo2::ProtoModID_MIN;
const stSynRMBShopInfo2_ProtoModID stSynRMBShopInfo2::ProtoModID_MAX;
const int stSynRMBShopInfo2::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSynRMBShopInfo2_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynRMBShopInfo2_ProtoFunID_descriptor_;
}
bool stSynRMBShopInfo2_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 246:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynRMBShopInfo2_ProtoFunID stSynRMBShopInfo2::FunID;
const stSynRMBShopInfo2_ProtoFunID stSynRMBShopInfo2::ProtoFunID_MIN;
const stSynRMBShopInfo2_ProtoFunID stSynRMBShopInfo2::ProtoFunID_MAX;
const int stSynRMBShopInfo2::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stSynRMBShopInfo2::kItemsFieldNumber;
#endif  // !_MSC_VER

stSynRMBShopInfo2::stSynRMBShopInfo2()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSynRMBShopInfo2::InitAsDefaultInstance() {
}

stSynRMBShopInfo2::stSynRMBShopInfo2(const stSynRMBShopInfo2& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSynRMBShopInfo2::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSynRMBShopInfo2::~stSynRMBShopInfo2() {
  SharedDtor();
}

void stSynRMBShopInfo2::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stSynRMBShopInfo2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSynRMBShopInfo2::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynRMBShopInfo2_descriptor_;
}

const stSynRMBShopInfo2& stSynRMBShopInfo2::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Role_2eproto();
  return *default_instance_;
}

stSynRMBShopInfo2* stSynRMBShopInfo2::default_instance_ = NULL;

stSynRMBShopInfo2* stSynRMBShopInfo2::New() const {
  return new stSynRMBShopInfo2;
}

void stSynRMBShopInfo2::Clear() {
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSynRMBShopInfo2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Role.stSynRMPShopItem2 items = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSynRMBShopInfo2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Role.stSynRMPShopItem2 items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSynRMBShopInfo2::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Role.stSynRMPShopItem2 items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSynRMBShopInfo2::ByteSize() const {
  int total_size = 0;

  // repeated .Role.stSynRMPShopItem2 items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSynRMBShopInfo2::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSynRMBShopInfo2* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSynRMBShopInfo2*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSynRMBShopInfo2::MergeFrom(const stSynRMBShopInfo2& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSynRMBShopInfo2::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSynRMBShopInfo2::CopyFrom(const stSynRMBShopInfo2& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSynRMBShopInfo2::IsInitialized() const {

  return true;
}

void stSynRMBShopInfo2::Swap(stSynRMBShopInfo2* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSynRMBShopInfo2::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSynRMBShopInfo2_descriptor_;
  metadata.reflection = stSynRMBShopInfo2_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Role

// @@protoc_insertion_point(global_scope)
