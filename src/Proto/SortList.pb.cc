// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SortList.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SortList.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace SortProto {

namespace {

const ::google::protobuf::Descriptor* stReqLevelSortList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqLevelSortList_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqLevelSortList_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqLevelSortList_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSynLevelSortItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSynLevelSortItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* stRetLevelSortList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRetLevelSortList_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetLevelSortList_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetLevelSortList_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqBattlePowerSortList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqBattlePowerSortList_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqBattlePowerSortList_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqBattlePowerSortList_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSynBattlePowerSortItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSynBattlePowerSortItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* stRetBattlePowerSortList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRetBattlePowerSortList_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetBattlePowerSortList_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetBattlePowerSortList_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqCopymapSortList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqCopymapSortList_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqCopymapSortList_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqCopymapSortList_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stCopyMapSortItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stCopyMapSortItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* stRetCopyMapSortList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRetCopyMapSortList_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetCopyMapSortList_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetCopyMapSortList_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSynArenaSortInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSynArenaSortInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* stReqArenaPKList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqArenaPKList_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqArenaPKList_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqArenaPKList_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRetArenaPKList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRetArenaPKList_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetArenaPKList_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetArenaPKList_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqArenaSortList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqArenaSortList_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqArenaSortList_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqArenaSortList_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRetArenaSortList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRetArenaSortList_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetArenaSortList_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetArenaSortList_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSynOne2OnePVPInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSynOne2OnePVPInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* stReqOne2OnePVPSortList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqOne2OnePVPSortList_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqOne2OnePVPSortList_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqOne2OnePVPSortList_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRetOne2OnePVPSortList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRetOne2OnePVPSortList_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetOne2OnePVPSortList_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetOne2OnePVPSortList_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stChallengeArenaUser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stChallengeArenaUser_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stChallengeArenaUser_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stChallengeArenaUser_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stChallengeArenaUserResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stChallengeArenaUserResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stChallengeArenaUserResult_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stChallengeArenaUserResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stChallengeArenaUserResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stChallegeLeitaiUser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stChallegeLeitaiUser_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stChallegeLeitaiUser_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stChallegeLeitaiUser_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stChallegeLeitaiUserResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stChallegeLeitaiUserResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stChallegeLeitaiUserResult_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stChallegeLeitaiUserResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stChallegeLeitaiUserResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stOpenLeitaiWindow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stOpenLeitaiWindow_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stOpenLeitaiWindow_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stOpenLeitaiWindow_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSynHeroHP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSynHeroHP_reflection_ = NULL;
const ::google::protobuf::Descriptor* stRetLeitaiInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRetLeitaiInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetLeitaiInfo_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetLeitaiInfo_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqLeitaiSortList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqLeitaiSortList_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqLeitaiSortList_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqLeitaiSortList_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stLeitaiSortListItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stLeitaiSortListItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* stRetLeitaiSortList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRetLeitaiSortList_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetLeitaiSortList_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetLeitaiSortList_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSendLeitaiResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSendLeitaiResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stSendLeitaiResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSendLeitaiResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRetSendLeitaiResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRetSendLeitaiResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetSendLeitaiResult_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetSendLeitaiResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetSendLeitaiResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stNotifySelectLeitaiMode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stNotifySelectLeitaiMode_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifySelectLeitaiMode_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifySelectLeitaiMode_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSelectLeiTaiMode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSelectLeiTaiMode_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stSelectLeiTaiMode_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSelectLeiTaiMode_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSelectLeiTaiModeResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSelectLeiTaiModeResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stSelectLeiTaiModeResult_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSelectLeiTaiModeResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSelectLeiTaiModeResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stResetLeitaiInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stResetLeitaiInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stResetLeitaiInfo_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stResetLeitaiInfo_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stResetLeitaiInfoResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stResetLeitaiInfoResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stResetLeitaiInfoResult_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stResetLeitaiInfoResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stResetLeitaiInfoResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqDrawHeroSortList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqDrawHeroSortList_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqDrawHeroSortList_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqDrawHeroSortList_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stDrawHeroSortItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stDrawHeroSortItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* stDrawHeroSortList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stDrawHeroSortList_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stDrawHeroSortList_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stDrawHeroSortList_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqOne2OnePVPMatch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqOne2OnePVPMatch_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqOne2OnePVPMatch_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqOne2OnePVPMatch_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stOne2OnePVPMatchResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stOne2OnePVPMatchResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stOne2OnePVPMatchResult_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stOne2OnePVPMatchResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stOne2OnePVPMatchResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stCancelOne2OnePVPMatch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stCancelOne2OnePVPMatch_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stCancelOne2OnePVPMatch_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stCancelOne2OnePVPMatch_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stCancelOne2OnePVPResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stCancelOne2OnePVPResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stCancelOne2OnePVPResult_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stCancelOne2OnePVPResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stCancelOne2OnePVPResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqMySortListInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqMySortListInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqMySortListInfo_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqMySortListInfo_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRetMySortListInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRetMySortListInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetMySortListInfo_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetMySortListInfo_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stLeitaiMoveHero2BattlePos_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stLeitaiMoveHero2BattlePos_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stLeitaiMoveHero2BattlePos_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stLeitaiMoveHero2BattlePos_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stLeitaiMoveHero2BattlePosError_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stLeitaiMoveHero2BattlePosError_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stLeitaiMoveHero2BattlePosError_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stLeitaiMoveHero2BattlePosError_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stLeitaiMoveHero2BattlePosError_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stLeitaiCancelGoOutForBattle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stLeitaiCancelGoOutForBattle_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stLeitaiCancelGoOutForBattle_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stLeitaiCancelGoOutForBattle_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stLeitaiCancelGoOutForBattleResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stLeitaiCancelGoOutForBattleResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stLeitaiCancelGoOutForBattleResult_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stLeitaiCancelGoOutForBattleResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stLeitaiCancelGoOutForBattleResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stCommitArenaResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stCommitArenaResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stCommitArenaResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stCommitArenaResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRetCommintArenaResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRetCommintArenaResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetCommintArenaResult_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetCommintArenaResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetCommintArenaResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqEnterLeitaiScene_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqEnterLeitaiScene_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqEnterLeitaiScene_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqEnterLeitaiScene_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqResetLeitaiBuff_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqResetLeitaiBuff_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqResetLeitaiBuff_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqResetLeitaiBuff_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stResetLeitaiBuffResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stResetLeitaiBuffResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stResetLeitaiBuffResult_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stResetLeitaiBuffResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stResetLeitaiBuffResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqBuffResetTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqBuffResetTime_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqBuffResetTime_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqBuffResetTime_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRetBuffResetTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRetBuffResetTime_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetBuffResetTime_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetBuffResetTime_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stArenaReachNewRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stArenaReachNewRank_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stArenaReachNewRank_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stArenaReachNewRank_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqResetArenaChallengeNum_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqResetArenaChallengeNum_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqResetArenaChallengeNum_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqResetArenaChallengeNum_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stResetArenaChallengeNunResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stResetArenaChallengeNunResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stResetArenaChallengeNunResult_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stResetArenaChallengeNunResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stResetArenaChallengeNunResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqClearArenaCD_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqClearArenaCD_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqClearArenaCD_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqClearArenaCD_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stClearArenaCDResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stClearArenaCDResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stClearArenaCDResult_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stClearArenaCDResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stClearArenaCDResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqOpenSvrBPRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqOpenSvrBPRank_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqOpenSvrBPRank_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqOpenSvrBPRank_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stBPRankItemInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stBPRankItemInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* stRetOpenSvrBPRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRetOpenSvrBPRank_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetOpenSvrBPRank_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetOpenSvrBPRank_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqExpeditionInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqExpeditionInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqExpeditionInfo_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqExpeditionInfo_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stExpeditionItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stExpeditionItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* stRetExpeditionInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRetExpeditionInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetExpeditionInfo_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetExpeditionInfo_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetExpeditionInfo_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqExpedition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqExpedition_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqExpedition_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqExpedition_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRetExpedition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRetExpedition_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetExpedition_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetExpedition_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetExpedition_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqExpeditionReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqExpeditionReward_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqExpeditionReward_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqExpeditionReward_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRetExpeditionReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRetExpeditionReward_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetExpeditionReward_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetExpeditionReward_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetExpeditionReward_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqFastExpedition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqFastExpedition_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqFastExpedition_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqFastExpedition_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRetFastExpedition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRetFastExpedition_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetFastExpedition_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetFastExpedition_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetFastExpedition_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqCancelExpedition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqCancelExpedition_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqCancelExpedition_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqCancelExpedition_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRetCancelExpedition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRetCancelExpedition_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetCancelExpedition_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetCancelExpedition_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetCancelExpedition_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqExpeditionSummary_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqExpeditionSummary_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqExpeditionSummary_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqExpeditionSummary_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRetExpeditionSummary_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRetExpeditionSummary_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetExpeditionSummary_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetExpeditionSummary_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetExpeditionSummary_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqGloryfashionSortList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqGloryfashionSortList_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqGloryfashionSortList_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqGloryfashionSortList_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stGloryfashionSortList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stGloryfashionSortList_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stGloryfashionSortList_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stGloryfashionSortList_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqEnterEmeraldDream_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqEnterEmeraldDream_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqEnterEmeraldDream_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqEnterEmeraldDream_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stEnterEmeraldDreamResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stEnterEmeraldDreamResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stEnterEmeraldDreamResult_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stEnterEmeraldDreamResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stEnterEmeraldDreamResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stResetFightNum_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stResetFightNum_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stResetFightNum_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stResetFightNum_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stResetFightNumResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stResetFightNumResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stResetFightNumResult_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stResetFightNumResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stResetFightNumResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqEmeraldDreamSortList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqEmeraldDreamSortList_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqEmeraldDreamSortList_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqEmeraldDreamSortList_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* SortListInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SortListInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* stEmeraldDreamSortList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stEmeraldDreamSortList_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stEmeraldDreamSortList_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stEmeraldDreamSortList_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSendRankInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSendRankInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stSendRankInfo_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSendRankInfo_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqSurplusNum_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqSurplusNum_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqSurplusNum_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqSurplusNum_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* userSortInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  userSortInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* stSurplusNumResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSurplusNumResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stSurplusNumResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSurplusNumResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSynChampionInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSynChampionInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* stMyIntegralAndNum_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stMyIntegralAndNum_reflection_ = NULL;
const ::google::protobuf::Descriptor* stReqOpenLeagueWindow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqOpenLeagueWindow_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqOpenLeagueWindow_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqOpenLeagueWindow_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stOpenLeagueWindowResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stOpenLeagueWindowResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stOpenLeagueWindowResult_eStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stOpenLeagueWindowResult_eSession_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stOpenLeagueWindowResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stOpenLeagueWindowResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqHeroLeagueMatch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqHeroLeagueMatch_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqHeroLeagueMatch_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqHeroLeagueMatch_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stHeroLeagueMatchResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stHeroLeagueMatchResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stHeroLeagueMatchResult_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stHeroLeagueMatchResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stHeroLeagueMatchResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqMenberInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqMenberInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqMenberInfo_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqMenberInfo_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stMemberinfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stMemberinfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stMemberinfo_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stMemberinfo_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stCancelHeroLeagueMatch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stCancelHeroLeagueMatch_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stCancelHeroLeagueMatch_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stCancelHeroLeagueMatch_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stCanceHeroLeagueResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stCanceHeroLeagueResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stCanceHeroLeagueResult_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stCanceHeroLeagueResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stCanceHeroLeagueResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqQualifiedList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqQualifiedList_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqQualifiedList_eSession_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqQualifiedList_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqQualifiedList_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRoleBasicInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRoleBasicInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRoleBasicInfo_eCompleteState_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stTeam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stTeam_reflection_ = NULL;
const ::google::protobuf::Descriptor* stQualifiedListResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stQualifiedListResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stQualifiedListResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stQualifiedListResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqWorship_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqWorship_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqWorship_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqWorship_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stWorskipResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stWorskipResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stWorskipResult_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stWorskipResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stWorskipResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqHeroList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqHeroList_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqHeroList_stType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqHeroList_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqHeroList_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRankInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRankInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* stHeroListResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stHeroListResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stHeroListResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stHeroListResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqRegister_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqRegister_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqRegister_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqRegister_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRegisrerResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRegisrerResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRegisrerResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRegisrerResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stArenaResultNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stArenaResultNotify_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stArenaResultNotify_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stArenaResultNotify_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stArenaResultNotify_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqPubLogIn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqPubLogIn_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqPubLogIn_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqPubLogIn_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqPubLogOut_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqPubLogOut_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqPubLogOut_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqPubLogOut_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRemoveModel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRemoveModel_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRemoveModel_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRemoveModel_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stLeitaiResultNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stLeitaiResultNotify_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stLeitaiResultNotify_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stLeitaiResultNotify_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stLeitaiResultNotify_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqRedPoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqRedPoint_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqRedPoint_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqRedPoint_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRedPointResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRedPointResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRedPointResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRedPointResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqDragonNest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqDragonNest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqDragonNest_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqDragonNest_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRetDragonNest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRetDragonNest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetDragonNest_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetDragonNest_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqChallengeDragonNest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqChallengeDragonNest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqChallengeDragonNest_eDragonType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqChallengeDragonNest_eDifficultyType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqChallengeDragonNest_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqChallengeDragonNest_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRetChallengeDragonNest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRetChallengeDragonNest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetChallengeDragonNest_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetChallengeDragonNest_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetChallengeDragonNest_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqResetChallengeDragonNest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqResetChallengeDragonNest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqResetChallengeDragonNest_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqResetChallengeDragonNest_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRetResetChallengeDragonNest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRetResetChallengeDragonNest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetResetChallengeDragonNest_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetResetChallengeDragonNest_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetResetChallengeDragonNest_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqEnterResBattle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqEnterResBattle_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqEnterResBattle_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqEnterResBattle_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRetEnterResBattle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRetEnterResBattle_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetEnterResBattle_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetEnterResBattle_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetEnterResBattle_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqCurResBattleGloryRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqCurResBattleGloryRank_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqCurResBattleGloryRank_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqCurResBattleGloryRank_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stResBattleGloryRankMemInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stResBattleGloryRankMemInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* stRetCurResBattleGloryRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRetCurResBattleGloryRank_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetCurResBattleGloryRank_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetCurResBattleGloryRank_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqResBattleRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqResBattleRank_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqResBattleRank_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqResBattleRank_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRetResBattleRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRetResBattleRank_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetResBattleRank_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetResBattleRank_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqResBattleKing_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqResBattleKing_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqResBattleKing_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqResBattleKing_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stResBattleRankMemInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stResBattleRankMemInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* stRetResBattleKing_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRetResBattleKing_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetResBattleKing_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetResBattleKing_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqResBattleProstate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqResBattleProstate_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqResBattleProstate_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqResBattleProstate_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRetResBattleProstate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRetResBattleProstate_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetResBattleProstate_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetResBattleProstate_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetResBattleProstate_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqResBattleRelive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqResBattleRelive_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqResBattleRelive_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqResBattleRelive_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRetResBattleRelive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRetResBattleRelive_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetResBattleRelive_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetResBattleRelive_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetResBattleRelive_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqLeaveResBattle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqLeaveResBattle_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqLeaveResBattle_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqLeaveResBattle_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRetLeaveResBattle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRetLeaveResBattle_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetLeaveResBattle_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetLeaveResBattle_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetLeaveResBattle_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqRecvResBattleRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqRecvResBattleRes_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqRecvResBattleRes_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqRecvResBattleRes_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stResBattleResItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stResBattleResItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* stRetRecvResBattleRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRetRecvResBattleRes_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetRecvResBattleRes_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetRecvResBattleRes_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSendResBattleStreakNum_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSendResBattleStreakNum_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stSendResBattleStreakNum_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSendResBattleStreakNum_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSendResBattleNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSendResBattleNotice_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stSendResBattleNotice_eNotice_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSendResBattleNotice_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSendResBattleNotice_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stNotityResBattleKillInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stNotityResBattleKillInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotityResBattleKillInfo_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotityResBattleKillInfo_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stBattleResRefreshItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stBattleResRefreshItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* stNotityResBattleResRefresh_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stNotityResBattleResRefresh_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotityResBattleResRefresh_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotityResBattleResRefresh_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stNotityResBattleResEmpty_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stNotityResBattleResEmpty_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotityResBattleResEmpty_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotityResBattleResEmpty_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stNotityResBattleGlory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stNotityResBattleGlory_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotityResBattleGlory_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotityResBattleGlory_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stBroadCastResBattleInvite_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stBroadCastResBattleInvite_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stBroadCastResBattleInvite_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stBroadCastResBattleInvite_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRetResBattleReceiveInvite_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRetResBattleReceiveInvite_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetResBattleReceiveInvite_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetResBattleReceiveInvite_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stResBattleReplyInviteJoin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stResBattleReplyInviteJoin_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stResBattleReplyInviteJoin_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stResBattleReplyInviteJoin_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stResBattleInviteJoinRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stResBattleInviteJoinRes_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stResBattleInviteJoinRes_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stResBattleInviteJoinRes_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stResBattleInviteJoinRes_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqStoneCopyMapInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqStoneCopyMapInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqStoneCopyMapInfo_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqStoneCopyMapInfo_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stStoneCopyMapInfoResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stStoneCopyMapInfoResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stStoneCopyMapInfoResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stStoneCopyMapInfoResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqChallengeStoneCopyMap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqChallengeStoneCopyMap_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqChallengeStoneCopyMap_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqChallengeStoneCopyMap_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stChallengeStoneCopyMap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stChallengeStoneCopyMap_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stChallengeStoneCopyMap_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stChallengeStoneCopyMap_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stChallengeStoneCopyMap_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqResetStoneCopyMapNum_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqResetStoneCopyMapNum_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqResetStoneCopyMapNum_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqResetStoneCopyMapNum_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stResetStoneCopyMapNum_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stResetStoneCopyMapNum_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stResetStoneCopyMapNum_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stResetStoneCopyMapNum_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stResetStoneCopyMapNum_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqResBattleResource_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqResBattleResource_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqResBattleResource_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqResBattleResource_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRetResBattleResource_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRetResBattleResource_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetResBattleResource_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetResBattleResource_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetResBattleResource_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stResBattleEnd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stResBattleEnd_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stResBattleEnd_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stResBattleEnd_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* eOne2OneSortListType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* eLeitaiMode_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_SortList_2eproto() {
  protobuf_AddDesc_SortList_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SortList.proto");
  GOOGLE_CHECK(file != NULL);
  stReqLevelSortList_descriptor_ = file->message_type(0);
  static const int stReqLevelSortList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqLevelSortList, fromrank_),
  };
  stReqLevelSortList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqLevelSortList_descriptor_,
      stReqLevelSortList::default_instance_,
      stReqLevelSortList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqLevelSortList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqLevelSortList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqLevelSortList));
  stReqLevelSortList_ProtoModID_descriptor_ = stReqLevelSortList_descriptor_->enum_type(0);
  stReqLevelSortList_ProtoFunID_descriptor_ = stReqLevelSortList_descriptor_->enum_type(1);
  stSynLevelSortItem_descriptor_ = file->message_type(1);
  static const int stSynLevelSortItem_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynLevelSortItem, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynLevelSortItem, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynLevelSortItem, guildname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynLevelSortItem, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynLevelSortItem, job_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynLevelSortItem, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynLevelSortItem, photoid_),
  };
  stSynLevelSortItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSynLevelSortItem_descriptor_,
      stSynLevelSortItem::default_instance_,
      stSynLevelSortItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynLevelSortItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynLevelSortItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSynLevelSortItem));
  stRetLevelSortList_descriptor_ = file->message_type(2);
  static const int stRetLevelSortList_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetLevelSortList, beginrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetLevelSortList, myrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetLevelSortList, sortitem_),
  };
  stRetLevelSortList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRetLevelSortList_descriptor_,
      stRetLevelSortList::default_instance_,
      stRetLevelSortList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetLevelSortList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetLevelSortList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRetLevelSortList));
  stRetLevelSortList_ProtoModID_descriptor_ = stRetLevelSortList_descriptor_->enum_type(0);
  stRetLevelSortList_ProtoFunID_descriptor_ = stRetLevelSortList_descriptor_->enum_type(1);
  stReqBattlePowerSortList_descriptor_ = file->message_type(3);
  static const int stReqBattlePowerSortList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqBattlePowerSortList, fromrank_),
  };
  stReqBattlePowerSortList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqBattlePowerSortList_descriptor_,
      stReqBattlePowerSortList::default_instance_,
      stReqBattlePowerSortList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqBattlePowerSortList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqBattlePowerSortList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqBattlePowerSortList));
  stReqBattlePowerSortList_ProtoModID_descriptor_ = stReqBattlePowerSortList_descriptor_->enum_type(0);
  stReqBattlePowerSortList_ProtoFunID_descriptor_ = stReqBattlePowerSortList_descriptor_->enum_type(1);
  stSynBattlePowerSortItem_descriptor_ = file->message_type(4);
  static const int stSynBattlePowerSortItem_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynBattlePowerSortItem, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynBattlePowerSortItem, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynBattlePowerSortItem, guildname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynBattlePowerSortItem, battlepower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynBattlePowerSortItem, job_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynBattlePowerSortItem, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynBattlePowerSortItem, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynBattlePowerSortItem, photoid_),
  };
  stSynBattlePowerSortItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSynBattlePowerSortItem_descriptor_,
      stSynBattlePowerSortItem::default_instance_,
      stSynBattlePowerSortItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynBattlePowerSortItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynBattlePowerSortItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSynBattlePowerSortItem));
  stRetBattlePowerSortList_descriptor_ = file->message_type(5);
  static const int stRetBattlePowerSortList_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetBattlePowerSortList, beginrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetBattlePowerSortList, myrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetBattlePowerSortList, sortitem_),
  };
  stRetBattlePowerSortList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRetBattlePowerSortList_descriptor_,
      stRetBattlePowerSortList::default_instance_,
      stRetBattlePowerSortList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetBattlePowerSortList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetBattlePowerSortList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRetBattlePowerSortList));
  stRetBattlePowerSortList_ProtoModID_descriptor_ = stRetBattlePowerSortList_descriptor_->enum_type(0);
  stRetBattlePowerSortList_ProtoFunID_descriptor_ = stRetBattlePowerSortList_descriptor_->enum_type(1);
  stReqCopymapSortList_descriptor_ = file->message_type(6);
  static const int stReqCopymapSortList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqCopymapSortList, fromrank_),
  };
  stReqCopymapSortList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqCopymapSortList_descriptor_,
      stReqCopymapSortList::default_instance_,
      stReqCopymapSortList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqCopymapSortList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqCopymapSortList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqCopymapSortList));
  stReqCopymapSortList_ProtoModID_descriptor_ = stReqCopymapSortList_descriptor_->enum_type(0);
  stReqCopymapSortList_ProtoFunID_descriptor_ = stReqCopymapSortList_descriptor_->enum_type(1);
  stCopyMapSortItem_descriptor_ = file->message_type(7);
  static const int stCopyMapSortItem_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCopyMapSortItem, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCopyMapSortItem, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCopyMapSortItem, guildname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCopyMapSortItem, starnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCopyMapSortItem, job_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCopyMapSortItem, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCopyMapSortItem, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCopyMapSortItem, photoid_),
  };
  stCopyMapSortItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stCopyMapSortItem_descriptor_,
      stCopyMapSortItem::default_instance_,
      stCopyMapSortItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCopyMapSortItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCopyMapSortItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stCopyMapSortItem));
  stRetCopyMapSortList_descriptor_ = file->message_type(8);
  static const int stRetCopyMapSortList_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetCopyMapSortList, beginrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetCopyMapSortList, myrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetCopyMapSortList, sortitem_),
  };
  stRetCopyMapSortList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRetCopyMapSortList_descriptor_,
      stRetCopyMapSortList::default_instance_,
      stRetCopyMapSortList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetCopyMapSortList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetCopyMapSortList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRetCopyMapSortList));
  stRetCopyMapSortList_ProtoModID_descriptor_ = stRetCopyMapSortList_descriptor_->enum_type(0);
  stRetCopyMapSortList_ProtoFunID_descriptor_ = stRetCopyMapSortList_descriptor_->enum_type(1);
  stSynArenaSortInfo_descriptor_ = file->message_type(9);
  static const int stSynArenaSortInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynArenaSortInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynArenaSortInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynArenaSortInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynArenaSortInfo, job_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynArenaSortInfo, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynArenaSortInfo, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynArenaSortInfo, photoid_),
  };
  stSynArenaSortInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSynArenaSortInfo_descriptor_,
      stSynArenaSortInfo::default_instance_,
      stSynArenaSortInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynArenaSortInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynArenaSortInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSynArenaSortInfo));
  stReqArenaPKList_descriptor_ = file->message_type(10);
  static const int stReqArenaPKList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqArenaPKList, charid_),
  };
  stReqArenaPKList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqArenaPKList_descriptor_,
      stReqArenaPKList::default_instance_,
      stReqArenaPKList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqArenaPKList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqArenaPKList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqArenaPKList));
  stReqArenaPKList_ProtoModID_descriptor_ = stReqArenaPKList_descriptor_->enum_type(0);
  stReqArenaPKList_ProtoFunID_descriptor_ = stReqArenaPKList_descriptor_->enum_type(1);
  stRetArenaPKList_descriptor_ = file->message_type(11);
  static const int stRetArenaPKList_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetArenaPKList, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetArenaPKList, myrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetArenaPKList, topten_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetArenaPKList, cd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetArenaPKList, challengenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetArenaPKList, resetnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetArenaPKList, totalusernum_),
  };
  stRetArenaPKList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRetArenaPKList_descriptor_,
      stRetArenaPKList::default_instance_,
      stRetArenaPKList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetArenaPKList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetArenaPKList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRetArenaPKList));
  stRetArenaPKList_ProtoModID_descriptor_ = stRetArenaPKList_descriptor_->enum_type(0);
  stRetArenaPKList_ProtoFunID_descriptor_ = stRetArenaPKList_descriptor_->enum_type(1);
  stReqArenaSortList_descriptor_ = file->message_type(12);
  static const int stReqArenaSortList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqArenaSortList, beginrank_),
  };
  stReqArenaSortList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqArenaSortList_descriptor_,
      stReqArenaSortList::default_instance_,
      stReqArenaSortList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqArenaSortList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqArenaSortList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqArenaSortList));
  stReqArenaSortList_ProtoModID_descriptor_ = stReqArenaSortList_descriptor_->enum_type(0);
  stReqArenaSortList_ProtoFunID_descriptor_ = stReqArenaSortList_descriptor_->enum_type(1);
  stRetArenaSortList_descriptor_ = file->message_type(13);
  static const int stRetArenaSortList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetArenaSortList, sortinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetArenaSortList, myrank_),
  };
  stRetArenaSortList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRetArenaSortList_descriptor_,
      stRetArenaSortList::default_instance_,
      stRetArenaSortList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetArenaSortList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetArenaSortList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRetArenaSortList));
  stRetArenaSortList_ProtoModID_descriptor_ = stRetArenaSortList_descriptor_->enum_type(0);
  stRetArenaSortList_ProtoFunID_descriptor_ = stRetArenaSortList_descriptor_->enum_type(1);
  stSynOne2OnePVPInfo_descriptor_ = file->message_type(14);
  static const int stSynOne2OnePVPInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynOne2OnePVPInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynOne2OnePVPInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynOne2OnePVPInfo, job_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynOne2OnePVPInfo, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynOne2OnePVPInfo, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynOne2OnePVPInfo, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynOne2OnePVPInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynOne2OnePVPInfo, photoid_),
  };
  stSynOne2OnePVPInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSynOne2OnePVPInfo_descriptor_,
      stSynOne2OnePVPInfo::default_instance_,
      stSynOne2OnePVPInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynOne2OnePVPInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynOne2OnePVPInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSynOne2OnePVPInfo));
  stReqOne2OnePVPSortList_descriptor_ = file->message_type(15);
  static const int stReqOne2OnePVPSortList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqOne2OnePVPSortList, beginrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqOne2OnePVPSortList, etype_),
  };
  stReqOne2OnePVPSortList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqOne2OnePVPSortList_descriptor_,
      stReqOne2OnePVPSortList::default_instance_,
      stReqOne2OnePVPSortList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqOne2OnePVPSortList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqOne2OnePVPSortList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqOne2OnePVPSortList));
  stReqOne2OnePVPSortList_ProtoModID_descriptor_ = stReqOne2OnePVPSortList_descriptor_->enum_type(0);
  stReqOne2OnePVPSortList_ProtoFunID_descriptor_ = stReqOne2OnePVPSortList_descriptor_->enum_type(1);
  stRetOne2OnePVPSortList_descriptor_ = file->message_type(16);
  static const int stRetOne2OnePVPSortList_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetOne2OnePVPSortList, sortlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetOne2OnePVPSortList, myrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetOne2OnePVPSortList, lastweeksortlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetOne2OnePVPSortList, etype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetOne2OnePVPSortList, score_),
  };
  stRetOne2OnePVPSortList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRetOne2OnePVPSortList_descriptor_,
      stRetOne2OnePVPSortList::default_instance_,
      stRetOne2OnePVPSortList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetOne2OnePVPSortList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetOne2OnePVPSortList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRetOne2OnePVPSortList));
  stRetOne2OnePVPSortList_ProtoModID_descriptor_ = stRetOne2OnePVPSortList_descriptor_->enum_type(0);
  stRetOne2OnePVPSortList_ProtoFunID_descriptor_ = stRetOne2OnePVPSortList_descriptor_->enum_type(1);
  stChallengeArenaUser_descriptor_ = file->message_type(17);
  static const int stChallengeArenaUser_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stChallengeArenaUser, charid_),
  };
  stChallengeArenaUser_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stChallengeArenaUser_descriptor_,
      stChallengeArenaUser::default_instance_,
      stChallengeArenaUser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stChallengeArenaUser, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stChallengeArenaUser, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stChallengeArenaUser));
  stChallengeArenaUser_ProtoModID_descriptor_ = stChallengeArenaUser_descriptor_->enum_type(0);
  stChallengeArenaUser_ProtoFunID_descriptor_ = stChallengeArenaUser_descriptor_->enum_type(1);
  stChallengeArenaUserResult_descriptor_ = file->message_type(18);
  static const int stChallengeArenaUserResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stChallengeArenaUserResult, result_),
  };
  stChallengeArenaUserResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stChallengeArenaUserResult_descriptor_,
      stChallengeArenaUserResult::default_instance_,
      stChallengeArenaUserResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stChallengeArenaUserResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stChallengeArenaUserResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stChallengeArenaUserResult));
  stChallengeArenaUserResult_eResult_descriptor_ = stChallengeArenaUserResult_descriptor_->enum_type(0);
  stChallengeArenaUserResult_ProtoModID_descriptor_ = stChallengeArenaUserResult_descriptor_->enum_type(1);
  stChallengeArenaUserResult_ProtoFunID_descriptor_ = stChallengeArenaUserResult_descriptor_->enum_type(2);
  stChallegeLeitaiUser_descriptor_ = file->message_type(19);
  static const int stChallegeLeitaiUser_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stChallegeLeitaiUser, charid_),
  };
  stChallegeLeitaiUser_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stChallegeLeitaiUser_descriptor_,
      stChallegeLeitaiUser::default_instance_,
      stChallegeLeitaiUser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stChallegeLeitaiUser, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stChallegeLeitaiUser, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stChallegeLeitaiUser));
  stChallegeLeitaiUser_ProtoModID_descriptor_ = stChallegeLeitaiUser_descriptor_->enum_type(0);
  stChallegeLeitaiUser_ProtoFunID_descriptor_ = stChallegeLeitaiUser_descriptor_->enum_type(1);
  stChallegeLeitaiUserResult_descriptor_ = file->message_type(20);
  static const int stChallegeLeitaiUserResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stChallegeLeitaiUserResult, result_),
  };
  stChallegeLeitaiUserResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stChallegeLeitaiUserResult_descriptor_,
      stChallegeLeitaiUserResult::default_instance_,
      stChallegeLeitaiUserResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stChallegeLeitaiUserResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stChallegeLeitaiUserResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stChallegeLeitaiUserResult));
  stChallegeLeitaiUserResult_eResult_descriptor_ = stChallegeLeitaiUserResult_descriptor_->enum_type(0);
  stChallegeLeitaiUserResult_ProtoModID_descriptor_ = stChallegeLeitaiUserResult_descriptor_->enum_type(1);
  stChallegeLeitaiUserResult_ProtoFunID_descriptor_ = stChallegeLeitaiUserResult_descriptor_->enum_type(2);
  stOpenLeitaiWindow_descriptor_ = file->message_type(21);
  static const int stOpenLeitaiWindow_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOpenLeitaiWindow, charid_),
  };
  stOpenLeitaiWindow_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stOpenLeitaiWindow_descriptor_,
      stOpenLeitaiWindow::default_instance_,
      stOpenLeitaiWindow_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOpenLeitaiWindow, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOpenLeitaiWindow, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stOpenLeitaiWindow));
  stOpenLeitaiWindow_ProtoModID_descriptor_ = stOpenLeitaiWindow_descriptor_->enum_type(0);
  stOpenLeitaiWindow_ProtoFunID_descriptor_ = stOpenLeitaiWindow_descriptor_->enum_type(1);
  stSynHeroHP_descriptor_ = file->message_type(22);
  static const int stSynHeroHP_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynHeroHP, heroid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynHeroHP, curhp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynHeroHP, maxhp_),
  };
  stSynHeroHP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSynHeroHP_descriptor_,
      stSynHeroHP::default_instance_,
      stSynHeroHP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynHeroHP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynHeroHP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSynHeroHP));
  stRetLeitaiInfo_descriptor_ = file->message_type(23);
  static const int stRetLeitaiInfo_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetLeitaiInfo, challengenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetLeitaiInfo, myhp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetLeitaiInfo, herohps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetLeitaiInfo, mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetLeitaiInfo, pos1id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetLeitaiInfo, pos2id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetLeitaiInfo, pos3id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetLeitaiInfo, pos4id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetLeitaiInfo, refreshbuffremaintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetLeitaiInfo, buffid_),
  };
  stRetLeitaiInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRetLeitaiInfo_descriptor_,
      stRetLeitaiInfo::default_instance_,
      stRetLeitaiInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetLeitaiInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetLeitaiInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRetLeitaiInfo));
  stRetLeitaiInfo_ProtoModID_descriptor_ = stRetLeitaiInfo_descriptor_->enum_type(0);
  stRetLeitaiInfo_ProtoFunID_descriptor_ = stRetLeitaiInfo_descriptor_->enum_type(1);
  stReqLeitaiSortList_descriptor_ = file->message_type(24);
  static const int stReqLeitaiSortList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqLeitaiSortList, beginrank_),
  };
  stReqLeitaiSortList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqLeitaiSortList_descriptor_,
      stReqLeitaiSortList::default_instance_,
      stReqLeitaiSortList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqLeitaiSortList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqLeitaiSortList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqLeitaiSortList));
  stReqLeitaiSortList_ProtoModID_descriptor_ = stReqLeitaiSortList_descriptor_->enum_type(0);
  stReqLeitaiSortList_ProtoFunID_descriptor_ = stReqLeitaiSortList_descriptor_->enum_type(1);
  stLeitaiSortListItem_descriptor_ = file->message_type(25);
  static const int stLeitaiSortListItem_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stLeitaiSortListItem, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stLeitaiSortListItem, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stLeitaiSortListItem, usetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stLeitaiSortListItem, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stLeitaiSortListItem, job_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stLeitaiSortListItem, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stLeitaiSortListItem, photoid_),
  };
  stLeitaiSortListItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stLeitaiSortListItem_descriptor_,
      stLeitaiSortListItem::default_instance_,
      stLeitaiSortListItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stLeitaiSortListItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stLeitaiSortListItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stLeitaiSortListItem));
  stRetLeitaiSortList_descriptor_ = file->message_type(26);
  static const int stRetLeitaiSortList_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetLeitaiSortList, sortlistitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetLeitaiSortList, beginrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetLeitaiSortList, myrank_),
  };
  stRetLeitaiSortList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRetLeitaiSortList_descriptor_,
      stRetLeitaiSortList::default_instance_,
      stRetLeitaiSortList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetLeitaiSortList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetLeitaiSortList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRetLeitaiSortList));
  stRetLeitaiSortList_ProtoModID_descriptor_ = stRetLeitaiSortList_descriptor_->enum_type(0);
  stRetLeitaiSortList_ProtoFunID_descriptor_ = stRetLeitaiSortList_descriptor_->enum_type(1);
  stSendLeitaiResult_descriptor_ = file->message_type(27);
  static const int stSendLeitaiResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendLeitaiResult, herohp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendLeitaiResult, curuserhp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendLeitaiResult, usetime_),
  };
  stSendLeitaiResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSendLeitaiResult_descriptor_,
      stSendLeitaiResult::default_instance_,
      stSendLeitaiResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendLeitaiResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendLeitaiResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSendLeitaiResult));
  stSendLeitaiResult_ProtoModID_descriptor_ = stSendLeitaiResult_descriptor_->enum_type(0);
  stSendLeitaiResult_ProtoFunID_descriptor_ = stSendLeitaiResult_descriptor_->enum_type(1);
  stRetSendLeitaiResult_descriptor_ = file->message_type(28);
  static const int stRetSendLeitaiResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetSendLeitaiResult, result_),
  };
  stRetSendLeitaiResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRetSendLeitaiResult_descriptor_,
      stRetSendLeitaiResult::default_instance_,
      stRetSendLeitaiResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetSendLeitaiResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetSendLeitaiResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRetSendLeitaiResult));
  stRetSendLeitaiResult_eResult_descriptor_ = stRetSendLeitaiResult_descriptor_->enum_type(0);
  stRetSendLeitaiResult_ProtoModID_descriptor_ = stRetSendLeitaiResult_descriptor_->enum_type(1);
  stRetSendLeitaiResult_ProtoFunID_descriptor_ = stRetSendLeitaiResult_descriptor_->enum_type(2);
  stNotifySelectLeitaiMode_descriptor_ = file->message_type(29);
  static const int stNotifySelectLeitaiMode_offsets_[1] = {
  };
  stNotifySelectLeitaiMode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stNotifySelectLeitaiMode_descriptor_,
      stNotifySelectLeitaiMode::default_instance_,
      stNotifySelectLeitaiMode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifySelectLeitaiMode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifySelectLeitaiMode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stNotifySelectLeitaiMode));
  stNotifySelectLeitaiMode_ProtoModID_descriptor_ = stNotifySelectLeitaiMode_descriptor_->enum_type(0);
  stNotifySelectLeitaiMode_ProtoFunID_descriptor_ = stNotifySelectLeitaiMode_descriptor_->enum_type(1);
  stSelectLeiTaiMode_descriptor_ = file->message_type(30);
  static const int stSelectLeiTaiMode_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSelectLeiTaiMode, mode_),
  };
  stSelectLeiTaiMode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSelectLeiTaiMode_descriptor_,
      stSelectLeiTaiMode::default_instance_,
      stSelectLeiTaiMode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSelectLeiTaiMode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSelectLeiTaiMode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSelectLeiTaiMode));
  stSelectLeiTaiMode_ProtoModID_descriptor_ = stSelectLeiTaiMode_descriptor_->enum_type(0);
  stSelectLeiTaiMode_ProtoFunID_descriptor_ = stSelectLeiTaiMode_descriptor_->enum_type(1);
  stSelectLeiTaiModeResult_descriptor_ = file->message_type(31);
  static const int stSelectLeiTaiModeResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSelectLeiTaiModeResult, result_),
  };
  stSelectLeiTaiModeResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSelectLeiTaiModeResult_descriptor_,
      stSelectLeiTaiModeResult::default_instance_,
      stSelectLeiTaiModeResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSelectLeiTaiModeResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSelectLeiTaiModeResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSelectLeiTaiModeResult));
  stSelectLeiTaiModeResult_eResult_descriptor_ = stSelectLeiTaiModeResult_descriptor_->enum_type(0);
  stSelectLeiTaiModeResult_ProtoModID_descriptor_ = stSelectLeiTaiModeResult_descriptor_->enum_type(1);
  stSelectLeiTaiModeResult_ProtoFunID_descriptor_ = stSelectLeiTaiModeResult_descriptor_->enum_type(2);
  stResetLeitaiInfo_descriptor_ = file->message_type(32);
  static const int stResetLeitaiInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResetLeitaiInfo, charid_),
  };
  stResetLeitaiInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stResetLeitaiInfo_descriptor_,
      stResetLeitaiInfo::default_instance_,
      stResetLeitaiInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResetLeitaiInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResetLeitaiInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stResetLeitaiInfo));
  stResetLeitaiInfo_ProtoModID_descriptor_ = stResetLeitaiInfo_descriptor_->enum_type(0);
  stResetLeitaiInfo_ProtoFunID_descriptor_ = stResetLeitaiInfo_descriptor_->enum_type(1);
  stResetLeitaiInfoResult_descriptor_ = file->message_type(33);
  static const int stResetLeitaiInfoResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResetLeitaiInfoResult, result_),
  };
  stResetLeitaiInfoResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stResetLeitaiInfoResult_descriptor_,
      stResetLeitaiInfoResult::default_instance_,
      stResetLeitaiInfoResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResetLeitaiInfoResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResetLeitaiInfoResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stResetLeitaiInfoResult));
  stResetLeitaiInfoResult_eResult_descriptor_ = stResetLeitaiInfoResult_descriptor_->enum_type(0);
  stResetLeitaiInfoResult_ProtoModID_descriptor_ = stResetLeitaiInfoResult_descriptor_->enum_type(1);
  stResetLeitaiInfoResult_ProtoFunID_descriptor_ = stResetLeitaiInfoResult_descriptor_->enum_type(2);
  stReqDrawHeroSortList_descriptor_ = file->message_type(34);
  static const int stReqDrawHeroSortList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqDrawHeroSortList, fromrank_),
  };
  stReqDrawHeroSortList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqDrawHeroSortList_descriptor_,
      stReqDrawHeroSortList::default_instance_,
      stReqDrawHeroSortList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqDrawHeroSortList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqDrawHeroSortList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqDrawHeroSortList));
  stReqDrawHeroSortList_ProtoModID_descriptor_ = stReqDrawHeroSortList_descriptor_->enum_type(0);
  stReqDrawHeroSortList_ProtoFunID_descriptor_ = stReqDrawHeroSortList_descriptor_->enum_type(1);
  stDrawHeroSortItem_descriptor_ = file->message_type(35);
  static const int stDrawHeroSortItem_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDrawHeroSortItem, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDrawHeroSortItem, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDrawHeroSortItem, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDrawHeroSortItem, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDrawHeroSortItem, job_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDrawHeroSortItem, sex_),
  };
  stDrawHeroSortItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stDrawHeroSortItem_descriptor_,
      stDrawHeroSortItem::default_instance_,
      stDrawHeroSortItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDrawHeroSortItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDrawHeroSortItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stDrawHeroSortItem));
  stDrawHeroSortList_descriptor_ = file->message_type(36);
  static const int stDrawHeroSortList_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDrawHeroSortList, beginrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDrawHeroSortList, sortitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDrawHeroSortList, myrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDrawHeroSortList, score_),
  };
  stDrawHeroSortList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stDrawHeroSortList_descriptor_,
      stDrawHeroSortList::default_instance_,
      stDrawHeroSortList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDrawHeroSortList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDrawHeroSortList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stDrawHeroSortList));
  stDrawHeroSortList_ProtoModID_descriptor_ = stDrawHeroSortList_descriptor_->enum_type(0);
  stDrawHeroSortList_ProtoFunID_descriptor_ = stDrawHeroSortList_descriptor_->enum_type(1);
  stReqOne2OnePVPMatch_descriptor_ = file->message_type(37);
  static const int stReqOne2OnePVPMatch_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqOne2OnePVPMatch, charid_),
  };
  stReqOne2OnePVPMatch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqOne2OnePVPMatch_descriptor_,
      stReqOne2OnePVPMatch::default_instance_,
      stReqOne2OnePVPMatch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqOne2OnePVPMatch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqOne2OnePVPMatch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqOne2OnePVPMatch));
  stReqOne2OnePVPMatch_ProtoModID_descriptor_ = stReqOne2OnePVPMatch_descriptor_->enum_type(0);
  stReqOne2OnePVPMatch_ProtoFunID_descriptor_ = stReqOne2OnePVPMatch_descriptor_->enum_type(1);
  stOne2OnePVPMatchResult_descriptor_ = file->message_type(38);
  static const int stOne2OnePVPMatchResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOne2OnePVPMatchResult, result_),
  };
  stOne2OnePVPMatchResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stOne2OnePVPMatchResult_descriptor_,
      stOne2OnePVPMatchResult::default_instance_,
      stOne2OnePVPMatchResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOne2OnePVPMatchResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOne2OnePVPMatchResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stOne2OnePVPMatchResult));
  stOne2OnePVPMatchResult_eResult_descriptor_ = stOne2OnePVPMatchResult_descriptor_->enum_type(0);
  stOne2OnePVPMatchResult_ProtoModID_descriptor_ = stOne2OnePVPMatchResult_descriptor_->enum_type(1);
  stOne2OnePVPMatchResult_ProtoFunID_descriptor_ = stOne2OnePVPMatchResult_descriptor_->enum_type(2);
  stCancelOne2OnePVPMatch_descriptor_ = file->message_type(39);
  static const int stCancelOne2OnePVPMatch_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCancelOne2OnePVPMatch, charid_),
  };
  stCancelOne2OnePVPMatch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stCancelOne2OnePVPMatch_descriptor_,
      stCancelOne2OnePVPMatch::default_instance_,
      stCancelOne2OnePVPMatch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCancelOne2OnePVPMatch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCancelOne2OnePVPMatch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stCancelOne2OnePVPMatch));
  stCancelOne2OnePVPMatch_ProtoModID_descriptor_ = stCancelOne2OnePVPMatch_descriptor_->enum_type(0);
  stCancelOne2OnePVPMatch_ProtoFunID_descriptor_ = stCancelOne2OnePVPMatch_descriptor_->enum_type(1);
  stCancelOne2OnePVPResult_descriptor_ = file->message_type(40);
  static const int stCancelOne2OnePVPResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCancelOne2OnePVPResult, result_),
  };
  stCancelOne2OnePVPResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stCancelOne2OnePVPResult_descriptor_,
      stCancelOne2OnePVPResult::default_instance_,
      stCancelOne2OnePVPResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCancelOne2OnePVPResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCancelOne2OnePVPResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stCancelOne2OnePVPResult));
  stCancelOne2OnePVPResult_eResult_descriptor_ = stCancelOne2OnePVPResult_descriptor_->enum_type(0);
  stCancelOne2OnePVPResult_ProtoModID_descriptor_ = stCancelOne2OnePVPResult_descriptor_->enum_type(1);
  stCancelOne2OnePVPResult_ProtoFunID_descriptor_ = stCancelOne2OnePVPResult_descriptor_->enum_type(2);
  stReqMySortListInfo_descriptor_ = file->message_type(41);
  static const int stReqMySortListInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqMySortListInfo, charid_),
  };
  stReqMySortListInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqMySortListInfo_descriptor_,
      stReqMySortListInfo::default_instance_,
      stReqMySortListInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqMySortListInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqMySortListInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqMySortListInfo));
  stReqMySortListInfo_ProtoModID_descriptor_ = stReqMySortListInfo_descriptor_->enum_type(0);
  stReqMySortListInfo_ProtoFunID_descriptor_ = stReqMySortListInfo_descriptor_->enum_type(1);
  stRetMySortListInfo_descriptor_ = file->message_type(42);
  static const int stRetMySortListInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetMySortListInfo, one2onepvprank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetMySortListInfo, arenapkrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetMySortListInfo, copymaprank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetMySortListInfo, battlepowerrank_),
  };
  stRetMySortListInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRetMySortListInfo_descriptor_,
      stRetMySortListInfo::default_instance_,
      stRetMySortListInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetMySortListInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetMySortListInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRetMySortListInfo));
  stRetMySortListInfo_ProtoModID_descriptor_ = stRetMySortListInfo_descriptor_->enum_type(0);
  stRetMySortListInfo_ProtoFunID_descriptor_ = stRetMySortListInfo_descriptor_->enum_type(1);
  stLeitaiMoveHero2BattlePos_descriptor_ = file->message_type(43);
  static const int stLeitaiMoveHero2BattlePos_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stLeitaiMoveHero2BattlePos, heroid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stLeitaiMoveHero2BattlePos, pos_),
  };
  stLeitaiMoveHero2BattlePos_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stLeitaiMoveHero2BattlePos_descriptor_,
      stLeitaiMoveHero2BattlePos::default_instance_,
      stLeitaiMoveHero2BattlePos_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stLeitaiMoveHero2BattlePos, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stLeitaiMoveHero2BattlePos, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stLeitaiMoveHero2BattlePos));
  stLeitaiMoveHero2BattlePos_ProtoModID_descriptor_ = stLeitaiMoveHero2BattlePos_descriptor_->enum_type(0);
  stLeitaiMoveHero2BattlePos_ProtoFunID_descriptor_ = stLeitaiMoveHero2BattlePos_descriptor_->enum_type(1);
  stLeitaiMoveHero2BattlePosError_descriptor_ = file->message_type(44);
  static const int stLeitaiMoveHero2BattlePosError_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stLeitaiMoveHero2BattlePosError, result_),
  };
  stLeitaiMoveHero2BattlePosError_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stLeitaiMoveHero2BattlePosError_descriptor_,
      stLeitaiMoveHero2BattlePosError::default_instance_,
      stLeitaiMoveHero2BattlePosError_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stLeitaiMoveHero2BattlePosError, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stLeitaiMoveHero2BattlePosError, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stLeitaiMoveHero2BattlePosError));
  stLeitaiMoveHero2BattlePosError_eResult_descriptor_ = stLeitaiMoveHero2BattlePosError_descriptor_->enum_type(0);
  stLeitaiMoveHero2BattlePosError_ProtoModID_descriptor_ = stLeitaiMoveHero2BattlePosError_descriptor_->enum_type(1);
  stLeitaiMoveHero2BattlePosError_ProtoFunID_descriptor_ = stLeitaiMoveHero2BattlePosError_descriptor_->enum_type(2);
  stLeitaiCancelGoOutForBattle_descriptor_ = file->message_type(45);
  static const int stLeitaiCancelGoOutForBattle_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stLeitaiCancelGoOutForBattle, pos_),
  };
  stLeitaiCancelGoOutForBattle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stLeitaiCancelGoOutForBattle_descriptor_,
      stLeitaiCancelGoOutForBattle::default_instance_,
      stLeitaiCancelGoOutForBattle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stLeitaiCancelGoOutForBattle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stLeitaiCancelGoOutForBattle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stLeitaiCancelGoOutForBattle));
  stLeitaiCancelGoOutForBattle_ProtoModID_descriptor_ = stLeitaiCancelGoOutForBattle_descriptor_->enum_type(0);
  stLeitaiCancelGoOutForBattle_ProtoFunID_descriptor_ = stLeitaiCancelGoOutForBattle_descriptor_->enum_type(1);
  stLeitaiCancelGoOutForBattleResult_descriptor_ = file->message_type(46);
  static const int stLeitaiCancelGoOutForBattleResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stLeitaiCancelGoOutForBattleResult, result_),
  };
  stLeitaiCancelGoOutForBattleResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stLeitaiCancelGoOutForBattleResult_descriptor_,
      stLeitaiCancelGoOutForBattleResult::default_instance_,
      stLeitaiCancelGoOutForBattleResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stLeitaiCancelGoOutForBattleResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stLeitaiCancelGoOutForBattleResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stLeitaiCancelGoOutForBattleResult));
  stLeitaiCancelGoOutForBattleResult_eResult_descriptor_ = stLeitaiCancelGoOutForBattleResult_descriptor_->enum_type(0);
  stLeitaiCancelGoOutForBattleResult_ProtoModID_descriptor_ = stLeitaiCancelGoOutForBattleResult_descriptor_->enum_type(1);
  stLeitaiCancelGoOutForBattleResult_ProtoFunID_descriptor_ = stLeitaiCancelGoOutForBattleResult_descriptor_->enum_type(2);
  stCommitArenaResult_descriptor_ = file->message_type(47);
  static const int stCommitArenaResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCommitArenaResult, win_),
  };
  stCommitArenaResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stCommitArenaResult_descriptor_,
      stCommitArenaResult::default_instance_,
      stCommitArenaResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCommitArenaResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCommitArenaResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stCommitArenaResult));
  stCommitArenaResult_ProtoModID_descriptor_ = stCommitArenaResult_descriptor_->enum_type(0);
  stCommitArenaResult_ProtoFunID_descriptor_ = stCommitArenaResult_descriptor_->enum_type(1);
  stRetCommintArenaResult_descriptor_ = file->message_type(48);
  static const int stRetCommintArenaResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetCommintArenaResult, result_),
  };
  stRetCommintArenaResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRetCommintArenaResult_descriptor_,
      stRetCommintArenaResult::default_instance_,
      stRetCommintArenaResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetCommintArenaResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetCommintArenaResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRetCommintArenaResult));
  stRetCommintArenaResult_eResult_descriptor_ = stRetCommintArenaResult_descriptor_->enum_type(0);
  stRetCommintArenaResult_ProtoModID_descriptor_ = stRetCommintArenaResult_descriptor_->enum_type(1);
  stRetCommintArenaResult_ProtoFunID_descriptor_ = stRetCommintArenaResult_descriptor_->enum_type(2);
  stReqEnterLeitaiScene_descriptor_ = file->message_type(49);
  static const int stReqEnterLeitaiScene_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqEnterLeitaiScene, otherid_),
  };
  stReqEnterLeitaiScene_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqEnterLeitaiScene_descriptor_,
      stReqEnterLeitaiScene::default_instance_,
      stReqEnterLeitaiScene_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqEnterLeitaiScene, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqEnterLeitaiScene, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqEnterLeitaiScene));
  stReqEnterLeitaiScene_ProtoModID_descriptor_ = stReqEnterLeitaiScene_descriptor_->enum_type(0);
  stReqEnterLeitaiScene_ProtoFunID_descriptor_ = stReqEnterLeitaiScene_descriptor_->enum_type(1);
  stReqResetLeitaiBuff_descriptor_ = file->message_type(50);
  static const int stReqResetLeitaiBuff_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqResetLeitaiBuff, charid_),
  };
  stReqResetLeitaiBuff_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqResetLeitaiBuff_descriptor_,
      stReqResetLeitaiBuff::default_instance_,
      stReqResetLeitaiBuff_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqResetLeitaiBuff, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqResetLeitaiBuff, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqResetLeitaiBuff));
  stReqResetLeitaiBuff_ProtoModID_descriptor_ = stReqResetLeitaiBuff_descriptor_->enum_type(0);
  stReqResetLeitaiBuff_ProtoFunID_descriptor_ = stReqResetLeitaiBuff_descriptor_->enum_type(1);
  stResetLeitaiBuffResult_descriptor_ = file->message_type(51);
  static const int stResetLeitaiBuffResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResetLeitaiBuffResult, buffid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResetLeitaiBuffResult, result_),
  };
  stResetLeitaiBuffResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stResetLeitaiBuffResult_descriptor_,
      stResetLeitaiBuffResult::default_instance_,
      stResetLeitaiBuffResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResetLeitaiBuffResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResetLeitaiBuffResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stResetLeitaiBuffResult));
  stResetLeitaiBuffResult_eResult_descriptor_ = stResetLeitaiBuffResult_descriptor_->enum_type(0);
  stResetLeitaiBuffResult_ProtoModID_descriptor_ = stResetLeitaiBuffResult_descriptor_->enum_type(1);
  stResetLeitaiBuffResult_ProtoFunID_descriptor_ = stResetLeitaiBuffResult_descriptor_->enum_type(2);
  stReqBuffResetTime_descriptor_ = file->message_type(52);
  static const int stReqBuffResetTime_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqBuffResetTime, charid_),
  };
  stReqBuffResetTime_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqBuffResetTime_descriptor_,
      stReqBuffResetTime::default_instance_,
      stReqBuffResetTime_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqBuffResetTime, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqBuffResetTime, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqBuffResetTime));
  stReqBuffResetTime_ProtoModID_descriptor_ = stReqBuffResetTime_descriptor_->enum_type(0);
  stReqBuffResetTime_ProtoFunID_descriptor_ = stReqBuffResetTime_descriptor_->enum_type(1);
  stRetBuffResetTime_descriptor_ = file->message_type(53);
  static const int stRetBuffResetTime_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetBuffResetTime, remaintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetBuffResetTime, buffid_),
  };
  stRetBuffResetTime_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRetBuffResetTime_descriptor_,
      stRetBuffResetTime::default_instance_,
      stRetBuffResetTime_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetBuffResetTime, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetBuffResetTime, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRetBuffResetTime));
  stRetBuffResetTime_ProtoModID_descriptor_ = stRetBuffResetTime_descriptor_->enum_type(0);
  stRetBuffResetTime_ProtoFunID_descriptor_ = stRetBuffResetTime_descriptor_->enum_type(1);
  stArenaReachNewRank_descriptor_ = file->message_type(54);
  static const int stArenaReachNewRank_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stArenaReachNewRank, newrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stArenaReachNewRank, oldrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stArenaReachNewRank, rewardnum_),
  };
  stArenaReachNewRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stArenaReachNewRank_descriptor_,
      stArenaReachNewRank::default_instance_,
      stArenaReachNewRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stArenaReachNewRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stArenaReachNewRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stArenaReachNewRank));
  stArenaReachNewRank_ProtoModID_descriptor_ = stArenaReachNewRank_descriptor_->enum_type(0);
  stArenaReachNewRank_ProtoFunID_descriptor_ = stArenaReachNewRank_descriptor_->enum_type(1);
  stReqResetArenaChallengeNum_descriptor_ = file->message_type(55);
  static const int stReqResetArenaChallengeNum_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqResetArenaChallengeNum, charid_),
  };
  stReqResetArenaChallengeNum_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqResetArenaChallengeNum_descriptor_,
      stReqResetArenaChallengeNum::default_instance_,
      stReqResetArenaChallengeNum_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqResetArenaChallengeNum, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqResetArenaChallengeNum, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqResetArenaChallengeNum));
  stReqResetArenaChallengeNum_ProtoModID_descriptor_ = stReqResetArenaChallengeNum_descriptor_->enum_type(0);
  stReqResetArenaChallengeNum_ProtoFunID_descriptor_ = stReqResetArenaChallengeNum_descriptor_->enum_type(1);
  stResetArenaChallengeNunResult_descriptor_ = file->message_type(56);
  static const int stResetArenaChallengeNunResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResetArenaChallengeNunResult, result_),
  };
  stResetArenaChallengeNunResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stResetArenaChallengeNunResult_descriptor_,
      stResetArenaChallengeNunResult::default_instance_,
      stResetArenaChallengeNunResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResetArenaChallengeNunResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResetArenaChallengeNunResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stResetArenaChallengeNunResult));
  stResetArenaChallengeNunResult_eResult_descriptor_ = stResetArenaChallengeNunResult_descriptor_->enum_type(0);
  stResetArenaChallengeNunResult_ProtoModID_descriptor_ = stResetArenaChallengeNunResult_descriptor_->enum_type(1);
  stResetArenaChallengeNunResult_ProtoFunID_descriptor_ = stResetArenaChallengeNunResult_descriptor_->enum_type(2);
  stReqClearArenaCD_descriptor_ = file->message_type(57);
  static const int stReqClearArenaCD_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqClearArenaCD, charid_),
  };
  stReqClearArenaCD_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqClearArenaCD_descriptor_,
      stReqClearArenaCD::default_instance_,
      stReqClearArenaCD_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqClearArenaCD, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqClearArenaCD, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqClearArenaCD));
  stReqClearArenaCD_ProtoModID_descriptor_ = stReqClearArenaCD_descriptor_->enum_type(0);
  stReqClearArenaCD_ProtoFunID_descriptor_ = stReqClearArenaCD_descriptor_->enum_type(1);
  stClearArenaCDResult_descriptor_ = file->message_type(58);
  static const int stClearArenaCDResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stClearArenaCDResult, result_),
  };
  stClearArenaCDResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stClearArenaCDResult_descriptor_,
      stClearArenaCDResult::default_instance_,
      stClearArenaCDResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stClearArenaCDResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stClearArenaCDResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stClearArenaCDResult));
  stClearArenaCDResult_eResult_descriptor_ = stClearArenaCDResult_descriptor_->enum_type(0);
  stClearArenaCDResult_ProtoModID_descriptor_ = stClearArenaCDResult_descriptor_->enum_type(1);
  stClearArenaCDResult_ProtoFunID_descriptor_ = stClearArenaCDResult_descriptor_->enum_type(2);
  stReqOpenSvrBPRank_descriptor_ = file->message_type(59);
  static const int stReqOpenSvrBPRank_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqOpenSvrBPRank, charid_),
  };
  stReqOpenSvrBPRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqOpenSvrBPRank_descriptor_,
      stReqOpenSvrBPRank::default_instance_,
      stReqOpenSvrBPRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqOpenSvrBPRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqOpenSvrBPRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqOpenSvrBPRank));
  stReqOpenSvrBPRank_ProtoModID_descriptor_ = stReqOpenSvrBPRank_descriptor_->enum_type(0);
  stReqOpenSvrBPRank_ProtoFunID_descriptor_ = stReqOpenSvrBPRank_descriptor_->enum_type(1);
  stBPRankItemInfo_descriptor_ = file->message_type(60);
  static const int stBPRankItemInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBPRankItemInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBPRankItemInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBPRankItemInfo, job_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBPRankItemInfo, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBPRankItemInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBPRankItemInfo, bpval_),
  };
  stBPRankItemInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stBPRankItemInfo_descriptor_,
      stBPRankItemInfo::default_instance_,
      stBPRankItemInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBPRankItemInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBPRankItemInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stBPRankItemInfo));
  stRetOpenSvrBPRank_descriptor_ = file->message_type(61);
  static const int stRetOpenSvrBPRank_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetOpenSvrBPRank, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetOpenSvrBPRank, opensvrtime_),
  };
  stRetOpenSvrBPRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRetOpenSvrBPRank_descriptor_,
      stRetOpenSvrBPRank::default_instance_,
      stRetOpenSvrBPRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetOpenSvrBPRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetOpenSvrBPRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRetOpenSvrBPRank));
  stRetOpenSvrBPRank_ProtoModID_descriptor_ = stRetOpenSvrBPRank_descriptor_->enum_type(0);
  stRetOpenSvrBPRank_ProtoFunID_descriptor_ = stRetOpenSvrBPRank_descriptor_->enum_type(1);
  stReqExpeditionInfo_descriptor_ = file->message_type(62);
  static const int stReqExpeditionInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqExpeditionInfo, charid_),
  };
  stReqExpeditionInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqExpeditionInfo_descriptor_,
      stReqExpeditionInfo::default_instance_,
      stReqExpeditionInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqExpeditionInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqExpeditionInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqExpeditionInfo));
  stReqExpeditionInfo_ProtoModID_descriptor_ = stReqExpeditionInfo_descriptor_->enum_type(0);
  stReqExpeditionInfo_ProtoFunID_descriptor_ = stReqExpeditionInfo_descriptor_->enum_type(1);
  stExpeditionItem_descriptor_ = file->message_type(63);
  static const int stExpeditionItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stExpeditionItem, expeditionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stExpeditionItem, finishtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stExpeditionItem, heroids_),
  };
  stExpeditionItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stExpeditionItem_descriptor_,
      stExpeditionItem::default_instance_,
      stExpeditionItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stExpeditionItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stExpeditionItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stExpeditionItem));
  stRetExpeditionInfo_descriptor_ = file->message_type(64);
  static const int stRetExpeditionInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetExpeditionInfo, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetExpeditionInfo, usednum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetExpeditionInfo, items_),
  };
  stRetExpeditionInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRetExpeditionInfo_descriptor_,
      stRetExpeditionInfo::default_instance_,
      stRetExpeditionInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetExpeditionInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetExpeditionInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRetExpeditionInfo));
  stRetExpeditionInfo_eResult_descriptor_ = stRetExpeditionInfo_descriptor_->enum_type(0);
  stRetExpeditionInfo_ProtoModID_descriptor_ = stRetExpeditionInfo_descriptor_->enum_type(1);
  stRetExpeditionInfo_ProtoFunID_descriptor_ = stRetExpeditionInfo_descriptor_->enum_type(2);
  stReqExpedition_descriptor_ = file->message_type(65);
  static const int stReqExpedition_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqExpedition, expeditionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqExpedition, heroids_),
  };
  stReqExpedition_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqExpedition_descriptor_,
      stReqExpedition::default_instance_,
      stReqExpedition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqExpedition, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqExpedition, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqExpedition));
  stReqExpedition_ProtoModID_descriptor_ = stReqExpedition_descriptor_->enum_type(0);
  stReqExpedition_ProtoFunID_descriptor_ = stReqExpedition_descriptor_->enum_type(1);
  stRetExpedition_descriptor_ = file->message_type(66);
  static const int stRetExpedition_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetExpedition, expeditionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetExpedition, result_),
  };
  stRetExpedition_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRetExpedition_descriptor_,
      stRetExpedition::default_instance_,
      stRetExpedition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetExpedition, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetExpedition, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRetExpedition));
  stRetExpedition_eResult_descriptor_ = stRetExpedition_descriptor_->enum_type(0);
  stRetExpedition_ProtoModID_descriptor_ = stRetExpedition_descriptor_->enum_type(1);
  stRetExpedition_ProtoFunID_descriptor_ = stRetExpedition_descriptor_->enum_type(2);
  stReqExpeditionReward_descriptor_ = file->message_type(67);
  static const int stReqExpeditionReward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqExpeditionReward, expeditionid_),
  };
  stReqExpeditionReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqExpeditionReward_descriptor_,
      stReqExpeditionReward::default_instance_,
      stReqExpeditionReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqExpeditionReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqExpeditionReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqExpeditionReward));
  stReqExpeditionReward_ProtoModID_descriptor_ = stReqExpeditionReward_descriptor_->enum_type(0);
  stReqExpeditionReward_ProtoFunID_descriptor_ = stReqExpeditionReward_descriptor_->enum_type(1);
  stRetExpeditionReward_descriptor_ = file->message_type(68);
  static const int stRetExpeditionReward_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetExpeditionReward, expeditionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetExpeditionReward, result_),
  };
  stRetExpeditionReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRetExpeditionReward_descriptor_,
      stRetExpeditionReward::default_instance_,
      stRetExpeditionReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetExpeditionReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetExpeditionReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRetExpeditionReward));
  stRetExpeditionReward_eResult_descriptor_ = stRetExpeditionReward_descriptor_->enum_type(0);
  stRetExpeditionReward_ProtoModID_descriptor_ = stRetExpeditionReward_descriptor_->enum_type(1);
  stRetExpeditionReward_ProtoFunID_descriptor_ = stRetExpeditionReward_descriptor_->enum_type(2);
  stReqFastExpedition_descriptor_ = file->message_type(69);
  static const int stReqFastExpedition_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqFastExpedition, expeditionid_),
  };
  stReqFastExpedition_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqFastExpedition_descriptor_,
      stReqFastExpedition::default_instance_,
      stReqFastExpedition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqFastExpedition, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqFastExpedition, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqFastExpedition));
  stReqFastExpedition_ProtoModID_descriptor_ = stReqFastExpedition_descriptor_->enum_type(0);
  stReqFastExpedition_ProtoFunID_descriptor_ = stReqFastExpedition_descriptor_->enum_type(1);
  stRetFastExpedition_descriptor_ = file->message_type(70);
  static const int stRetFastExpedition_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetFastExpedition, expeditionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetFastExpedition, result_),
  };
  stRetFastExpedition_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRetFastExpedition_descriptor_,
      stRetFastExpedition::default_instance_,
      stRetFastExpedition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetFastExpedition, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetFastExpedition, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRetFastExpedition));
  stRetFastExpedition_eResult_descriptor_ = stRetFastExpedition_descriptor_->enum_type(0);
  stRetFastExpedition_ProtoModID_descriptor_ = stRetFastExpedition_descriptor_->enum_type(1);
  stRetFastExpedition_ProtoFunID_descriptor_ = stRetFastExpedition_descriptor_->enum_type(2);
  stReqCancelExpedition_descriptor_ = file->message_type(71);
  static const int stReqCancelExpedition_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqCancelExpedition, expeditionid_),
  };
  stReqCancelExpedition_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqCancelExpedition_descriptor_,
      stReqCancelExpedition::default_instance_,
      stReqCancelExpedition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqCancelExpedition, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqCancelExpedition, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqCancelExpedition));
  stReqCancelExpedition_ProtoModID_descriptor_ = stReqCancelExpedition_descriptor_->enum_type(0);
  stReqCancelExpedition_ProtoFunID_descriptor_ = stReqCancelExpedition_descriptor_->enum_type(1);
  stRetCancelExpedition_descriptor_ = file->message_type(72);
  static const int stRetCancelExpedition_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetCancelExpedition, expeditionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetCancelExpedition, result_),
  };
  stRetCancelExpedition_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRetCancelExpedition_descriptor_,
      stRetCancelExpedition::default_instance_,
      stRetCancelExpedition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetCancelExpedition, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetCancelExpedition, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRetCancelExpedition));
  stRetCancelExpedition_eResult_descriptor_ = stRetCancelExpedition_descriptor_->enum_type(0);
  stRetCancelExpedition_ProtoModID_descriptor_ = stRetCancelExpedition_descriptor_->enum_type(1);
  stRetCancelExpedition_ProtoFunID_descriptor_ = stRetCancelExpedition_descriptor_->enum_type(2);
  stReqExpeditionSummary_descriptor_ = file->message_type(73);
  static const int stReqExpeditionSummary_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqExpeditionSummary, charid_),
  };
  stReqExpeditionSummary_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqExpeditionSummary_descriptor_,
      stReqExpeditionSummary::default_instance_,
      stReqExpeditionSummary_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqExpeditionSummary, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqExpeditionSummary, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqExpeditionSummary));
  stReqExpeditionSummary_ProtoModID_descriptor_ = stReqExpeditionSummary_descriptor_->enum_type(0);
  stReqExpeditionSummary_ProtoFunID_descriptor_ = stReqExpeditionSummary_descriptor_->enum_type(1);
  stRetExpeditionSummary_descriptor_ = file->message_type(74);
  static const int stRetExpeditionSummary_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetExpeditionSummary, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetExpeditionSummary, usedtimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetExpeditionSummary, items_),
  };
  stRetExpeditionSummary_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRetExpeditionSummary_descriptor_,
      stRetExpeditionSummary::default_instance_,
      stRetExpeditionSummary_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetExpeditionSummary, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetExpeditionSummary, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRetExpeditionSummary));
  stRetExpeditionSummary_eResult_descriptor_ = stRetExpeditionSummary_descriptor_->enum_type(0);
  stRetExpeditionSummary_ProtoModID_descriptor_ = stRetExpeditionSummary_descriptor_->enum_type(1);
  stRetExpeditionSummary_ProtoFunID_descriptor_ = stRetExpeditionSummary_descriptor_->enum_type(2);
  stReqGloryfashionSortList_descriptor_ = file->message_type(75);
  static const int stReqGloryfashionSortList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqGloryfashionSortList, fromrank_),
  };
  stReqGloryfashionSortList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqGloryfashionSortList_descriptor_,
      stReqGloryfashionSortList::default_instance_,
      stReqGloryfashionSortList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqGloryfashionSortList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqGloryfashionSortList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqGloryfashionSortList));
  stReqGloryfashionSortList_ProtoModID_descriptor_ = stReqGloryfashionSortList_descriptor_->enum_type(0);
  stReqGloryfashionSortList_ProtoFunID_descriptor_ = stReqGloryfashionSortList_descriptor_->enum_type(1);
  stGloryfashionSortList_descriptor_ = file->message_type(76);
  static const int stGloryfashionSortList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryfashionSortList, beginrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryfashionSortList, name_),
  };
  stGloryfashionSortList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stGloryfashionSortList_descriptor_,
      stGloryfashionSortList::default_instance_,
      stGloryfashionSortList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryfashionSortList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryfashionSortList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stGloryfashionSortList));
  stGloryfashionSortList_ProtoModID_descriptor_ = stGloryfashionSortList_descriptor_->enum_type(0);
  stGloryfashionSortList_ProtoFunID_descriptor_ = stGloryfashionSortList_descriptor_->enum_type(1);
  stReqEnterEmeraldDream_descriptor_ = file->message_type(77);
  static const int stReqEnterEmeraldDream_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqEnterEmeraldDream, levelid_),
  };
  stReqEnterEmeraldDream_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqEnterEmeraldDream_descriptor_,
      stReqEnterEmeraldDream::default_instance_,
      stReqEnterEmeraldDream_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqEnterEmeraldDream, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqEnterEmeraldDream, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqEnterEmeraldDream));
  stReqEnterEmeraldDream_ProtoModID_descriptor_ = stReqEnterEmeraldDream_descriptor_->enum_type(0);
  stReqEnterEmeraldDream_ProtoFunID_descriptor_ = stReqEnterEmeraldDream_descriptor_->enum_type(1);
  stEnterEmeraldDreamResult_descriptor_ = file->message_type(78);
  static const int stEnterEmeraldDreamResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stEnterEmeraldDreamResult, result_),
  };
  stEnterEmeraldDreamResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stEnterEmeraldDreamResult_descriptor_,
      stEnterEmeraldDreamResult::default_instance_,
      stEnterEmeraldDreamResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stEnterEmeraldDreamResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stEnterEmeraldDreamResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stEnterEmeraldDreamResult));
  stEnterEmeraldDreamResult_eResult_descriptor_ = stEnterEmeraldDreamResult_descriptor_->enum_type(0);
  stEnterEmeraldDreamResult_ProtoModID_descriptor_ = stEnterEmeraldDreamResult_descriptor_->enum_type(1);
  stEnterEmeraldDreamResult_ProtoFunID_descriptor_ = stEnterEmeraldDreamResult_descriptor_->enum_type(2);
  stResetFightNum_descriptor_ = file->message_type(79);
  static const int stResetFightNum_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResetFightNum, charid_),
  };
  stResetFightNum_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stResetFightNum_descriptor_,
      stResetFightNum::default_instance_,
      stResetFightNum_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResetFightNum, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResetFightNum, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stResetFightNum));
  stResetFightNum_ProtoModID_descriptor_ = stResetFightNum_descriptor_->enum_type(0);
  stResetFightNum_ProtoFunID_descriptor_ = stResetFightNum_descriptor_->enum_type(1);
  stResetFightNumResult_descriptor_ = file->message_type(80);
  static const int stResetFightNumResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResetFightNumResult, result_),
  };
  stResetFightNumResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stResetFightNumResult_descriptor_,
      stResetFightNumResult::default_instance_,
      stResetFightNumResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResetFightNumResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResetFightNumResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stResetFightNumResult));
  stResetFightNumResult_eResult_descriptor_ = stResetFightNumResult_descriptor_->enum_type(0);
  stResetFightNumResult_ProtoModID_descriptor_ = stResetFightNumResult_descriptor_->enum_type(1);
  stResetFightNumResult_ProtoFunID_descriptor_ = stResetFightNumResult_descriptor_->enum_type(2);
  stReqEmeraldDreamSortList_descriptor_ = file->message_type(81);
  static const int stReqEmeraldDreamSortList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqEmeraldDreamSortList, fromrank_),
  };
  stReqEmeraldDreamSortList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqEmeraldDreamSortList_descriptor_,
      stReqEmeraldDreamSortList::default_instance_,
      stReqEmeraldDreamSortList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqEmeraldDreamSortList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqEmeraldDreamSortList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqEmeraldDreamSortList));
  stReqEmeraldDreamSortList_ProtoModID_descriptor_ = stReqEmeraldDreamSortList_descriptor_->enum_type(0);
  stReqEmeraldDreamSortList_ProtoFunID_descriptor_ = stReqEmeraldDreamSortList_descriptor_->enum_type(1);
  SortListInfo_descriptor_ = file->message_type(82);
  static const int SortListInfo_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SortListInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SortListInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SortListInfo, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SortListInfo, job_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SortListInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SortListInfo, damage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SortListInfo, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SortListInfo, highest_damage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SortListInfo, photoid_),
  };
  SortListInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SortListInfo_descriptor_,
      SortListInfo::default_instance_,
      SortListInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SortListInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SortListInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SortListInfo));
  stEmeraldDreamSortList_descriptor_ = file->message_type(83);
  static const int stEmeraldDreamSortList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stEmeraldDreamSortList, beginrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stEmeraldDreamSortList, info_),
  };
  stEmeraldDreamSortList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stEmeraldDreamSortList_descriptor_,
      stEmeraldDreamSortList::default_instance_,
      stEmeraldDreamSortList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stEmeraldDreamSortList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stEmeraldDreamSortList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stEmeraldDreamSortList));
  stEmeraldDreamSortList_ProtoModID_descriptor_ = stEmeraldDreamSortList_descriptor_->enum_type(0);
  stEmeraldDreamSortList_ProtoFunID_descriptor_ = stEmeraldDreamSortList_descriptor_->enum_type(1);
  stSendRankInfo_descriptor_ = file->message_type(84);
  static const int stSendRankInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendRankInfo, myinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendRankInfo, rivalinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendRankInfo, promoted_),
  };
  stSendRankInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSendRankInfo_descriptor_,
      stSendRankInfo::default_instance_,
      stSendRankInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendRankInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendRankInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSendRankInfo));
  stSendRankInfo_ProtoModID_descriptor_ = stSendRankInfo_descriptor_->enum_type(0);
  stSendRankInfo_ProtoFunID_descriptor_ = stSendRankInfo_descriptor_->enum_type(1);
  stReqSurplusNum_descriptor_ = file->message_type(85);
  static const int stReqSurplusNum_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqSurplusNum, charid_),
  };
  stReqSurplusNum_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqSurplusNum_descriptor_,
      stReqSurplusNum::default_instance_,
      stReqSurplusNum_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqSurplusNum, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqSurplusNum, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqSurplusNum));
  stReqSurplusNum_ProtoModID_descriptor_ = stReqSurplusNum_descriptor_->enum_type(0);
  stReqSurplusNum_ProtoFunID_descriptor_ = stReqSurplusNum_descriptor_->enum_type(1);
  userSortInfo_descriptor_ = file->message_type(86);
  static const int userSortInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(userSortInfo, name_),
  };
  userSortInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      userSortInfo_descriptor_,
      userSortInfo::default_instance_,
      userSortInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(userSortInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(userSortInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(userSortInfo));
  stSurplusNumResult_descriptor_ = file->message_type(87);
  static const int stSurplusNumResult_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSurplusNumResult, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSurplusNumResult, damage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSurplusNumResult, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSurplusNumResult, resetnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSurplusNumResult, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSurplusNumResult, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSurplusNumResult, levelid_),
  };
  stSurplusNumResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSurplusNumResult_descriptor_,
      stSurplusNumResult::default_instance_,
      stSurplusNumResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSurplusNumResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSurplusNumResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSurplusNumResult));
  stSurplusNumResult_ProtoModID_descriptor_ = stSurplusNumResult_descriptor_->enum_type(0);
  stSurplusNumResult_ProtoFunID_descriptor_ = stSurplusNumResult_descriptor_->enum_type(1);
  stSynChampionInfo_descriptor_ = file->message_type(88);
  static const int stSynChampionInfo_offsets_[24] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynChampionInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynChampionInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynChampionInfo, areacode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynChampionInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynChampionInfo, job_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynChampionInfo, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynChampionInfo, leader_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynChampionInfo, battlepower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynChampionInfo, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynChampionInfo, headid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynChampionInfo, bodyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynChampionInfo, weaponid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynChampionInfo, cloackid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynChampionInfo, wingid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynChampionInfo, shoeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynChampionInfo, fashionhair_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynChampionInfo, fashionface_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynChampionInfo, fashionbody_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynChampionInfo, fashionweapon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynChampionInfo, fashionshoe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynChampionInfo, fashiondecoration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynChampionInfo, effectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynChampionInfo, wingbreaklv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynChampionInfo, photoid_),
  };
  stSynChampionInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSynChampionInfo_descriptor_,
      stSynChampionInfo::default_instance_,
      stSynChampionInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynChampionInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynChampionInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSynChampionInfo));
  stMyIntegralAndNum_descriptor_ = file->message_type(89);
  static const int stMyIntegralAndNum_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stMyIntegralAndNum, score_),
  };
  stMyIntegralAndNum_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stMyIntegralAndNum_descriptor_,
      stMyIntegralAndNum::default_instance_,
      stMyIntegralAndNum_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stMyIntegralAndNum, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stMyIntegralAndNum, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stMyIntegralAndNum));
  stReqOpenLeagueWindow_descriptor_ = file->message_type(90);
  static const int stReqOpenLeagueWindow_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqOpenLeagueWindow, charid_),
  };
  stReqOpenLeagueWindow_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqOpenLeagueWindow_descriptor_,
      stReqOpenLeagueWindow::default_instance_,
      stReqOpenLeagueWindow_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqOpenLeagueWindow, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqOpenLeagueWindow, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqOpenLeagueWindow));
  stReqOpenLeagueWindow_ProtoModID_descriptor_ = stReqOpenLeagueWindow_descriptor_->enum_type(0);
  stReqOpenLeagueWindow_ProtoFunID_descriptor_ = stReqOpenLeagueWindow_descriptor_->enum_type(1);
  stOpenLeagueWindowResult_descriptor_ = file->message_type(91);
  static const int stOpenLeagueWindowResult_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOpenLeagueWindowResult, champion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOpenLeagueWindowResult, myinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOpenLeagueWindowResult, session_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOpenLeagueWindowResult, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOpenLeagueWindowResult, esession_),
  };
  stOpenLeagueWindowResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stOpenLeagueWindowResult_descriptor_,
      stOpenLeagueWindowResult::default_instance_,
      stOpenLeagueWindowResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOpenLeagueWindowResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOpenLeagueWindowResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stOpenLeagueWindowResult));
  stOpenLeagueWindowResult_eStatus_descriptor_ = stOpenLeagueWindowResult_descriptor_->enum_type(0);
  stOpenLeagueWindowResult_eSession_descriptor_ = stOpenLeagueWindowResult_descriptor_->enum_type(1);
  stOpenLeagueWindowResult_ProtoModID_descriptor_ = stOpenLeagueWindowResult_descriptor_->enum_type(2);
  stOpenLeagueWindowResult_ProtoFunID_descriptor_ = stOpenLeagueWindowResult_descriptor_->enum_type(3);
  stReqHeroLeagueMatch_descriptor_ = file->message_type(92);
  static const int stReqHeroLeagueMatch_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqHeroLeagueMatch, charid_),
  };
  stReqHeroLeagueMatch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqHeroLeagueMatch_descriptor_,
      stReqHeroLeagueMatch::default_instance_,
      stReqHeroLeagueMatch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqHeroLeagueMatch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqHeroLeagueMatch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqHeroLeagueMatch));
  stReqHeroLeagueMatch_ProtoModID_descriptor_ = stReqHeroLeagueMatch_descriptor_->enum_type(0);
  stReqHeroLeagueMatch_ProtoFunID_descriptor_ = stReqHeroLeagueMatch_descriptor_->enum_type(1);
  stHeroLeagueMatchResult_descriptor_ = file->message_type(93);
  static const int stHeroLeagueMatchResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stHeroLeagueMatchResult, result_),
  };
  stHeroLeagueMatchResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stHeroLeagueMatchResult_descriptor_,
      stHeroLeagueMatchResult::default_instance_,
      stHeroLeagueMatchResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stHeroLeagueMatchResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stHeroLeagueMatchResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stHeroLeagueMatchResult));
  stHeroLeagueMatchResult_eResult_descriptor_ = stHeroLeagueMatchResult_descriptor_->enum_type(0);
  stHeroLeagueMatchResult_ProtoModID_descriptor_ = stHeroLeagueMatchResult_descriptor_->enum_type(1);
  stHeroLeagueMatchResult_ProtoFunID_descriptor_ = stHeroLeagueMatchResult_descriptor_->enum_type(2);
  stReqMenberInfo_descriptor_ = file->message_type(94);
  static const int stReqMenberInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqMenberInfo, charid_),
  };
  stReqMenberInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqMenberInfo_descriptor_,
      stReqMenberInfo::default_instance_,
      stReqMenberInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqMenberInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqMenberInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqMenberInfo));
  stReqMenberInfo_ProtoModID_descriptor_ = stReqMenberInfo_descriptor_->enum_type(0);
  stReqMenberInfo_ProtoFunID_descriptor_ = stReqMenberInfo_descriptor_->enum_type(1);
  stMemberinfo_descriptor_ = file->message_type(95);
  static const int stMemberinfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stMemberinfo, member_),
  };
  stMemberinfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stMemberinfo_descriptor_,
      stMemberinfo::default_instance_,
      stMemberinfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stMemberinfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stMemberinfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stMemberinfo));
  stMemberinfo_ProtoModID_descriptor_ = stMemberinfo_descriptor_->enum_type(0);
  stMemberinfo_ProtoFunID_descriptor_ = stMemberinfo_descriptor_->enum_type(1);
  stCancelHeroLeagueMatch_descriptor_ = file->message_type(96);
  static const int stCancelHeroLeagueMatch_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCancelHeroLeagueMatch, charid_),
  };
  stCancelHeroLeagueMatch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stCancelHeroLeagueMatch_descriptor_,
      stCancelHeroLeagueMatch::default_instance_,
      stCancelHeroLeagueMatch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCancelHeroLeagueMatch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCancelHeroLeagueMatch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stCancelHeroLeagueMatch));
  stCancelHeroLeagueMatch_ProtoModID_descriptor_ = stCancelHeroLeagueMatch_descriptor_->enum_type(0);
  stCancelHeroLeagueMatch_ProtoFunID_descriptor_ = stCancelHeroLeagueMatch_descriptor_->enum_type(1);
  stCanceHeroLeagueResult_descriptor_ = file->message_type(97);
  static const int stCanceHeroLeagueResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCanceHeroLeagueResult, result_),
  };
  stCanceHeroLeagueResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stCanceHeroLeagueResult_descriptor_,
      stCanceHeroLeagueResult::default_instance_,
      stCanceHeroLeagueResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCanceHeroLeagueResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCanceHeroLeagueResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stCanceHeroLeagueResult));
  stCanceHeroLeagueResult_eResult_descriptor_ = stCanceHeroLeagueResult_descriptor_->enum_type(0);
  stCanceHeroLeagueResult_ProtoModID_descriptor_ = stCanceHeroLeagueResult_descriptor_->enum_type(1);
  stCanceHeroLeagueResult_ProtoFunID_descriptor_ = stCanceHeroLeagueResult_descriptor_->enum_type(2);
  stReqQualifiedList_descriptor_ = file->message_type(98);
  static const int stReqQualifiedList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqQualifiedList, type_),
  };
  stReqQualifiedList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqQualifiedList_descriptor_,
      stReqQualifiedList::default_instance_,
      stReqQualifiedList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqQualifiedList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqQualifiedList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqQualifiedList));
  stReqQualifiedList_eSession_descriptor_ = stReqQualifiedList_descriptor_->enum_type(0);
  stReqQualifiedList_ProtoModID_descriptor_ = stReqQualifiedList_descriptor_->enum_type(1);
  stReqQualifiedList_ProtoFunID_descriptor_ = stReqQualifiedList_descriptor_->enum_type(2);
  stRoleBasicInfo_descriptor_ = file->message_type(99);
  static const int stRoleBasicInfo_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRoleBasicInfo, areacode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRoleBasicInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRoleBasicInfo, leve_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRoleBasicInfo, viplv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRoleBasicInfo, job_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRoleBasicInfo, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRoleBasicInfo, battlepower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRoleBasicInfo, winorloss_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRoleBasicInfo, photoid_),
  };
  stRoleBasicInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRoleBasicInfo_descriptor_,
      stRoleBasicInfo::default_instance_,
      stRoleBasicInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRoleBasicInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRoleBasicInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRoleBasicInfo));
  stRoleBasicInfo_eCompleteState_descriptor_ = stRoleBasicInfo_descriptor_->enum_type(0);
  stTeam_descriptor_ = file->message_type(100);
  static const int stTeam_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stTeam, user1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stTeam, user2_),
  };
  stTeam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stTeam_descriptor_,
      stTeam::default_instance_,
      stTeam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stTeam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stTeam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stTeam));
  stQualifiedListResult_descriptor_ = file->message_type(101);
  static const int stQualifiedListResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stQualifiedListResult, users_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stQualifiedListResult, isqualified_),
  };
  stQualifiedListResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stQualifiedListResult_descriptor_,
      stQualifiedListResult::default_instance_,
      stQualifiedListResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stQualifiedListResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stQualifiedListResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stQualifiedListResult));
  stQualifiedListResult_ProtoModID_descriptor_ = stQualifiedListResult_descriptor_->enum_type(0);
  stQualifiedListResult_ProtoFunID_descriptor_ = stQualifiedListResult_descriptor_->enum_type(1);
  stReqWorship_descriptor_ = file->message_type(102);
  static const int stReqWorship_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqWorship, charid_),
  };
  stReqWorship_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqWorship_descriptor_,
      stReqWorship::default_instance_,
      stReqWorship_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqWorship, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqWorship, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqWorship));
  stReqWorship_ProtoModID_descriptor_ = stReqWorship_descriptor_->enum_type(0);
  stReqWorship_ProtoFunID_descriptor_ = stReqWorship_descriptor_->enum_type(1);
  stWorskipResult_descriptor_ = file->message_type(103);
  static const int stWorskipResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stWorskipResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stWorskipResult, charid_),
  };
  stWorskipResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stWorskipResult_descriptor_,
      stWorskipResult::default_instance_,
      stWorskipResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stWorskipResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stWorskipResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stWorskipResult));
  stWorskipResult_eResult_descriptor_ = stWorskipResult_descriptor_->enum_type(0);
  stWorskipResult_ProtoModID_descriptor_ = stWorskipResult_descriptor_->enum_type(1);
  stWorskipResult_ProtoFunID_descriptor_ = stWorskipResult_descriptor_->enum_type(2);
  stReqHeroList_descriptor_ = file->message_type(104);
  static const int stReqHeroList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqHeroList, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqHeroList, charid_),
  };
  stReqHeroList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqHeroList_descriptor_,
      stReqHeroList::default_instance_,
      stReqHeroList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqHeroList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqHeroList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqHeroList));
  stReqHeroList_stType_descriptor_ = stReqHeroList_descriptor_->enum_type(0);
  stReqHeroList_ProtoModID_descriptor_ = stReqHeroList_descriptor_->enum_type(1);
  stReqHeroList_ProtoFunID_descriptor_ = stReqHeroList_descriptor_->enum_type(2);
  stRankInfo_descriptor_ = file->message_type(105);
  static const int stRankInfo_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRankInfo, session_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRankInfo, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRankInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRankInfo, pubcharid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRankInfo, areacode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRankInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRankInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRankInfo, viplv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRankInfo, job_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRankInfo, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRankInfo, battlepower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRankInfo, photoid_),
  };
  stRankInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRankInfo_descriptor_,
      stRankInfo::default_instance_,
      stRankInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRankInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRankInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRankInfo));
  stHeroListResult_descriptor_ = file->message_type(106);
  static const int stHeroListResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stHeroListResult, user_),
  };
  stHeroListResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stHeroListResult_descriptor_,
      stHeroListResult::default_instance_,
      stHeroListResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stHeroListResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stHeroListResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stHeroListResult));
  stHeroListResult_ProtoModID_descriptor_ = stHeroListResult_descriptor_->enum_type(0);
  stHeroListResult_ProtoFunID_descriptor_ = stHeroListResult_descriptor_->enum_type(1);
  stReqRegister_descriptor_ = file->message_type(107);
  static const int stReqRegister_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqRegister, charid_),
  };
  stReqRegister_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqRegister_descriptor_,
      stReqRegister::default_instance_,
      stReqRegister_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqRegister, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqRegister, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqRegister));
  stReqRegister_ProtoModID_descriptor_ = stReqRegister_descriptor_->enum_type(0);
  stReqRegister_ProtoFunID_descriptor_ = stReqRegister_descriptor_->enum_type(1);
  stRegisrerResult_descriptor_ = file->message_type(108);
  static const int stRegisrerResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRegisrerResult, number_),
  };
  stRegisrerResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRegisrerResult_descriptor_,
      stRegisrerResult::default_instance_,
      stRegisrerResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRegisrerResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRegisrerResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRegisrerResult));
  stRegisrerResult_ProtoModID_descriptor_ = stRegisrerResult_descriptor_->enum_type(0);
  stRegisrerResult_ProtoFunID_descriptor_ = stRegisrerResult_descriptor_->enum_type(1);
  stArenaResultNotify_descriptor_ = file->message_type(109);
  static const int stArenaResultNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stArenaResultNotify, result_),
  };
  stArenaResultNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stArenaResultNotify_descriptor_,
      stArenaResultNotify::default_instance_,
      stArenaResultNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stArenaResultNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stArenaResultNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stArenaResultNotify));
  stArenaResultNotify_eResult_descriptor_ = stArenaResultNotify_descriptor_->enum_type(0);
  stArenaResultNotify_ProtoModID_descriptor_ = stArenaResultNotify_descriptor_->enum_type(1);
  stArenaResultNotify_ProtoFunID_descriptor_ = stArenaResultNotify_descriptor_->enum_type(2);
  stReqPubLogIn_descriptor_ = file->message_type(110);
  static const int stReqPubLogIn_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqPubLogIn, charid_),
  };
  stReqPubLogIn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqPubLogIn_descriptor_,
      stReqPubLogIn::default_instance_,
      stReqPubLogIn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqPubLogIn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqPubLogIn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqPubLogIn));
  stReqPubLogIn_ProtoModID_descriptor_ = stReqPubLogIn_descriptor_->enum_type(0);
  stReqPubLogIn_ProtoFunID_descriptor_ = stReqPubLogIn_descriptor_->enum_type(1);
  stReqPubLogOut_descriptor_ = file->message_type(111);
  static const int stReqPubLogOut_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqPubLogOut, charid_),
  };
  stReqPubLogOut_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqPubLogOut_descriptor_,
      stReqPubLogOut::default_instance_,
      stReqPubLogOut_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqPubLogOut, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqPubLogOut, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqPubLogOut));
  stReqPubLogOut_ProtoModID_descriptor_ = stReqPubLogOut_descriptor_->enum_type(0);
  stReqPubLogOut_ProtoFunID_descriptor_ = stReqPubLogOut_descriptor_->enum_type(1);
  stRemoveModel_descriptor_ = file->message_type(112);
  static const int stRemoveModel_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRemoveModel, charid_),
  };
  stRemoveModel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRemoveModel_descriptor_,
      stRemoveModel::default_instance_,
      stRemoveModel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRemoveModel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRemoveModel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRemoveModel));
  stRemoveModel_ProtoModID_descriptor_ = stRemoveModel_descriptor_->enum_type(0);
  stRemoveModel_ProtoFunID_descriptor_ = stRemoveModel_descriptor_->enum_type(1);
  stLeitaiResultNotify_descriptor_ = file->message_type(113);
  static const int stLeitaiResultNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stLeitaiResultNotify, result_),
  };
  stLeitaiResultNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stLeitaiResultNotify_descriptor_,
      stLeitaiResultNotify::default_instance_,
      stLeitaiResultNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stLeitaiResultNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stLeitaiResultNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stLeitaiResultNotify));
  stLeitaiResultNotify_eResult_descriptor_ = stLeitaiResultNotify_descriptor_->enum_type(0);
  stLeitaiResultNotify_ProtoModID_descriptor_ = stLeitaiResultNotify_descriptor_->enum_type(1);
  stLeitaiResultNotify_ProtoFunID_descriptor_ = stLeitaiResultNotify_descriptor_->enum_type(2);
  stReqRedPoint_descriptor_ = file->message_type(114);
  static const int stReqRedPoint_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqRedPoint, charid_),
  };
  stReqRedPoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqRedPoint_descriptor_,
      stReqRedPoint::default_instance_,
      stReqRedPoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqRedPoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqRedPoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqRedPoint));
  stReqRedPoint_ProtoModID_descriptor_ = stReqRedPoint_descriptor_->enum_type(0);
  stReqRedPoint_ProtoFunID_descriptor_ = stReqRedPoint_descriptor_->enum_type(1);
  stRedPointResult_descriptor_ = file->message_type(115);
  static const int stRedPointResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRedPointResult, isqualified_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRedPointResult, canworship_),
  };
  stRedPointResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRedPointResult_descriptor_,
      stRedPointResult::default_instance_,
      stRedPointResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRedPointResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRedPointResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRedPointResult));
  stRedPointResult_ProtoModID_descriptor_ = stRedPointResult_descriptor_->enum_type(0);
  stRedPointResult_ProtoFunID_descriptor_ = stRedPointResult_descriptor_->enum_type(1);
  stReqDragonNest_descriptor_ = file->message_type(116);
  static const int stReqDragonNest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqDragonNest, charid_),
  };
  stReqDragonNest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqDragonNest_descriptor_,
      stReqDragonNest::default_instance_,
      stReqDragonNest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqDragonNest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqDragonNest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqDragonNest));
  stReqDragonNest_ProtoModID_descriptor_ = stReqDragonNest_descriptor_->enum_type(0);
  stReqDragonNest_ProtoFunID_descriptor_ = stReqDragonNest_descriptor_->enum_type(1);
  stRetDragonNest_descriptor_ = file->message_type(117);
  static const int stRetDragonNest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetDragonNest, usedtimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetDragonNest, maxtimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetDragonNest, resettimes_),
  };
  stRetDragonNest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRetDragonNest_descriptor_,
      stRetDragonNest::default_instance_,
      stRetDragonNest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetDragonNest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetDragonNest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRetDragonNest));
  stRetDragonNest_ProtoModID_descriptor_ = stRetDragonNest_descriptor_->enum_type(0);
  stRetDragonNest_ProtoFunID_descriptor_ = stRetDragonNest_descriptor_->enum_type(1);
  stReqChallengeDragonNest_descriptor_ = file->message_type(118);
  static const int stReqChallengeDragonNest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqChallengeDragonNest, levelid_),
  };
  stReqChallengeDragonNest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqChallengeDragonNest_descriptor_,
      stReqChallengeDragonNest::default_instance_,
      stReqChallengeDragonNest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqChallengeDragonNest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqChallengeDragonNest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqChallengeDragonNest));
  stReqChallengeDragonNest_eDragonType_descriptor_ = stReqChallengeDragonNest_descriptor_->enum_type(0);
  stReqChallengeDragonNest_eDifficultyType_descriptor_ = stReqChallengeDragonNest_descriptor_->enum_type(1);
  stReqChallengeDragonNest_ProtoModID_descriptor_ = stReqChallengeDragonNest_descriptor_->enum_type(2);
  stReqChallengeDragonNest_ProtoFunID_descriptor_ = stReqChallengeDragonNest_descriptor_->enum_type(3);
  stRetChallengeDragonNest_descriptor_ = file->message_type(119);
  static const int stRetChallengeDragonNest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetChallengeDragonNest, levelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetChallengeDragonNest, result_),
  };
  stRetChallengeDragonNest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRetChallengeDragonNest_descriptor_,
      stRetChallengeDragonNest::default_instance_,
      stRetChallengeDragonNest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetChallengeDragonNest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetChallengeDragonNest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRetChallengeDragonNest));
  stRetChallengeDragonNest_eResult_descriptor_ = stRetChallengeDragonNest_descriptor_->enum_type(0);
  stRetChallengeDragonNest_ProtoModID_descriptor_ = stRetChallengeDragonNest_descriptor_->enum_type(1);
  stRetChallengeDragonNest_ProtoFunID_descriptor_ = stRetChallengeDragonNest_descriptor_->enum_type(2);
  stReqResetChallengeDragonNest_descriptor_ = file->message_type(120);
  static const int stReqResetChallengeDragonNest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqResetChallengeDragonNest, charid_),
  };
  stReqResetChallengeDragonNest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqResetChallengeDragonNest_descriptor_,
      stReqResetChallengeDragonNest::default_instance_,
      stReqResetChallengeDragonNest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqResetChallengeDragonNest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqResetChallengeDragonNest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqResetChallengeDragonNest));
  stReqResetChallengeDragonNest_ProtoModID_descriptor_ = stReqResetChallengeDragonNest_descriptor_->enum_type(0);
  stReqResetChallengeDragonNest_ProtoFunID_descriptor_ = stReqResetChallengeDragonNest_descriptor_->enum_type(1);
  stRetResetChallengeDragonNest_descriptor_ = file->message_type(121);
  static const int stRetResetChallengeDragonNest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetResetChallengeDragonNest, result_),
  };
  stRetResetChallengeDragonNest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRetResetChallengeDragonNest_descriptor_,
      stRetResetChallengeDragonNest::default_instance_,
      stRetResetChallengeDragonNest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetResetChallengeDragonNest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetResetChallengeDragonNest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRetResetChallengeDragonNest));
  stRetResetChallengeDragonNest_eResult_descriptor_ = stRetResetChallengeDragonNest_descriptor_->enum_type(0);
  stRetResetChallengeDragonNest_ProtoModID_descriptor_ = stRetResetChallengeDragonNest_descriptor_->enum_type(1);
  stRetResetChallengeDragonNest_ProtoFunID_descriptor_ = stRetResetChallengeDragonNest_descriptor_->enum_type(2);
  stReqEnterResBattle_descriptor_ = file->message_type(122);
  static const int stReqEnterResBattle_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqEnterResBattle, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqEnterResBattle, copymaplevel_),
  };
  stReqEnterResBattle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqEnterResBattle_descriptor_,
      stReqEnterResBattle::default_instance_,
      stReqEnterResBattle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqEnterResBattle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqEnterResBattle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqEnterResBattle));
  stReqEnterResBattle_ProtoModID_descriptor_ = stReqEnterResBattle_descriptor_->enum_type(0);
  stReqEnterResBattle_ProtoFunID_descriptor_ = stReqEnterResBattle_descriptor_->enum_type(1);
  stRetEnterResBattle_descriptor_ = file->message_type(123);
  static const int stRetEnterResBattle_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetEnterResBattle, copymaplevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetEnterResBattle, result_),
  };
  stRetEnterResBattle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRetEnterResBattle_descriptor_,
      stRetEnterResBattle::default_instance_,
      stRetEnterResBattle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetEnterResBattle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetEnterResBattle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRetEnterResBattle));
  stRetEnterResBattle_eResult_descriptor_ = stRetEnterResBattle_descriptor_->enum_type(0);
  stRetEnterResBattle_ProtoModID_descriptor_ = stRetEnterResBattle_descriptor_->enum_type(1);
  stRetEnterResBattle_ProtoFunID_descriptor_ = stRetEnterResBattle_descriptor_->enum_type(2);
  stReqCurResBattleGloryRank_descriptor_ = file->message_type(124);
  static const int stReqCurResBattleGloryRank_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqCurResBattleGloryRank, charid_),
  };
  stReqCurResBattleGloryRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqCurResBattleGloryRank_descriptor_,
      stReqCurResBattleGloryRank::default_instance_,
      stReqCurResBattleGloryRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqCurResBattleGloryRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqCurResBattleGloryRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqCurResBattleGloryRank));
  stReqCurResBattleGloryRank_ProtoModID_descriptor_ = stReqCurResBattleGloryRank_descriptor_->enum_type(0);
  stReqCurResBattleGloryRank_ProtoFunID_descriptor_ = stReqCurResBattleGloryRank_descriptor_->enum_type(1);
  stResBattleGloryRankMemInfo_descriptor_ = file->message_type(125);
  static const int stResBattleGloryRankMemInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResBattleGloryRankMemInfo, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResBattleGloryRankMemInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResBattleGloryRankMemInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResBattleGloryRankMemInfo, areacode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResBattleGloryRankMemInfo, killnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResBattleGloryRankMemInfo, gloryval_),
  };
  stResBattleGloryRankMemInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stResBattleGloryRankMemInfo_descriptor_,
      stResBattleGloryRankMemInfo::default_instance_,
      stResBattleGloryRankMemInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResBattleGloryRankMemInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResBattleGloryRankMemInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stResBattleGloryRankMemInfo));
  stRetCurResBattleGloryRank_descriptor_ = file->message_type(126);
  static const int stRetCurResBattleGloryRank_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetCurResBattleGloryRank, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetCurResBattleGloryRank, member_),
  };
  stRetCurResBattleGloryRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRetCurResBattleGloryRank_descriptor_,
      stRetCurResBattleGloryRank::default_instance_,
      stRetCurResBattleGloryRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetCurResBattleGloryRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetCurResBattleGloryRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRetCurResBattleGloryRank));
  stRetCurResBattleGloryRank_ProtoModID_descriptor_ = stRetCurResBattleGloryRank_descriptor_->enum_type(0);
  stRetCurResBattleGloryRank_ProtoFunID_descriptor_ = stRetCurResBattleGloryRank_descriptor_->enum_type(1);
  stReqResBattleRank_descriptor_ = file->message_type(127);
  static const int stReqResBattleRank_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqResBattleRank, charid_),
  };
  stReqResBattleRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqResBattleRank_descriptor_,
      stReqResBattleRank::default_instance_,
      stReqResBattleRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqResBattleRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqResBattleRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqResBattleRank));
  stReqResBattleRank_ProtoModID_descriptor_ = stReqResBattleRank_descriptor_->enum_type(0);
  stReqResBattleRank_ProtoFunID_descriptor_ = stReqResBattleRank_descriptor_->enum_type(1);
  stRetResBattleRank_descriptor_ = file->message_type(128);
  static const int stRetResBattleRank_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetResBattleRank, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetResBattleRank, member_),
  };
  stRetResBattleRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRetResBattleRank_descriptor_,
      stRetResBattleRank::default_instance_,
      stRetResBattleRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetResBattleRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetResBattleRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRetResBattleRank));
  stRetResBattleRank_ProtoModID_descriptor_ = stRetResBattleRank_descriptor_->enum_type(0);
  stRetResBattleRank_ProtoFunID_descriptor_ = stRetResBattleRank_descriptor_->enum_type(1);
  stReqResBattleKing_descriptor_ = file->message_type(129);
  static const int stReqResBattleKing_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqResBattleKing, charid_),
  };
  stReqResBattleKing_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqResBattleKing_descriptor_,
      stReqResBattleKing::default_instance_,
      stReqResBattleKing_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqResBattleKing, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqResBattleKing, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqResBattleKing));
  stReqResBattleKing_ProtoModID_descriptor_ = stReqResBattleKing_descriptor_->enum_type(0);
  stReqResBattleKing_ProtoFunID_descriptor_ = stReqResBattleKing_descriptor_->enum_type(1);
  stResBattleRankMemInfo_descriptor_ = file->message_type(130);
  static const int stResBattleRankMemInfo_offsets_[26] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResBattleRankMemInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResBattleRankMemInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResBattleRankMemInfo, areacode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResBattleRankMemInfo, job_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResBattleRankMemInfo, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResBattleRankMemInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResBattleRankMemInfo, battlepower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResBattleRankMemInfo, killnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResBattleRankMemInfo, evenkillnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResBattleRankMemInfo, totalkillnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResBattleRankMemInfo, gloryval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResBattleRankMemInfo, prostatednum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResBattleRankMemInfo, headid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResBattleRankMemInfo, bodyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResBattleRankMemInfo, weaponid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResBattleRankMemInfo, cloackid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResBattleRankMemInfo, wingid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResBattleRankMemInfo, shoeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResBattleRankMemInfo, fashionhair_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResBattleRankMemInfo, fashionface_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResBattleRankMemInfo, fashionbody_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResBattleRankMemInfo, fashionweapon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResBattleRankMemInfo, fashionshoe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResBattleRankMemInfo, fashiondecoration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResBattleRankMemInfo, effectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResBattleRankMemInfo, wingbreaklv_),
  };
  stResBattleRankMemInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stResBattleRankMemInfo_descriptor_,
      stResBattleRankMemInfo::default_instance_,
      stResBattleRankMemInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResBattleRankMemInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResBattleRankMemInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stResBattleRankMemInfo));
  stRetResBattleKing_descriptor_ = file->message_type(131);
  static const int stRetResBattleKing_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetResBattleKing, existsking_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetResBattleKing, member_),
  };
  stRetResBattleKing_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRetResBattleKing_descriptor_,
      stRetResBattleKing::default_instance_,
      stRetResBattleKing_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetResBattleKing, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetResBattleKing, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRetResBattleKing));
  stRetResBattleKing_ProtoModID_descriptor_ = stRetResBattleKing_descriptor_->enum_type(0);
  stRetResBattleKing_ProtoFunID_descriptor_ = stRetResBattleKing_descriptor_->enum_type(1);
  stReqResBattleProstate_descriptor_ = file->message_type(132);
  static const int stReqResBattleProstate_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqResBattleProstate, charid_),
  };
  stReqResBattleProstate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqResBattleProstate_descriptor_,
      stReqResBattleProstate::default_instance_,
      stReqResBattleProstate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqResBattleProstate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqResBattleProstate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqResBattleProstate));
  stReqResBattleProstate_ProtoModID_descriptor_ = stReqResBattleProstate_descriptor_->enum_type(0);
  stReqResBattleProstate_ProtoFunID_descriptor_ = stReqResBattleProstate_descriptor_->enum_type(1);
  stRetResBattleProstate_descriptor_ = file->message_type(133);
  static const int stRetResBattleProstate_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetResBattleProstate, result_),
  };
  stRetResBattleProstate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRetResBattleProstate_descriptor_,
      stRetResBattleProstate::default_instance_,
      stRetResBattleProstate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetResBattleProstate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetResBattleProstate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRetResBattleProstate));
  stRetResBattleProstate_eResult_descriptor_ = stRetResBattleProstate_descriptor_->enum_type(0);
  stRetResBattleProstate_ProtoModID_descriptor_ = stRetResBattleProstate_descriptor_->enum_type(1);
  stRetResBattleProstate_ProtoFunID_descriptor_ = stRetResBattleProstate_descriptor_->enum_type(2);
  stReqResBattleRelive_descriptor_ = file->message_type(134);
  static const int stReqResBattleRelive_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqResBattleRelive, charid_),
  };
  stReqResBattleRelive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqResBattleRelive_descriptor_,
      stReqResBattleRelive::default_instance_,
      stReqResBattleRelive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqResBattleRelive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqResBattleRelive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqResBattleRelive));
  stReqResBattleRelive_ProtoModID_descriptor_ = stReqResBattleRelive_descriptor_->enum_type(0);
  stReqResBattleRelive_ProtoFunID_descriptor_ = stReqResBattleRelive_descriptor_->enum_type(1);
  stRetResBattleRelive_descriptor_ = file->message_type(135);
  static const int stRetResBattleRelive_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetResBattleRelive, result_),
  };
  stRetResBattleRelive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRetResBattleRelive_descriptor_,
      stRetResBattleRelive::default_instance_,
      stRetResBattleRelive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetResBattleRelive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetResBattleRelive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRetResBattleRelive));
  stRetResBattleRelive_eResult_descriptor_ = stRetResBattleRelive_descriptor_->enum_type(0);
  stRetResBattleRelive_ProtoModID_descriptor_ = stRetResBattleRelive_descriptor_->enum_type(1);
  stRetResBattleRelive_ProtoFunID_descriptor_ = stRetResBattleRelive_descriptor_->enum_type(2);
  stReqLeaveResBattle_descriptor_ = file->message_type(136);
  static const int stReqLeaveResBattle_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqLeaveResBattle, charid_),
  };
  stReqLeaveResBattle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqLeaveResBattle_descriptor_,
      stReqLeaveResBattle::default_instance_,
      stReqLeaveResBattle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqLeaveResBattle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqLeaveResBattle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqLeaveResBattle));
  stReqLeaveResBattle_ProtoModID_descriptor_ = stReqLeaveResBattle_descriptor_->enum_type(0);
  stReqLeaveResBattle_ProtoFunID_descriptor_ = stReqLeaveResBattle_descriptor_->enum_type(1);
  stRetLeaveResBattle_descriptor_ = file->message_type(137);
  static const int stRetLeaveResBattle_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetLeaveResBattle, result_),
  };
  stRetLeaveResBattle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRetLeaveResBattle_descriptor_,
      stRetLeaveResBattle::default_instance_,
      stRetLeaveResBattle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetLeaveResBattle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetLeaveResBattle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRetLeaveResBattle));
  stRetLeaveResBattle_eResult_descriptor_ = stRetLeaveResBattle_descriptor_->enum_type(0);
  stRetLeaveResBattle_ProtoModID_descriptor_ = stRetLeaveResBattle_descriptor_->enum_type(1);
  stRetLeaveResBattle_ProtoFunID_descriptor_ = stRetLeaveResBattle_descriptor_->enum_type(2);
  stReqRecvResBattleRes_descriptor_ = file->message_type(138);
  static const int stReqRecvResBattleRes_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqRecvResBattleRes, charid_),
  };
  stReqRecvResBattleRes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqRecvResBattleRes_descriptor_,
      stReqRecvResBattleRes::default_instance_,
      stReqRecvResBattleRes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqRecvResBattleRes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqRecvResBattleRes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqRecvResBattleRes));
  stReqRecvResBattleRes_ProtoModID_descriptor_ = stReqRecvResBattleRes_descriptor_->enum_type(0);
  stReqRecvResBattleRes_ProtoFunID_descriptor_ = stReqRecvResBattleRes_descriptor_->enum_type(1);
  stResBattleResItem_descriptor_ = file->message_type(139);
  static const int stResBattleResItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResBattleResItem, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResBattleResItem, num_),
  };
  stResBattleResItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stResBattleResItem_descriptor_,
      stResBattleResItem::default_instance_,
      stResBattleResItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResBattleResItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResBattleResItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stResBattleResItem));
  stRetRecvResBattleRes_descriptor_ = file->message_type(140);
  static const int stRetRecvResBattleRes_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetRecvResBattleRes, killnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetRecvResBattleRes, streaknum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetRecvResBattleRes, gloryval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetRecvResBattleRes, item_),
  };
  stRetRecvResBattleRes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRetRecvResBattleRes_descriptor_,
      stRetRecvResBattleRes::default_instance_,
      stRetRecvResBattleRes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetRecvResBattleRes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetRecvResBattleRes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRetRecvResBattleRes));
  stRetRecvResBattleRes_ProtoModID_descriptor_ = stRetRecvResBattleRes_descriptor_->enum_type(0);
  stRetRecvResBattleRes_ProtoFunID_descriptor_ = stRetRecvResBattleRes_descriptor_->enum_type(1);
  stSendResBattleStreakNum_descriptor_ = file->message_type(141);
  static const int stSendResBattleStreakNum_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendResBattleStreakNum, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendResBattleStreakNum, areacode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendResBattleStreakNum, val_),
  };
  stSendResBattleStreakNum_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSendResBattleStreakNum_descriptor_,
      stSendResBattleStreakNum::default_instance_,
      stSendResBattleStreakNum_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendResBattleStreakNum, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendResBattleStreakNum, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSendResBattleStreakNum));
  stSendResBattleStreakNum_ProtoModID_descriptor_ = stSendResBattleStreakNum_descriptor_->enum_type(0);
  stSendResBattleStreakNum_ProtoFunID_descriptor_ = stSendResBattleStreakNum_descriptor_->enum_type(1);
  stSendResBattleNotice_descriptor_ = file->message_type(142);
  static const int stSendResBattleNotice_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendResBattleNotice, noticeindex_),
  };
  stSendResBattleNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSendResBattleNotice_descriptor_,
      stSendResBattleNotice::default_instance_,
      stSendResBattleNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendResBattleNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendResBattleNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSendResBattleNotice));
  stSendResBattleNotice_eNotice_descriptor_ = stSendResBattleNotice_descriptor_->enum_type(0);
  stSendResBattleNotice_ProtoModID_descriptor_ = stSendResBattleNotice_descriptor_->enum_type(1);
  stSendResBattleNotice_ProtoFunID_descriptor_ = stSendResBattleNotice_descriptor_->enum_type(2);
  stNotityResBattleKillInfo_descriptor_ = file->message_type(143);
  static const int stNotityResBattleKillInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotityResBattleKillInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotityResBattleKillInfo, areacode_),
  };
  stNotityResBattleKillInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stNotityResBattleKillInfo_descriptor_,
      stNotityResBattleKillInfo::default_instance_,
      stNotityResBattleKillInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotityResBattleKillInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotityResBattleKillInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stNotityResBattleKillInfo));
  stNotityResBattleKillInfo_ProtoModID_descriptor_ = stNotityResBattleKillInfo_descriptor_->enum_type(0);
  stNotityResBattleKillInfo_ProtoFunID_descriptor_ = stNotityResBattleKillInfo_descriptor_->enum_type(1);
  stBattleResRefreshItem_descriptor_ = file->message_type(144);
  static const int stBattleResRefreshItem_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBattleResRefreshItem, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBattleResRefreshItem, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBattleResRefreshItem, z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBattleResRefreshItem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBattleResRefreshItem, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBattleResRefreshItem, collecttimes_),
  };
  stBattleResRefreshItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stBattleResRefreshItem_descriptor_,
      stBattleResRefreshItem::default_instance_,
      stBattleResRefreshItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBattleResRefreshItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBattleResRefreshItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stBattleResRefreshItem));
  stNotityResBattleResRefresh_descriptor_ = file->message_type(145);
  static const int stNotityResBattleResRefresh_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotityResBattleResRefresh, item_),
  };
  stNotityResBattleResRefresh_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stNotityResBattleResRefresh_descriptor_,
      stNotityResBattleResRefresh::default_instance_,
      stNotityResBattleResRefresh_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotityResBattleResRefresh, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotityResBattleResRefresh, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stNotityResBattleResRefresh));
  stNotityResBattleResRefresh_ProtoModID_descriptor_ = stNotityResBattleResRefresh_descriptor_->enum_type(0);
  stNotityResBattleResRefresh_ProtoFunID_descriptor_ = stNotityResBattleResRefresh_descriptor_->enum_type(1);
  stNotityResBattleResEmpty_descriptor_ = file->message_type(146);
  static const int stNotityResBattleResEmpty_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotityResBattleResEmpty, id_),
  };
  stNotityResBattleResEmpty_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stNotityResBattleResEmpty_descriptor_,
      stNotityResBattleResEmpty::default_instance_,
      stNotityResBattleResEmpty_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotityResBattleResEmpty, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotityResBattleResEmpty, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stNotityResBattleResEmpty));
  stNotityResBattleResEmpty_ProtoModID_descriptor_ = stNotityResBattleResEmpty_descriptor_->enum_type(0);
  stNotityResBattleResEmpty_ProtoFunID_descriptor_ = stNotityResBattleResEmpty_descriptor_->enum_type(1);
  stNotityResBattleGlory_descriptor_ = file->message_type(147);
  static const int stNotityResBattleGlory_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotityResBattleGlory, val_),
  };
  stNotityResBattleGlory_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stNotityResBattleGlory_descriptor_,
      stNotityResBattleGlory::default_instance_,
      stNotityResBattleGlory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotityResBattleGlory, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotityResBattleGlory, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stNotityResBattleGlory));
  stNotityResBattleGlory_ProtoModID_descriptor_ = stNotityResBattleGlory_descriptor_->enum_type(0);
  stNotityResBattleGlory_ProtoFunID_descriptor_ = stNotityResBattleGlory_descriptor_->enum_type(1);
  stBroadCastResBattleInvite_descriptor_ = file->message_type(148);
  static const int stBroadCastResBattleInvite_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBroadCastResBattleInvite, charid_),
  };
  stBroadCastResBattleInvite_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stBroadCastResBattleInvite_descriptor_,
      stBroadCastResBattleInvite::default_instance_,
      stBroadCastResBattleInvite_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBroadCastResBattleInvite, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBroadCastResBattleInvite, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stBroadCastResBattleInvite));
  stBroadCastResBattleInvite_ProtoModID_descriptor_ = stBroadCastResBattleInvite_descriptor_->enum_type(0);
  stBroadCastResBattleInvite_ProtoFunID_descriptor_ = stBroadCastResBattleInvite_descriptor_->enum_type(1);
  stRetResBattleReceiveInvite_descriptor_ = file->message_type(149);
  static const int stRetResBattleReceiveInvite_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetResBattleReceiveInvite, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetResBattleReceiveInvite, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetResBattleReceiveInvite, instancelvl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetResBattleReceiveInvite, job_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetResBattleReceiveInvite, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetResBattleReceiveInvite, battlepower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetResBattleReceiveInvite, viplv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetResBattleReceiveInvite, photoid_),
  };
  stRetResBattleReceiveInvite_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRetResBattleReceiveInvite_descriptor_,
      stRetResBattleReceiveInvite::default_instance_,
      stRetResBattleReceiveInvite_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetResBattleReceiveInvite, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetResBattleReceiveInvite, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRetResBattleReceiveInvite));
  stRetResBattleReceiveInvite_ProtoModID_descriptor_ = stRetResBattleReceiveInvite_descriptor_->enum_type(0);
  stRetResBattleReceiveInvite_ProtoFunID_descriptor_ = stRetResBattleReceiveInvite_descriptor_->enum_type(1);
  stResBattleReplyInviteJoin_descriptor_ = file->message_type(150);
  static const int stResBattleReplyInviteJoin_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResBattleReplyInviteJoin, agree_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResBattleReplyInviteJoin, charid_),
  };
  stResBattleReplyInviteJoin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stResBattleReplyInviteJoin_descriptor_,
      stResBattleReplyInviteJoin::default_instance_,
      stResBattleReplyInviteJoin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResBattleReplyInviteJoin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResBattleReplyInviteJoin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stResBattleReplyInviteJoin));
  stResBattleReplyInviteJoin_ProtoModID_descriptor_ = stResBattleReplyInviteJoin_descriptor_->enum_type(0);
  stResBattleReplyInviteJoin_ProtoFunID_descriptor_ = stResBattleReplyInviteJoin_descriptor_->enum_type(1);
  stResBattleInviteJoinRes_descriptor_ = file->message_type(151);
  static const int stResBattleInviteJoinRes_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResBattleInviteJoinRes, result_),
  };
  stResBattleInviteJoinRes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stResBattleInviteJoinRes_descriptor_,
      stResBattleInviteJoinRes::default_instance_,
      stResBattleInviteJoinRes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResBattleInviteJoinRes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResBattleInviteJoinRes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stResBattleInviteJoinRes));
  stResBattleInviteJoinRes_eResult_descriptor_ = stResBattleInviteJoinRes_descriptor_->enum_type(0);
  stResBattleInviteJoinRes_ProtoModID_descriptor_ = stResBattleInviteJoinRes_descriptor_->enum_type(1);
  stResBattleInviteJoinRes_ProtoFunID_descriptor_ = stResBattleInviteJoinRes_descriptor_->enum_type(2);
  stReqStoneCopyMapInfo_descriptor_ = file->message_type(152);
  static const int stReqStoneCopyMapInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqStoneCopyMapInfo, charid_),
  };
  stReqStoneCopyMapInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqStoneCopyMapInfo_descriptor_,
      stReqStoneCopyMapInfo::default_instance_,
      stReqStoneCopyMapInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqStoneCopyMapInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqStoneCopyMapInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqStoneCopyMapInfo));
  stReqStoneCopyMapInfo_ProtoModID_descriptor_ = stReqStoneCopyMapInfo_descriptor_->enum_type(0);
  stReqStoneCopyMapInfo_ProtoFunID_descriptor_ = stReqStoneCopyMapInfo_descriptor_->enum_type(1);
  stStoneCopyMapInfoResult_descriptor_ = file->message_type(153);
  static const int stStoneCopyMapInfoResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stStoneCopyMapInfoResult, usedtimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stStoneCopyMapInfoResult, maxtimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stStoneCopyMapInfoResult, resettimes_),
  };
  stStoneCopyMapInfoResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stStoneCopyMapInfoResult_descriptor_,
      stStoneCopyMapInfoResult::default_instance_,
      stStoneCopyMapInfoResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stStoneCopyMapInfoResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stStoneCopyMapInfoResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stStoneCopyMapInfoResult));
  stStoneCopyMapInfoResult_ProtoModID_descriptor_ = stStoneCopyMapInfoResult_descriptor_->enum_type(0);
  stStoneCopyMapInfoResult_ProtoFunID_descriptor_ = stStoneCopyMapInfoResult_descriptor_->enum_type(1);
  stReqChallengeStoneCopyMap_descriptor_ = file->message_type(154);
  static const int stReqChallengeStoneCopyMap_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqChallengeStoneCopyMap, levelid_),
  };
  stReqChallengeStoneCopyMap_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqChallengeStoneCopyMap_descriptor_,
      stReqChallengeStoneCopyMap::default_instance_,
      stReqChallengeStoneCopyMap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqChallengeStoneCopyMap, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqChallengeStoneCopyMap, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqChallengeStoneCopyMap));
  stReqChallengeStoneCopyMap_ProtoModID_descriptor_ = stReqChallengeStoneCopyMap_descriptor_->enum_type(0);
  stReqChallengeStoneCopyMap_ProtoFunID_descriptor_ = stReqChallengeStoneCopyMap_descriptor_->enum_type(1);
  stChallengeStoneCopyMap_descriptor_ = file->message_type(155);
  static const int stChallengeStoneCopyMap_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stChallengeStoneCopyMap, levelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stChallengeStoneCopyMap, result_),
  };
  stChallengeStoneCopyMap_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stChallengeStoneCopyMap_descriptor_,
      stChallengeStoneCopyMap::default_instance_,
      stChallengeStoneCopyMap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stChallengeStoneCopyMap, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stChallengeStoneCopyMap, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stChallengeStoneCopyMap));
  stChallengeStoneCopyMap_eResult_descriptor_ = stChallengeStoneCopyMap_descriptor_->enum_type(0);
  stChallengeStoneCopyMap_ProtoModID_descriptor_ = stChallengeStoneCopyMap_descriptor_->enum_type(1);
  stChallengeStoneCopyMap_ProtoFunID_descriptor_ = stChallengeStoneCopyMap_descriptor_->enum_type(2);
  stReqResetStoneCopyMapNum_descriptor_ = file->message_type(156);
  static const int stReqResetStoneCopyMapNum_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqResetStoneCopyMapNum, charid_),
  };
  stReqResetStoneCopyMapNum_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqResetStoneCopyMapNum_descriptor_,
      stReqResetStoneCopyMapNum::default_instance_,
      stReqResetStoneCopyMapNum_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqResetStoneCopyMapNum, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqResetStoneCopyMapNum, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqResetStoneCopyMapNum));
  stReqResetStoneCopyMapNum_ProtoModID_descriptor_ = stReqResetStoneCopyMapNum_descriptor_->enum_type(0);
  stReqResetStoneCopyMapNum_ProtoFunID_descriptor_ = stReqResetStoneCopyMapNum_descriptor_->enum_type(1);
  stResetStoneCopyMapNum_descriptor_ = file->message_type(157);
  static const int stResetStoneCopyMapNum_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResetStoneCopyMapNum, result_),
  };
  stResetStoneCopyMapNum_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stResetStoneCopyMapNum_descriptor_,
      stResetStoneCopyMapNum::default_instance_,
      stResetStoneCopyMapNum_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResetStoneCopyMapNum, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResetStoneCopyMapNum, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stResetStoneCopyMapNum));
  stResetStoneCopyMapNum_eResult_descriptor_ = stResetStoneCopyMapNum_descriptor_->enum_type(0);
  stResetStoneCopyMapNum_ProtoModID_descriptor_ = stResetStoneCopyMapNum_descriptor_->enum_type(1);
  stResetStoneCopyMapNum_ProtoFunID_descriptor_ = stResetStoneCopyMapNum_descriptor_->enum_type(2);
  stReqResBattleResource_descriptor_ = file->message_type(158);
  static const int stReqResBattleResource_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqResBattleResource, charid_),
  };
  stReqResBattleResource_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqResBattleResource_descriptor_,
      stReqResBattleResource::default_instance_,
      stReqResBattleResource_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqResBattleResource, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqResBattleResource, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqResBattleResource));
  stReqResBattleResource_ProtoModID_descriptor_ = stReqResBattleResource_descriptor_->enum_type(0);
  stReqResBattleResource_ProtoFunID_descriptor_ = stReqResBattleResource_descriptor_->enum_type(1);
  stRetResBattleResource_descriptor_ = file->message_type(159);
  static const int stRetResBattleResource_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetResBattleResource, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetResBattleResource, item_),
  };
  stRetResBattleResource_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRetResBattleResource_descriptor_,
      stRetResBattleResource::default_instance_,
      stRetResBattleResource_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetResBattleResource, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetResBattleResource, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRetResBattleResource));
  stRetResBattleResource_eResult_descriptor_ = stRetResBattleResource_descriptor_->enum_type(0);
  stRetResBattleResource_ProtoModID_descriptor_ = stRetResBattleResource_descriptor_->enum_type(1);
  stRetResBattleResource_ProtoFunID_descriptor_ = stRetResBattleResource_descriptor_->enum_type(2);
  stResBattleEnd_descriptor_ = file->message_type(160);
  static const int stResBattleEnd_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResBattleEnd, charid_),
  };
  stResBattleEnd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stResBattleEnd_descriptor_,
      stResBattleEnd::default_instance_,
      stResBattleEnd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResBattleEnd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResBattleEnd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stResBattleEnd));
  stResBattleEnd_ProtoModID_descriptor_ = stResBattleEnd_descriptor_->enum_type(0);
  stResBattleEnd_ProtoFunID_descriptor_ = stResBattleEnd_descriptor_->enum_type(1);
  eOne2OneSortListType_descriptor_ = file->enum_type(0);
  eLeitaiMode_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SortList_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqLevelSortList_descriptor_, &stReqLevelSortList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSynLevelSortItem_descriptor_, &stSynLevelSortItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRetLevelSortList_descriptor_, &stRetLevelSortList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqBattlePowerSortList_descriptor_, &stReqBattlePowerSortList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSynBattlePowerSortItem_descriptor_, &stSynBattlePowerSortItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRetBattlePowerSortList_descriptor_, &stRetBattlePowerSortList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqCopymapSortList_descriptor_, &stReqCopymapSortList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stCopyMapSortItem_descriptor_, &stCopyMapSortItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRetCopyMapSortList_descriptor_, &stRetCopyMapSortList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSynArenaSortInfo_descriptor_, &stSynArenaSortInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqArenaPKList_descriptor_, &stReqArenaPKList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRetArenaPKList_descriptor_, &stRetArenaPKList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqArenaSortList_descriptor_, &stReqArenaSortList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRetArenaSortList_descriptor_, &stRetArenaSortList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSynOne2OnePVPInfo_descriptor_, &stSynOne2OnePVPInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqOne2OnePVPSortList_descriptor_, &stReqOne2OnePVPSortList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRetOne2OnePVPSortList_descriptor_, &stRetOne2OnePVPSortList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stChallengeArenaUser_descriptor_, &stChallengeArenaUser::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stChallengeArenaUserResult_descriptor_, &stChallengeArenaUserResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stChallegeLeitaiUser_descriptor_, &stChallegeLeitaiUser::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stChallegeLeitaiUserResult_descriptor_, &stChallegeLeitaiUserResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stOpenLeitaiWindow_descriptor_, &stOpenLeitaiWindow::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSynHeroHP_descriptor_, &stSynHeroHP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRetLeitaiInfo_descriptor_, &stRetLeitaiInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqLeitaiSortList_descriptor_, &stReqLeitaiSortList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stLeitaiSortListItem_descriptor_, &stLeitaiSortListItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRetLeitaiSortList_descriptor_, &stRetLeitaiSortList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSendLeitaiResult_descriptor_, &stSendLeitaiResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRetSendLeitaiResult_descriptor_, &stRetSendLeitaiResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stNotifySelectLeitaiMode_descriptor_, &stNotifySelectLeitaiMode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSelectLeiTaiMode_descriptor_, &stSelectLeiTaiMode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSelectLeiTaiModeResult_descriptor_, &stSelectLeiTaiModeResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stResetLeitaiInfo_descriptor_, &stResetLeitaiInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stResetLeitaiInfoResult_descriptor_, &stResetLeitaiInfoResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqDrawHeroSortList_descriptor_, &stReqDrawHeroSortList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stDrawHeroSortItem_descriptor_, &stDrawHeroSortItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stDrawHeroSortList_descriptor_, &stDrawHeroSortList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqOne2OnePVPMatch_descriptor_, &stReqOne2OnePVPMatch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stOne2OnePVPMatchResult_descriptor_, &stOne2OnePVPMatchResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stCancelOne2OnePVPMatch_descriptor_, &stCancelOne2OnePVPMatch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stCancelOne2OnePVPResult_descriptor_, &stCancelOne2OnePVPResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqMySortListInfo_descriptor_, &stReqMySortListInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRetMySortListInfo_descriptor_, &stRetMySortListInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stLeitaiMoveHero2BattlePos_descriptor_, &stLeitaiMoveHero2BattlePos::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stLeitaiMoveHero2BattlePosError_descriptor_, &stLeitaiMoveHero2BattlePosError::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stLeitaiCancelGoOutForBattle_descriptor_, &stLeitaiCancelGoOutForBattle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stLeitaiCancelGoOutForBattleResult_descriptor_, &stLeitaiCancelGoOutForBattleResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stCommitArenaResult_descriptor_, &stCommitArenaResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRetCommintArenaResult_descriptor_, &stRetCommintArenaResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqEnterLeitaiScene_descriptor_, &stReqEnterLeitaiScene::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqResetLeitaiBuff_descriptor_, &stReqResetLeitaiBuff::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stResetLeitaiBuffResult_descriptor_, &stResetLeitaiBuffResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqBuffResetTime_descriptor_, &stReqBuffResetTime::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRetBuffResetTime_descriptor_, &stRetBuffResetTime::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stArenaReachNewRank_descriptor_, &stArenaReachNewRank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqResetArenaChallengeNum_descriptor_, &stReqResetArenaChallengeNum::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stResetArenaChallengeNunResult_descriptor_, &stResetArenaChallengeNunResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqClearArenaCD_descriptor_, &stReqClearArenaCD::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stClearArenaCDResult_descriptor_, &stClearArenaCDResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqOpenSvrBPRank_descriptor_, &stReqOpenSvrBPRank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stBPRankItemInfo_descriptor_, &stBPRankItemInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRetOpenSvrBPRank_descriptor_, &stRetOpenSvrBPRank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqExpeditionInfo_descriptor_, &stReqExpeditionInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stExpeditionItem_descriptor_, &stExpeditionItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRetExpeditionInfo_descriptor_, &stRetExpeditionInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqExpedition_descriptor_, &stReqExpedition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRetExpedition_descriptor_, &stRetExpedition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqExpeditionReward_descriptor_, &stReqExpeditionReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRetExpeditionReward_descriptor_, &stRetExpeditionReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqFastExpedition_descriptor_, &stReqFastExpedition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRetFastExpedition_descriptor_, &stRetFastExpedition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqCancelExpedition_descriptor_, &stReqCancelExpedition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRetCancelExpedition_descriptor_, &stRetCancelExpedition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqExpeditionSummary_descriptor_, &stReqExpeditionSummary::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRetExpeditionSummary_descriptor_, &stRetExpeditionSummary::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqGloryfashionSortList_descriptor_, &stReqGloryfashionSortList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stGloryfashionSortList_descriptor_, &stGloryfashionSortList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqEnterEmeraldDream_descriptor_, &stReqEnterEmeraldDream::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stEnterEmeraldDreamResult_descriptor_, &stEnterEmeraldDreamResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stResetFightNum_descriptor_, &stResetFightNum::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stResetFightNumResult_descriptor_, &stResetFightNumResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqEmeraldDreamSortList_descriptor_, &stReqEmeraldDreamSortList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SortListInfo_descriptor_, &SortListInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stEmeraldDreamSortList_descriptor_, &stEmeraldDreamSortList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSendRankInfo_descriptor_, &stSendRankInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqSurplusNum_descriptor_, &stReqSurplusNum::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    userSortInfo_descriptor_, &userSortInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSurplusNumResult_descriptor_, &stSurplusNumResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSynChampionInfo_descriptor_, &stSynChampionInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stMyIntegralAndNum_descriptor_, &stMyIntegralAndNum::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqOpenLeagueWindow_descriptor_, &stReqOpenLeagueWindow::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stOpenLeagueWindowResult_descriptor_, &stOpenLeagueWindowResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqHeroLeagueMatch_descriptor_, &stReqHeroLeagueMatch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stHeroLeagueMatchResult_descriptor_, &stHeroLeagueMatchResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqMenberInfo_descriptor_, &stReqMenberInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stMemberinfo_descriptor_, &stMemberinfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stCancelHeroLeagueMatch_descriptor_, &stCancelHeroLeagueMatch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stCanceHeroLeagueResult_descriptor_, &stCanceHeroLeagueResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqQualifiedList_descriptor_, &stReqQualifiedList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRoleBasicInfo_descriptor_, &stRoleBasicInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stTeam_descriptor_, &stTeam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stQualifiedListResult_descriptor_, &stQualifiedListResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqWorship_descriptor_, &stReqWorship::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stWorskipResult_descriptor_, &stWorskipResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqHeroList_descriptor_, &stReqHeroList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRankInfo_descriptor_, &stRankInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stHeroListResult_descriptor_, &stHeroListResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqRegister_descriptor_, &stReqRegister::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRegisrerResult_descriptor_, &stRegisrerResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stArenaResultNotify_descriptor_, &stArenaResultNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqPubLogIn_descriptor_, &stReqPubLogIn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqPubLogOut_descriptor_, &stReqPubLogOut::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRemoveModel_descriptor_, &stRemoveModel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stLeitaiResultNotify_descriptor_, &stLeitaiResultNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqRedPoint_descriptor_, &stReqRedPoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRedPointResult_descriptor_, &stRedPointResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqDragonNest_descriptor_, &stReqDragonNest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRetDragonNest_descriptor_, &stRetDragonNest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqChallengeDragonNest_descriptor_, &stReqChallengeDragonNest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRetChallengeDragonNest_descriptor_, &stRetChallengeDragonNest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqResetChallengeDragonNest_descriptor_, &stReqResetChallengeDragonNest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRetResetChallengeDragonNest_descriptor_, &stRetResetChallengeDragonNest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqEnterResBattle_descriptor_, &stReqEnterResBattle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRetEnterResBattle_descriptor_, &stRetEnterResBattle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqCurResBattleGloryRank_descriptor_, &stReqCurResBattleGloryRank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stResBattleGloryRankMemInfo_descriptor_, &stResBattleGloryRankMemInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRetCurResBattleGloryRank_descriptor_, &stRetCurResBattleGloryRank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqResBattleRank_descriptor_, &stReqResBattleRank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRetResBattleRank_descriptor_, &stRetResBattleRank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqResBattleKing_descriptor_, &stReqResBattleKing::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stResBattleRankMemInfo_descriptor_, &stResBattleRankMemInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRetResBattleKing_descriptor_, &stRetResBattleKing::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqResBattleProstate_descriptor_, &stReqResBattleProstate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRetResBattleProstate_descriptor_, &stRetResBattleProstate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqResBattleRelive_descriptor_, &stReqResBattleRelive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRetResBattleRelive_descriptor_, &stRetResBattleRelive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqLeaveResBattle_descriptor_, &stReqLeaveResBattle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRetLeaveResBattle_descriptor_, &stRetLeaveResBattle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqRecvResBattleRes_descriptor_, &stReqRecvResBattleRes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stResBattleResItem_descriptor_, &stResBattleResItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRetRecvResBattleRes_descriptor_, &stRetRecvResBattleRes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSendResBattleStreakNum_descriptor_, &stSendResBattleStreakNum::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSendResBattleNotice_descriptor_, &stSendResBattleNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stNotityResBattleKillInfo_descriptor_, &stNotityResBattleKillInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stBattleResRefreshItem_descriptor_, &stBattleResRefreshItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stNotityResBattleResRefresh_descriptor_, &stNotityResBattleResRefresh::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stNotityResBattleResEmpty_descriptor_, &stNotityResBattleResEmpty::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stNotityResBattleGlory_descriptor_, &stNotityResBattleGlory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stBroadCastResBattleInvite_descriptor_, &stBroadCastResBattleInvite::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRetResBattleReceiveInvite_descriptor_, &stRetResBattleReceiveInvite::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stResBattleReplyInviteJoin_descriptor_, &stResBattleReplyInviteJoin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stResBattleInviteJoinRes_descriptor_, &stResBattleInviteJoinRes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqStoneCopyMapInfo_descriptor_, &stReqStoneCopyMapInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stStoneCopyMapInfoResult_descriptor_, &stStoneCopyMapInfoResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqChallengeStoneCopyMap_descriptor_, &stReqChallengeStoneCopyMap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stChallengeStoneCopyMap_descriptor_, &stChallengeStoneCopyMap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqResetStoneCopyMapNum_descriptor_, &stReqResetStoneCopyMapNum::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stResetStoneCopyMapNum_descriptor_, &stResetStoneCopyMapNum::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqResBattleResource_descriptor_, &stReqResBattleResource::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRetResBattleResource_descriptor_, &stRetResBattleResource::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stResBattleEnd_descriptor_, &stResBattleEnd::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SortList_2eproto() {
  delete stReqLevelSortList::default_instance_;
  delete stReqLevelSortList_reflection_;
  delete stSynLevelSortItem::default_instance_;
  delete stSynLevelSortItem_reflection_;
  delete stRetLevelSortList::default_instance_;
  delete stRetLevelSortList_reflection_;
  delete stReqBattlePowerSortList::default_instance_;
  delete stReqBattlePowerSortList_reflection_;
  delete stSynBattlePowerSortItem::default_instance_;
  delete stSynBattlePowerSortItem_reflection_;
  delete stRetBattlePowerSortList::default_instance_;
  delete stRetBattlePowerSortList_reflection_;
  delete stReqCopymapSortList::default_instance_;
  delete stReqCopymapSortList_reflection_;
  delete stCopyMapSortItem::default_instance_;
  delete stCopyMapSortItem_reflection_;
  delete stRetCopyMapSortList::default_instance_;
  delete stRetCopyMapSortList_reflection_;
  delete stSynArenaSortInfo::default_instance_;
  delete stSynArenaSortInfo_reflection_;
  delete stReqArenaPKList::default_instance_;
  delete stReqArenaPKList_reflection_;
  delete stRetArenaPKList::default_instance_;
  delete stRetArenaPKList_reflection_;
  delete stReqArenaSortList::default_instance_;
  delete stReqArenaSortList_reflection_;
  delete stRetArenaSortList::default_instance_;
  delete stRetArenaSortList_reflection_;
  delete stSynOne2OnePVPInfo::default_instance_;
  delete stSynOne2OnePVPInfo_reflection_;
  delete stReqOne2OnePVPSortList::default_instance_;
  delete stReqOne2OnePVPSortList_reflection_;
  delete stRetOne2OnePVPSortList::default_instance_;
  delete stRetOne2OnePVPSortList_reflection_;
  delete stChallengeArenaUser::default_instance_;
  delete stChallengeArenaUser_reflection_;
  delete stChallengeArenaUserResult::default_instance_;
  delete stChallengeArenaUserResult_reflection_;
  delete stChallegeLeitaiUser::default_instance_;
  delete stChallegeLeitaiUser_reflection_;
  delete stChallegeLeitaiUserResult::default_instance_;
  delete stChallegeLeitaiUserResult_reflection_;
  delete stOpenLeitaiWindow::default_instance_;
  delete stOpenLeitaiWindow_reflection_;
  delete stSynHeroHP::default_instance_;
  delete stSynHeroHP_reflection_;
  delete stRetLeitaiInfo::default_instance_;
  delete stRetLeitaiInfo_reflection_;
  delete stReqLeitaiSortList::default_instance_;
  delete stReqLeitaiSortList_reflection_;
  delete stLeitaiSortListItem::default_instance_;
  delete stLeitaiSortListItem_reflection_;
  delete stRetLeitaiSortList::default_instance_;
  delete stRetLeitaiSortList_reflection_;
  delete stSendLeitaiResult::default_instance_;
  delete stSendLeitaiResult_reflection_;
  delete stRetSendLeitaiResult::default_instance_;
  delete stRetSendLeitaiResult_reflection_;
  delete stNotifySelectLeitaiMode::default_instance_;
  delete stNotifySelectLeitaiMode_reflection_;
  delete stSelectLeiTaiMode::default_instance_;
  delete stSelectLeiTaiMode_reflection_;
  delete stSelectLeiTaiModeResult::default_instance_;
  delete stSelectLeiTaiModeResult_reflection_;
  delete stResetLeitaiInfo::default_instance_;
  delete stResetLeitaiInfo_reflection_;
  delete stResetLeitaiInfoResult::default_instance_;
  delete stResetLeitaiInfoResult_reflection_;
  delete stReqDrawHeroSortList::default_instance_;
  delete stReqDrawHeroSortList_reflection_;
  delete stDrawHeroSortItem::default_instance_;
  delete stDrawHeroSortItem_reflection_;
  delete stDrawHeroSortList::default_instance_;
  delete stDrawHeroSortList_reflection_;
  delete stReqOne2OnePVPMatch::default_instance_;
  delete stReqOne2OnePVPMatch_reflection_;
  delete stOne2OnePVPMatchResult::default_instance_;
  delete stOne2OnePVPMatchResult_reflection_;
  delete stCancelOne2OnePVPMatch::default_instance_;
  delete stCancelOne2OnePVPMatch_reflection_;
  delete stCancelOne2OnePVPResult::default_instance_;
  delete stCancelOne2OnePVPResult_reflection_;
  delete stReqMySortListInfo::default_instance_;
  delete stReqMySortListInfo_reflection_;
  delete stRetMySortListInfo::default_instance_;
  delete stRetMySortListInfo_reflection_;
  delete stLeitaiMoveHero2BattlePos::default_instance_;
  delete stLeitaiMoveHero2BattlePos_reflection_;
  delete stLeitaiMoveHero2BattlePosError::default_instance_;
  delete stLeitaiMoveHero2BattlePosError_reflection_;
  delete stLeitaiCancelGoOutForBattle::default_instance_;
  delete stLeitaiCancelGoOutForBattle_reflection_;
  delete stLeitaiCancelGoOutForBattleResult::default_instance_;
  delete stLeitaiCancelGoOutForBattleResult_reflection_;
  delete stCommitArenaResult::default_instance_;
  delete stCommitArenaResult_reflection_;
  delete stRetCommintArenaResult::default_instance_;
  delete stRetCommintArenaResult_reflection_;
  delete stReqEnterLeitaiScene::default_instance_;
  delete stReqEnterLeitaiScene_reflection_;
  delete stReqResetLeitaiBuff::default_instance_;
  delete stReqResetLeitaiBuff_reflection_;
  delete stResetLeitaiBuffResult::default_instance_;
  delete stResetLeitaiBuffResult_reflection_;
  delete stReqBuffResetTime::default_instance_;
  delete stReqBuffResetTime_reflection_;
  delete stRetBuffResetTime::default_instance_;
  delete stRetBuffResetTime_reflection_;
  delete stArenaReachNewRank::default_instance_;
  delete stArenaReachNewRank_reflection_;
  delete stReqResetArenaChallengeNum::default_instance_;
  delete stReqResetArenaChallengeNum_reflection_;
  delete stResetArenaChallengeNunResult::default_instance_;
  delete stResetArenaChallengeNunResult_reflection_;
  delete stReqClearArenaCD::default_instance_;
  delete stReqClearArenaCD_reflection_;
  delete stClearArenaCDResult::default_instance_;
  delete stClearArenaCDResult_reflection_;
  delete stReqOpenSvrBPRank::default_instance_;
  delete stReqOpenSvrBPRank_reflection_;
  delete stBPRankItemInfo::default_instance_;
  delete stBPRankItemInfo_reflection_;
  delete stRetOpenSvrBPRank::default_instance_;
  delete stRetOpenSvrBPRank_reflection_;
  delete stReqExpeditionInfo::default_instance_;
  delete stReqExpeditionInfo_reflection_;
  delete stExpeditionItem::default_instance_;
  delete stExpeditionItem_reflection_;
  delete stRetExpeditionInfo::default_instance_;
  delete stRetExpeditionInfo_reflection_;
  delete stReqExpedition::default_instance_;
  delete stReqExpedition_reflection_;
  delete stRetExpedition::default_instance_;
  delete stRetExpedition_reflection_;
  delete stReqExpeditionReward::default_instance_;
  delete stReqExpeditionReward_reflection_;
  delete stRetExpeditionReward::default_instance_;
  delete stRetExpeditionReward_reflection_;
  delete stReqFastExpedition::default_instance_;
  delete stReqFastExpedition_reflection_;
  delete stRetFastExpedition::default_instance_;
  delete stRetFastExpedition_reflection_;
  delete stReqCancelExpedition::default_instance_;
  delete stReqCancelExpedition_reflection_;
  delete stRetCancelExpedition::default_instance_;
  delete stRetCancelExpedition_reflection_;
  delete stReqExpeditionSummary::default_instance_;
  delete stReqExpeditionSummary_reflection_;
  delete stRetExpeditionSummary::default_instance_;
  delete stRetExpeditionSummary_reflection_;
  delete stReqGloryfashionSortList::default_instance_;
  delete stReqGloryfashionSortList_reflection_;
  delete stGloryfashionSortList::default_instance_;
  delete stGloryfashionSortList_reflection_;
  delete stReqEnterEmeraldDream::default_instance_;
  delete stReqEnterEmeraldDream_reflection_;
  delete stEnterEmeraldDreamResult::default_instance_;
  delete stEnterEmeraldDreamResult_reflection_;
  delete stResetFightNum::default_instance_;
  delete stResetFightNum_reflection_;
  delete stResetFightNumResult::default_instance_;
  delete stResetFightNumResult_reflection_;
  delete stReqEmeraldDreamSortList::default_instance_;
  delete stReqEmeraldDreamSortList_reflection_;
  delete SortListInfo::default_instance_;
  delete SortListInfo_reflection_;
  delete stEmeraldDreamSortList::default_instance_;
  delete stEmeraldDreamSortList_reflection_;
  delete stSendRankInfo::default_instance_;
  delete stSendRankInfo_reflection_;
  delete stReqSurplusNum::default_instance_;
  delete stReqSurplusNum_reflection_;
  delete userSortInfo::default_instance_;
  delete userSortInfo_reflection_;
  delete stSurplusNumResult::default_instance_;
  delete stSurplusNumResult_reflection_;
  delete stSynChampionInfo::default_instance_;
  delete stSynChampionInfo_reflection_;
  delete stMyIntegralAndNum::default_instance_;
  delete stMyIntegralAndNum_reflection_;
  delete stReqOpenLeagueWindow::default_instance_;
  delete stReqOpenLeagueWindow_reflection_;
  delete stOpenLeagueWindowResult::default_instance_;
  delete stOpenLeagueWindowResult_reflection_;
  delete stReqHeroLeagueMatch::default_instance_;
  delete stReqHeroLeagueMatch_reflection_;
  delete stHeroLeagueMatchResult::default_instance_;
  delete stHeroLeagueMatchResult_reflection_;
  delete stReqMenberInfo::default_instance_;
  delete stReqMenberInfo_reflection_;
  delete stMemberinfo::default_instance_;
  delete stMemberinfo_reflection_;
  delete stCancelHeroLeagueMatch::default_instance_;
  delete stCancelHeroLeagueMatch_reflection_;
  delete stCanceHeroLeagueResult::default_instance_;
  delete stCanceHeroLeagueResult_reflection_;
  delete stReqQualifiedList::default_instance_;
  delete stReqQualifiedList_reflection_;
  delete stRoleBasicInfo::default_instance_;
  delete stRoleBasicInfo_reflection_;
  delete stTeam::default_instance_;
  delete stTeam_reflection_;
  delete stQualifiedListResult::default_instance_;
  delete stQualifiedListResult_reflection_;
  delete stReqWorship::default_instance_;
  delete stReqWorship_reflection_;
  delete stWorskipResult::default_instance_;
  delete stWorskipResult_reflection_;
  delete stReqHeroList::default_instance_;
  delete stReqHeroList_reflection_;
  delete stRankInfo::default_instance_;
  delete stRankInfo_reflection_;
  delete stHeroListResult::default_instance_;
  delete stHeroListResult_reflection_;
  delete stReqRegister::default_instance_;
  delete stReqRegister_reflection_;
  delete stRegisrerResult::default_instance_;
  delete stRegisrerResult_reflection_;
  delete stArenaResultNotify::default_instance_;
  delete stArenaResultNotify_reflection_;
  delete stReqPubLogIn::default_instance_;
  delete stReqPubLogIn_reflection_;
  delete stReqPubLogOut::default_instance_;
  delete stReqPubLogOut_reflection_;
  delete stRemoveModel::default_instance_;
  delete stRemoveModel_reflection_;
  delete stLeitaiResultNotify::default_instance_;
  delete stLeitaiResultNotify_reflection_;
  delete stReqRedPoint::default_instance_;
  delete stReqRedPoint_reflection_;
  delete stRedPointResult::default_instance_;
  delete stRedPointResult_reflection_;
  delete stReqDragonNest::default_instance_;
  delete stReqDragonNest_reflection_;
  delete stRetDragonNest::default_instance_;
  delete stRetDragonNest_reflection_;
  delete stReqChallengeDragonNest::default_instance_;
  delete stReqChallengeDragonNest_reflection_;
  delete stRetChallengeDragonNest::default_instance_;
  delete stRetChallengeDragonNest_reflection_;
  delete stReqResetChallengeDragonNest::default_instance_;
  delete stReqResetChallengeDragonNest_reflection_;
  delete stRetResetChallengeDragonNest::default_instance_;
  delete stRetResetChallengeDragonNest_reflection_;
  delete stReqEnterResBattle::default_instance_;
  delete stReqEnterResBattle_reflection_;
  delete stRetEnterResBattle::default_instance_;
  delete stRetEnterResBattle_reflection_;
  delete stReqCurResBattleGloryRank::default_instance_;
  delete stReqCurResBattleGloryRank_reflection_;
  delete stResBattleGloryRankMemInfo::default_instance_;
  delete stResBattleGloryRankMemInfo_reflection_;
  delete stRetCurResBattleGloryRank::default_instance_;
  delete stRetCurResBattleGloryRank_reflection_;
  delete stReqResBattleRank::default_instance_;
  delete stReqResBattleRank_reflection_;
  delete stRetResBattleRank::default_instance_;
  delete stRetResBattleRank_reflection_;
  delete stReqResBattleKing::default_instance_;
  delete stReqResBattleKing_reflection_;
  delete stResBattleRankMemInfo::default_instance_;
  delete stResBattleRankMemInfo_reflection_;
  delete stRetResBattleKing::default_instance_;
  delete stRetResBattleKing_reflection_;
  delete stReqResBattleProstate::default_instance_;
  delete stReqResBattleProstate_reflection_;
  delete stRetResBattleProstate::default_instance_;
  delete stRetResBattleProstate_reflection_;
  delete stReqResBattleRelive::default_instance_;
  delete stReqResBattleRelive_reflection_;
  delete stRetResBattleRelive::default_instance_;
  delete stRetResBattleRelive_reflection_;
  delete stReqLeaveResBattle::default_instance_;
  delete stReqLeaveResBattle_reflection_;
  delete stRetLeaveResBattle::default_instance_;
  delete stRetLeaveResBattle_reflection_;
  delete stReqRecvResBattleRes::default_instance_;
  delete stReqRecvResBattleRes_reflection_;
  delete stResBattleResItem::default_instance_;
  delete stResBattleResItem_reflection_;
  delete stRetRecvResBattleRes::default_instance_;
  delete stRetRecvResBattleRes_reflection_;
  delete stSendResBattleStreakNum::default_instance_;
  delete stSendResBattleStreakNum_reflection_;
  delete stSendResBattleNotice::default_instance_;
  delete stSendResBattleNotice_reflection_;
  delete stNotityResBattleKillInfo::default_instance_;
  delete stNotityResBattleKillInfo_reflection_;
  delete stBattleResRefreshItem::default_instance_;
  delete stBattleResRefreshItem_reflection_;
  delete stNotityResBattleResRefresh::default_instance_;
  delete stNotityResBattleResRefresh_reflection_;
  delete stNotityResBattleResEmpty::default_instance_;
  delete stNotityResBattleResEmpty_reflection_;
  delete stNotityResBattleGlory::default_instance_;
  delete stNotityResBattleGlory_reflection_;
  delete stBroadCastResBattleInvite::default_instance_;
  delete stBroadCastResBattleInvite_reflection_;
  delete stRetResBattleReceiveInvite::default_instance_;
  delete stRetResBattleReceiveInvite_reflection_;
  delete stResBattleReplyInviteJoin::default_instance_;
  delete stResBattleReplyInviteJoin_reflection_;
  delete stResBattleInviteJoinRes::default_instance_;
  delete stResBattleInviteJoinRes_reflection_;
  delete stReqStoneCopyMapInfo::default_instance_;
  delete stReqStoneCopyMapInfo_reflection_;
  delete stStoneCopyMapInfoResult::default_instance_;
  delete stStoneCopyMapInfoResult_reflection_;
  delete stReqChallengeStoneCopyMap::default_instance_;
  delete stReqChallengeStoneCopyMap_reflection_;
  delete stChallengeStoneCopyMap::default_instance_;
  delete stChallengeStoneCopyMap_reflection_;
  delete stReqResetStoneCopyMapNum::default_instance_;
  delete stReqResetStoneCopyMapNum_reflection_;
  delete stResetStoneCopyMapNum::default_instance_;
  delete stResetStoneCopyMapNum_reflection_;
  delete stReqResBattleResource::default_instance_;
  delete stReqResBattleResource_reflection_;
  delete stRetResBattleResource::default_instance_;
  delete stRetResBattleResource_reflection_;
  delete stResBattleEnd::default_instance_;
  delete stResBattleEnd_reflection_;
}

void protobuf_AddDesc_SortList_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Proto::protobuf_AddDesc_ModID_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016SortList.proto\022\tSortProto\032\013ModID.proto"
    "\"X\n\022stReqLevelSortList\022\020\n\010fromRank\030\001 \001(\r"
    "\"\027\n\nProtoModID\022\t\n\005ModID\020\006\"\027\n\nProtoFunID\022"
    "\t\n\005FunID\020\001\"\177\n\022stSynLevelSortItem\022\016\n\006char"
    "ID\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\022\021\n\tguildName\030\003 \001("
    "\t\022\r\n\005level\030\004 \001(\r\022\013\n\003job\030\005 \001(\r\022\013\n\003sex\030\006 \001"
    "(\r\022\017\n\007photoID\030\007 \001(\r\"\232\001\n\022stRetLevelSortLi"
    "st\022\021\n\tbeginRank\030\001 \001(\r\022\016\n\006myRank\030\002 \001(\r\022/\n"
    "\010sortItem\030\003 \003(\0132\035.SortProto.stSynLevelSo"
    "rtItem\"\027\n\nProtoModID\022\t\n\005ModID\020\006\"\027\n\nProto"
    "FunID\022\t\n\005FunID\020\002\"^\n\030stReqBattlePowerSort"
    "List\022\020\n\010fromRank\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005"
    "ModID\020\006\"\027\n\nProtoFunID\022\t\n\005FunID\020\003\"\232\001\n\030stS"
    "ynBattlePowerSortItem\022\016\n\006charID\030\001 \001(\r\022\014\n"
    "\004name\030\002 \001(\t\022\021\n\tguildName\030\003 \001(\t\022\023\n\013battle"
    "Power\030\004 \001(\r\022\013\n\003job\030\005 \001(\r\022\013\n\003sex\030\006 \001(\r\022\r\n"
    "\005level\030\007 \001(\r\022\017\n\007photoID\030\010 \001(\r\"\246\001\n\030stRetB"
    "attlePowerSortList\022\021\n\tbeginRank\030\001 \001(\r\022\016\n"
    "\006myRank\030\002 \001(\r\0225\n\010sortItem\030\003 \003(\0132#.SortPr"
    "oto.stSynBattlePowerSortItem\"\027\n\nProtoMod"
    "ID\022\t\n\005ModID\020\006\"\027\n\nProtoFunID\022\t\n\005FunID\020\004\"Z"
    "\n\024stReqCopymapSortList\022\020\n\010fromRank\030\001 \001(\r"
    "\"\027\n\nProtoModID\022\t\n\005ModID\020\006\"\027\n\nProtoFunID\022"
    "\t\n\005FunID\020\005\"\217\001\n\021stCopyMapSortItem\022\016\n\006char"
    "ID\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\022\021\n\tguildName\030\003 \001("
    "\t\022\017\n\007starNum\030\004 \001(\r\022\013\n\003job\030\005 \001(\r\022\013\n\003sex\030\006"
    " \001(\r\022\r\n\005level\030\007 \001(\r\022\017\n\007photoID\030\010 \001(\r\"\233\001\n"
    "\024stRetCopyMapSortList\022\021\n\tbeginRank\030\001 \001(\r"
    "\022\016\n\006myRank\030\002 \001(\r\022.\n\010sortItem\030\003 \003(\0132\034.Sor"
    "tProto.stCopyMapSortItem\"\027\n\nProtoModID\022\t"
    "\n\005ModID\020\006\"\027\n\nProtoFunID\022\t\n\005FunID\020\006\"z\n\022st"
    "SynArenaSortInfo\022\016\n\006charID\030\001 \001(\r\022\014\n\004name"
    "\030\002 \001(\t\022\r\n\005level\030\003 \001(\r\022\013\n\003job\030\004 \001(\r\022\013\n\003se"
    "x\030\005 \001(\r\022\014\n\004rank\030\006 \001(\r\022\017\n\007photoID\030\007 \001(\r\"T"
    "\n\020stReqArenaPKList\022\016\n\006charID\030\001 \001(\r\"\027\n\nPr"
    "otoModID\022\t\n\005ModID\020\006\"\027\n\nProtoFunID\022\t\n\005Fun"
    "ID\020\007\"\372\001\n\020stRetArenaPKList\022+\n\004data\030\001 \003(\0132"
    "\035.SortProto.stSynArenaSortInfo\022\016\n\006myRank"
    "\030\002 \001(\r\022-\n\006topTen\030\003 \003(\0132\035.SortProto.stSyn"
    "ArenaSortInfo\022\n\n\002cd\030\004 \001(\r\022\024\n\014challengeNu"
    "m\030\005 \001(\r\022\020\n\010resetNum\030\006 \001(\r\022\024\n\014totalUserNu"
    "m\030\007 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\006\"\027\n\nProt"
    "oFunID\022\t\n\005FunID\020\010\"Y\n\022stReqArenaSortList\022"
    "\021\n\tbeginRank\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005ModI"
    "D\020\006\"\027\n\nProtoFunID\022\t\n\005FunID\020\t\"\207\001\n\022stRetAr"
    "enaSortList\022/\n\010sortInfo\030\001 \003(\0132\035.SortProt"
    "o.stSynArenaSortInfo\022\016\n\006myRank\030\002 \001(\r\"\027\n\n"
    "ProtoModID\022\t\n\005ModID\020\006\"\027\n\nProtoFunID\022\t\n\005F"
    "unID\020\n\"\212\001\n\023stSynOne2OnePVPInfo\022\016\n\006charID"
    "\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\022\013\n\003job\030\003 \001(\r\022\013\n\003sex"
    "\030\004 \001(\r\022\r\n\005score\030\005 \001(\r\022\014\n\004rank\030\006 \001(\r\022\r\n\005l"
    "evel\030\007 \001(\r\022\017\n\007photoID\030\010 \001(\r\"\216\001\n\027stReqOne"
    "2OnePVPSortList\022\021\n\tbeginRank\030\001 \001(\r\022.\n\005eT"
    "ype\030\002 \001(\0162\037.SortProto.eOne2OneSortListTy"
    "pe\"\027\n\nProtoModID\022\t\n\005ModID\020\006\"\027\n\nProtoFunI"
    "D\022\t\n\005FunID\020\013\"\206\002\n\027stRetOne2OnePVPSortList"
    "\0220\n\010sortList\030\001 \003(\0132\036.SortProto.stSynOne2"
    "OnePVPInfo\022\016\n\006myRank\030\002 \001(\r\0228\n\020lastweekSo"
    "rtList\030\003 \003(\0132\036.SortProto.stSynOne2OnePVP"
    "Info\022.\n\005eType\030\004 \001(\0162\037.SortProto.eOne2One"
    "SortListType\022\r\n\005score\030\005 \001(\r\"\027\n\nProtoModI"
    "D\022\t\n\005ModID\020\006\"\027\n\nProtoFunID\022\t\n\005FunID\020\014\"X\n"
    "\024stChallengeArenaUser\022\016\n\006charID\030\001 \001(\r\"\027\n"
    "\nProtoModID\022\t\n\005ModID\020\006\"\027\n\nProtoFunID\022\t\n\005"
    "FunID\020\r\"\235\002\n\032stChallengeArenaUserResult\022="
    "\n\006result\030\001 \001(\0162-.SortProto.stChallengeAr"
    "enaUserResult.eResult\"\215\001\n\007eResult\022\014\n\010eSu"
    "ccess\020\001\022\026\n\022eLilian_Not_Enough\020\002\022\020\n\014eInne"
    "r_Error\020\003\022\020\n\014eLevel_Limit\020\004\022\014\n\010eBagFull\020"
    "\005\022\r\n\teCoolDown\020\006\022\017\n\013eTimeUseOut\020\007\022\n\n\006eEq"
    "uip\020\010\"\027\n\nProtoModID\022\t\n\005ModID\020\006\"\027\n\nProtoF"
    "unID\022\t\n\005FunID\020\016\"X\n\024stChallegeLeitaiUser\022"
    "\016\n\006charID\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\006"
    "\"\027\n\nProtoFunID\022\t\n\005FunID\020\017\"\360\001\n\032stChallege"
    "LeitaiUserResult\022=\n\006result\030\001 \001(\0162-.SortP"
    "roto.stChallegeLeitaiUserResult.eResult\""
    "a\n\007eResult\022\014\n\010eSuccess\020\001\022\026\n\022eLilian_Not_"
    "Enough\020\002\022\020\n\014eInner_Error\020\003\022\020\n\014eLevel_Lim"
    "it\020\004\022\014\n\010eBagFull\020\005\"\027\n\nProtoModID\022\t\n\005ModI"
    "D\020\006\"\027\n\nProtoFunID\022\t\n\005FunID\020\020\"V\n\022stOpenLe"
    "itaiWindow\022\016\n\006charID\030\001 \001(\r\"\027\n\nProtoModID"
    "\022\t\n\005ModID\020\006\"\027\n\nProtoFunID\022\t\n\005FunID\020\021\";\n\013"
    "stSynHeroHP\022\016\n\006heroID\030\001 \001(\r\022\r\n\005curHP\030\002 \001"
    "(\r\022\r\n\005maxHP\030\003 \001(\r\"\245\002\n\017stRetLeitaiInfo\022\024\n"
    "\014challengeNum\030\001 \001(\r\022\014\n\004myHP\030\002 \001(\r\022\'\n\007her"
    "oHPs\030\003 \003(\0132\026.SortProto.stSynHeroHP\022$\n\004mo"
    "de\030\004 \001(\0162\026.SortProto.eLeitaiMode\022\016\n\006pos1"
    "ID\030\005 \001(\r\022\016\n\006pos2ID\030\006 \001(\r\022\016\n\006pos3ID\030\007 \001(\r"
    "\022\016\n\006pos4ID\030\010 \001(\r\022\035\n\025refreshBuffRemainTim"
    "e\030\t \001(\r\022\016\n\006buffID\030\n \001(\r\"\027\n\nProtoModID\022\t\n"
    "\005ModID\020\006\"\027\n\nProtoFunID\022\t\n\005FunID\020\022\"Z\n\023stR"
    "eqLeitaiSortList\022\021\n\tbeginRank\030\001 \001(\r\"\027\n\nP"
    "rotoModID\022\t\n\005ModID\020\006\"\027\n\nProtoFunID\022\t\n\005Fu"
    "nID\020\023\"\177\n\024stLeitaiSortListItem\022\016\n\006charID\030"
    "\001 \001(\r\022\014\n\004name\030\002 \001(\t\022\017\n\007useTime\030\003 \001(\r\022\r\n\005"
    "level\030\004 \001(\r\022\013\n\003job\030\005 \001(\r\022\013\n\003sex\030\006 \001(\r\022\017\n"
    "\007photoID\030\007 \001(\r\"\241\001\n\023stRetLeitaiSortList\0225"
    "\n\014sortListItem\030\001 \003(\0132\037.SortProto.stLeita"
    "iSortListItem\022\021\n\tbeginRank\030\002 \001(\r\022\016\n\006myRa"
    "nk\030\003 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\006\"\027\n\nPro"
    "toFunID\022\t\n\005FunID\020\024\"\222\001\n\022stSendLeitaiResul"
    "t\022&\n\006heroHP\030\001 \003(\0132\026.SortProto.stSynHeroH"
    "P\022\021\n\tcurUserHP\030\002 \001(\r\022\017\n\007useTime\030\003 \001(\r\"\027\n"
    "\nProtoModID\022\t\n\005ModID\020\006\"\027\n\nProtoFunID\022\t\n\005"
    "FunID\020\025\"\353\001\n\025stRetSendLeitaiResult\0228\n\006res"
    "ult\030\001 \001(\0162(.SortProto.stRetSendLeitaiRes"
    "ult.eResult\"f\n\007eResult\022\013\n\007SUCCESS\020\001\022\021\n\rC"
    "OND_NOT_MEET\020\002\022\017\n\013INNER_ERROR\020\003\022\023\n\017ROLE_"
    "LV_TOO_LOW\020\004\022\025\n\021LILIAN_NOT_ENOUGH\020\005\"\027\n\nP"
    "rotoModID\022\t\n\005ModID\020\006\"\027\n\nProtoFunID\022\t\n\005Fu"
    "nID\020\026\"L\n\030stNotifySelectLeitaiMode\"\027\n\nPro"
    "toModID\022\t\n\005ModID\020\006\"\027\n\nProtoFunID\022\t\n\005FunI"
    "D\020\027\"l\n\022stSelectLeiTaiMode\022$\n\004mode\030\001 \001(\0162"
    "\026.SortProto.eLeitaiMode\"\027\n\nProtoModID\022\t\n"
    "\005ModID\020\006\"\027\n\nProtoFunID\022\t\n\005FunID\020\030\"\255\001\n\030st"
    "SelectLeiTaiModeResult\022;\n\006result\030\001 \001(\0162+"
    ".SortProto.stSelectLeiTaiModeResult.eRes"
    "ult\"\"\n\007eResult\022\014\n\010eSuccess\020\001\022\t\n\005eFail\020\002\""
    "\027\n\nProtoModID\022\t\n\005ModID\020\006\"\027\n\nProtoFunID\022\t"
    "\n\005FunID\020\031\"U\n\021stResetLeitaiInfo\022\016\n\006charID"
    "\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\006\"\027\n\nProto"
    "FunID\022\t\n\005FunID\020\032\"\320\001\n\027stResetLeitaiInfoRe"
    "sult\022:\n\006result\030\001 \001(\0162*.SortProto.stReset"
    "LeitaiInfoResult.eResult\"G\n\007eResult\022\014\n\010e"
    "Success\020\001\022\027\n\023eNot_Enough_Diamond\020\002\022\025\n\021eN"
    "ot_Time_Use_Out\020\003\"\027\n\nProtoModID\022\t\n\005ModID"
    "\020\006\"\027\n\nProtoFunID\022\t\n\005FunID\020\033\"[\n\025stReqDraw"
    "HeroSortList\022\020\n\010fromRank\030\001 \001(\r\"\027\n\nProtoM"
    "odID\022\t\n\005ModID\020\006\"\027\n\nProtoFunID\022\t\n\005FunID\020\034"
    "\"j\n\022stDrawHeroSortItem\022\016\n\006charID\030\001 \001(\r\022\014"
    "\n\004name\030\002 \001(\t\022\r\n\005level\030\003 \001(\r\022\r\n\005score\030\004 \001"
    "(\r\022\013\n\003job\030\005 \001(\r\022\013\n\003sex\030\006 \001(\r\"\251\001\n\022stDrawH"
    "eroSortList\022\021\n\tbeginRank\030\001 \001(\r\022/\n\010sortIt"
    "em\030\002 \003(\0132\035.SortProto.stDrawHeroSortItem\022"
    "\016\n\006myRank\030\003 \001(\r\022\r\n\005score\030\004 \001(\r\"\027\n\nProtoM"
    "odID\022\t\n\005ModID\020\006\"\027\n\nProtoFunID\022\t\n\005FunID\020\035"
    "\"X\n\024stReqOne2OnePVPMatch\022\016\n\006charID\030\001 \001(\r"
    "\"\027\n\nProtoModID\022\t\n\005ModID\020\006\"\027\n\nProtoFunID\022"
    "\t\n\005FunID\020\036\"\323\001\n\027stOne2OnePVPMatchResult\022:"
    "\n\006result\030\001 \001(\0162*.SortProto.stOne2OnePVPM"
    "atchResult.eResult\"J\n\007eResult\022\013\n\007eSucess"
    "\020\001\022\t\n\005eWait\020\002\022\t\n\005eFail\020\003\022\020\n\014eNot_In_Time"
    "\020\004\022\n\n\006eEquip\020\005\"\027\n\nProtoModID\022\t\n\005ModID\020\006\""
    "\027\n\nProtoFunID\022\t\n\005FunID\020\037\"[\n\027stCancelOne2"
    "OnePVPMatch\022\016\n\006charID\030\001 \001(\r\"\027\n\nProtoModI"
    "D\022\t\n\005ModID\020\006\"\027\n\nProtoFunID\022\t\n\005FunID\020 \"\255\001"
    "\n\030stCancelOne2OnePVPResult\022;\n\006result\030\001 \001"
    "(\0162+.SortProto.stCancelOne2OnePVPResult."
    "eResult\"\"\n\007eResult\022\014\n\010eSuccess\020\001\022\t\n\005eFai"
    "l\020\002\"\027\n\nProtoModID\022\t\n\005ModID\020\006\"\027\n\nProtoFun"
    "ID\022\t\n\005FunID\020!\"W\n\023stReqMySortListInfo\022\016\n\006"
    "charID\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\006\"\027\n"
    "\nProtoFunID\022\t\n\005FunID\020\"\"\242\001\n\023stRetMySortLi"
    "stInfo\022\026\n\016one2onePVPRank\030\001 \001(\r\022\023\n\013arenaP"
    "KRank\030\002 \001(\r\022\023\n\013copymapRank\030\003 \001(\r\022\027\n\017batt"
    "lePowerRank\030\004 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID"
    "\020\006\"\027\n\nProtoFunID\022\t\n\005FunID\020#\"k\n\032stLeitaiM"
    "oveHero2BattlePos\022\016\n\006heroID\030\001 \001(\r\022\013\n\003pos"
    "\030\002 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\006\"\027\n\nProto"
    "FunID\022\t\n\005FunID\020$\"\320\001\n\037stLeitaiMoveHero2Ba"
    "ttlePosError\022B\n\006result\030\001 \001(\01622.SortProto"
    ".stLeitaiMoveHero2BattlePosError.eResult"
    "\"7\n\007eResult\022\031\n\025eSend_Msg_Param_Error\020\001\022\021"
    "\n\rePos_The_Same\020\002\"\027\n\nProtoModID\022\t\n\005ModID"
    "\020\006\"\027\n\nProtoFunID\022\t\n\005FunID\020%\"]\n\034stLeitaiC"
    "ancelGoOutForBattle\022\013\n\003pos\030\001 \001(\r\"\027\n\nProt"
    "oModID\022\t\n\005ModID\020\006\"\027\n\nProtoFunID\022\t\n\005FunID"
    "\020&\"\323\001\n\"stLeitaiCancelGoOutForBattleResul"
    "t\022E\n\006result\030\001 \001(\01625.SortProto.stLeitaiCa"
    "ncelGoOutForBattleResult.eResult\"4\n\007eRes"
    "ult\022\014\n\010sSUCCESS\020\001\022\033\n\027eHAS_NO_HERO_IN_THE"
    "_POS\020\002\"\027\n\nProtoModID\022\t\n\005ModID\020\006\"\027\n\nProto"
    "FunID\022\t\n\005FunID\020\'\"T\n\023stCommitArenaResult\022"
    "\013\n\003win\030\001 \001(\010\"\027\n\nProtoModID\022\t\n\005ModID\020\006\"\027\n"
    "\nProtoFunID\022\t\n\005FunID\020(\"\357\001\n\027stRetCommintA"
    "renaResult\022:\n\006result\030\001 \001(\0162*.SortProto.s"
    "tRetCommintArenaResult.eResult\"f\n\007eResul"
    "t\022\013\n\007SUCCESS\020\001\022\021\n\rCOND_NOT_MEET\020\002\022\017\n\013INN"
    "ER_ERROR\020\003\022\023\n\017ROLE_LV_TOO_LOW\020\004\022\025\n\021LILIA"
    "N_NOT_ENOUGH\020\005\"\027\n\nProtoModID\022\t\n\005ModID\020\006\""
    "\027\n\nProtoFunID\022\t\n\005FunID\020(\"Z\n\025stReqEnterLe"
    "itaiScene\022\017\n\007otherID\030\001 \001(\r\"\027\n\nProtoModID"
    "\022\t\n\005ModID\020\006\"\027\n\nProtoFunID\022\t\n\005FunID\020)\"X\n\024"
    "stReqResetLeitaiBuff\022\016\n\006charID\030\001 \001(\r\"\027\n\n"
    "ProtoModID\022\t\n\005ModID\020\006\"\027\n\nProtoFunID\022\t\n\005F"
    "unID\020*\"\333\001\n\027stResetLeitaiBuffResult\022\016\n\006bu"
    "ffID\030\001 \001(\r\022:\n\006result\030\002 \001(\0162*.SortProto.s"
    "tResetLeitaiBuffResult.eResult\"B\n\007eResul"
    "t\022\014\n\010eSuccess\020\001\022\027\n\023eDiamond_Not_Enough\020\002"
    "\022\020\n\014eInner_Error\020\003\"\027\n\nProtoModID\022\t\n\005ModI"
    "D\020\006\"\027\n\nProtoFunID\022\t\n\005FunID\020+\"V\n\022stReqBuf"
    "fResetTime\022\016\n\006charID\030\001 \001(\r\"\027\n\nProtoModID"
    "\022\t\n\005ModID\020\006\"\027\n\nProtoFunID\022\t\n\005FunID\020,\"j\n\022"
    "stRetBuffResetTime\022\022\n\nremainTime\030\001 \001(\r\022\016"
    "\n\006buffID\030\002 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\006\""
    "\027\n\nProtoFunID\022\t\n\005FunID\020-\"|\n\023stArenaReach"
    "NewRank\022\017\n\007newRank\030\001 \001(\r\022\017\n\007oldRank\030\002 \001("
    "\r\022\021\n\trewardNum\030\003 \001(\r\"\027\n\nProtoModID\022\t\n\005Mo"
    "dID\020\006\"\027\n\nProtoFunID\022\t\n\005FunID\020.\"_\n\033stReqR"
    "esetArenaChallengeNum\022\016\n\006charID\030\001 \001(\r\"\027\n"
    "\nProtoModID\022\t\n\005ModID\020\006\"\027\n\nProtoFunID\022\t\n\005"
    "FunID\020/\"\360\001\n\036stResetArenaChallengeNunResu"
    "lt\022A\n\006result\030\001 \001(\01621.SortProto.stResetAr"
    "enaChallengeNunResult.eResult\"Y\n\007eResult"
    "\022\014\n\010eSuccess\020\001\022\025\n\021eResetNum_Use_Out\020\002\022\027\n"
    "\023eDiamond_Not_Enough\020\003\022\020\n\014eInner_Error\020\004"
    "\"\027\n\nProtoModID\022\t\n\005ModID\020\006\"\027\n\nProtoFunID\022"
    "\t\n\005FunID\0200\"U\n\021stReqClearArenaCD\022\016\n\006charI"
    "D\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\006\"\027\n\nProt"
    "oFunID\022\t\n\005FunID\0201\"\305\001\n\024stClearArenaCDResu"
    "lt\0227\n\006result\030\001 \001(\0162\'.SortProto.stClearAr"
    "enaCDResult.eResult\"B\n\007eResult\022\014\n\010eSucce"
    "ss\020\001\022\020\n\014eInner_Error\020\002\022\027\n\023eDiamond_Not_E"
    "nough\020\003\"\027\n\nProtoModID\022\t\n\005ModID\020\006\"\027\n\nProt"
    "oFunID\022\t\n\005FunID\0202\"V\n\022stReqOpenSvrBPRank\022"
    "\016\n\006charID\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\006"
    "\"\027\n\nProtoFunID\022\t\n\005FunID\0203\"h\n\020stBPRankIte"
    "mInfo\022\016\n\006charID\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\022\013\n\003j"
    "ob\030\003 \001(\r\022\013\n\003sex\030\004 \001(\r\022\r\n\005level\030\005 \001(\r\022\r\n\005"
    "bpVal\030\006 \001(\r\"\207\001\n\022stRetOpenSvrBPRank\022*\n\005it"
    "ems\030\001 \003(\0132\033.SortProto.stBPRankItemInfo\022\023"
    "\n\013openSvrTime\030\002 \001(\r\"\027\n\nProtoModID\022\t\n\005Mod"
    "ID\020\006\"\027\n\nProtoFunID\022\t\n\005FunID\0204\"W\n\023stReqEx"
    "peditionInfo\022\016\n\006charID\030\001 \001(\r\"\027\n\nProtoMod"
    "ID\022\t\n\005ModID\020\006\"\027\n\nProtoFunID\022\t\n\005FunID\0205\"M"
    "\n\020stExpeditionItem\022\024\n\014expeditionId\030\001 \001(\r"
    "\022\022\n\nfinishTime\030\002 \001(\r\022\017\n\007heroIds\030\003 \003(\r\"\345\001"
    "\n\023stRetExpeditionInfo\0226\n\006result\030\001 \001(\0162&."
    "SortProto.stRetExpeditionInfo.eResult\022\017\n"
    "\007usedNum\030\002 \001(\r\022*\n\005items\030\003 \003(\0132\033.SortProt"
    "o.stExpeditionItem\"\'\n\007eResult\022\014\n\010eSucces"
    "s\020\001\022\016\n\neLvl_Limit\020\002\"\027\n\nProtoModID\022\t\n\005Mod"
    "ID\020\006\"\027\n\nProtoFunID\022\t\n\005FunID\0206\"j\n\017stReqEx"
    "pedition\022\024\n\014expeditionId\030\001 \001(\r\022\017\n\007heroId"
    "s\030\002 \003(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\006\"\027\n\nProt"
    "oFunID\022\t\n\005FunID\0207\"\224\002\n\017stRetExpedition\022\024\n"
    "\014expeditionId\030\001 \001(\r\0222\n\006result\030\002 \001(\0162\".So"
    "rtProto.stRetExpedition.eResult\"\204\001\n\007eRes"
    "ult\022\014\n\010eSuccess\020\001\022\021\n\reHero_In_Used\020\002\022\023\n\017"
    "eHero_Num_Limit\020\003\022\016\n\neLvl_Limit\020\004\022\022\n\016eTi"
    "me_Used_Out\020\005\022\017\n\013eInvalid_Id\020\006\022\016\n\neSame_"
    "Type\020\007\"\027\n\nProtoModID\022\t\n\005ModID\020\006\"\027\n\nProto"
    "FunID\022\t\n\005FunID\0208\"_\n\025stReqExpeditionRewar"
    "d\022\024\n\014expeditionId\030\001 \001(\r\"\027\n\nProtoModID\022\t\n"
    "\005ModID\020\006\"\027\n\nProtoFunID\022\t\n\005FunID\0209\"\325\001\n\025st"
    "RetExpeditionReward\022\024\n\014expeditionId\030\001 \001("
    "\r\0228\n\006result\030\002 \001(\0162(.SortProto.stRetExped"
    "itionReward.eResult\":\n\007eResult\022\014\n\010eSucce"
    "ss\020\001\022\020\n\014eTime_Not_Up\020\002\022\017\n\013eInvalid_Id\020\003\""
    "\027\n\nProtoModID\022\t\n\005ModID\020\006\"\027\n\nProtoFunID\022\t"
    "\n\005FunID\020:\"]\n\023stReqFastExpedition\022\024\n\014expe"
    "ditionId\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\006\""
    "\027\n\nProtoFunID\022\t\n\005FunID\020;\"\344\001\n\023stRetFastEx"
    "pedition\022\024\n\014expeditionId\030\001 \001(\r\0226\n\006result"
    "\030\002 \001(\0162&.SortProto.stRetFastExpedition.e"
    "Result\"M\n\007eResult\022\014\n\010eSuccess\020\001\022\r\n\teTime"
    "_Out\020\002\022\017\n\013eInvalid_Id\020\003\022\024\n\020eLess_Of_Diam"
    "ond\020\004\"\027\n\nProtoModID\022\t\n\005ModID\020\006\"\027\n\nProtoF"
    "unID\022\t\n\005FunID\020<\"_\n\025stReqCancelExpedition"
    "\022\024\n\014expeditionId\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005"
    "ModID\020\006\"\027\n\nProtoFunID\022\t\n\005FunID\020=\"\322\001\n\025stR"
    "etCancelExpedition\022\024\n\014expeditionId\030\001 \001(\r"
    "\0228\n\006result\030\002 \001(\0162(.SortProto.stRetCancel"
    "Expedition.eResult\"7\n\007eResult\022\014\n\010eSucces"
    "s\020\001\022\r\n\teTime_Out\020\002\022\017\n\013eInvalid_Id\020\003\"\027\n\nP"
    "rotoModID\022\t\n\005ModID\020\006\"\027\n\nProtoFunID\022\t\n\005Fu"
    "nID\020>\"Z\n\026stReqExpeditionSummary\022\016\n\006charI"
    "D\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\006\"\027\n\nProt"
    "oFunID\022\t\n\005FunID\020\?\"\355\001\n\026stRetExpeditionSum"
    "mary\0229\n\006result\030\001 \001(\0162).SortProto.stRetEx"
    "peditionSummary.eResult\022\021\n\tusedTimes\030\002 \001"
    "(\r\022*\n\005items\030\003 \003(\0132\033.SortProto.stExpediti"
    "onItem\"\'\n\007eResult\022\014\n\010eSuccess\020\001\022\016\n\neLvl_"
    "Limit\020\002\"\027\n\nProtoModID\022\t\n\005ModID\020\006\"\027\n\nProt"
    "oFunID\022\t\n\005FunID\020@\"_\n\031stReqGloryfashionSo"
    "rtList\022\020\n\010fromRank\030\001 \001(\r\"\027\n\nProtoModID\022\t"
    "\n\005ModID\020\006\"\027\n\nProtoFunID\022\t\n\005FunID\020A\"k\n\026st"
    "GloryfashionSortList\022\021\n\tbeginRank\030\001 \001(\r\022"
    "\014\n\004name\030\002 \003(\t\"\027\n\nProtoModID\022\t\n\005ModID\020\006\"\027"
    "\n\nProtoFunID\022\t\n\005FunID\020B\"[\n\026stReqEnterEme"
    "raldDream\022\017\n\007levelID\030\001 \001(\r\"\027\n\nProtoModID"
    "\022\t\n\005ModID\020\006\"\027\n\nProtoFunID\022\t\n\005FunID\020C\"\202\002\n"
    "\031stEnterEmeraldDreamResult\022<\n\006result\030\001 \001"
    "(\0162,.SortProto.stEnterEmeraldDreamResult"
    ".eResult\"u\n\007eResult\022\014\n\010eSuccess\020\001\022\016\n\neLv"
    "l_Limit\020\002\022\030\n\024Fight_Num_Not_Enough\020\003\022\021\n\rS"
    "VR_CFG_ERROR\020\004\022\014\n\010BAG_FULL\020\005\022\021\n\rNOT_OPEN"
    "_TIME\020\006\"\027\n\nProtoModID\022\t\n\005ModID\020\006\"\027\n\nProt"
    "oFunID\022\t\n\005FunID\020D\"S\n\017stResetFightNum\022\016\n\006"
    "charID\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\006\"\027\n"
    "\nProtoFunID\022\t\n\005FunID\020E\"\314\001\n\025stResetFightN"
    "umResult\0228\n\006result\030\001 \001(\0162(.SortProto.stR"
    "esetFightNumResult.eResult\"G\n\007eResult\022\013\n"
    "\007SUCCESS\020\001\022\030\n\024eGoldCoin_Not_Enough\020\002\022\025\n\021"
    "eNot_Time_Use_Out\020\003\"\027\n\nProtoModID\022\t\n\005Mod"
    "ID\020\006\"\027\n\nProtoFunID\022\t\n\005FunID\020F\"_\n\031stReqEm"
    "eraldDreamSortList\022\020\n\010fromRank\030\001 \001(\r\"\027\n\n"
    "ProtoModID\022\t\n\005ModID\020\006\"\027\n\nProtoFunID\022\t\n\005F"
    "unID\020G\"\234\001\n\014SortListInfo\022\016\n\006charID\030\001 \001(\r\022"
    "\014\n\004name\030\002 \001(\t\022\013\n\003sex\030\003 \001(\r\022\013\n\003job\030\004 \001(\r\022"
    "\r\n\005level\030\005 \001(\r\022\016\n\006damage\030\006 \001(\r\022\014\n\004rank\030\007"
    " \001(\r\022\026\n\016highest_damage\030\010 \001(\r\022\017\n\007photoID\030"
    "\t \001(\r\"\204\001\n\026stEmeraldDreamSortList\022\021\n\tbegi"
    "nRank\030\001 \001(\r\022%\n\004info\030\002 \003(\0132\027.SortProto.So"
    "rtListInfo\"\027\n\nProtoModID\022\t\n\005ModID\020\006\"\027\n\nP"
    "rotoFunID\022\t\n\005FunID\020H\"\251\001\n\016stSendRankInfo\022"
    "\'\n\006myInfo\030\001 \003(\0132\027.SortProto.SortListInfo"
    "\022*\n\trivalInfo\030\002 \003(\0132\027.SortProto.SortList"
    "Info\022\020\n\010promoted\030\003 \001(\010\"\027\n\nProtoModID\022\t\n\005"
    "ModID\020\006\"\027\n\nProtoFunID\022\t\n\005FunID\020I\"S\n\017stRe"
    "qSurplusNum\022\016\n\006charID\030\001 \001(\r\"\027\n\nProtoModI"
    "D\022\t\n\005ModID\020\006\"\027\n\nProtoFunID\022\t\n\005FunID\020J\"\034\n"
    "\014userSortInfo\022\014\n\004name\030\001 \001(\t\"\314\001\n\022stSurplu"
    "sNumResult\022\013\n\003num\030\001 \001(\r\022\016\n\006damage\030\002 \001(\r\022"
    "\014\n\004rank\030\003 \001(\r\022\020\n\010resetNum\030\004 \001(\r\022%\n\004info\030"
    "\005 \003(\0132\027.SortProto.userSortInfo\022\017\n\007endtim"
    "e\030\006 \001(\r\022\017\n\007levelID\030\007 \001(\r\"\027\n\nProtoModID\022\t"
    "\n\005ModID\020\006\"\027\n\nProtoFunID\022\t\n\005FunID\020K\"\300\003\n\021s"
    "tSynChampionInfo\022\016\n\006charID\030\001 \001(\r\022\014\n\004name"
    "\030\002 \001(\t\022\020\n\010areaCode\030\003 \001(\r\022\r\n\005level\030\004 \001(\r\022"
    "\013\n\003job\030\005 \001(\r\022\013\n\003sex\030\006 \001(\r\022\016\n\006leader\030\007 \001("
    "\010\022\023\n\013battlePower\030\010 \001(\r\022\013\n\003pos\030\t \001(\r\022\016\n\006h"
    "eadID\030\n \001(\r\022\016\n\006bodyID\030\013 \001(\r\022\020\n\010weaponID\030"
    "\014 \001(\r\022\020\n\010cloackID\030\r \001(\r\022\016\n\006wingID\030\016 \001(\r\022"
    "\016\n\006shoeID\030\017 \001(\r\022\023\n\013fashionHair\030\020 \001(\r\022\023\n\013"
    "fashionFace\030\021 \001(\r\022\023\n\013fashionBody\030\022 \001(\r\022\025"
    "\n\rfashionWeapon\030\023 \001(\r\022\023\n\013fashionShoe\030\024 \001"
    "(\r\022\031\n\021fashionDecoration\030\025 \001(\r\022\020\n\010effectI"
    "D\030\026 \001(\r\022\023\n\013wingBreakLv\030\027 \001(\r\022\017\n\007photoID\030"
    "\030 \001(\r\"#\n\022stMyIntegralAndNum\022\r\n\005score\030\001 \001"
    "(\r\"Y\n\025stReqOpenLeagueWindow\022\016\n\006charID\030\001 "
    "\001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\006\"\027\n\nProtoFun"
    "ID\022\t\n\005FunID\020L\"\241\003\n\030stOpenLeagueWindowResu"
    "lt\022.\n\010champion\030\001 \003(\0132\034.SortProto.stSynCh"
    "ampionInfo\022-\n\006myInfo\030\002 \003(\0132\035.SortProto.s"
    "tMyIntegralAndNum\022\017\n\007session\030\003 \001(\r\022;\n\006st"
    "atus\030\004 \001(\0162+.SortProto.stOpenLeagueWindo"
    "wResult.eStatus\022>\n\010esession\030\005 \001(\0162,.Sort"
    "Proto.stOpenLeagueWindowResult.eSession\""
    "+\n\007eStatus\022\016\n\neQualified\020\001\022\020\n\014eNoQualifi"
    "ed\020\002\"9\n\010eSession\022\014\n\010eSixteen\020\001\022\n\n\006eEight"
    "\020\002\022\t\n\005eFour\020\003\022\010\n\004eTwo\020\004\"\027\n\nProtoModID\022\t\n"
    "\005ModID\020\006\"\027\n\nProtoFunID\022\t\n\005FunID\020M\"X\n\024stR"
    "eqHeroLeagueMatch\022\016\n\006charID\030\001 \001(\r\"\027\n\nPro"
    "toModID\022\t\n\005ModID\020\006\"\027\n\nProtoFunID\022\t\n\005FunI"
    "D\020N\"\205\002\n\027stHeroLeagueMatchResult\022:\n\006resul"
    "t\030\001 \001(\0162*.SortProto.stHeroLeagueMatchRes"
    "ult.eResult\"|\n\007eResult\022\013\n\007eSucess\020\001\022\t\n\005e"
    "Wait\020\002\022\t\n\005eFail\020\003\022\020\n\014eNot_In_Time\020\004\022\r\n\te"
    "Lv_Limit\020\005\022\026\n\022eRegister_Num_Lack\020\006\022\025\n\021eN"
    "o_Qualification\020\007\"\027\n\nProtoModID\022\t\n\005ModID"
    "\020\006\"\027\n\nProtoFunID\022\t\n\005FunID\020O\"S\n\017stReqMenb"
    "erInfo\022\016\n\006charID\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005"
    "ModID\020\006\"\027\n\nProtoFunID\022\t\n\005FunID\020P\"n\n\014stMe"
    "mberinfo\022,\n\006member\030\001 \003(\0132\034.SortProto.stS"
    "ynChampionInfo\"\027\n\nProtoModID\022\t\n\005ModID\020\006\""
    "\027\n\nProtoFunID\022\t\n\005FunID\020Q\"[\n\027stCancelHero"
    "LeagueMatch\022\016\n\006charID\030\001 \001(\r\"\027\n\nProtoModI"
    "D\022\t\n\005ModID\020\006\"\027\n\nProtoFunID\022\t\n\005FunID\020R\"\253\001"
    "\n\027stCanceHeroLeagueResult\022:\n\006result\030\001 \001("
    "\0162*.SortProto.stCanceHeroLeagueResult.eR"
    "esult\"\"\n\007eResult\022\014\n\010eSuccess\020\001\022\t\n\005eFail\020"
    "\002\"\027\n\nProtoModID\022\t\n\005ModID\020\006\"\027\n\nProtoFunID"
    "\022\t\n\005FunID\020S\"\267\001\n\022stReqQualifiedList\0224\n\004ty"
    "pe\030\001 \001(\0162&.SortProto.stReqQualifiedList."
    "eSession\"9\n\010eSession\022\014\n\010eSixteen\020\001\022\n\n\006eE"
    "ight\020\002\022\t\n\005eFour\020\003\022\010\n\004eTwo\020\004\"\027\n\nProtoModI"
    "D\022\t\n\005ModID\020\006\"\027\n\nProtoFunID\022\t\n\005FunID\020T\"\226\002"
    "\n\017stRoleBasicInfo\022\020\n\010areaCode\030\001 \001(\r\022\014\n\004n"
    "ame\030\002 \001(\t\022\014\n\004leve\030\003 \001(\r\022\r\n\005vipLv\030\004 \001(\r\022\013"
    "\n\003job\030\005 \001(\r\022\013\n\003sex\030\006 \001(\r\022\023\n\013battlePower\030"
    "\007 \001(\r\022<\n\twinOrLoss\030\010 \001(\0162).SortProto.stR"
    "oleBasicInfo.eCompleteState\022\017\n\007photoID\030\t"
    " \001(\r\"H\n\016eCompleteState\022\016\n\neSTATE_WIN\020\001\022\017"
    "\n\013eSTATE_LOSS\020\002\022\025\n\021esTATE_NOT_ATTEND\020\003\"^"
    "\n\006stTeam\022)\n\005user1\030\001 \001(\0132\032.SortProto.stRo"
    "leBasicInfo\022)\n\005user2\030\002 \001(\0132\032.SortProto.s"
    "tRoleBasicInfo\"\200\001\n\025stQualifiedListResult"
    "\022 \n\005users\030\001 \003(\0132\021.SortProto.stTeam\022\023\n\013is"
    "Qualified\030\002 \001(\010\"\027\n\nProtoModID\022\t\n\005ModID\020\006"
    "\"\027\n\nProtoFunID\022\t\n\005FunID\020U\"P\n\014stReqWorshi"
    "p\022\016\n\006charID\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID"
    "\020\006\"\027\n\nProtoFunID\022\t\n\005FunID\020V\"\320\001\n\017stWorski"
    "pResult\0222\n\006result\030\001 \001(\0162\".SortProto.stWo"
    "rskipResult.eResult\022\016\n\006charID\030\002 \001(\r\"G\n\007e"
    "Result\022\014\n\010eSuccess\020\001\022\020\n\014eInner_Error\020\002\022\017"
    "\n\013eTimeUseOut\020\003\022\013\n\007eNoBody\020\004\"\027\n\nProtoMod"
    "ID\022\t\n\005ModID\020\006\"\027\n\nProtoFunID\022\t\n\005FunID\020W\"\303"
    "\001\n\rstReqHeroList\022-\n\004type\030\001 \001(\0162\037.SortPro"
    "to.stReqHeroList.stType\022\016\n\006charID\030\002 \001(\r\""
    "A\n\006stType\022\021\n\reUpperBounds1\020\001\022\021\n\reUpperBo"
    "unds2\020\002\022\021\n\reUpperBounds3\020\003\"\027\n\nProtoModID"
    "\022\t\n\005ModID\020\006\"\027\n\nProtoFunID\022\t\n\005FunID\020X\"\314\001\n"
    "\nstRankInfo\022\017\n\007session\030\001 \001(\r\022\014\n\004rank\030\002 \001"
    "(\r\022\016\n\006charID\030\003 \001(\r\022\021\n\tpubCharID\030\004 \001(\r\022\020\n"
    "\010areaCode\030\005 \001(\r\022\014\n\004name\030\006 \001(\t\022\r\n\005level\030\007"
    " \001(\r\022\r\n\005vipLv\030\010 \001(\r\022\013\n\003job\030\t \001(\r\022\013\n\003sex\030"
    "\n \001(\r\022\023\n\013battlePower\030\013 \001(\r\022\017\n\007photoID\030\014 "
    "\001(\r\"i\n\020stHeroListResult\022#\n\004user\030\001 \003(\0132\025."
    "SortProto.stRankInfo\"\027\n\nProtoModID\022\t\n\005Mo"
    "dID\020\006\"\027\n\nProtoFunID\022\t\n\005FunID\020Y\"Q\n\rstReqR"
    "egister\022\016\n\006charID\030\001 \001(\r\"\027\n\nProtoModID\022\t\n"
    "\005ModID\020\006\"\027\n\nProtoFunID\022\t\n\005FunID\020Z\"T\n\020stR"
    "egisrerResult\022\016\n\006number\030\001 \001(\r\"\027\n\nProtoMo"
    "dID\022\t\n\005ModID\020\006\"\027\n\nProtoFunID\022\t\n\005FunID\020[\""
    "\252\001\n\023stArenaResultNotify\0226\n\006result\030\001 \001(\0162"
    "&.SortProto.stArenaResultNotify.eResult\""
    ")\n\007eResult\022\007\n\003WIN\020\001\022\010\n\004LOSE\020\002\022\013\n\007TIMEOUT"
    "\020\003\"\027\n\nProtoModID\022\t\n\005ModID\020\006\"\027\n\nProtoFunI"
    "D\022\t\n\005FunID\020\\\"Q\n\rstReqPubLogIn\022\016\n\006charID\030"
    "\001 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\006\"\027\n\nProtoF"
    "unID\022\t\n\005FunID\020]\"R\n\016stReqPubLogOut\022\016\n\006cha"
    "rID\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\006\"\027\n\nPr"
    "otoFunID\022\t\n\005FunID\020^\"Q\n\rstRemoveModel\022\016\n\006"
    "charID\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\006\"\027\n"
    "\nProtoFunID\022\t\n\005FunID\020_\"\254\001\n\024stLeitaiResul"
    "tNotify\0227\n\006result\030\001 \001(\0162\'.SortProto.stLe"
    "itaiResultNotify.eResult\")\n\007eResult\022\007\n\003W"
    "IN\020\001\022\010\n\004LOSE\020\002\022\013\n\007TIMEOUT\020\003\"\027\n\nProtoModI"
    "D\022\t\n\005ModID\020\006\"\027\n\nProtoFunID\022\t\n\005FunID\020`\"Q\n"
    "\rstReqRedPoint\022\016\n\006charID\030\001 \001(\r\"\027\n\nProtoM"
    "odID\022\t\n\005ModID\020\006\"\027\n\nProtoFunID\022\t\n\005FunID\020a"
    "\"m\n\020stRedPointResult\022\023\n\013isQualified\030\001 \001("
    "\010\022\022\n\ncanWorship\030\002 \001(\010\"\027\n\nProtoModID\022\t\n\005M"
    "odID\020\006\"\027\n\nProtoFunID\022\t\n\005FunID\020b\"S\n\017stReq"
    "DragonNest\022\016\n\006charID\030\001 \001(\r\"\027\n\nProtoModID"
    "\022\t\n\005ModID\020\006\"\027\n\nProtoFunID\022\t\n\005FunID\020c\"|\n\017"
    "stRetDragonNest\022\021\n\tusedTimes\030\001 \001(\r\022\020\n\010ma"
    "xTimes\030\002 \001(\r\022\022\n\nresetTimes\030\003 \001(\r\"\027\n\nProt"
    "oModID\022\t\n\005ModID\020\006\"\027\n\nProtoFunID\022\t\n\005FunID"
    "\020d\"\255\002\n\030stReqChallengeDragonNest\022\017\n\007level"
    "Id\030\001 \001(\r\"D\n\013eDragonType\022\020\n\014eDragon_Fire\020"
    "\001\022\021\n\reDragon_Water\020\002\022\020\n\014eDragon_Soil\020\003\"\207"
    "\001\n\017eDifficultyType\022\026\n\022eDifficulty_Common"
    "\020\001\022\024\n\020eDifficulty_Hard\020\002\022\030\n\024eDifficulty_"
    "Horrible\020\003\022\026\n\022eDifficulty_EndDay\020\004\022\024\n\020eD"
    "ifficulty_Hell\020\005\"\027\n\nProtoModID\022\t\n\005ModID\020"
    "\006\"\027\n\nProtoFunID\022\t\n\005FunID\020e\"\367\002\n\030stRetChal"
    "lengeDragonNest\022\017\n\007levelId\030\001 \001(\r\022;\n\006resu"
    "lt\030\002 \001(\0162+.SortProto.stRetChallengeDrago"
    "nNest.eResult\"\332\001\n\007eResult\022\014\n\010eSuccess\020\001\022"
    "\025\n\021eLvl_Id_Not_Exist\020\002\022\022\n\016eTime_not_Open"
    "\020\003\022\033\n\027eLess_Of_Challenge_Time\020\004\022\017\n\013eLess"
    "_Of_Sp\020\005\022\023\n\017eLess_Of_Lilian\020\006\022\016\n\neLvl_Li"
    "mit\020\007\022\r\n\teBag_Full\020\010\022\030\n\024ePre_Lvl_Id_Not_"
    "Pass\020\t\022\032\n\026ePre_Lvl_Id_Not_Exists\020\n\"\027\n\nPr"
    "otoModID\022\t\n\005ModID\020\006\"\027\n\nProtoFunID\022\t\n\005Fun"
    "ID\020f\"a\n\035stReqResetChallengeDragonNest\022\016\n"
    "\006CharID\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\006\"\027"
    "\n\nProtoFunID\022\t\n\005FunID\020g\"\325\001\n\035stRetResetCh"
    "allengeDragonNest\022@\n\006result\030\001 \001(\01620.Sort"
    "Proto.stRetResetChallengeDragonNest.eRes"
    "ult\"@\n\007eResult\022\014\n\010eSuccess\020\001\022\024\n\020eLess_of"
    "_Diamond\020\002\022\021\n\reTimes_Remain\020\003\"\027\n\nProtoMo"
    "dID\022\t\n\005ModID\020\006\"\027\n\nProtoFunID\022\t\n\005FunID\020h\""
    "m\n\023stReqEnterResBattle\022\016\n\006charId\030\001 \001(\r\022\024"
    "\n\014copyMapLevel\030\002 \001(\r\"\027\n\nProtoModID\022\t\n\005Mo"
    "dID\020\006\"\027\n\nProtoFunID\022\t\n\005FunID\020i\"\350\001\n\023stRet"
    "EnterResBattle\022\024\n\014copyMapLevel\030\001 \001(\r\0226\n\006"
    "result\030\002 \001(\0162&.SortProto.stRetEnterResBa"
    "ttle.eResult\"Q\n\007eResult\022\014\n\010eSuccess\020\001\022\022\n"
    "\016eTime_Not_Open\020\002\022\022\n\016eNo_Such_Level\020\003\022\020\n"
    "\014eInner_Error\020\004\"\027\n\nProtoModID\022\t\n\005ModID\020\006"
    "\"\027\n\nProtoFunID\022\t\n\005FunID\020j\"^\n\032stReqCurRes"
    "BattleGloryRank\022\016\n\006charId\030\001 \001(\r\"\027\n\nProto"
    "ModID\022\t\n\005ModID\020\006\"\027\n\nProtoFunID\022\t\n\005FunID\020"
    "k\"~\n\033stResBattleGloryRankMemInfo\022\014\n\004rank"
    "\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\022\016\n\006charId\030\003 \001(\r\022\020\n\010"
    "areaCode\030\004 \001(\r\022\017\n\007killNum\030\005 \001(\r\022\020\n\010glory"
    "Val\030\006 \001(\r\"\226\001\n\032stRetCurResBattleGloryRank"
    "\022\016\n\006charId\030\001 \001(\r\0226\n\006member\030\002 \003(\0132&.SortP"
    "roto.stResBattleGloryRankMemInfo\"\027\n\nProt"
    "oModID\022\t\n\005ModID\020\006\"\027\n\nProtoFunID\022\t\n\005FunID"
    "\020l\"V\n\022stReqResBattleRank\022\016\n\006charId\030\001 \001(\r"
    "\"\027\n\nProtoModID\022\t\n\005ModID\020\006\"\027\n\nProtoFunID\022"
    "\t\n\005FunID\020m\"\216\001\n\022stRetResBattleRank\022\016\n\006cha"
    "rId\030\001 \001(\r\0226\n\006member\030\002 \003(\0132&.SortProto.st"
    "ResBattleGloryRankMemInfo\"\027\n\nProtoModID\022"
    "\t\n\005ModID\020\006\"\027\n\nProtoFunID\022\t\n\005FunID\020n\"V\n\022s"
    "tReqResBattleKing\022\016\n\006charId\030\001 \001(\r\"\027\n\nPro"
    "toModID\022\t\n\005ModID\020\006\"\027\n\nProtoFunID\022\t\n\005FunI"
    "D\020o\"\373\003\n\026stResBattleRankMemInfo\022\014\n\004name\030\001"
    " \001(\t\022\016\n\006charID\030\002 \001(\r\022\020\n\010areaCode\030\003 \001(\r\022\013"
    "\n\003job\030\004 \001(\r\022\013\n\003sex\030\005 \001(\r\022\r\n\005level\030\006 \001(\r\022"
    "\023\n\013battlePower\030\007 \001(\r\022\017\n\007killNum\030\010 \001(\r\022\023\n"
    "\013evenKillNum\030\t \001(\r\022\024\n\014totalKillNum\030\n \001(\r"
    "\022\020\n\010gloryVal\030\013 \001(\r\022\024\n\014prostatedNum\030\014 \001(\r"
    "\022\016\n\006headID\030\r \001(\r\022\016\n\006bodyID\030\016 \001(\r\022\020\n\010weap"
    "onID\030\017 \001(\r\022\020\n\010cloackID\030\020 \001(\r\022\016\n\006wingID\030\021"
    " \001(\r\022\016\n\006shoeID\030\022 \001(\r\022\023\n\013fashionHair\030\023 \001("
    "\r\022\023\n\013fashionFace\030\024 \001(\r\022\023\n\013fashionBody\030\025 "
    "\001(\r\022\025\n\rfashionWeapon\030\026 \001(\r\022\023\n\013fashionSho"
    "e\030\027 \001(\r\022\031\n\021fashionDecoration\030\030 \001(\r\022\020\n\010ef"
    "fectID\030\032 \001(\r\022\023\n\013wingBreakLv\030\033 \001(\r\"\215\001\n\022st"
    "RetResBattleKing\022\022\n\nexistsKing\030\001 \001(\010\0221\n\006"
    "member\030\002 \001(\0132!.SortProto.stResBattleRank"
    "MemInfo\"\027\n\nProtoModID\022\t\n\005ModID\020\006\"\027\n\nProt"
    "oFunID\022\t\n\005FunID\020p\"Z\n\026stReqResBattleProst"
    "ate\022\016\n\006charId\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005Mod"
    "ID\020\006\"\027\n\nProtoFunID\022\t\n\005FunID\020q\"\277\001\n\026stRetR"
    "esBattleProstate\0229\n\006result\030\001 \001(\0162).SortP"
    "roto.stRetResBattleProstate.eResult\"8\n\007e"
    "Result\022\014\n\010eSuccess\020\001\022\021\n\reAlready_Done\020\002\022"
    "\014\n\010eNo_King\020\003\"\027\n\nProtoModID\022\t\n\005ModID\020\006\"\027"
    "\n\nProtoFunID\022\t\n\005FunID\020r\"X\n\024stReqResBattl"
    "eRelive\022\016\n\006charId\030\001 \001(\r\"\027\n\nProtoModID\022\t\n"
    "\005ModID\020\006\"\027\n\nProtoFunID\022\t\n\005FunID\020s\"\324\001\n\024st"
    "RetResBattleRelive\0227\n\006result\030\001 \001(\0162\'.Sor"
    "tProto.stRetResBattleRelive.eResult\"Q\n\007e"
    "Result\022\014\n\010eSuccess\020\001\022\024\n\020eLess_Of_Diamond"
    "\020\002\022\r\n\teNot_Died\020\003\022\023\n\017eNot_In_CopyMap\020\004\"\027"
    "\n\nProtoModID\022\t\n\005ModID\020\006\"\027\n\nProtoFunID\022\t\n"
    "\005FunID\020t\"W\n\023stReqLeaveResBattle\022\016\n\006charI"
    "d\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\006\"\027\n\nProt"
    "oFunID\022\t\n\005FunID\020u\"\255\001\n\023stRetLeaveResBattl"
    "e\0226\n\006result\030\001 \001(\0162&.SortProto.stRetLeave"
    "ResBattle.eResult\",\n\007eResult\022\014\n\010eSuccess"
    "\020\001\022\023\n\017eNot_In_CopyMap\020\002\"\027\n\nProtoModID\022\t\n"
    "\005ModID\020\006\"\027\n\nProtoFunID\022\t\n\005FunID\020v\"Y\n\025stR"
    "eqRecvResBattleRes\022\016\n\006charId\030\001 \001(\r\"\027\n\nPr"
    "otoModID\022\t\n\005ModID\020\006\"\027\n\nProtoFunID\022\t\n\005Fun"
    "ID\020w\"1\n\022stResBattleResItem\022\016\n\006itemId\030\001 \001"
    "(\r\022\013\n\003num\030\002 \001(\r\"\254\001\n\025stRetRecvResBattleRe"
    "s\022\017\n\007killNum\030\001 \001(\r\022\021\n\tstreakNum\030\002 \001(\r\022\020\n"
    "\010gloryVal\030\003 \001(\r\022+\n\004item\030\004 \003(\0132\035.SortProt"
    "o.stResBattleResItem\"\027\n\nProtoModID\022\t\n\005Mo"
    "dID\020\006\"\027\n\nProtoFunID\022\t\n\005FunID\020x\"y\n\030stSend"
    "ResBattleStreakNum\022\014\n\004name\030\001 \001(\t\022\020\n\010area"
    "Code\030\002 \001(\r\022\013\n\003val\030\003 \001(\r\"\027\n\nProtoModID\022\t\n"
    "\005ModID\020\006\"\027\n\nProtoFunID\022\t\n\005FunID\020y\"\346\001\n\025st"
    "SendResBattleNotice\022=\n\013noticeIndex\030\001 \001(\016"
    "2(.SortProto.stSendResBattleNotice.eNoti"
    "ce\"\\\n\007eNotice\022\023\n\017eActivity_Start\020\001\022\021\n\reA"
    "ctivity_End\020\002\022\023\n\017eRes_Is_Refresh\020\003\022\024\n\020eR"
    "es_Has_Refresh\020\004\"\027\n\nProtoModID\022\t\n\005ModID\020"
    "\006\"\027\n\nProtoFunID\022\t\n\005FunID\020z\"m\n\031stNotityRe"
    "sBattleKillInfo\022\014\n\004name\030\001 \001(\t\022\020\n\010areaCod"
    "e\030\002 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\006\"\027\n\nProt"
    "oFunID\022\t\n\005FunID\020{\"k\n\026stBattleResRefreshI"
    "tem\022\t\n\001x\030\001 \001(\r\022\t\n\001y\030\002 \001(\r\022\t\n\001z\030\003 \001(\r\022\n\n\002"
    "id\030\004 \001(\r\022\016\n\006itemId\030\005 \001(\r\022\024\n\014collectTimes"
    "\030\006 \001(\r\"\200\001\n\033stNotityResBattleResRefresh\022/"
    "\n\004item\030\001 \003(\0132!.SortProto.stBattleResRefr"
    "eshItem\"\027\n\nProtoModID\022\t\n\005ModID\020\006\"\027\n\nProt"
    "oFunID\022\t\n\005FunID\020|\"Y\n\031stNotityResBattleRe"
    "sEmpty\022\n\n\002id\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005ModI"
    "D\020\006\"\027\n\nProtoFunID\022\t\n\005FunID\020}\"W\n\026stNotity"
    "ResBattleGlory\022\013\n\003val\030\001 \001(\r\"\027\n\nProtoModI"
    "D\022\t\n\005ModID\020\006\"\027\n\nProtoFunID\022\t\n\005FunID\020~\"^\n"
    "\032stBroadCastResBattleInvite\022\016\n\006charId\030\001 "
    "\001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\006\"\027\n\nProtoFun"
    "ID\022\t\n\005FunID\020\177\"\322\001\n\033stRetResBattleReceiveI"
    "nvite\022\014\n\004name\030\001 \001(\t\022\016\n\006charId\030\002 \001(\r\022\023\n\013i"
    "nstanceLvl\030\003 \001(\r\022\013\n\003job\030\004 \001(\r\022\013\n\003sex\030\005 \001"
    "(\r\022\023\n\013battlePower\030\006 \001(\r\022\r\n\005vipLv\030\007 \001(\r\022\017"
    "\n\007photoID\030\010 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\006"
    "\"\030\n\nProtoFunID\022\n\n\005FunID\020\200\001\"n\n\032stResBattl"
    "eReplyInviteJoin\022\r\n\005agree\030\001 \001(\010\022\016\n\006charI"
    "d\030\002 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\006\"\030\n\nProt"
    "oFunID\022\n\n\005FunID\020\201\001\"\311\001\n\030stResBattleInvite"
    "JoinRes\022;\n\006result\030\001 \001(\0162+.SortProto.stRe"
    "sBattleInviteJoinRes.eResult\"=\n\007eResult\022"
    "\022\n\016TEAM_NOT_EXSIT\020\001\022\r\n\tTEAM_FULL\020\002\022\017\n\013IN"
    "NER_ERROR\020\003\"\027\n\nProtoModID\022\t\n\005ModID\020\006\"\030\n\n"
    "ProtoFunID\022\n\n\005FunID\020\202\001\"Z\n\025stReqStoneCopy"
    "MapInfo\022\016\n\006charID\030\001 \001(\r\"\027\n\nProtoModID\022\t\n"
    "\005ModID\020\006\"\030\n\nProtoFunID\022\n\n\005FunID\020\203\001\"\206\001\n\030s"
    "tStoneCopyMapInfoResult\022\021\n\tusedTimes\030\001 \001"
    "(\r\022\020\n\010maxTimes\030\002 \001(\r\022\022\n\nresetTimes\030\003 \001(\r"
    "\"\027\n\nProtoModID\022\t\n\005ModID\020\006\"\030\n\nProtoFunID\022"
    "\n\n\005FunID\020\204\001\"`\n\032stReqChallengeStoneCopyMa"
    "p\022\017\n\007levelId\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005ModI"
    "D\020\006\"\030\n\nProtoFunID\022\n\n\005FunID\020\205\001\"\366\002\n\027stChal"
    "lengeStoneCopyMap\022\017\n\007levelId\030\001 \001(\r\022:\n\006re"
    "sult\030\002 \001(\0162*.SortProto.stChallengeStoneC"
    "opyMap.eResult\"\332\001\n\007eResult\022\014\n\010eSuccess\020\001"
    "\022\025\n\021eLvl_Id_Not_Exist\020\002\022\022\n\016eTime_not_Ope"
    "n\020\003\022\033\n\027eLess_Of_Challenge_Time\020\004\022\017\n\013eLes"
    "s_Of_Sp\020\005\022\023\n\017eLess_Of_Lilian\020\006\022\016\n\neLvl_L"
    "imit\020\007\022\r\n\teBag_Full\020\010\022\030\n\024ePre_Lvl_Id_Not"
    "_Pass\020\t\022\032\n\026ePre_Lvl_Id_Not_Exists\020\n\"\027\n\nP"
    "rotoModID\022\t\n\005ModID\020\006\"\030\n\nProtoFunID\022\n\n\005Fu"
    "nID\020\206\001\"^\n\031stReqResetStoneCopyMapNum\022\016\n\006C"
    "harID\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\006\"\030\n\n"
    "ProtoFunID\022\n\n\005FunID\020\207\001\"\310\001\n\026stResetStoneC"
    "opyMapNum\0229\n\006result\030\001 \001(\0162).SortProto.st"
    "ResetStoneCopyMapNum.eResult\"@\n\007eResult\022"
    "\014\n\010eSuccess\020\001\022\024\n\020eLess_of_Diamond\020\002\022\021\n\re"
    "Times_Remain\020\003\"\027\n\nProtoModID\022\t\n\005ModID\020\006\""
    "\030\n\nProtoFunID\022\n\n\005FunID\020\210\001\"[\n\026stReqResBat"
    "tleResource\022\016\n\006charID\030\001 \001(\r\"\027\n\nProtoModI"
    "D\022\t\n\005ModID\020\006\"\030\n\nProtoFunID\022\n\n\005FunID\020\211\001\"\344"
    "\001\n\026stRetResBattleResource\0229\n\006result\030\001 \001("
    "\0162).SortProto.stRetResBattleResource.eRe"
    "sult\022/\n\004item\030\002 \003(\0132!.SortProto.stBattleR"
    "esRefreshItem\"+\n\007eResult\022\014\n\010eSuccess\020\001\022\022"
    "\n\016eNot_In_Battle\020\002\"\027\n\nProtoModID\022\t\n\005ModI"
    "D\020\006\"\030\n\nProtoFunID\022\n\n\005FunID\020\212\001\"S\n\016stResBa"
    "ttleEnd\022\016\n\006charid\030\001 \001(\r\"\027\n\nProtoModID\022\t\n"
    "\005ModID\020\006\"\030\n\nProtoFunID\022\n\n\005FunID\020\213\001*@\n\024eO"
    "ne2OneSortListType\022\022\n\016eOne2OneMyRank\020\001\022\024"
    "\n\020eOne2OneFromRank\020\002*@\n\013eLeitaiMode\022\026\n\022e"
    "LeitaiMode_Normal\020\001\022\031\n\025eLeitaiMode_Diffi"
    "cult\020\002", 24126);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SortList.proto", &protobuf_RegisterTypes);
  stReqLevelSortList::default_instance_ = new stReqLevelSortList();
  stSynLevelSortItem::default_instance_ = new stSynLevelSortItem();
  stRetLevelSortList::default_instance_ = new stRetLevelSortList();
  stReqBattlePowerSortList::default_instance_ = new stReqBattlePowerSortList();
  stSynBattlePowerSortItem::default_instance_ = new stSynBattlePowerSortItem();
  stRetBattlePowerSortList::default_instance_ = new stRetBattlePowerSortList();
  stReqCopymapSortList::default_instance_ = new stReqCopymapSortList();
  stCopyMapSortItem::default_instance_ = new stCopyMapSortItem();
  stRetCopyMapSortList::default_instance_ = new stRetCopyMapSortList();
  stSynArenaSortInfo::default_instance_ = new stSynArenaSortInfo();
  stReqArenaPKList::default_instance_ = new stReqArenaPKList();
  stRetArenaPKList::default_instance_ = new stRetArenaPKList();
  stReqArenaSortList::default_instance_ = new stReqArenaSortList();
  stRetArenaSortList::default_instance_ = new stRetArenaSortList();
  stSynOne2OnePVPInfo::default_instance_ = new stSynOne2OnePVPInfo();
  stReqOne2OnePVPSortList::default_instance_ = new stReqOne2OnePVPSortList();
  stRetOne2OnePVPSortList::default_instance_ = new stRetOne2OnePVPSortList();
  stChallengeArenaUser::default_instance_ = new stChallengeArenaUser();
  stChallengeArenaUserResult::default_instance_ = new stChallengeArenaUserResult();
  stChallegeLeitaiUser::default_instance_ = new stChallegeLeitaiUser();
  stChallegeLeitaiUserResult::default_instance_ = new stChallegeLeitaiUserResult();
  stOpenLeitaiWindow::default_instance_ = new stOpenLeitaiWindow();
  stSynHeroHP::default_instance_ = new stSynHeroHP();
  stRetLeitaiInfo::default_instance_ = new stRetLeitaiInfo();
  stReqLeitaiSortList::default_instance_ = new stReqLeitaiSortList();
  stLeitaiSortListItem::default_instance_ = new stLeitaiSortListItem();
  stRetLeitaiSortList::default_instance_ = new stRetLeitaiSortList();
  stSendLeitaiResult::default_instance_ = new stSendLeitaiResult();
  stRetSendLeitaiResult::default_instance_ = new stRetSendLeitaiResult();
  stNotifySelectLeitaiMode::default_instance_ = new stNotifySelectLeitaiMode();
  stSelectLeiTaiMode::default_instance_ = new stSelectLeiTaiMode();
  stSelectLeiTaiModeResult::default_instance_ = new stSelectLeiTaiModeResult();
  stResetLeitaiInfo::default_instance_ = new stResetLeitaiInfo();
  stResetLeitaiInfoResult::default_instance_ = new stResetLeitaiInfoResult();
  stReqDrawHeroSortList::default_instance_ = new stReqDrawHeroSortList();
  stDrawHeroSortItem::default_instance_ = new stDrawHeroSortItem();
  stDrawHeroSortList::default_instance_ = new stDrawHeroSortList();
  stReqOne2OnePVPMatch::default_instance_ = new stReqOne2OnePVPMatch();
  stOne2OnePVPMatchResult::default_instance_ = new stOne2OnePVPMatchResult();
  stCancelOne2OnePVPMatch::default_instance_ = new stCancelOne2OnePVPMatch();
  stCancelOne2OnePVPResult::default_instance_ = new stCancelOne2OnePVPResult();
  stReqMySortListInfo::default_instance_ = new stReqMySortListInfo();
  stRetMySortListInfo::default_instance_ = new stRetMySortListInfo();
  stLeitaiMoveHero2BattlePos::default_instance_ = new stLeitaiMoveHero2BattlePos();
  stLeitaiMoveHero2BattlePosError::default_instance_ = new stLeitaiMoveHero2BattlePosError();
  stLeitaiCancelGoOutForBattle::default_instance_ = new stLeitaiCancelGoOutForBattle();
  stLeitaiCancelGoOutForBattleResult::default_instance_ = new stLeitaiCancelGoOutForBattleResult();
  stCommitArenaResult::default_instance_ = new stCommitArenaResult();
  stRetCommintArenaResult::default_instance_ = new stRetCommintArenaResult();
  stReqEnterLeitaiScene::default_instance_ = new stReqEnterLeitaiScene();
  stReqResetLeitaiBuff::default_instance_ = new stReqResetLeitaiBuff();
  stResetLeitaiBuffResult::default_instance_ = new stResetLeitaiBuffResult();
  stReqBuffResetTime::default_instance_ = new stReqBuffResetTime();
  stRetBuffResetTime::default_instance_ = new stRetBuffResetTime();
  stArenaReachNewRank::default_instance_ = new stArenaReachNewRank();
  stReqResetArenaChallengeNum::default_instance_ = new stReqResetArenaChallengeNum();
  stResetArenaChallengeNunResult::default_instance_ = new stResetArenaChallengeNunResult();
  stReqClearArenaCD::default_instance_ = new stReqClearArenaCD();
  stClearArenaCDResult::default_instance_ = new stClearArenaCDResult();
  stReqOpenSvrBPRank::default_instance_ = new stReqOpenSvrBPRank();
  stBPRankItemInfo::default_instance_ = new stBPRankItemInfo();
  stRetOpenSvrBPRank::default_instance_ = new stRetOpenSvrBPRank();
  stReqExpeditionInfo::default_instance_ = new stReqExpeditionInfo();
  stExpeditionItem::default_instance_ = new stExpeditionItem();
  stRetExpeditionInfo::default_instance_ = new stRetExpeditionInfo();
  stReqExpedition::default_instance_ = new stReqExpedition();
  stRetExpedition::default_instance_ = new stRetExpedition();
  stReqExpeditionReward::default_instance_ = new stReqExpeditionReward();
  stRetExpeditionReward::default_instance_ = new stRetExpeditionReward();
  stReqFastExpedition::default_instance_ = new stReqFastExpedition();
  stRetFastExpedition::default_instance_ = new stRetFastExpedition();
  stReqCancelExpedition::default_instance_ = new stReqCancelExpedition();
  stRetCancelExpedition::default_instance_ = new stRetCancelExpedition();
  stReqExpeditionSummary::default_instance_ = new stReqExpeditionSummary();
  stRetExpeditionSummary::default_instance_ = new stRetExpeditionSummary();
  stReqGloryfashionSortList::default_instance_ = new stReqGloryfashionSortList();
  stGloryfashionSortList::default_instance_ = new stGloryfashionSortList();
  stReqEnterEmeraldDream::default_instance_ = new stReqEnterEmeraldDream();
  stEnterEmeraldDreamResult::default_instance_ = new stEnterEmeraldDreamResult();
  stResetFightNum::default_instance_ = new stResetFightNum();
  stResetFightNumResult::default_instance_ = new stResetFightNumResult();
  stReqEmeraldDreamSortList::default_instance_ = new stReqEmeraldDreamSortList();
  SortListInfo::default_instance_ = new SortListInfo();
  stEmeraldDreamSortList::default_instance_ = new stEmeraldDreamSortList();
  stSendRankInfo::default_instance_ = new stSendRankInfo();
  stReqSurplusNum::default_instance_ = new stReqSurplusNum();
  userSortInfo::default_instance_ = new userSortInfo();
  stSurplusNumResult::default_instance_ = new stSurplusNumResult();
  stSynChampionInfo::default_instance_ = new stSynChampionInfo();
  stMyIntegralAndNum::default_instance_ = new stMyIntegralAndNum();
  stReqOpenLeagueWindow::default_instance_ = new stReqOpenLeagueWindow();
  stOpenLeagueWindowResult::default_instance_ = new stOpenLeagueWindowResult();
  stReqHeroLeagueMatch::default_instance_ = new stReqHeroLeagueMatch();
  stHeroLeagueMatchResult::default_instance_ = new stHeroLeagueMatchResult();
  stReqMenberInfo::default_instance_ = new stReqMenberInfo();
  stMemberinfo::default_instance_ = new stMemberinfo();
  stCancelHeroLeagueMatch::default_instance_ = new stCancelHeroLeagueMatch();
  stCanceHeroLeagueResult::default_instance_ = new stCanceHeroLeagueResult();
  stReqQualifiedList::default_instance_ = new stReqQualifiedList();
  stRoleBasicInfo::default_instance_ = new stRoleBasicInfo();
  stTeam::default_instance_ = new stTeam();
  stQualifiedListResult::default_instance_ = new stQualifiedListResult();
  stReqWorship::default_instance_ = new stReqWorship();
  stWorskipResult::default_instance_ = new stWorskipResult();
  stReqHeroList::default_instance_ = new stReqHeroList();
  stRankInfo::default_instance_ = new stRankInfo();
  stHeroListResult::default_instance_ = new stHeroListResult();
  stReqRegister::default_instance_ = new stReqRegister();
  stRegisrerResult::default_instance_ = new stRegisrerResult();
  stArenaResultNotify::default_instance_ = new stArenaResultNotify();
  stReqPubLogIn::default_instance_ = new stReqPubLogIn();
  stReqPubLogOut::default_instance_ = new stReqPubLogOut();
  stRemoveModel::default_instance_ = new stRemoveModel();
  stLeitaiResultNotify::default_instance_ = new stLeitaiResultNotify();
  stReqRedPoint::default_instance_ = new stReqRedPoint();
  stRedPointResult::default_instance_ = new stRedPointResult();
  stReqDragonNest::default_instance_ = new stReqDragonNest();
  stRetDragonNest::default_instance_ = new stRetDragonNest();
  stReqChallengeDragonNest::default_instance_ = new stReqChallengeDragonNest();
  stRetChallengeDragonNest::default_instance_ = new stRetChallengeDragonNest();
  stReqResetChallengeDragonNest::default_instance_ = new stReqResetChallengeDragonNest();
  stRetResetChallengeDragonNest::default_instance_ = new stRetResetChallengeDragonNest();
  stReqEnterResBattle::default_instance_ = new stReqEnterResBattle();
  stRetEnterResBattle::default_instance_ = new stRetEnterResBattle();
  stReqCurResBattleGloryRank::default_instance_ = new stReqCurResBattleGloryRank();
  stResBattleGloryRankMemInfo::default_instance_ = new stResBattleGloryRankMemInfo();
  stRetCurResBattleGloryRank::default_instance_ = new stRetCurResBattleGloryRank();
  stReqResBattleRank::default_instance_ = new stReqResBattleRank();
  stRetResBattleRank::default_instance_ = new stRetResBattleRank();
  stReqResBattleKing::default_instance_ = new stReqResBattleKing();
  stResBattleRankMemInfo::default_instance_ = new stResBattleRankMemInfo();
  stRetResBattleKing::default_instance_ = new stRetResBattleKing();
  stReqResBattleProstate::default_instance_ = new stReqResBattleProstate();
  stRetResBattleProstate::default_instance_ = new stRetResBattleProstate();
  stReqResBattleRelive::default_instance_ = new stReqResBattleRelive();
  stRetResBattleRelive::default_instance_ = new stRetResBattleRelive();
  stReqLeaveResBattle::default_instance_ = new stReqLeaveResBattle();
  stRetLeaveResBattle::default_instance_ = new stRetLeaveResBattle();
  stReqRecvResBattleRes::default_instance_ = new stReqRecvResBattleRes();
  stResBattleResItem::default_instance_ = new stResBattleResItem();
  stRetRecvResBattleRes::default_instance_ = new stRetRecvResBattleRes();
  stSendResBattleStreakNum::default_instance_ = new stSendResBattleStreakNum();
  stSendResBattleNotice::default_instance_ = new stSendResBattleNotice();
  stNotityResBattleKillInfo::default_instance_ = new stNotityResBattleKillInfo();
  stBattleResRefreshItem::default_instance_ = new stBattleResRefreshItem();
  stNotityResBattleResRefresh::default_instance_ = new stNotityResBattleResRefresh();
  stNotityResBattleResEmpty::default_instance_ = new stNotityResBattleResEmpty();
  stNotityResBattleGlory::default_instance_ = new stNotityResBattleGlory();
  stBroadCastResBattleInvite::default_instance_ = new stBroadCastResBattleInvite();
  stRetResBattleReceiveInvite::default_instance_ = new stRetResBattleReceiveInvite();
  stResBattleReplyInviteJoin::default_instance_ = new stResBattleReplyInviteJoin();
  stResBattleInviteJoinRes::default_instance_ = new stResBattleInviteJoinRes();
  stReqStoneCopyMapInfo::default_instance_ = new stReqStoneCopyMapInfo();
  stStoneCopyMapInfoResult::default_instance_ = new stStoneCopyMapInfoResult();
  stReqChallengeStoneCopyMap::default_instance_ = new stReqChallengeStoneCopyMap();
  stChallengeStoneCopyMap::default_instance_ = new stChallengeStoneCopyMap();
  stReqResetStoneCopyMapNum::default_instance_ = new stReqResetStoneCopyMapNum();
  stResetStoneCopyMapNum::default_instance_ = new stResetStoneCopyMapNum();
  stReqResBattleResource::default_instance_ = new stReqResBattleResource();
  stRetResBattleResource::default_instance_ = new stRetResBattleResource();
  stResBattleEnd::default_instance_ = new stResBattleEnd();
  stReqLevelSortList::default_instance_->InitAsDefaultInstance();
  stSynLevelSortItem::default_instance_->InitAsDefaultInstance();
  stRetLevelSortList::default_instance_->InitAsDefaultInstance();
  stReqBattlePowerSortList::default_instance_->InitAsDefaultInstance();
  stSynBattlePowerSortItem::default_instance_->InitAsDefaultInstance();
  stRetBattlePowerSortList::default_instance_->InitAsDefaultInstance();
  stReqCopymapSortList::default_instance_->InitAsDefaultInstance();
  stCopyMapSortItem::default_instance_->InitAsDefaultInstance();
  stRetCopyMapSortList::default_instance_->InitAsDefaultInstance();
  stSynArenaSortInfo::default_instance_->InitAsDefaultInstance();
  stReqArenaPKList::default_instance_->InitAsDefaultInstance();
  stRetArenaPKList::default_instance_->InitAsDefaultInstance();
  stReqArenaSortList::default_instance_->InitAsDefaultInstance();
  stRetArenaSortList::default_instance_->InitAsDefaultInstance();
  stSynOne2OnePVPInfo::default_instance_->InitAsDefaultInstance();
  stReqOne2OnePVPSortList::default_instance_->InitAsDefaultInstance();
  stRetOne2OnePVPSortList::default_instance_->InitAsDefaultInstance();
  stChallengeArenaUser::default_instance_->InitAsDefaultInstance();
  stChallengeArenaUserResult::default_instance_->InitAsDefaultInstance();
  stChallegeLeitaiUser::default_instance_->InitAsDefaultInstance();
  stChallegeLeitaiUserResult::default_instance_->InitAsDefaultInstance();
  stOpenLeitaiWindow::default_instance_->InitAsDefaultInstance();
  stSynHeroHP::default_instance_->InitAsDefaultInstance();
  stRetLeitaiInfo::default_instance_->InitAsDefaultInstance();
  stReqLeitaiSortList::default_instance_->InitAsDefaultInstance();
  stLeitaiSortListItem::default_instance_->InitAsDefaultInstance();
  stRetLeitaiSortList::default_instance_->InitAsDefaultInstance();
  stSendLeitaiResult::default_instance_->InitAsDefaultInstance();
  stRetSendLeitaiResult::default_instance_->InitAsDefaultInstance();
  stNotifySelectLeitaiMode::default_instance_->InitAsDefaultInstance();
  stSelectLeiTaiMode::default_instance_->InitAsDefaultInstance();
  stSelectLeiTaiModeResult::default_instance_->InitAsDefaultInstance();
  stResetLeitaiInfo::default_instance_->InitAsDefaultInstance();
  stResetLeitaiInfoResult::default_instance_->InitAsDefaultInstance();
  stReqDrawHeroSortList::default_instance_->InitAsDefaultInstance();
  stDrawHeroSortItem::default_instance_->InitAsDefaultInstance();
  stDrawHeroSortList::default_instance_->InitAsDefaultInstance();
  stReqOne2OnePVPMatch::default_instance_->InitAsDefaultInstance();
  stOne2OnePVPMatchResult::default_instance_->InitAsDefaultInstance();
  stCancelOne2OnePVPMatch::default_instance_->InitAsDefaultInstance();
  stCancelOne2OnePVPResult::default_instance_->InitAsDefaultInstance();
  stReqMySortListInfo::default_instance_->InitAsDefaultInstance();
  stRetMySortListInfo::default_instance_->InitAsDefaultInstance();
  stLeitaiMoveHero2BattlePos::default_instance_->InitAsDefaultInstance();
  stLeitaiMoveHero2BattlePosError::default_instance_->InitAsDefaultInstance();
  stLeitaiCancelGoOutForBattle::default_instance_->InitAsDefaultInstance();
  stLeitaiCancelGoOutForBattleResult::default_instance_->InitAsDefaultInstance();
  stCommitArenaResult::default_instance_->InitAsDefaultInstance();
  stRetCommintArenaResult::default_instance_->InitAsDefaultInstance();
  stReqEnterLeitaiScene::default_instance_->InitAsDefaultInstance();
  stReqResetLeitaiBuff::default_instance_->InitAsDefaultInstance();
  stResetLeitaiBuffResult::default_instance_->InitAsDefaultInstance();
  stReqBuffResetTime::default_instance_->InitAsDefaultInstance();
  stRetBuffResetTime::default_instance_->InitAsDefaultInstance();
  stArenaReachNewRank::default_instance_->InitAsDefaultInstance();
  stReqResetArenaChallengeNum::default_instance_->InitAsDefaultInstance();
  stResetArenaChallengeNunResult::default_instance_->InitAsDefaultInstance();
  stReqClearArenaCD::default_instance_->InitAsDefaultInstance();
  stClearArenaCDResult::default_instance_->InitAsDefaultInstance();
  stReqOpenSvrBPRank::default_instance_->InitAsDefaultInstance();
  stBPRankItemInfo::default_instance_->InitAsDefaultInstance();
  stRetOpenSvrBPRank::default_instance_->InitAsDefaultInstance();
  stReqExpeditionInfo::default_instance_->InitAsDefaultInstance();
  stExpeditionItem::default_instance_->InitAsDefaultInstance();
  stRetExpeditionInfo::default_instance_->InitAsDefaultInstance();
  stReqExpedition::default_instance_->InitAsDefaultInstance();
  stRetExpedition::default_instance_->InitAsDefaultInstance();
  stReqExpeditionReward::default_instance_->InitAsDefaultInstance();
  stRetExpeditionReward::default_instance_->InitAsDefaultInstance();
  stReqFastExpedition::default_instance_->InitAsDefaultInstance();
  stRetFastExpedition::default_instance_->InitAsDefaultInstance();
  stReqCancelExpedition::default_instance_->InitAsDefaultInstance();
  stRetCancelExpedition::default_instance_->InitAsDefaultInstance();
  stReqExpeditionSummary::default_instance_->InitAsDefaultInstance();
  stRetExpeditionSummary::default_instance_->InitAsDefaultInstance();
  stReqGloryfashionSortList::default_instance_->InitAsDefaultInstance();
  stGloryfashionSortList::default_instance_->InitAsDefaultInstance();
  stReqEnterEmeraldDream::default_instance_->InitAsDefaultInstance();
  stEnterEmeraldDreamResult::default_instance_->InitAsDefaultInstance();
  stResetFightNum::default_instance_->InitAsDefaultInstance();
  stResetFightNumResult::default_instance_->InitAsDefaultInstance();
  stReqEmeraldDreamSortList::default_instance_->InitAsDefaultInstance();
  SortListInfo::default_instance_->InitAsDefaultInstance();
  stEmeraldDreamSortList::default_instance_->InitAsDefaultInstance();
  stSendRankInfo::default_instance_->InitAsDefaultInstance();
  stReqSurplusNum::default_instance_->InitAsDefaultInstance();
  userSortInfo::default_instance_->InitAsDefaultInstance();
  stSurplusNumResult::default_instance_->InitAsDefaultInstance();
  stSynChampionInfo::default_instance_->InitAsDefaultInstance();
  stMyIntegralAndNum::default_instance_->InitAsDefaultInstance();
  stReqOpenLeagueWindow::default_instance_->InitAsDefaultInstance();
  stOpenLeagueWindowResult::default_instance_->InitAsDefaultInstance();
  stReqHeroLeagueMatch::default_instance_->InitAsDefaultInstance();
  stHeroLeagueMatchResult::default_instance_->InitAsDefaultInstance();
  stReqMenberInfo::default_instance_->InitAsDefaultInstance();
  stMemberinfo::default_instance_->InitAsDefaultInstance();
  stCancelHeroLeagueMatch::default_instance_->InitAsDefaultInstance();
  stCanceHeroLeagueResult::default_instance_->InitAsDefaultInstance();
  stReqQualifiedList::default_instance_->InitAsDefaultInstance();
  stRoleBasicInfo::default_instance_->InitAsDefaultInstance();
  stTeam::default_instance_->InitAsDefaultInstance();
  stQualifiedListResult::default_instance_->InitAsDefaultInstance();
  stReqWorship::default_instance_->InitAsDefaultInstance();
  stWorskipResult::default_instance_->InitAsDefaultInstance();
  stReqHeroList::default_instance_->InitAsDefaultInstance();
  stRankInfo::default_instance_->InitAsDefaultInstance();
  stHeroListResult::default_instance_->InitAsDefaultInstance();
  stReqRegister::default_instance_->InitAsDefaultInstance();
  stRegisrerResult::default_instance_->InitAsDefaultInstance();
  stArenaResultNotify::default_instance_->InitAsDefaultInstance();
  stReqPubLogIn::default_instance_->InitAsDefaultInstance();
  stReqPubLogOut::default_instance_->InitAsDefaultInstance();
  stRemoveModel::default_instance_->InitAsDefaultInstance();
  stLeitaiResultNotify::default_instance_->InitAsDefaultInstance();
  stReqRedPoint::default_instance_->InitAsDefaultInstance();
  stRedPointResult::default_instance_->InitAsDefaultInstance();
  stReqDragonNest::default_instance_->InitAsDefaultInstance();
  stRetDragonNest::default_instance_->InitAsDefaultInstance();
  stReqChallengeDragonNest::default_instance_->InitAsDefaultInstance();
  stRetChallengeDragonNest::default_instance_->InitAsDefaultInstance();
  stReqResetChallengeDragonNest::default_instance_->InitAsDefaultInstance();
  stRetResetChallengeDragonNest::default_instance_->InitAsDefaultInstance();
  stReqEnterResBattle::default_instance_->InitAsDefaultInstance();
  stRetEnterResBattle::default_instance_->InitAsDefaultInstance();
  stReqCurResBattleGloryRank::default_instance_->InitAsDefaultInstance();
  stResBattleGloryRankMemInfo::default_instance_->InitAsDefaultInstance();
  stRetCurResBattleGloryRank::default_instance_->InitAsDefaultInstance();
  stReqResBattleRank::default_instance_->InitAsDefaultInstance();
  stRetResBattleRank::default_instance_->InitAsDefaultInstance();
  stReqResBattleKing::default_instance_->InitAsDefaultInstance();
  stResBattleRankMemInfo::default_instance_->InitAsDefaultInstance();
  stRetResBattleKing::default_instance_->InitAsDefaultInstance();
  stReqResBattleProstate::default_instance_->InitAsDefaultInstance();
  stRetResBattleProstate::default_instance_->InitAsDefaultInstance();
  stReqResBattleRelive::default_instance_->InitAsDefaultInstance();
  stRetResBattleRelive::default_instance_->InitAsDefaultInstance();
  stReqLeaveResBattle::default_instance_->InitAsDefaultInstance();
  stRetLeaveResBattle::default_instance_->InitAsDefaultInstance();
  stReqRecvResBattleRes::default_instance_->InitAsDefaultInstance();
  stResBattleResItem::default_instance_->InitAsDefaultInstance();
  stRetRecvResBattleRes::default_instance_->InitAsDefaultInstance();
  stSendResBattleStreakNum::default_instance_->InitAsDefaultInstance();
  stSendResBattleNotice::default_instance_->InitAsDefaultInstance();
  stNotityResBattleKillInfo::default_instance_->InitAsDefaultInstance();
  stBattleResRefreshItem::default_instance_->InitAsDefaultInstance();
  stNotityResBattleResRefresh::default_instance_->InitAsDefaultInstance();
  stNotityResBattleResEmpty::default_instance_->InitAsDefaultInstance();
  stNotityResBattleGlory::default_instance_->InitAsDefaultInstance();
  stBroadCastResBattleInvite::default_instance_->InitAsDefaultInstance();
  stRetResBattleReceiveInvite::default_instance_->InitAsDefaultInstance();
  stResBattleReplyInviteJoin::default_instance_->InitAsDefaultInstance();
  stResBattleInviteJoinRes::default_instance_->InitAsDefaultInstance();
  stReqStoneCopyMapInfo::default_instance_->InitAsDefaultInstance();
  stStoneCopyMapInfoResult::default_instance_->InitAsDefaultInstance();
  stReqChallengeStoneCopyMap::default_instance_->InitAsDefaultInstance();
  stChallengeStoneCopyMap::default_instance_->InitAsDefaultInstance();
  stReqResetStoneCopyMapNum::default_instance_->InitAsDefaultInstance();
  stResetStoneCopyMapNum::default_instance_->InitAsDefaultInstance();
  stReqResBattleResource::default_instance_->InitAsDefaultInstance();
  stRetResBattleResource::default_instance_->InitAsDefaultInstance();
  stResBattleEnd::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SortList_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SortList_2eproto {
  StaticDescriptorInitializer_SortList_2eproto() {
    protobuf_AddDesc_SortList_2eproto();
  }
} static_descriptor_initializer_SortList_2eproto_;
const ::google::protobuf::EnumDescriptor* eOne2OneSortListType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eOne2OneSortListType_descriptor_;
}
bool eOne2OneSortListType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* eLeitaiMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eLeitaiMode_descriptor_;
}
bool eLeitaiMode_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqLevelSortList_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqLevelSortList_ProtoModID_descriptor_;
}
bool stReqLevelSortList_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqLevelSortList_ProtoModID stReqLevelSortList::ModID;
const stReqLevelSortList_ProtoModID stReqLevelSortList::ProtoModID_MIN;
const stReqLevelSortList_ProtoModID stReqLevelSortList::ProtoModID_MAX;
const int stReqLevelSortList::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqLevelSortList_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqLevelSortList_ProtoFunID_descriptor_;
}
bool stReqLevelSortList_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqLevelSortList_ProtoFunID stReqLevelSortList::FunID;
const stReqLevelSortList_ProtoFunID stReqLevelSortList::ProtoFunID_MIN;
const stReqLevelSortList_ProtoFunID stReqLevelSortList::ProtoFunID_MAX;
const int stReqLevelSortList::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqLevelSortList::kFromRankFieldNumber;
#endif  // !_MSC_VER

stReqLevelSortList::stReqLevelSortList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqLevelSortList::InitAsDefaultInstance() {
}

stReqLevelSortList::stReqLevelSortList(const stReqLevelSortList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqLevelSortList::SharedCtor() {
  _cached_size_ = 0;
  fromrank_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqLevelSortList::~stReqLevelSortList() {
  SharedDtor();
}

void stReqLevelSortList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqLevelSortList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqLevelSortList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqLevelSortList_descriptor_;
}

const stReqLevelSortList& stReqLevelSortList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stReqLevelSortList* stReqLevelSortList::default_instance_ = NULL;

stReqLevelSortList* stReqLevelSortList::New() const {
  return new stReqLevelSortList;
}

void stReqLevelSortList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fromrank_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqLevelSortList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 fromRank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fromrank_)));
          set_has_fromrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqLevelSortList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 fromRank = 1;
  if (has_fromrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fromrank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqLevelSortList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 fromRank = 1;
  if (has_fromrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fromrank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqLevelSortList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 fromRank = 1;
    if (has_fromrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fromrank());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqLevelSortList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqLevelSortList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqLevelSortList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqLevelSortList::MergeFrom(const stReqLevelSortList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fromrank()) {
      set_fromrank(from.fromrank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqLevelSortList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqLevelSortList::CopyFrom(const stReqLevelSortList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqLevelSortList::IsInitialized() const {

  return true;
}

void stReqLevelSortList::Swap(stReqLevelSortList* other) {
  if (other != this) {
    std::swap(fromrank_, other->fromrank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqLevelSortList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqLevelSortList_descriptor_;
  metadata.reflection = stReqLevelSortList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stSynLevelSortItem::kCharIDFieldNumber;
const int stSynLevelSortItem::kNameFieldNumber;
const int stSynLevelSortItem::kGuildNameFieldNumber;
const int stSynLevelSortItem::kLevelFieldNumber;
const int stSynLevelSortItem::kJobFieldNumber;
const int stSynLevelSortItem::kSexFieldNumber;
const int stSynLevelSortItem::kPhotoIDFieldNumber;
#endif  // !_MSC_VER

stSynLevelSortItem::stSynLevelSortItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSynLevelSortItem::InitAsDefaultInstance() {
}

stSynLevelSortItem::stSynLevelSortItem(const stSynLevelSortItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSynLevelSortItem::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0u;
  job_ = 0u;
  sex_ = 0u;
  photoid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSynLevelSortItem::~stSynLevelSortItem() {
  SharedDtor();
}

void stSynLevelSortItem::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    delete guildname_;
  }
  if (this != default_instance_) {
  }
}

void stSynLevelSortItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSynLevelSortItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynLevelSortItem_descriptor_;
}

const stSynLevelSortItem& stSynLevelSortItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stSynLevelSortItem* stSynLevelSortItem::default_instance_ = NULL;

stSynLevelSortItem* stSynLevelSortItem::New() const {
  return new stSynLevelSortItem;
}

void stSynLevelSortItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_guildname()) {
      if (guildname_ != &::google::protobuf::internal::kEmptyString) {
        guildname_->clear();
      }
    }
    level_ = 0u;
    job_ = 0u;
    sex_ = 0u;
    photoid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSynLevelSortItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_guildName;
        break;
      }

      // optional string guildName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guildName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guildname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guildname().data(), this->guildname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }

      // optional uint32 level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_job;
        break;
      }

      // optional uint32 job = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &job_)));
          set_has_job();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_sex;
        break;
      }

      // optional uint32 sex = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_photoID;
        break;
      }

      // optional uint32 photoID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_photoID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &photoid_)));
          set_has_photoid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSynLevelSortItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional string guildName = 3;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->guildname(), output);
  }

  // optional uint32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->level(), output);
  }

  // optional uint32 job = 5;
  if (has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->job(), output);
  }

  // optional uint32 sex = 6;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->sex(), output);
  }

  // optional uint32 photoID = 7;
  if (has_photoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->photoid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSynLevelSortItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string guildName = 3;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->guildname(), target);
  }

  // optional uint32 level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->level(), target);
  }

  // optional uint32 job = 5;
  if (has_job()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->job(), target);
  }

  // optional uint32 sex = 6;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->sex(), target);
  }

  // optional uint32 photoID = 7;
  if (has_photoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->photoid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSynLevelSortItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string guildName = 3;
    if (has_guildname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildname());
    }

    // optional uint32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 job = 5;
    if (has_job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->job());
    }

    // optional uint32 sex = 6;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sex());
    }

    // optional uint32 photoID = 7;
    if (has_photoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->photoid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSynLevelSortItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSynLevelSortItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSynLevelSortItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSynLevelSortItem::MergeFrom(const stSynLevelSortItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_guildname()) {
      set_guildname(from.guildname());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_job()) {
      set_job(from.job());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_photoid()) {
      set_photoid(from.photoid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSynLevelSortItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSynLevelSortItem::CopyFrom(const stSynLevelSortItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSynLevelSortItem::IsInitialized() const {

  return true;
}

void stSynLevelSortItem::Swap(stSynLevelSortItem* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(name_, other->name_);
    std::swap(guildname_, other->guildname_);
    std::swap(level_, other->level_);
    std::swap(job_, other->job_);
    std::swap(sex_, other->sex_);
    std::swap(photoid_, other->photoid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSynLevelSortItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSynLevelSortItem_descriptor_;
  metadata.reflection = stSynLevelSortItem_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRetLevelSortList_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetLevelSortList_ProtoModID_descriptor_;
}
bool stRetLevelSortList_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetLevelSortList_ProtoModID stRetLevelSortList::ModID;
const stRetLevelSortList_ProtoModID stRetLevelSortList::ProtoModID_MIN;
const stRetLevelSortList_ProtoModID stRetLevelSortList::ProtoModID_MAX;
const int stRetLevelSortList::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetLevelSortList_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetLevelSortList_ProtoFunID_descriptor_;
}
bool stRetLevelSortList_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetLevelSortList_ProtoFunID stRetLevelSortList::FunID;
const stRetLevelSortList_ProtoFunID stRetLevelSortList::ProtoFunID_MIN;
const stRetLevelSortList_ProtoFunID stRetLevelSortList::ProtoFunID_MAX;
const int stRetLevelSortList::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRetLevelSortList::kBeginRankFieldNumber;
const int stRetLevelSortList::kMyRankFieldNumber;
const int stRetLevelSortList::kSortItemFieldNumber;
#endif  // !_MSC_VER

stRetLevelSortList::stRetLevelSortList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRetLevelSortList::InitAsDefaultInstance() {
}

stRetLevelSortList::stRetLevelSortList(const stRetLevelSortList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRetLevelSortList::SharedCtor() {
  _cached_size_ = 0;
  beginrank_ = 0u;
  myrank_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRetLevelSortList::~stRetLevelSortList() {
  SharedDtor();
}

void stRetLevelSortList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRetLevelSortList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRetLevelSortList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetLevelSortList_descriptor_;
}

const stRetLevelSortList& stRetLevelSortList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stRetLevelSortList* stRetLevelSortList::default_instance_ = NULL;

stRetLevelSortList* stRetLevelSortList::New() const {
  return new stRetLevelSortList;
}

void stRetLevelSortList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    beginrank_ = 0u;
    myrank_ = 0u;
  }
  sortitem_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRetLevelSortList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 beginRank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &beginrank_)));
          set_has_beginrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_myRank;
        break;
      }

      // optional uint32 myRank = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_myRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &myrank_)));
          set_has_myrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_sortItem;
        break;
      }

      // repeated .SortProto.stSynLevelSortItem sortItem = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sortItem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sortitem()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_sortItem;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRetLevelSortList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 beginRank = 1;
  if (has_beginrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->beginrank(), output);
  }

  // optional uint32 myRank = 2;
  if (has_myrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->myrank(), output);
  }

  // repeated .SortProto.stSynLevelSortItem sortItem = 3;
  for (int i = 0; i < this->sortitem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->sortitem(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRetLevelSortList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 beginRank = 1;
  if (has_beginrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->beginrank(), target);
  }

  // optional uint32 myRank = 2;
  if (has_myrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->myrank(), target);
  }

  // repeated .SortProto.stSynLevelSortItem sortItem = 3;
  for (int i = 0; i < this->sortitem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->sortitem(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRetLevelSortList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 beginRank = 1;
    if (has_beginrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->beginrank());
    }

    // optional uint32 myRank = 2;
    if (has_myrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->myrank());
    }

  }
  // repeated .SortProto.stSynLevelSortItem sortItem = 3;
  total_size += 1 * this->sortitem_size();
  for (int i = 0; i < this->sortitem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sortitem(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRetLevelSortList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRetLevelSortList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRetLevelSortList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRetLevelSortList::MergeFrom(const stRetLevelSortList& from) {
  GOOGLE_CHECK_NE(&from, this);
  sortitem_.MergeFrom(from.sortitem_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_beginrank()) {
      set_beginrank(from.beginrank());
    }
    if (from.has_myrank()) {
      set_myrank(from.myrank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRetLevelSortList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRetLevelSortList::CopyFrom(const stRetLevelSortList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRetLevelSortList::IsInitialized() const {

  return true;
}

void stRetLevelSortList::Swap(stRetLevelSortList* other) {
  if (other != this) {
    std::swap(beginrank_, other->beginrank_);
    std::swap(myrank_, other->myrank_);
    sortitem_.Swap(&other->sortitem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRetLevelSortList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRetLevelSortList_descriptor_;
  metadata.reflection = stRetLevelSortList_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqBattlePowerSortList_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqBattlePowerSortList_ProtoModID_descriptor_;
}
bool stReqBattlePowerSortList_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqBattlePowerSortList_ProtoModID stReqBattlePowerSortList::ModID;
const stReqBattlePowerSortList_ProtoModID stReqBattlePowerSortList::ProtoModID_MIN;
const stReqBattlePowerSortList_ProtoModID stReqBattlePowerSortList::ProtoModID_MAX;
const int stReqBattlePowerSortList::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqBattlePowerSortList_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqBattlePowerSortList_ProtoFunID_descriptor_;
}
bool stReqBattlePowerSortList_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqBattlePowerSortList_ProtoFunID stReqBattlePowerSortList::FunID;
const stReqBattlePowerSortList_ProtoFunID stReqBattlePowerSortList::ProtoFunID_MIN;
const stReqBattlePowerSortList_ProtoFunID stReqBattlePowerSortList::ProtoFunID_MAX;
const int stReqBattlePowerSortList::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqBattlePowerSortList::kFromRankFieldNumber;
#endif  // !_MSC_VER

stReqBattlePowerSortList::stReqBattlePowerSortList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqBattlePowerSortList::InitAsDefaultInstance() {
}

stReqBattlePowerSortList::stReqBattlePowerSortList(const stReqBattlePowerSortList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqBattlePowerSortList::SharedCtor() {
  _cached_size_ = 0;
  fromrank_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqBattlePowerSortList::~stReqBattlePowerSortList() {
  SharedDtor();
}

void stReqBattlePowerSortList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqBattlePowerSortList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqBattlePowerSortList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqBattlePowerSortList_descriptor_;
}

const stReqBattlePowerSortList& stReqBattlePowerSortList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stReqBattlePowerSortList* stReqBattlePowerSortList::default_instance_ = NULL;

stReqBattlePowerSortList* stReqBattlePowerSortList::New() const {
  return new stReqBattlePowerSortList;
}

void stReqBattlePowerSortList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fromrank_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqBattlePowerSortList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 fromRank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fromrank_)));
          set_has_fromrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqBattlePowerSortList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 fromRank = 1;
  if (has_fromrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fromrank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqBattlePowerSortList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 fromRank = 1;
  if (has_fromrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fromrank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqBattlePowerSortList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 fromRank = 1;
    if (has_fromrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fromrank());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqBattlePowerSortList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqBattlePowerSortList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqBattlePowerSortList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqBattlePowerSortList::MergeFrom(const stReqBattlePowerSortList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fromrank()) {
      set_fromrank(from.fromrank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqBattlePowerSortList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqBattlePowerSortList::CopyFrom(const stReqBattlePowerSortList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqBattlePowerSortList::IsInitialized() const {

  return true;
}

void stReqBattlePowerSortList::Swap(stReqBattlePowerSortList* other) {
  if (other != this) {
    std::swap(fromrank_, other->fromrank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqBattlePowerSortList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqBattlePowerSortList_descriptor_;
  metadata.reflection = stReqBattlePowerSortList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stSynBattlePowerSortItem::kCharIDFieldNumber;
const int stSynBattlePowerSortItem::kNameFieldNumber;
const int stSynBattlePowerSortItem::kGuildNameFieldNumber;
const int stSynBattlePowerSortItem::kBattlePowerFieldNumber;
const int stSynBattlePowerSortItem::kJobFieldNumber;
const int stSynBattlePowerSortItem::kSexFieldNumber;
const int stSynBattlePowerSortItem::kLevelFieldNumber;
const int stSynBattlePowerSortItem::kPhotoIDFieldNumber;
#endif  // !_MSC_VER

stSynBattlePowerSortItem::stSynBattlePowerSortItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSynBattlePowerSortItem::InitAsDefaultInstance() {
}

stSynBattlePowerSortItem::stSynBattlePowerSortItem(const stSynBattlePowerSortItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSynBattlePowerSortItem::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  battlepower_ = 0u;
  job_ = 0u;
  sex_ = 0u;
  level_ = 0u;
  photoid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSynBattlePowerSortItem::~stSynBattlePowerSortItem() {
  SharedDtor();
}

void stSynBattlePowerSortItem::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    delete guildname_;
  }
  if (this != default_instance_) {
  }
}

void stSynBattlePowerSortItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSynBattlePowerSortItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynBattlePowerSortItem_descriptor_;
}

const stSynBattlePowerSortItem& stSynBattlePowerSortItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stSynBattlePowerSortItem* stSynBattlePowerSortItem::default_instance_ = NULL;

stSynBattlePowerSortItem* stSynBattlePowerSortItem::New() const {
  return new stSynBattlePowerSortItem;
}

void stSynBattlePowerSortItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_guildname()) {
      if (guildname_ != &::google::protobuf::internal::kEmptyString) {
        guildname_->clear();
      }
    }
    battlepower_ = 0u;
    job_ = 0u;
    sex_ = 0u;
    level_ = 0u;
    photoid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSynBattlePowerSortItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_guildName;
        break;
      }

      // optional string guildName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guildName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guildname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guildname().data(), this->guildname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_battlePower;
        break;
      }

      // optional uint32 battlePower = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battlePower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battlepower_)));
          set_has_battlepower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_job;
        break;
      }

      // optional uint32 job = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &job_)));
          set_has_job();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_sex;
        break;
      }

      // optional uint32 sex = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_level;
        break;
      }

      // optional uint32 level = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_photoID;
        break;
      }

      // optional uint32 photoID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_photoID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &photoid_)));
          set_has_photoid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSynBattlePowerSortItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional string guildName = 3;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->guildname(), output);
  }

  // optional uint32 battlePower = 4;
  if (has_battlepower()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->battlepower(), output);
  }

  // optional uint32 job = 5;
  if (has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->job(), output);
  }

  // optional uint32 sex = 6;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->sex(), output);
  }

  // optional uint32 level = 7;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->level(), output);
  }

  // optional uint32 photoID = 8;
  if (has_photoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->photoid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSynBattlePowerSortItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string guildName = 3;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->guildname(), target);
  }

  // optional uint32 battlePower = 4;
  if (has_battlepower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->battlepower(), target);
  }

  // optional uint32 job = 5;
  if (has_job()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->job(), target);
  }

  // optional uint32 sex = 6;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->sex(), target);
  }

  // optional uint32 level = 7;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->level(), target);
  }

  // optional uint32 photoID = 8;
  if (has_photoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->photoid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSynBattlePowerSortItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string guildName = 3;
    if (has_guildname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildname());
    }

    // optional uint32 battlePower = 4;
    if (has_battlepower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battlepower());
    }

    // optional uint32 job = 5;
    if (has_job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->job());
    }

    // optional uint32 sex = 6;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sex());
    }

    // optional uint32 level = 7;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 photoID = 8;
    if (has_photoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->photoid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSynBattlePowerSortItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSynBattlePowerSortItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSynBattlePowerSortItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSynBattlePowerSortItem::MergeFrom(const stSynBattlePowerSortItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_guildname()) {
      set_guildname(from.guildname());
    }
    if (from.has_battlepower()) {
      set_battlepower(from.battlepower());
    }
    if (from.has_job()) {
      set_job(from.job());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_photoid()) {
      set_photoid(from.photoid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSynBattlePowerSortItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSynBattlePowerSortItem::CopyFrom(const stSynBattlePowerSortItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSynBattlePowerSortItem::IsInitialized() const {

  return true;
}

void stSynBattlePowerSortItem::Swap(stSynBattlePowerSortItem* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(name_, other->name_);
    std::swap(guildname_, other->guildname_);
    std::swap(battlepower_, other->battlepower_);
    std::swap(job_, other->job_);
    std::swap(sex_, other->sex_);
    std::swap(level_, other->level_);
    std::swap(photoid_, other->photoid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSynBattlePowerSortItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSynBattlePowerSortItem_descriptor_;
  metadata.reflection = stSynBattlePowerSortItem_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRetBattlePowerSortList_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetBattlePowerSortList_ProtoModID_descriptor_;
}
bool stRetBattlePowerSortList_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetBattlePowerSortList_ProtoModID stRetBattlePowerSortList::ModID;
const stRetBattlePowerSortList_ProtoModID stRetBattlePowerSortList::ProtoModID_MIN;
const stRetBattlePowerSortList_ProtoModID stRetBattlePowerSortList::ProtoModID_MAX;
const int stRetBattlePowerSortList::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetBattlePowerSortList_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetBattlePowerSortList_ProtoFunID_descriptor_;
}
bool stRetBattlePowerSortList_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetBattlePowerSortList_ProtoFunID stRetBattlePowerSortList::FunID;
const stRetBattlePowerSortList_ProtoFunID stRetBattlePowerSortList::ProtoFunID_MIN;
const stRetBattlePowerSortList_ProtoFunID stRetBattlePowerSortList::ProtoFunID_MAX;
const int stRetBattlePowerSortList::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRetBattlePowerSortList::kBeginRankFieldNumber;
const int stRetBattlePowerSortList::kMyRankFieldNumber;
const int stRetBattlePowerSortList::kSortItemFieldNumber;
#endif  // !_MSC_VER

stRetBattlePowerSortList::stRetBattlePowerSortList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRetBattlePowerSortList::InitAsDefaultInstance() {
}

stRetBattlePowerSortList::stRetBattlePowerSortList(const stRetBattlePowerSortList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRetBattlePowerSortList::SharedCtor() {
  _cached_size_ = 0;
  beginrank_ = 0u;
  myrank_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRetBattlePowerSortList::~stRetBattlePowerSortList() {
  SharedDtor();
}

void stRetBattlePowerSortList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRetBattlePowerSortList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRetBattlePowerSortList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetBattlePowerSortList_descriptor_;
}

const stRetBattlePowerSortList& stRetBattlePowerSortList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stRetBattlePowerSortList* stRetBattlePowerSortList::default_instance_ = NULL;

stRetBattlePowerSortList* stRetBattlePowerSortList::New() const {
  return new stRetBattlePowerSortList;
}

void stRetBattlePowerSortList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    beginrank_ = 0u;
    myrank_ = 0u;
  }
  sortitem_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRetBattlePowerSortList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 beginRank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &beginrank_)));
          set_has_beginrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_myRank;
        break;
      }

      // optional uint32 myRank = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_myRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &myrank_)));
          set_has_myrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_sortItem;
        break;
      }

      // repeated .SortProto.stSynBattlePowerSortItem sortItem = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sortItem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sortitem()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_sortItem;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRetBattlePowerSortList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 beginRank = 1;
  if (has_beginrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->beginrank(), output);
  }

  // optional uint32 myRank = 2;
  if (has_myrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->myrank(), output);
  }

  // repeated .SortProto.stSynBattlePowerSortItem sortItem = 3;
  for (int i = 0; i < this->sortitem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->sortitem(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRetBattlePowerSortList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 beginRank = 1;
  if (has_beginrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->beginrank(), target);
  }

  // optional uint32 myRank = 2;
  if (has_myrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->myrank(), target);
  }

  // repeated .SortProto.stSynBattlePowerSortItem sortItem = 3;
  for (int i = 0; i < this->sortitem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->sortitem(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRetBattlePowerSortList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 beginRank = 1;
    if (has_beginrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->beginrank());
    }

    // optional uint32 myRank = 2;
    if (has_myrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->myrank());
    }

  }
  // repeated .SortProto.stSynBattlePowerSortItem sortItem = 3;
  total_size += 1 * this->sortitem_size();
  for (int i = 0; i < this->sortitem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sortitem(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRetBattlePowerSortList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRetBattlePowerSortList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRetBattlePowerSortList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRetBattlePowerSortList::MergeFrom(const stRetBattlePowerSortList& from) {
  GOOGLE_CHECK_NE(&from, this);
  sortitem_.MergeFrom(from.sortitem_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_beginrank()) {
      set_beginrank(from.beginrank());
    }
    if (from.has_myrank()) {
      set_myrank(from.myrank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRetBattlePowerSortList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRetBattlePowerSortList::CopyFrom(const stRetBattlePowerSortList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRetBattlePowerSortList::IsInitialized() const {

  return true;
}

void stRetBattlePowerSortList::Swap(stRetBattlePowerSortList* other) {
  if (other != this) {
    std::swap(beginrank_, other->beginrank_);
    std::swap(myrank_, other->myrank_);
    sortitem_.Swap(&other->sortitem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRetBattlePowerSortList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRetBattlePowerSortList_descriptor_;
  metadata.reflection = stRetBattlePowerSortList_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqCopymapSortList_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqCopymapSortList_ProtoModID_descriptor_;
}
bool stReqCopymapSortList_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqCopymapSortList_ProtoModID stReqCopymapSortList::ModID;
const stReqCopymapSortList_ProtoModID stReqCopymapSortList::ProtoModID_MIN;
const stReqCopymapSortList_ProtoModID stReqCopymapSortList::ProtoModID_MAX;
const int stReqCopymapSortList::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqCopymapSortList_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqCopymapSortList_ProtoFunID_descriptor_;
}
bool stReqCopymapSortList_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqCopymapSortList_ProtoFunID stReqCopymapSortList::FunID;
const stReqCopymapSortList_ProtoFunID stReqCopymapSortList::ProtoFunID_MIN;
const stReqCopymapSortList_ProtoFunID stReqCopymapSortList::ProtoFunID_MAX;
const int stReqCopymapSortList::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqCopymapSortList::kFromRankFieldNumber;
#endif  // !_MSC_VER

stReqCopymapSortList::stReqCopymapSortList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqCopymapSortList::InitAsDefaultInstance() {
}

stReqCopymapSortList::stReqCopymapSortList(const stReqCopymapSortList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqCopymapSortList::SharedCtor() {
  _cached_size_ = 0;
  fromrank_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqCopymapSortList::~stReqCopymapSortList() {
  SharedDtor();
}

void stReqCopymapSortList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqCopymapSortList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqCopymapSortList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqCopymapSortList_descriptor_;
}

const stReqCopymapSortList& stReqCopymapSortList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stReqCopymapSortList* stReqCopymapSortList::default_instance_ = NULL;

stReqCopymapSortList* stReqCopymapSortList::New() const {
  return new stReqCopymapSortList;
}

void stReqCopymapSortList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fromrank_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqCopymapSortList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 fromRank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fromrank_)));
          set_has_fromrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqCopymapSortList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 fromRank = 1;
  if (has_fromrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fromrank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqCopymapSortList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 fromRank = 1;
  if (has_fromrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fromrank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqCopymapSortList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 fromRank = 1;
    if (has_fromrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fromrank());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqCopymapSortList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqCopymapSortList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqCopymapSortList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqCopymapSortList::MergeFrom(const stReqCopymapSortList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fromrank()) {
      set_fromrank(from.fromrank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqCopymapSortList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqCopymapSortList::CopyFrom(const stReqCopymapSortList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqCopymapSortList::IsInitialized() const {

  return true;
}

void stReqCopymapSortList::Swap(stReqCopymapSortList* other) {
  if (other != this) {
    std::swap(fromrank_, other->fromrank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqCopymapSortList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqCopymapSortList_descriptor_;
  metadata.reflection = stReqCopymapSortList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stCopyMapSortItem::kCharIDFieldNumber;
const int stCopyMapSortItem::kNameFieldNumber;
const int stCopyMapSortItem::kGuildNameFieldNumber;
const int stCopyMapSortItem::kStarNumFieldNumber;
const int stCopyMapSortItem::kJobFieldNumber;
const int stCopyMapSortItem::kSexFieldNumber;
const int stCopyMapSortItem::kLevelFieldNumber;
const int stCopyMapSortItem::kPhotoIDFieldNumber;
#endif  // !_MSC_VER

stCopyMapSortItem::stCopyMapSortItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stCopyMapSortItem::InitAsDefaultInstance() {
}

stCopyMapSortItem::stCopyMapSortItem(const stCopyMapSortItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stCopyMapSortItem::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  starnum_ = 0u;
  job_ = 0u;
  sex_ = 0u;
  level_ = 0u;
  photoid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stCopyMapSortItem::~stCopyMapSortItem() {
  SharedDtor();
}

void stCopyMapSortItem::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    delete guildname_;
  }
  if (this != default_instance_) {
  }
}

void stCopyMapSortItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stCopyMapSortItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCopyMapSortItem_descriptor_;
}

const stCopyMapSortItem& stCopyMapSortItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stCopyMapSortItem* stCopyMapSortItem::default_instance_ = NULL;

stCopyMapSortItem* stCopyMapSortItem::New() const {
  return new stCopyMapSortItem;
}

void stCopyMapSortItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_guildname()) {
      if (guildname_ != &::google::protobuf::internal::kEmptyString) {
        guildname_->clear();
      }
    }
    starnum_ = 0u;
    job_ = 0u;
    sex_ = 0u;
    level_ = 0u;
    photoid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stCopyMapSortItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_guildName;
        break;
      }

      // optional string guildName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guildName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guildname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guildname().data(), this->guildname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_starNum;
        break;
      }

      // optional uint32 starNum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_starNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &starnum_)));
          set_has_starnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_job;
        break;
      }

      // optional uint32 job = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &job_)));
          set_has_job();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_sex;
        break;
      }

      // optional uint32 sex = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_level;
        break;
      }

      // optional uint32 level = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_photoID;
        break;
      }

      // optional uint32 photoID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_photoID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &photoid_)));
          set_has_photoid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stCopyMapSortItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional string guildName = 3;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->guildname(), output);
  }

  // optional uint32 starNum = 4;
  if (has_starnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->starnum(), output);
  }

  // optional uint32 job = 5;
  if (has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->job(), output);
  }

  // optional uint32 sex = 6;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->sex(), output);
  }

  // optional uint32 level = 7;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->level(), output);
  }

  // optional uint32 photoID = 8;
  if (has_photoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->photoid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stCopyMapSortItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string guildName = 3;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->guildname(), target);
  }

  // optional uint32 starNum = 4;
  if (has_starnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->starnum(), target);
  }

  // optional uint32 job = 5;
  if (has_job()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->job(), target);
  }

  // optional uint32 sex = 6;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->sex(), target);
  }

  // optional uint32 level = 7;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->level(), target);
  }

  // optional uint32 photoID = 8;
  if (has_photoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->photoid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stCopyMapSortItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string guildName = 3;
    if (has_guildname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildname());
    }

    // optional uint32 starNum = 4;
    if (has_starnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->starnum());
    }

    // optional uint32 job = 5;
    if (has_job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->job());
    }

    // optional uint32 sex = 6;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sex());
    }

    // optional uint32 level = 7;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 photoID = 8;
    if (has_photoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->photoid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stCopyMapSortItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stCopyMapSortItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stCopyMapSortItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stCopyMapSortItem::MergeFrom(const stCopyMapSortItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_guildname()) {
      set_guildname(from.guildname());
    }
    if (from.has_starnum()) {
      set_starnum(from.starnum());
    }
    if (from.has_job()) {
      set_job(from.job());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_photoid()) {
      set_photoid(from.photoid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stCopyMapSortItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stCopyMapSortItem::CopyFrom(const stCopyMapSortItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stCopyMapSortItem::IsInitialized() const {

  return true;
}

void stCopyMapSortItem::Swap(stCopyMapSortItem* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(name_, other->name_);
    std::swap(guildname_, other->guildname_);
    std::swap(starnum_, other->starnum_);
    std::swap(job_, other->job_);
    std::swap(sex_, other->sex_);
    std::swap(level_, other->level_);
    std::swap(photoid_, other->photoid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stCopyMapSortItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stCopyMapSortItem_descriptor_;
  metadata.reflection = stCopyMapSortItem_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRetCopyMapSortList_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetCopyMapSortList_ProtoModID_descriptor_;
}
bool stRetCopyMapSortList_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetCopyMapSortList_ProtoModID stRetCopyMapSortList::ModID;
const stRetCopyMapSortList_ProtoModID stRetCopyMapSortList::ProtoModID_MIN;
const stRetCopyMapSortList_ProtoModID stRetCopyMapSortList::ProtoModID_MAX;
const int stRetCopyMapSortList::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetCopyMapSortList_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetCopyMapSortList_ProtoFunID_descriptor_;
}
bool stRetCopyMapSortList_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetCopyMapSortList_ProtoFunID stRetCopyMapSortList::FunID;
const stRetCopyMapSortList_ProtoFunID stRetCopyMapSortList::ProtoFunID_MIN;
const stRetCopyMapSortList_ProtoFunID stRetCopyMapSortList::ProtoFunID_MAX;
const int stRetCopyMapSortList::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRetCopyMapSortList::kBeginRankFieldNumber;
const int stRetCopyMapSortList::kMyRankFieldNumber;
const int stRetCopyMapSortList::kSortItemFieldNumber;
#endif  // !_MSC_VER

stRetCopyMapSortList::stRetCopyMapSortList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRetCopyMapSortList::InitAsDefaultInstance() {
}

stRetCopyMapSortList::stRetCopyMapSortList(const stRetCopyMapSortList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRetCopyMapSortList::SharedCtor() {
  _cached_size_ = 0;
  beginrank_ = 0u;
  myrank_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRetCopyMapSortList::~stRetCopyMapSortList() {
  SharedDtor();
}

void stRetCopyMapSortList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRetCopyMapSortList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRetCopyMapSortList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetCopyMapSortList_descriptor_;
}

const stRetCopyMapSortList& stRetCopyMapSortList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stRetCopyMapSortList* stRetCopyMapSortList::default_instance_ = NULL;

stRetCopyMapSortList* stRetCopyMapSortList::New() const {
  return new stRetCopyMapSortList;
}

void stRetCopyMapSortList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    beginrank_ = 0u;
    myrank_ = 0u;
  }
  sortitem_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRetCopyMapSortList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 beginRank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &beginrank_)));
          set_has_beginrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_myRank;
        break;
      }

      // optional uint32 myRank = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_myRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &myrank_)));
          set_has_myrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_sortItem;
        break;
      }

      // repeated .SortProto.stCopyMapSortItem sortItem = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sortItem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sortitem()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_sortItem;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRetCopyMapSortList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 beginRank = 1;
  if (has_beginrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->beginrank(), output);
  }

  // optional uint32 myRank = 2;
  if (has_myrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->myrank(), output);
  }

  // repeated .SortProto.stCopyMapSortItem sortItem = 3;
  for (int i = 0; i < this->sortitem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->sortitem(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRetCopyMapSortList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 beginRank = 1;
  if (has_beginrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->beginrank(), target);
  }

  // optional uint32 myRank = 2;
  if (has_myrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->myrank(), target);
  }

  // repeated .SortProto.stCopyMapSortItem sortItem = 3;
  for (int i = 0; i < this->sortitem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->sortitem(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRetCopyMapSortList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 beginRank = 1;
    if (has_beginrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->beginrank());
    }

    // optional uint32 myRank = 2;
    if (has_myrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->myrank());
    }

  }
  // repeated .SortProto.stCopyMapSortItem sortItem = 3;
  total_size += 1 * this->sortitem_size();
  for (int i = 0; i < this->sortitem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sortitem(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRetCopyMapSortList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRetCopyMapSortList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRetCopyMapSortList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRetCopyMapSortList::MergeFrom(const stRetCopyMapSortList& from) {
  GOOGLE_CHECK_NE(&from, this);
  sortitem_.MergeFrom(from.sortitem_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_beginrank()) {
      set_beginrank(from.beginrank());
    }
    if (from.has_myrank()) {
      set_myrank(from.myrank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRetCopyMapSortList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRetCopyMapSortList::CopyFrom(const stRetCopyMapSortList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRetCopyMapSortList::IsInitialized() const {

  return true;
}

void stRetCopyMapSortList::Swap(stRetCopyMapSortList* other) {
  if (other != this) {
    std::swap(beginrank_, other->beginrank_);
    std::swap(myrank_, other->myrank_);
    sortitem_.Swap(&other->sortitem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRetCopyMapSortList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRetCopyMapSortList_descriptor_;
  metadata.reflection = stRetCopyMapSortList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stSynArenaSortInfo::kCharIDFieldNumber;
const int stSynArenaSortInfo::kNameFieldNumber;
const int stSynArenaSortInfo::kLevelFieldNumber;
const int stSynArenaSortInfo::kJobFieldNumber;
const int stSynArenaSortInfo::kSexFieldNumber;
const int stSynArenaSortInfo::kRankFieldNumber;
const int stSynArenaSortInfo::kPhotoIDFieldNumber;
#endif  // !_MSC_VER

stSynArenaSortInfo::stSynArenaSortInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSynArenaSortInfo::InitAsDefaultInstance() {
}

stSynArenaSortInfo::stSynArenaSortInfo(const stSynArenaSortInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSynArenaSortInfo::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0u;
  job_ = 0u;
  sex_ = 0u;
  rank_ = 0u;
  photoid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSynArenaSortInfo::~stSynArenaSortInfo() {
  SharedDtor();
}

void stSynArenaSortInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void stSynArenaSortInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSynArenaSortInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynArenaSortInfo_descriptor_;
}

const stSynArenaSortInfo& stSynArenaSortInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stSynArenaSortInfo* stSynArenaSortInfo::default_instance_ = NULL;

stSynArenaSortInfo* stSynArenaSortInfo::New() const {
  return new stSynArenaSortInfo;
}

void stSynArenaSortInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    level_ = 0u;
    job_ = 0u;
    sex_ = 0u;
    rank_ = 0u;
    photoid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSynArenaSortInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // optional uint32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_job;
        break;
      }

      // optional uint32 job = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &job_)));
          set_has_job();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_sex;
        break;
      }

      // optional uint32 sex = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_rank;
        break;
      }

      // optional uint32 rank = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_photoID;
        break;
      }

      // optional uint32 photoID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_photoID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &photoid_)));
          set_has_photoid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSynArenaSortInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional uint32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->level(), output);
  }

  // optional uint32 job = 4;
  if (has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->job(), output);
  }

  // optional uint32 sex = 5;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->sex(), output);
  }

  // optional uint32 rank = 6;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->rank(), output);
  }

  // optional uint32 photoID = 7;
  if (has_photoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->photoid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSynArenaSortInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional uint32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->level(), target);
  }

  // optional uint32 job = 4;
  if (has_job()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->job(), target);
  }

  // optional uint32 sex = 5;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->sex(), target);
  }

  // optional uint32 rank = 6;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->rank(), target);
  }

  // optional uint32 photoID = 7;
  if (has_photoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->photoid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSynArenaSortInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 job = 4;
    if (has_job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->job());
    }

    // optional uint32 sex = 5;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sex());
    }

    // optional uint32 rank = 6;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

    // optional uint32 photoID = 7;
    if (has_photoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->photoid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSynArenaSortInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSynArenaSortInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSynArenaSortInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSynArenaSortInfo::MergeFrom(const stSynArenaSortInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_job()) {
      set_job(from.job());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_photoid()) {
      set_photoid(from.photoid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSynArenaSortInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSynArenaSortInfo::CopyFrom(const stSynArenaSortInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSynArenaSortInfo::IsInitialized() const {

  return true;
}

void stSynArenaSortInfo::Swap(stSynArenaSortInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(name_, other->name_);
    std::swap(level_, other->level_);
    std::swap(job_, other->job_);
    std::swap(sex_, other->sex_);
    std::swap(rank_, other->rank_);
    std::swap(photoid_, other->photoid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSynArenaSortInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSynArenaSortInfo_descriptor_;
  metadata.reflection = stSynArenaSortInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqArenaPKList_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqArenaPKList_ProtoModID_descriptor_;
}
bool stReqArenaPKList_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqArenaPKList_ProtoModID stReqArenaPKList::ModID;
const stReqArenaPKList_ProtoModID stReqArenaPKList::ProtoModID_MIN;
const stReqArenaPKList_ProtoModID stReqArenaPKList::ProtoModID_MAX;
const int stReqArenaPKList::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqArenaPKList_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqArenaPKList_ProtoFunID_descriptor_;
}
bool stReqArenaPKList_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqArenaPKList_ProtoFunID stReqArenaPKList::FunID;
const stReqArenaPKList_ProtoFunID stReqArenaPKList::ProtoFunID_MIN;
const stReqArenaPKList_ProtoFunID stReqArenaPKList::ProtoFunID_MAX;
const int stReqArenaPKList::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqArenaPKList::kCharIDFieldNumber;
#endif  // !_MSC_VER

stReqArenaPKList::stReqArenaPKList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqArenaPKList::InitAsDefaultInstance() {
}

stReqArenaPKList::stReqArenaPKList(const stReqArenaPKList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqArenaPKList::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqArenaPKList::~stReqArenaPKList() {
  SharedDtor();
}

void stReqArenaPKList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqArenaPKList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqArenaPKList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqArenaPKList_descriptor_;
}

const stReqArenaPKList& stReqArenaPKList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stReqArenaPKList* stReqArenaPKList::default_instance_ = NULL;

stReqArenaPKList* stReqArenaPKList::New() const {
  return new stReqArenaPKList;
}

void stReqArenaPKList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqArenaPKList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqArenaPKList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqArenaPKList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqArenaPKList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqArenaPKList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqArenaPKList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqArenaPKList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqArenaPKList::MergeFrom(const stReqArenaPKList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqArenaPKList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqArenaPKList::CopyFrom(const stReqArenaPKList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqArenaPKList::IsInitialized() const {

  return true;
}

void stReqArenaPKList::Swap(stReqArenaPKList* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqArenaPKList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqArenaPKList_descriptor_;
  metadata.reflection = stReqArenaPKList_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRetArenaPKList_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetArenaPKList_ProtoModID_descriptor_;
}
bool stRetArenaPKList_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetArenaPKList_ProtoModID stRetArenaPKList::ModID;
const stRetArenaPKList_ProtoModID stRetArenaPKList::ProtoModID_MIN;
const stRetArenaPKList_ProtoModID stRetArenaPKList::ProtoModID_MAX;
const int stRetArenaPKList::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetArenaPKList_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetArenaPKList_ProtoFunID_descriptor_;
}
bool stRetArenaPKList_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetArenaPKList_ProtoFunID stRetArenaPKList::FunID;
const stRetArenaPKList_ProtoFunID stRetArenaPKList::ProtoFunID_MIN;
const stRetArenaPKList_ProtoFunID stRetArenaPKList::ProtoFunID_MAX;
const int stRetArenaPKList::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRetArenaPKList::kDataFieldNumber;
const int stRetArenaPKList::kMyRankFieldNumber;
const int stRetArenaPKList::kTopTenFieldNumber;
const int stRetArenaPKList::kCdFieldNumber;
const int stRetArenaPKList::kChallengeNumFieldNumber;
const int stRetArenaPKList::kResetNumFieldNumber;
const int stRetArenaPKList::kTotalUserNumFieldNumber;
#endif  // !_MSC_VER

stRetArenaPKList::stRetArenaPKList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRetArenaPKList::InitAsDefaultInstance() {
}

stRetArenaPKList::stRetArenaPKList(const stRetArenaPKList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRetArenaPKList::SharedCtor() {
  _cached_size_ = 0;
  myrank_ = 0u;
  cd_ = 0u;
  challengenum_ = 0u;
  resetnum_ = 0u;
  totalusernum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRetArenaPKList::~stRetArenaPKList() {
  SharedDtor();
}

void stRetArenaPKList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRetArenaPKList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRetArenaPKList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetArenaPKList_descriptor_;
}

const stRetArenaPKList& stRetArenaPKList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stRetArenaPKList* stRetArenaPKList::default_instance_ = NULL;

stRetArenaPKList* stRetArenaPKList::New() const {
  return new stRetArenaPKList;
}

void stRetArenaPKList::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    myrank_ = 0u;
    cd_ = 0u;
    challengenum_ = 0u;
    resetnum_ = 0u;
    totalusernum_ = 0u;
  }
  data_.Clear();
  topten_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRetArenaPKList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SortProto.stSynArenaSortInfo data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_data;
        if (input->ExpectTag(16)) goto parse_myRank;
        break;
      }

      // optional uint32 myRank = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_myRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &myrank_)));
          set_has_myrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_topTen;
        break;
      }

      // repeated .SortProto.stSynArenaSortInfo topTen = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_topTen:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_topten()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_topTen;
        if (input->ExpectTag(32)) goto parse_cd;
        break;
      }

      // optional uint32 cd = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cd_)));
          set_has_cd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_challengeNum;
        break;
      }

      // optional uint32 challengeNum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_challengeNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &challengenum_)));
          set_has_challengenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_resetNum;
        break;
      }

      // optional uint32 resetNum = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_resetNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resetnum_)));
          set_has_resetnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_totalUserNum;
        break;
      }

      // optional uint32 totalUserNum = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalUserNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totalusernum_)));
          set_has_totalusernum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRetArenaPKList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .SortProto.stSynArenaSortInfo data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }

  // optional uint32 myRank = 2;
  if (has_myrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->myrank(), output);
  }

  // repeated .SortProto.stSynArenaSortInfo topTen = 3;
  for (int i = 0; i < this->topten_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->topten(i), output);
  }

  // optional uint32 cd = 4;
  if (has_cd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->cd(), output);
  }

  // optional uint32 challengeNum = 5;
  if (has_challengenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->challengenum(), output);
  }

  // optional uint32 resetNum = 6;
  if (has_resetnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->resetnum(), output);
  }

  // optional uint32 totalUserNum = 7;
  if (has_totalusernum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->totalusernum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRetArenaPKList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .SortProto.stSynArenaSortInfo data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(i), target);
  }

  // optional uint32 myRank = 2;
  if (has_myrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->myrank(), target);
  }

  // repeated .SortProto.stSynArenaSortInfo topTen = 3;
  for (int i = 0; i < this->topten_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->topten(i), target);
  }

  // optional uint32 cd = 4;
  if (has_cd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->cd(), target);
  }

  // optional uint32 challengeNum = 5;
  if (has_challengenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->challengenum(), target);
  }

  // optional uint32 resetNum = 6;
  if (has_resetnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->resetnum(), target);
  }

  // optional uint32 totalUserNum = 7;
  if (has_totalusernum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->totalusernum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRetArenaPKList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 myRank = 2;
    if (has_myrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->myrank());
    }

    // optional uint32 cd = 4;
    if (has_cd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cd());
    }

    // optional uint32 challengeNum = 5;
    if (has_challengenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->challengenum());
    }

    // optional uint32 resetNum = 6;
    if (has_resetnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->resetnum());
    }

    // optional uint32 totalUserNum = 7;
    if (has_totalusernum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->totalusernum());
    }

  }
  // repeated .SortProto.stSynArenaSortInfo data = 1;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  // repeated .SortProto.stSynArenaSortInfo topTen = 3;
  total_size += 1 * this->topten_size();
  for (int i = 0; i < this->topten_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->topten(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRetArenaPKList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRetArenaPKList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRetArenaPKList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRetArenaPKList::MergeFrom(const stRetArenaPKList& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  topten_.MergeFrom(from.topten_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_myrank()) {
      set_myrank(from.myrank());
    }
    if (from.has_cd()) {
      set_cd(from.cd());
    }
    if (from.has_challengenum()) {
      set_challengenum(from.challengenum());
    }
    if (from.has_resetnum()) {
      set_resetnum(from.resetnum());
    }
    if (from.has_totalusernum()) {
      set_totalusernum(from.totalusernum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRetArenaPKList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRetArenaPKList::CopyFrom(const stRetArenaPKList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRetArenaPKList::IsInitialized() const {

  return true;
}

void stRetArenaPKList::Swap(stRetArenaPKList* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(myrank_, other->myrank_);
    topten_.Swap(&other->topten_);
    std::swap(cd_, other->cd_);
    std::swap(challengenum_, other->challengenum_);
    std::swap(resetnum_, other->resetnum_);
    std::swap(totalusernum_, other->totalusernum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRetArenaPKList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRetArenaPKList_descriptor_;
  metadata.reflection = stRetArenaPKList_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqArenaSortList_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqArenaSortList_ProtoModID_descriptor_;
}
bool stReqArenaSortList_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqArenaSortList_ProtoModID stReqArenaSortList::ModID;
const stReqArenaSortList_ProtoModID stReqArenaSortList::ProtoModID_MIN;
const stReqArenaSortList_ProtoModID stReqArenaSortList::ProtoModID_MAX;
const int stReqArenaSortList::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqArenaSortList_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqArenaSortList_ProtoFunID_descriptor_;
}
bool stReqArenaSortList_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 9:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqArenaSortList_ProtoFunID stReqArenaSortList::FunID;
const stReqArenaSortList_ProtoFunID stReqArenaSortList::ProtoFunID_MIN;
const stReqArenaSortList_ProtoFunID stReqArenaSortList::ProtoFunID_MAX;
const int stReqArenaSortList::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqArenaSortList::kBeginRankFieldNumber;
#endif  // !_MSC_VER

stReqArenaSortList::stReqArenaSortList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqArenaSortList::InitAsDefaultInstance() {
}

stReqArenaSortList::stReqArenaSortList(const stReqArenaSortList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqArenaSortList::SharedCtor() {
  _cached_size_ = 0;
  beginrank_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqArenaSortList::~stReqArenaSortList() {
  SharedDtor();
}

void stReqArenaSortList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqArenaSortList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqArenaSortList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqArenaSortList_descriptor_;
}

const stReqArenaSortList& stReqArenaSortList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stReqArenaSortList* stReqArenaSortList::default_instance_ = NULL;

stReqArenaSortList* stReqArenaSortList::New() const {
  return new stReqArenaSortList;
}

void stReqArenaSortList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    beginrank_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqArenaSortList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 beginRank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &beginrank_)));
          set_has_beginrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqArenaSortList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 beginRank = 1;
  if (has_beginrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->beginrank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqArenaSortList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 beginRank = 1;
  if (has_beginrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->beginrank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqArenaSortList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 beginRank = 1;
    if (has_beginrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->beginrank());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqArenaSortList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqArenaSortList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqArenaSortList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqArenaSortList::MergeFrom(const stReqArenaSortList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_beginrank()) {
      set_beginrank(from.beginrank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqArenaSortList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqArenaSortList::CopyFrom(const stReqArenaSortList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqArenaSortList::IsInitialized() const {

  return true;
}

void stReqArenaSortList::Swap(stReqArenaSortList* other) {
  if (other != this) {
    std::swap(beginrank_, other->beginrank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqArenaSortList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqArenaSortList_descriptor_;
  metadata.reflection = stReqArenaSortList_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRetArenaSortList_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetArenaSortList_ProtoModID_descriptor_;
}
bool stRetArenaSortList_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetArenaSortList_ProtoModID stRetArenaSortList::ModID;
const stRetArenaSortList_ProtoModID stRetArenaSortList::ProtoModID_MIN;
const stRetArenaSortList_ProtoModID stRetArenaSortList::ProtoModID_MAX;
const int stRetArenaSortList::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetArenaSortList_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetArenaSortList_ProtoFunID_descriptor_;
}
bool stRetArenaSortList_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 10:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetArenaSortList_ProtoFunID stRetArenaSortList::FunID;
const stRetArenaSortList_ProtoFunID stRetArenaSortList::ProtoFunID_MIN;
const stRetArenaSortList_ProtoFunID stRetArenaSortList::ProtoFunID_MAX;
const int stRetArenaSortList::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRetArenaSortList::kSortInfoFieldNumber;
const int stRetArenaSortList::kMyRankFieldNumber;
#endif  // !_MSC_VER

stRetArenaSortList::stRetArenaSortList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRetArenaSortList::InitAsDefaultInstance() {
}

stRetArenaSortList::stRetArenaSortList(const stRetArenaSortList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRetArenaSortList::SharedCtor() {
  _cached_size_ = 0;
  myrank_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRetArenaSortList::~stRetArenaSortList() {
  SharedDtor();
}

void stRetArenaSortList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRetArenaSortList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRetArenaSortList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetArenaSortList_descriptor_;
}

const stRetArenaSortList& stRetArenaSortList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stRetArenaSortList* stRetArenaSortList::default_instance_ = NULL;

stRetArenaSortList* stRetArenaSortList::New() const {
  return new stRetArenaSortList;
}

void stRetArenaSortList::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    myrank_ = 0u;
  }
  sortinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRetArenaSortList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SortProto.stSynArenaSortInfo sortInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sortInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sortinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_sortInfo;
        if (input->ExpectTag(16)) goto parse_myRank;
        break;
      }

      // optional uint32 myRank = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_myRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &myrank_)));
          set_has_myrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRetArenaSortList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .SortProto.stSynArenaSortInfo sortInfo = 1;
  for (int i = 0; i < this->sortinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sortinfo(i), output);
  }

  // optional uint32 myRank = 2;
  if (has_myrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->myrank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRetArenaSortList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .SortProto.stSynArenaSortInfo sortInfo = 1;
  for (int i = 0; i < this->sortinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->sortinfo(i), target);
  }

  // optional uint32 myRank = 2;
  if (has_myrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->myrank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRetArenaSortList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 myRank = 2;
    if (has_myrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->myrank());
    }

  }
  // repeated .SortProto.stSynArenaSortInfo sortInfo = 1;
  total_size += 1 * this->sortinfo_size();
  for (int i = 0; i < this->sortinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sortinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRetArenaSortList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRetArenaSortList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRetArenaSortList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRetArenaSortList::MergeFrom(const stRetArenaSortList& from) {
  GOOGLE_CHECK_NE(&from, this);
  sortinfo_.MergeFrom(from.sortinfo_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_myrank()) {
      set_myrank(from.myrank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRetArenaSortList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRetArenaSortList::CopyFrom(const stRetArenaSortList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRetArenaSortList::IsInitialized() const {

  return true;
}

void stRetArenaSortList::Swap(stRetArenaSortList* other) {
  if (other != this) {
    sortinfo_.Swap(&other->sortinfo_);
    std::swap(myrank_, other->myrank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRetArenaSortList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRetArenaSortList_descriptor_;
  metadata.reflection = stRetArenaSortList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stSynOne2OnePVPInfo::kCharIDFieldNumber;
const int stSynOne2OnePVPInfo::kNameFieldNumber;
const int stSynOne2OnePVPInfo::kJobFieldNumber;
const int stSynOne2OnePVPInfo::kSexFieldNumber;
const int stSynOne2OnePVPInfo::kScoreFieldNumber;
const int stSynOne2OnePVPInfo::kRankFieldNumber;
const int stSynOne2OnePVPInfo::kLevelFieldNumber;
const int stSynOne2OnePVPInfo::kPhotoIDFieldNumber;
#endif  // !_MSC_VER

stSynOne2OnePVPInfo::stSynOne2OnePVPInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSynOne2OnePVPInfo::InitAsDefaultInstance() {
}

stSynOne2OnePVPInfo::stSynOne2OnePVPInfo(const stSynOne2OnePVPInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSynOne2OnePVPInfo::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  job_ = 0u;
  sex_ = 0u;
  score_ = 0u;
  rank_ = 0u;
  level_ = 0u;
  photoid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSynOne2OnePVPInfo::~stSynOne2OnePVPInfo() {
  SharedDtor();
}

void stSynOne2OnePVPInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void stSynOne2OnePVPInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSynOne2OnePVPInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynOne2OnePVPInfo_descriptor_;
}

const stSynOne2OnePVPInfo& stSynOne2OnePVPInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stSynOne2OnePVPInfo* stSynOne2OnePVPInfo::default_instance_ = NULL;

stSynOne2OnePVPInfo* stSynOne2OnePVPInfo::New() const {
  return new stSynOne2OnePVPInfo;
}

void stSynOne2OnePVPInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    job_ = 0u;
    sex_ = 0u;
    score_ = 0u;
    rank_ = 0u;
    level_ = 0u;
    photoid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSynOne2OnePVPInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_job;
        break;
      }

      // optional uint32 job = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &job_)));
          set_has_job();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_sex;
        break;
      }

      // optional uint32 sex = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_score;
        break;
      }

      // optional uint32 score = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_rank;
        break;
      }

      // optional uint32 rank = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_level;
        break;
      }

      // optional uint32 level = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_photoID;
        break;
      }

      // optional uint32 photoID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_photoID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &photoid_)));
          set_has_photoid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSynOne2OnePVPInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional uint32 job = 3;
  if (has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->job(), output);
  }

  // optional uint32 sex = 4;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sex(), output);
  }

  // optional uint32 score = 5;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->score(), output);
  }

  // optional uint32 rank = 6;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->rank(), output);
  }

  // optional uint32 level = 7;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->level(), output);
  }

  // optional uint32 photoID = 8;
  if (has_photoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->photoid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSynOne2OnePVPInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional uint32 job = 3;
  if (has_job()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->job(), target);
  }

  // optional uint32 sex = 4;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sex(), target);
  }

  // optional uint32 score = 5;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->score(), target);
  }

  // optional uint32 rank = 6;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->rank(), target);
  }

  // optional uint32 level = 7;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->level(), target);
  }

  // optional uint32 photoID = 8;
  if (has_photoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->photoid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSynOne2OnePVPInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 job = 3;
    if (has_job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->job());
    }

    // optional uint32 sex = 4;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sex());
    }

    // optional uint32 score = 5;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

    // optional uint32 rank = 6;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

    // optional uint32 level = 7;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 photoID = 8;
    if (has_photoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->photoid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSynOne2OnePVPInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSynOne2OnePVPInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSynOne2OnePVPInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSynOne2OnePVPInfo::MergeFrom(const stSynOne2OnePVPInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_job()) {
      set_job(from.job());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_photoid()) {
      set_photoid(from.photoid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSynOne2OnePVPInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSynOne2OnePVPInfo::CopyFrom(const stSynOne2OnePVPInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSynOne2OnePVPInfo::IsInitialized() const {

  return true;
}

void stSynOne2OnePVPInfo::Swap(stSynOne2OnePVPInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(name_, other->name_);
    std::swap(job_, other->job_);
    std::swap(sex_, other->sex_);
    std::swap(score_, other->score_);
    std::swap(rank_, other->rank_);
    std::swap(level_, other->level_);
    std::swap(photoid_, other->photoid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSynOne2OnePVPInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSynOne2OnePVPInfo_descriptor_;
  metadata.reflection = stSynOne2OnePVPInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqOne2OnePVPSortList_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqOne2OnePVPSortList_ProtoModID_descriptor_;
}
bool stReqOne2OnePVPSortList_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqOne2OnePVPSortList_ProtoModID stReqOne2OnePVPSortList::ModID;
const stReqOne2OnePVPSortList_ProtoModID stReqOne2OnePVPSortList::ProtoModID_MIN;
const stReqOne2OnePVPSortList_ProtoModID stReqOne2OnePVPSortList::ProtoModID_MAX;
const int stReqOne2OnePVPSortList::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqOne2OnePVPSortList_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqOne2OnePVPSortList_ProtoFunID_descriptor_;
}
bool stReqOne2OnePVPSortList_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 11:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqOne2OnePVPSortList_ProtoFunID stReqOne2OnePVPSortList::FunID;
const stReqOne2OnePVPSortList_ProtoFunID stReqOne2OnePVPSortList::ProtoFunID_MIN;
const stReqOne2OnePVPSortList_ProtoFunID stReqOne2OnePVPSortList::ProtoFunID_MAX;
const int stReqOne2OnePVPSortList::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqOne2OnePVPSortList::kBeginRankFieldNumber;
const int stReqOne2OnePVPSortList::kETypeFieldNumber;
#endif  // !_MSC_VER

stReqOne2OnePVPSortList::stReqOne2OnePVPSortList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqOne2OnePVPSortList::InitAsDefaultInstance() {
}

stReqOne2OnePVPSortList::stReqOne2OnePVPSortList(const stReqOne2OnePVPSortList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqOne2OnePVPSortList::SharedCtor() {
  _cached_size_ = 0;
  beginrank_ = 0u;
  etype_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqOne2OnePVPSortList::~stReqOne2OnePVPSortList() {
  SharedDtor();
}

void stReqOne2OnePVPSortList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqOne2OnePVPSortList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqOne2OnePVPSortList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqOne2OnePVPSortList_descriptor_;
}

const stReqOne2OnePVPSortList& stReqOne2OnePVPSortList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stReqOne2OnePVPSortList* stReqOne2OnePVPSortList::default_instance_ = NULL;

stReqOne2OnePVPSortList* stReqOne2OnePVPSortList::New() const {
  return new stReqOne2OnePVPSortList;
}

void stReqOne2OnePVPSortList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    beginrank_ = 0u;
    etype_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqOne2OnePVPSortList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 beginRank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &beginrank_)));
          set_has_beginrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_eType;
        break;
      }

      // optional .SortProto.eOne2OneSortListType eType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SortProto::eOne2OneSortListType_IsValid(value)) {
            set_etype(static_cast< ::SortProto::eOne2OneSortListType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqOne2OnePVPSortList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 beginRank = 1;
  if (has_beginrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->beginrank(), output);
  }

  // optional .SortProto.eOne2OneSortListType eType = 2;
  if (has_etype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->etype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqOne2OnePVPSortList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 beginRank = 1;
  if (has_beginrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->beginrank(), target);
  }

  // optional .SortProto.eOne2OneSortListType eType = 2;
  if (has_etype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->etype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqOne2OnePVPSortList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 beginRank = 1;
    if (has_beginrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->beginrank());
    }

    // optional .SortProto.eOne2OneSortListType eType = 2;
    if (has_etype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->etype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqOne2OnePVPSortList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqOne2OnePVPSortList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqOne2OnePVPSortList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqOne2OnePVPSortList::MergeFrom(const stReqOne2OnePVPSortList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_beginrank()) {
      set_beginrank(from.beginrank());
    }
    if (from.has_etype()) {
      set_etype(from.etype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqOne2OnePVPSortList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqOne2OnePVPSortList::CopyFrom(const stReqOne2OnePVPSortList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqOne2OnePVPSortList::IsInitialized() const {

  return true;
}

void stReqOne2OnePVPSortList::Swap(stReqOne2OnePVPSortList* other) {
  if (other != this) {
    std::swap(beginrank_, other->beginrank_);
    std::swap(etype_, other->etype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqOne2OnePVPSortList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqOne2OnePVPSortList_descriptor_;
  metadata.reflection = stReqOne2OnePVPSortList_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRetOne2OnePVPSortList_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetOne2OnePVPSortList_ProtoModID_descriptor_;
}
bool stRetOne2OnePVPSortList_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetOne2OnePVPSortList_ProtoModID stRetOne2OnePVPSortList::ModID;
const stRetOne2OnePVPSortList_ProtoModID stRetOne2OnePVPSortList::ProtoModID_MIN;
const stRetOne2OnePVPSortList_ProtoModID stRetOne2OnePVPSortList::ProtoModID_MAX;
const int stRetOne2OnePVPSortList::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetOne2OnePVPSortList_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetOne2OnePVPSortList_ProtoFunID_descriptor_;
}
bool stRetOne2OnePVPSortList_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 12:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetOne2OnePVPSortList_ProtoFunID stRetOne2OnePVPSortList::FunID;
const stRetOne2OnePVPSortList_ProtoFunID stRetOne2OnePVPSortList::ProtoFunID_MIN;
const stRetOne2OnePVPSortList_ProtoFunID stRetOne2OnePVPSortList::ProtoFunID_MAX;
const int stRetOne2OnePVPSortList::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRetOne2OnePVPSortList::kSortListFieldNumber;
const int stRetOne2OnePVPSortList::kMyRankFieldNumber;
const int stRetOne2OnePVPSortList::kLastweekSortListFieldNumber;
const int stRetOne2OnePVPSortList::kETypeFieldNumber;
const int stRetOne2OnePVPSortList::kScoreFieldNumber;
#endif  // !_MSC_VER

stRetOne2OnePVPSortList::stRetOne2OnePVPSortList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRetOne2OnePVPSortList::InitAsDefaultInstance() {
}

stRetOne2OnePVPSortList::stRetOne2OnePVPSortList(const stRetOne2OnePVPSortList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRetOne2OnePVPSortList::SharedCtor() {
  _cached_size_ = 0;
  myrank_ = 0u;
  etype_ = 1;
  score_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRetOne2OnePVPSortList::~stRetOne2OnePVPSortList() {
  SharedDtor();
}

void stRetOne2OnePVPSortList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRetOne2OnePVPSortList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRetOne2OnePVPSortList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetOne2OnePVPSortList_descriptor_;
}

const stRetOne2OnePVPSortList& stRetOne2OnePVPSortList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stRetOne2OnePVPSortList* stRetOne2OnePVPSortList::default_instance_ = NULL;

stRetOne2OnePVPSortList* stRetOne2OnePVPSortList::New() const {
  return new stRetOne2OnePVPSortList;
}

void stRetOne2OnePVPSortList::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    myrank_ = 0u;
    etype_ = 1;
    score_ = 0u;
  }
  sortlist_.Clear();
  lastweeksortlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRetOne2OnePVPSortList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SortProto.stSynOne2OnePVPInfo sortList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sortList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sortlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_sortList;
        if (input->ExpectTag(16)) goto parse_myRank;
        break;
      }

      // optional uint32 myRank = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_myRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &myrank_)));
          set_has_myrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_lastweekSortList;
        break;
      }

      // repeated .SortProto.stSynOne2OnePVPInfo lastweekSortList = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lastweekSortList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lastweeksortlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_lastweekSortList;
        if (input->ExpectTag(32)) goto parse_eType;
        break;
      }

      // optional .SortProto.eOne2OneSortListType eType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SortProto::eOne2OneSortListType_IsValid(value)) {
            set_etype(static_cast< ::SortProto::eOne2OneSortListType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_score;
        break;
      }

      // optional uint32 score = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRetOne2OnePVPSortList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .SortProto.stSynOne2OnePVPInfo sortList = 1;
  for (int i = 0; i < this->sortlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sortlist(i), output);
  }

  // optional uint32 myRank = 2;
  if (has_myrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->myrank(), output);
  }

  // repeated .SortProto.stSynOne2OnePVPInfo lastweekSortList = 3;
  for (int i = 0; i < this->lastweeksortlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->lastweeksortlist(i), output);
  }

  // optional .SortProto.eOne2OneSortListType eType = 4;
  if (has_etype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->etype(), output);
  }

  // optional uint32 score = 5;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRetOne2OnePVPSortList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .SortProto.stSynOne2OnePVPInfo sortList = 1;
  for (int i = 0; i < this->sortlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->sortlist(i), target);
  }

  // optional uint32 myRank = 2;
  if (has_myrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->myrank(), target);
  }

  // repeated .SortProto.stSynOne2OnePVPInfo lastweekSortList = 3;
  for (int i = 0; i < this->lastweeksortlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->lastweeksortlist(i), target);
  }

  // optional .SortProto.eOne2OneSortListType eType = 4;
  if (has_etype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->etype(), target);
  }

  // optional uint32 score = 5;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRetOne2OnePVPSortList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 myRank = 2;
    if (has_myrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->myrank());
    }

    // optional .SortProto.eOne2OneSortListType eType = 4;
    if (has_etype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->etype());
    }

    // optional uint32 score = 5;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

  }
  // repeated .SortProto.stSynOne2OnePVPInfo sortList = 1;
  total_size += 1 * this->sortlist_size();
  for (int i = 0; i < this->sortlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sortlist(i));
  }

  // repeated .SortProto.stSynOne2OnePVPInfo lastweekSortList = 3;
  total_size += 1 * this->lastweeksortlist_size();
  for (int i = 0; i < this->lastweeksortlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lastweeksortlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRetOne2OnePVPSortList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRetOne2OnePVPSortList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRetOne2OnePVPSortList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRetOne2OnePVPSortList::MergeFrom(const stRetOne2OnePVPSortList& from) {
  GOOGLE_CHECK_NE(&from, this);
  sortlist_.MergeFrom(from.sortlist_);
  lastweeksortlist_.MergeFrom(from.lastweeksortlist_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_myrank()) {
      set_myrank(from.myrank());
    }
    if (from.has_etype()) {
      set_etype(from.etype());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRetOne2OnePVPSortList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRetOne2OnePVPSortList::CopyFrom(const stRetOne2OnePVPSortList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRetOne2OnePVPSortList::IsInitialized() const {

  return true;
}

void stRetOne2OnePVPSortList::Swap(stRetOne2OnePVPSortList* other) {
  if (other != this) {
    sortlist_.Swap(&other->sortlist_);
    std::swap(myrank_, other->myrank_);
    lastweeksortlist_.Swap(&other->lastweeksortlist_);
    std::swap(etype_, other->etype_);
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRetOne2OnePVPSortList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRetOne2OnePVPSortList_descriptor_;
  metadata.reflection = stRetOne2OnePVPSortList_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stChallengeArenaUser_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stChallengeArenaUser_ProtoModID_descriptor_;
}
bool stChallengeArenaUser_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stChallengeArenaUser_ProtoModID stChallengeArenaUser::ModID;
const stChallengeArenaUser_ProtoModID stChallengeArenaUser::ProtoModID_MIN;
const stChallengeArenaUser_ProtoModID stChallengeArenaUser::ProtoModID_MAX;
const int stChallengeArenaUser::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stChallengeArenaUser_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stChallengeArenaUser_ProtoFunID_descriptor_;
}
bool stChallengeArenaUser_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 13:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stChallengeArenaUser_ProtoFunID stChallengeArenaUser::FunID;
const stChallengeArenaUser_ProtoFunID stChallengeArenaUser::ProtoFunID_MIN;
const stChallengeArenaUser_ProtoFunID stChallengeArenaUser::ProtoFunID_MAX;
const int stChallengeArenaUser::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stChallengeArenaUser::kCharIDFieldNumber;
#endif  // !_MSC_VER

stChallengeArenaUser::stChallengeArenaUser()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stChallengeArenaUser::InitAsDefaultInstance() {
}

stChallengeArenaUser::stChallengeArenaUser(const stChallengeArenaUser& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stChallengeArenaUser::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stChallengeArenaUser::~stChallengeArenaUser() {
  SharedDtor();
}

void stChallengeArenaUser::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stChallengeArenaUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stChallengeArenaUser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stChallengeArenaUser_descriptor_;
}

const stChallengeArenaUser& stChallengeArenaUser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stChallengeArenaUser* stChallengeArenaUser::default_instance_ = NULL;

stChallengeArenaUser* stChallengeArenaUser::New() const {
  return new stChallengeArenaUser;
}

void stChallengeArenaUser::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stChallengeArenaUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stChallengeArenaUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stChallengeArenaUser::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stChallengeArenaUser::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stChallengeArenaUser::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stChallengeArenaUser* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stChallengeArenaUser*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stChallengeArenaUser::MergeFrom(const stChallengeArenaUser& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stChallengeArenaUser::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stChallengeArenaUser::CopyFrom(const stChallengeArenaUser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stChallengeArenaUser::IsInitialized() const {

  return true;
}

void stChallengeArenaUser::Swap(stChallengeArenaUser* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stChallengeArenaUser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stChallengeArenaUser_descriptor_;
  metadata.reflection = stChallengeArenaUser_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stChallengeArenaUserResult_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stChallengeArenaUserResult_eResult_descriptor_;
}
bool stChallengeArenaUserResult_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stChallengeArenaUserResult_eResult stChallengeArenaUserResult::eSuccess;
const stChallengeArenaUserResult_eResult stChallengeArenaUserResult::eLilian_Not_Enough;
const stChallengeArenaUserResult_eResult stChallengeArenaUserResult::eInner_Error;
const stChallengeArenaUserResult_eResult stChallengeArenaUserResult::eLevel_Limit;
const stChallengeArenaUserResult_eResult stChallengeArenaUserResult::eBagFull;
const stChallengeArenaUserResult_eResult stChallengeArenaUserResult::eCoolDown;
const stChallengeArenaUserResult_eResult stChallengeArenaUserResult::eTimeUseOut;
const stChallengeArenaUserResult_eResult stChallengeArenaUserResult::eEquip;
const stChallengeArenaUserResult_eResult stChallengeArenaUserResult::eResult_MIN;
const stChallengeArenaUserResult_eResult stChallengeArenaUserResult::eResult_MAX;
const int stChallengeArenaUserResult::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stChallengeArenaUserResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stChallengeArenaUserResult_ProtoModID_descriptor_;
}
bool stChallengeArenaUserResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stChallengeArenaUserResult_ProtoModID stChallengeArenaUserResult::ModID;
const stChallengeArenaUserResult_ProtoModID stChallengeArenaUserResult::ProtoModID_MIN;
const stChallengeArenaUserResult_ProtoModID stChallengeArenaUserResult::ProtoModID_MAX;
const int stChallengeArenaUserResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stChallengeArenaUserResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stChallengeArenaUserResult_ProtoFunID_descriptor_;
}
bool stChallengeArenaUserResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 14:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stChallengeArenaUserResult_ProtoFunID stChallengeArenaUserResult::FunID;
const stChallengeArenaUserResult_ProtoFunID stChallengeArenaUserResult::ProtoFunID_MIN;
const stChallengeArenaUserResult_ProtoFunID stChallengeArenaUserResult::ProtoFunID_MAX;
const int stChallengeArenaUserResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stChallengeArenaUserResult::kResultFieldNumber;
#endif  // !_MSC_VER

stChallengeArenaUserResult::stChallengeArenaUserResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stChallengeArenaUserResult::InitAsDefaultInstance() {
}

stChallengeArenaUserResult::stChallengeArenaUserResult(const stChallengeArenaUserResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stChallengeArenaUserResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stChallengeArenaUserResult::~stChallengeArenaUserResult() {
  SharedDtor();
}

void stChallengeArenaUserResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stChallengeArenaUserResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stChallengeArenaUserResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stChallengeArenaUserResult_descriptor_;
}

const stChallengeArenaUserResult& stChallengeArenaUserResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stChallengeArenaUserResult* stChallengeArenaUserResult::default_instance_ = NULL;

stChallengeArenaUserResult* stChallengeArenaUserResult::New() const {
  return new stChallengeArenaUserResult;
}

void stChallengeArenaUserResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stChallengeArenaUserResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SortProto.stChallengeArenaUserResult.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SortProto::stChallengeArenaUserResult_eResult_IsValid(value)) {
            set_result(static_cast< ::SortProto::stChallengeArenaUserResult_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stChallengeArenaUserResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SortProto.stChallengeArenaUserResult.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stChallengeArenaUserResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SortProto.stChallengeArenaUserResult.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stChallengeArenaUserResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SortProto.stChallengeArenaUserResult.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stChallengeArenaUserResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stChallengeArenaUserResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stChallengeArenaUserResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stChallengeArenaUserResult::MergeFrom(const stChallengeArenaUserResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stChallengeArenaUserResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stChallengeArenaUserResult::CopyFrom(const stChallengeArenaUserResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stChallengeArenaUserResult::IsInitialized() const {

  return true;
}

void stChallengeArenaUserResult::Swap(stChallengeArenaUserResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stChallengeArenaUserResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stChallengeArenaUserResult_descriptor_;
  metadata.reflection = stChallengeArenaUserResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stChallegeLeitaiUser_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stChallegeLeitaiUser_ProtoModID_descriptor_;
}
bool stChallegeLeitaiUser_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stChallegeLeitaiUser_ProtoModID stChallegeLeitaiUser::ModID;
const stChallegeLeitaiUser_ProtoModID stChallegeLeitaiUser::ProtoModID_MIN;
const stChallegeLeitaiUser_ProtoModID stChallegeLeitaiUser::ProtoModID_MAX;
const int stChallegeLeitaiUser::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stChallegeLeitaiUser_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stChallegeLeitaiUser_ProtoFunID_descriptor_;
}
bool stChallegeLeitaiUser_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 15:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stChallegeLeitaiUser_ProtoFunID stChallegeLeitaiUser::FunID;
const stChallegeLeitaiUser_ProtoFunID stChallegeLeitaiUser::ProtoFunID_MIN;
const stChallegeLeitaiUser_ProtoFunID stChallegeLeitaiUser::ProtoFunID_MAX;
const int stChallegeLeitaiUser::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stChallegeLeitaiUser::kCharIDFieldNumber;
#endif  // !_MSC_VER

stChallegeLeitaiUser::stChallegeLeitaiUser()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stChallegeLeitaiUser::InitAsDefaultInstance() {
}

stChallegeLeitaiUser::stChallegeLeitaiUser(const stChallegeLeitaiUser& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stChallegeLeitaiUser::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stChallegeLeitaiUser::~stChallegeLeitaiUser() {
  SharedDtor();
}

void stChallegeLeitaiUser::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stChallegeLeitaiUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stChallegeLeitaiUser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stChallegeLeitaiUser_descriptor_;
}

const stChallegeLeitaiUser& stChallegeLeitaiUser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stChallegeLeitaiUser* stChallegeLeitaiUser::default_instance_ = NULL;

stChallegeLeitaiUser* stChallegeLeitaiUser::New() const {
  return new stChallegeLeitaiUser;
}

void stChallegeLeitaiUser::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stChallegeLeitaiUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stChallegeLeitaiUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stChallegeLeitaiUser::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stChallegeLeitaiUser::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stChallegeLeitaiUser::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stChallegeLeitaiUser* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stChallegeLeitaiUser*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stChallegeLeitaiUser::MergeFrom(const stChallegeLeitaiUser& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stChallegeLeitaiUser::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stChallegeLeitaiUser::CopyFrom(const stChallegeLeitaiUser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stChallegeLeitaiUser::IsInitialized() const {

  return true;
}

void stChallegeLeitaiUser::Swap(stChallegeLeitaiUser* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stChallegeLeitaiUser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stChallegeLeitaiUser_descriptor_;
  metadata.reflection = stChallegeLeitaiUser_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stChallegeLeitaiUserResult_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stChallegeLeitaiUserResult_eResult_descriptor_;
}
bool stChallegeLeitaiUserResult_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stChallegeLeitaiUserResult_eResult stChallegeLeitaiUserResult::eSuccess;
const stChallegeLeitaiUserResult_eResult stChallegeLeitaiUserResult::eLilian_Not_Enough;
const stChallegeLeitaiUserResult_eResult stChallegeLeitaiUserResult::eInner_Error;
const stChallegeLeitaiUserResult_eResult stChallegeLeitaiUserResult::eLevel_Limit;
const stChallegeLeitaiUserResult_eResult stChallegeLeitaiUserResult::eBagFull;
const stChallegeLeitaiUserResult_eResult stChallegeLeitaiUserResult::eResult_MIN;
const stChallegeLeitaiUserResult_eResult stChallegeLeitaiUserResult::eResult_MAX;
const int stChallegeLeitaiUserResult::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stChallegeLeitaiUserResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stChallegeLeitaiUserResult_ProtoModID_descriptor_;
}
bool stChallegeLeitaiUserResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stChallegeLeitaiUserResult_ProtoModID stChallegeLeitaiUserResult::ModID;
const stChallegeLeitaiUserResult_ProtoModID stChallegeLeitaiUserResult::ProtoModID_MIN;
const stChallegeLeitaiUserResult_ProtoModID stChallegeLeitaiUserResult::ProtoModID_MAX;
const int stChallegeLeitaiUserResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stChallegeLeitaiUserResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stChallegeLeitaiUserResult_ProtoFunID_descriptor_;
}
bool stChallegeLeitaiUserResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 16:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stChallegeLeitaiUserResult_ProtoFunID stChallegeLeitaiUserResult::FunID;
const stChallegeLeitaiUserResult_ProtoFunID stChallegeLeitaiUserResult::ProtoFunID_MIN;
const stChallegeLeitaiUserResult_ProtoFunID stChallegeLeitaiUserResult::ProtoFunID_MAX;
const int stChallegeLeitaiUserResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stChallegeLeitaiUserResult::kResultFieldNumber;
#endif  // !_MSC_VER

stChallegeLeitaiUserResult::stChallegeLeitaiUserResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stChallegeLeitaiUserResult::InitAsDefaultInstance() {
}

stChallegeLeitaiUserResult::stChallegeLeitaiUserResult(const stChallegeLeitaiUserResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stChallegeLeitaiUserResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stChallegeLeitaiUserResult::~stChallegeLeitaiUserResult() {
  SharedDtor();
}

void stChallegeLeitaiUserResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stChallegeLeitaiUserResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stChallegeLeitaiUserResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stChallegeLeitaiUserResult_descriptor_;
}

const stChallegeLeitaiUserResult& stChallegeLeitaiUserResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stChallegeLeitaiUserResult* stChallegeLeitaiUserResult::default_instance_ = NULL;

stChallegeLeitaiUserResult* stChallegeLeitaiUserResult::New() const {
  return new stChallegeLeitaiUserResult;
}

void stChallegeLeitaiUserResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stChallegeLeitaiUserResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SortProto.stChallegeLeitaiUserResult.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SortProto::stChallegeLeitaiUserResult_eResult_IsValid(value)) {
            set_result(static_cast< ::SortProto::stChallegeLeitaiUserResult_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stChallegeLeitaiUserResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SortProto.stChallegeLeitaiUserResult.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stChallegeLeitaiUserResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SortProto.stChallegeLeitaiUserResult.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stChallegeLeitaiUserResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SortProto.stChallegeLeitaiUserResult.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stChallegeLeitaiUserResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stChallegeLeitaiUserResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stChallegeLeitaiUserResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stChallegeLeitaiUserResult::MergeFrom(const stChallegeLeitaiUserResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stChallegeLeitaiUserResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stChallegeLeitaiUserResult::CopyFrom(const stChallegeLeitaiUserResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stChallegeLeitaiUserResult::IsInitialized() const {

  return true;
}

void stChallegeLeitaiUserResult::Swap(stChallegeLeitaiUserResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stChallegeLeitaiUserResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stChallegeLeitaiUserResult_descriptor_;
  metadata.reflection = stChallegeLeitaiUserResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stOpenLeitaiWindow_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stOpenLeitaiWindow_ProtoModID_descriptor_;
}
bool stOpenLeitaiWindow_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stOpenLeitaiWindow_ProtoModID stOpenLeitaiWindow::ModID;
const stOpenLeitaiWindow_ProtoModID stOpenLeitaiWindow::ProtoModID_MIN;
const stOpenLeitaiWindow_ProtoModID stOpenLeitaiWindow::ProtoModID_MAX;
const int stOpenLeitaiWindow::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stOpenLeitaiWindow_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stOpenLeitaiWindow_ProtoFunID_descriptor_;
}
bool stOpenLeitaiWindow_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 17:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stOpenLeitaiWindow_ProtoFunID stOpenLeitaiWindow::FunID;
const stOpenLeitaiWindow_ProtoFunID stOpenLeitaiWindow::ProtoFunID_MIN;
const stOpenLeitaiWindow_ProtoFunID stOpenLeitaiWindow::ProtoFunID_MAX;
const int stOpenLeitaiWindow::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stOpenLeitaiWindow::kCharIDFieldNumber;
#endif  // !_MSC_VER

stOpenLeitaiWindow::stOpenLeitaiWindow()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stOpenLeitaiWindow::InitAsDefaultInstance() {
}

stOpenLeitaiWindow::stOpenLeitaiWindow(const stOpenLeitaiWindow& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stOpenLeitaiWindow::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stOpenLeitaiWindow::~stOpenLeitaiWindow() {
  SharedDtor();
}

void stOpenLeitaiWindow::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stOpenLeitaiWindow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stOpenLeitaiWindow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stOpenLeitaiWindow_descriptor_;
}

const stOpenLeitaiWindow& stOpenLeitaiWindow::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stOpenLeitaiWindow* stOpenLeitaiWindow::default_instance_ = NULL;

stOpenLeitaiWindow* stOpenLeitaiWindow::New() const {
  return new stOpenLeitaiWindow;
}

void stOpenLeitaiWindow::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stOpenLeitaiWindow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stOpenLeitaiWindow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stOpenLeitaiWindow::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stOpenLeitaiWindow::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stOpenLeitaiWindow::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stOpenLeitaiWindow* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stOpenLeitaiWindow*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stOpenLeitaiWindow::MergeFrom(const stOpenLeitaiWindow& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stOpenLeitaiWindow::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stOpenLeitaiWindow::CopyFrom(const stOpenLeitaiWindow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stOpenLeitaiWindow::IsInitialized() const {

  return true;
}

void stOpenLeitaiWindow::Swap(stOpenLeitaiWindow* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stOpenLeitaiWindow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stOpenLeitaiWindow_descriptor_;
  metadata.reflection = stOpenLeitaiWindow_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stSynHeroHP::kHeroIDFieldNumber;
const int stSynHeroHP::kCurHPFieldNumber;
const int stSynHeroHP::kMaxHPFieldNumber;
#endif  // !_MSC_VER

stSynHeroHP::stSynHeroHP()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSynHeroHP::InitAsDefaultInstance() {
}

stSynHeroHP::stSynHeroHP(const stSynHeroHP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSynHeroHP::SharedCtor() {
  _cached_size_ = 0;
  heroid_ = 0u;
  curhp_ = 0u;
  maxhp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSynHeroHP::~stSynHeroHP() {
  SharedDtor();
}

void stSynHeroHP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stSynHeroHP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSynHeroHP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynHeroHP_descriptor_;
}

const stSynHeroHP& stSynHeroHP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stSynHeroHP* stSynHeroHP::default_instance_ = NULL;

stSynHeroHP* stSynHeroHP::New() const {
  return new stSynHeroHP;
}

void stSynHeroHP::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    heroid_ = 0u;
    curhp_ = 0u;
    maxhp_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSynHeroHP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 heroID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heroid_)));
          set_has_heroid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_curHP;
        break;
      }

      // optional uint32 curHP = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curHP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curhp_)));
          set_has_curhp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_maxHP;
        break;
      }

      // optional uint32 maxHP = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxHP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxhp_)));
          set_has_maxhp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSynHeroHP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 heroID = 1;
  if (has_heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->heroid(), output);
  }

  // optional uint32 curHP = 2;
  if (has_curhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->curhp(), output);
  }

  // optional uint32 maxHP = 3;
  if (has_maxhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->maxhp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSynHeroHP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 heroID = 1;
  if (has_heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->heroid(), target);
  }

  // optional uint32 curHP = 2;
  if (has_curhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->curhp(), target);
  }

  // optional uint32 maxHP = 3;
  if (has_maxhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->maxhp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSynHeroHP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 heroID = 1;
    if (has_heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heroid());
    }

    // optional uint32 curHP = 2;
    if (has_curhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curhp());
    }

    // optional uint32 maxHP = 3;
    if (has_maxhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxhp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSynHeroHP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSynHeroHP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSynHeroHP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSynHeroHP::MergeFrom(const stSynHeroHP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_heroid()) {
      set_heroid(from.heroid());
    }
    if (from.has_curhp()) {
      set_curhp(from.curhp());
    }
    if (from.has_maxhp()) {
      set_maxhp(from.maxhp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSynHeroHP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSynHeroHP::CopyFrom(const stSynHeroHP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSynHeroHP::IsInitialized() const {

  return true;
}

void stSynHeroHP::Swap(stSynHeroHP* other) {
  if (other != this) {
    std::swap(heroid_, other->heroid_);
    std::swap(curhp_, other->curhp_);
    std::swap(maxhp_, other->maxhp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSynHeroHP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSynHeroHP_descriptor_;
  metadata.reflection = stSynHeroHP_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRetLeitaiInfo_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetLeitaiInfo_ProtoModID_descriptor_;
}
bool stRetLeitaiInfo_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetLeitaiInfo_ProtoModID stRetLeitaiInfo::ModID;
const stRetLeitaiInfo_ProtoModID stRetLeitaiInfo::ProtoModID_MIN;
const stRetLeitaiInfo_ProtoModID stRetLeitaiInfo::ProtoModID_MAX;
const int stRetLeitaiInfo::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetLeitaiInfo_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetLeitaiInfo_ProtoFunID_descriptor_;
}
bool stRetLeitaiInfo_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 18:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetLeitaiInfo_ProtoFunID stRetLeitaiInfo::FunID;
const stRetLeitaiInfo_ProtoFunID stRetLeitaiInfo::ProtoFunID_MIN;
const stRetLeitaiInfo_ProtoFunID stRetLeitaiInfo::ProtoFunID_MAX;
const int stRetLeitaiInfo::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRetLeitaiInfo::kChallengeNumFieldNumber;
const int stRetLeitaiInfo::kMyHPFieldNumber;
const int stRetLeitaiInfo::kHeroHPsFieldNumber;
const int stRetLeitaiInfo::kModeFieldNumber;
const int stRetLeitaiInfo::kPos1IDFieldNumber;
const int stRetLeitaiInfo::kPos2IDFieldNumber;
const int stRetLeitaiInfo::kPos3IDFieldNumber;
const int stRetLeitaiInfo::kPos4IDFieldNumber;
const int stRetLeitaiInfo::kRefreshBuffRemainTimeFieldNumber;
const int stRetLeitaiInfo::kBuffIDFieldNumber;
#endif  // !_MSC_VER

stRetLeitaiInfo::stRetLeitaiInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRetLeitaiInfo::InitAsDefaultInstance() {
}

stRetLeitaiInfo::stRetLeitaiInfo(const stRetLeitaiInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRetLeitaiInfo::SharedCtor() {
  _cached_size_ = 0;
  challengenum_ = 0u;
  myhp_ = 0u;
  mode_ = 1;
  pos1id_ = 0u;
  pos2id_ = 0u;
  pos3id_ = 0u;
  pos4id_ = 0u;
  refreshbuffremaintime_ = 0u;
  buffid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRetLeitaiInfo::~stRetLeitaiInfo() {
  SharedDtor();
}

void stRetLeitaiInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRetLeitaiInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRetLeitaiInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetLeitaiInfo_descriptor_;
}

const stRetLeitaiInfo& stRetLeitaiInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stRetLeitaiInfo* stRetLeitaiInfo::default_instance_ = NULL;

stRetLeitaiInfo* stRetLeitaiInfo::New() const {
  return new stRetLeitaiInfo;
}

void stRetLeitaiInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    challengenum_ = 0u;
    myhp_ = 0u;
    mode_ = 1;
    pos1id_ = 0u;
    pos2id_ = 0u;
    pos3id_ = 0u;
    pos4id_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    refreshbuffremaintime_ = 0u;
    buffid_ = 0u;
  }
  herohps_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRetLeitaiInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 challengeNum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &challengenum_)));
          set_has_challengenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_myHP;
        break;
      }

      // optional uint32 myHP = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_myHP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &myhp_)));
          set_has_myhp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_heroHPs;
        break;
      }

      // repeated .SortProto.stSynHeroHP heroHPs = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_heroHPs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_herohps()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_heroHPs;
        if (input->ExpectTag(32)) goto parse_mode;
        break;
      }

      // optional .SortProto.eLeitaiMode mode = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SortProto::eLeitaiMode_IsValid(value)) {
            set_mode(static_cast< ::SortProto::eLeitaiMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_pos1ID;
        break;
      }

      // optional uint32 pos1ID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos1ID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos1id_)));
          set_has_pos1id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_pos2ID;
        break;
      }

      // optional uint32 pos2ID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos2ID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos2id_)));
          set_has_pos2id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_pos3ID;
        break;
      }

      // optional uint32 pos3ID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos3ID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos3id_)));
          set_has_pos3id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_pos4ID;
        break;
      }

      // optional uint32 pos4ID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos4ID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos4id_)));
          set_has_pos4id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_refreshBuffRemainTime;
        break;
      }

      // optional uint32 refreshBuffRemainTime = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_refreshBuffRemainTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &refreshbuffremaintime_)));
          set_has_refreshbuffremaintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_buffID;
        break;
      }

      // optional uint32 buffID = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buffID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buffid_)));
          set_has_buffid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRetLeitaiInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 challengeNum = 1;
  if (has_challengenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->challengenum(), output);
  }

  // optional uint32 myHP = 2;
  if (has_myhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->myhp(), output);
  }

  // repeated .SortProto.stSynHeroHP heroHPs = 3;
  for (int i = 0; i < this->herohps_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->herohps(i), output);
  }

  // optional .SortProto.eLeitaiMode mode = 4;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->mode(), output);
  }

  // optional uint32 pos1ID = 5;
  if (has_pos1id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->pos1id(), output);
  }

  // optional uint32 pos2ID = 6;
  if (has_pos2id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->pos2id(), output);
  }

  // optional uint32 pos3ID = 7;
  if (has_pos3id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->pos3id(), output);
  }

  // optional uint32 pos4ID = 8;
  if (has_pos4id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->pos4id(), output);
  }

  // optional uint32 refreshBuffRemainTime = 9;
  if (has_refreshbuffremaintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->refreshbuffremaintime(), output);
  }

  // optional uint32 buffID = 10;
  if (has_buffid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->buffid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRetLeitaiInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 challengeNum = 1;
  if (has_challengenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->challengenum(), target);
  }

  // optional uint32 myHP = 2;
  if (has_myhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->myhp(), target);
  }

  // repeated .SortProto.stSynHeroHP heroHPs = 3;
  for (int i = 0; i < this->herohps_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->herohps(i), target);
  }

  // optional .SortProto.eLeitaiMode mode = 4;
  if (has_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->mode(), target);
  }

  // optional uint32 pos1ID = 5;
  if (has_pos1id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->pos1id(), target);
  }

  // optional uint32 pos2ID = 6;
  if (has_pos2id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->pos2id(), target);
  }

  // optional uint32 pos3ID = 7;
  if (has_pos3id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->pos3id(), target);
  }

  // optional uint32 pos4ID = 8;
  if (has_pos4id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->pos4id(), target);
  }

  // optional uint32 refreshBuffRemainTime = 9;
  if (has_refreshbuffremaintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->refreshbuffremaintime(), target);
  }

  // optional uint32 buffID = 10;
  if (has_buffid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->buffid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRetLeitaiInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 challengeNum = 1;
    if (has_challengenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->challengenum());
    }

    // optional uint32 myHP = 2;
    if (has_myhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->myhp());
    }

    // optional .SortProto.eLeitaiMode mode = 4;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
    }

    // optional uint32 pos1ID = 5;
    if (has_pos1id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos1id());
    }

    // optional uint32 pos2ID = 6;
    if (has_pos2id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos2id());
    }

    // optional uint32 pos3ID = 7;
    if (has_pos3id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos3id());
    }

    // optional uint32 pos4ID = 8;
    if (has_pos4id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos4id());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 refreshBuffRemainTime = 9;
    if (has_refreshbuffremaintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->refreshbuffremaintime());
    }

    // optional uint32 buffID = 10;
    if (has_buffid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buffid());
    }

  }
  // repeated .SortProto.stSynHeroHP heroHPs = 3;
  total_size += 1 * this->herohps_size();
  for (int i = 0; i < this->herohps_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->herohps(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRetLeitaiInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRetLeitaiInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRetLeitaiInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRetLeitaiInfo::MergeFrom(const stRetLeitaiInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  herohps_.MergeFrom(from.herohps_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_challengenum()) {
      set_challengenum(from.challengenum());
    }
    if (from.has_myhp()) {
      set_myhp(from.myhp());
    }
    if (from.has_mode()) {
      set_mode(from.mode());
    }
    if (from.has_pos1id()) {
      set_pos1id(from.pos1id());
    }
    if (from.has_pos2id()) {
      set_pos2id(from.pos2id());
    }
    if (from.has_pos3id()) {
      set_pos3id(from.pos3id());
    }
    if (from.has_pos4id()) {
      set_pos4id(from.pos4id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_refreshbuffremaintime()) {
      set_refreshbuffremaintime(from.refreshbuffremaintime());
    }
    if (from.has_buffid()) {
      set_buffid(from.buffid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRetLeitaiInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRetLeitaiInfo::CopyFrom(const stRetLeitaiInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRetLeitaiInfo::IsInitialized() const {

  return true;
}

void stRetLeitaiInfo::Swap(stRetLeitaiInfo* other) {
  if (other != this) {
    std::swap(challengenum_, other->challengenum_);
    std::swap(myhp_, other->myhp_);
    herohps_.Swap(&other->herohps_);
    std::swap(mode_, other->mode_);
    std::swap(pos1id_, other->pos1id_);
    std::swap(pos2id_, other->pos2id_);
    std::swap(pos3id_, other->pos3id_);
    std::swap(pos4id_, other->pos4id_);
    std::swap(refreshbuffremaintime_, other->refreshbuffremaintime_);
    std::swap(buffid_, other->buffid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRetLeitaiInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRetLeitaiInfo_descriptor_;
  metadata.reflection = stRetLeitaiInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqLeitaiSortList_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqLeitaiSortList_ProtoModID_descriptor_;
}
bool stReqLeitaiSortList_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqLeitaiSortList_ProtoModID stReqLeitaiSortList::ModID;
const stReqLeitaiSortList_ProtoModID stReqLeitaiSortList::ProtoModID_MIN;
const stReqLeitaiSortList_ProtoModID stReqLeitaiSortList::ProtoModID_MAX;
const int stReqLeitaiSortList::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqLeitaiSortList_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqLeitaiSortList_ProtoFunID_descriptor_;
}
bool stReqLeitaiSortList_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 19:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqLeitaiSortList_ProtoFunID stReqLeitaiSortList::FunID;
const stReqLeitaiSortList_ProtoFunID stReqLeitaiSortList::ProtoFunID_MIN;
const stReqLeitaiSortList_ProtoFunID stReqLeitaiSortList::ProtoFunID_MAX;
const int stReqLeitaiSortList::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqLeitaiSortList::kBeginRankFieldNumber;
#endif  // !_MSC_VER

stReqLeitaiSortList::stReqLeitaiSortList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqLeitaiSortList::InitAsDefaultInstance() {
}

stReqLeitaiSortList::stReqLeitaiSortList(const stReqLeitaiSortList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqLeitaiSortList::SharedCtor() {
  _cached_size_ = 0;
  beginrank_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqLeitaiSortList::~stReqLeitaiSortList() {
  SharedDtor();
}

void stReqLeitaiSortList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqLeitaiSortList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqLeitaiSortList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqLeitaiSortList_descriptor_;
}

const stReqLeitaiSortList& stReqLeitaiSortList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stReqLeitaiSortList* stReqLeitaiSortList::default_instance_ = NULL;

stReqLeitaiSortList* stReqLeitaiSortList::New() const {
  return new stReqLeitaiSortList;
}

void stReqLeitaiSortList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    beginrank_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqLeitaiSortList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 beginRank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &beginrank_)));
          set_has_beginrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqLeitaiSortList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 beginRank = 1;
  if (has_beginrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->beginrank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqLeitaiSortList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 beginRank = 1;
  if (has_beginrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->beginrank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqLeitaiSortList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 beginRank = 1;
    if (has_beginrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->beginrank());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqLeitaiSortList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqLeitaiSortList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqLeitaiSortList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqLeitaiSortList::MergeFrom(const stReqLeitaiSortList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_beginrank()) {
      set_beginrank(from.beginrank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqLeitaiSortList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqLeitaiSortList::CopyFrom(const stReqLeitaiSortList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqLeitaiSortList::IsInitialized() const {

  return true;
}

void stReqLeitaiSortList::Swap(stReqLeitaiSortList* other) {
  if (other != this) {
    std::swap(beginrank_, other->beginrank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqLeitaiSortList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqLeitaiSortList_descriptor_;
  metadata.reflection = stReqLeitaiSortList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stLeitaiSortListItem::kCharIDFieldNumber;
const int stLeitaiSortListItem::kNameFieldNumber;
const int stLeitaiSortListItem::kUseTimeFieldNumber;
const int stLeitaiSortListItem::kLevelFieldNumber;
const int stLeitaiSortListItem::kJobFieldNumber;
const int stLeitaiSortListItem::kSexFieldNumber;
const int stLeitaiSortListItem::kPhotoIDFieldNumber;
#endif  // !_MSC_VER

stLeitaiSortListItem::stLeitaiSortListItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stLeitaiSortListItem::InitAsDefaultInstance() {
}

stLeitaiSortListItem::stLeitaiSortListItem(const stLeitaiSortListItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stLeitaiSortListItem::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  usetime_ = 0u;
  level_ = 0u;
  job_ = 0u;
  sex_ = 0u;
  photoid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stLeitaiSortListItem::~stLeitaiSortListItem() {
  SharedDtor();
}

void stLeitaiSortListItem::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void stLeitaiSortListItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stLeitaiSortListItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stLeitaiSortListItem_descriptor_;
}

const stLeitaiSortListItem& stLeitaiSortListItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stLeitaiSortListItem* stLeitaiSortListItem::default_instance_ = NULL;

stLeitaiSortListItem* stLeitaiSortListItem::New() const {
  return new stLeitaiSortListItem;
}

void stLeitaiSortListItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    usetime_ = 0u;
    level_ = 0u;
    job_ = 0u;
    sex_ = 0u;
    photoid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stLeitaiSortListItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_useTime;
        break;
      }

      // optional uint32 useTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_useTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usetime_)));
          set_has_usetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }

      // optional uint32 level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_job;
        break;
      }

      // optional uint32 job = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &job_)));
          set_has_job();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_sex;
        break;
      }

      // optional uint32 sex = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_photoID;
        break;
      }

      // optional uint32 photoID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_photoID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &photoid_)));
          set_has_photoid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stLeitaiSortListItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional uint32 useTime = 3;
  if (has_usetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->usetime(), output);
  }

  // optional uint32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->level(), output);
  }

  // optional uint32 job = 5;
  if (has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->job(), output);
  }

  // optional uint32 sex = 6;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->sex(), output);
  }

  // optional uint32 photoID = 7;
  if (has_photoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->photoid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stLeitaiSortListItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional uint32 useTime = 3;
  if (has_usetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->usetime(), target);
  }

  // optional uint32 level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->level(), target);
  }

  // optional uint32 job = 5;
  if (has_job()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->job(), target);
  }

  // optional uint32 sex = 6;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->sex(), target);
  }

  // optional uint32 photoID = 7;
  if (has_photoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->photoid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stLeitaiSortListItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 useTime = 3;
    if (has_usetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->usetime());
    }

    // optional uint32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 job = 5;
    if (has_job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->job());
    }

    // optional uint32 sex = 6;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sex());
    }

    // optional uint32 photoID = 7;
    if (has_photoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->photoid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stLeitaiSortListItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stLeitaiSortListItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stLeitaiSortListItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stLeitaiSortListItem::MergeFrom(const stLeitaiSortListItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_usetime()) {
      set_usetime(from.usetime());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_job()) {
      set_job(from.job());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_photoid()) {
      set_photoid(from.photoid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stLeitaiSortListItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stLeitaiSortListItem::CopyFrom(const stLeitaiSortListItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stLeitaiSortListItem::IsInitialized() const {

  return true;
}

void stLeitaiSortListItem::Swap(stLeitaiSortListItem* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(name_, other->name_);
    std::swap(usetime_, other->usetime_);
    std::swap(level_, other->level_);
    std::swap(job_, other->job_);
    std::swap(sex_, other->sex_);
    std::swap(photoid_, other->photoid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stLeitaiSortListItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stLeitaiSortListItem_descriptor_;
  metadata.reflection = stLeitaiSortListItem_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRetLeitaiSortList_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetLeitaiSortList_ProtoModID_descriptor_;
}
bool stRetLeitaiSortList_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetLeitaiSortList_ProtoModID stRetLeitaiSortList::ModID;
const stRetLeitaiSortList_ProtoModID stRetLeitaiSortList::ProtoModID_MIN;
const stRetLeitaiSortList_ProtoModID stRetLeitaiSortList::ProtoModID_MAX;
const int stRetLeitaiSortList::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetLeitaiSortList_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetLeitaiSortList_ProtoFunID_descriptor_;
}
bool stRetLeitaiSortList_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 20:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetLeitaiSortList_ProtoFunID stRetLeitaiSortList::FunID;
const stRetLeitaiSortList_ProtoFunID stRetLeitaiSortList::ProtoFunID_MIN;
const stRetLeitaiSortList_ProtoFunID stRetLeitaiSortList::ProtoFunID_MAX;
const int stRetLeitaiSortList::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRetLeitaiSortList::kSortListItemFieldNumber;
const int stRetLeitaiSortList::kBeginRankFieldNumber;
const int stRetLeitaiSortList::kMyRankFieldNumber;
#endif  // !_MSC_VER

stRetLeitaiSortList::stRetLeitaiSortList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRetLeitaiSortList::InitAsDefaultInstance() {
}

stRetLeitaiSortList::stRetLeitaiSortList(const stRetLeitaiSortList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRetLeitaiSortList::SharedCtor() {
  _cached_size_ = 0;
  beginrank_ = 0u;
  myrank_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRetLeitaiSortList::~stRetLeitaiSortList() {
  SharedDtor();
}

void stRetLeitaiSortList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRetLeitaiSortList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRetLeitaiSortList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetLeitaiSortList_descriptor_;
}

const stRetLeitaiSortList& stRetLeitaiSortList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stRetLeitaiSortList* stRetLeitaiSortList::default_instance_ = NULL;

stRetLeitaiSortList* stRetLeitaiSortList::New() const {
  return new stRetLeitaiSortList;
}

void stRetLeitaiSortList::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    beginrank_ = 0u;
    myrank_ = 0u;
  }
  sortlistitem_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRetLeitaiSortList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SortProto.stLeitaiSortListItem sortListItem = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sortListItem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sortlistitem()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_sortListItem;
        if (input->ExpectTag(16)) goto parse_beginRank;
        break;
      }

      // optional uint32 beginRank = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_beginRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &beginrank_)));
          set_has_beginrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_myRank;
        break;
      }

      // optional uint32 myRank = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_myRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &myrank_)));
          set_has_myrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRetLeitaiSortList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .SortProto.stLeitaiSortListItem sortListItem = 1;
  for (int i = 0; i < this->sortlistitem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sortlistitem(i), output);
  }

  // optional uint32 beginRank = 2;
  if (has_beginrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->beginrank(), output);
  }

  // optional uint32 myRank = 3;
  if (has_myrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->myrank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRetLeitaiSortList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .SortProto.stLeitaiSortListItem sortListItem = 1;
  for (int i = 0; i < this->sortlistitem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->sortlistitem(i), target);
  }

  // optional uint32 beginRank = 2;
  if (has_beginrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->beginrank(), target);
  }

  // optional uint32 myRank = 3;
  if (has_myrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->myrank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRetLeitaiSortList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 beginRank = 2;
    if (has_beginrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->beginrank());
    }

    // optional uint32 myRank = 3;
    if (has_myrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->myrank());
    }

  }
  // repeated .SortProto.stLeitaiSortListItem sortListItem = 1;
  total_size += 1 * this->sortlistitem_size();
  for (int i = 0; i < this->sortlistitem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sortlistitem(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRetLeitaiSortList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRetLeitaiSortList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRetLeitaiSortList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRetLeitaiSortList::MergeFrom(const stRetLeitaiSortList& from) {
  GOOGLE_CHECK_NE(&from, this);
  sortlistitem_.MergeFrom(from.sortlistitem_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_beginrank()) {
      set_beginrank(from.beginrank());
    }
    if (from.has_myrank()) {
      set_myrank(from.myrank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRetLeitaiSortList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRetLeitaiSortList::CopyFrom(const stRetLeitaiSortList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRetLeitaiSortList::IsInitialized() const {

  return true;
}

void stRetLeitaiSortList::Swap(stRetLeitaiSortList* other) {
  if (other != this) {
    sortlistitem_.Swap(&other->sortlistitem_);
    std::swap(beginrank_, other->beginrank_);
    std::swap(myrank_, other->myrank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRetLeitaiSortList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRetLeitaiSortList_descriptor_;
  metadata.reflection = stRetLeitaiSortList_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stSendLeitaiResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSendLeitaiResult_ProtoModID_descriptor_;
}
bool stSendLeitaiResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSendLeitaiResult_ProtoModID stSendLeitaiResult::ModID;
const stSendLeitaiResult_ProtoModID stSendLeitaiResult::ProtoModID_MIN;
const stSendLeitaiResult_ProtoModID stSendLeitaiResult::ProtoModID_MAX;
const int stSendLeitaiResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSendLeitaiResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSendLeitaiResult_ProtoFunID_descriptor_;
}
bool stSendLeitaiResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 21:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSendLeitaiResult_ProtoFunID stSendLeitaiResult::FunID;
const stSendLeitaiResult_ProtoFunID stSendLeitaiResult::ProtoFunID_MIN;
const stSendLeitaiResult_ProtoFunID stSendLeitaiResult::ProtoFunID_MAX;
const int stSendLeitaiResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stSendLeitaiResult::kHeroHPFieldNumber;
const int stSendLeitaiResult::kCurUserHPFieldNumber;
const int stSendLeitaiResult::kUseTimeFieldNumber;
#endif  // !_MSC_VER

stSendLeitaiResult::stSendLeitaiResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSendLeitaiResult::InitAsDefaultInstance() {
}

stSendLeitaiResult::stSendLeitaiResult(const stSendLeitaiResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSendLeitaiResult::SharedCtor() {
  _cached_size_ = 0;
  curuserhp_ = 0u;
  usetime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSendLeitaiResult::~stSendLeitaiResult() {
  SharedDtor();
}

void stSendLeitaiResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stSendLeitaiResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSendLeitaiResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSendLeitaiResult_descriptor_;
}

const stSendLeitaiResult& stSendLeitaiResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stSendLeitaiResult* stSendLeitaiResult::default_instance_ = NULL;

stSendLeitaiResult* stSendLeitaiResult::New() const {
  return new stSendLeitaiResult;
}

void stSendLeitaiResult::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    curuserhp_ = 0u;
    usetime_ = 0u;
  }
  herohp_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSendLeitaiResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SortProto.stSynHeroHP heroHP = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_heroHP:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_herohp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_heroHP;
        if (input->ExpectTag(16)) goto parse_curUserHP;
        break;
      }

      // optional uint32 curUserHP = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curUserHP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curuserhp_)));
          set_has_curuserhp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_useTime;
        break;
      }

      // optional uint32 useTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_useTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usetime_)));
          set_has_usetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSendLeitaiResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .SortProto.stSynHeroHP heroHP = 1;
  for (int i = 0; i < this->herohp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->herohp(i), output);
  }

  // optional uint32 curUserHP = 2;
  if (has_curuserhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->curuserhp(), output);
  }

  // optional uint32 useTime = 3;
  if (has_usetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->usetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSendLeitaiResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .SortProto.stSynHeroHP heroHP = 1;
  for (int i = 0; i < this->herohp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->herohp(i), target);
  }

  // optional uint32 curUserHP = 2;
  if (has_curuserhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->curuserhp(), target);
  }

  // optional uint32 useTime = 3;
  if (has_usetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->usetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSendLeitaiResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 curUserHP = 2;
    if (has_curuserhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curuserhp());
    }

    // optional uint32 useTime = 3;
    if (has_usetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->usetime());
    }

  }
  // repeated .SortProto.stSynHeroHP heroHP = 1;
  total_size += 1 * this->herohp_size();
  for (int i = 0; i < this->herohp_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->herohp(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSendLeitaiResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSendLeitaiResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSendLeitaiResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSendLeitaiResult::MergeFrom(const stSendLeitaiResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  herohp_.MergeFrom(from.herohp_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_curuserhp()) {
      set_curuserhp(from.curuserhp());
    }
    if (from.has_usetime()) {
      set_usetime(from.usetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSendLeitaiResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSendLeitaiResult::CopyFrom(const stSendLeitaiResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSendLeitaiResult::IsInitialized() const {

  return true;
}

void stSendLeitaiResult::Swap(stSendLeitaiResult* other) {
  if (other != this) {
    herohp_.Swap(&other->herohp_);
    std::swap(curuserhp_, other->curuserhp_);
    std::swap(usetime_, other->usetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSendLeitaiResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSendLeitaiResult_descriptor_;
  metadata.reflection = stSendLeitaiResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRetSendLeitaiResult_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetSendLeitaiResult_eResult_descriptor_;
}
bool stRetSendLeitaiResult_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetSendLeitaiResult_eResult stRetSendLeitaiResult::SUCCESS;
const stRetSendLeitaiResult_eResult stRetSendLeitaiResult::COND_NOT_MEET;
const stRetSendLeitaiResult_eResult stRetSendLeitaiResult::INNER_ERROR;
const stRetSendLeitaiResult_eResult stRetSendLeitaiResult::ROLE_LV_TOO_LOW;
const stRetSendLeitaiResult_eResult stRetSendLeitaiResult::LILIAN_NOT_ENOUGH;
const stRetSendLeitaiResult_eResult stRetSendLeitaiResult::eResult_MIN;
const stRetSendLeitaiResult_eResult stRetSendLeitaiResult::eResult_MAX;
const int stRetSendLeitaiResult::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetSendLeitaiResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetSendLeitaiResult_ProtoModID_descriptor_;
}
bool stRetSendLeitaiResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetSendLeitaiResult_ProtoModID stRetSendLeitaiResult::ModID;
const stRetSendLeitaiResult_ProtoModID stRetSendLeitaiResult::ProtoModID_MIN;
const stRetSendLeitaiResult_ProtoModID stRetSendLeitaiResult::ProtoModID_MAX;
const int stRetSendLeitaiResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetSendLeitaiResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetSendLeitaiResult_ProtoFunID_descriptor_;
}
bool stRetSendLeitaiResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 22:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetSendLeitaiResult_ProtoFunID stRetSendLeitaiResult::FunID;
const stRetSendLeitaiResult_ProtoFunID stRetSendLeitaiResult::ProtoFunID_MIN;
const stRetSendLeitaiResult_ProtoFunID stRetSendLeitaiResult::ProtoFunID_MAX;
const int stRetSendLeitaiResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRetSendLeitaiResult::kResultFieldNumber;
#endif  // !_MSC_VER

stRetSendLeitaiResult::stRetSendLeitaiResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRetSendLeitaiResult::InitAsDefaultInstance() {
}

stRetSendLeitaiResult::stRetSendLeitaiResult(const stRetSendLeitaiResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRetSendLeitaiResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRetSendLeitaiResult::~stRetSendLeitaiResult() {
  SharedDtor();
}

void stRetSendLeitaiResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRetSendLeitaiResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRetSendLeitaiResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetSendLeitaiResult_descriptor_;
}

const stRetSendLeitaiResult& stRetSendLeitaiResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stRetSendLeitaiResult* stRetSendLeitaiResult::default_instance_ = NULL;

stRetSendLeitaiResult* stRetSendLeitaiResult::New() const {
  return new stRetSendLeitaiResult;
}

void stRetSendLeitaiResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRetSendLeitaiResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SortProto.stRetSendLeitaiResult.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SortProto::stRetSendLeitaiResult_eResult_IsValid(value)) {
            set_result(static_cast< ::SortProto::stRetSendLeitaiResult_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRetSendLeitaiResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SortProto.stRetSendLeitaiResult.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRetSendLeitaiResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SortProto.stRetSendLeitaiResult.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRetSendLeitaiResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SortProto.stRetSendLeitaiResult.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRetSendLeitaiResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRetSendLeitaiResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRetSendLeitaiResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRetSendLeitaiResult::MergeFrom(const stRetSendLeitaiResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRetSendLeitaiResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRetSendLeitaiResult::CopyFrom(const stRetSendLeitaiResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRetSendLeitaiResult::IsInitialized() const {

  return true;
}

void stRetSendLeitaiResult::Swap(stRetSendLeitaiResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRetSendLeitaiResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRetSendLeitaiResult_descriptor_;
  metadata.reflection = stRetSendLeitaiResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stNotifySelectLeitaiMode_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifySelectLeitaiMode_ProtoModID_descriptor_;
}
bool stNotifySelectLeitaiMode_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifySelectLeitaiMode_ProtoModID stNotifySelectLeitaiMode::ModID;
const stNotifySelectLeitaiMode_ProtoModID stNotifySelectLeitaiMode::ProtoModID_MIN;
const stNotifySelectLeitaiMode_ProtoModID stNotifySelectLeitaiMode::ProtoModID_MAX;
const int stNotifySelectLeitaiMode::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stNotifySelectLeitaiMode_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifySelectLeitaiMode_ProtoFunID_descriptor_;
}
bool stNotifySelectLeitaiMode_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 23:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifySelectLeitaiMode_ProtoFunID stNotifySelectLeitaiMode::FunID;
const stNotifySelectLeitaiMode_ProtoFunID stNotifySelectLeitaiMode::ProtoFunID_MIN;
const stNotifySelectLeitaiMode_ProtoFunID stNotifySelectLeitaiMode::ProtoFunID_MAX;
const int stNotifySelectLeitaiMode::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
#endif  // !_MSC_VER

stNotifySelectLeitaiMode::stNotifySelectLeitaiMode()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stNotifySelectLeitaiMode::InitAsDefaultInstance() {
}

stNotifySelectLeitaiMode::stNotifySelectLeitaiMode(const stNotifySelectLeitaiMode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stNotifySelectLeitaiMode::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stNotifySelectLeitaiMode::~stNotifySelectLeitaiMode() {
  SharedDtor();
}

void stNotifySelectLeitaiMode::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stNotifySelectLeitaiMode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stNotifySelectLeitaiMode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifySelectLeitaiMode_descriptor_;
}

const stNotifySelectLeitaiMode& stNotifySelectLeitaiMode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stNotifySelectLeitaiMode* stNotifySelectLeitaiMode::default_instance_ = NULL;

stNotifySelectLeitaiMode* stNotifySelectLeitaiMode::New() const {
  return new stNotifySelectLeitaiMode;
}

void stNotifySelectLeitaiMode::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stNotifySelectLeitaiMode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void stNotifySelectLeitaiMode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stNotifySelectLeitaiMode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stNotifySelectLeitaiMode::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stNotifySelectLeitaiMode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stNotifySelectLeitaiMode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stNotifySelectLeitaiMode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stNotifySelectLeitaiMode::MergeFrom(const stNotifySelectLeitaiMode& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stNotifySelectLeitaiMode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stNotifySelectLeitaiMode::CopyFrom(const stNotifySelectLeitaiMode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stNotifySelectLeitaiMode::IsInitialized() const {

  return true;
}

void stNotifySelectLeitaiMode::Swap(stNotifySelectLeitaiMode* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stNotifySelectLeitaiMode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stNotifySelectLeitaiMode_descriptor_;
  metadata.reflection = stNotifySelectLeitaiMode_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stSelectLeiTaiMode_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSelectLeiTaiMode_ProtoModID_descriptor_;
}
bool stSelectLeiTaiMode_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSelectLeiTaiMode_ProtoModID stSelectLeiTaiMode::ModID;
const stSelectLeiTaiMode_ProtoModID stSelectLeiTaiMode::ProtoModID_MIN;
const stSelectLeiTaiMode_ProtoModID stSelectLeiTaiMode::ProtoModID_MAX;
const int stSelectLeiTaiMode::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSelectLeiTaiMode_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSelectLeiTaiMode_ProtoFunID_descriptor_;
}
bool stSelectLeiTaiMode_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 24:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSelectLeiTaiMode_ProtoFunID stSelectLeiTaiMode::FunID;
const stSelectLeiTaiMode_ProtoFunID stSelectLeiTaiMode::ProtoFunID_MIN;
const stSelectLeiTaiMode_ProtoFunID stSelectLeiTaiMode::ProtoFunID_MAX;
const int stSelectLeiTaiMode::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stSelectLeiTaiMode::kModeFieldNumber;
#endif  // !_MSC_VER

stSelectLeiTaiMode::stSelectLeiTaiMode()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSelectLeiTaiMode::InitAsDefaultInstance() {
}

stSelectLeiTaiMode::stSelectLeiTaiMode(const stSelectLeiTaiMode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSelectLeiTaiMode::SharedCtor() {
  _cached_size_ = 0;
  mode_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSelectLeiTaiMode::~stSelectLeiTaiMode() {
  SharedDtor();
}

void stSelectLeiTaiMode::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stSelectLeiTaiMode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSelectLeiTaiMode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSelectLeiTaiMode_descriptor_;
}

const stSelectLeiTaiMode& stSelectLeiTaiMode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stSelectLeiTaiMode* stSelectLeiTaiMode::default_instance_ = NULL;

stSelectLeiTaiMode* stSelectLeiTaiMode::New() const {
  return new stSelectLeiTaiMode;
}

void stSelectLeiTaiMode::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mode_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSelectLeiTaiMode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SortProto.eLeitaiMode mode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SortProto::eLeitaiMode_IsValid(value)) {
            set_mode(static_cast< ::SortProto::eLeitaiMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSelectLeiTaiMode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SortProto.eLeitaiMode mode = 1;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSelectLeiTaiMode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SortProto.eLeitaiMode mode = 1;
  if (has_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->mode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSelectLeiTaiMode::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SortProto.eLeitaiMode mode = 1;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSelectLeiTaiMode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSelectLeiTaiMode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSelectLeiTaiMode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSelectLeiTaiMode::MergeFrom(const stSelectLeiTaiMode& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mode()) {
      set_mode(from.mode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSelectLeiTaiMode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSelectLeiTaiMode::CopyFrom(const stSelectLeiTaiMode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSelectLeiTaiMode::IsInitialized() const {

  return true;
}

void stSelectLeiTaiMode::Swap(stSelectLeiTaiMode* other) {
  if (other != this) {
    std::swap(mode_, other->mode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSelectLeiTaiMode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSelectLeiTaiMode_descriptor_;
  metadata.reflection = stSelectLeiTaiMode_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stSelectLeiTaiModeResult_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSelectLeiTaiModeResult_eResult_descriptor_;
}
bool stSelectLeiTaiModeResult_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSelectLeiTaiModeResult_eResult stSelectLeiTaiModeResult::eSuccess;
const stSelectLeiTaiModeResult_eResult stSelectLeiTaiModeResult::eFail;
const stSelectLeiTaiModeResult_eResult stSelectLeiTaiModeResult::eResult_MIN;
const stSelectLeiTaiModeResult_eResult stSelectLeiTaiModeResult::eResult_MAX;
const int stSelectLeiTaiModeResult::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSelectLeiTaiModeResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSelectLeiTaiModeResult_ProtoModID_descriptor_;
}
bool stSelectLeiTaiModeResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSelectLeiTaiModeResult_ProtoModID stSelectLeiTaiModeResult::ModID;
const stSelectLeiTaiModeResult_ProtoModID stSelectLeiTaiModeResult::ProtoModID_MIN;
const stSelectLeiTaiModeResult_ProtoModID stSelectLeiTaiModeResult::ProtoModID_MAX;
const int stSelectLeiTaiModeResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSelectLeiTaiModeResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSelectLeiTaiModeResult_ProtoFunID_descriptor_;
}
bool stSelectLeiTaiModeResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 25:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSelectLeiTaiModeResult_ProtoFunID stSelectLeiTaiModeResult::FunID;
const stSelectLeiTaiModeResult_ProtoFunID stSelectLeiTaiModeResult::ProtoFunID_MIN;
const stSelectLeiTaiModeResult_ProtoFunID stSelectLeiTaiModeResult::ProtoFunID_MAX;
const int stSelectLeiTaiModeResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stSelectLeiTaiModeResult::kResultFieldNumber;
#endif  // !_MSC_VER

stSelectLeiTaiModeResult::stSelectLeiTaiModeResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSelectLeiTaiModeResult::InitAsDefaultInstance() {
}

stSelectLeiTaiModeResult::stSelectLeiTaiModeResult(const stSelectLeiTaiModeResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSelectLeiTaiModeResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSelectLeiTaiModeResult::~stSelectLeiTaiModeResult() {
  SharedDtor();
}

void stSelectLeiTaiModeResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stSelectLeiTaiModeResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSelectLeiTaiModeResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSelectLeiTaiModeResult_descriptor_;
}

const stSelectLeiTaiModeResult& stSelectLeiTaiModeResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stSelectLeiTaiModeResult* stSelectLeiTaiModeResult::default_instance_ = NULL;

stSelectLeiTaiModeResult* stSelectLeiTaiModeResult::New() const {
  return new stSelectLeiTaiModeResult;
}

void stSelectLeiTaiModeResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSelectLeiTaiModeResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SortProto.stSelectLeiTaiModeResult.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SortProto::stSelectLeiTaiModeResult_eResult_IsValid(value)) {
            set_result(static_cast< ::SortProto::stSelectLeiTaiModeResult_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSelectLeiTaiModeResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SortProto.stSelectLeiTaiModeResult.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSelectLeiTaiModeResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SortProto.stSelectLeiTaiModeResult.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSelectLeiTaiModeResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SortProto.stSelectLeiTaiModeResult.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSelectLeiTaiModeResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSelectLeiTaiModeResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSelectLeiTaiModeResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSelectLeiTaiModeResult::MergeFrom(const stSelectLeiTaiModeResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSelectLeiTaiModeResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSelectLeiTaiModeResult::CopyFrom(const stSelectLeiTaiModeResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSelectLeiTaiModeResult::IsInitialized() const {

  return true;
}

void stSelectLeiTaiModeResult::Swap(stSelectLeiTaiModeResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSelectLeiTaiModeResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSelectLeiTaiModeResult_descriptor_;
  metadata.reflection = stSelectLeiTaiModeResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stResetLeitaiInfo_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stResetLeitaiInfo_ProtoModID_descriptor_;
}
bool stResetLeitaiInfo_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stResetLeitaiInfo_ProtoModID stResetLeitaiInfo::ModID;
const stResetLeitaiInfo_ProtoModID stResetLeitaiInfo::ProtoModID_MIN;
const stResetLeitaiInfo_ProtoModID stResetLeitaiInfo::ProtoModID_MAX;
const int stResetLeitaiInfo::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stResetLeitaiInfo_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stResetLeitaiInfo_ProtoFunID_descriptor_;
}
bool stResetLeitaiInfo_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 26:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stResetLeitaiInfo_ProtoFunID stResetLeitaiInfo::FunID;
const stResetLeitaiInfo_ProtoFunID stResetLeitaiInfo::ProtoFunID_MIN;
const stResetLeitaiInfo_ProtoFunID stResetLeitaiInfo::ProtoFunID_MAX;
const int stResetLeitaiInfo::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stResetLeitaiInfo::kCharIDFieldNumber;
#endif  // !_MSC_VER

stResetLeitaiInfo::stResetLeitaiInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stResetLeitaiInfo::InitAsDefaultInstance() {
}

stResetLeitaiInfo::stResetLeitaiInfo(const stResetLeitaiInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stResetLeitaiInfo::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stResetLeitaiInfo::~stResetLeitaiInfo() {
  SharedDtor();
}

void stResetLeitaiInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stResetLeitaiInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stResetLeitaiInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stResetLeitaiInfo_descriptor_;
}

const stResetLeitaiInfo& stResetLeitaiInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stResetLeitaiInfo* stResetLeitaiInfo::default_instance_ = NULL;

stResetLeitaiInfo* stResetLeitaiInfo::New() const {
  return new stResetLeitaiInfo;
}

void stResetLeitaiInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stResetLeitaiInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stResetLeitaiInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stResetLeitaiInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stResetLeitaiInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stResetLeitaiInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stResetLeitaiInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stResetLeitaiInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stResetLeitaiInfo::MergeFrom(const stResetLeitaiInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stResetLeitaiInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stResetLeitaiInfo::CopyFrom(const stResetLeitaiInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stResetLeitaiInfo::IsInitialized() const {

  return true;
}

void stResetLeitaiInfo::Swap(stResetLeitaiInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stResetLeitaiInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stResetLeitaiInfo_descriptor_;
  metadata.reflection = stResetLeitaiInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stResetLeitaiInfoResult_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stResetLeitaiInfoResult_eResult_descriptor_;
}
bool stResetLeitaiInfoResult_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stResetLeitaiInfoResult_eResult stResetLeitaiInfoResult::eSuccess;
const stResetLeitaiInfoResult_eResult stResetLeitaiInfoResult::eNot_Enough_Diamond;
const stResetLeitaiInfoResult_eResult stResetLeitaiInfoResult::eNot_Time_Use_Out;
const stResetLeitaiInfoResult_eResult stResetLeitaiInfoResult::eResult_MIN;
const stResetLeitaiInfoResult_eResult stResetLeitaiInfoResult::eResult_MAX;
const int stResetLeitaiInfoResult::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stResetLeitaiInfoResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stResetLeitaiInfoResult_ProtoModID_descriptor_;
}
bool stResetLeitaiInfoResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stResetLeitaiInfoResult_ProtoModID stResetLeitaiInfoResult::ModID;
const stResetLeitaiInfoResult_ProtoModID stResetLeitaiInfoResult::ProtoModID_MIN;
const stResetLeitaiInfoResult_ProtoModID stResetLeitaiInfoResult::ProtoModID_MAX;
const int stResetLeitaiInfoResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stResetLeitaiInfoResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stResetLeitaiInfoResult_ProtoFunID_descriptor_;
}
bool stResetLeitaiInfoResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 27:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stResetLeitaiInfoResult_ProtoFunID stResetLeitaiInfoResult::FunID;
const stResetLeitaiInfoResult_ProtoFunID stResetLeitaiInfoResult::ProtoFunID_MIN;
const stResetLeitaiInfoResult_ProtoFunID stResetLeitaiInfoResult::ProtoFunID_MAX;
const int stResetLeitaiInfoResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stResetLeitaiInfoResult::kResultFieldNumber;
#endif  // !_MSC_VER

stResetLeitaiInfoResult::stResetLeitaiInfoResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stResetLeitaiInfoResult::InitAsDefaultInstance() {
}

stResetLeitaiInfoResult::stResetLeitaiInfoResult(const stResetLeitaiInfoResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stResetLeitaiInfoResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stResetLeitaiInfoResult::~stResetLeitaiInfoResult() {
  SharedDtor();
}

void stResetLeitaiInfoResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stResetLeitaiInfoResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stResetLeitaiInfoResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stResetLeitaiInfoResult_descriptor_;
}

const stResetLeitaiInfoResult& stResetLeitaiInfoResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stResetLeitaiInfoResult* stResetLeitaiInfoResult::default_instance_ = NULL;

stResetLeitaiInfoResult* stResetLeitaiInfoResult::New() const {
  return new stResetLeitaiInfoResult;
}

void stResetLeitaiInfoResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stResetLeitaiInfoResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SortProto.stResetLeitaiInfoResult.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SortProto::stResetLeitaiInfoResult_eResult_IsValid(value)) {
            set_result(static_cast< ::SortProto::stResetLeitaiInfoResult_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stResetLeitaiInfoResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SortProto.stResetLeitaiInfoResult.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stResetLeitaiInfoResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SortProto.stResetLeitaiInfoResult.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stResetLeitaiInfoResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SortProto.stResetLeitaiInfoResult.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stResetLeitaiInfoResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stResetLeitaiInfoResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stResetLeitaiInfoResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stResetLeitaiInfoResult::MergeFrom(const stResetLeitaiInfoResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stResetLeitaiInfoResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stResetLeitaiInfoResult::CopyFrom(const stResetLeitaiInfoResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stResetLeitaiInfoResult::IsInitialized() const {

  return true;
}

void stResetLeitaiInfoResult::Swap(stResetLeitaiInfoResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stResetLeitaiInfoResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stResetLeitaiInfoResult_descriptor_;
  metadata.reflection = stResetLeitaiInfoResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqDrawHeroSortList_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqDrawHeroSortList_ProtoModID_descriptor_;
}
bool stReqDrawHeroSortList_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqDrawHeroSortList_ProtoModID stReqDrawHeroSortList::ModID;
const stReqDrawHeroSortList_ProtoModID stReqDrawHeroSortList::ProtoModID_MIN;
const stReqDrawHeroSortList_ProtoModID stReqDrawHeroSortList::ProtoModID_MAX;
const int stReqDrawHeroSortList::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqDrawHeroSortList_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqDrawHeroSortList_ProtoFunID_descriptor_;
}
bool stReqDrawHeroSortList_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 28:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqDrawHeroSortList_ProtoFunID stReqDrawHeroSortList::FunID;
const stReqDrawHeroSortList_ProtoFunID stReqDrawHeroSortList::ProtoFunID_MIN;
const stReqDrawHeroSortList_ProtoFunID stReqDrawHeroSortList::ProtoFunID_MAX;
const int stReqDrawHeroSortList::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqDrawHeroSortList::kFromRankFieldNumber;
#endif  // !_MSC_VER

stReqDrawHeroSortList::stReqDrawHeroSortList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqDrawHeroSortList::InitAsDefaultInstance() {
}

stReqDrawHeroSortList::stReqDrawHeroSortList(const stReqDrawHeroSortList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqDrawHeroSortList::SharedCtor() {
  _cached_size_ = 0;
  fromrank_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqDrawHeroSortList::~stReqDrawHeroSortList() {
  SharedDtor();
}

void stReqDrawHeroSortList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqDrawHeroSortList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqDrawHeroSortList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqDrawHeroSortList_descriptor_;
}

const stReqDrawHeroSortList& stReqDrawHeroSortList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stReqDrawHeroSortList* stReqDrawHeroSortList::default_instance_ = NULL;

stReqDrawHeroSortList* stReqDrawHeroSortList::New() const {
  return new stReqDrawHeroSortList;
}

void stReqDrawHeroSortList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fromrank_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqDrawHeroSortList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 fromRank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fromrank_)));
          set_has_fromrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqDrawHeroSortList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 fromRank = 1;
  if (has_fromrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fromrank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqDrawHeroSortList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 fromRank = 1;
  if (has_fromrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fromrank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqDrawHeroSortList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 fromRank = 1;
    if (has_fromrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fromrank());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqDrawHeroSortList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqDrawHeroSortList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqDrawHeroSortList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqDrawHeroSortList::MergeFrom(const stReqDrawHeroSortList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fromrank()) {
      set_fromrank(from.fromrank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqDrawHeroSortList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqDrawHeroSortList::CopyFrom(const stReqDrawHeroSortList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqDrawHeroSortList::IsInitialized() const {

  return true;
}

void stReqDrawHeroSortList::Swap(stReqDrawHeroSortList* other) {
  if (other != this) {
    std::swap(fromrank_, other->fromrank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqDrawHeroSortList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqDrawHeroSortList_descriptor_;
  metadata.reflection = stReqDrawHeroSortList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stDrawHeroSortItem::kCharIDFieldNumber;
const int stDrawHeroSortItem::kNameFieldNumber;
const int stDrawHeroSortItem::kLevelFieldNumber;
const int stDrawHeroSortItem::kScoreFieldNumber;
const int stDrawHeroSortItem::kJobFieldNumber;
const int stDrawHeroSortItem::kSexFieldNumber;
#endif  // !_MSC_VER

stDrawHeroSortItem::stDrawHeroSortItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stDrawHeroSortItem::InitAsDefaultInstance() {
}

stDrawHeroSortItem::stDrawHeroSortItem(const stDrawHeroSortItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stDrawHeroSortItem::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0u;
  score_ = 0u;
  job_ = 0u;
  sex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stDrawHeroSortItem::~stDrawHeroSortItem() {
  SharedDtor();
}

void stDrawHeroSortItem::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void stDrawHeroSortItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stDrawHeroSortItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stDrawHeroSortItem_descriptor_;
}

const stDrawHeroSortItem& stDrawHeroSortItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stDrawHeroSortItem* stDrawHeroSortItem::default_instance_ = NULL;

stDrawHeroSortItem* stDrawHeroSortItem::New() const {
  return new stDrawHeroSortItem;
}

void stDrawHeroSortItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    level_ = 0u;
    score_ = 0u;
    job_ = 0u;
    sex_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stDrawHeroSortItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // optional uint32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_score;
        break;
      }

      // optional uint32 score = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_job;
        break;
      }

      // optional uint32 job = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &job_)));
          set_has_job();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_sex;
        break;
      }

      // optional uint32 sex = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stDrawHeroSortItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional uint32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->level(), output);
  }

  // optional uint32 score = 4;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->score(), output);
  }

  // optional uint32 job = 5;
  if (has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->job(), output);
  }

  // optional uint32 sex = 6;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->sex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stDrawHeroSortItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional uint32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->level(), target);
  }

  // optional uint32 score = 4;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->score(), target);
  }

  // optional uint32 job = 5;
  if (has_job()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->job(), target);
  }

  // optional uint32 sex = 6;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->sex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stDrawHeroSortItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 score = 4;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

    // optional uint32 job = 5;
    if (has_job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->job());
    }

    // optional uint32 sex = 6;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stDrawHeroSortItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stDrawHeroSortItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stDrawHeroSortItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stDrawHeroSortItem::MergeFrom(const stDrawHeroSortItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_job()) {
      set_job(from.job());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stDrawHeroSortItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stDrawHeroSortItem::CopyFrom(const stDrawHeroSortItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stDrawHeroSortItem::IsInitialized() const {

  return true;
}

void stDrawHeroSortItem::Swap(stDrawHeroSortItem* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(name_, other->name_);
    std::swap(level_, other->level_);
    std::swap(score_, other->score_);
    std::swap(job_, other->job_);
    std::swap(sex_, other->sex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stDrawHeroSortItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stDrawHeroSortItem_descriptor_;
  metadata.reflection = stDrawHeroSortItem_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stDrawHeroSortList_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stDrawHeroSortList_ProtoModID_descriptor_;
}
bool stDrawHeroSortList_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stDrawHeroSortList_ProtoModID stDrawHeroSortList::ModID;
const stDrawHeroSortList_ProtoModID stDrawHeroSortList::ProtoModID_MIN;
const stDrawHeroSortList_ProtoModID stDrawHeroSortList::ProtoModID_MAX;
const int stDrawHeroSortList::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stDrawHeroSortList_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stDrawHeroSortList_ProtoFunID_descriptor_;
}
bool stDrawHeroSortList_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 29:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stDrawHeroSortList_ProtoFunID stDrawHeroSortList::FunID;
const stDrawHeroSortList_ProtoFunID stDrawHeroSortList::ProtoFunID_MIN;
const stDrawHeroSortList_ProtoFunID stDrawHeroSortList::ProtoFunID_MAX;
const int stDrawHeroSortList::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stDrawHeroSortList::kBeginRankFieldNumber;
const int stDrawHeroSortList::kSortItemFieldNumber;
const int stDrawHeroSortList::kMyRankFieldNumber;
const int stDrawHeroSortList::kScoreFieldNumber;
#endif  // !_MSC_VER

stDrawHeroSortList::stDrawHeroSortList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stDrawHeroSortList::InitAsDefaultInstance() {
}

stDrawHeroSortList::stDrawHeroSortList(const stDrawHeroSortList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stDrawHeroSortList::SharedCtor() {
  _cached_size_ = 0;
  beginrank_ = 0u;
  myrank_ = 0u;
  score_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stDrawHeroSortList::~stDrawHeroSortList() {
  SharedDtor();
}

void stDrawHeroSortList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stDrawHeroSortList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stDrawHeroSortList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stDrawHeroSortList_descriptor_;
}

const stDrawHeroSortList& stDrawHeroSortList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stDrawHeroSortList* stDrawHeroSortList::default_instance_ = NULL;

stDrawHeroSortList* stDrawHeroSortList::New() const {
  return new stDrawHeroSortList;
}

void stDrawHeroSortList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    beginrank_ = 0u;
    myrank_ = 0u;
    score_ = 0u;
  }
  sortitem_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stDrawHeroSortList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 beginRank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &beginrank_)));
          set_has_beginrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sortItem;
        break;
      }

      // repeated .SortProto.stDrawHeroSortItem sortItem = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sortItem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sortitem()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sortItem;
        if (input->ExpectTag(24)) goto parse_myRank;
        break;
      }

      // optional uint32 myRank = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_myRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &myrank_)));
          set_has_myrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_score;
        break;
      }

      // optional uint32 score = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stDrawHeroSortList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 beginRank = 1;
  if (has_beginrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->beginrank(), output);
  }

  // repeated .SortProto.stDrawHeroSortItem sortItem = 2;
  for (int i = 0; i < this->sortitem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->sortitem(i), output);
  }

  // optional uint32 myRank = 3;
  if (has_myrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->myrank(), output);
  }

  // optional uint32 score = 4;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stDrawHeroSortList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 beginRank = 1;
  if (has_beginrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->beginrank(), target);
  }

  // repeated .SortProto.stDrawHeroSortItem sortItem = 2;
  for (int i = 0; i < this->sortitem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->sortitem(i), target);
  }

  // optional uint32 myRank = 3;
  if (has_myrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->myrank(), target);
  }

  // optional uint32 score = 4;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stDrawHeroSortList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 beginRank = 1;
    if (has_beginrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->beginrank());
    }

    // optional uint32 myRank = 3;
    if (has_myrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->myrank());
    }

    // optional uint32 score = 4;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

  }
  // repeated .SortProto.stDrawHeroSortItem sortItem = 2;
  total_size += 1 * this->sortitem_size();
  for (int i = 0; i < this->sortitem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sortitem(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stDrawHeroSortList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stDrawHeroSortList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stDrawHeroSortList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stDrawHeroSortList::MergeFrom(const stDrawHeroSortList& from) {
  GOOGLE_CHECK_NE(&from, this);
  sortitem_.MergeFrom(from.sortitem_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_beginrank()) {
      set_beginrank(from.beginrank());
    }
    if (from.has_myrank()) {
      set_myrank(from.myrank());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stDrawHeroSortList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stDrawHeroSortList::CopyFrom(const stDrawHeroSortList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stDrawHeroSortList::IsInitialized() const {

  return true;
}

void stDrawHeroSortList::Swap(stDrawHeroSortList* other) {
  if (other != this) {
    std::swap(beginrank_, other->beginrank_);
    sortitem_.Swap(&other->sortitem_);
    std::swap(myrank_, other->myrank_);
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stDrawHeroSortList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stDrawHeroSortList_descriptor_;
  metadata.reflection = stDrawHeroSortList_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqOne2OnePVPMatch_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqOne2OnePVPMatch_ProtoModID_descriptor_;
}
bool stReqOne2OnePVPMatch_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqOne2OnePVPMatch_ProtoModID stReqOne2OnePVPMatch::ModID;
const stReqOne2OnePVPMatch_ProtoModID stReqOne2OnePVPMatch::ProtoModID_MIN;
const stReqOne2OnePVPMatch_ProtoModID stReqOne2OnePVPMatch::ProtoModID_MAX;
const int stReqOne2OnePVPMatch::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqOne2OnePVPMatch_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqOne2OnePVPMatch_ProtoFunID_descriptor_;
}
bool stReqOne2OnePVPMatch_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 30:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqOne2OnePVPMatch_ProtoFunID stReqOne2OnePVPMatch::FunID;
const stReqOne2OnePVPMatch_ProtoFunID stReqOne2OnePVPMatch::ProtoFunID_MIN;
const stReqOne2OnePVPMatch_ProtoFunID stReqOne2OnePVPMatch::ProtoFunID_MAX;
const int stReqOne2OnePVPMatch::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqOne2OnePVPMatch::kCharIDFieldNumber;
#endif  // !_MSC_VER

stReqOne2OnePVPMatch::stReqOne2OnePVPMatch()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqOne2OnePVPMatch::InitAsDefaultInstance() {
}

stReqOne2OnePVPMatch::stReqOne2OnePVPMatch(const stReqOne2OnePVPMatch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqOne2OnePVPMatch::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqOne2OnePVPMatch::~stReqOne2OnePVPMatch() {
  SharedDtor();
}

void stReqOne2OnePVPMatch::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqOne2OnePVPMatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqOne2OnePVPMatch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqOne2OnePVPMatch_descriptor_;
}

const stReqOne2OnePVPMatch& stReqOne2OnePVPMatch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stReqOne2OnePVPMatch* stReqOne2OnePVPMatch::default_instance_ = NULL;

stReqOne2OnePVPMatch* stReqOne2OnePVPMatch::New() const {
  return new stReqOne2OnePVPMatch;
}

void stReqOne2OnePVPMatch::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqOne2OnePVPMatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqOne2OnePVPMatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqOne2OnePVPMatch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqOne2OnePVPMatch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqOne2OnePVPMatch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqOne2OnePVPMatch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqOne2OnePVPMatch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqOne2OnePVPMatch::MergeFrom(const stReqOne2OnePVPMatch& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqOne2OnePVPMatch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqOne2OnePVPMatch::CopyFrom(const stReqOne2OnePVPMatch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqOne2OnePVPMatch::IsInitialized() const {

  return true;
}

void stReqOne2OnePVPMatch::Swap(stReqOne2OnePVPMatch* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqOne2OnePVPMatch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqOne2OnePVPMatch_descriptor_;
  metadata.reflection = stReqOne2OnePVPMatch_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stOne2OnePVPMatchResult_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stOne2OnePVPMatchResult_eResult_descriptor_;
}
bool stOne2OnePVPMatchResult_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stOne2OnePVPMatchResult_eResult stOne2OnePVPMatchResult::eSucess;
const stOne2OnePVPMatchResult_eResult stOne2OnePVPMatchResult::eWait;
const stOne2OnePVPMatchResult_eResult stOne2OnePVPMatchResult::eFail;
const stOne2OnePVPMatchResult_eResult stOne2OnePVPMatchResult::eNot_In_Time;
const stOne2OnePVPMatchResult_eResult stOne2OnePVPMatchResult::eEquip;
const stOne2OnePVPMatchResult_eResult stOne2OnePVPMatchResult::eResult_MIN;
const stOne2OnePVPMatchResult_eResult stOne2OnePVPMatchResult::eResult_MAX;
const int stOne2OnePVPMatchResult::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stOne2OnePVPMatchResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stOne2OnePVPMatchResult_ProtoModID_descriptor_;
}
bool stOne2OnePVPMatchResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stOne2OnePVPMatchResult_ProtoModID stOne2OnePVPMatchResult::ModID;
const stOne2OnePVPMatchResult_ProtoModID stOne2OnePVPMatchResult::ProtoModID_MIN;
const stOne2OnePVPMatchResult_ProtoModID stOne2OnePVPMatchResult::ProtoModID_MAX;
const int stOne2OnePVPMatchResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stOne2OnePVPMatchResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stOne2OnePVPMatchResult_ProtoFunID_descriptor_;
}
bool stOne2OnePVPMatchResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 31:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stOne2OnePVPMatchResult_ProtoFunID stOne2OnePVPMatchResult::FunID;
const stOne2OnePVPMatchResult_ProtoFunID stOne2OnePVPMatchResult::ProtoFunID_MIN;
const stOne2OnePVPMatchResult_ProtoFunID stOne2OnePVPMatchResult::ProtoFunID_MAX;
const int stOne2OnePVPMatchResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stOne2OnePVPMatchResult::kResultFieldNumber;
#endif  // !_MSC_VER

stOne2OnePVPMatchResult::stOne2OnePVPMatchResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stOne2OnePVPMatchResult::InitAsDefaultInstance() {
}

stOne2OnePVPMatchResult::stOne2OnePVPMatchResult(const stOne2OnePVPMatchResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stOne2OnePVPMatchResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stOne2OnePVPMatchResult::~stOne2OnePVPMatchResult() {
  SharedDtor();
}

void stOne2OnePVPMatchResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stOne2OnePVPMatchResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stOne2OnePVPMatchResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stOne2OnePVPMatchResult_descriptor_;
}

const stOne2OnePVPMatchResult& stOne2OnePVPMatchResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stOne2OnePVPMatchResult* stOne2OnePVPMatchResult::default_instance_ = NULL;

stOne2OnePVPMatchResult* stOne2OnePVPMatchResult::New() const {
  return new stOne2OnePVPMatchResult;
}

void stOne2OnePVPMatchResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stOne2OnePVPMatchResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SortProto.stOne2OnePVPMatchResult.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SortProto::stOne2OnePVPMatchResult_eResult_IsValid(value)) {
            set_result(static_cast< ::SortProto::stOne2OnePVPMatchResult_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stOne2OnePVPMatchResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SortProto.stOne2OnePVPMatchResult.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stOne2OnePVPMatchResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SortProto.stOne2OnePVPMatchResult.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stOne2OnePVPMatchResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SortProto.stOne2OnePVPMatchResult.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stOne2OnePVPMatchResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stOne2OnePVPMatchResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stOne2OnePVPMatchResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stOne2OnePVPMatchResult::MergeFrom(const stOne2OnePVPMatchResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stOne2OnePVPMatchResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stOne2OnePVPMatchResult::CopyFrom(const stOne2OnePVPMatchResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stOne2OnePVPMatchResult::IsInitialized() const {

  return true;
}

void stOne2OnePVPMatchResult::Swap(stOne2OnePVPMatchResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stOne2OnePVPMatchResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stOne2OnePVPMatchResult_descriptor_;
  metadata.reflection = stOne2OnePVPMatchResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stCancelOne2OnePVPMatch_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCancelOne2OnePVPMatch_ProtoModID_descriptor_;
}
bool stCancelOne2OnePVPMatch_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stCancelOne2OnePVPMatch_ProtoModID stCancelOne2OnePVPMatch::ModID;
const stCancelOne2OnePVPMatch_ProtoModID stCancelOne2OnePVPMatch::ProtoModID_MIN;
const stCancelOne2OnePVPMatch_ProtoModID stCancelOne2OnePVPMatch::ProtoModID_MAX;
const int stCancelOne2OnePVPMatch::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stCancelOne2OnePVPMatch_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCancelOne2OnePVPMatch_ProtoFunID_descriptor_;
}
bool stCancelOne2OnePVPMatch_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 32:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stCancelOne2OnePVPMatch_ProtoFunID stCancelOne2OnePVPMatch::FunID;
const stCancelOne2OnePVPMatch_ProtoFunID stCancelOne2OnePVPMatch::ProtoFunID_MIN;
const stCancelOne2OnePVPMatch_ProtoFunID stCancelOne2OnePVPMatch::ProtoFunID_MAX;
const int stCancelOne2OnePVPMatch::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stCancelOne2OnePVPMatch::kCharIDFieldNumber;
#endif  // !_MSC_VER

stCancelOne2OnePVPMatch::stCancelOne2OnePVPMatch()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stCancelOne2OnePVPMatch::InitAsDefaultInstance() {
}

stCancelOne2OnePVPMatch::stCancelOne2OnePVPMatch(const stCancelOne2OnePVPMatch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stCancelOne2OnePVPMatch::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stCancelOne2OnePVPMatch::~stCancelOne2OnePVPMatch() {
  SharedDtor();
}

void stCancelOne2OnePVPMatch::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stCancelOne2OnePVPMatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stCancelOne2OnePVPMatch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCancelOne2OnePVPMatch_descriptor_;
}

const stCancelOne2OnePVPMatch& stCancelOne2OnePVPMatch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stCancelOne2OnePVPMatch* stCancelOne2OnePVPMatch::default_instance_ = NULL;

stCancelOne2OnePVPMatch* stCancelOne2OnePVPMatch::New() const {
  return new stCancelOne2OnePVPMatch;
}

void stCancelOne2OnePVPMatch::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stCancelOne2OnePVPMatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stCancelOne2OnePVPMatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stCancelOne2OnePVPMatch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stCancelOne2OnePVPMatch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stCancelOne2OnePVPMatch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stCancelOne2OnePVPMatch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stCancelOne2OnePVPMatch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stCancelOne2OnePVPMatch::MergeFrom(const stCancelOne2OnePVPMatch& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stCancelOne2OnePVPMatch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stCancelOne2OnePVPMatch::CopyFrom(const stCancelOne2OnePVPMatch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stCancelOne2OnePVPMatch::IsInitialized() const {

  return true;
}

void stCancelOne2OnePVPMatch::Swap(stCancelOne2OnePVPMatch* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stCancelOne2OnePVPMatch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stCancelOne2OnePVPMatch_descriptor_;
  metadata.reflection = stCancelOne2OnePVPMatch_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stCancelOne2OnePVPResult_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCancelOne2OnePVPResult_eResult_descriptor_;
}
bool stCancelOne2OnePVPResult_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stCancelOne2OnePVPResult_eResult stCancelOne2OnePVPResult::eSuccess;
const stCancelOne2OnePVPResult_eResult stCancelOne2OnePVPResult::eFail;
const stCancelOne2OnePVPResult_eResult stCancelOne2OnePVPResult::eResult_MIN;
const stCancelOne2OnePVPResult_eResult stCancelOne2OnePVPResult::eResult_MAX;
const int stCancelOne2OnePVPResult::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stCancelOne2OnePVPResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCancelOne2OnePVPResult_ProtoModID_descriptor_;
}
bool stCancelOne2OnePVPResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stCancelOne2OnePVPResult_ProtoModID stCancelOne2OnePVPResult::ModID;
const stCancelOne2OnePVPResult_ProtoModID stCancelOne2OnePVPResult::ProtoModID_MIN;
const stCancelOne2OnePVPResult_ProtoModID stCancelOne2OnePVPResult::ProtoModID_MAX;
const int stCancelOne2OnePVPResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stCancelOne2OnePVPResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCancelOne2OnePVPResult_ProtoFunID_descriptor_;
}
bool stCancelOne2OnePVPResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 33:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stCancelOne2OnePVPResult_ProtoFunID stCancelOne2OnePVPResult::FunID;
const stCancelOne2OnePVPResult_ProtoFunID stCancelOne2OnePVPResult::ProtoFunID_MIN;
const stCancelOne2OnePVPResult_ProtoFunID stCancelOne2OnePVPResult::ProtoFunID_MAX;
const int stCancelOne2OnePVPResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stCancelOne2OnePVPResult::kResultFieldNumber;
#endif  // !_MSC_VER

stCancelOne2OnePVPResult::stCancelOne2OnePVPResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stCancelOne2OnePVPResult::InitAsDefaultInstance() {
}

stCancelOne2OnePVPResult::stCancelOne2OnePVPResult(const stCancelOne2OnePVPResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stCancelOne2OnePVPResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stCancelOne2OnePVPResult::~stCancelOne2OnePVPResult() {
  SharedDtor();
}

void stCancelOne2OnePVPResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stCancelOne2OnePVPResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stCancelOne2OnePVPResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCancelOne2OnePVPResult_descriptor_;
}

const stCancelOne2OnePVPResult& stCancelOne2OnePVPResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stCancelOne2OnePVPResult* stCancelOne2OnePVPResult::default_instance_ = NULL;

stCancelOne2OnePVPResult* stCancelOne2OnePVPResult::New() const {
  return new stCancelOne2OnePVPResult;
}

void stCancelOne2OnePVPResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stCancelOne2OnePVPResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SortProto.stCancelOne2OnePVPResult.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SortProto::stCancelOne2OnePVPResult_eResult_IsValid(value)) {
            set_result(static_cast< ::SortProto::stCancelOne2OnePVPResult_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stCancelOne2OnePVPResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SortProto.stCancelOne2OnePVPResult.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stCancelOne2OnePVPResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SortProto.stCancelOne2OnePVPResult.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stCancelOne2OnePVPResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SortProto.stCancelOne2OnePVPResult.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stCancelOne2OnePVPResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stCancelOne2OnePVPResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stCancelOne2OnePVPResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stCancelOne2OnePVPResult::MergeFrom(const stCancelOne2OnePVPResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stCancelOne2OnePVPResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stCancelOne2OnePVPResult::CopyFrom(const stCancelOne2OnePVPResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stCancelOne2OnePVPResult::IsInitialized() const {

  return true;
}

void stCancelOne2OnePVPResult::Swap(stCancelOne2OnePVPResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stCancelOne2OnePVPResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stCancelOne2OnePVPResult_descriptor_;
  metadata.reflection = stCancelOne2OnePVPResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqMySortListInfo_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqMySortListInfo_ProtoModID_descriptor_;
}
bool stReqMySortListInfo_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqMySortListInfo_ProtoModID stReqMySortListInfo::ModID;
const stReqMySortListInfo_ProtoModID stReqMySortListInfo::ProtoModID_MIN;
const stReqMySortListInfo_ProtoModID stReqMySortListInfo::ProtoModID_MAX;
const int stReqMySortListInfo::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqMySortListInfo_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqMySortListInfo_ProtoFunID_descriptor_;
}
bool stReqMySortListInfo_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 34:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqMySortListInfo_ProtoFunID stReqMySortListInfo::FunID;
const stReqMySortListInfo_ProtoFunID stReqMySortListInfo::ProtoFunID_MIN;
const stReqMySortListInfo_ProtoFunID stReqMySortListInfo::ProtoFunID_MAX;
const int stReqMySortListInfo::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqMySortListInfo::kCharIDFieldNumber;
#endif  // !_MSC_VER

stReqMySortListInfo::stReqMySortListInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqMySortListInfo::InitAsDefaultInstance() {
}

stReqMySortListInfo::stReqMySortListInfo(const stReqMySortListInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqMySortListInfo::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqMySortListInfo::~stReqMySortListInfo() {
  SharedDtor();
}

void stReqMySortListInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqMySortListInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqMySortListInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqMySortListInfo_descriptor_;
}

const stReqMySortListInfo& stReqMySortListInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stReqMySortListInfo* stReqMySortListInfo::default_instance_ = NULL;

stReqMySortListInfo* stReqMySortListInfo::New() const {
  return new stReqMySortListInfo;
}

void stReqMySortListInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqMySortListInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqMySortListInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqMySortListInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqMySortListInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqMySortListInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqMySortListInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqMySortListInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqMySortListInfo::MergeFrom(const stReqMySortListInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqMySortListInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqMySortListInfo::CopyFrom(const stReqMySortListInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqMySortListInfo::IsInitialized() const {

  return true;
}

void stReqMySortListInfo::Swap(stReqMySortListInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqMySortListInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqMySortListInfo_descriptor_;
  metadata.reflection = stReqMySortListInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRetMySortListInfo_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetMySortListInfo_ProtoModID_descriptor_;
}
bool stRetMySortListInfo_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetMySortListInfo_ProtoModID stRetMySortListInfo::ModID;
const stRetMySortListInfo_ProtoModID stRetMySortListInfo::ProtoModID_MIN;
const stRetMySortListInfo_ProtoModID stRetMySortListInfo::ProtoModID_MAX;
const int stRetMySortListInfo::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetMySortListInfo_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetMySortListInfo_ProtoFunID_descriptor_;
}
bool stRetMySortListInfo_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 35:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetMySortListInfo_ProtoFunID stRetMySortListInfo::FunID;
const stRetMySortListInfo_ProtoFunID stRetMySortListInfo::ProtoFunID_MIN;
const stRetMySortListInfo_ProtoFunID stRetMySortListInfo::ProtoFunID_MAX;
const int stRetMySortListInfo::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRetMySortListInfo::kOne2OnePVPRankFieldNumber;
const int stRetMySortListInfo::kArenaPKRankFieldNumber;
const int stRetMySortListInfo::kCopymapRankFieldNumber;
const int stRetMySortListInfo::kBattlePowerRankFieldNumber;
#endif  // !_MSC_VER

stRetMySortListInfo::stRetMySortListInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRetMySortListInfo::InitAsDefaultInstance() {
}

stRetMySortListInfo::stRetMySortListInfo(const stRetMySortListInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRetMySortListInfo::SharedCtor() {
  _cached_size_ = 0;
  one2onepvprank_ = 0u;
  arenapkrank_ = 0u;
  copymaprank_ = 0u;
  battlepowerrank_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRetMySortListInfo::~stRetMySortListInfo() {
  SharedDtor();
}

void stRetMySortListInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRetMySortListInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRetMySortListInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetMySortListInfo_descriptor_;
}

const stRetMySortListInfo& stRetMySortListInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stRetMySortListInfo* stRetMySortListInfo::default_instance_ = NULL;

stRetMySortListInfo* stRetMySortListInfo::New() const {
  return new stRetMySortListInfo;
}

void stRetMySortListInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    one2onepvprank_ = 0u;
    arenapkrank_ = 0u;
    copymaprank_ = 0u;
    battlepowerrank_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRetMySortListInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 one2onePVPRank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &one2onepvprank_)));
          set_has_one2onepvprank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_arenaPKRank;
        break;
      }

      // optional uint32 arenaPKRank = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_arenaPKRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &arenapkrank_)));
          set_has_arenapkrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_copymapRank;
        break;
      }

      // optional uint32 copymapRank = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_copymapRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &copymaprank_)));
          set_has_copymaprank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_battlePowerRank;
        break;
      }

      // optional uint32 battlePowerRank = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battlePowerRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battlepowerrank_)));
          set_has_battlepowerrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRetMySortListInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 one2onePVPRank = 1;
  if (has_one2onepvprank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->one2onepvprank(), output);
  }

  // optional uint32 arenaPKRank = 2;
  if (has_arenapkrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->arenapkrank(), output);
  }

  // optional uint32 copymapRank = 3;
  if (has_copymaprank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->copymaprank(), output);
  }

  // optional uint32 battlePowerRank = 4;
  if (has_battlepowerrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->battlepowerrank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRetMySortListInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 one2onePVPRank = 1;
  if (has_one2onepvprank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->one2onepvprank(), target);
  }

  // optional uint32 arenaPKRank = 2;
  if (has_arenapkrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->arenapkrank(), target);
  }

  // optional uint32 copymapRank = 3;
  if (has_copymaprank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->copymaprank(), target);
  }

  // optional uint32 battlePowerRank = 4;
  if (has_battlepowerrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->battlepowerrank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRetMySortListInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 one2onePVPRank = 1;
    if (has_one2onepvprank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->one2onepvprank());
    }

    // optional uint32 arenaPKRank = 2;
    if (has_arenapkrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->arenapkrank());
    }

    // optional uint32 copymapRank = 3;
    if (has_copymaprank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->copymaprank());
    }

    // optional uint32 battlePowerRank = 4;
    if (has_battlepowerrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battlepowerrank());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRetMySortListInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRetMySortListInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRetMySortListInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRetMySortListInfo::MergeFrom(const stRetMySortListInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_one2onepvprank()) {
      set_one2onepvprank(from.one2onepvprank());
    }
    if (from.has_arenapkrank()) {
      set_arenapkrank(from.arenapkrank());
    }
    if (from.has_copymaprank()) {
      set_copymaprank(from.copymaprank());
    }
    if (from.has_battlepowerrank()) {
      set_battlepowerrank(from.battlepowerrank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRetMySortListInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRetMySortListInfo::CopyFrom(const stRetMySortListInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRetMySortListInfo::IsInitialized() const {

  return true;
}

void stRetMySortListInfo::Swap(stRetMySortListInfo* other) {
  if (other != this) {
    std::swap(one2onepvprank_, other->one2onepvprank_);
    std::swap(arenapkrank_, other->arenapkrank_);
    std::swap(copymaprank_, other->copymaprank_);
    std::swap(battlepowerrank_, other->battlepowerrank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRetMySortListInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRetMySortListInfo_descriptor_;
  metadata.reflection = stRetMySortListInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stLeitaiMoveHero2BattlePos_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stLeitaiMoveHero2BattlePos_ProtoModID_descriptor_;
}
bool stLeitaiMoveHero2BattlePos_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stLeitaiMoveHero2BattlePos_ProtoModID stLeitaiMoveHero2BattlePos::ModID;
const stLeitaiMoveHero2BattlePos_ProtoModID stLeitaiMoveHero2BattlePos::ProtoModID_MIN;
const stLeitaiMoveHero2BattlePos_ProtoModID stLeitaiMoveHero2BattlePos::ProtoModID_MAX;
const int stLeitaiMoveHero2BattlePos::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stLeitaiMoveHero2BattlePos_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stLeitaiMoveHero2BattlePos_ProtoFunID_descriptor_;
}
bool stLeitaiMoveHero2BattlePos_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 36:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stLeitaiMoveHero2BattlePos_ProtoFunID stLeitaiMoveHero2BattlePos::FunID;
const stLeitaiMoveHero2BattlePos_ProtoFunID stLeitaiMoveHero2BattlePos::ProtoFunID_MIN;
const stLeitaiMoveHero2BattlePos_ProtoFunID stLeitaiMoveHero2BattlePos::ProtoFunID_MAX;
const int stLeitaiMoveHero2BattlePos::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stLeitaiMoveHero2BattlePos::kHeroIDFieldNumber;
const int stLeitaiMoveHero2BattlePos::kPosFieldNumber;
#endif  // !_MSC_VER

stLeitaiMoveHero2BattlePos::stLeitaiMoveHero2BattlePos()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stLeitaiMoveHero2BattlePos::InitAsDefaultInstance() {
}

stLeitaiMoveHero2BattlePos::stLeitaiMoveHero2BattlePos(const stLeitaiMoveHero2BattlePos& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stLeitaiMoveHero2BattlePos::SharedCtor() {
  _cached_size_ = 0;
  heroid_ = 0u;
  pos_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stLeitaiMoveHero2BattlePos::~stLeitaiMoveHero2BattlePos() {
  SharedDtor();
}

void stLeitaiMoveHero2BattlePos::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stLeitaiMoveHero2BattlePos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stLeitaiMoveHero2BattlePos::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stLeitaiMoveHero2BattlePos_descriptor_;
}

const stLeitaiMoveHero2BattlePos& stLeitaiMoveHero2BattlePos::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stLeitaiMoveHero2BattlePos* stLeitaiMoveHero2BattlePos::default_instance_ = NULL;

stLeitaiMoveHero2BattlePos* stLeitaiMoveHero2BattlePos::New() const {
  return new stLeitaiMoveHero2BattlePos;
}

void stLeitaiMoveHero2BattlePos::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    heroid_ = 0u;
    pos_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stLeitaiMoveHero2BattlePos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 heroID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heroid_)));
          set_has_heroid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pos;
        break;
      }

      // optional uint32 pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stLeitaiMoveHero2BattlePos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 heroID = 1;
  if (has_heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->heroid(), output);
  }

  // optional uint32 pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stLeitaiMoveHero2BattlePos::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 heroID = 1;
  if (has_heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->heroid(), target);
  }

  // optional uint32 pos = 2;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stLeitaiMoveHero2BattlePos::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 heroID = 1;
    if (has_heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heroid());
    }

    // optional uint32 pos = 2;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stLeitaiMoveHero2BattlePos::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stLeitaiMoveHero2BattlePos* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stLeitaiMoveHero2BattlePos*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stLeitaiMoveHero2BattlePos::MergeFrom(const stLeitaiMoveHero2BattlePos& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_heroid()) {
      set_heroid(from.heroid());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stLeitaiMoveHero2BattlePos::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stLeitaiMoveHero2BattlePos::CopyFrom(const stLeitaiMoveHero2BattlePos& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stLeitaiMoveHero2BattlePos::IsInitialized() const {

  return true;
}

void stLeitaiMoveHero2BattlePos::Swap(stLeitaiMoveHero2BattlePos* other) {
  if (other != this) {
    std::swap(heroid_, other->heroid_);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stLeitaiMoveHero2BattlePos::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stLeitaiMoveHero2BattlePos_descriptor_;
  metadata.reflection = stLeitaiMoveHero2BattlePos_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stLeitaiMoveHero2BattlePosError_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stLeitaiMoveHero2BattlePosError_eResult_descriptor_;
}
bool stLeitaiMoveHero2BattlePosError_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stLeitaiMoveHero2BattlePosError_eResult stLeitaiMoveHero2BattlePosError::eSend_Msg_Param_Error;
const stLeitaiMoveHero2BattlePosError_eResult stLeitaiMoveHero2BattlePosError::ePos_The_Same;
const stLeitaiMoveHero2BattlePosError_eResult stLeitaiMoveHero2BattlePosError::eResult_MIN;
const stLeitaiMoveHero2BattlePosError_eResult stLeitaiMoveHero2BattlePosError::eResult_MAX;
const int stLeitaiMoveHero2BattlePosError::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stLeitaiMoveHero2BattlePosError_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stLeitaiMoveHero2BattlePosError_ProtoModID_descriptor_;
}
bool stLeitaiMoveHero2BattlePosError_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stLeitaiMoveHero2BattlePosError_ProtoModID stLeitaiMoveHero2BattlePosError::ModID;
const stLeitaiMoveHero2BattlePosError_ProtoModID stLeitaiMoveHero2BattlePosError::ProtoModID_MIN;
const stLeitaiMoveHero2BattlePosError_ProtoModID stLeitaiMoveHero2BattlePosError::ProtoModID_MAX;
const int stLeitaiMoveHero2BattlePosError::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stLeitaiMoveHero2BattlePosError_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stLeitaiMoveHero2BattlePosError_ProtoFunID_descriptor_;
}
bool stLeitaiMoveHero2BattlePosError_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 37:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stLeitaiMoveHero2BattlePosError_ProtoFunID stLeitaiMoveHero2BattlePosError::FunID;
const stLeitaiMoveHero2BattlePosError_ProtoFunID stLeitaiMoveHero2BattlePosError::ProtoFunID_MIN;
const stLeitaiMoveHero2BattlePosError_ProtoFunID stLeitaiMoveHero2BattlePosError::ProtoFunID_MAX;
const int stLeitaiMoveHero2BattlePosError::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stLeitaiMoveHero2BattlePosError::kResultFieldNumber;
#endif  // !_MSC_VER

stLeitaiMoveHero2BattlePosError::stLeitaiMoveHero2BattlePosError()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stLeitaiMoveHero2BattlePosError::InitAsDefaultInstance() {
}

stLeitaiMoveHero2BattlePosError::stLeitaiMoveHero2BattlePosError(const stLeitaiMoveHero2BattlePosError& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stLeitaiMoveHero2BattlePosError::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stLeitaiMoveHero2BattlePosError::~stLeitaiMoveHero2BattlePosError() {
  SharedDtor();
}

void stLeitaiMoveHero2BattlePosError::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stLeitaiMoveHero2BattlePosError::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stLeitaiMoveHero2BattlePosError::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stLeitaiMoveHero2BattlePosError_descriptor_;
}

const stLeitaiMoveHero2BattlePosError& stLeitaiMoveHero2BattlePosError::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stLeitaiMoveHero2BattlePosError* stLeitaiMoveHero2BattlePosError::default_instance_ = NULL;

stLeitaiMoveHero2BattlePosError* stLeitaiMoveHero2BattlePosError::New() const {
  return new stLeitaiMoveHero2BattlePosError;
}

void stLeitaiMoveHero2BattlePosError::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stLeitaiMoveHero2BattlePosError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SortProto.stLeitaiMoveHero2BattlePosError.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SortProto::stLeitaiMoveHero2BattlePosError_eResult_IsValid(value)) {
            set_result(static_cast< ::SortProto::stLeitaiMoveHero2BattlePosError_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stLeitaiMoveHero2BattlePosError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SortProto.stLeitaiMoveHero2BattlePosError.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stLeitaiMoveHero2BattlePosError::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SortProto.stLeitaiMoveHero2BattlePosError.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stLeitaiMoveHero2BattlePosError::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SortProto.stLeitaiMoveHero2BattlePosError.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stLeitaiMoveHero2BattlePosError::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stLeitaiMoveHero2BattlePosError* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stLeitaiMoveHero2BattlePosError*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stLeitaiMoveHero2BattlePosError::MergeFrom(const stLeitaiMoveHero2BattlePosError& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stLeitaiMoveHero2BattlePosError::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stLeitaiMoveHero2BattlePosError::CopyFrom(const stLeitaiMoveHero2BattlePosError& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stLeitaiMoveHero2BattlePosError::IsInitialized() const {

  return true;
}

void stLeitaiMoveHero2BattlePosError::Swap(stLeitaiMoveHero2BattlePosError* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stLeitaiMoveHero2BattlePosError::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stLeitaiMoveHero2BattlePosError_descriptor_;
  metadata.reflection = stLeitaiMoveHero2BattlePosError_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stLeitaiCancelGoOutForBattle_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stLeitaiCancelGoOutForBattle_ProtoModID_descriptor_;
}
bool stLeitaiCancelGoOutForBattle_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stLeitaiCancelGoOutForBattle_ProtoModID stLeitaiCancelGoOutForBattle::ModID;
const stLeitaiCancelGoOutForBattle_ProtoModID stLeitaiCancelGoOutForBattle::ProtoModID_MIN;
const stLeitaiCancelGoOutForBattle_ProtoModID stLeitaiCancelGoOutForBattle::ProtoModID_MAX;
const int stLeitaiCancelGoOutForBattle::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stLeitaiCancelGoOutForBattle_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stLeitaiCancelGoOutForBattle_ProtoFunID_descriptor_;
}
bool stLeitaiCancelGoOutForBattle_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 38:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stLeitaiCancelGoOutForBattle_ProtoFunID stLeitaiCancelGoOutForBattle::FunID;
const stLeitaiCancelGoOutForBattle_ProtoFunID stLeitaiCancelGoOutForBattle::ProtoFunID_MIN;
const stLeitaiCancelGoOutForBattle_ProtoFunID stLeitaiCancelGoOutForBattle::ProtoFunID_MAX;
const int stLeitaiCancelGoOutForBattle::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stLeitaiCancelGoOutForBattle::kPosFieldNumber;
#endif  // !_MSC_VER

stLeitaiCancelGoOutForBattle::stLeitaiCancelGoOutForBattle()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stLeitaiCancelGoOutForBattle::InitAsDefaultInstance() {
}

stLeitaiCancelGoOutForBattle::stLeitaiCancelGoOutForBattle(const stLeitaiCancelGoOutForBattle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stLeitaiCancelGoOutForBattle::SharedCtor() {
  _cached_size_ = 0;
  pos_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stLeitaiCancelGoOutForBattle::~stLeitaiCancelGoOutForBattle() {
  SharedDtor();
}

void stLeitaiCancelGoOutForBattle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stLeitaiCancelGoOutForBattle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stLeitaiCancelGoOutForBattle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stLeitaiCancelGoOutForBattle_descriptor_;
}

const stLeitaiCancelGoOutForBattle& stLeitaiCancelGoOutForBattle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stLeitaiCancelGoOutForBattle* stLeitaiCancelGoOutForBattle::default_instance_ = NULL;

stLeitaiCancelGoOutForBattle* stLeitaiCancelGoOutForBattle::New() const {
  return new stLeitaiCancelGoOutForBattle;
}

void stLeitaiCancelGoOutForBattle::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pos_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stLeitaiCancelGoOutForBattle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stLeitaiCancelGoOutForBattle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 pos = 1;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stLeitaiCancelGoOutForBattle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 pos = 1;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stLeitaiCancelGoOutForBattle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 pos = 1;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stLeitaiCancelGoOutForBattle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stLeitaiCancelGoOutForBattle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stLeitaiCancelGoOutForBattle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stLeitaiCancelGoOutForBattle::MergeFrom(const stLeitaiCancelGoOutForBattle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      set_pos(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stLeitaiCancelGoOutForBattle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stLeitaiCancelGoOutForBattle::CopyFrom(const stLeitaiCancelGoOutForBattle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stLeitaiCancelGoOutForBattle::IsInitialized() const {

  return true;
}

void stLeitaiCancelGoOutForBattle::Swap(stLeitaiCancelGoOutForBattle* other) {
  if (other != this) {
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stLeitaiCancelGoOutForBattle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stLeitaiCancelGoOutForBattle_descriptor_;
  metadata.reflection = stLeitaiCancelGoOutForBattle_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stLeitaiCancelGoOutForBattleResult_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stLeitaiCancelGoOutForBattleResult_eResult_descriptor_;
}
bool stLeitaiCancelGoOutForBattleResult_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stLeitaiCancelGoOutForBattleResult_eResult stLeitaiCancelGoOutForBattleResult::sSUCCESS;
const stLeitaiCancelGoOutForBattleResult_eResult stLeitaiCancelGoOutForBattleResult::eHAS_NO_HERO_IN_THE_POS;
const stLeitaiCancelGoOutForBattleResult_eResult stLeitaiCancelGoOutForBattleResult::eResult_MIN;
const stLeitaiCancelGoOutForBattleResult_eResult stLeitaiCancelGoOutForBattleResult::eResult_MAX;
const int stLeitaiCancelGoOutForBattleResult::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stLeitaiCancelGoOutForBattleResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stLeitaiCancelGoOutForBattleResult_ProtoModID_descriptor_;
}
bool stLeitaiCancelGoOutForBattleResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stLeitaiCancelGoOutForBattleResult_ProtoModID stLeitaiCancelGoOutForBattleResult::ModID;
const stLeitaiCancelGoOutForBattleResult_ProtoModID stLeitaiCancelGoOutForBattleResult::ProtoModID_MIN;
const stLeitaiCancelGoOutForBattleResult_ProtoModID stLeitaiCancelGoOutForBattleResult::ProtoModID_MAX;
const int stLeitaiCancelGoOutForBattleResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stLeitaiCancelGoOutForBattleResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stLeitaiCancelGoOutForBattleResult_ProtoFunID_descriptor_;
}
bool stLeitaiCancelGoOutForBattleResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 39:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stLeitaiCancelGoOutForBattleResult_ProtoFunID stLeitaiCancelGoOutForBattleResult::FunID;
const stLeitaiCancelGoOutForBattleResult_ProtoFunID stLeitaiCancelGoOutForBattleResult::ProtoFunID_MIN;
const stLeitaiCancelGoOutForBattleResult_ProtoFunID stLeitaiCancelGoOutForBattleResult::ProtoFunID_MAX;
const int stLeitaiCancelGoOutForBattleResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stLeitaiCancelGoOutForBattleResult::kResultFieldNumber;
#endif  // !_MSC_VER

stLeitaiCancelGoOutForBattleResult::stLeitaiCancelGoOutForBattleResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stLeitaiCancelGoOutForBattleResult::InitAsDefaultInstance() {
}

stLeitaiCancelGoOutForBattleResult::stLeitaiCancelGoOutForBattleResult(const stLeitaiCancelGoOutForBattleResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stLeitaiCancelGoOutForBattleResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stLeitaiCancelGoOutForBattleResult::~stLeitaiCancelGoOutForBattleResult() {
  SharedDtor();
}

void stLeitaiCancelGoOutForBattleResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stLeitaiCancelGoOutForBattleResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stLeitaiCancelGoOutForBattleResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stLeitaiCancelGoOutForBattleResult_descriptor_;
}

const stLeitaiCancelGoOutForBattleResult& stLeitaiCancelGoOutForBattleResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stLeitaiCancelGoOutForBattleResult* stLeitaiCancelGoOutForBattleResult::default_instance_ = NULL;

stLeitaiCancelGoOutForBattleResult* stLeitaiCancelGoOutForBattleResult::New() const {
  return new stLeitaiCancelGoOutForBattleResult;
}

void stLeitaiCancelGoOutForBattleResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stLeitaiCancelGoOutForBattleResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SortProto.stLeitaiCancelGoOutForBattleResult.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SortProto::stLeitaiCancelGoOutForBattleResult_eResult_IsValid(value)) {
            set_result(static_cast< ::SortProto::stLeitaiCancelGoOutForBattleResult_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stLeitaiCancelGoOutForBattleResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SortProto.stLeitaiCancelGoOutForBattleResult.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stLeitaiCancelGoOutForBattleResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SortProto.stLeitaiCancelGoOutForBattleResult.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stLeitaiCancelGoOutForBattleResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SortProto.stLeitaiCancelGoOutForBattleResult.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stLeitaiCancelGoOutForBattleResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stLeitaiCancelGoOutForBattleResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stLeitaiCancelGoOutForBattleResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stLeitaiCancelGoOutForBattleResult::MergeFrom(const stLeitaiCancelGoOutForBattleResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stLeitaiCancelGoOutForBattleResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stLeitaiCancelGoOutForBattleResult::CopyFrom(const stLeitaiCancelGoOutForBattleResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stLeitaiCancelGoOutForBattleResult::IsInitialized() const {

  return true;
}

void stLeitaiCancelGoOutForBattleResult::Swap(stLeitaiCancelGoOutForBattleResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stLeitaiCancelGoOutForBattleResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stLeitaiCancelGoOutForBattleResult_descriptor_;
  metadata.reflection = stLeitaiCancelGoOutForBattleResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stCommitArenaResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCommitArenaResult_ProtoModID_descriptor_;
}
bool stCommitArenaResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stCommitArenaResult_ProtoModID stCommitArenaResult::ModID;
const stCommitArenaResult_ProtoModID stCommitArenaResult::ProtoModID_MIN;
const stCommitArenaResult_ProtoModID stCommitArenaResult::ProtoModID_MAX;
const int stCommitArenaResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stCommitArenaResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCommitArenaResult_ProtoFunID_descriptor_;
}
bool stCommitArenaResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 40:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stCommitArenaResult_ProtoFunID stCommitArenaResult::FunID;
const stCommitArenaResult_ProtoFunID stCommitArenaResult::ProtoFunID_MIN;
const stCommitArenaResult_ProtoFunID stCommitArenaResult::ProtoFunID_MAX;
const int stCommitArenaResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stCommitArenaResult::kWinFieldNumber;
#endif  // !_MSC_VER

stCommitArenaResult::stCommitArenaResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stCommitArenaResult::InitAsDefaultInstance() {
}

stCommitArenaResult::stCommitArenaResult(const stCommitArenaResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stCommitArenaResult::SharedCtor() {
  _cached_size_ = 0;
  win_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stCommitArenaResult::~stCommitArenaResult() {
  SharedDtor();
}

void stCommitArenaResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stCommitArenaResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stCommitArenaResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCommitArenaResult_descriptor_;
}

const stCommitArenaResult& stCommitArenaResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stCommitArenaResult* stCommitArenaResult::default_instance_ = NULL;

stCommitArenaResult* stCommitArenaResult::New() const {
  return new stCommitArenaResult;
}

void stCommitArenaResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    win_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stCommitArenaResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool win = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &win_)));
          set_has_win();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stCommitArenaResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool win = 1;
  if (has_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->win(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stCommitArenaResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool win = 1;
  if (has_win()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->win(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stCommitArenaResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool win = 1;
    if (has_win()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stCommitArenaResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stCommitArenaResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stCommitArenaResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stCommitArenaResult::MergeFrom(const stCommitArenaResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_win()) {
      set_win(from.win());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stCommitArenaResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stCommitArenaResult::CopyFrom(const stCommitArenaResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stCommitArenaResult::IsInitialized() const {

  return true;
}

void stCommitArenaResult::Swap(stCommitArenaResult* other) {
  if (other != this) {
    std::swap(win_, other->win_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stCommitArenaResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stCommitArenaResult_descriptor_;
  metadata.reflection = stCommitArenaResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRetCommintArenaResult_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetCommintArenaResult_eResult_descriptor_;
}
bool stRetCommintArenaResult_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetCommintArenaResult_eResult stRetCommintArenaResult::SUCCESS;
const stRetCommintArenaResult_eResult stRetCommintArenaResult::COND_NOT_MEET;
const stRetCommintArenaResult_eResult stRetCommintArenaResult::INNER_ERROR;
const stRetCommintArenaResult_eResult stRetCommintArenaResult::ROLE_LV_TOO_LOW;
const stRetCommintArenaResult_eResult stRetCommintArenaResult::LILIAN_NOT_ENOUGH;
const stRetCommintArenaResult_eResult stRetCommintArenaResult::eResult_MIN;
const stRetCommintArenaResult_eResult stRetCommintArenaResult::eResult_MAX;
const int stRetCommintArenaResult::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetCommintArenaResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetCommintArenaResult_ProtoModID_descriptor_;
}
bool stRetCommintArenaResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetCommintArenaResult_ProtoModID stRetCommintArenaResult::ModID;
const stRetCommintArenaResult_ProtoModID stRetCommintArenaResult::ProtoModID_MIN;
const stRetCommintArenaResult_ProtoModID stRetCommintArenaResult::ProtoModID_MAX;
const int stRetCommintArenaResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetCommintArenaResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetCommintArenaResult_ProtoFunID_descriptor_;
}
bool stRetCommintArenaResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 40:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetCommintArenaResult_ProtoFunID stRetCommintArenaResult::FunID;
const stRetCommintArenaResult_ProtoFunID stRetCommintArenaResult::ProtoFunID_MIN;
const stRetCommintArenaResult_ProtoFunID stRetCommintArenaResult::ProtoFunID_MAX;
const int stRetCommintArenaResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRetCommintArenaResult::kResultFieldNumber;
#endif  // !_MSC_VER

stRetCommintArenaResult::stRetCommintArenaResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRetCommintArenaResult::InitAsDefaultInstance() {
}

stRetCommintArenaResult::stRetCommintArenaResult(const stRetCommintArenaResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRetCommintArenaResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRetCommintArenaResult::~stRetCommintArenaResult() {
  SharedDtor();
}

void stRetCommintArenaResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRetCommintArenaResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRetCommintArenaResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetCommintArenaResult_descriptor_;
}

const stRetCommintArenaResult& stRetCommintArenaResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stRetCommintArenaResult* stRetCommintArenaResult::default_instance_ = NULL;

stRetCommintArenaResult* stRetCommintArenaResult::New() const {
  return new stRetCommintArenaResult;
}

void stRetCommintArenaResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRetCommintArenaResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SortProto.stRetCommintArenaResult.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SortProto::stRetCommintArenaResult_eResult_IsValid(value)) {
            set_result(static_cast< ::SortProto::stRetCommintArenaResult_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRetCommintArenaResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SortProto.stRetCommintArenaResult.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRetCommintArenaResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SortProto.stRetCommintArenaResult.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRetCommintArenaResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SortProto.stRetCommintArenaResult.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRetCommintArenaResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRetCommintArenaResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRetCommintArenaResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRetCommintArenaResult::MergeFrom(const stRetCommintArenaResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRetCommintArenaResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRetCommintArenaResult::CopyFrom(const stRetCommintArenaResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRetCommintArenaResult::IsInitialized() const {

  return true;
}

void stRetCommintArenaResult::Swap(stRetCommintArenaResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRetCommintArenaResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRetCommintArenaResult_descriptor_;
  metadata.reflection = stRetCommintArenaResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqEnterLeitaiScene_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqEnterLeitaiScene_ProtoModID_descriptor_;
}
bool stReqEnterLeitaiScene_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqEnterLeitaiScene_ProtoModID stReqEnterLeitaiScene::ModID;
const stReqEnterLeitaiScene_ProtoModID stReqEnterLeitaiScene::ProtoModID_MIN;
const stReqEnterLeitaiScene_ProtoModID stReqEnterLeitaiScene::ProtoModID_MAX;
const int stReqEnterLeitaiScene::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqEnterLeitaiScene_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqEnterLeitaiScene_ProtoFunID_descriptor_;
}
bool stReqEnterLeitaiScene_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 41:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqEnterLeitaiScene_ProtoFunID stReqEnterLeitaiScene::FunID;
const stReqEnterLeitaiScene_ProtoFunID stReqEnterLeitaiScene::ProtoFunID_MIN;
const stReqEnterLeitaiScene_ProtoFunID stReqEnterLeitaiScene::ProtoFunID_MAX;
const int stReqEnterLeitaiScene::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqEnterLeitaiScene::kOtherIDFieldNumber;
#endif  // !_MSC_VER

stReqEnterLeitaiScene::stReqEnterLeitaiScene()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqEnterLeitaiScene::InitAsDefaultInstance() {
}

stReqEnterLeitaiScene::stReqEnterLeitaiScene(const stReqEnterLeitaiScene& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqEnterLeitaiScene::SharedCtor() {
  _cached_size_ = 0;
  otherid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqEnterLeitaiScene::~stReqEnterLeitaiScene() {
  SharedDtor();
}

void stReqEnterLeitaiScene::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqEnterLeitaiScene::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqEnterLeitaiScene::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqEnterLeitaiScene_descriptor_;
}

const stReqEnterLeitaiScene& stReqEnterLeitaiScene::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stReqEnterLeitaiScene* stReqEnterLeitaiScene::default_instance_ = NULL;

stReqEnterLeitaiScene* stReqEnterLeitaiScene::New() const {
  return new stReqEnterLeitaiScene;
}

void stReqEnterLeitaiScene::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    otherid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqEnterLeitaiScene::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 otherID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &otherid_)));
          set_has_otherid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqEnterLeitaiScene::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 otherID = 1;
  if (has_otherid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->otherid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqEnterLeitaiScene::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 otherID = 1;
  if (has_otherid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->otherid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqEnterLeitaiScene::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 otherID = 1;
    if (has_otherid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->otherid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqEnterLeitaiScene::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqEnterLeitaiScene* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqEnterLeitaiScene*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqEnterLeitaiScene::MergeFrom(const stReqEnterLeitaiScene& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_otherid()) {
      set_otherid(from.otherid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqEnterLeitaiScene::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqEnterLeitaiScene::CopyFrom(const stReqEnterLeitaiScene& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqEnterLeitaiScene::IsInitialized() const {

  return true;
}

void stReqEnterLeitaiScene::Swap(stReqEnterLeitaiScene* other) {
  if (other != this) {
    std::swap(otherid_, other->otherid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqEnterLeitaiScene::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqEnterLeitaiScene_descriptor_;
  metadata.reflection = stReqEnterLeitaiScene_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqResetLeitaiBuff_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqResetLeitaiBuff_ProtoModID_descriptor_;
}
bool stReqResetLeitaiBuff_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqResetLeitaiBuff_ProtoModID stReqResetLeitaiBuff::ModID;
const stReqResetLeitaiBuff_ProtoModID stReqResetLeitaiBuff::ProtoModID_MIN;
const stReqResetLeitaiBuff_ProtoModID stReqResetLeitaiBuff::ProtoModID_MAX;
const int stReqResetLeitaiBuff::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqResetLeitaiBuff_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqResetLeitaiBuff_ProtoFunID_descriptor_;
}
bool stReqResetLeitaiBuff_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 42:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqResetLeitaiBuff_ProtoFunID stReqResetLeitaiBuff::FunID;
const stReqResetLeitaiBuff_ProtoFunID stReqResetLeitaiBuff::ProtoFunID_MIN;
const stReqResetLeitaiBuff_ProtoFunID stReqResetLeitaiBuff::ProtoFunID_MAX;
const int stReqResetLeitaiBuff::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqResetLeitaiBuff::kCharIDFieldNumber;
#endif  // !_MSC_VER

stReqResetLeitaiBuff::stReqResetLeitaiBuff()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqResetLeitaiBuff::InitAsDefaultInstance() {
}

stReqResetLeitaiBuff::stReqResetLeitaiBuff(const stReqResetLeitaiBuff& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqResetLeitaiBuff::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqResetLeitaiBuff::~stReqResetLeitaiBuff() {
  SharedDtor();
}

void stReqResetLeitaiBuff::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqResetLeitaiBuff::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqResetLeitaiBuff::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqResetLeitaiBuff_descriptor_;
}

const stReqResetLeitaiBuff& stReqResetLeitaiBuff::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stReqResetLeitaiBuff* stReqResetLeitaiBuff::default_instance_ = NULL;

stReqResetLeitaiBuff* stReqResetLeitaiBuff::New() const {
  return new stReqResetLeitaiBuff;
}

void stReqResetLeitaiBuff::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqResetLeitaiBuff::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqResetLeitaiBuff::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqResetLeitaiBuff::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqResetLeitaiBuff::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqResetLeitaiBuff::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqResetLeitaiBuff* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqResetLeitaiBuff*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqResetLeitaiBuff::MergeFrom(const stReqResetLeitaiBuff& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqResetLeitaiBuff::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqResetLeitaiBuff::CopyFrom(const stReqResetLeitaiBuff& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqResetLeitaiBuff::IsInitialized() const {

  return true;
}

void stReqResetLeitaiBuff::Swap(stReqResetLeitaiBuff* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqResetLeitaiBuff::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqResetLeitaiBuff_descriptor_;
  metadata.reflection = stReqResetLeitaiBuff_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stResetLeitaiBuffResult_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stResetLeitaiBuffResult_eResult_descriptor_;
}
bool stResetLeitaiBuffResult_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stResetLeitaiBuffResult_eResult stResetLeitaiBuffResult::eSuccess;
const stResetLeitaiBuffResult_eResult stResetLeitaiBuffResult::eDiamond_Not_Enough;
const stResetLeitaiBuffResult_eResult stResetLeitaiBuffResult::eInner_Error;
const stResetLeitaiBuffResult_eResult stResetLeitaiBuffResult::eResult_MIN;
const stResetLeitaiBuffResult_eResult stResetLeitaiBuffResult::eResult_MAX;
const int stResetLeitaiBuffResult::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stResetLeitaiBuffResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stResetLeitaiBuffResult_ProtoModID_descriptor_;
}
bool stResetLeitaiBuffResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stResetLeitaiBuffResult_ProtoModID stResetLeitaiBuffResult::ModID;
const stResetLeitaiBuffResult_ProtoModID stResetLeitaiBuffResult::ProtoModID_MIN;
const stResetLeitaiBuffResult_ProtoModID stResetLeitaiBuffResult::ProtoModID_MAX;
const int stResetLeitaiBuffResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stResetLeitaiBuffResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stResetLeitaiBuffResult_ProtoFunID_descriptor_;
}
bool stResetLeitaiBuffResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 43:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stResetLeitaiBuffResult_ProtoFunID stResetLeitaiBuffResult::FunID;
const stResetLeitaiBuffResult_ProtoFunID stResetLeitaiBuffResult::ProtoFunID_MIN;
const stResetLeitaiBuffResult_ProtoFunID stResetLeitaiBuffResult::ProtoFunID_MAX;
const int stResetLeitaiBuffResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stResetLeitaiBuffResult::kBuffIDFieldNumber;
const int stResetLeitaiBuffResult::kResultFieldNumber;
#endif  // !_MSC_VER

stResetLeitaiBuffResult::stResetLeitaiBuffResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stResetLeitaiBuffResult::InitAsDefaultInstance() {
}

stResetLeitaiBuffResult::stResetLeitaiBuffResult(const stResetLeitaiBuffResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stResetLeitaiBuffResult::SharedCtor() {
  _cached_size_ = 0;
  buffid_ = 0u;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stResetLeitaiBuffResult::~stResetLeitaiBuffResult() {
  SharedDtor();
}

void stResetLeitaiBuffResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stResetLeitaiBuffResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stResetLeitaiBuffResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stResetLeitaiBuffResult_descriptor_;
}

const stResetLeitaiBuffResult& stResetLeitaiBuffResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stResetLeitaiBuffResult* stResetLeitaiBuffResult::default_instance_ = NULL;

stResetLeitaiBuffResult* stResetLeitaiBuffResult::New() const {
  return new stResetLeitaiBuffResult;
}

void stResetLeitaiBuffResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    buffid_ = 0u;
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stResetLeitaiBuffResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 buffID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buffid_)));
          set_has_buffid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .SortProto.stResetLeitaiBuffResult.eResult result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SortProto::stResetLeitaiBuffResult_eResult_IsValid(value)) {
            set_result(static_cast< ::SortProto::stResetLeitaiBuffResult_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stResetLeitaiBuffResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 buffID = 1;
  if (has_buffid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->buffid(), output);
  }

  // optional .SortProto.stResetLeitaiBuffResult.eResult result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stResetLeitaiBuffResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 buffID = 1;
  if (has_buffid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->buffid(), target);
  }

  // optional .SortProto.stResetLeitaiBuffResult.eResult result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stResetLeitaiBuffResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 buffID = 1;
    if (has_buffid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buffid());
    }

    // optional .SortProto.stResetLeitaiBuffResult.eResult result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stResetLeitaiBuffResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stResetLeitaiBuffResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stResetLeitaiBuffResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stResetLeitaiBuffResult::MergeFrom(const stResetLeitaiBuffResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buffid()) {
      set_buffid(from.buffid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stResetLeitaiBuffResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stResetLeitaiBuffResult::CopyFrom(const stResetLeitaiBuffResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stResetLeitaiBuffResult::IsInitialized() const {

  return true;
}

void stResetLeitaiBuffResult::Swap(stResetLeitaiBuffResult* other) {
  if (other != this) {
    std::swap(buffid_, other->buffid_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stResetLeitaiBuffResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stResetLeitaiBuffResult_descriptor_;
  metadata.reflection = stResetLeitaiBuffResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqBuffResetTime_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqBuffResetTime_ProtoModID_descriptor_;
}
bool stReqBuffResetTime_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqBuffResetTime_ProtoModID stReqBuffResetTime::ModID;
const stReqBuffResetTime_ProtoModID stReqBuffResetTime::ProtoModID_MIN;
const stReqBuffResetTime_ProtoModID stReqBuffResetTime::ProtoModID_MAX;
const int stReqBuffResetTime::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqBuffResetTime_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqBuffResetTime_ProtoFunID_descriptor_;
}
bool stReqBuffResetTime_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 44:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqBuffResetTime_ProtoFunID stReqBuffResetTime::FunID;
const stReqBuffResetTime_ProtoFunID stReqBuffResetTime::ProtoFunID_MIN;
const stReqBuffResetTime_ProtoFunID stReqBuffResetTime::ProtoFunID_MAX;
const int stReqBuffResetTime::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqBuffResetTime::kCharIDFieldNumber;
#endif  // !_MSC_VER

stReqBuffResetTime::stReqBuffResetTime()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqBuffResetTime::InitAsDefaultInstance() {
}

stReqBuffResetTime::stReqBuffResetTime(const stReqBuffResetTime& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqBuffResetTime::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqBuffResetTime::~stReqBuffResetTime() {
  SharedDtor();
}

void stReqBuffResetTime::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqBuffResetTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqBuffResetTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqBuffResetTime_descriptor_;
}

const stReqBuffResetTime& stReqBuffResetTime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stReqBuffResetTime* stReqBuffResetTime::default_instance_ = NULL;

stReqBuffResetTime* stReqBuffResetTime::New() const {
  return new stReqBuffResetTime;
}

void stReqBuffResetTime::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqBuffResetTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqBuffResetTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqBuffResetTime::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqBuffResetTime::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqBuffResetTime::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqBuffResetTime* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqBuffResetTime*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqBuffResetTime::MergeFrom(const stReqBuffResetTime& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqBuffResetTime::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqBuffResetTime::CopyFrom(const stReqBuffResetTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqBuffResetTime::IsInitialized() const {

  return true;
}

void stReqBuffResetTime::Swap(stReqBuffResetTime* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqBuffResetTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqBuffResetTime_descriptor_;
  metadata.reflection = stReqBuffResetTime_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRetBuffResetTime_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetBuffResetTime_ProtoModID_descriptor_;
}
bool stRetBuffResetTime_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetBuffResetTime_ProtoModID stRetBuffResetTime::ModID;
const stRetBuffResetTime_ProtoModID stRetBuffResetTime::ProtoModID_MIN;
const stRetBuffResetTime_ProtoModID stRetBuffResetTime::ProtoModID_MAX;
const int stRetBuffResetTime::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetBuffResetTime_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetBuffResetTime_ProtoFunID_descriptor_;
}
bool stRetBuffResetTime_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 45:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetBuffResetTime_ProtoFunID stRetBuffResetTime::FunID;
const stRetBuffResetTime_ProtoFunID stRetBuffResetTime::ProtoFunID_MIN;
const stRetBuffResetTime_ProtoFunID stRetBuffResetTime::ProtoFunID_MAX;
const int stRetBuffResetTime::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRetBuffResetTime::kRemainTimeFieldNumber;
const int stRetBuffResetTime::kBuffIDFieldNumber;
#endif  // !_MSC_VER

stRetBuffResetTime::stRetBuffResetTime()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRetBuffResetTime::InitAsDefaultInstance() {
}

stRetBuffResetTime::stRetBuffResetTime(const stRetBuffResetTime& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRetBuffResetTime::SharedCtor() {
  _cached_size_ = 0;
  remaintime_ = 0u;
  buffid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRetBuffResetTime::~stRetBuffResetTime() {
  SharedDtor();
}

void stRetBuffResetTime::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRetBuffResetTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRetBuffResetTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetBuffResetTime_descriptor_;
}

const stRetBuffResetTime& stRetBuffResetTime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stRetBuffResetTime* stRetBuffResetTime::default_instance_ = NULL;

stRetBuffResetTime* stRetBuffResetTime::New() const {
  return new stRetBuffResetTime;
}

void stRetBuffResetTime::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    remaintime_ = 0u;
    buffid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRetBuffResetTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 remainTime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &remaintime_)));
          set_has_remaintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_buffID;
        break;
      }

      // optional uint32 buffID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buffID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buffid_)));
          set_has_buffid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRetBuffResetTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 remainTime = 1;
  if (has_remaintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->remaintime(), output);
  }

  // optional uint32 buffID = 2;
  if (has_buffid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->buffid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRetBuffResetTime::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 remainTime = 1;
  if (has_remaintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->remaintime(), target);
  }

  // optional uint32 buffID = 2;
  if (has_buffid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->buffid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRetBuffResetTime::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 remainTime = 1;
    if (has_remaintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->remaintime());
    }

    // optional uint32 buffID = 2;
    if (has_buffid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buffid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRetBuffResetTime::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRetBuffResetTime* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRetBuffResetTime*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRetBuffResetTime::MergeFrom(const stRetBuffResetTime& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_remaintime()) {
      set_remaintime(from.remaintime());
    }
    if (from.has_buffid()) {
      set_buffid(from.buffid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRetBuffResetTime::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRetBuffResetTime::CopyFrom(const stRetBuffResetTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRetBuffResetTime::IsInitialized() const {

  return true;
}

void stRetBuffResetTime::Swap(stRetBuffResetTime* other) {
  if (other != this) {
    std::swap(remaintime_, other->remaintime_);
    std::swap(buffid_, other->buffid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRetBuffResetTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRetBuffResetTime_descriptor_;
  metadata.reflection = stRetBuffResetTime_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stArenaReachNewRank_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stArenaReachNewRank_ProtoModID_descriptor_;
}
bool stArenaReachNewRank_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stArenaReachNewRank_ProtoModID stArenaReachNewRank::ModID;
const stArenaReachNewRank_ProtoModID stArenaReachNewRank::ProtoModID_MIN;
const stArenaReachNewRank_ProtoModID stArenaReachNewRank::ProtoModID_MAX;
const int stArenaReachNewRank::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stArenaReachNewRank_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stArenaReachNewRank_ProtoFunID_descriptor_;
}
bool stArenaReachNewRank_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 46:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stArenaReachNewRank_ProtoFunID stArenaReachNewRank::FunID;
const stArenaReachNewRank_ProtoFunID stArenaReachNewRank::ProtoFunID_MIN;
const stArenaReachNewRank_ProtoFunID stArenaReachNewRank::ProtoFunID_MAX;
const int stArenaReachNewRank::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stArenaReachNewRank::kNewRankFieldNumber;
const int stArenaReachNewRank::kOldRankFieldNumber;
const int stArenaReachNewRank::kRewardNumFieldNumber;
#endif  // !_MSC_VER

stArenaReachNewRank::stArenaReachNewRank()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stArenaReachNewRank::InitAsDefaultInstance() {
}

stArenaReachNewRank::stArenaReachNewRank(const stArenaReachNewRank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stArenaReachNewRank::SharedCtor() {
  _cached_size_ = 0;
  newrank_ = 0u;
  oldrank_ = 0u;
  rewardnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stArenaReachNewRank::~stArenaReachNewRank() {
  SharedDtor();
}

void stArenaReachNewRank::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stArenaReachNewRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stArenaReachNewRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stArenaReachNewRank_descriptor_;
}

const stArenaReachNewRank& stArenaReachNewRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stArenaReachNewRank* stArenaReachNewRank::default_instance_ = NULL;

stArenaReachNewRank* stArenaReachNewRank::New() const {
  return new stArenaReachNewRank;
}

void stArenaReachNewRank::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    newrank_ = 0u;
    oldrank_ = 0u;
    rewardnum_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stArenaReachNewRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 newRank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &newrank_)));
          set_has_newrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_oldRank;
        break;
      }

      // optional uint32 oldRank = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_oldRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &oldrank_)));
          set_has_oldrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rewardNum;
        break;
      }

      // optional uint32 rewardNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rewardNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rewardnum_)));
          set_has_rewardnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stArenaReachNewRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 newRank = 1;
  if (has_newrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->newrank(), output);
  }

  // optional uint32 oldRank = 2;
  if (has_oldrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->oldrank(), output);
  }

  // optional uint32 rewardNum = 3;
  if (has_rewardnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->rewardnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stArenaReachNewRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 newRank = 1;
  if (has_newrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->newrank(), target);
  }

  // optional uint32 oldRank = 2;
  if (has_oldrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->oldrank(), target);
  }

  // optional uint32 rewardNum = 3;
  if (has_rewardnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->rewardnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stArenaReachNewRank::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 newRank = 1;
    if (has_newrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->newrank());
    }

    // optional uint32 oldRank = 2;
    if (has_oldrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->oldrank());
    }

    // optional uint32 rewardNum = 3;
    if (has_rewardnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rewardnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stArenaReachNewRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stArenaReachNewRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stArenaReachNewRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stArenaReachNewRank::MergeFrom(const stArenaReachNewRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_newrank()) {
      set_newrank(from.newrank());
    }
    if (from.has_oldrank()) {
      set_oldrank(from.oldrank());
    }
    if (from.has_rewardnum()) {
      set_rewardnum(from.rewardnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stArenaReachNewRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stArenaReachNewRank::CopyFrom(const stArenaReachNewRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stArenaReachNewRank::IsInitialized() const {

  return true;
}

void stArenaReachNewRank::Swap(stArenaReachNewRank* other) {
  if (other != this) {
    std::swap(newrank_, other->newrank_);
    std::swap(oldrank_, other->oldrank_);
    std::swap(rewardnum_, other->rewardnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stArenaReachNewRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stArenaReachNewRank_descriptor_;
  metadata.reflection = stArenaReachNewRank_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqResetArenaChallengeNum_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqResetArenaChallengeNum_ProtoModID_descriptor_;
}
bool stReqResetArenaChallengeNum_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqResetArenaChallengeNum_ProtoModID stReqResetArenaChallengeNum::ModID;
const stReqResetArenaChallengeNum_ProtoModID stReqResetArenaChallengeNum::ProtoModID_MIN;
const stReqResetArenaChallengeNum_ProtoModID stReqResetArenaChallengeNum::ProtoModID_MAX;
const int stReqResetArenaChallengeNum::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqResetArenaChallengeNum_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqResetArenaChallengeNum_ProtoFunID_descriptor_;
}
bool stReqResetArenaChallengeNum_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 47:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqResetArenaChallengeNum_ProtoFunID stReqResetArenaChallengeNum::FunID;
const stReqResetArenaChallengeNum_ProtoFunID stReqResetArenaChallengeNum::ProtoFunID_MIN;
const stReqResetArenaChallengeNum_ProtoFunID stReqResetArenaChallengeNum::ProtoFunID_MAX;
const int stReqResetArenaChallengeNum::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqResetArenaChallengeNum::kCharIDFieldNumber;
#endif  // !_MSC_VER

stReqResetArenaChallengeNum::stReqResetArenaChallengeNum()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqResetArenaChallengeNum::InitAsDefaultInstance() {
}

stReqResetArenaChallengeNum::stReqResetArenaChallengeNum(const stReqResetArenaChallengeNum& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqResetArenaChallengeNum::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqResetArenaChallengeNum::~stReqResetArenaChallengeNum() {
  SharedDtor();
}

void stReqResetArenaChallengeNum::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqResetArenaChallengeNum::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqResetArenaChallengeNum::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqResetArenaChallengeNum_descriptor_;
}

const stReqResetArenaChallengeNum& stReqResetArenaChallengeNum::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stReqResetArenaChallengeNum* stReqResetArenaChallengeNum::default_instance_ = NULL;

stReqResetArenaChallengeNum* stReqResetArenaChallengeNum::New() const {
  return new stReqResetArenaChallengeNum;
}

void stReqResetArenaChallengeNum::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqResetArenaChallengeNum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqResetArenaChallengeNum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqResetArenaChallengeNum::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqResetArenaChallengeNum::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqResetArenaChallengeNum::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqResetArenaChallengeNum* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqResetArenaChallengeNum*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqResetArenaChallengeNum::MergeFrom(const stReqResetArenaChallengeNum& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqResetArenaChallengeNum::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqResetArenaChallengeNum::CopyFrom(const stReqResetArenaChallengeNum& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqResetArenaChallengeNum::IsInitialized() const {

  return true;
}

void stReqResetArenaChallengeNum::Swap(stReqResetArenaChallengeNum* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqResetArenaChallengeNum::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqResetArenaChallengeNum_descriptor_;
  metadata.reflection = stReqResetArenaChallengeNum_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stResetArenaChallengeNunResult_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stResetArenaChallengeNunResult_eResult_descriptor_;
}
bool stResetArenaChallengeNunResult_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stResetArenaChallengeNunResult_eResult stResetArenaChallengeNunResult::eSuccess;
const stResetArenaChallengeNunResult_eResult stResetArenaChallengeNunResult::eResetNum_Use_Out;
const stResetArenaChallengeNunResult_eResult stResetArenaChallengeNunResult::eDiamond_Not_Enough;
const stResetArenaChallengeNunResult_eResult stResetArenaChallengeNunResult::eInner_Error;
const stResetArenaChallengeNunResult_eResult stResetArenaChallengeNunResult::eResult_MIN;
const stResetArenaChallengeNunResult_eResult stResetArenaChallengeNunResult::eResult_MAX;
const int stResetArenaChallengeNunResult::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stResetArenaChallengeNunResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stResetArenaChallengeNunResult_ProtoModID_descriptor_;
}
bool stResetArenaChallengeNunResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stResetArenaChallengeNunResult_ProtoModID stResetArenaChallengeNunResult::ModID;
const stResetArenaChallengeNunResult_ProtoModID stResetArenaChallengeNunResult::ProtoModID_MIN;
const stResetArenaChallengeNunResult_ProtoModID stResetArenaChallengeNunResult::ProtoModID_MAX;
const int stResetArenaChallengeNunResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stResetArenaChallengeNunResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stResetArenaChallengeNunResult_ProtoFunID_descriptor_;
}
bool stResetArenaChallengeNunResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 48:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stResetArenaChallengeNunResult_ProtoFunID stResetArenaChallengeNunResult::FunID;
const stResetArenaChallengeNunResult_ProtoFunID stResetArenaChallengeNunResult::ProtoFunID_MIN;
const stResetArenaChallengeNunResult_ProtoFunID stResetArenaChallengeNunResult::ProtoFunID_MAX;
const int stResetArenaChallengeNunResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stResetArenaChallengeNunResult::kResultFieldNumber;
#endif  // !_MSC_VER

stResetArenaChallengeNunResult::stResetArenaChallengeNunResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stResetArenaChallengeNunResult::InitAsDefaultInstance() {
}

stResetArenaChallengeNunResult::stResetArenaChallengeNunResult(const stResetArenaChallengeNunResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stResetArenaChallengeNunResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stResetArenaChallengeNunResult::~stResetArenaChallengeNunResult() {
  SharedDtor();
}

void stResetArenaChallengeNunResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stResetArenaChallengeNunResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stResetArenaChallengeNunResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stResetArenaChallengeNunResult_descriptor_;
}

const stResetArenaChallengeNunResult& stResetArenaChallengeNunResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stResetArenaChallengeNunResult* stResetArenaChallengeNunResult::default_instance_ = NULL;

stResetArenaChallengeNunResult* stResetArenaChallengeNunResult::New() const {
  return new stResetArenaChallengeNunResult;
}

void stResetArenaChallengeNunResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stResetArenaChallengeNunResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SortProto.stResetArenaChallengeNunResult.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SortProto::stResetArenaChallengeNunResult_eResult_IsValid(value)) {
            set_result(static_cast< ::SortProto::stResetArenaChallengeNunResult_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stResetArenaChallengeNunResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SortProto.stResetArenaChallengeNunResult.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stResetArenaChallengeNunResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SortProto.stResetArenaChallengeNunResult.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stResetArenaChallengeNunResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SortProto.stResetArenaChallengeNunResult.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stResetArenaChallengeNunResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stResetArenaChallengeNunResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stResetArenaChallengeNunResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stResetArenaChallengeNunResult::MergeFrom(const stResetArenaChallengeNunResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stResetArenaChallengeNunResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stResetArenaChallengeNunResult::CopyFrom(const stResetArenaChallengeNunResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stResetArenaChallengeNunResult::IsInitialized() const {

  return true;
}

void stResetArenaChallengeNunResult::Swap(stResetArenaChallengeNunResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stResetArenaChallengeNunResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stResetArenaChallengeNunResult_descriptor_;
  metadata.reflection = stResetArenaChallengeNunResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqClearArenaCD_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqClearArenaCD_ProtoModID_descriptor_;
}
bool stReqClearArenaCD_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqClearArenaCD_ProtoModID stReqClearArenaCD::ModID;
const stReqClearArenaCD_ProtoModID stReqClearArenaCD::ProtoModID_MIN;
const stReqClearArenaCD_ProtoModID stReqClearArenaCD::ProtoModID_MAX;
const int stReqClearArenaCD::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqClearArenaCD_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqClearArenaCD_ProtoFunID_descriptor_;
}
bool stReqClearArenaCD_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 49:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqClearArenaCD_ProtoFunID stReqClearArenaCD::FunID;
const stReqClearArenaCD_ProtoFunID stReqClearArenaCD::ProtoFunID_MIN;
const stReqClearArenaCD_ProtoFunID stReqClearArenaCD::ProtoFunID_MAX;
const int stReqClearArenaCD::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqClearArenaCD::kCharIDFieldNumber;
#endif  // !_MSC_VER

stReqClearArenaCD::stReqClearArenaCD()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqClearArenaCD::InitAsDefaultInstance() {
}

stReqClearArenaCD::stReqClearArenaCD(const stReqClearArenaCD& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqClearArenaCD::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqClearArenaCD::~stReqClearArenaCD() {
  SharedDtor();
}

void stReqClearArenaCD::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqClearArenaCD::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqClearArenaCD::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqClearArenaCD_descriptor_;
}

const stReqClearArenaCD& stReqClearArenaCD::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stReqClearArenaCD* stReqClearArenaCD::default_instance_ = NULL;

stReqClearArenaCD* stReqClearArenaCD::New() const {
  return new stReqClearArenaCD;
}

void stReqClearArenaCD::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqClearArenaCD::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqClearArenaCD::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqClearArenaCD::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqClearArenaCD::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqClearArenaCD::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqClearArenaCD* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqClearArenaCD*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqClearArenaCD::MergeFrom(const stReqClearArenaCD& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqClearArenaCD::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqClearArenaCD::CopyFrom(const stReqClearArenaCD& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqClearArenaCD::IsInitialized() const {

  return true;
}

void stReqClearArenaCD::Swap(stReqClearArenaCD* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqClearArenaCD::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqClearArenaCD_descriptor_;
  metadata.reflection = stReqClearArenaCD_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stClearArenaCDResult_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stClearArenaCDResult_eResult_descriptor_;
}
bool stClearArenaCDResult_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stClearArenaCDResult_eResult stClearArenaCDResult::eSuccess;
const stClearArenaCDResult_eResult stClearArenaCDResult::eInner_Error;
const stClearArenaCDResult_eResult stClearArenaCDResult::eDiamond_Not_Enough;
const stClearArenaCDResult_eResult stClearArenaCDResult::eResult_MIN;
const stClearArenaCDResult_eResult stClearArenaCDResult::eResult_MAX;
const int stClearArenaCDResult::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stClearArenaCDResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stClearArenaCDResult_ProtoModID_descriptor_;
}
bool stClearArenaCDResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stClearArenaCDResult_ProtoModID stClearArenaCDResult::ModID;
const stClearArenaCDResult_ProtoModID stClearArenaCDResult::ProtoModID_MIN;
const stClearArenaCDResult_ProtoModID stClearArenaCDResult::ProtoModID_MAX;
const int stClearArenaCDResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stClearArenaCDResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stClearArenaCDResult_ProtoFunID_descriptor_;
}
bool stClearArenaCDResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 50:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stClearArenaCDResult_ProtoFunID stClearArenaCDResult::FunID;
const stClearArenaCDResult_ProtoFunID stClearArenaCDResult::ProtoFunID_MIN;
const stClearArenaCDResult_ProtoFunID stClearArenaCDResult::ProtoFunID_MAX;
const int stClearArenaCDResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stClearArenaCDResult::kResultFieldNumber;
#endif  // !_MSC_VER

stClearArenaCDResult::stClearArenaCDResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stClearArenaCDResult::InitAsDefaultInstance() {
}

stClearArenaCDResult::stClearArenaCDResult(const stClearArenaCDResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stClearArenaCDResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stClearArenaCDResult::~stClearArenaCDResult() {
  SharedDtor();
}

void stClearArenaCDResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stClearArenaCDResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stClearArenaCDResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stClearArenaCDResult_descriptor_;
}

const stClearArenaCDResult& stClearArenaCDResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stClearArenaCDResult* stClearArenaCDResult::default_instance_ = NULL;

stClearArenaCDResult* stClearArenaCDResult::New() const {
  return new stClearArenaCDResult;
}

void stClearArenaCDResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stClearArenaCDResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SortProto.stClearArenaCDResult.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SortProto::stClearArenaCDResult_eResult_IsValid(value)) {
            set_result(static_cast< ::SortProto::stClearArenaCDResult_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stClearArenaCDResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SortProto.stClearArenaCDResult.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stClearArenaCDResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SortProto.stClearArenaCDResult.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stClearArenaCDResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SortProto.stClearArenaCDResult.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stClearArenaCDResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stClearArenaCDResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stClearArenaCDResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stClearArenaCDResult::MergeFrom(const stClearArenaCDResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stClearArenaCDResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stClearArenaCDResult::CopyFrom(const stClearArenaCDResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stClearArenaCDResult::IsInitialized() const {

  return true;
}

void stClearArenaCDResult::Swap(stClearArenaCDResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stClearArenaCDResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stClearArenaCDResult_descriptor_;
  metadata.reflection = stClearArenaCDResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqOpenSvrBPRank_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqOpenSvrBPRank_ProtoModID_descriptor_;
}
bool stReqOpenSvrBPRank_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqOpenSvrBPRank_ProtoModID stReqOpenSvrBPRank::ModID;
const stReqOpenSvrBPRank_ProtoModID stReqOpenSvrBPRank::ProtoModID_MIN;
const stReqOpenSvrBPRank_ProtoModID stReqOpenSvrBPRank::ProtoModID_MAX;
const int stReqOpenSvrBPRank::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqOpenSvrBPRank_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqOpenSvrBPRank_ProtoFunID_descriptor_;
}
bool stReqOpenSvrBPRank_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 51:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqOpenSvrBPRank_ProtoFunID stReqOpenSvrBPRank::FunID;
const stReqOpenSvrBPRank_ProtoFunID stReqOpenSvrBPRank::ProtoFunID_MIN;
const stReqOpenSvrBPRank_ProtoFunID stReqOpenSvrBPRank::ProtoFunID_MAX;
const int stReqOpenSvrBPRank::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqOpenSvrBPRank::kCharIDFieldNumber;
#endif  // !_MSC_VER

stReqOpenSvrBPRank::stReqOpenSvrBPRank()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqOpenSvrBPRank::InitAsDefaultInstance() {
}

stReqOpenSvrBPRank::stReqOpenSvrBPRank(const stReqOpenSvrBPRank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqOpenSvrBPRank::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqOpenSvrBPRank::~stReqOpenSvrBPRank() {
  SharedDtor();
}

void stReqOpenSvrBPRank::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqOpenSvrBPRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqOpenSvrBPRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqOpenSvrBPRank_descriptor_;
}

const stReqOpenSvrBPRank& stReqOpenSvrBPRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stReqOpenSvrBPRank* stReqOpenSvrBPRank::default_instance_ = NULL;

stReqOpenSvrBPRank* stReqOpenSvrBPRank::New() const {
  return new stReqOpenSvrBPRank;
}

void stReqOpenSvrBPRank::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqOpenSvrBPRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqOpenSvrBPRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqOpenSvrBPRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqOpenSvrBPRank::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqOpenSvrBPRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqOpenSvrBPRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqOpenSvrBPRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqOpenSvrBPRank::MergeFrom(const stReqOpenSvrBPRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqOpenSvrBPRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqOpenSvrBPRank::CopyFrom(const stReqOpenSvrBPRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqOpenSvrBPRank::IsInitialized() const {

  return true;
}

void stReqOpenSvrBPRank::Swap(stReqOpenSvrBPRank* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqOpenSvrBPRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqOpenSvrBPRank_descriptor_;
  metadata.reflection = stReqOpenSvrBPRank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stBPRankItemInfo::kCharIDFieldNumber;
const int stBPRankItemInfo::kNameFieldNumber;
const int stBPRankItemInfo::kJobFieldNumber;
const int stBPRankItemInfo::kSexFieldNumber;
const int stBPRankItemInfo::kLevelFieldNumber;
const int stBPRankItemInfo::kBpValFieldNumber;
#endif  // !_MSC_VER

stBPRankItemInfo::stBPRankItemInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stBPRankItemInfo::InitAsDefaultInstance() {
}

stBPRankItemInfo::stBPRankItemInfo(const stBPRankItemInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stBPRankItemInfo::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  job_ = 0u;
  sex_ = 0u;
  level_ = 0u;
  bpval_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stBPRankItemInfo::~stBPRankItemInfo() {
  SharedDtor();
}

void stBPRankItemInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void stBPRankItemInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stBPRankItemInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stBPRankItemInfo_descriptor_;
}

const stBPRankItemInfo& stBPRankItemInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stBPRankItemInfo* stBPRankItemInfo::default_instance_ = NULL;

stBPRankItemInfo* stBPRankItemInfo::New() const {
  return new stBPRankItemInfo;
}

void stBPRankItemInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    job_ = 0u;
    sex_ = 0u;
    level_ = 0u;
    bpval_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stBPRankItemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_job;
        break;
      }

      // optional uint32 job = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &job_)));
          set_has_job();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_sex;
        break;
      }

      // optional uint32 sex = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_level;
        break;
      }

      // optional uint32 level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_bpVal;
        break;
      }

      // optional uint32 bpVal = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bpVal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bpval_)));
          set_has_bpval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stBPRankItemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional uint32 job = 3;
  if (has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->job(), output);
  }

  // optional uint32 sex = 4;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sex(), output);
  }

  // optional uint32 level = 5;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->level(), output);
  }

  // optional uint32 bpVal = 6;
  if (has_bpval()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->bpval(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stBPRankItemInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional uint32 job = 3;
  if (has_job()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->job(), target);
  }

  // optional uint32 sex = 4;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sex(), target);
  }

  // optional uint32 level = 5;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->level(), target);
  }

  // optional uint32 bpVal = 6;
  if (has_bpval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->bpval(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stBPRankItemInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 job = 3;
    if (has_job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->job());
    }

    // optional uint32 sex = 4;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sex());
    }

    // optional uint32 level = 5;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 bpVal = 6;
    if (has_bpval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bpval());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stBPRankItemInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stBPRankItemInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stBPRankItemInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stBPRankItemInfo::MergeFrom(const stBPRankItemInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_job()) {
      set_job(from.job());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_bpval()) {
      set_bpval(from.bpval());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stBPRankItemInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stBPRankItemInfo::CopyFrom(const stBPRankItemInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stBPRankItemInfo::IsInitialized() const {

  return true;
}

void stBPRankItemInfo::Swap(stBPRankItemInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(name_, other->name_);
    std::swap(job_, other->job_);
    std::swap(sex_, other->sex_);
    std::swap(level_, other->level_);
    std::swap(bpval_, other->bpval_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stBPRankItemInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stBPRankItemInfo_descriptor_;
  metadata.reflection = stBPRankItemInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRetOpenSvrBPRank_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetOpenSvrBPRank_ProtoModID_descriptor_;
}
bool stRetOpenSvrBPRank_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetOpenSvrBPRank_ProtoModID stRetOpenSvrBPRank::ModID;
const stRetOpenSvrBPRank_ProtoModID stRetOpenSvrBPRank::ProtoModID_MIN;
const stRetOpenSvrBPRank_ProtoModID stRetOpenSvrBPRank::ProtoModID_MAX;
const int stRetOpenSvrBPRank::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetOpenSvrBPRank_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetOpenSvrBPRank_ProtoFunID_descriptor_;
}
bool stRetOpenSvrBPRank_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 52:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetOpenSvrBPRank_ProtoFunID stRetOpenSvrBPRank::FunID;
const stRetOpenSvrBPRank_ProtoFunID stRetOpenSvrBPRank::ProtoFunID_MIN;
const stRetOpenSvrBPRank_ProtoFunID stRetOpenSvrBPRank::ProtoFunID_MAX;
const int stRetOpenSvrBPRank::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRetOpenSvrBPRank::kItemsFieldNumber;
const int stRetOpenSvrBPRank::kOpenSvrTimeFieldNumber;
#endif  // !_MSC_VER

stRetOpenSvrBPRank::stRetOpenSvrBPRank()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRetOpenSvrBPRank::InitAsDefaultInstance() {
}

stRetOpenSvrBPRank::stRetOpenSvrBPRank(const stRetOpenSvrBPRank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRetOpenSvrBPRank::SharedCtor() {
  _cached_size_ = 0;
  opensvrtime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRetOpenSvrBPRank::~stRetOpenSvrBPRank() {
  SharedDtor();
}

void stRetOpenSvrBPRank::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRetOpenSvrBPRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRetOpenSvrBPRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetOpenSvrBPRank_descriptor_;
}

const stRetOpenSvrBPRank& stRetOpenSvrBPRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stRetOpenSvrBPRank* stRetOpenSvrBPRank::default_instance_ = NULL;

stRetOpenSvrBPRank* stRetOpenSvrBPRank::New() const {
  return new stRetOpenSvrBPRank;
}

void stRetOpenSvrBPRank::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    opensvrtime_ = 0u;
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRetOpenSvrBPRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SortProto.stBPRankItemInfo items = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectTag(16)) goto parse_openSvrTime;
        break;
      }

      // optional uint32 openSvrTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_openSvrTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opensvrtime_)));
          set_has_opensvrtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRetOpenSvrBPRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .SortProto.stBPRankItemInfo items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  // optional uint32 openSvrTime = 2;
  if (has_opensvrtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->opensvrtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRetOpenSvrBPRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .SortProto.stBPRankItemInfo items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }

  // optional uint32 openSvrTime = 2;
  if (has_opensvrtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->opensvrtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRetOpenSvrBPRank::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 openSvrTime = 2;
    if (has_opensvrtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->opensvrtime());
    }

  }
  // repeated .SortProto.stBPRankItemInfo items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRetOpenSvrBPRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRetOpenSvrBPRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRetOpenSvrBPRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRetOpenSvrBPRank::MergeFrom(const stRetOpenSvrBPRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_opensvrtime()) {
      set_opensvrtime(from.opensvrtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRetOpenSvrBPRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRetOpenSvrBPRank::CopyFrom(const stRetOpenSvrBPRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRetOpenSvrBPRank::IsInitialized() const {

  return true;
}

void stRetOpenSvrBPRank::Swap(stRetOpenSvrBPRank* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(opensvrtime_, other->opensvrtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRetOpenSvrBPRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRetOpenSvrBPRank_descriptor_;
  metadata.reflection = stRetOpenSvrBPRank_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqExpeditionInfo_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqExpeditionInfo_ProtoModID_descriptor_;
}
bool stReqExpeditionInfo_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqExpeditionInfo_ProtoModID stReqExpeditionInfo::ModID;
const stReqExpeditionInfo_ProtoModID stReqExpeditionInfo::ProtoModID_MIN;
const stReqExpeditionInfo_ProtoModID stReqExpeditionInfo::ProtoModID_MAX;
const int stReqExpeditionInfo::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqExpeditionInfo_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqExpeditionInfo_ProtoFunID_descriptor_;
}
bool stReqExpeditionInfo_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 53:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqExpeditionInfo_ProtoFunID stReqExpeditionInfo::FunID;
const stReqExpeditionInfo_ProtoFunID stReqExpeditionInfo::ProtoFunID_MIN;
const stReqExpeditionInfo_ProtoFunID stReqExpeditionInfo::ProtoFunID_MAX;
const int stReqExpeditionInfo::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqExpeditionInfo::kCharIDFieldNumber;
#endif  // !_MSC_VER

stReqExpeditionInfo::stReqExpeditionInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqExpeditionInfo::InitAsDefaultInstance() {
}

stReqExpeditionInfo::stReqExpeditionInfo(const stReqExpeditionInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqExpeditionInfo::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqExpeditionInfo::~stReqExpeditionInfo() {
  SharedDtor();
}

void stReqExpeditionInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqExpeditionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqExpeditionInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqExpeditionInfo_descriptor_;
}

const stReqExpeditionInfo& stReqExpeditionInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stReqExpeditionInfo* stReqExpeditionInfo::default_instance_ = NULL;

stReqExpeditionInfo* stReqExpeditionInfo::New() const {
  return new stReqExpeditionInfo;
}

void stReqExpeditionInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqExpeditionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqExpeditionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqExpeditionInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqExpeditionInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqExpeditionInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqExpeditionInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqExpeditionInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqExpeditionInfo::MergeFrom(const stReqExpeditionInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqExpeditionInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqExpeditionInfo::CopyFrom(const stReqExpeditionInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqExpeditionInfo::IsInitialized() const {

  return true;
}

void stReqExpeditionInfo::Swap(stReqExpeditionInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqExpeditionInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqExpeditionInfo_descriptor_;
  metadata.reflection = stReqExpeditionInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stExpeditionItem::kExpeditionIdFieldNumber;
const int stExpeditionItem::kFinishTimeFieldNumber;
const int stExpeditionItem::kHeroIdsFieldNumber;
#endif  // !_MSC_VER

stExpeditionItem::stExpeditionItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stExpeditionItem::InitAsDefaultInstance() {
}

stExpeditionItem::stExpeditionItem(const stExpeditionItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stExpeditionItem::SharedCtor() {
  _cached_size_ = 0;
  expeditionid_ = 0u;
  finishtime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stExpeditionItem::~stExpeditionItem() {
  SharedDtor();
}

void stExpeditionItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stExpeditionItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stExpeditionItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stExpeditionItem_descriptor_;
}

const stExpeditionItem& stExpeditionItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stExpeditionItem* stExpeditionItem::default_instance_ = NULL;

stExpeditionItem* stExpeditionItem::New() const {
  return new stExpeditionItem;
}

void stExpeditionItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    expeditionid_ = 0u;
    finishtime_ = 0u;
  }
  heroids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stExpeditionItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 expeditionId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &expeditionid_)));
          set_has_expeditionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_finishTime;
        break;
      }

      // optional uint32 finishTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_finishTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &finishtime_)));
          set_has_finishtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_heroIds;
        break;
      }

      // repeated uint32 heroIds = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_heroIds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_heroids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_heroids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_heroIds;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stExpeditionItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 expeditionId = 1;
  if (has_expeditionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->expeditionid(), output);
  }

  // optional uint32 finishTime = 2;
  if (has_finishtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->finishtime(), output);
  }

  // repeated uint32 heroIds = 3;
  for (int i = 0; i < this->heroids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->heroids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stExpeditionItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 expeditionId = 1;
  if (has_expeditionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->expeditionid(), target);
  }

  // optional uint32 finishTime = 2;
  if (has_finishtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->finishtime(), target);
  }

  // repeated uint32 heroIds = 3;
  for (int i = 0; i < this->heroids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->heroids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stExpeditionItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 expeditionId = 1;
    if (has_expeditionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->expeditionid());
    }

    // optional uint32 finishTime = 2;
    if (has_finishtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->finishtime());
    }

  }
  // repeated uint32 heroIds = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->heroids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->heroids(i));
    }
    total_size += 1 * this->heroids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stExpeditionItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stExpeditionItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stExpeditionItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stExpeditionItem::MergeFrom(const stExpeditionItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  heroids_.MergeFrom(from.heroids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_expeditionid()) {
      set_expeditionid(from.expeditionid());
    }
    if (from.has_finishtime()) {
      set_finishtime(from.finishtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stExpeditionItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stExpeditionItem::CopyFrom(const stExpeditionItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stExpeditionItem::IsInitialized() const {

  return true;
}

void stExpeditionItem::Swap(stExpeditionItem* other) {
  if (other != this) {
    std::swap(expeditionid_, other->expeditionid_);
    std::swap(finishtime_, other->finishtime_);
    heroids_.Swap(&other->heroids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stExpeditionItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stExpeditionItem_descriptor_;
  metadata.reflection = stExpeditionItem_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRetExpeditionInfo_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetExpeditionInfo_eResult_descriptor_;
}
bool stRetExpeditionInfo_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetExpeditionInfo_eResult stRetExpeditionInfo::eSuccess;
const stRetExpeditionInfo_eResult stRetExpeditionInfo::eLvl_Limit;
const stRetExpeditionInfo_eResult stRetExpeditionInfo::eResult_MIN;
const stRetExpeditionInfo_eResult stRetExpeditionInfo::eResult_MAX;
const int stRetExpeditionInfo::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetExpeditionInfo_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetExpeditionInfo_ProtoModID_descriptor_;
}
bool stRetExpeditionInfo_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetExpeditionInfo_ProtoModID stRetExpeditionInfo::ModID;
const stRetExpeditionInfo_ProtoModID stRetExpeditionInfo::ProtoModID_MIN;
const stRetExpeditionInfo_ProtoModID stRetExpeditionInfo::ProtoModID_MAX;
const int stRetExpeditionInfo::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetExpeditionInfo_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetExpeditionInfo_ProtoFunID_descriptor_;
}
bool stRetExpeditionInfo_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 54:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetExpeditionInfo_ProtoFunID stRetExpeditionInfo::FunID;
const stRetExpeditionInfo_ProtoFunID stRetExpeditionInfo::ProtoFunID_MIN;
const stRetExpeditionInfo_ProtoFunID stRetExpeditionInfo::ProtoFunID_MAX;
const int stRetExpeditionInfo::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRetExpeditionInfo::kResultFieldNumber;
const int stRetExpeditionInfo::kUsedNumFieldNumber;
const int stRetExpeditionInfo::kItemsFieldNumber;
#endif  // !_MSC_VER

stRetExpeditionInfo::stRetExpeditionInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRetExpeditionInfo::InitAsDefaultInstance() {
}

stRetExpeditionInfo::stRetExpeditionInfo(const stRetExpeditionInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRetExpeditionInfo::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  usednum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRetExpeditionInfo::~stRetExpeditionInfo() {
  SharedDtor();
}

void stRetExpeditionInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRetExpeditionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRetExpeditionInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetExpeditionInfo_descriptor_;
}

const stRetExpeditionInfo& stRetExpeditionInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stRetExpeditionInfo* stRetExpeditionInfo::default_instance_ = NULL;

stRetExpeditionInfo* stRetExpeditionInfo::New() const {
  return new stRetExpeditionInfo;
}

void stRetExpeditionInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
    usednum_ = 0u;
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRetExpeditionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SortProto.stRetExpeditionInfo.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SortProto::stRetExpeditionInfo_eResult_IsValid(value)) {
            set_result(static_cast< ::SortProto::stRetExpeditionInfo_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_usedNum;
        break;
      }

      // optional uint32 usedNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usedNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usednum_)));
          set_has_usednum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_items;
        break;
      }

      // repeated .SortProto.stExpeditionItem items = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRetExpeditionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SortProto.stRetExpeditionInfo.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional uint32 usedNum = 2;
  if (has_usednum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->usednum(), output);
  }

  // repeated .SortProto.stExpeditionItem items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRetExpeditionInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SortProto.stRetExpeditionInfo.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional uint32 usedNum = 2;
  if (has_usednum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->usednum(), target);
  }

  // repeated .SortProto.stExpeditionItem items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRetExpeditionInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SortProto.stRetExpeditionInfo.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional uint32 usedNum = 2;
    if (has_usednum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->usednum());
    }

  }
  // repeated .SortProto.stExpeditionItem items = 3;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRetExpeditionInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRetExpeditionInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRetExpeditionInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRetExpeditionInfo::MergeFrom(const stRetExpeditionInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_usednum()) {
      set_usednum(from.usednum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRetExpeditionInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRetExpeditionInfo::CopyFrom(const stRetExpeditionInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRetExpeditionInfo::IsInitialized() const {

  return true;
}

void stRetExpeditionInfo::Swap(stRetExpeditionInfo* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(usednum_, other->usednum_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRetExpeditionInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRetExpeditionInfo_descriptor_;
  metadata.reflection = stRetExpeditionInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqExpedition_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqExpedition_ProtoModID_descriptor_;
}
bool stReqExpedition_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqExpedition_ProtoModID stReqExpedition::ModID;
const stReqExpedition_ProtoModID stReqExpedition::ProtoModID_MIN;
const stReqExpedition_ProtoModID stReqExpedition::ProtoModID_MAX;
const int stReqExpedition::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqExpedition_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqExpedition_ProtoFunID_descriptor_;
}
bool stReqExpedition_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 55:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqExpedition_ProtoFunID stReqExpedition::FunID;
const stReqExpedition_ProtoFunID stReqExpedition::ProtoFunID_MIN;
const stReqExpedition_ProtoFunID stReqExpedition::ProtoFunID_MAX;
const int stReqExpedition::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqExpedition::kExpeditionIdFieldNumber;
const int stReqExpedition::kHeroIdsFieldNumber;
#endif  // !_MSC_VER

stReqExpedition::stReqExpedition()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqExpedition::InitAsDefaultInstance() {
}

stReqExpedition::stReqExpedition(const stReqExpedition& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqExpedition::SharedCtor() {
  _cached_size_ = 0;
  expeditionid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqExpedition::~stReqExpedition() {
  SharedDtor();
}

void stReqExpedition::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqExpedition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqExpedition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqExpedition_descriptor_;
}

const stReqExpedition& stReqExpedition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stReqExpedition* stReqExpedition::default_instance_ = NULL;

stReqExpedition* stReqExpedition::New() const {
  return new stReqExpedition;
}

void stReqExpedition::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    expeditionid_ = 0u;
  }
  heroids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqExpedition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 expeditionId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &expeditionid_)));
          set_has_expeditionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_heroIds;
        break;
      }

      // repeated uint32 heroIds = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_heroIds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_heroids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_heroids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_heroIds;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqExpedition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 expeditionId = 1;
  if (has_expeditionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->expeditionid(), output);
  }

  // repeated uint32 heroIds = 2;
  for (int i = 0; i < this->heroids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->heroids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqExpedition::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 expeditionId = 1;
  if (has_expeditionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->expeditionid(), target);
  }

  // repeated uint32 heroIds = 2;
  for (int i = 0; i < this->heroids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->heroids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqExpedition::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 expeditionId = 1;
    if (has_expeditionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->expeditionid());
    }

  }
  // repeated uint32 heroIds = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->heroids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->heroids(i));
    }
    total_size += 1 * this->heroids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqExpedition::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqExpedition* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqExpedition*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqExpedition::MergeFrom(const stReqExpedition& from) {
  GOOGLE_CHECK_NE(&from, this);
  heroids_.MergeFrom(from.heroids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_expeditionid()) {
      set_expeditionid(from.expeditionid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqExpedition::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqExpedition::CopyFrom(const stReqExpedition& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqExpedition::IsInitialized() const {

  return true;
}

void stReqExpedition::Swap(stReqExpedition* other) {
  if (other != this) {
    std::swap(expeditionid_, other->expeditionid_);
    heroids_.Swap(&other->heroids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqExpedition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqExpedition_descriptor_;
  metadata.reflection = stReqExpedition_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRetExpedition_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetExpedition_eResult_descriptor_;
}
bool stRetExpedition_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetExpedition_eResult stRetExpedition::eSuccess;
const stRetExpedition_eResult stRetExpedition::eHero_In_Used;
const stRetExpedition_eResult stRetExpedition::eHero_Num_Limit;
const stRetExpedition_eResult stRetExpedition::eLvl_Limit;
const stRetExpedition_eResult stRetExpedition::eTime_Used_Out;
const stRetExpedition_eResult stRetExpedition::eInvalid_Id;
const stRetExpedition_eResult stRetExpedition::eSame_Type;
const stRetExpedition_eResult stRetExpedition::eResult_MIN;
const stRetExpedition_eResult stRetExpedition::eResult_MAX;
const int stRetExpedition::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetExpedition_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetExpedition_ProtoModID_descriptor_;
}
bool stRetExpedition_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetExpedition_ProtoModID stRetExpedition::ModID;
const stRetExpedition_ProtoModID stRetExpedition::ProtoModID_MIN;
const stRetExpedition_ProtoModID stRetExpedition::ProtoModID_MAX;
const int stRetExpedition::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetExpedition_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetExpedition_ProtoFunID_descriptor_;
}
bool stRetExpedition_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 56:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetExpedition_ProtoFunID stRetExpedition::FunID;
const stRetExpedition_ProtoFunID stRetExpedition::ProtoFunID_MIN;
const stRetExpedition_ProtoFunID stRetExpedition::ProtoFunID_MAX;
const int stRetExpedition::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRetExpedition::kExpeditionIdFieldNumber;
const int stRetExpedition::kResultFieldNumber;
#endif  // !_MSC_VER

stRetExpedition::stRetExpedition()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRetExpedition::InitAsDefaultInstance() {
}

stRetExpedition::stRetExpedition(const stRetExpedition& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRetExpedition::SharedCtor() {
  _cached_size_ = 0;
  expeditionid_ = 0u;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRetExpedition::~stRetExpedition() {
  SharedDtor();
}

void stRetExpedition::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRetExpedition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRetExpedition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetExpedition_descriptor_;
}

const stRetExpedition& stRetExpedition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stRetExpedition* stRetExpedition::default_instance_ = NULL;

stRetExpedition* stRetExpedition::New() const {
  return new stRetExpedition;
}

void stRetExpedition::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    expeditionid_ = 0u;
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRetExpedition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 expeditionId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &expeditionid_)));
          set_has_expeditionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .SortProto.stRetExpedition.eResult result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SortProto::stRetExpedition_eResult_IsValid(value)) {
            set_result(static_cast< ::SortProto::stRetExpedition_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRetExpedition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 expeditionId = 1;
  if (has_expeditionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->expeditionid(), output);
  }

  // optional .SortProto.stRetExpedition.eResult result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRetExpedition::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 expeditionId = 1;
  if (has_expeditionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->expeditionid(), target);
  }

  // optional .SortProto.stRetExpedition.eResult result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRetExpedition::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 expeditionId = 1;
    if (has_expeditionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->expeditionid());
    }

    // optional .SortProto.stRetExpedition.eResult result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRetExpedition::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRetExpedition* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRetExpedition*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRetExpedition::MergeFrom(const stRetExpedition& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_expeditionid()) {
      set_expeditionid(from.expeditionid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRetExpedition::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRetExpedition::CopyFrom(const stRetExpedition& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRetExpedition::IsInitialized() const {

  return true;
}

void stRetExpedition::Swap(stRetExpedition* other) {
  if (other != this) {
    std::swap(expeditionid_, other->expeditionid_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRetExpedition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRetExpedition_descriptor_;
  metadata.reflection = stRetExpedition_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqExpeditionReward_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqExpeditionReward_ProtoModID_descriptor_;
}
bool stReqExpeditionReward_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqExpeditionReward_ProtoModID stReqExpeditionReward::ModID;
const stReqExpeditionReward_ProtoModID stReqExpeditionReward::ProtoModID_MIN;
const stReqExpeditionReward_ProtoModID stReqExpeditionReward::ProtoModID_MAX;
const int stReqExpeditionReward::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqExpeditionReward_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqExpeditionReward_ProtoFunID_descriptor_;
}
bool stReqExpeditionReward_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 57:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqExpeditionReward_ProtoFunID stReqExpeditionReward::FunID;
const stReqExpeditionReward_ProtoFunID stReqExpeditionReward::ProtoFunID_MIN;
const stReqExpeditionReward_ProtoFunID stReqExpeditionReward::ProtoFunID_MAX;
const int stReqExpeditionReward::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqExpeditionReward::kExpeditionIdFieldNumber;
#endif  // !_MSC_VER

stReqExpeditionReward::stReqExpeditionReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqExpeditionReward::InitAsDefaultInstance() {
}

stReqExpeditionReward::stReqExpeditionReward(const stReqExpeditionReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqExpeditionReward::SharedCtor() {
  _cached_size_ = 0;
  expeditionid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqExpeditionReward::~stReqExpeditionReward() {
  SharedDtor();
}

void stReqExpeditionReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqExpeditionReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqExpeditionReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqExpeditionReward_descriptor_;
}

const stReqExpeditionReward& stReqExpeditionReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stReqExpeditionReward* stReqExpeditionReward::default_instance_ = NULL;

stReqExpeditionReward* stReqExpeditionReward::New() const {
  return new stReqExpeditionReward;
}

void stReqExpeditionReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    expeditionid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqExpeditionReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 expeditionId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &expeditionid_)));
          set_has_expeditionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqExpeditionReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 expeditionId = 1;
  if (has_expeditionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->expeditionid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqExpeditionReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 expeditionId = 1;
  if (has_expeditionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->expeditionid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqExpeditionReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 expeditionId = 1;
    if (has_expeditionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->expeditionid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqExpeditionReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqExpeditionReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqExpeditionReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqExpeditionReward::MergeFrom(const stReqExpeditionReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_expeditionid()) {
      set_expeditionid(from.expeditionid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqExpeditionReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqExpeditionReward::CopyFrom(const stReqExpeditionReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqExpeditionReward::IsInitialized() const {

  return true;
}

void stReqExpeditionReward::Swap(stReqExpeditionReward* other) {
  if (other != this) {
    std::swap(expeditionid_, other->expeditionid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqExpeditionReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqExpeditionReward_descriptor_;
  metadata.reflection = stReqExpeditionReward_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRetExpeditionReward_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetExpeditionReward_eResult_descriptor_;
}
bool stRetExpeditionReward_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetExpeditionReward_eResult stRetExpeditionReward::eSuccess;
const stRetExpeditionReward_eResult stRetExpeditionReward::eTime_Not_Up;
const stRetExpeditionReward_eResult stRetExpeditionReward::eInvalid_Id;
const stRetExpeditionReward_eResult stRetExpeditionReward::eResult_MIN;
const stRetExpeditionReward_eResult stRetExpeditionReward::eResult_MAX;
const int stRetExpeditionReward::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetExpeditionReward_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetExpeditionReward_ProtoModID_descriptor_;
}
bool stRetExpeditionReward_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetExpeditionReward_ProtoModID stRetExpeditionReward::ModID;
const stRetExpeditionReward_ProtoModID stRetExpeditionReward::ProtoModID_MIN;
const stRetExpeditionReward_ProtoModID stRetExpeditionReward::ProtoModID_MAX;
const int stRetExpeditionReward::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetExpeditionReward_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetExpeditionReward_ProtoFunID_descriptor_;
}
bool stRetExpeditionReward_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 58:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetExpeditionReward_ProtoFunID stRetExpeditionReward::FunID;
const stRetExpeditionReward_ProtoFunID stRetExpeditionReward::ProtoFunID_MIN;
const stRetExpeditionReward_ProtoFunID stRetExpeditionReward::ProtoFunID_MAX;
const int stRetExpeditionReward::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRetExpeditionReward::kExpeditionIdFieldNumber;
const int stRetExpeditionReward::kResultFieldNumber;
#endif  // !_MSC_VER

stRetExpeditionReward::stRetExpeditionReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRetExpeditionReward::InitAsDefaultInstance() {
}

stRetExpeditionReward::stRetExpeditionReward(const stRetExpeditionReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRetExpeditionReward::SharedCtor() {
  _cached_size_ = 0;
  expeditionid_ = 0u;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRetExpeditionReward::~stRetExpeditionReward() {
  SharedDtor();
}

void stRetExpeditionReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRetExpeditionReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRetExpeditionReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetExpeditionReward_descriptor_;
}

const stRetExpeditionReward& stRetExpeditionReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stRetExpeditionReward* stRetExpeditionReward::default_instance_ = NULL;

stRetExpeditionReward* stRetExpeditionReward::New() const {
  return new stRetExpeditionReward;
}

void stRetExpeditionReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    expeditionid_ = 0u;
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRetExpeditionReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 expeditionId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &expeditionid_)));
          set_has_expeditionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .SortProto.stRetExpeditionReward.eResult result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SortProto::stRetExpeditionReward_eResult_IsValid(value)) {
            set_result(static_cast< ::SortProto::stRetExpeditionReward_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRetExpeditionReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 expeditionId = 1;
  if (has_expeditionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->expeditionid(), output);
  }

  // optional .SortProto.stRetExpeditionReward.eResult result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRetExpeditionReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 expeditionId = 1;
  if (has_expeditionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->expeditionid(), target);
  }

  // optional .SortProto.stRetExpeditionReward.eResult result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRetExpeditionReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 expeditionId = 1;
    if (has_expeditionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->expeditionid());
    }

    // optional .SortProto.stRetExpeditionReward.eResult result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRetExpeditionReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRetExpeditionReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRetExpeditionReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRetExpeditionReward::MergeFrom(const stRetExpeditionReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_expeditionid()) {
      set_expeditionid(from.expeditionid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRetExpeditionReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRetExpeditionReward::CopyFrom(const stRetExpeditionReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRetExpeditionReward::IsInitialized() const {

  return true;
}

void stRetExpeditionReward::Swap(stRetExpeditionReward* other) {
  if (other != this) {
    std::swap(expeditionid_, other->expeditionid_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRetExpeditionReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRetExpeditionReward_descriptor_;
  metadata.reflection = stRetExpeditionReward_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqFastExpedition_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqFastExpedition_ProtoModID_descriptor_;
}
bool stReqFastExpedition_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqFastExpedition_ProtoModID stReqFastExpedition::ModID;
const stReqFastExpedition_ProtoModID stReqFastExpedition::ProtoModID_MIN;
const stReqFastExpedition_ProtoModID stReqFastExpedition::ProtoModID_MAX;
const int stReqFastExpedition::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqFastExpedition_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqFastExpedition_ProtoFunID_descriptor_;
}
bool stReqFastExpedition_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 59:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqFastExpedition_ProtoFunID stReqFastExpedition::FunID;
const stReqFastExpedition_ProtoFunID stReqFastExpedition::ProtoFunID_MIN;
const stReqFastExpedition_ProtoFunID stReqFastExpedition::ProtoFunID_MAX;
const int stReqFastExpedition::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqFastExpedition::kExpeditionIdFieldNumber;
#endif  // !_MSC_VER

stReqFastExpedition::stReqFastExpedition()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqFastExpedition::InitAsDefaultInstance() {
}

stReqFastExpedition::stReqFastExpedition(const stReqFastExpedition& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqFastExpedition::SharedCtor() {
  _cached_size_ = 0;
  expeditionid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqFastExpedition::~stReqFastExpedition() {
  SharedDtor();
}

void stReqFastExpedition::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqFastExpedition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqFastExpedition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqFastExpedition_descriptor_;
}

const stReqFastExpedition& stReqFastExpedition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stReqFastExpedition* stReqFastExpedition::default_instance_ = NULL;

stReqFastExpedition* stReqFastExpedition::New() const {
  return new stReqFastExpedition;
}

void stReqFastExpedition::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    expeditionid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqFastExpedition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 expeditionId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &expeditionid_)));
          set_has_expeditionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqFastExpedition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 expeditionId = 1;
  if (has_expeditionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->expeditionid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqFastExpedition::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 expeditionId = 1;
  if (has_expeditionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->expeditionid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqFastExpedition::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 expeditionId = 1;
    if (has_expeditionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->expeditionid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqFastExpedition::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqFastExpedition* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqFastExpedition*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqFastExpedition::MergeFrom(const stReqFastExpedition& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_expeditionid()) {
      set_expeditionid(from.expeditionid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqFastExpedition::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqFastExpedition::CopyFrom(const stReqFastExpedition& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqFastExpedition::IsInitialized() const {

  return true;
}

void stReqFastExpedition::Swap(stReqFastExpedition* other) {
  if (other != this) {
    std::swap(expeditionid_, other->expeditionid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqFastExpedition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqFastExpedition_descriptor_;
  metadata.reflection = stReqFastExpedition_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRetFastExpedition_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetFastExpedition_eResult_descriptor_;
}
bool stRetFastExpedition_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetFastExpedition_eResult stRetFastExpedition::eSuccess;
const stRetFastExpedition_eResult stRetFastExpedition::eTime_Out;
const stRetFastExpedition_eResult stRetFastExpedition::eInvalid_Id;
const stRetFastExpedition_eResult stRetFastExpedition::eLess_Of_Diamond;
const stRetFastExpedition_eResult stRetFastExpedition::eResult_MIN;
const stRetFastExpedition_eResult stRetFastExpedition::eResult_MAX;
const int stRetFastExpedition::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetFastExpedition_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetFastExpedition_ProtoModID_descriptor_;
}
bool stRetFastExpedition_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetFastExpedition_ProtoModID stRetFastExpedition::ModID;
const stRetFastExpedition_ProtoModID stRetFastExpedition::ProtoModID_MIN;
const stRetFastExpedition_ProtoModID stRetFastExpedition::ProtoModID_MAX;
const int stRetFastExpedition::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetFastExpedition_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetFastExpedition_ProtoFunID_descriptor_;
}
bool stRetFastExpedition_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 60:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetFastExpedition_ProtoFunID stRetFastExpedition::FunID;
const stRetFastExpedition_ProtoFunID stRetFastExpedition::ProtoFunID_MIN;
const stRetFastExpedition_ProtoFunID stRetFastExpedition::ProtoFunID_MAX;
const int stRetFastExpedition::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRetFastExpedition::kExpeditionIdFieldNumber;
const int stRetFastExpedition::kResultFieldNumber;
#endif  // !_MSC_VER

stRetFastExpedition::stRetFastExpedition()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRetFastExpedition::InitAsDefaultInstance() {
}

stRetFastExpedition::stRetFastExpedition(const stRetFastExpedition& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRetFastExpedition::SharedCtor() {
  _cached_size_ = 0;
  expeditionid_ = 0u;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRetFastExpedition::~stRetFastExpedition() {
  SharedDtor();
}

void stRetFastExpedition::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRetFastExpedition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRetFastExpedition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetFastExpedition_descriptor_;
}

const stRetFastExpedition& stRetFastExpedition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stRetFastExpedition* stRetFastExpedition::default_instance_ = NULL;

stRetFastExpedition* stRetFastExpedition::New() const {
  return new stRetFastExpedition;
}

void stRetFastExpedition::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    expeditionid_ = 0u;
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRetFastExpedition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 expeditionId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &expeditionid_)));
          set_has_expeditionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .SortProto.stRetFastExpedition.eResult result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SortProto::stRetFastExpedition_eResult_IsValid(value)) {
            set_result(static_cast< ::SortProto::stRetFastExpedition_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRetFastExpedition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 expeditionId = 1;
  if (has_expeditionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->expeditionid(), output);
  }

  // optional .SortProto.stRetFastExpedition.eResult result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRetFastExpedition::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 expeditionId = 1;
  if (has_expeditionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->expeditionid(), target);
  }

  // optional .SortProto.stRetFastExpedition.eResult result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRetFastExpedition::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 expeditionId = 1;
    if (has_expeditionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->expeditionid());
    }

    // optional .SortProto.stRetFastExpedition.eResult result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRetFastExpedition::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRetFastExpedition* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRetFastExpedition*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRetFastExpedition::MergeFrom(const stRetFastExpedition& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_expeditionid()) {
      set_expeditionid(from.expeditionid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRetFastExpedition::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRetFastExpedition::CopyFrom(const stRetFastExpedition& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRetFastExpedition::IsInitialized() const {

  return true;
}

void stRetFastExpedition::Swap(stRetFastExpedition* other) {
  if (other != this) {
    std::swap(expeditionid_, other->expeditionid_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRetFastExpedition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRetFastExpedition_descriptor_;
  metadata.reflection = stRetFastExpedition_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqCancelExpedition_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqCancelExpedition_ProtoModID_descriptor_;
}
bool stReqCancelExpedition_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqCancelExpedition_ProtoModID stReqCancelExpedition::ModID;
const stReqCancelExpedition_ProtoModID stReqCancelExpedition::ProtoModID_MIN;
const stReqCancelExpedition_ProtoModID stReqCancelExpedition::ProtoModID_MAX;
const int stReqCancelExpedition::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqCancelExpedition_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqCancelExpedition_ProtoFunID_descriptor_;
}
bool stReqCancelExpedition_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 61:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqCancelExpedition_ProtoFunID stReqCancelExpedition::FunID;
const stReqCancelExpedition_ProtoFunID stReqCancelExpedition::ProtoFunID_MIN;
const stReqCancelExpedition_ProtoFunID stReqCancelExpedition::ProtoFunID_MAX;
const int stReqCancelExpedition::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqCancelExpedition::kExpeditionIdFieldNumber;
#endif  // !_MSC_VER

stReqCancelExpedition::stReqCancelExpedition()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqCancelExpedition::InitAsDefaultInstance() {
}

stReqCancelExpedition::stReqCancelExpedition(const stReqCancelExpedition& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqCancelExpedition::SharedCtor() {
  _cached_size_ = 0;
  expeditionid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqCancelExpedition::~stReqCancelExpedition() {
  SharedDtor();
}

void stReqCancelExpedition::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqCancelExpedition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqCancelExpedition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqCancelExpedition_descriptor_;
}

const stReqCancelExpedition& stReqCancelExpedition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stReqCancelExpedition* stReqCancelExpedition::default_instance_ = NULL;

stReqCancelExpedition* stReqCancelExpedition::New() const {
  return new stReqCancelExpedition;
}

void stReqCancelExpedition::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    expeditionid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqCancelExpedition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 expeditionId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &expeditionid_)));
          set_has_expeditionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqCancelExpedition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 expeditionId = 1;
  if (has_expeditionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->expeditionid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqCancelExpedition::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 expeditionId = 1;
  if (has_expeditionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->expeditionid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqCancelExpedition::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 expeditionId = 1;
    if (has_expeditionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->expeditionid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqCancelExpedition::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqCancelExpedition* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqCancelExpedition*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqCancelExpedition::MergeFrom(const stReqCancelExpedition& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_expeditionid()) {
      set_expeditionid(from.expeditionid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqCancelExpedition::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqCancelExpedition::CopyFrom(const stReqCancelExpedition& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqCancelExpedition::IsInitialized() const {

  return true;
}

void stReqCancelExpedition::Swap(stReqCancelExpedition* other) {
  if (other != this) {
    std::swap(expeditionid_, other->expeditionid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqCancelExpedition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqCancelExpedition_descriptor_;
  metadata.reflection = stReqCancelExpedition_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRetCancelExpedition_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetCancelExpedition_eResult_descriptor_;
}
bool stRetCancelExpedition_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetCancelExpedition_eResult stRetCancelExpedition::eSuccess;
const stRetCancelExpedition_eResult stRetCancelExpedition::eTime_Out;
const stRetCancelExpedition_eResult stRetCancelExpedition::eInvalid_Id;
const stRetCancelExpedition_eResult stRetCancelExpedition::eResult_MIN;
const stRetCancelExpedition_eResult stRetCancelExpedition::eResult_MAX;
const int stRetCancelExpedition::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetCancelExpedition_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetCancelExpedition_ProtoModID_descriptor_;
}
bool stRetCancelExpedition_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetCancelExpedition_ProtoModID stRetCancelExpedition::ModID;
const stRetCancelExpedition_ProtoModID stRetCancelExpedition::ProtoModID_MIN;
const stRetCancelExpedition_ProtoModID stRetCancelExpedition::ProtoModID_MAX;
const int stRetCancelExpedition::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetCancelExpedition_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetCancelExpedition_ProtoFunID_descriptor_;
}
bool stRetCancelExpedition_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 62:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetCancelExpedition_ProtoFunID stRetCancelExpedition::FunID;
const stRetCancelExpedition_ProtoFunID stRetCancelExpedition::ProtoFunID_MIN;
const stRetCancelExpedition_ProtoFunID stRetCancelExpedition::ProtoFunID_MAX;
const int stRetCancelExpedition::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRetCancelExpedition::kExpeditionIdFieldNumber;
const int stRetCancelExpedition::kResultFieldNumber;
#endif  // !_MSC_VER

stRetCancelExpedition::stRetCancelExpedition()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRetCancelExpedition::InitAsDefaultInstance() {
}

stRetCancelExpedition::stRetCancelExpedition(const stRetCancelExpedition& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRetCancelExpedition::SharedCtor() {
  _cached_size_ = 0;
  expeditionid_ = 0u;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRetCancelExpedition::~stRetCancelExpedition() {
  SharedDtor();
}

void stRetCancelExpedition::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRetCancelExpedition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRetCancelExpedition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetCancelExpedition_descriptor_;
}

const stRetCancelExpedition& stRetCancelExpedition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stRetCancelExpedition* stRetCancelExpedition::default_instance_ = NULL;

stRetCancelExpedition* stRetCancelExpedition::New() const {
  return new stRetCancelExpedition;
}

void stRetCancelExpedition::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    expeditionid_ = 0u;
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRetCancelExpedition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 expeditionId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &expeditionid_)));
          set_has_expeditionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .SortProto.stRetCancelExpedition.eResult result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SortProto::stRetCancelExpedition_eResult_IsValid(value)) {
            set_result(static_cast< ::SortProto::stRetCancelExpedition_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRetCancelExpedition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 expeditionId = 1;
  if (has_expeditionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->expeditionid(), output);
  }

  // optional .SortProto.stRetCancelExpedition.eResult result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRetCancelExpedition::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 expeditionId = 1;
  if (has_expeditionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->expeditionid(), target);
  }

  // optional .SortProto.stRetCancelExpedition.eResult result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRetCancelExpedition::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 expeditionId = 1;
    if (has_expeditionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->expeditionid());
    }

    // optional .SortProto.stRetCancelExpedition.eResult result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRetCancelExpedition::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRetCancelExpedition* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRetCancelExpedition*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRetCancelExpedition::MergeFrom(const stRetCancelExpedition& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_expeditionid()) {
      set_expeditionid(from.expeditionid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRetCancelExpedition::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRetCancelExpedition::CopyFrom(const stRetCancelExpedition& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRetCancelExpedition::IsInitialized() const {

  return true;
}

void stRetCancelExpedition::Swap(stRetCancelExpedition* other) {
  if (other != this) {
    std::swap(expeditionid_, other->expeditionid_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRetCancelExpedition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRetCancelExpedition_descriptor_;
  metadata.reflection = stRetCancelExpedition_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqExpeditionSummary_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqExpeditionSummary_ProtoModID_descriptor_;
}
bool stReqExpeditionSummary_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqExpeditionSummary_ProtoModID stReqExpeditionSummary::ModID;
const stReqExpeditionSummary_ProtoModID stReqExpeditionSummary::ProtoModID_MIN;
const stReqExpeditionSummary_ProtoModID stReqExpeditionSummary::ProtoModID_MAX;
const int stReqExpeditionSummary::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqExpeditionSummary_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqExpeditionSummary_ProtoFunID_descriptor_;
}
bool stReqExpeditionSummary_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 63:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqExpeditionSummary_ProtoFunID stReqExpeditionSummary::FunID;
const stReqExpeditionSummary_ProtoFunID stReqExpeditionSummary::ProtoFunID_MIN;
const stReqExpeditionSummary_ProtoFunID stReqExpeditionSummary::ProtoFunID_MAX;
const int stReqExpeditionSummary::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqExpeditionSummary::kCharIDFieldNumber;
#endif  // !_MSC_VER

stReqExpeditionSummary::stReqExpeditionSummary()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqExpeditionSummary::InitAsDefaultInstance() {
}

stReqExpeditionSummary::stReqExpeditionSummary(const stReqExpeditionSummary& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqExpeditionSummary::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqExpeditionSummary::~stReqExpeditionSummary() {
  SharedDtor();
}

void stReqExpeditionSummary::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqExpeditionSummary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqExpeditionSummary::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqExpeditionSummary_descriptor_;
}

const stReqExpeditionSummary& stReqExpeditionSummary::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stReqExpeditionSummary* stReqExpeditionSummary::default_instance_ = NULL;

stReqExpeditionSummary* stReqExpeditionSummary::New() const {
  return new stReqExpeditionSummary;
}

void stReqExpeditionSummary::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqExpeditionSummary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqExpeditionSummary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqExpeditionSummary::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqExpeditionSummary::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqExpeditionSummary::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqExpeditionSummary* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqExpeditionSummary*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqExpeditionSummary::MergeFrom(const stReqExpeditionSummary& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqExpeditionSummary::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqExpeditionSummary::CopyFrom(const stReqExpeditionSummary& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqExpeditionSummary::IsInitialized() const {

  return true;
}

void stReqExpeditionSummary::Swap(stReqExpeditionSummary* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqExpeditionSummary::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqExpeditionSummary_descriptor_;
  metadata.reflection = stReqExpeditionSummary_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRetExpeditionSummary_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetExpeditionSummary_eResult_descriptor_;
}
bool stRetExpeditionSummary_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetExpeditionSummary_eResult stRetExpeditionSummary::eSuccess;
const stRetExpeditionSummary_eResult stRetExpeditionSummary::eLvl_Limit;
const stRetExpeditionSummary_eResult stRetExpeditionSummary::eResult_MIN;
const stRetExpeditionSummary_eResult stRetExpeditionSummary::eResult_MAX;
const int stRetExpeditionSummary::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetExpeditionSummary_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetExpeditionSummary_ProtoModID_descriptor_;
}
bool stRetExpeditionSummary_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetExpeditionSummary_ProtoModID stRetExpeditionSummary::ModID;
const stRetExpeditionSummary_ProtoModID stRetExpeditionSummary::ProtoModID_MIN;
const stRetExpeditionSummary_ProtoModID stRetExpeditionSummary::ProtoModID_MAX;
const int stRetExpeditionSummary::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetExpeditionSummary_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetExpeditionSummary_ProtoFunID_descriptor_;
}
bool stRetExpeditionSummary_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 64:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetExpeditionSummary_ProtoFunID stRetExpeditionSummary::FunID;
const stRetExpeditionSummary_ProtoFunID stRetExpeditionSummary::ProtoFunID_MIN;
const stRetExpeditionSummary_ProtoFunID stRetExpeditionSummary::ProtoFunID_MAX;
const int stRetExpeditionSummary::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRetExpeditionSummary::kResultFieldNumber;
const int stRetExpeditionSummary::kUsedTimesFieldNumber;
const int stRetExpeditionSummary::kItemsFieldNumber;
#endif  // !_MSC_VER

stRetExpeditionSummary::stRetExpeditionSummary()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRetExpeditionSummary::InitAsDefaultInstance() {
}

stRetExpeditionSummary::stRetExpeditionSummary(const stRetExpeditionSummary& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRetExpeditionSummary::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  usedtimes_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRetExpeditionSummary::~stRetExpeditionSummary() {
  SharedDtor();
}

void stRetExpeditionSummary::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRetExpeditionSummary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRetExpeditionSummary::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetExpeditionSummary_descriptor_;
}

const stRetExpeditionSummary& stRetExpeditionSummary::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stRetExpeditionSummary* stRetExpeditionSummary::default_instance_ = NULL;

stRetExpeditionSummary* stRetExpeditionSummary::New() const {
  return new stRetExpeditionSummary;
}

void stRetExpeditionSummary::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
    usedtimes_ = 0u;
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRetExpeditionSummary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SortProto.stRetExpeditionSummary.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SortProto::stRetExpeditionSummary_eResult_IsValid(value)) {
            set_result(static_cast< ::SortProto::stRetExpeditionSummary_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_usedTimes;
        break;
      }

      // optional uint32 usedTimes = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usedTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usedtimes_)));
          set_has_usedtimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_items;
        break;
      }

      // repeated .SortProto.stExpeditionItem items = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRetExpeditionSummary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SortProto.stRetExpeditionSummary.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional uint32 usedTimes = 2;
  if (has_usedtimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->usedtimes(), output);
  }

  // repeated .SortProto.stExpeditionItem items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRetExpeditionSummary::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SortProto.stRetExpeditionSummary.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional uint32 usedTimes = 2;
  if (has_usedtimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->usedtimes(), target);
  }

  // repeated .SortProto.stExpeditionItem items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRetExpeditionSummary::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SortProto.stRetExpeditionSummary.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional uint32 usedTimes = 2;
    if (has_usedtimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->usedtimes());
    }

  }
  // repeated .SortProto.stExpeditionItem items = 3;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRetExpeditionSummary::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRetExpeditionSummary* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRetExpeditionSummary*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRetExpeditionSummary::MergeFrom(const stRetExpeditionSummary& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_usedtimes()) {
      set_usedtimes(from.usedtimes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRetExpeditionSummary::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRetExpeditionSummary::CopyFrom(const stRetExpeditionSummary& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRetExpeditionSummary::IsInitialized() const {

  return true;
}

void stRetExpeditionSummary::Swap(stRetExpeditionSummary* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(usedtimes_, other->usedtimes_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRetExpeditionSummary::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRetExpeditionSummary_descriptor_;
  metadata.reflection = stRetExpeditionSummary_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqGloryfashionSortList_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqGloryfashionSortList_ProtoModID_descriptor_;
}
bool stReqGloryfashionSortList_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqGloryfashionSortList_ProtoModID stReqGloryfashionSortList::ModID;
const stReqGloryfashionSortList_ProtoModID stReqGloryfashionSortList::ProtoModID_MIN;
const stReqGloryfashionSortList_ProtoModID stReqGloryfashionSortList::ProtoModID_MAX;
const int stReqGloryfashionSortList::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqGloryfashionSortList_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqGloryfashionSortList_ProtoFunID_descriptor_;
}
bool stReqGloryfashionSortList_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 65:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqGloryfashionSortList_ProtoFunID stReqGloryfashionSortList::FunID;
const stReqGloryfashionSortList_ProtoFunID stReqGloryfashionSortList::ProtoFunID_MIN;
const stReqGloryfashionSortList_ProtoFunID stReqGloryfashionSortList::ProtoFunID_MAX;
const int stReqGloryfashionSortList::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqGloryfashionSortList::kFromRankFieldNumber;
#endif  // !_MSC_VER

stReqGloryfashionSortList::stReqGloryfashionSortList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqGloryfashionSortList::InitAsDefaultInstance() {
}

stReqGloryfashionSortList::stReqGloryfashionSortList(const stReqGloryfashionSortList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqGloryfashionSortList::SharedCtor() {
  _cached_size_ = 0;
  fromrank_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqGloryfashionSortList::~stReqGloryfashionSortList() {
  SharedDtor();
}

void stReqGloryfashionSortList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqGloryfashionSortList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqGloryfashionSortList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqGloryfashionSortList_descriptor_;
}

const stReqGloryfashionSortList& stReqGloryfashionSortList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stReqGloryfashionSortList* stReqGloryfashionSortList::default_instance_ = NULL;

stReqGloryfashionSortList* stReqGloryfashionSortList::New() const {
  return new stReqGloryfashionSortList;
}

void stReqGloryfashionSortList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fromrank_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqGloryfashionSortList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 fromRank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fromrank_)));
          set_has_fromrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqGloryfashionSortList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 fromRank = 1;
  if (has_fromrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fromrank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqGloryfashionSortList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 fromRank = 1;
  if (has_fromrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fromrank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqGloryfashionSortList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 fromRank = 1;
    if (has_fromrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fromrank());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqGloryfashionSortList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqGloryfashionSortList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqGloryfashionSortList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqGloryfashionSortList::MergeFrom(const stReqGloryfashionSortList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fromrank()) {
      set_fromrank(from.fromrank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqGloryfashionSortList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqGloryfashionSortList::CopyFrom(const stReqGloryfashionSortList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqGloryfashionSortList::IsInitialized() const {

  return true;
}

void stReqGloryfashionSortList::Swap(stReqGloryfashionSortList* other) {
  if (other != this) {
    std::swap(fromrank_, other->fromrank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqGloryfashionSortList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqGloryfashionSortList_descriptor_;
  metadata.reflection = stReqGloryfashionSortList_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stGloryfashionSortList_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGloryfashionSortList_ProtoModID_descriptor_;
}
bool stGloryfashionSortList_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stGloryfashionSortList_ProtoModID stGloryfashionSortList::ModID;
const stGloryfashionSortList_ProtoModID stGloryfashionSortList::ProtoModID_MIN;
const stGloryfashionSortList_ProtoModID stGloryfashionSortList::ProtoModID_MAX;
const int stGloryfashionSortList::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stGloryfashionSortList_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGloryfashionSortList_ProtoFunID_descriptor_;
}
bool stGloryfashionSortList_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 66:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stGloryfashionSortList_ProtoFunID stGloryfashionSortList::FunID;
const stGloryfashionSortList_ProtoFunID stGloryfashionSortList::ProtoFunID_MIN;
const stGloryfashionSortList_ProtoFunID stGloryfashionSortList::ProtoFunID_MAX;
const int stGloryfashionSortList::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stGloryfashionSortList::kBeginRankFieldNumber;
const int stGloryfashionSortList::kNameFieldNumber;
#endif  // !_MSC_VER

stGloryfashionSortList::stGloryfashionSortList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stGloryfashionSortList::InitAsDefaultInstance() {
}

stGloryfashionSortList::stGloryfashionSortList(const stGloryfashionSortList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stGloryfashionSortList::SharedCtor() {
  _cached_size_ = 0;
  beginrank_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stGloryfashionSortList::~stGloryfashionSortList() {
  SharedDtor();
}

void stGloryfashionSortList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stGloryfashionSortList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stGloryfashionSortList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGloryfashionSortList_descriptor_;
}

const stGloryfashionSortList& stGloryfashionSortList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stGloryfashionSortList* stGloryfashionSortList::default_instance_ = NULL;

stGloryfashionSortList* stGloryfashionSortList::New() const {
  return new stGloryfashionSortList;
}

void stGloryfashionSortList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    beginrank_ = 0u;
  }
  name_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stGloryfashionSortList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 beginRank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &beginrank_)));
          set_has_beginrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // repeated string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name(this->name_size() - 1).data(),
            this->name(this->name_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stGloryfashionSortList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 beginRank = 1;
  if (has_beginrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->beginrank(), output);
  }

  // repeated string name = 2;
  for (int i = 0; i < this->name_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->name(i).data(), this->name(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stGloryfashionSortList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 beginRank = 1;
  if (has_beginrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->beginrank(), target);
  }

  // repeated string name = 2;
  for (int i = 0; i < this->name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name(i).data(), this->name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->name(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stGloryfashionSortList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 beginRank = 1;
    if (has_beginrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->beginrank());
    }

  }
  // repeated string name = 2;
  total_size += 1 * this->name_size();
  for (int i = 0; i < this->name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->name(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stGloryfashionSortList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stGloryfashionSortList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stGloryfashionSortList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stGloryfashionSortList::MergeFrom(const stGloryfashionSortList& from) {
  GOOGLE_CHECK_NE(&from, this);
  name_.MergeFrom(from.name_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_beginrank()) {
      set_beginrank(from.beginrank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stGloryfashionSortList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stGloryfashionSortList::CopyFrom(const stGloryfashionSortList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stGloryfashionSortList::IsInitialized() const {

  return true;
}

void stGloryfashionSortList::Swap(stGloryfashionSortList* other) {
  if (other != this) {
    std::swap(beginrank_, other->beginrank_);
    name_.Swap(&other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stGloryfashionSortList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stGloryfashionSortList_descriptor_;
  metadata.reflection = stGloryfashionSortList_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqEnterEmeraldDream_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqEnterEmeraldDream_ProtoModID_descriptor_;
}
bool stReqEnterEmeraldDream_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqEnterEmeraldDream_ProtoModID stReqEnterEmeraldDream::ModID;
const stReqEnterEmeraldDream_ProtoModID stReqEnterEmeraldDream::ProtoModID_MIN;
const stReqEnterEmeraldDream_ProtoModID stReqEnterEmeraldDream::ProtoModID_MAX;
const int stReqEnterEmeraldDream::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqEnterEmeraldDream_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqEnterEmeraldDream_ProtoFunID_descriptor_;
}
bool stReqEnterEmeraldDream_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 67:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqEnterEmeraldDream_ProtoFunID stReqEnterEmeraldDream::FunID;
const stReqEnterEmeraldDream_ProtoFunID stReqEnterEmeraldDream::ProtoFunID_MIN;
const stReqEnterEmeraldDream_ProtoFunID stReqEnterEmeraldDream::ProtoFunID_MAX;
const int stReqEnterEmeraldDream::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqEnterEmeraldDream::kLevelIDFieldNumber;
#endif  // !_MSC_VER

stReqEnterEmeraldDream::stReqEnterEmeraldDream()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqEnterEmeraldDream::InitAsDefaultInstance() {
}

stReqEnterEmeraldDream::stReqEnterEmeraldDream(const stReqEnterEmeraldDream& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqEnterEmeraldDream::SharedCtor() {
  _cached_size_ = 0;
  levelid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqEnterEmeraldDream::~stReqEnterEmeraldDream() {
  SharedDtor();
}

void stReqEnterEmeraldDream::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqEnterEmeraldDream::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqEnterEmeraldDream::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqEnterEmeraldDream_descriptor_;
}

const stReqEnterEmeraldDream& stReqEnterEmeraldDream::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stReqEnterEmeraldDream* stReqEnterEmeraldDream::default_instance_ = NULL;

stReqEnterEmeraldDream* stReqEnterEmeraldDream::New() const {
  return new stReqEnterEmeraldDream;
}

void stReqEnterEmeraldDream::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    levelid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqEnterEmeraldDream::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 levelID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &levelid_)));
          set_has_levelid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqEnterEmeraldDream::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 levelID = 1;
  if (has_levelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->levelid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqEnterEmeraldDream::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 levelID = 1;
  if (has_levelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->levelid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqEnterEmeraldDream::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 levelID = 1;
    if (has_levelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->levelid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqEnterEmeraldDream::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqEnterEmeraldDream* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqEnterEmeraldDream*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqEnterEmeraldDream::MergeFrom(const stReqEnterEmeraldDream& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_levelid()) {
      set_levelid(from.levelid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqEnterEmeraldDream::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqEnterEmeraldDream::CopyFrom(const stReqEnterEmeraldDream& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqEnterEmeraldDream::IsInitialized() const {

  return true;
}

void stReqEnterEmeraldDream::Swap(stReqEnterEmeraldDream* other) {
  if (other != this) {
    std::swap(levelid_, other->levelid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqEnterEmeraldDream::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqEnterEmeraldDream_descriptor_;
  metadata.reflection = stReqEnterEmeraldDream_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stEnterEmeraldDreamResult_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stEnterEmeraldDreamResult_eResult_descriptor_;
}
bool stEnterEmeraldDreamResult_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stEnterEmeraldDreamResult_eResult stEnterEmeraldDreamResult::eSuccess;
const stEnterEmeraldDreamResult_eResult stEnterEmeraldDreamResult::eLvl_Limit;
const stEnterEmeraldDreamResult_eResult stEnterEmeraldDreamResult::Fight_Num_Not_Enough;
const stEnterEmeraldDreamResult_eResult stEnterEmeraldDreamResult::SVR_CFG_ERROR;
const stEnterEmeraldDreamResult_eResult stEnterEmeraldDreamResult::BAG_FULL;
const stEnterEmeraldDreamResult_eResult stEnterEmeraldDreamResult::NOT_OPEN_TIME;
const stEnterEmeraldDreamResult_eResult stEnterEmeraldDreamResult::eResult_MIN;
const stEnterEmeraldDreamResult_eResult stEnterEmeraldDreamResult::eResult_MAX;
const int stEnterEmeraldDreamResult::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stEnterEmeraldDreamResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stEnterEmeraldDreamResult_ProtoModID_descriptor_;
}
bool stEnterEmeraldDreamResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stEnterEmeraldDreamResult_ProtoModID stEnterEmeraldDreamResult::ModID;
const stEnterEmeraldDreamResult_ProtoModID stEnterEmeraldDreamResult::ProtoModID_MIN;
const stEnterEmeraldDreamResult_ProtoModID stEnterEmeraldDreamResult::ProtoModID_MAX;
const int stEnterEmeraldDreamResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stEnterEmeraldDreamResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stEnterEmeraldDreamResult_ProtoFunID_descriptor_;
}
bool stEnterEmeraldDreamResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 68:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stEnterEmeraldDreamResult_ProtoFunID stEnterEmeraldDreamResult::FunID;
const stEnterEmeraldDreamResult_ProtoFunID stEnterEmeraldDreamResult::ProtoFunID_MIN;
const stEnterEmeraldDreamResult_ProtoFunID stEnterEmeraldDreamResult::ProtoFunID_MAX;
const int stEnterEmeraldDreamResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stEnterEmeraldDreamResult::kResultFieldNumber;
#endif  // !_MSC_VER

stEnterEmeraldDreamResult::stEnterEmeraldDreamResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stEnterEmeraldDreamResult::InitAsDefaultInstance() {
}

stEnterEmeraldDreamResult::stEnterEmeraldDreamResult(const stEnterEmeraldDreamResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stEnterEmeraldDreamResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stEnterEmeraldDreamResult::~stEnterEmeraldDreamResult() {
  SharedDtor();
}

void stEnterEmeraldDreamResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stEnterEmeraldDreamResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stEnterEmeraldDreamResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stEnterEmeraldDreamResult_descriptor_;
}

const stEnterEmeraldDreamResult& stEnterEmeraldDreamResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stEnterEmeraldDreamResult* stEnterEmeraldDreamResult::default_instance_ = NULL;

stEnterEmeraldDreamResult* stEnterEmeraldDreamResult::New() const {
  return new stEnterEmeraldDreamResult;
}

void stEnterEmeraldDreamResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stEnterEmeraldDreamResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SortProto.stEnterEmeraldDreamResult.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SortProto::stEnterEmeraldDreamResult_eResult_IsValid(value)) {
            set_result(static_cast< ::SortProto::stEnterEmeraldDreamResult_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stEnterEmeraldDreamResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SortProto.stEnterEmeraldDreamResult.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stEnterEmeraldDreamResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SortProto.stEnterEmeraldDreamResult.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stEnterEmeraldDreamResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SortProto.stEnterEmeraldDreamResult.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stEnterEmeraldDreamResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stEnterEmeraldDreamResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stEnterEmeraldDreamResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stEnterEmeraldDreamResult::MergeFrom(const stEnterEmeraldDreamResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stEnterEmeraldDreamResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stEnterEmeraldDreamResult::CopyFrom(const stEnterEmeraldDreamResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stEnterEmeraldDreamResult::IsInitialized() const {

  return true;
}

void stEnterEmeraldDreamResult::Swap(stEnterEmeraldDreamResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stEnterEmeraldDreamResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stEnterEmeraldDreamResult_descriptor_;
  metadata.reflection = stEnterEmeraldDreamResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stResetFightNum_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stResetFightNum_ProtoModID_descriptor_;
}
bool stResetFightNum_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stResetFightNum_ProtoModID stResetFightNum::ModID;
const stResetFightNum_ProtoModID stResetFightNum::ProtoModID_MIN;
const stResetFightNum_ProtoModID stResetFightNum::ProtoModID_MAX;
const int stResetFightNum::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stResetFightNum_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stResetFightNum_ProtoFunID_descriptor_;
}
bool stResetFightNum_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 69:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stResetFightNum_ProtoFunID stResetFightNum::FunID;
const stResetFightNum_ProtoFunID stResetFightNum::ProtoFunID_MIN;
const stResetFightNum_ProtoFunID stResetFightNum::ProtoFunID_MAX;
const int stResetFightNum::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stResetFightNum::kCharIDFieldNumber;
#endif  // !_MSC_VER

stResetFightNum::stResetFightNum()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stResetFightNum::InitAsDefaultInstance() {
}

stResetFightNum::stResetFightNum(const stResetFightNum& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stResetFightNum::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stResetFightNum::~stResetFightNum() {
  SharedDtor();
}

void stResetFightNum::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stResetFightNum::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stResetFightNum::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stResetFightNum_descriptor_;
}

const stResetFightNum& stResetFightNum::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stResetFightNum* stResetFightNum::default_instance_ = NULL;

stResetFightNum* stResetFightNum::New() const {
  return new stResetFightNum;
}

void stResetFightNum::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stResetFightNum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stResetFightNum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stResetFightNum::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stResetFightNum::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stResetFightNum::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stResetFightNum* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stResetFightNum*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stResetFightNum::MergeFrom(const stResetFightNum& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stResetFightNum::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stResetFightNum::CopyFrom(const stResetFightNum& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stResetFightNum::IsInitialized() const {

  return true;
}

void stResetFightNum::Swap(stResetFightNum* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stResetFightNum::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stResetFightNum_descriptor_;
  metadata.reflection = stResetFightNum_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stResetFightNumResult_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stResetFightNumResult_eResult_descriptor_;
}
bool stResetFightNumResult_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stResetFightNumResult_eResult stResetFightNumResult::SUCCESS;
const stResetFightNumResult_eResult stResetFightNumResult::eGoldCoin_Not_Enough;
const stResetFightNumResult_eResult stResetFightNumResult::eNot_Time_Use_Out;
const stResetFightNumResult_eResult stResetFightNumResult::eResult_MIN;
const stResetFightNumResult_eResult stResetFightNumResult::eResult_MAX;
const int stResetFightNumResult::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stResetFightNumResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stResetFightNumResult_ProtoModID_descriptor_;
}
bool stResetFightNumResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stResetFightNumResult_ProtoModID stResetFightNumResult::ModID;
const stResetFightNumResult_ProtoModID stResetFightNumResult::ProtoModID_MIN;
const stResetFightNumResult_ProtoModID stResetFightNumResult::ProtoModID_MAX;
const int stResetFightNumResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stResetFightNumResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stResetFightNumResult_ProtoFunID_descriptor_;
}
bool stResetFightNumResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 70:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stResetFightNumResult_ProtoFunID stResetFightNumResult::FunID;
const stResetFightNumResult_ProtoFunID stResetFightNumResult::ProtoFunID_MIN;
const stResetFightNumResult_ProtoFunID stResetFightNumResult::ProtoFunID_MAX;
const int stResetFightNumResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stResetFightNumResult::kResultFieldNumber;
#endif  // !_MSC_VER

stResetFightNumResult::stResetFightNumResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stResetFightNumResult::InitAsDefaultInstance() {
}

stResetFightNumResult::stResetFightNumResult(const stResetFightNumResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stResetFightNumResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stResetFightNumResult::~stResetFightNumResult() {
  SharedDtor();
}

void stResetFightNumResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stResetFightNumResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stResetFightNumResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stResetFightNumResult_descriptor_;
}

const stResetFightNumResult& stResetFightNumResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stResetFightNumResult* stResetFightNumResult::default_instance_ = NULL;

stResetFightNumResult* stResetFightNumResult::New() const {
  return new stResetFightNumResult;
}

void stResetFightNumResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stResetFightNumResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SortProto.stResetFightNumResult.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SortProto::stResetFightNumResult_eResult_IsValid(value)) {
            set_result(static_cast< ::SortProto::stResetFightNumResult_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stResetFightNumResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SortProto.stResetFightNumResult.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stResetFightNumResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SortProto.stResetFightNumResult.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stResetFightNumResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SortProto.stResetFightNumResult.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stResetFightNumResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stResetFightNumResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stResetFightNumResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stResetFightNumResult::MergeFrom(const stResetFightNumResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stResetFightNumResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stResetFightNumResult::CopyFrom(const stResetFightNumResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stResetFightNumResult::IsInitialized() const {

  return true;
}

void stResetFightNumResult::Swap(stResetFightNumResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stResetFightNumResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stResetFightNumResult_descriptor_;
  metadata.reflection = stResetFightNumResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqEmeraldDreamSortList_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqEmeraldDreamSortList_ProtoModID_descriptor_;
}
bool stReqEmeraldDreamSortList_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqEmeraldDreamSortList_ProtoModID stReqEmeraldDreamSortList::ModID;
const stReqEmeraldDreamSortList_ProtoModID stReqEmeraldDreamSortList::ProtoModID_MIN;
const stReqEmeraldDreamSortList_ProtoModID stReqEmeraldDreamSortList::ProtoModID_MAX;
const int stReqEmeraldDreamSortList::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqEmeraldDreamSortList_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqEmeraldDreamSortList_ProtoFunID_descriptor_;
}
bool stReqEmeraldDreamSortList_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 71:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqEmeraldDreamSortList_ProtoFunID stReqEmeraldDreamSortList::FunID;
const stReqEmeraldDreamSortList_ProtoFunID stReqEmeraldDreamSortList::ProtoFunID_MIN;
const stReqEmeraldDreamSortList_ProtoFunID stReqEmeraldDreamSortList::ProtoFunID_MAX;
const int stReqEmeraldDreamSortList::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqEmeraldDreamSortList::kFromRankFieldNumber;
#endif  // !_MSC_VER

stReqEmeraldDreamSortList::stReqEmeraldDreamSortList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqEmeraldDreamSortList::InitAsDefaultInstance() {
}

stReqEmeraldDreamSortList::stReqEmeraldDreamSortList(const stReqEmeraldDreamSortList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqEmeraldDreamSortList::SharedCtor() {
  _cached_size_ = 0;
  fromrank_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqEmeraldDreamSortList::~stReqEmeraldDreamSortList() {
  SharedDtor();
}

void stReqEmeraldDreamSortList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqEmeraldDreamSortList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqEmeraldDreamSortList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqEmeraldDreamSortList_descriptor_;
}

const stReqEmeraldDreamSortList& stReqEmeraldDreamSortList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stReqEmeraldDreamSortList* stReqEmeraldDreamSortList::default_instance_ = NULL;

stReqEmeraldDreamSortList* stReqEmeraldDreamSortList::New() const {
  return new stReqEmeraldDreamSortList;
}

void stReqEmeraldDreamSortList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fromrank_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqEmeraldDreamSortList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 fromRank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fromrank_)));
          set_has_fromrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqEmeraldDreamSortList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 fromRank = 1;
  if (has_fromrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fromrank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqEmeraldDreamSortList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 fromRank = 1;
  if (has_fromrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fromrank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqEmeraldDreamSortList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 fromRank = 1;
    if (has_fromrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fromrank());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqEmeraldDreamSortList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqEmeraldDreamSortList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqEmeraldDreamSortList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqEmeraldDreamSortList::MergeFrom(const stReqEmeraldDreamSortList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fromrank()) {
      set_fromrank(from.fromrank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqEmeraldDreamSortList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqEmeraldDreamSortList::CopyFrom(const stReqEmeraldDreamSortList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqEmeraldDreamSortList::IsInitialized() const {

  return true;
}

void stReqEmeraldDreamSortList::Swap(stReqEmeraldDreamSortList* other) {
  if (other != this) {
    std::swap(fromrank_, other->fromrank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqEmeraldDreamSortList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqEmeraldDreamSortList_descriptor_;
  metadata.reflection = stReqEmeraldDreamSortList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SortListInfo::kCharIDFieldNumber;
const int SortListInfo::kNameFieldNumber;
const int SortListInfo::kSexFieldNumber;
const int SortListInfo::kJobFieldNumber;
const int SortListInfo::kLevelFieldNumber;
const int SortListInfo::kDamageFieldNumber;
const int SortListInfo::kRankFieldNumber;
const int SortListInfo::kHighestDamageFieldNumber;
const int SortListInfo::kPhotoIDFieldNumber;
#endif  // !_MSC_VER

SortListInfo::SortListInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SortListInfo::InitAsDefaultInstance() {
}

SortListInfo::SortListInfo(const SortListInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SortListInfo::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sex_ = 0u;
  job_ = 0u;
  level_ = 0u;
  damage_ = 0u;
  rank_ = 0u;
  highest_damage_ = 0u;
  photoid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SortListInfo::~SortListInfo() {
  SharedDtor();
}

void SortListInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void SortListInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SortListInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SortListInfo_descriptor_;
}

const SortListInfo& SortListInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

SortListInfo* SortListInfo::default_instance_ = NULL;

SortListInfo* SortListInfo::New() const {
  return new SortListInfo;
}

void SortListInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    sex_ = 0u;
    job_ = 0u;
    level_ = 0u;
    damage_ = 0u;
    rank_ = 0u;
    highest_damage_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    photoid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SortListInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sex;
        break;
      }

      // optional uint32 sex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_job;
        break;
      }

      // optional uint32 job = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &job_)));
          set_has_job();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_level;
        break;
      }

      // optional uint32 level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_damage;
        break;
      }

      // optional uint32 damage = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &damage_)));
          set_has_damage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_rank;
        break;
      }

      // optional uint32 rank = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_highest_damage;
        break;
      }

      // optional uint32 highest_damage = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_highest_damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &highest_damage_)));
          set_has_highest_damage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_photoID;
        break;
      }

      // optional uint32 photoID = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_photoID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &photoid_)));
          set_has_photoid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SortListInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional uint32 sex = 3;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sex(), output);
  }

  // optional uint32 job = 4;
  if (has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->job(), output);
  }

  // optional uint32 level = 5;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->level(), output);
  }

  // optional uint32 damage = 6;
  if (has_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->damage(), output);
  }

  // optional uint32 rank = 7;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->rank(), output);
  }

  // optional uint32 highest_damage = 8;
  if (has_highest_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->highest_damage(), output);
  }

  // optional uint32 photoID = 9;
  if (has_photoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->photoid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SortListInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional uint32 sex = 3;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->sex(), target);
  }

  // optional uint32 job = 4;
  if (has_job()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->job(), target);
  }

  // optional uint32 level = 5;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->level(), target);
  }

  // optional uint32 damage = 6;
  if (has_damage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->damage(), target);
  }

  // optional uint32 rank = 7;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->rank(), target);
  }

  // optional uint32 highest_damage = 8;
  if (has_highest_damage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->highest_damage(), target);
  }

  // optional uint32 photoID = 9;
  if (has_photoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->photoid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SortListInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 sex = 3;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sex());
    }

    // optional uint32 job = 4;
    if (has_job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->job());
    }

    // optional uint32 level = 5;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 damage = 6;
    if (has_damage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->damage());
    }

    // optional uint32 rank = 7;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

    // optional uint32 highest_damage = 8;
    if (has_highest_damage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->highest_damage());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 photoID = 9;
    if (has_photoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->photoid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SortListInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SortListInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SortListInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SortListInfo::MergeFrom(const SortListInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_job()) {
      set_job(from.job());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_damage()) {
      set_damage(from.damage());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_highest_damage()) {
      set_highest_damage(from.highest_damage());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_photoid()) {
      set_photoid(from.photoid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SortListInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SortListInfo::CopyFrom(const SortListInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SortListInfo::IsInitialized() const {

  return true;
}

void SortListInfo::Swap(SortListInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(name_, other->name_);
    std::swap(sex_, other->sex_);
    std::swap(job_, other->job_);
    std::swap(level_, other->level_);
    std::swap(damage_, other->damage_);
    std::swap(rank_, other->rank_);
    std::swap(highest_damage_, other->highest_damage_);
    std::swap(photoid_, other->photoid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SortListInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SortListInfo_descriptor_;
  metadata.reflection = SortListInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stEmeraldDreamSortList_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stEmeraldDreamSortList_ProtoModID_descriptor_;
}
bool stEmeraldDreamSortList_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stEmeraldDreamSortList_ProtoModID stEmeraldDreamSortList::ModID;
const stEmeraldDreamSortList_ProtoModID stEmeraldDreamSortList::ProtoModID_MIN;
const stEmeraldDreamSortList_ProtoModID stEmeraldDreamSortList::ProtoModID_MAX;
const int stEmeraldDreamSortList::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stEmeraldDreamSortList_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stEmeraldDreamSortList_ProtoFunID_descriptor_;
}
bool stEmeraldDreamSortList_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 72:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stEmeraldDreamSortList_ProtoFunID stEmeraldDreamSortList::FunID;
const stEmeraldDreamSortList_ProtoFunID stEmeraldDreamSortList::ProtoFunID_MIN;
const stEmeraldDreamSortList_ProtoFunID stEmeraldDreamSortList::ProtoFunID_MAX;
const int stEmeraldDreamSortList::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stEmeraldDreamSortList::kBeginRankFieldNumber;
const int stEmeraldDreamSortList::kInfoFieldNumber;
#endif  // !_MSC_VER

stEmeraldDreamSortList::stEmeraldDreamSortList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stEmeraldDreamSortList::InitAsDefaultInstance() {
}

stEmeraldDreamSortList::stEmeraldDreamSortList(const stEmeraldDreamSortList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stEmeraldDreamSortList::SharedCtor() {
  _cached_size_ = 0;
  beginrank_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stEmeraldDreamSortList::~stEmeraldDreamSortList() {
  SharedDtor();
}

void stEmeraldDreamSortList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stEmeraldDreamSortList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stEmeraldDreamSortList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stEmeraldDreamSortList_descriptor_;
}

const stEmeraldDreamSortList& stEmeraldDreamSortList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stEmeraldDreamSortList* stEmeraldDreamSortList::default_instance_ = NULL;

stEmeraldDreamSortList* stEmeraldDreamSortList::New() const {
  return new stEmeraldDreamSortList;
}

void stEmeraldDreamSortList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    beginrank_ = 0u;
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stEmeraldDreamSortList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 beginRank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &beginrank_)));
          set_has_beginrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // repeated .SortProto.SortListInfo info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stEmeraldDreamSortList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 beginRank = 1;
  if (has_beginrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->beginrank(), output);
  }

  // repeated .SortProto.SortListInfo info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stEmeraldDreamSortList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 beginRank = 1;
  if (has_beginrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->beginrank(), target);
  }

  // repeated .SortProto.SortListInfo info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stEmeraldDreamSortList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 beginRank = 1;
    if (has_beginrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->beginrank());
    }

  }
  // repeated .SortProto.SortListInfo info = 2;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stEmeraldDreamSortList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stEmeraldDreamSortList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stEmeraldDreamSortList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stEmeraldDreamSortList::MergeFrom(const stEmeraldDreamSortList& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_beginrank()) {
      set_beginrank(from.beginrank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stEmeraldDreamSortList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stEmeraldDreamSortList::CopyFrom(const stEmeraldDreamSortList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stEmeraldDreamSortList::IsInitialized() const {

  return true;
}

void stEmeraldDreamSortList::Swap(stEmeraldDreamSortList* other) {
  if (other != this) {
    std::swap(beginrank_, other->beginrank_);
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stEmeraldDreamSortList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stEmeraldDreamSortList_descriptor_;
  metadata.reflection = stEmeraldDreamSortList_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stSendRankInfo_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSendRankInfo_ProtoModID_descriptor_;
}
bool stSendRankInfo_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSendRankInfo_ProtoModID stSendRankInfo::ModID;
const stSendRankInfo_ProtoModID stSendRankInfo::ProtoModID_MIN;
const stSendRankInfo_ProtoModID stSendRankInfo::ProtoModID_MAX;
const int stSendRankInfo::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSendRankInfo_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSendRankInfo_ProtoFunID_descriptor_;
}
bool stSendRankInfo_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 73:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSendRankInfo_ProtoFunID stSendRankInfo::FunID;
const stSendRankInfo_ProtoFunID stSendRankInfo::ProtoFunID_MIN;
const stSendRankInfo_ProtoFunID stSendRankInfo::ProtoFunID_MAX;
const int stSendRankInfo::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stSendRankInfo::kMyInfoFieldNumber;
const int stSendRankInfo::kRivalInfoFieldNumber;
const int stSendRankInfo::kPromotedFieldNumber;
#endif  // !_MSC_VER

stSendRankInfo::stSendRankInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSendRankInfo::InitAsDefaultInstance() {
}

stSendRankInfo::stSendRankInfo(const stSendRankInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSendRankInfo::SharedCtor() {
  _cached_size_ = 0;
  promoted_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSendRankInfo::~stSendRankInfo() {
  SharedDtor();
}

void stSendRankInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stSendRankInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSendRankInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSendRankInfo_descriptor_;
}

const stSendRankInfo& stSendRankInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stSendRankInfo* stSendRankInfo::default_instance_ = NULL;

stSendRankInfo* stSendRankInfo::New() const {
  return new stSendRankInfo;
}

void stSendRankInfo::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    promoted_ = false;
  }
  myinfo_.Clear();
  rivalinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSendRankInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SortProto.SortListInfo myInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_myInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_myinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_myInfo;
        if (input->ExpectTag(18)) goto parse_rivalInfo;
        break;
      }

      // repeated .SortProto.SortListInfo rivalInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rivalInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rivalinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rivalInfo;
        if (input->ExpectTag(24)) goto parse_promoted;
        break;
      }

      // optional bool promoted = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_promoted:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &promoted_)));
          set_has_promoted();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSendRankInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .SortProto.SortListInfo myInfo = 1;
  for (int i = 0; i < this->myinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->myinfo(i), output);
  }

  // repeated .SortProto.SortListInfo rivalInfo = 2;
  for (int i = 0; i < this->rivalinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rivalinfo(i), output);
  }

  // optional bool promoted = 3;
  if (has_promoted()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->promoted(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSendRankInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .SortProto.SortListInfo myInfo = 1;
  for (int i = 0; i < this->myinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->myinfo(i), target);
  }

  // repeated .SortProto.SortListInfo rivalInfo = 2;
  for (int i = 0; i < this->rivalinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rivalinfo(i), target);
  }

  // optional bool promoted = 3;
  if (has_promoted()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->promoted(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSendRankInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional bool promoted = 3;
    if (has_promoted()) {
      total_size += 1 + 1;
    }

  }
  // repeated .SortProto.SortListInfo myInfo = 1;
  total_size += 1 * this->myinfo_size();
  for (int i = 0; i < this->myinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->myinfo(i));
  }

  // repeated .SortProto.SortListInfo rivalInfo = 2;
  total_size += 1 * this->rivalinfo_size();
  for (int i = 0; i < this->rivalinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rivalinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSendRankInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSendRankInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSendRankInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSendRankInfo::MergeFrom(const stSendRankInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  myinfo_.MergeFrom(from.myinfo_);
  rivalinfo_.MergeFrom(from.rivalinfo_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_promoted()) {
      set_promoted(from.promoted());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSendRankInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSendRankInfo::CopyFrom(const stSendRankInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSendRankInfo::IsInitialized() const {

  return true;
}

void stSendRankInfo::Swap(stSendRankInfo* other) {
  if (other != this) {
    myinfo_.Swap(&other->myinfo_);
    rivalinfo_.Swap(&other->rivalinfo_);
    std::swap(promoted_, other->promoted_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSendRankInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSendRankInfo_descriptor_;
  metadata.reflection = stSendRankInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqSurplusNum_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqSurplusNum_ProtoModID_descriptor_;
}
bool stReqSurplusNum_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqSurplusNum_ProtoModID stReqSurplusNum::ModID;
const stReqSurplusNum_ProtoModID stReqSurplusNum::ProtoModID_MIN;
const stReqSurplusNum_ProtoModID stReqSurplusNum::ProtoModID_MAX;
const int stReqSurplusNum::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqSurplusNum_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqSurplusNum_ProtoFunID_descriptor_;
}
bool stReqSurplusNum_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 74:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqSurplusNum_ProtoFunID stReqSurplusNum::FunID;
const stReqSurplusNum_ProtoFunID stReqSurplusNum::ProtoFunID_MIN;
const stReqSurplusNum_ProtoFunID stReqSurplusNum::ProtoFunID_MAX;
const int stReqSurplusNum::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqSurplusNum::kCharIDFieldNumber;
#endif  // !_MSC_VER

stReqSurplusNum::stReqSurplusNum()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqSurplusNum::InitAsDefaultInstance() {
}

stReqSurplusNum::stReqSurplusNum(const stReqSurplusNum& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqSurplusNum::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqSurplusNum::~stReqSurplusNum() {
  SharedDtor();
}

void stReqSurplusNum::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqSurplusNum::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqSurplusNum::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqSurplusNum_descriptor_;
}

const stReqSurplusNum& stReqSurplusNum::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stReqSurplusNum* stReqSurplusNum::default_instance_ = NULL;

stReqSurplusNum* stReqSurplusNum::New() const {
  return new stReqSurplusNum;
}

void stReqSurplusNum::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqSurplusNum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqSurplusNum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqSurplusNum::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqSurplusNum::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqSurplusNum::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqSurplusNum* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqSurplusNum*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqSurplusNum::MergeFrom(const stReqSurplusNum& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqSurplusNum::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqSurplusNum::CopyFrom(const stReqSurplusNum& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqSurplusNum::IsInitialized() const {

  return true;
}

void stReqSurplusNum::Swap(stReqSurplusNum* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqSurplusNum::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqSurplusNum_descriptor_;
  metadata.reflection = stReqSurplusNum_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int userSortInfo::kNameFieldNumber;
#endif  // !_MSC_VER

userSortInfo::userSortInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void userSortInfo::InitAsDefaultInstance() {
}

userSortInfo::userSortInfo(const userSortInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void userSortInfo::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

userSortInfo::~userSortInfo() {
  SharedDtor();
}

void userSortInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void userSortInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* userSortInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return userSortInfo_descriptor_;
}

const userSortInfo& userSortInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

userSortInfo* userSortInfo::default_instance_ = NULL;

userSortInfo* userSortInfo::New() const {
  return new userSortInfo;
}

void userSortInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool userSortInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void userSortInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* userSortInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int userSortInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void userSortInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const userSortInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const userSortInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void userSortInfo::MergeFrom(const userSortInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void userSortInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void userSortInfo::CopyFrom(const userSortInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool userSortInfo::IsInitialized() const {

  return true;
}

void userSortInfo::Swap(userSortInfo* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata userSortInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = userSortInfo_descriptor_;
  metadata.reflection = userSortInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stSurplusNumResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSurplusNumResult_ProtoModID_descriptor_;
}
bool stSurplusNumResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSurplusNumResult_ProtoModID stSurplusNumResult::ModID;
const stSurplusNumResult_ProtoModID stSurplusNumResult::ProtoModID_MIN;
const stSurplusNumResult_ProtoModID stSurplusNumResult::ProtoModID_MAX;
const int stSurplusNumResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSurplusNumResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSurplusNumResult_ProtoFunID_descriptor_;
}
bool stSurplusNumResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 75:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSurplusNumResult_ProtoFunID stSurplusNumResult::FunID;
const stSurplusNumResult_ProtoFunID stSurplusNumResult::ProtoFunID_MIN;
const stSurplusNumResult_ProtoFunID stSurplusNumResult::ProtoFunID_MAX;
const int stSurplusNumResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stSurplusNumResult::kNumFieldNumber;
const int stSurplusNumResult::kDamageFieldNumber;
const int stSurplusNumResult::kRankFieldNumber;
const int stSurplusNumResult::kResetNumFieldNumber;
const int stSurplusNumResult::kInfoFieldNumber;
const int stSurplusNumResult::kEndtimeFieldNumber;
const int stSurplusNumResult::kLevelIDFieldNumber;
#endif  // !_MSC_VER

stSurplusNumResult::stSurplusNumResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSurplusNumResult::InitAsDefaultInstance() {
}

stSurplusNumResult::stSurplusNumResult(const stSurplusNumResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSurplusNumResult::SharedCtor() {
  _cached_size_ = 0;
  num_ = 0u;
  damage_ = 0u;
  rank_ = 0u;
  resetnum_ = 0u;
  endtime_ = 0u;
  levelid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSurplusNumResult::~stSurplusNumResult() {
  SharedDtor();
}

void stSurplusNumResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stSurplusNumResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSurplusNumResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSurplusNumResult_descriptor_;
}

const stSurplusNumResult& stSurplusNumResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stSurplusNumResult* stSurplusNumResult::default_instance_ = NULL;

stSurplusNumResult* stSurplusNumResult::New() const {
  return new stSurplusNumResult;
}

void stSurplusNumResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    num_ = 0u;
    damage_ = 0u;
    rank_ = 0u;
    resetnum_ = 0u;
    endtime_ = 0u;
    levelid_ = 0u;
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSurplusNumResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_damage;
        break;
      }

      // optional uint32 damage = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &damage_)));
          set_has_damage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rank;
        break;
      }

      // optional uint32 rank = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_resetNum;
        break;
      }

      // optional uint32 resetNum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_resetNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resetnum_)));
          set_has_resetnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_info;
        break;
      }

      // repeated .SortProto.userSortInfo info = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_info;
        if (input->ExpectTag(48)) goto parse_endtime;
        break;
      }

      // optional uint32 endtime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_levelID;
        break;
      }

      // optional uint32 levelID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_levelID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &levelid_)));
          set_has_levelid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSurplusNumResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 num = 1;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num(), output);
  }

  // optional uint32 damage = 2;
  if (has_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->damage(), output);
  }

  // optional uint32 rank = 3;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->rank(), output);
  }

  // optional uint32 resetNum = 4;
  if (has_resetnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->resetnum(), output);
  }

  // repeated .SortProto.userSortInfo info = 5;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->info(i), output);
  }

  // optional uint32 endtime = 6;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->endtime(), output);
  }

  // optional uint32 levelID = 7;
  if (has_levelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->levelid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSurplusNumResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 num = 1;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num(), target);
  }

  // optional uint32 damage = 2;
  if (has_damage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->damage(), target);
  }

  // optional uint32 rank = 3;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->rank(), target);
  }

  // optional uint32 resetNum = 4;
  if (has_resetnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->resetnum(), target);
  }

  // repeated .SortProto.userSortInfo info = 5;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->info(i), target);
  }

  // optional uint32 endtime = 6;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->endtime(), target);
  }

  // optional uint32 levelID = 7;
  if (has_levelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->levelid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSurplusNumResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 num = 1;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

    // optional uint32 damage = 2;
    if (has_damage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->damage());
    }

    // optional uint32 rank = 3;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

    // optional uint32 resetNum = 4;
    if (has_resetnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->resetnum());
    }

    // optional uint32 endtime = 6;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->endtime());
    }

    // optional uint32 levelID = 7;
    if (has_levelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->levelid());
    }

  }
  // repeated .SortProto.userSortInfo info = 5;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSurplusNumResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSurplusNumResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSurplusNumResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSurplusNumResult::MergeFrom(const stSurplusNumResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_damage()) {
      set_damage(from.damage());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_resetnum()) {
      set_resetnum(from.resetnum());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_levelid()) {
      set_levelid(from.levelid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSurplusNumResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSurplusNumResult::CopyFrom(const stSurplusNumResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSurplusNumResult::IsInitialized() const {

  return true;
}

void stSurplusNumResult::Swap(stSurplusNumResult* other) {
  if (other != this) {
    std::swap(num_, other->num_);
    std::swap(damage_, other->damage_);
    std::swap(rank_, other->rank_);
    std::swap(resetnum_, other->resetnum_);
    info_.Swap(&other->info_);
    std::swap(endtime_, other->endtime_);
    std::swap(levelid_, other->levelid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSurplusNumResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSurplusNumResult_descriptor_;
  metadata.reflection = stSurplusNumResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stSynChampionInfo::kCharIDFieldNumber;
const int stSynChampionInfo::kNameFieldNumber;
const int stSynChampionInfo::kAreaCodeFieldNumber;
const int stSynChampionInfo::kLevelFieldNumber;
const int stSynChampionInfo::kJobFieldNumber;
const int stSynChampionInfo::kSexFieldNumber;
const int stSynChampionInfo::kLeaderFieldNumber;
const int stSynChampionInfo::kBattlePowerFieldNumber;
const int stSynChampionInfo::kPosFieldNumber;
const int stSynChampionInfo::kHeadIDFieldNumber;
const int stSynChampionInfo::kBodyIDFieldNumber;
const int stSynChampionInfo::kWeaponIDFieldNumber;
const int stSynChampionInfo::kCloackIDFieldNumber;
const int stSynChampionInfo::kWingIDFieldNumber;
const int stSynChampionInfo::kShoeIDFieldNumber;
const int stSynChampionInfo::kFashionHairFieldNumber;
const int stSynChampionInfo::kFashionFaceFieldNumber;
const int stSynChampionInfo::kFashionBodyFieldNumber;
const int stSynChampionInfo::kFashionWeaponFieldNumber;
const int stSynChampionInfo::kFashionShoeFieldNumber;
const int stSynChampionInfo::kFashionDecorationFieldNumber;
const int stSynChampionInfo::kEffectIDFieldNumber;
const int stSynChampionInfo::kWingBreakLvFieldNumber;
const int stSynChampionInfo::kPhotoIDFieldNumber;
#endif  // !_MSC_VER

stSynChampionInfo::stSynChampionInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSynChampionInfo::InitAsDefaultInstance() {
}

stSynChampionInfo::stSynChampionInfo(const stSynChampionInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSynChampionInfo::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  areacode_ = 0u;
  level_ = 0u;
  job_ = 0u;
  sex_ = 0u;
  leader_ = false;
  battlepower_ = 0u;
  pos_ = 0u;
  headid_ = 0u;
  bodyid_ = 0u;
  weaponid_ = 0u;
  cloackid_ = 0u;
  wingid_ = 0u;
  shoeid_ = 0u;
  fashionhair_ = 0u;
  fashionface_ = 0u;
  fashionbody_ = 0u;
  fashionweapon_ = 0u;
  fashionshoe_ = 0u;
  fashiondecoration_ = 0u;
  effectid_ = 0u;
  wingbreaklv_ = 0u;
  photoid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSynChampionInfo::~stSynChampionInfo() {
  SharedDtor();
}

void stSynChampionInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void stSynChampionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSynChampionInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynChampionInfo_descriptor_;
}

const stSynChampionInfo& stSynChampionInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stSynChampionInfo* stSynChampionInfo::default_instance_ = NULL;

stSynChampionInfo* stSynChampionInfo::New() const {
  return new stSynChampionInfo;
}

void stSynChampionInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    areacode_ = 0u;
    level_ = 0u;
    job_ = 0u;
    sex_ = 0u;
    leader_ = false;
    battlepower_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    pos_ = 0u;
    headid_ = 0u;
    bodyid_ = 0u;
    weaponid_ = 0u;
    cloackid_ = 0u;
    wingid_ = 0u;
    shoeid_ = 0u;
    fashionhair_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    fashionface_ = 0u;
    fashionbody_ = 0u;
    fashionweapon_ = 0u;
    fashionshoe_ = 0u;
    fashiondecoration_ = 0u;
    effectid_ = 0u;
    wingbreaklv_ = 0u;
    photoid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSynChampionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_areaCode;
        break;
      }

      // optional uint32 areaCode = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_areaCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &areacode_)));
          set_has_areacode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }

      // optional uint32 level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_job;
        break;
      }

      // optional uint32 job = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &job_)));
          set_has_job();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_sex;
        break;
      }

      // optional uint32 sex = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_leader;
        break;
      }

      // optional bool leader = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leader:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &leader_)));
          set_has_leader();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_battlePower;
        break;
      }

      // optional uint32 battlePower = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battlePower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battlepower_)));
          set_has_battlepower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_pos;
        break;
      }

      // optional uint32 pos = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_headID;
        break;
      }

      // optional uint32 headID = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_headID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &headid_)));
          set_has_headid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_bodyID;
        break;
      }

      // optional uint32 bodyID = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bodyID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bodyid_)));
          set_has_bodyid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_weaponID;
        break;
      }

      // optional uint32 weaponID = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weaponID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weaponid_)));
          set_has_weaponid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_cloackID;
        break;
      }

      // optional uint32 cloackID = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cloackID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cloackid_)));
          set_has_cloackid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_wingID;
        break;
      }

      // optional uint32 wingID = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wingID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wingid_)));
          set_has_wingid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_shoeID;
        break;
      }

      // optional uint32 shoeID = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shoeID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shoeid_)));
          set_has_shoeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_fashionHair;
        break;
      }

      // optional uint32 fashionHair = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fashionHair:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fashionhair_)));
          set_has_fashionhair();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_fashionFace;
        break;
      }

      // optional uint32 fashionFace = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fashionFace:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fashionface_)));
          set_has_fashionface();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_fashionBody;
        break;
      }

      // optional uint32 fashionBody = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fashionBody:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fashionbody_)));
          set_has_fashionbody();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_fashionWeapon;
        break;
      }

      // optional uint32 fashionWeapon = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fashionWeapon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fashionweapon_)));
          set_has_fashionweapon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_fashionShoe;
        break;
      }

      // optional uint32 fashionShoe = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fashionShoe:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fashionshoe_)));
          set_has_fashionshoe();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_fashionDecoration;
        break;
      }

      // optional uint32 fashionDecoration = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fashionDecoration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fashiondecoration_)));
          set_has_fashiondecoration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_effectID;
        break;
      }

      // optional uint32 effectID = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_effectID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &effectid_)));
          set_has_effectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_wingBreakLv;
        break;
      }

      // optional uint32 wingBreakLv = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wingBreakLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wingbreaklv_)));
          set_has_wingbreaklv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_photoID;
        break;
      }

      // optional uint32 photoID = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_photoID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &photoid_)));
          set_has_photoid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSynChampionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional uint32 areaCode = 3;
  if (has_areacode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->areacode(), output);
  }

  // optional uint32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->level(), output);
  }

  // optional uint32 job = 5;
  if (has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->job(), output);
  }

  // optional uint32 sex = 6;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->sex(), output);
  }

  // optional bool leader = 7;
  if (has_leader()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->leader(), output);
  }

  // optional uint32 battlePower = 8;
  if (has_battlepower()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->battlepower(), output);
  }

  // optional uint32 pos = 9;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->pos(), output);
  }

  // optional uint32 headID = 10;
  if (has_headid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->headid(), output);
  }

  // optional uint32 bodyID = 11;
  if (has_bodyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->bodyid(), output);
  }

  // optional uint32 weaponID = 12;
  if (has_weaponid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->weaponid(), output);
  }

  // optional uint32 cloackID = 13;
  if (has_cloackid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->cloackid(), output);
  }

  // optional uint32 wingID = 14;
  if (has_wingid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->wingid(), output);
  }

  // optional uint32 shoeID = 15;
  if (has_shoeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->shoeid(), output);
  }

  // optional uint32 fashionHair = 16;
  if (has_fashionhair()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->fashionhair(), output);
  }

  // optional uint32 fashionFace = 17;
  if (has_fashionface()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->fashionface(), output);
  }

  // optional uint32 fashionBody = 18;
  if (has_fashionbody()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->fashionbody(), output);
  }

  // optional uint32 fashionWeapon = 19;
  if (has_fashionweapon()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->fashionweapon(), output);
  }

  // optional uint32 fashionShoe = 20;
  if (has_fashionshoe()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->fashionshoe(), output);
  }

  // optional uint32 fashionDecoration = 21;
  if (has_fashiondecoration()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->fashiondecoration(), output);
  }

  // optional uint32 effectID = 22;
  if (has_effectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->effectid(), output);
  }

  // optional uint32 wingBreakLv = 23;
  if (has_wingbreaklv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->wingbreaklv(), output);
  }

  // optional uint32 photoID = 24;
  if (has_photoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->photoid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSynChampionInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional uint32 areaCode = 3;
  if (has_areacode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->areacode(), target);
  }

  // optional uint32 level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->level(), target);
  }

  // optional uint32 job = 5;
  if (has_job()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->job(), target);
  }

  // optional uint32 sex = 6;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->sex(), target);
  }

  // optional bool leader = 7;
  if (has_leader()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->leader(), target);
  }

  // optional uint32 battlePower = 8;
  if (has_battlepower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->battlepower(), target);
  }

  // optional uint32 pos = 9;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->pos(), target);
  }

  // optional uint32 headID = 10;
  if (has_headid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->headid(), target);
  }

  // optional uint32 bodyID = 11;
  if (has_bodyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->bodyid(), target);
  }

  // optional uint32 weaponID = 12;
  if (has_weaponid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->weaponid(), target);
  }

  // optional uint32 cloackID = 13;
  if (has_cloackid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->cloackid(), target);
  }

  // optional uint32 wingID = 14;
  if (has_wingid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->wingid(), target);
  }

  // optional uint32 shoeID = 15;
  if (has_shoeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->shoeid(), target);
  }

  // optional uint32 fashionHair = 16;
  if (has_fashionhair()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->fashionhair(), target);
  }

  // optional uint32 fashionFace = 17;
  if (has_fashionface()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->fashionface(), target);
  }

  // optional uint32 fashionBody = 18;
  if (has_fashionbody()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->fashionbody(), target);
  }

  // optional uint32 fashionWeapon = 19;
  if (has_fashionweapon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->fashionweapon(), target);
  }

  // optional uint32 fashionShoe = 20;
  if (has_fashionshoe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->fashionshoe(), target);
  }

  // optional uint32 fashionDecoration = 21;
  if (has_fashiondecoration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->fashiondecoration(), target);
  }

  // optional uint32 effectID = 22;
  if (has_effectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->effectid(), target);
  }

  // optional uint32 wingBreakLv = 23;
  if (has_wingbreaklv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->wingbreaklv(), target);
  }

  // optional uint32 photoID = 24;
  if (has_photoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->photoid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSynChampionInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 areaCode = 3;
    if (has_areacode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->areacode());
    }

    // optional uint32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 job = 5;
    if (has_job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->job());
    }

    // optional uint32 sex = 6;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sex());
    }

    // optional bool leader = 7;
    if (has_leader()) {
      total_size += 1 + 1;
    }

    // optional uint32 battlePower = 8;
    if (has_battlepower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battlepower());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 pos = 9;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

    // optional uint32 headID = 10;
    if (has_headid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->headid());
    }

    // optional uint32 bodyID = 11;
    if (has_bodyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bodyid());
    }

    // optional uint32 weaponID = 12;
    if (has_weaponid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weaponid());
    }

    // optional uint32 cloackID = 13;
    if (has_cloackid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cloackid());
    }

    // optional uint32 wingID = 14;
    if (has_wingid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wingid());
    }

    // optional uint32 shoeID = 15;
    if (has_shoeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shoeid());
    }

    // optional uint32 fashionHair = 16;
    if (has_fashionhair()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fashionhair());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 fashionFace = 17;
    if (has_fashionface()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fashionface());
    }

    // optional uint32 fashionBody = 18;
    if (has_fashionbody()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fashionbody());
    }

    // optional uint32 fashionWeapon = 19;
    if (has_fashionweapon()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fashionweapon());
    }

    // optional uint32 fashionShoe = 20;
    if (has_fashionshoe()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fashionshoe());
    }

    // optional uint32 fashionDecoration = 21;
    if (has_fashiondecoration()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fashiondecoration());
    }

    // optional uint32 effectID = 22;
    if (has_effectid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->effectid());
    }

    // optional uint32 wingBreakLv = 23;
    if (has_wingbreaklv()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wingbreaklv());
    }

    // optional uint32 photoID = 24;
    if (has_photoid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->photoid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSynChampionInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSynChampionInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSynChampionInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSynChampionInfo::MergeFrom(const stSynChampionInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_areacode()) {
      set_areacode(from.areacode());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_job()) {
      set_job(from.job());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_leader()) {
      set_leader(from.leader());
    }
    if (from.has_battlepower()) {
      set_battlepower(from.battlepower());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_headid()) {
      set_headid(from.headid());
    }
    if (from.has_bodyid()) {
      set_bodyid(from.bodyid());
    }
    if (from.has_weaponid()) {
      set_weaponid(from.weaponid());
    }
    if (from.has_cloackid()) {
      set_cloackid(from.cloackid());
    }
    if (from.has_wingid()) {
      set_wingid(from.wingid());
    }
    if (from.has_shoeid()) {
      set_shoeid(from.shoeid());
    }
    if (from.has_fashionhair()) {
      set_fashionhair(from.fashionhair());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_fashionface()) {
      set_fashionface(from.fashionface());
    }
    if (from.has_fashionbody()) {
      set_fashionbody(from.fashionbody());
    }
    if (from.has_fashionweapon()) {
      set_fashionweapon(from.fashionweapon());
    }
    if (from.has_fashionshoe()) {
      set_fashionshoe(from.fashionshoe());
    }
    if (from.has_fashiondecoration()) {
      set_fashiondecoration(from.fashiondecoration());
    }
    if (from.has_effectid()) {
      set_effectid(from.effectid());
    }
    if (from.has_wingbreaklv()) {
      set_wingbreaklv(from.wingbreaklv());
    }
    if (from.has_photoid()) {
      set_photoid(from.photoid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSynChampionInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSynChampionInfo::CopyFrom(const stSynChampionInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSynChampionInfo::IsInitialized() const {

  return true;
}

void stSynChampionInfo::Swap(stSynChampionInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(name_, other->name_);
    std::swap(areacode_, other->areacode_);
    std::swap(level_, other->level_);
    std::swap(job_, other->job_);
    std::swap(sex_, other->sex_);
    std::swap(leader_, other->leader_);
    std::swap(battlepower_, other->battlepower_);
    std::swap(pos_, other->pos_);
    std::swap(headid_, other->headid_);
    std::swap(bodyid_, other->bodyid_);
    std::swap(weaponid_, other->weaponid_);
    std::swap(cloackid_, other->cloackid_);
    std::swap(wingid_, other->wingid_);
    std::swap(shoeid_, other->shoeid_);
    std::swap(fashionhair_, other->fashionhair_);
    std::swap(fashionface_, other->fashionface_);
    std::swap(fashionbody_, other->fashionbody_);
    std::swap(fashionweapon_, other->fashionweapon_);
    std::swap(fashionshoe_, other->fashionshoe_);
    std::swap(fashiondecoration_, other->fashiondecoration_);
    std::swap(effectid_, other->effectid_);
    std::swap(wingbreaklv_, other->wingbreaklv_);
    std::swap(photoid_, other->photoid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSynChampionInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSynChampionInfo_descriptor_;
  metadata.reflection = stSynChampionInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stMyIntegralAndNum::kScoreFieldNumber;
#endif  // !_MSC_VER

stMyIntegralAndNum::stMyIntegralAndNum()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stMyIntegralAndNum::InitAsDefaultInstance() {
}

stMyIntegralAndNum::stMyIntegralAndNum(const stMyIntegralAndNum& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stMyIntegralAndNum::SharedCtor() {
  _cached_size_ = 0;
  score_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stMyIntegralAndNum::~stMyIntegralAndNum() {
  SharedDtor();
}

void stMyIntegralAndNum::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stMyIntegralAndNum::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stMyIntegralAndNum::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stMyIntegralAndNum_descriptor_;
}

const stMyIntegralAndNum& stMyIntegralAndNum::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stMyIntegralAndNum* stMyIntegralAndNum::default_instance_ = NULL;

stMyIntegralAndNum* stMyIntegralAndNum::New() const {
  return new stMyIntegralAndNum;
}

void stMyIntegralAndNum::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    score_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stMyIntegralAndNum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 score = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stMyIntegralAndNum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 score = 1;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stMyIntegralAndNum::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 score = 1;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stMyIntegralAndNum::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 score = 1;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stMyIntegralAndNum::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stMyIntegralAndNum* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stMyIntegralAndNum*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stMyIntegralAndNum::MergeFrom(const stMyIntegralAndNum& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stMyIntegralAndNum::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stMyIntegralAndNum::CopyFrom(const stMyIntegralAndNum& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stMyIntegralAndNum::IsInitialized() const {

  return true;
}

void stMyIntegralAndNum::Swap(stMyIntegralAndNum* other) {
  if (other != this) {
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stMyIntegralAndNum::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stMyIntegralAndNum_descriptor_;
  metadata.reflection = stMyIntegralAndNum_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqOpenLeagueWindow_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqOpenLeagueWindow_ProtoModID_descriptor_;
}
bool stReqOpenLeagueWindow_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqOpenLeagueWindow_ProtoModID stReqOpenLeagueWindow::ModID;
const stReqOpenLeagueWindow_ProtoModID stReqOpenLeagueWindow::ProtoModID_MIN;
const stReqOpenLeagueWindow_ProtoModID stReqOpenLeagueWindow::ProtoModID_MAX;
const int stReqOpenLeagueWindow::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqOpenLeagueWindow_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqOpenLeagueWindow_ProtoFunID_descriptor_;
}
bool stReqOpenLeagueWindow_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 76:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqOpenLeagueWindow_ProtoFunID stReqOpenLeagueWindow::FunID;
const stReqOpenLeagueWindow_ProtoFunID stReqOpenLeagueWindow::ProtoFunID_MIN;
const stReqOpenLeagueWindow_ProtoFunID stReqOpenLeagueWindow::ProtoFunID_MAX;
const int stReqOpenLeagueWindow::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqOpenLeagueWindow::kCharIDFieldNumber;
#endif  // !_MSC_VER

stReqOpenLeagueWindow::stReqOpenLeagueWindow()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqOpenLeagueWindow::InitAsDefaultInstance() {
}

stReqOpenLeagueWindow::stReqOpenLeagueWindow(const stReqOpenLeagueWindow& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqOpenLeagueWindow::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqOpenLeagueWindow::~stReqOpenLeagueWindow() {
  SharedDtor();
}

void stReqOpenLeagueWindow::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqOpenLeagueWindow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqOpenLeagueWindow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqOpenLeagueWindow_descriptor_;
}

const stReqOpenLeagueWindow& stReqOpenLeagueWindow::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stReqOpenLeagueWindow* stReqOpenLeagueWindow::default_instance_ = NULL;

stReqOpenLeagueWindow* stReqOpenLeagueWindow::New() const {
  return new stReqOpenLeagueWindow;
}

void stReqOpenLeagueWindow::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqOpenLeagueWindow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqOpenLeagueWindow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqOpenLeagueWindow::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqOpenLeagueWindow::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqOpenLeagueWindow::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqOpenLeagueWindow* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqOpenLeagueWindow*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqOpenLeagueWindow::MergeFrom(const stReqOpenLeagueWindow& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqOpenLeagueWindow::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqOpenLeagueWindow::CopyFrom(const stReqOpenLeagueWindow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqOpenLeagueWindow::IsInitialized() const {

  return true;
}

void stReqOpenLeagueWindow::Swap(stReqOpenLeagueWindow* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqOpenLeagueWindow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqOpenLeagueWindow_descriptor_;
  metadata.reflection = stReqOpenLeagueWindow_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stOpenLeagueWindowResult_eStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stOpenLeagueWindowResult_eStatus_descriptor_;
}
bool stOpenLeagueWindowResult_eStatus_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stOpenLeagueWindowResult_eStatus stOpenLeagueWindowResult::eQualified;
const stOpenLeagueWindowResult_eStatus stOpenLeagueWindowResult::eNoQualified;
const stOpenLeagueWindowResult_eStatus stOpenLeagueWindowResult::eStatus_MIN;
const stOpenLeagueWindowResult_eStatus stOpenLeagueWindowResult::eStatus_MAX;
const int stOpenLeagueWindowResult::eStatus_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stOpenLeagueWindowResult_eSession_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stOpenLeagueWindowResult_eSession_descriptor_;
}
bool stOpenLeagueWindowResult_eSession_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stOpenLeagueWindowResult_eSession stOpenLeagueWindowResult::eSixteen;
const stOpenLeagueWindowResult_eSession stOpenLeagueWindowResult::eEight;
const stOpenLeagueWindowResult_eSession stOpenLeagueWindowResult::eFour;
const stOpenLeagueWindowResult_eSession stOpenLeagueWindowResult::eTwo;
const stOpenLeagueWindowResult_eSession stOpenLeagueWindowResult::eSession_MIN;
const stOpenLeagueWindowResult_eSession stOpenLeagueWindowResult::eSession_MAX;
const int stOpenLeagueWindowResult::eSession_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stOpenLeagueWindowResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stOpenLeagueWindowResult_ProtoModID_descriptor_;
}
bool stOpenLeagueWindowResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stOpenLeagueWindowResult_ProtoModID stOpenLeagueWindowResult::ModID;
const stOpenLeagueWindowResult_ProtoModID stOpenLeagueWindowResult::ProtoModID_MIN;
const stOpenLeagueWindowResult_ProtoModID stOpenLeagueWindowResult::ProtoModID_MAX;
const int stOpenLeagueWindowResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stOpenLeagueWindowResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stOpenLeagueWindowResult_ProtoFunID_descriptor_;
}
bool stOpenLeagueWindowResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 77:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stOpenLeagueWindowResult_ProtoFunID stOpenLeagueWindowResult::FunID;
const stOpenLeagueWindowResult_ProtoFunID stOpenLeagueWindowResult::ProtoFunID_MIN;
const stOpenLeagueWindowResult_ProtoFunID stOpenLeagueWindowResult::ProtoFunID_MAX;
const int stOpenLeagueWindowResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stOpenLeagueWindowResult::kChampionFieldNumber;
const int stOpenLeagueWindowResult::kMyInfoFieldNumber;
const int stOpenLeagueWindowResult::kSessionFieldNumber;
const int stOpenLeagueWindowResult::kStatusFieldNumber;
const int stOpenLeagueWindowResult::kEsessionFieldNumber;
#endif  // !_MSC_VER

stOpenLeagueWindowResult::stOpenLeagueWindowResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stOpenLeagueWindowResult::InitAsDefaultInstance() {
}

stOpenLeagueWindowResult::stOpenLeagueWindowResult(const stOpenLeagueWindowResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stOpenLeagueWindowResult::SharedCtor() {
  _cached_size_ = 0;
  session_ = 0u;
  status_ = 1;
  esession_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stOpenLeagueWindowResult::~stOpenLeagueWindowResult() {
  SharedDtor();
}

void stOpenLeagueWindowResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stOpenLeagueWindowResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stOpenLeagueWindowResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stOpenLeagueWindowResult_descriptor_;
}

const stOpenLeagueWindowResult& stOpenLeagueWindowResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stOpenLeagueWindowResult* stOpenLeagueWindowResult::default_instance_ = NULL;

stOpenLeagueWindowResult* stOpenLeagueWindowResult::New() const {
  return new stOpenLeagueWindowResult;
}

void stOpenLeagueWindowResult::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    session_ = 0u;
    status_ = 1;
    esession_ = 1;
  }
  champion_.Clear();
  myinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stOpenLeagueWindowResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SortProto.stSynChampionInfo champion = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_champion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_champion()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_champion;
        if (input->ExpectTag(18)) goto parse_myInfo;
        break;
      }

      // repeated .SortProto.stMyIntegralAndNum myInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_myInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_myinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_myInfo;
        if (input->ExpectTag(24)) goto parse_session;
        break;
      }

      // optional uint32 session = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_session:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &session_)));
          set_has_session();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_status;
        break;
      }

      // optional .SortProto.stOpenLeagueWindowResult.eStatus status = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SortProto::stOpenLeagueWindowResult_eStatus_IsValid(value)) {
            set_status(static_cast< ::SortProto::stOpenLeagueWindowResult_eStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_esession;
        break;
      }

      // optional .SortProto.stOpenLeagueWindowResult.eSession esession = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_esession:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SortProto::stOpenLeagueWindowResult_eSession_IsValid(value)) {
            set_esession(static_cast< ::SortProto::stOpenLeagueWindowResult_eSession >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stOpenLeagueWindowResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .SortProto.stSynChampionInfo champion = 1;
  for (int i = 0; i < this->champion_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->champion(i), output);
  }

  // repeated .SortProto.stMyIntegralAndNum myInfo = 2;
  for (int i = 0; i < this->myinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->myinfo(i), output);
  }

  // optional uint32 session = 3;
  if (has_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->session(), output);
  }

  // optional .SortProto.stOpenLeagueWindowResult.eStatus status = 4;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->status(), output);
  }

  // optional .SortProto.stOpenLeagueWindowResult.eSession esession = 5;
  if (has_esession()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->esession(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stOpenLeagueWindowResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .SortProto.stSynChampionInfo champion = 1;
  for (int i = 0; i < this->champion_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->champion(i), target);
  }

  // repeated .SortProto.stMyIntegralAndNum myInfo = 2;
  for (int i = 0; i < this->myinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->myinfo(i), target);
  }

  // optional uint32 session = 3;
  if (has_session()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->session(), target);
  }

  // optional .SortProto.stOpenLeagueWindowResult.eStatus status = 4;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->status(), target);
  }

  // optional .SortProto.stOpenLeagueWindowResult.eSession esession = 5;
  if (has_esession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->esession(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stOpenLeagueWindowResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional uint32 session = 3;
    if (has_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->session());
    }

    // optional .SortProto.stOpenLeagueWindowResult.eStatus status = 4;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional .SortProto.stOpenLeagueWindowResult.eSession esession = 5;
    if (has_esession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->esession());
    }

  }
  // repeated .SortProto.stSynChampionInfo champion = 1;
  total_size += 1 * this->champion_size();
  for (int i = 0; i < this->champion_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->champion(i));
  }

  // repeated .SortProto.stMyIntegralAndNum myInfo = 2;
  total_size += 1 * this->myinfo_size();
  for (int i = 0; i < this->myinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->myinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stOpenLeagueWindowResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stOpenLeagueWindowResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stOpenLeagueWindowResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stOpenLeagueWindowResult::MergeFrom(const stOpenLeagueWindowResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  champion_.MergeFrom(from.champion_);
  myinfo_.MergeFrom(from.myinfo_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_session()) {
      set_session(from.session());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_esession()) {
      set_esession(from.esession());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stOpenLeagueWindowResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stOpenLeagueWindowResult::CopyFrom(const stOpenLeagueWindowResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stOpenLeagueWindowResult::IsInitialized() const {

  return true;
}

void stOpenLeagueWindowResult::Swap(stOpenLeagueWindowResult* other) {
  if (other != this) {
    champion_.Swap(&other->champion_);
    myinfo_.Swap(&other->myinfo_);
    std::swap(session_, other->session_);
    std::swap(status_, other->status_);
    std::swap(esession_, other->esession_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stOpenLeagueWindowResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stOpenLeagueWindowResult_descriptor_;
  metadata.reflection = stOpenLeagueWindowResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqHeroLeagueMatch_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqHeroLeagueMatch_ProtoModID_descriptor_;
}
bool stReqHeroLeagueMatch_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqHeroLeagueMatch_ProtoModID stReqHeroLeagueMatch::ModID;
const stReqHeroLeagueMatch_ProtoModID stReqHeroLeagueMatch::ProtoModID_MIN;
const stReqHeroLeagueMatch_ProtoModID stReqHeroLeagueMatch::ProtoModID_MAX;
const int stReqHeroLeagueMatch::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqHeroLeagueMatch_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqHeroLeagueMatch_ProtoFunID_descriptor_;
}
bool stReqHeroLeagueMatch_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 78:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqHeroLeagueMatch_ProtoFunID stReqHeroLeagueMatch::FunID;
const stReqHeroLeagueMatch_ProtoFunID stReqHeroLeagueMatch::ProtoFunID_MIN;
const stReqHeroLeagueMatch_ProtoFunID stReqHeroLeagueMatch::ProtoFunID_MAX;
const int stReqHeroLeagueMatch::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqHeroLeagueMatch::kCharIDFieldNumber;
#endif  // !_MSC_VER

stReqHeroLeagueMatch::stReqHeroLeagueMatch()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqHeroLeagueMatch::InitAsDefaultInstance() {
}

stReqHeroLeagueMatch::stReqHeroLeagueMatch(const stReqHeroLeagueMatch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqHeroLeagueMatch::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqHeroLeagueMatch::~stReqHeroLeagueMatch() {
  SharedDtor();
}

void stReqHeroLeagueMatch::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqHeroLeagueMatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqHeroLeagueMatch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqHeroLeagueMatch_descriptor_;
}

const stReqHeroLeagueMatch& stReqHeroLeagueMatch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stReqHeroLeagueMatch* stReqHeroLeagueMatch::default_instance_ = NULL;

stReqHeroLeagueMatch* stReqHeroLeagueMatch::New() const {
  return new stReqHeroLeagueMatch;
}

void stReqHeroLeagueMatch::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqHeroLeagueMatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqHeroLeagueMatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqHeroLeagueMatch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqHeroLeagueMatch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqHeroLeagueMatch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqHeroLeagueMatch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqHeroLeagueMatch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqHeroLeagueMatch::MergeFrom(const stReqHeroLeagueMatch& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqHeroLeagueMatch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqHeroLeagueMatch::CopyFrom(const stReqHeroLeagueMatch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqHeroLeagueMatch::IsInitialized() const {

  return true;
}

void stReqHeroLeagueMatch::Swap(stReqHeroLeagueMatch* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqHeroLeagueMatch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqHeroLeagueMatch_descriptor_;
  metadata.reflection = stReqHeroLeagueMatch_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stHeroLeagueMatchResult_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stHeroLeagueMatchResult_eResult_descriptor_;
}
bool stHeroLeagueMatchResult_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stHeroLeagueMatchResult_eResult stHeroLeagueMatchResult::eSucess;
const stHeroLeagueMatchResult_eResult stHeroLeagueMatchResult::eWait;
const stHeroLeagueMatchResult_eResult stHeroLeagueMatchResult::eFail;
const stHeroLeagueMatchResult_eResult stHeroLeagueMatchResult::eNot_In_Time;
const stHeroLeagueMatchResult_eResult stHeroLeagueMatchResult::eLv_Limit;
const stHeroLeagueMatchResult_eResult stHeroLeagueMatchResult::eRegister_Num_Lack;
const stHeroLeagueMatchResult_eResult stHeroLeagueMatchResult::eNo_Qualification;
const stHeroLeagueMatchResult_eResult stHeroLeagueMatchResult::eResult_MIN;
const stHeroLeagueMatchResult_eResult stHeroLeagueMatchResult::eResult_MAX;
const int stHeroLeagueMatchResult::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stHeroLeagueMatchResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stHeroLeagueMatchResult_ProtoModID_descriptor_;
}
bool stHeroLeagueMatchResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stHeroLeagueMatchResult_ProtoModID stHeroLeagueMatchResult::ModID;
const stHeroLeagueMatchResult_ProtoModID stHeroLeagueMatchResult::ProtoModID_MIN;
const stHeroLeagueMatchResult_ProtoModID stHeroLeagueMatchResult::ProtoModID_MAX;
const int stHeroLeagueMatchResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stHeroLeagueMatchResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stHeroLeagueMatchResult_ProtoFunID_descriptor_;
}
bool stHeroLeagueMatchResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 79:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stHeroLeagueMatchResult_ProtoFunID stHeroLeagueMatchResult::FunID;
const stHeroLeagueMatchResult_ProtoFunID stHeroLeagueMatchResult::ProtoFunID_MIN;
const stHeroLeagueMatchResult_ProtoFunID stHeroLeagueMatchResult::ProtoFunID_MAX;
const int stHeroLeagueMatchResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stHeroLeagueMatchResult::kResultFieldNumber;
#endif  // !_MSC_VER

stHeroLeagueMatchResult::stHeroLeagueMatchResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stHeroLeagueMatchResult::InitAsDefaultInstance() {
}

stHeroLeagueMatchResult::stHeroLeagueMatchResult(const stHeroLeagueMatchResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stHeroLeagueMatchResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stHeroLeagueMatchResult::~stHeroLeagueMatchResult() {
  SharedDtor();
}

void stHeroLeagueMatchResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stHeroLeagueMatchResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stHeroLeagueMatchResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stHeroLeagueMatchResult_descriptor_;
}

const stHeroLeagueMatchResult& stHeroLeagueMatchResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stHeroLeagueMatchResult* stHeroLeagueMatchResult::default_instance_ = NULL;

stHeroLeagueMatchResult* stHeroLeagueMatchResult::New() const {
  return new stHeroLeagueMatchResult;
}

void stHeroLeagueMatchResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stHeroLeagueMatchResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SortProto.stHeroLeagueMatchResult.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SortProto::stHeroLeagueMatchResult_eResult_IsValid(value)) {
            set_result(static_cast< ::SortProto::stHeroLeagueMatchResult_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stHeroLeagueMatchResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SortProto.stHeroLeagueMatchResult.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stHeroLeagueMatchResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SortProto.stHeroLeagueMatchResult.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stHeroLeagueMatchResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SortProto.stHeroLeagueMatchResult.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stHeroLeagueMatchResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stHeroLeagueMatchResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stHeroLeagueMatchResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stHeroLeagueMatchResult::MergeFrom(const stHeroLeagueMatchResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stHeroLeagueMatchResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stHeroLeagueMatchResult::CopyFrom(const stHeroLeagueMatchResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stHeroLeagueMatchResult::IsInitialized() const {

  return true;
}

void stHeroLeagueMatchResult::Swap(stHeroLeagueMatchResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stHeroLeagueMatchResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stHeroLeagueMatchResult_descriptor_;
  metadata.reflection = stHeroLeagueMatchResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqMenberInfo_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqMenberInfo_ProtoModID_descriptor_;
}
bool stReqMenberInfo_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqMenberInfo_ProtoModID stReqMenberInfo::ModID;
const stReqMenberInfo_ProtoModID stReqMenberInfo::ProtoModID_MIN;
const stReqMenberInfo_ProtoModID stReqMenberInfo::ProtoModID_MAX;
const int stReqMenberInfo::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqMenberInfo_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqMenberInfo_ProtoFunID_descriptor_;
}
bool stReqMenberInfo_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 80:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqMenberInfo_ProtoFunID stReqMenberInfo::FunID;
const stReqMenberInfo_ProtoFunID stReqMenberInfo::ProtoFunID_MIN;
const stReqMenberInfo_ProtoFunID stReqMenberInfo::ProtoFunID_MAX;
const int stReqMenberInfo::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqMenberInfo::kCharIDFieldNumber;
#endif  // !_MSC_VER

stReqMenberInfo::stReqMenberInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqMenberInfo::InitAsDefaultInstance() {
}

stReqMenberInfo::stReqMenberInfo(const stReqMenberInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqMenberInfo::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqMenberInfo::~stReqMenberInfo() {
  SharedDtor();
}

void stReqMenberInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqMenberInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqMenberInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqMenberInfo_descriptor_;
}

const stReqMenberInfo& stReqMenberInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stReqMenberInfo* stReqMenberInfo::default_instance_ = NULL;

stReqMenberInfo* stReqMenberInfo::New() const {
  return new stReqMenberInfo;
}

void stReqMenberInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqMenberInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqMenberInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqMenberInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqMenberInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqMenberInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqMenberInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqMenberInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqMenberInfo::MergeFrom(const stReqMenberInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqMenberInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqMenberInfo::CopyFrom(const stReqMenberInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqMenberInfo::IsInitialized() const {

  return true;
}

void stReqMenberInfo::Swap(stReqMenberInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqMenberInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqMenberInfo_descriptor_;
  metadata.reflection = stReqMenberInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stMemberinfo_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stMemberinfo_ProtoModID_descriptor_;
}
bool stMemberinfo_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stMemberinfo_ProtoModID stMemberinfo::ModID;
const stMemberinfo_ProtoModID stMemberinfo::ProtoModID_MIN;
const stMemberinfo_ProtoModID stMemberinfo::ProtoModID_MAX;
const int stMemberinfo::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stMemberinfo_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stMemberinfo_ProtoFunID_descriptor_;
}
bool stMemberinfo_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 81:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stMemberinfo_ProtoFunID stMemberinfo::FunID;
const stMemberinfo_ProtoFunID stMemberinfo::ProtoFunID_MIN;
const stMemberinfo_ProtoFunID stMemberinfo::ProtoFunID_MAX;
const int stMemberinfo::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stMemberinfo::kMemberFieldNumber;
#endif  // !_MSC_VER

stMemberinfo::stMemberinfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stMemberinfo::InitAsDefaultInstance() {
}

stMemberinfo::stMemberinfo(const stMemberinfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stMemberinfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stMemberinfo::~stMemberinfo() {
  SharedDtor();
}

void stMemberinfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stMemberinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stMemberinfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stMemberinfo_descriptor_;
}

const stMemberinfo& stMemberinfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stMemberinfo* stMemberinfo::default_instance_ = NULL;

stMemberinfo* stMemberinfo::New() const {
  return new stMemberinfo;
}

void stMemberinfo::Clear() {
  member_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stMemberinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SortProto.stSynChampionInfo member = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_member:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_member()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_member;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stMemberinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .SortProto.stSynChampionInfo member = 1;
  for (int i = 0; i < this->member_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->member(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stMemberinfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .SortProto.stSynChampionInfo member = 1;
  for (int i = 0; i < this->member_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->member(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stMemberinfo::ByteSize() const {
  int total_size = 0;

  // repeated .SortProto.stSynChampionInfo member = 1;
  total_size += 1 * this->member_size();
  for (int i = 0; i < this->member_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->member(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stMemberinfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stMemberinfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stMemberinfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stMemberinfo::MergeFrom(const stMemberinfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  member_.MergeFrom(from.member_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stMemberinfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stMemberinfo::CopyFrom(const stMemberinfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stMemberinfo::IsInitialized() const {

  return true;
}

void stMemberinfo::Swap(stMemberinfo* other) {
  if (other != this) {
    member_.Swap(&other->member_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stMemberinfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stMemberinfo_descriptor_;
  metadata.reflection = stMemberinfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stCancelHeroLeagueMatch_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCancelHeroLeagueMatch_ProtoModID_descriptor_;
}
bool stCancelHeroLeagueMatch_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stCancelHeroLeagueMatch_ProtoModID stCancelHeroLeagueMatch::ModID;
const stCancelHeroLeagueMatch_ProtoModID stCancelHeroLeagueMatch::ProtoModID_MIN;
const stCancelHeroLeagueMatch_ProtoModID stCancelHeroLeagueMatch::ProtoModID_MAX;
const int stCancelHeroLeagueMatch::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stCancelHeroLeagueMatch_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCancelHeroLeagueMatch_ProtoFunID_descriptor_;
}
bool stCancelHeroLeagueMatch_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 82:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stCancelHeroLeagueMatch_ProtoFunID stCancelHeroLeagueMatch::FunID;
const stCancelHeroLeagueMatch_ProtoFunID stCancelHeroLeagueMatch::ProtoFunID_MIN;
const stCancelHeroLeagueMatch_ProtoFunID stCancelHeroLeagueMatch::ProtoFunID_MAX;
const int stCancelHeroLeagueMatch::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stCancelHeroLeagueMatch::kCharIDFieldNumber;
#endif  // !_MSC_VER

stCancelHeroLeagueMatch::stCancelHeroLeagueMatch()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stCancelHeroLeagueMatch::InitAsDefaultInstance() {
}

stCancelHeroLeagueMatch::stCancelHeroLeagueMatch(const stCancelHeroLeagueMatch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stCancelHeroLeagueMatch::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stCancelHeroLeagueMatch::~stCancelHeroLeagueMatch() {
  SharedDtor();
}

void stCancelHeroLeagueMatch::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stCancelHeroLeagueMatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stCancelHeroLeagueMatch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCancelHeroLeagueMatch_descriptor_;
}

const stCancelHeroLeagueMatch& stCancelHeroLeagueMatch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stCancelHeroLeagueMatch* stCancelHeroLeagueMatch::default_instance_ = NULL;

stCancelHeroLeagueMatch* stCancelHeroLeagueMatch::New() const {
  return new stCancelHeroLeagueMatch;
}

void stCancelHeroLeagueMatch::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stCancelHeroLeagueMatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stCancelHeroLeagueMatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stCancelHeroLeagueMatch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stCancelHeroLeagueMatch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stCancelHeroLeagueMatch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stCancelHeroLeagueMatch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stCancelHeroLeagueMatch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stCancelHeroLeagueMatch::MergeFrom(const stCancelHeroLeagueMatch& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stCancelHeroLeagueMatch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stCancelHeroLeagueMatch::CopyFrom(const stCancelHeroLeagueMatch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stCancelHeroLeagueMatch::IsInitialized() const {

  return true;
}

void stCancelHeroLeagueMatch::Swap(stCancelHeroLeagueMatch* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stCancelHeroLeagueMatch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stCancelHeroLeagueMatch_descriptor_;
  metadata.reflection = stCancelHeroLeagueMatch_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stCanceHeroLeagueResult_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCanceHeroLeagueResult_eResult_descriptor_;
}
bool stCanceHeroLeagueResult_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stCanceHeroLeagueResult_eResult stCanceHeroLeagueResult::eSuccess;
const stCanceHeroLeagueResult_eResult stCanceHeroLeagueResult::eFail;
const stCanceHeroLeagueResult_eResult stCanceHeroLeagueResult::eResult_MIN;
const stCanceHeroLeagueResult_eResult stCanceHeroLeagueResult::eResult_MAX;
const int stCanceHeroLeagueResult::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stCanceHeroLeagueResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCanceHeroLeagueResult_ProtoModID_descriptor_;
}
bool stCanceHeroLeagueResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stCanceHeroLeagueResult_ProtoModID stCanceHeroLeagueResult::ModID;
const stCanceHeroLeagueResult_ProtoModID stCanceHeroLeagueResult::ProtoModID_MIN;
const stCanceHeroLeagueResult_ProtoModID stCanceHeroLeagueResult::ProtoModID_MAX;
const int stCanceHeroLeagueResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stCanceHeroLeagueResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCanceHeroLeagueResult_ProtoFunID_descriptor_;
}
bool stCanceHeroLeagueResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 83:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stCanceHeroLeagueResult_ProtoFunID stCanceHeroLeagueResult::FunID;
const stCanceHeroLeagueResult_ProtoFunID stCanceHeroLeagueResult::ProtoFunID_MIN;
const stCanceHeroLeagueResult_ProtoFunID stCanceHeroLeagueResult::ProtoFunID_MAX;
const int stCanceHeroLeagueResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stCanceHeroLeagueResult::kResultFieldNumber;
#endif  // !_MSC_VER

stCanceHeroLeagueResult::stCanceHeroLeagueResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stCanceHeroLeagueResult::InitAsDefaultInstance() {
}

stCanceHeroLeagueResult::stCanceHeroLeagueResult(const stCanceHeroLeagueResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stCanceHeroLeagueResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stCanceHeroLeagueResult::~stCanceHeroLeagueResult() {
  SharedDtor();
}

void stCanceHeroLeagueResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stCanceHeroLeagueResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stCanceHeroLeagueResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCanceHeroLeagueResult_descriptor_;
}

const stCanceHeroLeagueResult& stCanceHeroLeagueResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stCanceHeroLeagueResult* stCanceHeroLeagueResult::default_instance_ = NULL;

stCanceHeroLeagueResult* stCanceHeroLeagueResult::New() const {
  return new stCanceHeroLeagueResult;
}

void stCanceHeroLeagueResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stCanceHeroLeagueResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SortProto.stCanceHeroLeagueResult.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SortProto::stCanceHeroLeagueResult_eResult_IsValid(value)) {
            set_result(static_cast< ::SortProto::stCanceHeroLeagueResult_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stCanceHeroLeagueResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SortProto.stCanceHeroLeagueResult.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stCanceHeroLeagueResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SortProto.stCanceHeroLeagueResult.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stCanceHeroLeagueResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SortProto.stCanceHeroLeagueResult.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stCanceHeroLeagueResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stCanceHeroLeagueResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stCanceHeroLeagueResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stCanceHeroLeagueResult::MergeFrom(const stCanceHeroLeagueResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stCanceHeroLeagueResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stCanceHeroLeagueResult::CopyFrom(const stCanceHeroLeagueResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stCanceHeroLeagueResult::IsInitialized() const {

  return true;
}

void stCanceHeroLeagueResult::Swap(stCanceHeroLeagueResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stCanceHeroLeagueResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stCanceHeroLeagueResult_descriptor_;
  metadata.reflection = stCanceHeroLeagueResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqQualifiedList_eSession_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqQualifiedList_eSession_descriptor_;
}
bool stReqQualifiedList_eSession_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqQualifiedList_eSession stReqQualifiedList::eSixteen;
const stReqQualifiedList_eSession stReqQualifiedList::eEight;
const stReqQualifiedList_eSession stReqQualifiedList::eFour;
const stReqQualifiedList_eSession stReqQualifiedList::eTwo;
const stReqQualifiedList_eSession stReqQualifiedList::eSession_MIN;
const stReqQualifiedList_eSession stReqQualifiedList::eSession_MAX;
const int stReqQualifiedList::eSession_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqQualifiedList_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqQualifiedList_ProtoModID_descriptor_;
}
bool stReqQualifiedList_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqQualifiedList_ProtoModID stReqQualifiedList::ModID;
const stReqQualifiedList_ProtoModID stReqQualifiedList::ProtoModID_MIN;
const stReqQualifiedList_ProtoModID stReqQualifiedList::ProtoModID_MAX;
const int stReqQualifiedList::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqQualifiedList_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqQualifiedList_ProtoFunID_descriptor_;
}
bool stReqQualifiedList_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 84:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqQualifiedList_ProtoFunID stReqQualifiedList::FunID;
const stReqQualifiedList_ProtoFunID stReqQualifiedList::ProtoFunID_MIN;
const stReqQualifiedList_ProtoFunID stReqQualifiedList::ProtoFunID_MAX;
const int stReqQualifiedList::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqQualifiedList::kTypeFieldNumber;
#endif  // !_MSC_VER

stReqQualifiedList::stReqQualifiedList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqQualifiedList::InitAsDefaultInstance() {
}

stReqQualifiedList::stReqQualifiedList(const stReqQualifiedList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqQualifiedList::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqQualifiedList::~stReqQualifiedList() {
  SharedDtor();
}

void stReqQualifiedList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqQualifiedList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqQualifiedList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqQualifiedList_descriptor_;
}

const stReqQualifiedList& stReqQualifiedList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stReqQualifiedList* stReqQualifiedList::default_instance_ = NULL;

stReqQualifiedList* stReqQualifiedList::New() const {
  return new stReqQualifiedList;
}

void stReqQualifiedList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqQualifiedList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SortProto.stReqQualifiedList.eSession type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SortProto::stReqQualifiedList_eSession_IsValid(value)) {
            set_type(static_cast< ::SortProto::stReqQualifiedList_eSession >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqQualifiedList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SortProto.stReqQualifiedList.eSession type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqQualifiedList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SortProto.stReqQualifiedList.eSession type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqQualifiedList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SortProto.stReqQualifiedList.eSession type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqQualifiedList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqQualifiedList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqQualifiedList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqQualifiedList::MergeFrom(const stReqQualifiedList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqQualifiedList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqQualifiedList::CopyFrom(const stReqQualifiedList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqQualifiedList::IsInitialized() const {

  return true;
}

void stReqQualifiedList::Swap(stReqQualifiedList* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqQualifiedList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqQualifiedList_descriptor_;
  metadata.reflection = stReqQualifiedList_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRoleBasicInfo_eCompleteState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRoleBasicInfo_eCompleteState_descriptor_;
}
bool stRoleBasicInfo_eCompleteState_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRoleBasicInfo_eCompleteState stRoleBasicInfo::eSTATE_WIN;
const stRoleBasicInfo_eCompleteState stRoleBasicInfo::eSTATE_LOSS;
const stRoleBasicInfo_eCompleteState stRoleBasicInfo::esTATE_NOT_ATTEND;
const stRoleBasicInfo_eCompleteState stRoleBasicInfo::eCompleteState_MIN;
const stRoleBasicInfo_eCompleteState stRoleBasicInfo::eCompleteState_MAX;
const int stRoleBasicInfo::eCompleteState_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRoleBasicInfo::kAreaCodeFieldNumber;
const int stRoleBasicInfo::kNameFieldNumber;
const int stRoleBasicInfo::kLeveFieldNumber;
const int stRoleBasicInfo::kVipLvFieldNumber;
const int stRoleBasicInfo::kJobFieldNumber;
const int stRoleBasicInfo::kSexFieldNumber;
const int stRoleBasicInfo::kBattlePowerFieldNumber;
const int stRoleBasicInfo::kWinOrLossFieldNumber;
const int stRoleBasicInfo::kPhotoIDFieldNumber;
#endif  // !_MSC_VER

stRoleBasicInfo::stRoleBasicInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRoleBasicInfo::InitAsDefaultInstance() {
}

stRoleBasicInfo::stRoleBasicInfo(const stRoleBasicInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRoleBasicInfo::SharedCtor() {
  _cached_size_ = 0;
  areacode_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  leve_ = 0u;
  viplv_ = 0u;
  job_ = 0u;
  sex_ = 0u;
  battlepower_ = 0u;
  winorloss_ = 1;
  photoid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRoleBasicInfo::~stRoleBasicInfo() {
  SharedDtor();
}

void stRoleBasicInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void stRoleBasicInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRoleBasicInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRoleBasicInfo_descriptor_;
}

const stRoleBasicInfo& stRoleBasicInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stRoleBasicInfo* stRoleBasicInfo::default_instance_ = NULL;

stRoleBasicInfo* stRoleBasicInfo::New() const {
  return new stRoleBasicInfo;
}

void stRoleBasicInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    areacode_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    leve_ = 0u;
    viplv_ = 0u;
    job_ = 0u;
    sex_ = 0u;
    battlepower_ = 0u;
    winorloss_ = 1;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    photoid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRoleBasicInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 areaCode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &areacode_)));
          set_has_areacode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_leve;
        break;
      }

      // optional uint32 leve = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leve:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leve_)));
          set_has_leve();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_vipLv;
        break;
      }

      // optional uint32 vipLv = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vipLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &viplv_)));
          set_has_viplv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_job;
        break;
      }

      // optional uint32 job = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &job_)));
          set_has_job();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_sex;
        break;
      }

      // optional uint32 sex = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_battlePower;
        break;
      }

      // optional uint32 battlePower = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battlePower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battlepower_)));
          set_has_battlepower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_winOrLoss;
        break;
      }

      // optional .SortProto.stRoleBasicInfo.eCompleteState winOrLoss = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winOrLoss:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SortProto::stRoleBasicInfo_eCompleteState_IsValid(value)) {
            set_winorloss(static_cast< ::SortProto::stRoleBasicInfo_eCompleteState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_photoID;
        break;
      }

      // optional uint32 photoID = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_photoID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &photoid_)));
          set_has_photoid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRoleBasicInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 areaCode = 1;
  if (has_areacode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->areacode(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional uint32 leve = 3;
  if (has_leve()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->leve(), output);
  }

  // optional uint32 vipLv = 4;
  if (has_viplv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->viplv(), output);
  }

  // optional uint32 job = 5;
  if (has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->job(), output);
  }

  // optional uint32 sex = 6;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->sex(), output);
  }

  // optional uint32 battlePower = 7;
  if (has_battlepower()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->battlepower(), output);
  }

  // optional .SortProto.stRoleBasicInfo.eCompleteState winOrLoss = 8;
  if (has_winorloss()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->winorloss(), output);
  }

  // optional uint32 photoID = 9;
  if (has_photoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->photoid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRoleBasicInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 areaCode = 1;
  if (has_areacode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->areacode(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional uint32 leve = 3;
  if (has_leve()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->leve(), target);
  }

  // optional uint32 vipLv = 4;
  if (has_viplv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->viplv(), target);
  }

  // optional uint32 job = 5;
  if (has_job()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->job(), target);
  }

  // optional uint32 sex = 6;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->sex(), target);
  }

  // optional uint32 battlePower = 7;
  if (has_battlepower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->battlepower(), target);
  }

  // optional .SortProto.stRoleBasicInfo.eCompleteState winOrLoss = 8;
  if (has_winorloss()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->winorloss(), target);
  }

  // optional uint32 photoID = 9;
  if (has_photoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->photoid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRoleBasicInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 areaCode = 1;
    if (has_areacode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->areacode());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 leve = 3;
    if (has_leve()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leve());
    }

    // optional uint32 vipLv = 4;
    if (has_viplv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->viplv());
    }

    // optional uint32 job = 5;
    if (has_job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->job());
    }

    // optional uint32 sex = 6;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sex());
    }

    // optional uint32 battlePower = 7;
    if (has_battlepower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battlepower());
    }

    // optional .SortProto.stRoleBasicInfo.eCompleteState winOrLoss = 8;
    if (has_winorloss()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->winorloss());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 photoID = 9;
    if (has_photoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->photoid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRoleBasicInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRoleBasicInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRoleBasicInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRoleBasicInfo::MergeFrom(const stRoleBasicInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_areacode()) {
      set_areacode(from.areacode());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_leve()) {
      set_leve(from.leve());
    }
    if (from.has_viplv()) {
      set_viplv(from.viplv());
    }
    if (from.has_job()) {
      set_job(from.job());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_battlepower()) {
      set_battlepower(from.battlepower());
    }
    if (from.has_winorloss()) {
      set_winorloss(from.winorloss());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_photoid()) {
      set_photoid(from.photoid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRoleBasicInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRoleBasicInfo::CopyFrom(const stRoleBasicInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRoleBasicInfo::IsInitialized() const {

  return true;
}

void stRoleBasicInfo::Swap(stRoleBasicInfo* other) {
  if (other != this) {
    std::swap(areacode_, other->areacode_);
    std::swap(name_, other->name_);
    std::swap(leve_, other->leve_);
    std::swap(viplv_, other->viplv_);
    std::swap(job_, other->job_);
    std::swap(sex_, other->sex_);
    std::swap(battlepower_, other->battlepower_);
    std::swap(winorloss_, other->winorloss_);
    std::swap(photoid_, other->photoid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRoleBasicInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRoleBasicInfo_descriptor_;
  metadata.reflection = stRoleBasicInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stTeam::kUser1FieldNumber;
const int stTeam::kUser2FieldNumber;
#endif  // !_MSC_VER

stTeam::stTeam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stTeam::InitAsDefaultInstance() {
  user1_ = const_cast< ::SortProto::stRoleBasicInfo*>(&::SortProto::stRoleBasicInfo::default_instance());
  user2_ = const_cast< ::SortProto::stRoleBasicInfo*>(&::SortProto::stRoleBasicInfo::default_instance());
}

stTeam::stTeam(const stTeam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stTeam::SharedCtor() {
  _cached_size_ = 0;
  user1_ = NULL;
  user2_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stTeam::~stTeam() {
  SharedDtor();
}

void stTeam::SharedDtor() {
  if (this != default_instance_) {
    delete user1_;
    delete user2_;
  }
}

void stTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stTeam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stTeam_descriptor_;
}

const stTeam& stTeam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stTeam* stTeam::default_instance_ = NULL;

stTeam* stTeam::New() const {
  return new stTeam;
}

void stTeam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_user1()) {
      if (user1_ != NULL) user1_->::SortProto::stRoleBasicInfo::Clear();
    }
    if (has_user2()) {
      if (user2_ != NULL) user2_->::SortProto::stRoleBasicInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SortProto.stRoleBasicInfo user1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user1()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user2;
        break;
      }

      // optional .SortProto.stRoleBasicInfo user2 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user2()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SortProto.stRoleBasicInfo user1 = 1;
  if (has_user1()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->user1(), output);
  }

  // optional .SortProto.stRoleBasicInfo user2 = 2;
  if (has_user2()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stTeam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SortProto.stRoleBasicInfo user1 = 1;
  if (has_user1()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->user1(), target);
  }

  // optional .SortProto.stRoleBasicInfo user2 = 2;
  if (has_user2()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stTeam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SortProto.stRoleBasicInfo user1 = 1;
    if (has_user1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user1());
    }

    // optional .SortProto.stRoleBasicInfo user2 = 2;
    if (has_user2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user2());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stTeam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stTeam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stTeam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stTeam::MergeFrom(const stTeam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user1()) {
      mutable_user1()->::SortProto::stRoleBasicInfo::MergeFrom(from.user1());
    }
    if (from.has_user2()) {
      mutable_user2()->::SortProto::stRoleBasicInfo::MergeFrom(from.user2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stTeam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stTeam::CopyFrom(const stTeam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stTeam::IsInitialized() const {

  return true;
}

void stTeam::Swap(stTeam* other) {
  if (other != this) {
    std::swap(user1_, other->user1_);
    std::swap(user2_, other->user2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stTeam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stTeam_descriptor_;
  metadata.reflection = stTeam_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stQualifiedListResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stQualifiedListResult_ProtoModID_descriptor_;
}
bool stQualifiedListResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stQualifiedListResult_ProtoModID stQualifiedListResult::ModID;
const stQualifiedListResult_ProtoModID stQualifiedListResult::ProtoModID_MIN;
const stQualifiedListResult_ProtoModID stQualifiedListResult::ProtoModID_MAX;
const int stQualifiedListResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stQualifiedListResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stQualifiedListResult_ProtoFunID_descriptor_;
}
bool stQualifiedListResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 85:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stQualifiedListResult_ProtoFunID stQualifiedListResult::FunID;
const stQualifiedListResult_ProtoFunID stQualifiedListResult::ProtoFunID_MIN;
const stQualifiedListResult_ProtoFunID stQualifiedListResult::ProtoFunID_MAX;
const int stQualifiedListResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stQualifiedListResult::kUsersFieldNumber;
const int stQualifiedListResult::kIsQualifiedFieldNumber;
#endif  // !_MSC_VER

stQualifiedListResult::stQualifiedListResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stQualifiedListResult::InitAsDefaultInstance() {
}

stQualifiedListResult::stQualifiedListResult(const stQualifiedListResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stQualifiedListResult::SharedCtor() {
  _cached_size_ = 0;
  isqualified_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stQualifiedListResult::~stQualifiedListResult() {
  SharedDtor();
}

void stQualifiedListResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stQualifiedListResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stQualifiedListResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stQualifiedListResult_descriptor_;
}

const stQualifiedListResult& stQualifiedListResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stQualifiedListResult* stQualifiedListResult::default_instance_ = NULL;

stQualifiedListResult* stQualifiedListResult::New() const {
  return new stQualifiedListResult;
}

void stQualifiedListResult::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    isqualified_ = false;
  }
  users_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stQualifiedListResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SortProto.stTeam users = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_users:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_users()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_users;
        if (input->ExpectTag(16)) goto parse_isQualified;
        break;
      }

      // optional bool isQualified = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isQualified:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isqualified_)));
          set_has_isqualified();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stQualifiedListResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .SortProto.stTeam users = 1;
  for (int i = 0; i < this->users_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->users(i), output);
  }

  // optional bool isQualified = 2;
  if (has_isqualified()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isqualified(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stQualifiedListResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .SortProto.stTeam users = 1;
  for (int i = 0; i < this->users_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->users(i), target);
  }

  // optional bool isQualified = 2;
  if (has_isqualified()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isqualified(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stQualifiedListResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional bool isQualified = 2;
    if (has_isqualified()) {
      total_size += 1 + 1;
    }

  }
  // repeated .SortProto.stTeam users = 1;
  total_size += 1 * this->users_size();
  for (int i = 0; i < this->users_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->users(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stQualifiedListResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stQualifiedListResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stQualifiedListResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stQualifiedListResult::MergeFrom(const stQualifiedListResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  users_.MergeFrom(from.users_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_isqualified()) {
      set_isqualified(from.isqualified());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stQualifiedListResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stQualifiedListResult::CopyFrom(const stQualifiedListResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stQualifiedListResult::IsInitialized() const {

  return true;
}

void stQualifiedListResult::Swap(stQualifiedListResult* other) {
  if (other != this) {
    users_.Swap(&other->users_);
    std::swap(isqualified_, other->isqualified_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stQualifiedListResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stQualifiedListResult_descriptor_;
  metadata.reflection = stQualifiedListResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqWorship_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqWorship_ProtoModID_descriptor_;
}
bool stReqWorship_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqWorship_ProtoModID stReqWorship::ModID;
const stReqWorship_ProtoModID stReqWorship::ProtoModID_MIN;
const stReqWorship_ProtoModID stReqWorship::ProtoModID_MAX;
const int stReqWorship::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqWorship_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqWorship_ProtoFunID_descriptor_;
}
bool stReqWorship_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 86:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqWorship_ProtoFunID stReqWorship::FunID;
const stReqWorship_ProtoFunID stReqWorship::ProtoFunID_MIN;
const stReqWorship_ProtoFunID stReqWorship::ProtoFunID_MAX;
const int stReqWorship::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqWorship::kCharIDFieldNumber;
#endif  // !_MSC_VER

stReqWorship::stReqWorship()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqWorship::InitAsDefaultInstance() {
}

stReqWorship::stReqWorship(const stReqWorship& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqWorship::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqWorship::~stReqWorship() {
  SharedDtor();
}

void stReqWorship::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqWorship::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqWorship::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqWorship_descriptor_;
}

const stReqWorship& stReqWorship::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stReqWorship* stReqWorship::default_instance_ = NULL;

stReqWorship* stReqWorship::New() const {
  return new stReqWorship;
}

void stReqWorship::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqWorship::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqWorship::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqWorship::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqWorship::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqWorship::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqWorship* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqWorship*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqWorship::MergeFrom(const stReqWorship& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqWorship::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqWorship::CopyFrom(const stReqWorship& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqWorship::IsInitialized() const {

  return true;
}

void stReqWorship::Swap(stReqWorship* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqWorship::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqWorship_descriptor_;
  metadata.reflection = stReqWorship_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stWorskipResult_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stWorskipResult_eResult_descriptor_;
}
bool stWorskipResult_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stWorskipResult_eResult stWorskipResult::eSuccess;
const stWorskipResult_eResult stWorskipResult::eInner_Error;
const stWorskipResult_eResult stWorskipResult::eTimeUseOut;
const stWorskipResult_eResult stWorskipResult::eNoBody;
const stWorskipResult_eResult stWorskipResult::eResult_MIN;
const stWorskipResult_eResult stWorskipResult::eResult_MAX;
const int stWorskipResult::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stWorskipResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stWorskipResult_ProtoModID_descriptor_;
}
bool stWorskipResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stWorskipResult_ProtoModID stWorskipResult::ModID;
const stWorskipResult_ProtoModID stWorskipResult::ProtoModID_MIN;
const stWorskipResult_ProtoModID stWorskipResult::ProtoModID_MAX;
const int stWorskipResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stWorskipResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stWorskipResult_ProtoFunID_descriptor_;
}
bool stWorskipResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 87:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stWorskipResult_ProtoFunID stWorskipResult::FunID;
const stWorskipResult_ProtoFunID stWorskipResult::ProtoFunID_MIN;
const stWorskipResult_ProtoFunID stWorskipResult::ProtoFunID_MAX;
const int stWorskipResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stWorskipResult::kResultFieldNumber;
const int stWorskipResult::kCharIDFieldNumber;
#endif  // !_MSC_VER

stWorskipResult::stWorskipResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stWorskipResult::InitAsDefaultInstance() {
}

stWorskipResult::stWorskipResult(const stWorskipResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stWorskipResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stWorskipResult::~stWorskipResult() {
  SharedDtor();
}

void stWorskipResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stWorskipResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stWorskipResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stWorskipResult_descriptor_;
}

const stWorskipResult& stWorskipResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stWorskipResult* stWorskipResult::default_instance_ = NULL;

stWorskipResult* stWorskipResult::New() const {
  return new stWorskipResult;
}

void stWorskipResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stWorskipResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SortProto.stWorskipResult.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SortProto::stWorskipResult_eResult_IsValid(value)) {
            set_result(static_cast< ::SortProto::stWorskipResult_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_charID;
        break;
      }

      // optional uint32 charID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stWorskipResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SortProto.stWorskipResult.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional uint32 charID = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stWorskipResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SortProto.stWorskipResult.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional uint32 charID = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stWorskipResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SortProto.stWorskipResult.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional uint32 charID = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stWorskipResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stWorskipResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stWorskipResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stWorskipResult::MergeFrom(const stWorskipResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stWorskipResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stWorskipResult::CopyFrom(const stWorskipResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stWorskipResult::IsInitialized() const {

  return true;
}

void stWorskipResult::Swap(stWorskipResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stWorskipResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stWorskipResult_descriptor_;
  metadata.reflection = stWorskipResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqHeroList_stType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqHeroList_stType_descriptor_;
}
bool stReqHeroList_stType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqHeroList_stType stReqHeroList::eUpperBounds1;
const stReqHeroList_stType stReqHeroList::eUpperBounds2;
const stReqHeroList_stType stReqHeroList::eUpperBounds3;
const stReqHeroList_stType stReqHeroList::stType_MIN;
const stReqHeroList_stType stReqHeroList::stType_MAX;
const int stReqHeroList::stType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqHeroList_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqHeroList_ProtoModID_descriptor_;
}
bool stReqHeroList_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqHeroList_ProtoModID stReqHeroList::ModID;
const stReqHeroList_ProtoModID stReqHeroList::ProtoModID_MIN;
const stReqHeroList_ProtoModID stReqHeroList::ProtoModID_MAX;
const int stReqHeroList::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqHeroList_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqHeroList_ProtoFunID_descriptor_;
}
bool stReqHeroList_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 88:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqHeroList_ProtoFunID stReqHeroList::FunID;
const stReqHeroList_ProtoFunID stReqHeroList::ProtoFunID_MIN;
const stReqHeroList_ProtoFunID stReqHeroList::ProtoFunID_MAX;
const int stReqHeroList::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqHeroList::kTypeFieldNumber;
const int stReqHeroList::kCharIDFieldNumber;
#endif  // !_MSC_VER

stReqHeroList::stReqHeroList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqHeroList::InitAsDefaultInstance() {
}

stReqHeroList::stReqHeroList(const stReqHeroList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqHeroList::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqHeroList::~stReqHeroList() {
  SharedDtor();
}

void stReqHeroList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqHeroList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqHeroList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqHeroList_descriptor_;
}

const stReqHeroList& stReqHeroList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stReqHeroList* stReqHeroList::default_instance_ = NULL;

stReqHeroList* stReqHeroList::New() const {
  return new stReqHeroList;
}

void stReqHeroList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqHeroList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SortProto.stReqHeroList.stType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SortProto::stReqHeroList_stType_IsValid(value)) {
            set_type(static_cast< ::SortProto::stReqHeroList_stType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_charID;
        break;
      }

      // optional uint32 charID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqHeroList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SortProto.stReqHeroList.stType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint32 charID = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqHeroList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SortProto.stReqHeroList.stType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional uint32 charID = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqHeroList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SortProto.stReqHeroList.stType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 charID = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqHeroList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqHeroList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqHeroList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqHeroList::MergeFrom(const stReqHeroList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqHeroList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqHeroList::CopyFrom(const stReqHeroList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqHeroList::IsInitialized() const {

  return true;
}

void stReqHeroList::Swap(stReqHeroList* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqHeroList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqHeroList_descriptor_;
  metadata.reflection = stReqHeroList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stRankInfo::kSessionFieldNumber;
const int stRankInfo::kRankFieldNumber;
const int stRankInfo::kCharIDFieldNumber;
const int stRankInfo::kPubCharIDFieldNumber;
const int stRankInfo::kAreaCodeFieldNumber;
const int stRankInfo::kNameFieldNumber;
const int stRankInfo::kLevelFieldNumber;
const int stRankInfo::kVipLvFieldNumber;
const int stRankInfo::kJobFieldNumber;
const int stRankInfo::kSexFieldNumber;
const int stRankInfo::kBattlePowerFieldNumber;
const int stRankInfo::kPhotoIDFieldNumber;
#endif  // !_MSC_VER

stRankInfo::stRankInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRankInfo::InitAsDefaultInstance() {
}

stRankInfo::stRankInfo(const stRankInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRankInfo::SharedCtor() {
  _cached_size_ = 0;
  session_ = 0u;
  rank_ = 0u;
  charid_ = 0u;
  pubcharid_ = 0u;
  areacode_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0u;
  viplv_ = 0u;
  job_ = 0u;
  sex_ = 0u;
  battlepower_ = 0u;
  photoid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRankInfo::~stRankInfo() {
  SharedDtor();
}

void stRankInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void stRankInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRankInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRankInfo_descriptor_;
}

const stRankInfo& stRankInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stRankInfo* stRankInfo::default_instance_ = NULL;

stRankInfo* stRankInfo::New() const {
  return new stRankInfo;
}

void stRankInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    session_ = 0u;
    rank_ = 0u;
    charid_ = 0u;
    pubcharid_ = 0u;
    areacode_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    level_ = 0u;
    viplv_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    job_ = 0u;
    sex_ = 0u;
    battlepower_ = 0u;
    photoid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRankInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 session = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &session_)));
          set_has_session();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rank;
        break;
      }

      // optional uint32 rank = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_charID;
        break;
      }

      // optional uint32 charID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_pubCharID;
        break;
      }

      // optional uint32 pubCharID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pubCharID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pubcharid_)));
          set_has_pubcharid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_areaCode;
        break;
      }

      // optional uint32 areaCode = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_areaCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &areacode_)));
          set_has_areacode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_name;
        break;
      }

      // optional string name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_level;
        break;
      }

      // optional uint32 level = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_vipLv;
        break;
      }

      // optional uint32 vipLv = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vipLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &viplv_)));
          set_has_viplv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_job;
        break;
      }

      // optional uint32 job = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &job_)));
          set_has_job();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_sex;
        break;
      }

      // optional uint32 sex = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_battlePower;
        break;
      }

      // optional uint32 battlePower = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battlePower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battlepower_)));
          set_has_battlepower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_photoID;
        break;
      }

      // optional uint32 photoID = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_photoID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &photoid_)));
          set_has_photoid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRankInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 session = 1;
  if (has_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->session(), output);
  }

  // optional uint32 rank = 2;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rank(), output);
  }

  // optional uint32 charID = 3;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->charid(), output);
  }

  // optional uint32 pubCharID = 4;
  if (has_pubcharid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->pubcharid(), output);
  }

  // optional uint32 areaCode = 5;
  if (has_areacode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->areacode(), output);
  }

  // optional string name = 6;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->name(), output);
  }

  // optional uint32 level = 7;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->level(), output);
  }

  // optional uint32 vipLv = 8;
  if (has_viplv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->viplv(), output);
  }

  // optional uint32 job = 9;
  if (has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->job(), output);
  }

  // optional uint32 sex = 10;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->sex(), output);
  }

  // optional uint32 battlePower = 11;
  if (has_battlepower()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->battlepower(), output);
  }

  // optional uint32 photoID = 12;
  if (has_photoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->photoid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRankInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 session = 1;
  if (has_session()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->session(), target);
  }

  // optional uint32 rank = 2;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->rank(), target);
  }

  // optional uint32 charID = 3;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->charid(), target);
  }

  // optional uint32 pubCharID = 4;
  if (has_pubcharid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->pubcharid(), target);
  }

  // optional uint32 areaCode = 5;
  if (has_areacode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->areacode(), target);
  }

  // optional string name = 6;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->name(), target);
  }

  // optional uint32 level = 7;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->level(), target);
  }

  // optional uint32 vipLv = 8;
  if (has_viplv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->viplv(), target);
  }

  // optional uint32 job = 9;
  if (has_job()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->job(), target);
  }

  // optional uint32 sex = 10;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->sex(), target);
  }

  // optional uint32 battlePower = 11;
  if (has_battlepower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->battlepower(), target);
  }

  // optional uint32 photoID = 12;
  if (has_photoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->photoid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRankInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 session = 1;
    if (has_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->session());
    }

    // optional uint32 rank = 2;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

    // optional uint32 charID = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 pubCharID = 4;
    if (has_pubcharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pubcharid());
    }

    // optional uint32 areaCode = 5;
    if (has_areacode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->areacode());
    }

    // optional string name = 6;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 level = 7;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 vipLv = 8;
    if (has_viplv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->viplv());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 job = 9;
    if (has_job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->job());
    }

    // optional uint32 sex = 10;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sex());
    }

    // optional uint32 battlePower = 11;
    if (has_battlepower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battlepower());
    }

    // optional uint32 photoID = 12;
    if (has_photoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->photoid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRankInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRankInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRankInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRankInfo::MergeFrom(const stRankInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_session()) {
      set_session(from.session());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_pubcharid()) {
      set_pubcharid(from.pubcharid());
    }
    if (from.has_areacode()) {
      set_areacode(from.areacode());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_viplv()) {
      set_viplv(from.viplv());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_job()) {
      set_job(from.job());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_battlepower()) {
      set_battlepower(from.battlepower());
    }
    if (from.has_photoid()) {
      set_photoid(from.photoid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRankInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRankInfo::CopyFrom(const stRankInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRankInfo::IsInitialized() const {

  return true;
}

void stRankInfo::Swap(stRankInfo* other) {
  if (other != this) {
    std::swap(session_, other->session_);
    std::swap(rank_, other->rank_);
    std::swap(charid_, other->charid_);
    std::swap(pubcharid_, other->pubcharid_);
    std::swap(areacode_, other->areacode_);
    std::swap(name_, other->name_);
    std::swap(level_, other->level_);
    std::swap(viplv_, other->viplv_);
    std::swap(job_, other->job_);
    std::swap(sex_, other->sex_);
    std::swap(battlepower_, other->battlepower_);
    std::swap(photoid_, other->photoid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRankInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRankInfo_descriptor_;
  metadata.reflection = stRankInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stHeroListResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stHeroListResult_ProtoModID_descriptor_;
}
bool stHeroListResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stHeroListResult_ProtoModID stHeroListResult::ModID;
const stHeroListResult_ProtoModID stHeroListResult::ProtoModID_MIN;
const stHeroListResult_ProtoModID stHeroListResult::ProtoModID_MAX;
const int stHeroListResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stHeroListResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stHeroListResult_ProtoFunID_descriptor_;
}
bool stHeroListResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 89:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stHeroListResult_ProtoFunID stHeroListResult::FunID;
const stHeroListResult_ProtoFunID stHeroListResult::ProtoFunID_MIN;
const stHeroListResult_ProtoFunID stHeroListResult::ProtoFunID_MAX;
const int stHeroListResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stHeroListResult::kUserFieldNumber;
#endif  // !_MSC_VER

stHeroListResult::stHeroListResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stHeroListResult::InitAsDefaultInstance() {
}

stHeroListResult::stHeroListResult(const stHeroListResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stHeroListResult::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stHeroListResult::~stHeroListResult() {
  SharedDtor();
}

void stHeroListResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stHeroListResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stHeroListResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stHeroListResult_descriptor_;
}

const stHeroListResult& stHeroListResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stHeroListResult* stHeroListResult::default_instance_ = NULL;

stHeroListResult* stHeroListResult::New() const {
  return new stHeroListResult;
}

void stHeroListResult::Clear() {
  user_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stHeroListResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SortProto.stRankInfo user = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_user()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_user;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stHeroListResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .SortProto.stRankInfo user = 1;
  for (int i = 0; i < this->user_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->user(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stHeroListResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .SortProto.stRankInfo user = 1;
  for (int i = 0; i < this->user_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->user(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stHeroListResult::ByteSize() const {
  int total_size = 0;

  // repeated .SortProto.stRankInfo user = 1;
  total_size += 1 * this->user_size();
  for (int i = 0; i < this->user_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->user(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stHeroListResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stHeroListResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stHeroListResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stHeroListResult::MergeFrom(const stHeroListResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_.MergeFrom(from.user_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stHeroListResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stHeroListResult::CopyFrom(const stHeroListResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stHeroListResult::IsInitialized() const {

  return true;
}

void stHeroListResult::Swap(stHeroListResult* other) {
  if (other != this) {
    user_.Swap(&other->user_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stHeroListResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stHeroListResult_descriptor_;
  metadata.reflection = stHeroListResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqRegister_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqRegister_ProtoModID_descriptor_;
}
bool stReqRegister_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqRegister_ProtoModID stReqRegister::ModID;
const stReqRegister_ProtoModID stReqRegister::ProtoModID_MIN;
const stReqRegister_ProtoModID stReqRegister::ProtoModID_MAX;
const int stReqRegister::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqRegister_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqRegister_ProtoFunID_descriptor_;
}
bool stReqRegister_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 90:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqRegister_ProtoFunID stReqRegister::FunID;
const stReqRegister_ProtoFunID stReqRegister::ProtoFunID_MIN;
const stReqRegister_ProtoFunID stReqRegister::ProtoFunID_MAX;
const int stReqRegister::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqRegister::kCharIDFieldNumber;
#endif  // !_MSC_VER

stReqRegister::stReqRegister()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqRegister::InitAsDefaultInstance() {
}

stReqRegister::stReqRegister(const stReqRegister& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqRegister::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqRegister::~stReqRegister() {
  SharedDtor();
}

void stReqRegister::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqRegister::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqRegister::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqRegister_descriptor_;
}

const stReqRegister& stReqRegister::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stReqRegister* stReqRegister::default_instance_ = NULL;

stReqRegister* stReqRegister::New() const {
  return new stReqRegister;
}

void stReqRegister::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqRegister::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqRegister::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqRegister::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqRegister::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqRegister::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqRegister* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqRegister*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqRegister::MergeFrom(const stReqRegister& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqRegister::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqRegister::CopyFrom(const stReqRegister& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqRegister::IsInitialized() const {

  return true;
}

void stReqRegister::Swap(stReqRegister* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqRegister::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqRegister_descriptor_;
  metadata.reflection = stReqRegister_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRegisrerResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRegisrerResult_ProtoModID_descriptor_;
}
bool stRegisrerResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRegisrerResult_ProtoModID stRegisrerResult::ModID;
const stRegisrerResult_ProtoModID stRegisrerResult::ProtoModID_MIN;
const stRegisrerResult_ProtoModID stRegisrerResult::ProtoModID_MAX;
const int stRegisrerResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRegisrerResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRegisrerResult_ProtoFunID_descriptor_;
}
bool stRegisrerResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 91:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRegisrerResult_ProtoFunID stRegisrerResult::FunID;
const stRegisrerResult_ProtoFunID stRegisrerResult::ProtoFunID_MIN;
const stRegisrerResult_ProtoFunID stRegisrerResult::ProtoFunID_MAX;
const int stRegisrerResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRegisrerResult::kNumberFieldNumber;
#endif  // !_MSC_VER

stRegisrerResult::stRegisrerResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRegisrerResult::InitAsDefaultInstance() {
}

stRegisrerResult::stRegisrerResult(const stRegisrerResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRegisrerResult::SharedCtor() {
  _cached_size_ = 0;
  number_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRegisrerResult::~stRegisrerResult() {
  SharedDtor();
}

void stRegisrerResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRegisrerResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRegisrerResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRegisrerResult_descriptor_;
}

const stRegisrerResult& stRegisrerResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stRegisrerResult* stRegisrerResult::default_instance_ = NULL;

stRegisrerResult* stRegisrerResult::New() const {
  return new stRegisrerResult;
}

void stRegisrerResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    number_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRegisrerResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 number = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_)));
          set_has_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRegisrerResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 number = 1;
  if (has_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->number(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRegisrerResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 number = 1;
  if (has_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->number(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRegisrerResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 number = 1;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->number());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRegisrerResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRegisrerResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRegisrerResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRegisrerResult::MergeFrom(const stRegisrerResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_number()) {
      set_number(from.number());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRegisrerResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRegisrerResult::CopyFrom(const stRegisrerResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRegisrerResult::IsInitialized() const {

  return true;
}

void stRegisrerResult::Swap(stRegisrerResult* other) {
  if (other != this) {
    std::swap(number_, other->number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRegisrerResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRegisrerResult_descriptor_;
  metadata.reflection = stRegisrerResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stArenaResultNotify_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stArenaResultNotify_eResult_descriptor_;
}
bool stArenaResultNotify_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stArenaResultNotify_eResult stArenaResultNotify::WIN;
const stArenaResultNotify_eResult stArenaResultNotify::LOSE;
const stArenaResultNotify_eResult stArenaResultNotify::TIMEOUT;
const stArenaResultNotify_eResult stArenaResultNotify::eResult_MIN;
const stArenaResultNotify_eResult stArenaResultNotify::eResult_MAX;
const int stArenaResultNotify::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stArenaResultNotify_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stArenaResultNotify_ProtoModID_descriptor_;
}
bool stArenaResultNotify_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stArenaResultNotify_ProtoModID stArenaResultNotify::ModID;
const stArenaResultNotify_ProtoModID stArenaResultNotify::ProtoModID_MIN;
const stArenaResultNotify_ProtoModID stArenaResultNotify::ProtoModID_MAX;
const int stArenaResultNotify::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stArenaResultNotify_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stArenaResultNotify_ProtoFunID_descriptor_;
}
bool stArenaResultNotify_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 92:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stArenaResultNotify_ProtoFunID stArenaResultNotify::FunID;
const stArenaResultNotify_ProtoFunID stArenaResultNotify::ProtoFunID_MIN;
const stArenaResultNotify_ProtoFunID stArenaResultNotify::ProtoFunID_MAX;
const int stArenaResultNotify::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stArenaResultNotify::kResultFieldNumber;
#endif  // !_MSC_VER

stArenaResultNotify::stArenaResultNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stArenaResultNotify::InitAsDefaultInstance() {
}

stArenaResultNotify::stArenaResultNotify(const stArenaResultNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stArenaResultNotify::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stArenaResultNotify::~stArenaResultNotify() {
  SharedDtor();
}

void stArenaResultNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stArenaResultNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stArenaResultNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stArenaResultNotify_descriptor_;
}

const stArenaResultNotify& stArenaResultNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stArenaResultNotify* stArenaResultNotify::default_instance_ = NULL;

stArenaResultNotify* stArenaResultNotify::New() const {
  return new stArenaResultNotify;
}

void stArenaResultNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stArenaResultNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SortProto.stArenaResultNotify.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SortProto::stArenaResultNotify_eResult_IsValid(value)) {
            set_result(static_cast< ::SortProto::stArenaResultNotify_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stArenaResultNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SortProto.stArenaResultNotify.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stArenaResultNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SortProto.stArenaResultNotify.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stArenaResultNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SortProto.stArenaResultNotify.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stArenaResultNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stArenaResultNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stArenaResultNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stArenaResultNotify::MergeFrom(const stArenaResultNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stArenaResultNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stArenaResultNotify::CopyFrom(const stArenaResultNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stArenaResultNotify::IsInitialized() const {

  return true;
}

void stArenaResultNotify::Swap(stArenaResultNotify* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stArenaResultNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stArenaResultNotify_descriptor_;
  metadata.reflection = stArenaResultNotify_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqPubLogIn_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqPubLogIn_ProtoModID_descriptor_;
}
bool stReqPubLogIn_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqPubLogIn_ProtoModID stReqPubLogIn::ModID;
const stReqPubLogIn_ProtoModID stReqPubLogIn::ProtoModID_MIN;
const stReqPubLogIn_ProtoModID stReqPubLogIn::ProtoModID_MAX;
const int stReqPubLogIn::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqPubLogIn_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqPubLogIn_ProtoFunID_descriptor_;
}
bool stReqPubLogIn_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 93:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqPubLogIn_ProtoFunID stReqPubLogIn::FunID;
const stReqPubLogIn_ProtoFunID stReqPubLogIn::ProtoFunID_MIN;
const stReqPubLogIn_ProtoFunID stReqPubLogIn::ProtoFunID_MAX;
const int stReqPubLogIn::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqPubLogIn::kCharIDFieldNumber;
#endif  // !_MSC_VER

stReqPubLogIn::stReqPubLogIn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqPubLogIn::InitAsDefaultInstance() {
}

stReqPubLogIn::stReqPubLogIn(const stReqPubLogIn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqPubLogIn::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqPubLogIn::~stReqPubLogIn() {
  SharedDtor();
}

void stReqPubLogIn::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqPubLogIn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqPubLogIn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqPubLogIn_descriptor_;
}

const stReqPubLogIn& stReqPubLogIn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stReqPubLogIn* stReqPubLogIn::default_instance_ = NULL;

stReqPubLogIn* stReqPubLogIn::New() const {
  return new stReqPubLogIn;
}

void stReqPubLogIn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqPubLogIn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqPubLogIn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqPubLogIn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqPubLogIn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqPubLogIn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqPubLogIn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqPubLogIn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqPubLogIn::MergeFrom(const stReqPubLogIn& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqPubLogIn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqPubLogIn::CopyFrom(const stReqPubLogIn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqPubLogIn::IsInitialized() const {

  return true;
}

void stReqPubLogIn::Swap(stReqPubLogIn* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqPubLogIn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqPubLogIn_descriptor_;
  metadata.reflection = stReqPubLogIn_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqPubLogOut_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqPubLogOut_ProtoModID_descriptor_;
}
bool stReqPubLogOut_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqPubLogOut_ProtoModID stReqPubLogOut::ModID;
const stReqPubLogOut_ProtoModID stReqPubLogOut::ProtoModID_MIN;
const stReqPubLogOut_ProtoModID stReqPubLogOut::ProtoModID_MAX;
const int stReqPubLogOut::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqPubLogOut_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqPubLogOut_ProtoFunID_descriptor_;
}
bool stReqPubLogOut_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 94:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqPubLogOut_ProtoFunID stReqPubLogOut::FunID;
const stReqPubLogOut_ProtoFunID stReqPubLogOut::ProtoFunID_MIN;
const stReqPubLogOut_ProtoFunID stReqPubLogOut::ProtoFunID_MAX;
const int stReqPubLogOut::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqPubLogOut::kCharIDFieldNumber;
#endif  // !_MSC_VER

stReqPubLogOut::stReqPubLogOut()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqPubLogOut::InitAsDefaultInstance() {
}

stReqPubLogOut::stReqPubLogOut(const stReqPubLogOut& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqPubLogOut::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqPubLogOut::~stReqPubLogOut() {
  SharedDtor();
}

void stReqPubLogOut::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqPubLogOut::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqPubLogOut::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqPubLogOut_descriptor_;
}

const stReqPubLogOut& stReqPubLogOut::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stReqPubLogOut* stReqPubLogOut::default_instance_ = NULL;

stReqPubLogOut* stReqPubLogOut::New() const {
  return new stReqPubLogOut;
}

void stReqPubLogOut::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqPubLogOut::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqPubLogOut::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqPubLogOut::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqPubLogOut::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqPubLogOut::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqPubLogOut* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqPubLogOut*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqPubLogOut::MergeFrom(const stReqPubLogOut& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqPubLogOut::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqPubLogOut::CopyFrom(const stReqPubLogOut& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqPubLogOut::IsInitialized() const {

  return true;
}

void stReqPubLogOut::Swap(stReqPubLogOut* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqPubLogOut::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqPubLogOut_descriptor_;
  metadata.reflection = stReqPubLogOut_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRemoveModel_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRemoveModel_ProtoModID_descriptor_;
}
bool stRemoveModel_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRemoveModel_ProtoModID stRemoveModel::ModID;
const stRemoveModel_ProtoModID stRemoveModel::ProtoModID_MIN;
const stRemoveModel_ProtoModID stRemoveModel::ProtoModID_MAX;
const int stRemoveModel::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRemoveModel_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRemoveModel_ProtoFunID_descriptor_;
}
bool stRemoveModel_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 95:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRemoveModel_ProtoFunID stRemoveModel::FunID;
const stRemoveModel_ProtoFunID stRemoveModel::ProtoFunID_MIN;
const stRemoveModel_ProtoFunID stRemoveModel::ProtoFunID_MAX;
const int stRemoveModel::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRemoveModel::kCharIDFieldNumber;
#endif  // !_MSC_VER

stRemoveModel::stRemoveModel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRemoveModel::InitAsDefaultInstance() {
}

stRemoveModel::stRemoveModel(const stRemoveModel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRemoveModel::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRemoveModel::~stRemoveModel() {
  SharedDtor();
}

void stRemoveModel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRemoveModel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRemoveModel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRemoveModel_descriptor_;
}

const stRemoveModel& stRemoveModel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stRemoveModel* stRemoveModel::default_instance_ = NULL;

stRemoveModel* stRemoveModel::New() const {
  return new stRemoveModel;
}

void stRemoveModel::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRemoveModel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRemoveModel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRemoveModel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRemoveModel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRemoveModel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRemoveModel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRemoveModel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRemoveModel::MergeFrom(const stRemoveModel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRemoveModel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRemoveModel::CopyFrom(const stRemoveModel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRemoveModel::IsInitialized() const {

  return true;
}

void stRemoveModel::Swap(stRemoveModel* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRemoveModel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRemoveModel_descriptor_;
  metadata.reflection = stRemoveModel_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stLeitaiResultNotify_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stLeitaiResultNotify_eResult_descriptor_;
}
bool stLeitaiResultNotify_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stLeitaiResultNotify_eResult stLeitaiResultNotify::WIN;
const stLeitaiResultNotify_eResult stLeitaiResultNotify::LOSE;
const stLeitaiResultNotify_eResult stLeitaiResultNotify::TIMEOUT;
const stLeitaiResultNotify_eResult stLeitaiResultNotify::eResult_MIN;
const stLeitaiResultNotify_eResult stLeitaiResultNotify::eResult_MAX;
const int stLeitaiResultNotify::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stLeitaiResultNotify_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stLeitaiResultNotify_ProtoModID_descriptor_;
}
bool stLeitaiResultNotify_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stLeitaiResultNotify_ProtoModID stLeitaiResultNotify::ModID;
const stLeitaiResultNotify_ProtoModID stLeitaiResultNotify::ProtoModID_MIN;
const stLeitaiResultNotify_ProtoModID stLeitaiResultNotify::ProtoModID_MAX;
const int stLeitaiResultNotify::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stLeitaiResultNotify_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stLeitaiResultNotify_ProtoFunID_descriptor_;
}
bool stLeitaiResultNotify_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 96:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stLeitaiResultNotify_ProtoFunID stLeitaiResultNotify::FunID;
const stLeitaiResultNotify_ProtoFunID stLeitaiResultNotify::ProtoFunID_MIN;
const stLeitaiResultNotify_ProtoFunID stLeitaiResultNotify::ProtoFunID_MAX;
const int stLeitaiResultNotify::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stLeitaiResultNotify::kResultFieldNumber;
#endif  // !_MSC_VER

stLeitaiResultNotify::stLeitaiResultNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stLeitaiResultNotify::InitAsDefaultInstance() {
}

stLeitaiResultNotify::stLeitaiResultNotify(const stLeitaiResultNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stLeitaiResultNotify::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stLeitaiResultNotify::~stLeitaiResultNotify() {
  SharedDtor();
}

void stLeitaiResultNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stLeitaiResultNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stLeitaiResultNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stLeitaiResultNotify_descriptor_;
}

const stLeitaiResultNotify& stLeitaiResultNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stLeitaiResultNotify* stLeitaiResultNotify::default_instance_ = NULL;

stLeitaiResultNotify* stLeitaiResultNotify::New() const {
  return new stLeitaiResultNotify;
}

void stLeitaiResultNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stLeitaiResultNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SortProto.stLeitaiResultNotify.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SortProto::stLeitaiResultNotify_eResult_IsValid(value)) {
            set_result(static_cast< ::SortProto::stLeitaiResultNotify_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stLeitaiResultNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SortProto.stLeitaiResultNotify.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stLeitaiResultNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SortProto.stLeitaiResultNotify.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stLeitaiResultNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SortProto.stLeitaiResultNotify.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stLeitaiResultNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stLeitaiResultNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stLeitaiResultNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stLeitaiResultNotify::MergeFrom(const stLeitaiResultNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stLeitaiResultNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stLeitaiResultNotify::CopyFrom(const stLeitaiResultNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stLeitaiResultNotify::IsInitialized() const {

  return true;
}

void stLeitaiResultNotify::Swap(stLeitaiResultNotify* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stLeitaiResultNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stLeitaiResultNotify_descriptor_;
  metadata.reflection = stLeitaiResultNotify_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqRedPoint_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqRedPoint_ProtoModID_descriptor_;
}
bool stReqRedPoint_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqRedPoint_ProtoModID stReqRedPoint::ModID;
const stReqRedPoint_ProtoModID stReqRedPoint::ProtoModID_MIN;
const stReqRedPoint_ProtoModID stReqRedPoint::ProtoModID_MAX;
const int stReqRedPoint::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqRedPoint_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqRedPoint_ProtoFunID_descriptor_;
}
bool stReqRedPoint_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 97:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqRedPoint_ProtoFunID stReqRedPoint::FunID;
const stReqRedPoint_ProtoFunID stReqRedPoint::ProtoFunID_MIN;
const stReqRedPoint_ProtoFunID stReqRedPoint::ProtoFunID_MAX;
const int stReqRedPoint::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqRedPoint::kCharIDFieldNumber;
#endif  // !_MSC_VER

stReqRedPoint::stReqRedPoint()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqRedPoint::InitAsDefaultInstance() {
}

stReqRedPoint::stReqRedPoint(const stReqRedPoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqRedPoint::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqRedPoint::~stReqRedPoint() {
  SharedDtor();
}

void stReqRedPoint::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqRedPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqRedPoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqRedPoint_descriptor_;
}

const stReqRedPoint& stReqRedPoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stReqRedPoint* stReqRedPoint::default_instance_ = NULL;

stReqRedPoint* stReqRedPoint::New() const {
  return new stReqRedPoint;
}

void stReqRedPoint::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqRedPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqRedPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqRedPoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqRedPoint::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqRedPoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqRedPoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqRedPoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqRedPoint::MergeFrom(const stReqRedPoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqRedPoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqRedPoint::CopyFrom(const stReqRedPoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqRedPoint::IsInitialized() const {

  return true;
}

void stReqRedPoint::Swap(stReqRedPoint* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqRedPoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqRedPoint_descriptor_;
  metadata.reflection = stReqRedPoint_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRedPointResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRedPointResult_ProtoModID_descriptor_;
}
bool stRedPointResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRedPointResult_ProtoModID stRedPointResult::ModID;
const stRedPointResult_ProtoModID stRedPointResult::ProtoModID_MIN;
const stRedPointResult_ProtoModID stRedPointResult::ProtoModID_MAX;
const int stRedPointResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRedPointResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRedPointResult_ProtoFunID_descriptor_;
}
bool stRedPointResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 98:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRedPointResult_ProtoFunID stRedPointResult::FunID;
const stRedPointResult_ProtoFunID stRedPointResult::ProtoFunID_MIN;
const stRedPointResult_ProtoFunID stRedPointResult::ProtoFunID_MAX;
const int stRedPointResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRedPointResult::kIsQualifiedFieldNumber;
const int stRedPointResult::kCanWorshipFieldNumber;
#endif  // !_MSC_VER

stRedPointResult::stRedPointResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRedPointResult::InitAsDefaultInstance() {
}

stRedPointResult::stRedPointResult(const stRedPointResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRedPointResult::SharedCtor() {
  _cached_size_ = 0;
  isqualified_ = false;
  canworship_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRedPointResult::~stRedPointResult() {
  SharedDtor();
}

void stRedPointResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRedPointResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRedPointResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRedPointResult_descriptor_;
}

const stRedPointResult& stRedPointResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stRedPointResult* stRedPointResult::default_instance_ = NULL;

stRedPointResult* stRedPointResult::New() const {
  return new stRedPointResult;
}

void stRedPointResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    isqualified_ = false;
    canworship_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRedPointResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool isQualified = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isqualified_)));
          set_has_isqualified();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_canWorship;
        break;
      }

      // optional bool canWorship = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_canWorship:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &canworship_)));
          set_has_canworship();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRedPointResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool isQualified = 1;
  if (has_isqualified()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isqualified(), output);
  }

  // optional bool canWorship = 2;
  if (has_canworship()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->canworship(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRedPointResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool isQualified = 1;
  if (has_isqualified()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isqualified(), target);
  }

  // optional bool canWorship = 2;
  if (has_canworship()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->canworship(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRedPointResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool isQualified = 1;
    if (has_isqualified()) {
      total_size += 1 + 1;
    }

    // optional bool canWorship = 2;
    if (has_canworship()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRedPointResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRedPointResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRedPointResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRedPointResult::MergeFrom(const stRedPointResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isqualified()) {
      set_isqualified(from.isqualified());
    }
    if (from.has_canworship()) {
      set_canworship(from.canworship());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRedPointResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRedPointResult::CopyFrom(const stRedPointResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRedPointResult::IsInitialized() const {

  return true;
}

void stRedPointResult::Swap(stRedPointResult* other) {
  if (other != this) {
    std::swap(isqualified_, other->isqualified_);
    std::swap(canworship_, other->canworship_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRedPointResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRedPointResult_descriptor_;
  metadata.reflection = stRedPointResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqDragonNest_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqDragonNest_ProtoModID_descriptor_;
}
bool stReqDragonNest_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqDragonNest_ProtoModID stReqDragonNest::ModID;
const stReqDragonNest_ProtoModID stReqDragonNest::ProtoModID_MIN;
const stReqDragonNest_ProtoModID stReqDragonNest::ProtoModID_MAX;
const int stReqDragonNest::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqDragonNest_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqDragonNest_ProtoFunID_descriptor_;
}
bool stReqDragonNest_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 99:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqDragonNest_ProtoFunID stReqDragonNest::FunID;
const stReqDragonNest_ProtoFunID stReqDragonNest::ProtoFunID_MIN;
const stReqDragonNest_ProtoFunID stReqDragonNest::ProtoFunID_MAX;
const int stReqDragonNest::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqDragonNest::kCharIDFieldNumber;
#endif  // !_MSC_VER

stReqDragonNest::stReqDragonNest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqDragonNest::InitAsDefaultInstance() {
}

stReqDragonNest::stReqDragonNest(const stReqDragonNest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqDragonNest::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqDragonNest::~stReqDragonNest() {
  SharedDtor();
}

void stReqDragonNest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqDragonNest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqDragonNest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqDragonNest_descriptor_;
}

const stReqDragonNest& stReqDragonNest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stReqDragonNest* stReqDragonNest::default_instance_ = NULL;

stReqDragonNest* stReqDragonNest::New() const {
  return new stReqDragonNest;
}

void stReqDragonNest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqDragonNest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqDragonNest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqDragonNest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqDragonNest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqDragonNest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqDragonNest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqDragonNest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqDragonNest::MergeFrom(const stReqDragonNest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqDragonNest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqDragonNest::CopyFrom(const stReqDragonNest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqDragonNest::IsInitialized() const {

  return true;
}

void stReqDragonNest::Swap(stReqDragonNest* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqDragonNest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqDragonNest_descriptor_;
  metadata.reflection = stReqDragonNest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRetDragonNest_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetDragonNest_ProtoModID_descriptor_;
}
bool stRetDragonNest_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetDragonNest_ProtoModID stRetDragonNest::ModID;
const stRetDragonNest_ProtoModID stRetDragonNest::ProtoModID_MIN;
const stRetDragonNest_ProtoModID stRetDragonNest::ProtoModID_MAX;
const int stRetDragonNest::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetDragonNest_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetDragonNest_ProtoFunID_descriptor_;
}
bool stRetDragonNest_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 100:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetDragonNest_ProtoFunID stRetDragonNest::FunID;
const stRetDragonNest_ProtoFunID stRetDragonNest::ProtoFunID_MIN;
const stRetDragonNest_ProtoFunID stRetDragonNest::ProtoFunID_MAX;
const int stRetDragonNest::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRetDragonNest::kUsedTimesFieldNumber;
const int stRetDragonNest::kMaxTimesFieldNumber;
const int stRetDragonNest::kResetTimesFieldNumber;
#endif  // !_MSC_VER

stRetDragonNest::stRetDragonNest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRetDragonNest::InitAsDefaultInstance() {
}

stRetDragonNest::stRetDragonNest(const stRetDragonNest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRetDragonNest::SharedCtor() {
  _cached_size_ = 0;
  usedtimes_ = 0u;
  maxtimes_ = 0u;
  resettimes_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRetDragonNest::~stRetDragonNest() {
  SharedDtor();
}

void stRetDragonNest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRetDragonNest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRetDragonNest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetDragonNest_descriptor_;
}

const stRetDragonNest& stRetDragonNest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stRetDragonNest* stRetDragonNest::default_instance_ = NULL;

stRetDragonNest* stRetDragonNest::New() const {
  return new stRetDragonNest;
}

void stRetDragonNest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    usedtimes_ = 0u;
    maxtimes_ = 0u;
    resettimes_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRetDragonNest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 usedTimes = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usedtimes_)));
          set_has_usedtimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_maxTimes;
        break;
      }

      // optional uint32 maxTimes = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxtimes_)));
          set_has_maxtimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_resetTimes;
        break;
      }

      // optional uint32 resetTimes = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_resetTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resettimes_)));
          set_has_resettimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRetDragonNest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 usedTimes = 1;
  if (has_usedtimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->usedtimes(), output);
  }

  // optional uint32 maxTimes = 2;
  if (has_maxtimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->maxtimes(), output);
  }

  // optional uint32 resetTimes = 3;
  if (has_resettimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->resettimes(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRetDragonNest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 usedTimes = 1;
  if (has_usedtimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->usedtimes(), target);
  }

  // optional uint32 maxTimes = 2;
  if (has_maxtimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->maxtimes(), target);
  }

  // optional uint32 resetTimes = 3;
  if (has_resettimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->resettimes(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRetDragonNest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 usedTimes = 1;
    if (has_usedtimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->usedtimes());
    }

    // optional uint32 maxTimes = 2;
    if (has_maxtimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxtimes());
    }

    // optional uint32 resetTimes = 3;
    if (has_resettimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->resettimes());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRetDragonNest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRetDragonNest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRetDragonNest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRetDragonNest::MergeFrom(const stRetDragonNest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_usedtimes()) {
      set_usedtimes(from.usedtimes());
    }
    if (from.has_maxtimes()) {
      set_maxtimes(from.maxtimes());
    }
    if (from.has_resettimes()) {
      set_resettimes(from.resettimes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRetDragonNest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRetDragonNest::CopyFrom(const stRetDragonNest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRetDragonNest::IsInitialized() const {

  return true;
}

void stRetDragonNest::Swap(stRetDragonNest* other) {
  if (other != this) {
    std::swap(usedtimes_, other->usedtimes_);
    std::swap(maxtimes_, other->maxtimes_);
    std::swap(resettimes_, other->resettimes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRetDragonNest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRetDragonNest_descriptor_;
  metadata.reflection = stRetDragonNest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqChallengeDragonNest_eDragonType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqChallengeDragonNest_eDragonType_descriptor_;
}
bool stReqChallengeDragonNest_eDragonType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqChallengeDragonNest_eDragonType stReqChallengeDragonNest::eDragon_Fire;
const stReqChallengeDragonNest_eDragonType stReqChallengeDragonNest::eDragon_Water;
const stReqChallengeDragonNest_eDragonType stReqChallengeDragonNest::eDragon_Soil;
const stReqChallengeDragonNest_eDragonType stReqChallengeDragonNest::eDragonType_MIN;
const stReqChallengeDragonNest_eDragonType stReqChallengeDragonNest::eDragonType_MAX;
const int stReqChallengeDragonNest::eDragonType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqChallengeDragonNest_eDifficultyType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqChallengeDragonNest_eDifficultyType_descriptor_;
}
bool stReqChallengeDragonNest_eDifficultyType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqChallengeDragonNest_eDifficultyType stReqChallengeDragonNest::eDifficulty_Common;
const stReqChallengeDragonNest_eDifficultyType stReqChallengeDragonNest::eDifficulty_Hard;
const stReqChallengeDragonNest_eDifficultyType stReqChallengeDragonNest::eDifficulty_Horrible;
const stReqChallengeDragonNest_eDifficultyType stReqChallengeDragonNest::eDifficulty_EndDay;
const stReqChallengeDragonNest_eDifficultyType stReqChallengeDragonNest::eDifficulty_Hell;
const stReqChallengeDragonNest_eDifficultyType stReqChallengeDragonNest::eDifficultyType_MIN;
const stReqChallengeDragonNest_eDifficultyType stReqChallengeDragonNest::eDifficultyType_MAX;
const int stReqChallengeDragonNest::eDifficultyType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqChallengeDragonNest_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqChallengeDragonNest_ProtoModID_descriptor_;
}
bool stReqChallengeDragonNest_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqChallengeDragonNest_ProtoModID stReqChallengeDragonNest::ModID;
const stReqChallengeDragonNest_ProtoModID stReqChallengeDragonNest::ProtoModID_MIN;
const stReqChallengeDragonNest_ProtoModID stReqChallengeDragonNest::ProtoModID_MAX;
const int stReqChallengeDragonNest::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqChallengeDragonNest_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqChallengeDragonNest_ProtoFunID_descriptor_;
}
bool stReqChallengeDragonNest_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 101:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqChallengeDragonNest_ProtoFunID stReqChallengeDragonNest::FunID;
const stReqChallengeDragonNest_ProtoFunID stReqChallengeDragonNest::ProtoFunID_MIN;
const stReqChallengeDragonNest_ProtoFunID stReqChallengeDragonNest::ProtoFunID_MAX;
const int stReqChallengeDragonNest::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqChallengeDragonNest::kLevelIdFieldNumber;
#endif  // !_MSC_VER

stReqChallengeDragonNest::stReqChallengeDragonNest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqChallengeDragonNest::InitAsDefaultInstance() {
}

stReqChallengeDragonNest::stReqChallengeDragonNest(const stReqChallengeDragonNest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqChallengeDragonNest::SharedCtor() {
  _cached_size_ = 0;
  levelid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqChallengeDragonNest::~stReqChallengeDragonNest() {
  SharedDtor();
}

void stReqChallengeDragonNest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqChallengeDragonNest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqChallengeDragonNest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqChallengeDragonNest_descriptor_;
}

const stReqChallengeDragonNest& stReqChallengeDragonNest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stReqChallengeDragonNest* stReqChallengeDragonNest::default_instance_ = NULL;

stReqChallengeDragonNest* stReqChallengeDragonNest::New() const {
  return new stReqChallengeDragonNest;
}

void stReqChallengeDragonNest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    levelid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqChallengeDragonNest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 levelId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &levelid_)));
          set_has_levelid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqChallengeDragonNest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 levelId = 1;
  if (has_levelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->levelid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqChallengeDragonNest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 levelId = 1;
  if (has_levelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->levelid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqChallengeDragonNest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 levelId = 1;
    if (has_levelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->levelid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqChallengeDragonNest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqChallengeDragonNest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqChallengeDragonNest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqChallengeDragonNest::MergeFrom(const stReqChallengeDragonNest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_levelid()) {
      set_levelid(from.levelid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqChallengeDragonNest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqChallengeDragonNest::CopyFrom(const stReqChallengeDragonNest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqChallengeDragonNest::IsInitialized() const {

  return true;
}

void stReqChallengeDragonNest::Swap(stReqChallengeDragonNest* other) {
  if (other != this) {
    std::swap(levelid_, other->levelid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqChallengeDragonNest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqChallengeDragonNest_descriptor_;
  metadata.reflection = stReqChallengeDragonNest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRetChallengeDragonNest_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetChallengeDragonNest_eResult_descriptor_;
}
bool stRetChallengeDragonNest_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetChallengeDragonNest_eResult stRetChallengeDragonNest::eSuccess;
const stRetChallengeDragonNest_eResult stRetChallengeDragonNest::eLvl_Id_Not_Exist;
const stRetChallengeDragonNest_eResult stRetChallengeDragonNest::eTime_not_Open;
const stRetChallengeDragonNest_eResult stRetChallengeDragonNest::eLess_Of_Challenge_Time;
const stRetChallengeDragonNest_eResult stRetChallengeDragonNest::eLess_Of_Sp;
const stRetChallengeDragonNest_eResult stRetChallengeDragonNest::eLess_Of_Lilian;
const stRetChallengeDragonNest_eResult stRetChallengeDragonNest::eLvl_Limit;
const stRetChallengeDragonNest_eResult stRetChallengeDragonNest::eBag_Full;
const stRetChallengeDragonNest_eResult stRetChallengeDragonNest::ePre_Lvl_Id_Not_Pass;
const stRetChallengeDragonNest_eResult stRetChallengeDragonNest::ePre_Lvl_Id_Not_Exists;
const stRetChallengeDragonNest_eResult stRetChallengeDragonNest::eResult_MIN;
const stRetChallengeDragonNest_eResult stRetChallengeDragonNest::eResult_MAX;
const int stRetChallengeDragonNest::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetChallengeDragonNest_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetChallengeDragonNest_ProtoModID_descriptor_;
}
bool stRetChallengeDragonNest_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetChallengeDragonNest_ProtoModID stRetChallengeDragonNest::ModID;
const stRetChallengeDragonNest_ProtoModID stRetChallengeDragonNest::ProtoModID_MIN;
const stRetChallengeDragonNest_ProtoModID stRetChallengeDragonNest::ProtoModID_MAX;
const int stRetChallengeDragonNest::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetChallengeDragonNest_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetChallengeDragonNest_ProtoFunID_descriptor_;
}
bool stRetChallengeDragonNest_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 102:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetChallengeDragonNest_ProtoFunID stRetChallengeDragonNest::FunID;
const stRetChallengeDragonNest_ProtoFunID stRetChallengeDragonNest::ProtoFunID_MIN;
const stRetChallengeDragonNest_ProtoFunID stRetChallengeDragonNest::ProtoFunID_MAX;
const int stRetChallengeDragonNest::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRetChallengeDragonNest::kLevelIdFieldNumber;
const int stRetChallengeDragonNest::kResultFieldNumber;
#endif  // !_MSC_VER

stRetChallengeDragonNest::stRetChallengeDragonNest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRetChallengeDragonNest::InitAsDefaultInstance() {
}

stRetChallengeDragonNest::stRetChallengeDragonNest(const stRetChallengeDragonNest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRetChallengeDragonNest::SharedCtor() {
  _cached_size_ = 0;
  levelid_ = 0u;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRetChallengeDragonNest::~stRetChallengeDragonNest() {
  SharedDtor();
}

void stRetChallengeDragonNest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRetChallengeDragonNest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRetChallengeDragonNest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetChallengeDragonNest_descriptor_;
}

const stRetChallengeDragonNest& stRetChallengeDragonNest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stRetChallengeDragonNest* stRetChallengeDragonNest::default_instance_ = NULL;

stRetChallengeDragonNest* stRetChallengeDragonNest::New() const {
  return new stRetChallengeDragonNest;
}

void stRetChallengeDragonNest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    levelid_ = 0u;
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRetChallengeDragonNest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 levelId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &levelid_)));
          set_has_levelid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .SortProto.stRetChallengeDragonNest.eResult result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SortProto::stRetChallengeDragonNest_eResult_IsValid(value)) {
            set_result(static_cast< ::SortProto::stRetChallengeDragonNest_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRetChallengeDragonNest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 levelId = 1;
  if (has_levelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->levelid(), output);
  }

  // optional .SortProto.stRetChallengeDragonNest.eResult result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRetChallengeDragonNest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 levelId = 1;
  if (has_levelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->levelid(), target);
  }

  // optional .SortProto.stRetChallengeDragonNest.eResult result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRetChallengeDragonNest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 levelId = 1;
    if (has_levelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->levelid());
    }

    // optional .SortProto.stRetChallengeDragonNest.eResult result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRetChallengeDragonNest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRetChallengeDragonNest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRetChallengeDragonNest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRetChallengeDragonNest::MergeFrom(const stRetChallengeDragonNest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_levelid()) {
      set_levelid(from.levelid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRetChallengeDragonNest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRetChallengeDragonNest::CopyFrom(const stRetChallengeDragonNest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRetChallengeDragonNest::IsInitialized() const {

  return true;
}

void stRetChallengeDragonNest::Swap(stRetChallengeDragonNest* other) {
  if (other != this) {
    std::swap(levelid_, other->levelid_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRetChallengeDragonNest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRetChallengeDragonNest_descriptor_;
  metadata.reflection = stRetChallengeDragonNest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqResetChallengeDragonNest_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqResetChallengeDragonNest_ProtoModID_descriptor_;
}
bool stReqResetChallengeDragonNest_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqResetChallengeDragonNest_ProtoModID stReqResetChallengeDragonNest::ModID;
const stReqResetChallengeDragonNest_ProtoModID stReqResetChallengeDragonNest::ProtoModID_MIN;
const stReqResetChallengeDragonNest_ProtoModID stReqResetChallengeDragonNest::ProtoModID_MAX;
const int stReqResetChallengeDragonNest::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqResetChallengeDragonNest_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqResetChallengeDragonNest_ProtoFunID_descriptor_;
}
bool stReqResetChallengeDragonNest_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 103:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqResetChallengeDragonNest_ProtoFunID stReqResetChallengeDragonNest::FunID;
const stReqResetChallengeDragonNest_ProtoFunID stReqResetChallengeDragonNest::ProtoFunID_MIN;
const stReqResetChallengeDragonNest_ProtoFunID stReqResetChallengeDragonNest::ProtoFunID_MAX;
const int stReqResetChallengeDragonNest::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqResetChallengeDragonNest::kCharIDFieldNumber;
#endif  // !_MSC_VER

stReqResetChallengeDragonNest::stReqResetChallengeDragonNest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqResetChallengeDragonNest::InitAsDefaultInstance() {
}

stReqResetChallengeDragonNest::stReqResetChallengeDragonNest(const stReqResetChallengeDragonNest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqResetChallengeDragonNest::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqResetChallengeDragonNest::~stReqResetChallengeDragonNest() {
  SharedDtor();
}

void stReqResetChallengeDragonNest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqResetChallengeDragonNest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqResetChallengeDragonNest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqResetChallengeDragonNest_descriptor_;
}

const stReqResetChallengeDragonNest& stReqResetChallengeDragonNest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stReqResetChallengeDragonNest* stReqResetChallengeDragonNest::default_instance_ = NULL;

stReqResetChallengeDragonNest* stReqResetChallengeDragonNest::New() const {
  return new stReqResetChallengeDragonNest;
}

void stReqResetChallengeDragonNest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqResetChallengeDragonNest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqResetChallengeDragonNest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 CharID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqResetChallengeDragonNest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqResetChallengeDragonNest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqResetChallengeDragonNest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqResetChallengeDragonNest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqResetChallengeDragonNest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqResetChallengeDragonNest::MergeFrom(const stReqResetChallengeDragonNest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqResetChallengeDragonNest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqResetChallengeDragonNest::CopyFrom(const stReqResetChallengeDragonNest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqResetChallengeDragonNest::IsInitialized() const {

  return true;
}

void stReqResetChallengeDragonNest::Swap(stReqResetChallengeDragonNest* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqResetChallengeDragonNest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqResetChallengeDragonNest_descriptor_;
  metadata.reflection = stReqResetChallengeDragonNest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRetResetChallengeDragonNest_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetResetChallengeDragonNest_eResult_descriptor_;
}
bool stRetResetChallengeDragonNest_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetResetChallengeDragonNest_eResult stRetResetChallengeDragonNest::eSuccess;
const stRetResetChallengeDragonNest_eResult stRetResetChallengeDragonNest::eLess_of_Diamond;
const stRetResetChallengeDragonNest_eResult stRetResetChallengeDragonNest::eTimes_Remain;
const stRetResetChallengeDragonNest_eResult stRetResetChallengeDragonNest::eResult_MIN;
const stRetResetChallengeDragonNest_eResult stRetResetChallengeDragonNest::eResult_MAX;
const int stRetResetChallengeDragonNest::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetResetChallengeDragonNest_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetResetChallengeDragonNest_ProtoModID_descriptor_;
}
bool stRetResetChallengeDragonNest_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetResetChallengeDragonNest_ProtoModID stRetResetChallengeDragonNest::ModID;
const stRetResetChallengeDragonNest_ProtoModID stRetResetChallengeDragonNest::ProtoModID_MIN;
const stRetResetChallengeDragonNest_ProtoModID stRetResetChallengeDragonNest::ProtoModID_MAX;
const int stRetResetChallengeDragonNest::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetResetChallengeDragonNest_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetResetChallengeDragonNest_ProtoFunID_descriptor_;
}
bool stRetResetChallengeDragonNest_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 104:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetResetChallengeDragonNest_ProtoFunID stRetResetChallengeDragonNest::FunID;
const stRetResetChallengeDragonNest_ProtoFunID stRetResetChallengeDragonNest::ProtoFunID_MIN;
const stRetResetChallengeDragonNest_ProtoFunID stRetResetChallengeDragonNest::ProtoFunID_MAX;
const int stRetResetChallengeDragonNest::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRetResetChallengeDragonNest::kResultFieldNumber;
#endif  // !_MSC_VER

stRetResetChallengeDragonNest::stRetResetChallengeDragonNest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRetResetChallengeDragonNest::InitAsDefaultInstance() {
}

stRetResetChallengeDragonNest::stRetResetChallengeDragonNest(const stRetResetChallengeDragonNest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRetResetChallengeDragonNest::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRetResetChallengeDragonNest::~stRetResetChallengeDragonNest() {
  SharedDtor();
}

void stRetResetChallengeDragonNest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRetResetChallengeDragonNest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRetResetChallengeDragonNest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetResetChallengeDragonNest_descriptor_;
}

const stRetResetChallengeDragonNest& stRetResetChallengeDragonNest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stRetResetChallengeDragonNest* stRetResetChallengeDragonNest::default_instance_ = NULL;

stRetResetChallengeDragonNest* stRetResetChallengeDragonNest::New() const {
  return new stRetResetChallengeDragonNest;
}

void stRetResetChallengeDragonNest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRetResetChallengeDragonNest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SortProto.stRetResetChallengeDragonNest.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SortProto::stRetResetChallengeDragonNest_eResult_IsValid(value)) {
            set_result(static_cast< ::SortProto::stRetResetChallengeDragonNest_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRetResetChallengeDragonNest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SortProto.stRetResetChallengeDragonNest.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRetResetChallengeDragonNest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SortProto.stRetResetChallengeDragonNest.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRetResetChallengeDragonNest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SortProto.stRetResetChallengeDragonNest.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRetResetChallengeDragonNest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRetResetChallengeDragonNest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRetResetChallengeDragonNest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRetResetChallengeDragonNest::MergeFrom(const stRetResetChallengeDragonNest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRetResetChallengeDragonNest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRetResetChallengeDragonNest::CopyFrom(const stRetResetChallengeDragonNest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRetResetChallengeDragonNest::IsInitialized() const {

  return true;
}

void stRetResetChallengeDragonNest::Swap(stRetResetChallengeDragonNest* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRetResetChallengeDragonNest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRetResetChallengeDragonNest_descriptor_;
  metadata.reflection = stRetResetChallengeDragonNest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqEnterResBattle_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqEnterResBattle_ProtoModID_descriptor_;
}
bool stReqEnterResBattle_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqEnterResBattle_ProtoModID stReqEnterResBattle::ModID;
const stReqEnterResBattle_ProtoModID stReqEnterResBattle::ProtoModID_MIN;
const stReqEnterResBattle_ProtoModID stReqEnterResBattle::ProtoModID_MAX;
const int stReqEnterResBattle::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqEnterResBattle_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqEnterResBattle_ProtoFunID_descriptor_;
}
bool stReqEnterResBattle_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 105:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqEnterResBattle_ProtoFunID stReqEnterResBattle::FunID;
const stReqEnterResBattle_ProtoFunID stReqEnterResBattle::ProtoFunID_MIN;
const stReqEnterResBattle_ProtoFunID stReqEnterResBattle::ProtoFunID_MAX;
const int stReqEnterResBattle::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqEnterResBattle::kCharIdFieldNumber;
const int stReqEnterResBattle::kCopyMapLevelFieldNumber;
#endif  // !_MSC_VER

stReqEnterResBattle::stReqEnterResBattle()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqEnterResBattle::InitAsDefaultInstance() {
}

stReqEnterResBattle::stReqEnterResBattle(const stReqEnterResBattle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqEnterResBattle::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  copymaplevel_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqEnterResBattle::~stReqEnterResBattle() {
  SharedDtor();
}

void stReqEnterResBattle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqEnterResBattle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqEnterResBattle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqEnterResBattle_descriptor_;
}

const stReqEnterResBattle& stReqEnterResBattle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stReqEnterResBattle* stReqEnterResBattle::default_instance_ = NULL;

stReqEnterResBattle* stReqEnterResBattle::New() const {
  return new stReqEnterResBattle;
}

void stReqEnterResBattle::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    copymaplevel_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqEnterResBattle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_copyMapLevel;
        break;
      }

      // optional uint32 copyMapLevel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_copyMapLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &copymaplevel_)));
          set_has_copymaplevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqEnterResBattle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charId = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 copyMapLevel = 2;
  if (has_copymaplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->copymaplevel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqEnterResBattle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charId = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 copyMapLevel = 2;
  if (has_copymaplevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->copymaplevel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqEnterResBattle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charId = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 copyMapLevel = 2;
    if (has_copymaplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->copymaplevel());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqEnterResBattle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqEnterResBattle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqEnterResBattle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqEnterResBattle::MergeFrom(const stReqEnterResBattle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_copymaplevel()) {
      set_copymaplevel(from.copymaplevel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqEnterResBattle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqEnterResBattle::CopyFrom(const stReqEnterResBattle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqEnterResBattle::IsInitialized() const {

  return true;
}

void stReqEnterResBattle::Swap(stReqEnterResBattle* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(copymaplevel_, other->copymaplevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqEnterResBattle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqEnterResBattle_descriptor_;
  metadata.reflection = stReqEnterResBattle_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRetEnterResBattle_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetEnterResBattle_eResult_descriptor_;
}
bool stRetEnterResBattle_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetEnterResBattle_eResult stRetEnterResBattle::eSuccess;
const stRetEnterResBattle_eResult stRetEnterResBattle::eTime_Not_Open;
const stRetEnterResBattle_eResult stRetEnterResBattle::eNo_Such_Level;
const stRetEnterResBattle_eResult stRetEnterResBattle::eInner_Error;
const stRetEnterResBattle_eResult stRetEnterResBattle::eResult_MIN;
const stRetEnterResBattle_eResult stRetEnterResBattle::eResult_MAX;
const int stRetEnterResBattle::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetEnterResBattle_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetEnterResBattle_ProtoModID_descriptor_;
}
bool stRetEnterResBattle_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetEnterResBattle_ProtoModID stRetEnterResBattle::ModID;
const stRetEnterResBattle_ProtoModID stRetEnterResBattle::ProtoModID_MIN;
const stRetEnterResBattle_ProtoModID stRetEnterResBattle::ProtoModID_MAX;
const int stRetEnterResBattle::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetEnterResBattle_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetEnterResBattle_ProtoFunID_descriptor_;
}
bool stRetEnterResBattle_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 106:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetEnterResBattle_ProtoFunID stRetEnterResBattle::FunID;
const stRetEnterResBattle_ProtoFunID stRetEnterResBattle::ProtoFunID_MIN;
const stRetEnterResBattle_ProtoFunID stRetEnterResBattle::ProtoFunID_MAX;
const int stRetEnterResBattle::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRetEnterResBattle::kCopyMapLevelFieldNumber;
const int stRetEnterResBattle::kResultFieldNumber;
#endif  // !_MSC_VER

stRetEnterResBattle::stRetEnterResBattle()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRetEnterResBattle::InitAsDefaultInstance() {
}

stRetEnterResBattle::stRetEnterResBattle(const stRetEnterResBattle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRetEnterResBattle::SharedCtor() {
  _cached_size_ = 0;
  copymaplevel_ = 0u;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRetEnterResBattle::~stRetEnterResBattle() {
  SharedDtor();
}

void stRetEnterResBattle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRetEnterResBattle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRetEnterResBattle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetEnterResBattle_descriptor_;
}

const stRetEnterResBattle& stRetEnterResBattle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stRetEnterResBattle* stRetEnterResBattle::default_instance_ = NULL;

stRetEnterResBattle* stRetEnterResBattle::New() const {
  return new stRetEnterResBattle;
}

void stRetEnterResBattle::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    copymaplevel_ = 0u;
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRetEnterResBattle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 copyMapLevel = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &copymaplevel_)));
          set_has_copymaplevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .SortProto.stRetEnterResBattle.eResult result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SortProto::stRetEnterResBattle_eResult_IsValid(value)) {
            set_result(static_cast< ::SortProto::stRetEnterResBattle_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRetEnterResBattle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 copyMapLevel = 1;
  if (has_copymaplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->copymaplevel(), output);
  }

  // optional .SortProto.stRetEnterResBattle.eResult result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRetEnterResBattle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 copyMapLevel = 1;
  if (has_copymaplevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->copymaplevel(), target);
  }

  // optional .SortProto.stRetEnterResBattle.eResult result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRetEnterResBattle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 copyMapLevel = 1;
    if (has_copymaplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->copymaplevel());
    }

    // optional .SortProto.stRetEnterResBattle.eResult result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRetEnterResBattle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRetEnterResBattle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRetEnterResBattle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRetEnterResBattle::MergeFrom(const stRetEnterResBattle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_copymaplevel()) {
      set_copymaplevel(from.copymaplevel());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRetEnterResBattle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRetEnterResBattle::CopyFrom(const stRetEnterResBattle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRetEnterResBattle::IsInitialized() const {

  return true;
}

void stRetEnterResBattle::Swap(stRetEnterResBattle* other) {
  if (other != this) {
    std::swap(copymaplevel_, other->copymaplevel_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRetEnterResBattle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRetEnterResBattle_descriptor_;
  metadata.reflection = stRetEnterResBattle_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqCurResBattleGloryRank_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqCurResBattleGloryRank_ProtoModID_descriptor_;
}
bool stReqCurResBattleGloryRank_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqCurResBattleGloryRank_ProtoModID stReqCurResBattleGloryRank::ModID;
const stReqCurResBattleGloryRank_ProtoModID stReqCurResBattleGloryRank::ProtoModID_MIN;
const stReqCurResBattleGloryRank_ProtoModID stReqCurResBattleGloryRank::ProtoModID_MAX;
const int stReqCurResBattleGloryRank::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqCurResBattleGloryRank_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqCurResBattleGloryRank_ProtoFunID_descriptor_;
}
bool stReqCurResBattleGloryRank_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 107:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqCurResBattleGloryRank_ProtoFunID stReqCurResBattleGloryRank::FunID;
const stReqCurResBattleGloryRank_ProtoFunID stReqCurResBattleGloryRank::ProtoFunID_MIN;
const stReqCurResBattleGloryRank_ProtoFunID stReqCurResBattleGloryRank::ProtoFunID_MAX;
const int stReqCurResBattleGloryRank::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqCurResBattleGloryRank::kCharIdFieldNumber;
#endif  // !_MSC_VER

stReqCurResBattleGloryRank::stReqCurResBattleGloryRank()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqCurResBattleGloryRank::InitAsDefaultInstance() {
}

stReqCurResBattleGloryRank::stReqCurResBattleGloryRank(const stReqCurResBattleGloryRank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqCurResBattleGloryRank::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqCurResBattleGloryRank::~stReqCurResBattleGloryRank() {
  SharedDtor();
}

void stReqCurResBattleGloryRank::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqCurResBattleGloryRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqCurResBattleGloryRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqCurResBattleGloryRank_descriptor_;
}

const stReqCurResBattleGloryRank& stReqCurResBattleGloryRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stReqCurResBattleGloryRank* stReqCurResBattleGloryRank::default_instance_ = NULL;

stReqCurResBattleGloryRank* stReqCurResBattleGloryRank::New() const {
  return new stReqCurResBattleGloryRank;
}

void stReqCurResBattleGloryRank::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqCurResBattleGloryRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqCurResBattleGloryRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charId = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqCurResBattleGloryRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charId = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqCurResBattleGloryRank::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charId = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqCurResBattleGloryRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqCurResBattleGloryRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqCurResBattleGloryRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqCurResBattleGloryRank::MergeFrom(const stReqCurResBattleGloryRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqCurResBattleGloryRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqCurResBattleGloryRank::CopyFrom(const stReqCurResBattleGloryRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqCurResBattleGloryRank::IsInitialized() const {

  return true;
}

void stReqCurResBattleGloryRank::Swap(stReqCurResBattleGloryRank* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqCurResBattleGloryRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqCurResBattleGloryRank_descriptor_;
  metadata.reflection = stReqCurResBattleGloryRank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stResBattleGloryRankMemInfo::kRankFieldNumber;
const int stResBattleGloryRankMemInfo::kNameFieldNumber;
const int stResBattleGloryRankMemInfo::kCharIdFieldNumber;
const int stResBattleGloryRankMemInfo::kAreaCodeFieldNumber;
const int stResBattleGloryRankMemInfo::kKillNumFieldNumber;
const int stResBattleGloryRankMemInfo::kGloryValFieldNumber;
#endif  // !_MSC_VER

stResBattleGloryRankMemInfo::stResBattleGloryRankMemInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stResBattleGloryRankMemInfo::InitAsDefaultInstance() {
}

stResBattleGloryRankMemInfo::stResBattleGloryRankMemInfo(const stResBattleGloryRankMemInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stResBattleGloryRankMemInfo::SharedCtor() {
  _cached_size_ = 0;
  rank_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  charid_ = 0u;
  areacode_ = 0u;
  killnum_ = 0u;
  gloryval_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stResBattleGloryRankMemInfo::~stResBattleGloryRankMemInfo() {
  SharedDtor();
}

void stResBattleGloryRankMemInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void stResBattleGloryRankMemInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stResBattleGloryRankMemInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stResBattleGloryRankMemInfo_descriptor_;
}

const stResBattleGloryRankMemInfo& stResBattleGloryRankMemInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stResBattleGloryRankMemInfo* stResBattleGloryRankMemInfo::default_instance_ = NULL;

stResBattleGloryRankMemInfo* stResBattleGloryRankMemInfo::New() const {
  return new stResBattleGloryRankMemInfo;
}

void stResBattleGloryRankMemInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rank_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    charid_ = 0u;
    areacode_ = 0u;
    killnum_ = 0u;
    gloryval_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stResBattleGloryRankMemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 rank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_charId;
        break;
      }

      // optional uint32 charId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_areaCode;
        break;
      }

      // optional uint32 areaCode = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_areaCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &areacode_)));
          set_has_areacode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_killNum;
        break;
      }

      // optional uint32 killNum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_killNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &killnum_)));
          set_has_killnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_gloryVal;
        break;
      }

      // optional uint32 gloryVal = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gloryVal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gloryval_)));
          set_has_gloryval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stResBattleGloryRankMemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 rank = 1;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rank(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional uint32 charId = 3;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->charid(), output);
  }

  // optional uint32 areaCode = 4;
  if (has_areacode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->areacode(), output);
  }

  // optional uint32 killNum = 5;
  if (has_killnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->killnum(), output);
  }

  // optional uint32 gloryVal = 6;
  if (has_gloryval()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->gloryval(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stResBattleGloryRankMemInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 rank = 1;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rank(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional uint32 charId = 3;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->charid(), target);
  }

  // optional uint32 areaCode = 4;
  if (has_areacode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->areacode(), target);
  }

  // optional uint32 killNum = 5;
  if (has_killnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->killnum(), target);
  }

  // optional uint32 gloryVal = 6;
  if (has_gloryval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->gloryval(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stResBattleGloryRankMemInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 rank = 1;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 charId = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 areaCode = 4;
    if (has_areacode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->areacode());
    }

    // optional uint32 killNum = 5;
    if (has_killnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->killnum());
    }

    // optional uint32 gloryVal = 6;
    if (has_gloryval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gloryval());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stResBattleGloryRankMemInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stResBattleGloryRankMemInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stResBattleGloryRankMemInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stResBattleGloryRankMemInfo::MergeFrom(const stResBattleGloryRankMemInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_areacode()) {
      set_areacode(from.areacode());
    }
    if (from.has_killnum()) {
      set_killnum(from.killnum());
    }
    if (from.has_gloryval()) {
      set_gloryval(from.gloryval());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stResBattleGloryRankMemInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stResBattleGloryRankMemInfo::CopyFrom(const stResBattleGloryRankMemInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stResBattleGloryRankMemInfo::IsInitialized() const {

  return true;
}

void stResBattleGloryRankMemInfo::Swap(stResBattleGloryRankMemInfo* other) {
  if (other != this) {
    std::swap(rank_, other->rank_);
    std::swap(name_, other->name_);
    std::swap(charid_, other->charid_);
    std::swap(areacode_, other->areacode_);
    std::swap(killnum_, other->killnum_);
    std::swap(gloryval_, other->gloryval_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stResBattleGloryRankMemInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stResBattleGloryRankMemInfo_descriptor_;
  metadata.reflection = stResBattleGloryRankMemInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRetCurResBattleGloryRank_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetCurResBattleGloryRank_ProtoModID_descriptor_;
}
bool stRetCurResBattleGloryRank_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetCurResBattleGloryRank_ProtoModID stRetCurResBattleGloryRank::ModID;
const stRetCurResBattleGloryRank_ProtoModID stRetCurResBattleGloryRank::ProtoModID_MIN;
const stRetCurResBattleGloryRank_ProtoModID stRetCurResBattleGloryRank::ProtoModID_MAX;
const int stRetCurResBattleGloryRank::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetCurResBattleGloryRank_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetCurResBattleGloryRank_ProtoFunID_descriptor_;
}
bool stRetCurResBattleGloryRank_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 108:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetCurResBattleGloryRank_ProtoFunID stRetCurResBattleGloryRank::FunID;
const stRetCurResBattleGloryRank_ProtoFunID stRetCurResBattleGloryRank::ProtoFunID_MIN;
const stRetCurResBattleGloryRank_ProtoFunID stRetCurResBattleGloryRank::ProtoFunID_MAX;
const int stRetCurResBattleGloryRank::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRetCurResBattleGloryRank::kCharIdFieldNumber;
const int stRetCurResBattleGloryRank::kMemberFieldNumber;
#endif  // !_MSC_VER

stRetCurResBattleGloryRank::stRetCurResBattleGloryRank()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRetCurResBattleGloryRank::InitAsDefaultInstance() {
}

stRetCurResBattleGloryRank::stRetCurResBattleGloryRank(const stRetCurResBattleGloryRank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRetCurResBattleGloryRank::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRetCurResBattleGloryRank::~stRetCurResBattleGloryRank() {
  SharedDtor();
}

void stRetCurResBattleGloryRank::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRetCurResBattleGloryRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRetCurResBattleGloryRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetCurResBattleGloryRank_descriptor_;
}

const stRetCurResBattleGloryRank& stRetCurResBattleGloryRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stRetCurResBattleGloryRank* stRetCurResBattleGloryRank::default_instance_ = NULL;

stRetCurResBattleGloryRank* stRetCurResBattleGloryRank::New() const {
  return new stRetCurResBattleGloryRank;
}

void stRetCurResBattleGloryRank::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  member_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRetCurResBattleGloryRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_member;
        break;
      }

      // repeated .SortProto.stResBattleGloryRankMemInfo member = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_member:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_member()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_member;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRetCurResBattleGloryRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charId = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // repeated .SortProto.stResBattleGloryRankMemInfo member = 2;
  for (int i = 0; i < this->member_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->member(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRetCurResBattleGloryRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charId = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // repeated .SortProto.stResBattleGloryRankMemInfo member = 2;
  for (int i = 0; i < this->member_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->member(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRetCurResBattleGloryRank::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charId = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  // repeated .SortProto.stResBattleGloryRankMemInfo member = 2;
  total_size += 1 * this->member_size();
  for (int i = 0; i < this->member_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->member(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRetCurResBattleGloryRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRetCurResBattleGloryRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRetCurResBattleGloryRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRetCurResBattleGloryRank::MergeFrom(const stRetCurResBattleGloryRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  member_.MergeFrom(from.member_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRetCurResBattleGloryRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRetCurResBattleGloryRank::CopyFrom(const stRetCurResBattleGloryRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRetCurResBattleGloryRank::IsInitialized() const {

  return true;
}

void stRetCurResBattleGloryRank::Swap(stRetCurResBattleGloryRank* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    member_.Swap(&other->member_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRetCurResBattleGloryRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRetCurResBattleGloryRank_descriptor_;
  metadata.reflection = stRetCurResBattleGloryRank_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqResBattleRank_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqResBattleRank_ProtoModID_descriptor_;
}
bool stReqResBattleRank_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqResBattleRank_ProtoModID stReqResBattleRank::ModID;
const stReqResBattleRank_ProtoModID stReqResBattleRank::ProtoModID_MIN;
const stReqResBattleRank_ProtoModID stReqResBattleRank::ProtoModID_MAX;
const int stReqResBattleRank::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqResBattleRank_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqResBattleRank_ProtoFunID_descriptor_;
}
bool stReqResBattleRank_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 109:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqResBattleRank_ProtoFunID stReqResBattleRank::FunID;
const stReqResBattleRank_ProtoFunID stReqResBattleRank::ProtoFunID_MIN;
const stReqResBattleRank_ProtoFunID stReqResBattleRank::ProtoFunID_MAX;
const int stReqResBattleRank::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqResBattleRank::kCharIdFieldNumber;
#endif  // !_MSC_VER

stReqResBattleRank::stReqResBattleRank()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqResBattleRank::InitAsDefaultInstance() {
}

stReqResBattleRank::stReqResBattleRank(const stReqResBattleRank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqResBattleRank::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqResBattleRank::~stReqResBattleRank() {
  SharedDtor();
}

void stReqResBattleRank::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqResBattleRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqResBattleRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqResBattleRank_descriptor_;
}

const stReqResBattleRank& stReqResBattleRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stReqResBattleRank* stReqResBattleRank::default_instance_ = NULL;

stReqResBattleRank* stReqResBattleRank::New() const {
  return new stReqResBattleRank;
}

void stReqResBattleRank::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqResBattleRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqResBattleRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charId = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqResBattleRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charId = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqResBattleRank::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charId = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqResBattleRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqResBattleRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqResBattleRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqResBattleRank::MergeFrom(const stReqResBattleRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqResBattleRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqResBattleRank::CopyFrom(const stReqResBattleRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqResBattleRank::IsInitialized() const {

  return true;
}

void stReqResBattleRank::Swap(stReqResBattleRank* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqResBattleRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqResBattleRank_descriptor_;
  metadata.reflection = stReqResBattleRank_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRetResBattleRank_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetResBattleRank_ProtoModID_descriptor_;
}
bool stRetResBattleRank_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetResBattleRank_ProtoModID stRetResBattleRank::ModID;
const stRetResBattleRank_ProtoModID stRetResBattleRank::ProtoModID_MIN;
const stRetResBattleRank_ProtoModID stRetResBattleRank::ProtoModID_MAX;
const int stRetResBattleRank::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetResBattleRank_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetResBattleRank_ProtoFunID_descriptor_;
}
bool stRetResBattleRank_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 110:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetResBattleRank_ProtoFunID stRetResBattleRank::FunID;
const stRetResBattleRank_ProtoFunID stRetResBattleRank::ProtoFunID_MIN;
const stRetResBattleRank_ProtoFunID stRetResBattleRank::ProtoFunID_MAX;
const int stRetResBattleRank::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRetResBattleRank::kCharIdFieldNumber;
const int stRetResBattleRank::kMemberFieldNumber;
#endif  // !_MSC_VER

stRetResBattleRank::stRetResBattleRank()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRetResBattleRank::InitAsDefaultInstance() {
}

stRetResBattleRank::stRetResBattleRank(const stRetResBattleRank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRetResBattleRank::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRetResBattleRank::~stRetResBattleRank() {
  SharedDtor();
}

void stRetResBattleRank::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRetResBattleRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRetResBattleRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetResBattleRank_descriptor_;
}

const stRetResBattleRank& stRetResBattleRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stRetResBattleRank* stRetResBattleRank::default_instance_ = NULL;

stRetResBattleRank* stRetResBattleRank::New() const {
  return new stRetResBattleRank;
}

void stRetResBattleRank::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  member_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRetResBattleRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_member;
        break;
      }

      // repeated .SortProto.stResBattleGloryRankMemInfo member = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_member:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_member()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_member;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRetResBattleRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charId = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // repeated .SortProto.stResBattleGloryRankMemInfo member = 2;
  for (int i = 0; i < this->member_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->member(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRetResBattleRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charId = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // repeated .SortProto.stResBattleGloryRankMemInfo member = 2;
  for (int i = 0; i < this->member_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->member(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRetResBattleRank::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charId = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  // repeated .SortProto.stResBattleGloryRankMemInfo member = 2;
  total_size += 1 * this->member_size();
  for (int i = 0; i < this->member_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->member(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRetResBattleRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRetResBattleRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRetResBattleRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRetResBattleRank::MergeFrom(const stRetResBattleRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  member_.MergeFrom(from.member_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRetResBattleRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRetResBattleRank::CopyFrom(const stRetResBattleRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRetResBattleRank::IsInitialized() const {

  return true;
}

void stRetResBattleRank::Swap(stRetResBattleRank* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    member_.Swap(&other->member_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRetResBattleRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRetResBattleRank_descriptor_;
  metadata.reflection = stRetResBattleRank_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqResBattleKing_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqResBattleKing_ProtoModID_descriptor_;
}
bool stReqResBattleKing_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqResBattleKing_ProtoModID stReqResBattleKing::ModID;
const stReqResBattleKing_ProtoModID stReqResBattleKing::ProtoModID_MIN;
const stReqResBattleKing_ProtoModID stReqResBattleKing::ProtoModID_MAX;
const int stReqResBattleKing::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqResBattleKing_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqResBattleKing_ProtoFunID_descriptor_;
}
bool stReqResBattleKing_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 111:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqResBattleKing_ProtoFunID stReqResBattleKing::FunID;
const stReqResBattleKing_ProtoFunID stReqResBattleKing::ProtoFunID_MIN;
const stReqResBattleKing_ProtoFunID stReqResBattleKing::ProtoFunID_MAX;
const int stReqResBattleKing::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqResBattleKing::kCharIdFieldNumber;
#endif  // !_MSC_VER

stReqResBattleKing::stReqResBattleKing()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqResBattleKing::InitAsDefaultInstance() {
}

stReqResBattleKing::stReqResBattleKing(const stReqResBattleKing& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqResBattleKing::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqResBattleKing::~stReqResBattleKing() {
  SharedDtor();
}

void stReqResBattleKing::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqResBattleKing::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqResBattleKing::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqResBattleKing_descriptor_;
}

const stReqResBattleKing& stReqResBattleKing::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stReqResBattleKing* stReqResBattleKing::default_instance_ = NULL;

stReqResBattleKing* stReqResBattleKing::New() const {
  return new stReqResBattleKing;
}

void stReqResBattleKing::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqResBattleKing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqResBattleKing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charId = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqResBattleKing::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charId = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqResBattleKing::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charId = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqResBattleKing::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqResBattleKing* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqResBattleKing*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqResBattleKing::MergeFrom(const stReqResBattleKing& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqResBattleKing::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqResBattleKing::CopyFrom(const stReqResBattleKing& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqResBattleKing::IsInitialized() const {

  return true;
}

void stReqResBattleKing::Swap(stReqResBattleKing* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqResBattleKing::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqResBattleKing_descriptor_;
  metadata.reflection = stReqResBattleKing_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stResBattleRankMemInfo::kNameFieldNumber;
const int stResBattleRankMemInfo::kCharIDFieldNumber;
const int stResBattleRankMemInfo::kAreaCodeFieldNumber;
const int stResBattleRankMemInfo::kJobFieldNumber;
const int stResBattleRankMemInfo::kSexFieldNumber;
const int stResBattleRankMemInfo::kLevelFieldNumber;
const int stResBattleRankMemInfo::kBattlePowerFieldNumber;
const int stResBattleRankMemInfo::kKillNumFieldNumber;
const int stResBattleRankMemInfo::kEvenKillNumFieldNumber;
const int stResBattleRankMemInfo::kTotalKillNumFieldNumber;
const int stResBattleRankMemInfo::kGloryValFieldNumber;
const int stResBattleRankMemInfo::kProstatedNumFieldNumber;
const int stResBattleRankMemInfo::kHeadIDFieldNumber;
const int stResBattleRankMemInfo::kBodyIDFieldNumber;
const int stResBattleRankMemInfo::kWeaponIDFieldNumber;
const int stResBattleRankMemInfo::kCloackIDFieldNumber;
const int stResBattleRankMemInfo::kWingIDFieldNumber;
const int stResBattleRankMemInfo::kShoeIDFieldNumber;
const int stResBattleRankMemInfo::kFashionHairFieldNumber;
const int stResBattleRankMemInfo::kFashionFaceFieldNumber;
const int stResBattleRankMemInfo::kFashionBodyFieldNumber;
const int stResBattleRankMemInfo::kFashionWeaponFieldNumber;
const int stResBattleRankMemInfo::kFashionShoeFieldNumber;
const int stResBattleRankMemInfo::kFashionDecorationFieldNumber;
const int stResBattleRankMemInfo::kEffectIDFieldNumber;
const int stResBattleRankMemInfo::kWingBreakLvFieldNumber;
#endif  // !_MSC_VER

stResBattleRankMemInfo::stResBattleRankMemInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stResBattleRankMemInfo::InitAsDefaultInstance() {
}

stResBattleRankMemInfo::stResBattleRankMemInfo(const stResBattleRankMemInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stResBattleRankMemInfo::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  charid_ = 0u;
  areacode_ = 0u;
  job_ = 0u;
  sex_ = 0u;
  level_ = 0u;
  battlepower_ = 0u;
  killnum_ = 0u;
  evenkillnum_ = 0u;
  totalkillnum_ = 0u;
  gloryval_ = 0u;
  prostatednum_ = 0u;
  headid_ = 0u;
  bodyid_ = 0u;
  weaponid_ = 0u;
  cloackid_ = 0u;
  wingid_ = 0u;
  shoeid_ = 0u;
  fashionhair_ = 0u;
  fashionface_ = 0u;
  fashionbody_ = 0u;
  fashionweapon_ = 0u;
  fashionshoe_ = 0u;
  fashiondecoration_ = 0u;
  effectid_ = 0u;
  wingbreaklv_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stResBattleRankMemInfo::~stResBattleRankMemInfo() {
  SharedDtor();
}

void stResBattleRankMemInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void stResBattleRankMemInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stResBattleRankMemInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stResBattleRankMemInfo_descriptor_;
}

const stResBattleRankMemInfo& stResBattleRankMemInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stResBattleRankMemInfo* stResBattleRankMemInfo::default_instance_ = NULL;

stResBattleRankMemInfo* stResBattleRankMemInfo::New() const {
  return new stResBattleRankMemInfo;
}

void stResBattleRankMemInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    charid_ = 0u;
    areacode_ = 0u;
    job_ = 0u;
    sex_ = 0u;
    level_ = 0u;
    battlepower_ = 0u;
    killnum_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    evenkillnum_ = 0u;
    totalkillnum_ = 0u;
    gloryval_ = 0u;
    prostatednum_ = 0u;
    headid_ = 0u;
    bodyid_ = 0u;
    weaponid_ = 0u;
    cloackid_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    wingid_ = 0u;
    shoeid_ = 0u;
    fashionhair_ = 0u;
    fashionface_ = 0u;
    fashionbody_ = 0u;
    fashionweapon_ = 0u;
    fashionshoe_ = 0u;
    fashiondecoration_ = 0u;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    effectid_ = 0u;
    wingbreaklv_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stResBattleRankMemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_charID;
        break;
      }

      // optional uint32 charID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_areaCode;
        break;
      }

      // optional uint32 areaCode = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_areaCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &areacode_)));
          set_has_areacode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_job;
        break;
      }

      // optional uint32 job = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &job_)));
          set_has_job();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_sex;
        break;
      }

      // optional uint32 sex = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_level;
        break;
      }

      // optional uint32 level = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_battlePower;
        break;
      }

      // optional uint32 battlePower = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battlePower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battlepower_)));
          set_has_battlepower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_killNum;
        break;
      }

      // optional uint32 killNum = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_killNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &killnum_)));
          set_has_killnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_evenKillNum;
        break;
      }

      // optional uint32 evenKillNum = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_evenKillNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &evenkillnum_)));
          set_has_evenkillnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_totalKillNum;
        break;
      }

      // optional uint32 totalKillNum = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalKillNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totalkillnum_)));
          set_has_totalkillnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_gloryVal;
        break;
      }

      // optional uint32 gloryVal = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gloryVal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gloryval_)));
          set_has_gloryval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_prostatedNum;
        break;
      }

      // optional uint32 prostatedNum = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prostatedNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prostatednum_)));
          set_has_prostatednum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_headID;
        break;
      }

      // optional uint32 headID = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_headID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &headid_)));
          set_has_headid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_bodyID;
        break;
      }

      // optional uint32 bodyID = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bodyID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bodyid_)));
          set_has_bodyid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_weaponID;
        break;
      }

      // optional uint32 weaponID = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weaponID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weaponid_)));
          set_has_weaponid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_cloackID;
        break;
      }

      // optional uint32 cloackID = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cloackID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cloackid_)));
          set_has_cloackid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_wingID;
        break;
      }

      // optional uint32 wingID = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wingID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wingid_)));
          set_has_wingid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_shoeID;
        break;
      }

      // optional uint32 shoeID = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shoeID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shoeid_)));
          set_has_shoeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_fashionHair;
        break;
      }

      // optional uint32 fashionHair = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fashionHair:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fashionhair_)));
          set_has_fashionhair();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_fashionFace;
        break;
      }

      // optional uint32 fashionFace = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fashionFace:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fashionface_)));
          set_has_fashionface();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_fashionBody;
        break;
      }

      // optional uint32 fashionBody = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fashionBody:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fashionbody_)));
          set_has_fashionbody();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_fashionWeapon;
        break;
      }

      // optional uint32 fashionWeapon = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fashionWeapon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fashionweapon_)));
          set_has_fashionweapon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_fashionShoe;
        break;
      }

      // optional uint32 fashionShoe = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fashionShoe:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fashionshoe_)));
          set_has_fashionshoe();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_fashionDecoration;
        break;
      }

      // optional uint32 fashionDecoration = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fashionDecoration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fashiondecoration_)));
          set_has_fashiondecoration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_effectID;
        break;
      }

      // optional uint32 effectID = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_effectID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &effectid_)));
          set_has_effectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_wingBreakLv;
        break;
      }

      // optional uint32 wingBreakLv = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wingBreakLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wingbreaklv_)));
          set_has_wingbreaklv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stResBattleRankMemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional uint32 charID = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->charid(), output);
  }

  // optional uint32 areaCode = 3;
  if (has_areacode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->areacode(), output);
  }

  // optional uint32 job = 4;
  if (has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->job(), output);
  }

  // optional uint32 sex = 5;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->sex(), output);
  }

  // optional uint32 level = 6;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->level(), output);
  }

  // optional uint32 battlePower = 7;
  if (has_battlepower()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->battlepower(), output);
  }

  // optional uint32 killNum = 8;
  if (has_killnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->killnum(), output);
  }

  // optional uint32 evenKillNum = 9;
  if (has_evenkillnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->evenkillnum(), output);
  }

  // optional uint32 totalKillNum = 10;
  if (has_totalkillnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->totalkillnum(), output);
  }

  // optional uint32 gloryVal = 11;
  if (has_gloryval()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->gloryval(), output);
  }

  // optional uint32 prostatedNum = 12;
  if (has_prostatednum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->prostatednum(), output);
  }

  // optional uint32 headID = 13;
  if (has_headid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->headid(), output);
  }

  // optional uint32 bodyID = 14;
  if (has_bodyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->bodyid(), output);
  }

  // optional uint32 weaponID = 15;
  if (has_weaponid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->weaponid(), output);
  }

  // optional uint32 cloackID = 16;
  if (has_cloackid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->cloackid(), output);
  }

  // optional uint32 wingID = 17;
  if (has_wingid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->wingid(), output);
  }

  // optional uint32 shoeID = 18;
  if (has_shoeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->shoeid(), output);
  }

  // optional uint32 fashionHair = 19;
  if (has_fashionhair()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->fashionhair(), output);
  }

  // optional uint32 fashionFace = 20;
  if (has_fashionface()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->fashionface(), output);
  }

  // optional uint32 fashionBody = 21;
  if (has_fashionbody()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->fashionbody(), output);
  }

  // optional uint32 fashionWeapon = 22;
  if (has_fashionweapon()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->fashionweapon(), output);
  }

  // optional uint32 fashionShoe = 23;
  if (has_fashionshoe()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->fashionshoe(), output);
  }

  // optional uint32 fashionDecoration = 24;
  if (has_fashiondecoration()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->fashiondecoration(), output);
  }

  // optional uint32 effectID = 26;
  if (has_effectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->effectid(), output);
  }

  // optional uint32 wingBreakLv = 27;
  if (has_wingbreaklv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->wingbreaklv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stResBattleRankMemInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional uint32 charID = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->charid(), target);
  }

  // optional uint32 areaCode = 3;
  if (has_areacode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->areacode(), target);
  }

  // optional uint32 job = 4;
  if (has_job()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->job(), target);
  }

  // optional uint32 sex = 5;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->sex(), target);
  }

  // optional uint32 level = 6;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->level(), target);
  }

  // optional uint32 battlePower = 7;
  if (has_battlepower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->battlepower(), target);
  }

  // optional uint32 killNum = 8;
  if (has_killnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->killnum(), target);
  }

  // optional uint32 evenKillNum = 9;
  if (has_evenkillnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->evenkillnum(), target);
  }

  // optional uint32 totalKillNum = 10;
  if (has_totalkillnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->totalkillnum(), target);
  }

  // optional uint32 gloryVal = 11;
  if (has_gloryval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->gloryval(), target);
  }

  // optional uint32 prostatedNum = 12;
  if (has_prostatednum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->prostatednum(), target);
  }

  // optional uint32 headID = 13;
  if (has_headid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->headid(), target);
  }

  // optional uint32 bodyID = 14;
  if (has_bodyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->bodyid(), target);
  }

  // optional uint32 weaponID = 15;
  if (has_weaponid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->weaponid(), target);
  }

  // optional uint32 cloackID = 16;
  if (has_cloackid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->cloackid(), target);
  }

  // optional uint32 wingID = 17;
  if (has_wingid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->wingid(), target);
  }

  // optional uint32 shoeID = 18;
  if (has_shoeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->shoeid(), target);
  }

  // optional uint32 fashionHair = 19;
  if (has_fashionhair()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->fashionhair(), target);
  }

  // optional uint32 fashionFace = 20;
  if (has_fashionface()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->fashionface(), target);
  }

  // optional uint32 fashionBody = 21;
  if (has_fashionbody()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->fashionbody(), target);
  }

  // optional uint32 fashionWeapon = 22;
  if (has_fashionweapon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->fashionweapon(), target);
  }

  // optional uint32 fashionShoe = 23;
  if (has_fashionshoe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->fashionshoe(), target);
  }

  // optional uint32 fashionDecoration = 24;
  if (has_fashiondecoration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->fashiondecoration(), target);
  }

  // optional uint32 effectID = 26;
  if (has_effectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(26, this->effectid(), target);
  }

  // optional uint32 wingBreakLv = 27;
  if (has_wingbreaklv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(27, this->wingbreaklv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stResBattleRankMemInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 charID = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 areaCode = 3;
    if (has_areacode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->areacode());
    }

    // optional uint32 job = 4;
    if (has_job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->job());
    }

    // optional uint32 sex = 5;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sex());
    }

    // optional uint32 level = 6;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 battlePower = 7;
    if (has_battlepower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battlepower());
    }

    // optional uint32 killNum = 8;
    if (has_killnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->killnum());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 evenKillNum = 9;
    if (has_evenkillnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->evenkillnum());
    }

    // optional uint32 totalKillNum = 10;
    if (has_totalkillnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->totalkillnum());
    }

    // optional uint32 gloryVal = 11;
    if (has_gloryval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gloryval());
    }

    // optional uint32 prostatedNum = 12;
    if (has_prostatednum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prostatednum());
    }

    // optional uint32 headID = 13;
    if (has_headid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->headid());
    }

    // optional uint32 bodyID = 14;
    if (has_bodyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bodyid());
    }

    // optional uint32 weaponID = 15;
    if (has_weaponid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weaponid());
    }

    // optional uint32 cloackID = 16;
    if (has_cloackid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cloackid());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 wingID = 17;
    if (has_wingid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wingid());
    }

    // optional uint32 shoeID = 18;
    if (has_shoeid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shoeid());
    }

    // optional uint32 fashionHair = 19;
    if (has_fashionhair()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fashionhair());
    }

    // optional uint32 fashionFace = 20;
    if (has_fashionface()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fashionface());
    }

    // optional uint32 fashionBody = 21;
    if (has_fashionbody()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fashionbody());
    }

    // optional uint32 fashionWeapon = 22;
    if (has_fashionweapon()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fashionweapon());
    }

    // optional uint32 fashionShoe = 23;
    if (has_fashionshoe()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fashionshoe());
    }

    // optional uint32 fashionDecoration = 24;
    if (has_fashiondecoration()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fashiondecoration());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional uint32 effectID = 26;
    if (has_effectid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->effectid());
    }

    // optional uint32 wingBreakLv = 27;
    if (has_wingbreaklv()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wingbreaklv());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stResBattleRankMemInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stResBattleRankMemInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stResBattleRankMemInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stResBattleRankMemInfo::MergeFrom(const stResBattleRankMemInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_areacode()) {
      set_areacode(from.areacode());
    }
    if (from.has_job()) {
      set_job(from.job());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_battlepower()) {
      set_battlepower(from.battlepower());
    }
    if (from.has_killnum()) {
      set_killnum(from.killnum());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_evenkillnum()) {
      set_evenkillnum(from.evenkillnum());
    }
    if (from.has_totalkillnum()) {
      set_totalkillnum(from.totalkillnum());
    }
    if (from.has_gloryval()) {
      set_gloryval(from.gloryval());
    }
    if (from.has_prostatednum()) {
      set_prostatednum(from.prostatednum());
    }
    if (from.has_headid()) {
      set_headid(from.headid());
    }
    if (from.has_bodyid()) {
      set_bodyid(from.bodyid());
    }
    if (from.has_weaponid()) {
      set_weaponid(from.weaponid());
    }
    if (from.has_cloackid()) {
      set_cloackid(from.cloackid());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_wingid()) {
      set_wingid(from.wingid());
    }
    if (from.has_shoeid()) {
      set_shoeid(from.shoeid());
    }
    if (from.has_fashionhair()) {
      set_fashionhair(from.fashionhair());
    }
    if (from.has_fashionface()) {
      set_fashionface(from.fashionface());
    }
    if (from.has_fashionbody()) {
      set_fashionbody(from.fashionbody());
    }
    if (from.has_fashionweapon()) {
      set_fashionweapon(from.fashionweapon());
    }
    if (from.has_fashionshoe()) {
      set_fashionshoe(from.fashionshoe());
    }
    if (from.has_fashiondecoration()) {
      set_fashiondecoration(from.fashiondecoration());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_effectid()) {
      set_effectid(from.effectid());
    }
    if (from.has_wingbreaklv()) {
      set_wingbreaklv(from.wingbreaklv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stResBattleRankMemInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stResBattleRankMemInfo::CopyFrom(const stResBattleRankMemInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stResBattleRankMemInfo::IsInitialized() const {

  return true;
}

void stResBattleRankMemInfo::Swap(stResBattleRankMemInfo* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(charid_, other->charid_);
    std::swap(areacode_, other->areacode_);
    std::swap(job_, other->job_);
    std::swap(sex_, other->sex_);
    std::swap(level_, other->level_);
    std::swap(battlepower_, other->battlepower_);
    std::swap(killnum_, other->killnum_);
    std::swap(evenkillnum_, other->evenkillnum_);
    std::swap(totalkillnum_, other->totalkillnum_);
    std::swap(gloryval_, other->gloryval_);
    std::swap(prostatednum_, other->prostatednum_);
    std::swap(headid_, other->headid_);
    std::swap(bodyid_, other->bodyid_);
    std::swap(weaponid_, other->weaponid_);
    std::swap(cloackid_, other->cloackid_);
    std::swap(wingid_, other->wingid_);
    std::swap(shoeid_, other->shoeid_);
    std::swap(fashionhair_, other->fashionhair_);
    std::swap(fashionface_, other->fashionface_);
    std::swap(fashionbody_, other->fashionbody_);
    std::swap(fashionweapon_, other->fashionweapon_);
    std::swap(fashionshoe_, other->fashionshoe_);
    std::swap(fashiondecoration_, other->fashiondecoration_);
    std::swap(effectid_, other->effectid_);
    std::swap(wingbreaklv_, other->wingbreaklv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stResBattleRankMemInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stResBattleRankMemInfo_descriptor_;
  metadata.reflection = stResBattleRankMemInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRetResBattleKing_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetResBattleKing_ProtoModID_descriptor_;
}
bool stRetResBattleKing_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetResBattleKing_ProtoModID stRetResBattleKing::ModID;
const stRetResBattleKing_ProtoModID stRetResBattleKing::ProtoModID_MIN;
const stRetResBattleKing_ProtoModID stRetResBattleKing::ProtoModID_MAX;
const int stRetResBattleKing::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetResBattleKing_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetResBattleKing_ProtoFunID_descriptor_;
}
bool stRetResBattleKing_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 112:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetResBattleKing_ProtoFunID stRetResBattleKing::FunID;
const stRetResBattleKing_ProtoFunID stRetResBattleKing::ProtoFunID_MIN;
const stRetResBattleKing_ProtoFunID stRetResBattleKing::ProtoFunID_MAX;
const int stRetResBattleKing::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRetResBattleKing::kExistsKingFieldNumber;
const int stRetResBattleKing::kMemberFieldNumber;
#endif  // !_MSC_VER

stRetResBattleKing::stRetResBattleKing()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRetResBattleKing::InitAsDefaultInstance() {
  member_ = const_cast< ::SortProto::stResBattleRankMemInfo*>(&::SortProto::stResBattleRankMemInfo::default_instance());
}

stRetResBattleKing::stRetResBattleKing(const stRetResBattleKing& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRetResBattleKing::SharedCtor() {
  _cached_size_ = 0;
  existsking_ = false;
  member_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRetResBattleKing::~stRetResBattleKing() {
  SharedDtor();
}

void stRetResBattleKing::SharedDtor() {
  if (this != default_instance_) {
    delete member_;
  }
}

void stRetResBattleKing::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRetResBattleKing::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetResBattleKing_descriptor_;
}

const stRetResBattleKing& stRetResBattleKing::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stRetResBattleKing* stRetResBattleKing::default_instance_ = NULL;

stRetResBattleKing* stRetResBattleKing::New() const {
  return new stRetResBattleKing;
}

void stRetResBattleKing::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    existsking_ = false;
    if (has_member()) {
      if (member_ != NULL) member_->::SortProto::stResBattleRankMemInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRetResBattleKing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool existsKing = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &existsking_)));
          set_has_existsking();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_member;
        break;
      }

      // optional .SortProto.stResBattleRankMemInfo member = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_member:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_member()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRetResBattleKing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool existsKing = 1;
  if (has_existsking()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->existsking(), output);
  }

  // optional .SortProto.stResBattleRankMemInfo member = 2;
  if (has_member()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->member(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRetResBattleKing::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool existsKing = 1;
  if (has_existsking()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->existsking(), target);
  }

  // optional .SortProto.stResBattleRankMemInfo member = 2;
  if (has_member()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->member(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRetResBattleKing::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool existsKing = 1;
    if (has_existsking()) {
      total_size += 1 + 1;
    }

    // optional .SortProto.stResBattleRankMemInfo member = 2;
    if (has_member()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->member());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRetResBattleKing::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRetResBattleKing* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRetResBattleKing*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRetResBattleKing::MergeFrom(const stRetResBattleKing& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_existsking()) {
      set_existsking(from.existsking());
    }
    if (from.has_member()) {
      mutable_member()->::SortProto::stResBattleRankMemInfo::MergeFrom(from.member());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRetResBattleKing::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRetResBattleKing::CopyFrom(const stRetResBattleKing& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRetResBattleKing::IsInitialized() const {

  return true;
}

void stRetResBattleKing::Swap(stRetResBattleKing* other) {
  if (other != this) {
    std::swap(existsking_, other->existsking_);
    std::swap(member_, other->member_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRetResBattleKing::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRetResBattleKing_descriptor_;
  metadata.reflection = stRetResBattleKing_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqResBattleProstate_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqResBattleProstate_ProtoModID_descriptor_;
}
bool stReqResBattleProstate_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqResBattleProstate_ProtoModID stReqResBattleProstate::ModID;
const stReqResBattleProstate_ProtoModID stReqResBattleProstate::ProtoModID_MIN;
const stReqResBattleProstate_ProtoModID stReqResBattleProstate::ProtoModID_MAX;
const int stReqResBattleProstate::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqResBattleProstate_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqResBattleProstate_ProtoFunID_descriptor_;
}
bool stReqResBattleProstate_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 113:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqResBattleProstate_ProtoFunID stReqResBattleProstate::FunID;
const stReqResBattleProstate_ProtoFunID stReqResBattleProstate::ProtoFunID_MIN;
const stReqResBattleProstate_ProtoFunID stReqResBattleProstate::ProtoFunID_MAX;
const int stReqResBattleProstate::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqResBattleProstate::kCharIdFieldNumber;
#endif  // !_MSC_VER

stReqResBattleProstate::stReqResBattleProstate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqResBattleProstate::InitAsDefaultInstance() {
}

stReqResBattleProstate::stReqResBattleProstate(const stReqResBattleProstate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqResBattleProstate::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqResBattleProstate::~stReqResBattleProstate() {
  SharedDtor();
}

void stReqResBattleProstate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqResBattleProstate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqResBattleProstate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqResBattleProstate_descriptor_;
}

const stReqResBattleProstate& stReqResBattleProstate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stReqResBattleProstate* stReqResBattleProstate::default_instance_ = NULL;

stReqResBattleProstate* stReqResBattleProstate::New() const {
  return new stReqResBattleProstate;
}

void stReqResBattleProstate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqResBattleProstate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqResBattleProstate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charId = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqResBattleProstate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charId = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqResBattleProstate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charId = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqResBattleProstate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqResBattleProstate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqResBattleProstate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqResBattleProstate::MergeFrom(const stReqResBattleProstate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqResBattleProstate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqResBattleProstate::CopyFrom(const stReqResBattleProstate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqResBattleProstate::IsInitialized() const {

  return true;
}

void stReqResBattleProstate::Swap(stReqResBattleProstate* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqResBattleProstate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqResBattleProstate_descriptor_;
  metadata.reflection = stReqResBattleProstate_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRetResBattleProstate_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetResBattleProstate_eResult_descriptor_;
}
bool stRetResBattleProstate_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetResBattleProstate_eResult stRetResBattleProstate::eSuccess;
const stRetResBattleProstate_eResult stRetResBattleProstate::eAlready_Done;
const stRetResBattleProstate_eResult stRetResBattleProstate::eNo_King;
const stRetResBattleProstate_eResult stRetResBattleProstate::eResult_MIN;
const stRetResBattleProstate_eResult stRetResBattleProstate::eResult_MAX;
const int stRetResBattleProstate::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetResBattleProstate_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetResBattleProstate_ProtoModID_descriptor_;
}
bool stRetResBattleProstate_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetResBattleProstate_ProtoModID stRetResBattleProstate::ModID;
const stRetResBattleProstate_ProtoModID stRetResBattleProstate::ProtoModID_MIN;
const stRetResBattleProstate_ProtoModID stRetResBattleProstate::ProtoModID_MAX;
const int stRetResBattleProstate::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetResBattleProstate_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetResBattleProstate_ProtoFunID_descriptor_;
}
bool stRetResBattleProstate_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 114:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetResBattleProstate_ProtoFunID stRetResBattleProstate::FunID;
const stRetResBattleProstate_ProtoFunID stRetResBattleProstate::ProtoFunID_MIN;
const stRetResBattleProstate_ProtoFunID stRetResBattleProstate::ProtoFunID_MAX;
const int stRetResBattleProstate::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRetResBattleProstate::kResultFieldNumber;
#endif  // !_MSC_VER

stRetResBattleProstate::stRetResBattleProstate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRetResBattleProstate::InitAsDefaultInstance() {
}

stRetResBattleProstate::stRetResBattleProstate(const stRetResBattleProstate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRetResBattleProstate::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRetResBattleProstate::~stRetResBattleProstate() {
  SharedDtor();
}

void stRetResBattleProstate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRetResBattleProstate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRetResBattleProstate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetResBattleProstate_descriptor_;
}

const stRetResBattleProstate& stRetResBattleProstate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stRetResBattleProstate* stRetResBattleProstate::default_instance_ = NULL;

stRetResBattleProstate* stRetResBattleProstate::New() const {
  return new stRetResBattleProstate;
}

void stRetResBattleProstate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRetResBattleProstate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SortProto.stRetResBattleProstate.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SortProto::stRetResBattleProstate_eResult_IsValid(value)) {
            set_result(static_cast< ::SortProto::stRetResBattleProstate_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRetResBattleProstate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SortProto.stRetResBattleProstate.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRetResBattleProstate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SortProto.stRetResBattleProstate.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRetResBattleProstate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SortProto.stRetResBattleProstate.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRetResBattleProstate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRetResBattleProstate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRetResBattleProstate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRetResBattleProstate::MergeFrom(const stRetResBattleProstate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRetResBattleProstate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRetResBattleProstate::CopyFrom(const stRetResBattleProstate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRetResBattleProstate::IsInitialized() const {

  return true;
}

void stRetResBattleProstate::Swap(stRetResBattleProstate* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRetResBattleProstate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRetResBattleProstate_descriptor_;
  metadata.reflection = stRetResBattleProstate_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqResBattleRelive_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqResBattleRelive_ProtoModID_descriptor_;
}
bool stReqResBattleRelive_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqResBattleRelive_ProtoModID stReqResBattleRelive::ModID;
const stReqResBattleRelive_ProtoModID stReqResBattleRelive::ProtoModID_MIN;
const stReqResBattleRelive_ProtoModID stReqResBattleRelive::ProtoModID_MAX;
const int stReqResBattleRelive::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqResBattleRelive_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqResBattleRelive_ProtoFunID_descriptor_;
}
bool stReqResBattleRelive_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 115:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqResBattleRelive_ProtoFunID stReqResBattleRelive::FunID;
const stReqResBattleRelive_ProtoFunID stReqResBattleRelive::ProtoFunID_MIN;
const stReqResBattleRelive_ProtoFunID stReqResBattleRelive::ProtoFunID_MAX;
const int stReqResBattleRelive::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqResBattleRelive::kCharIdFieldNumber;
#endif  // !_MSC_VER

stReqResBattleRelive::stReqResBattleRelive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqResBattleRelive::InitAsDefaultInstance() {
}

stReqResBattleRelive::stReqResBattleRelive(const stReqResBattleRelive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqResBattleRelive::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqResBattleRelive::~stReqResBattleRelive() {
  SharedDtor();
}

void stReqResBattleRelive::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqResBattleRelive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqResBattleRelive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqResBattleRelive_descriptor_;
}

const stReqResBattleRelive& stReqResBattleRelive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stReqResBattleRelive* stReqResBattleRelive::default_instance_ = NULL;

stReqResBattleRelive* stReqResBattleRelive::New() const {
  return new stReqResBattleRelive;
}

void stReqResBattleRelive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqResBattleRelive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqResBattleRelive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charId = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqResBattleRelive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charId = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqResBattleRelive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charId = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqResBattleRelive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqResBattleRelive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqResBattleRelive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqResBattleRelive::MergeFrom(const stReqResBattleRelive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqResBattleRelive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqResBattleRelive::CopyFrom(const stReqResBattleRelive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqResBattleRelive::IsInitialized() const {

  return true;
}

void stReqResBattleRelive::Swap(stReqResBattleRelive* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqResBattleRelive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqResBattleRelive_descriptor_;
  metadata.reflection = stReqResBattleRelive_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRetResBattleRelive_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetResBattleRelive_eResult_descriptor_;
}
bool stRetResBattleRelive_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetResBattleRelive_eResult stRetResBattleRelive::eSuccess;
const stRetResBattleRelive_eResult stRetResBattleRelive::eLess_Of_Diamond;
const stRetResBattleRelive_eResult stRetResBattleRelive::eNot_Died;
const stRetResBattleRelive_eResult stRetResBattleRelive::eNot_In_CopyMap;
const stRetResBattleRelive_eResult stRetResBattleRelive::eResult_MIN;
const stRetResBattleRelive_eResult stRetResBattleRelive::eResult_MAX;
const int stRetResBattleRelive::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetResBattleRelive_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetResBattleRelive_ProtoModID_descriptor_;
}
bool stRetResBattleRelive_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetResBattleRelive_ProtoModID stRetResBattleRelive::ModID;
const stRetResBattleRelive_ProtoModID stRetResBattleRelive::ProtoModID_MIN;
const stRetResBattleRelive_ProtoModID stRetResBattleRelive::ProtoModID_MAX;
const int stRetResBattleRelive::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetResBattleRelive_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetResBattleRelive_ProtoFunID_descriptor_;
}
bool stRetResBattleRelive_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 116:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetResBattleRelive_ProtoFunID stRetResBattleRelive::FunID;
const stRetResBattleRelive_ProtoFunID stRetResBattleRelive::ProtoFunID_MIN;
const stRetResBattleRelive_ProtoFunID stRetResBattleRelive::ProtoFunID_MAX;
const int stRetResBattleRelive::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRetResBattleRelive::kResultFieldNumber;
#endif  // !_MSC_VER

stRetResBattleRelive::stRetResBattleRelive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRetResBattleRelive::InitAsDefaultInstance() {
}

stRetResBattleRelive::stRetResBattleRelive(const stRetResBattleRelive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRetResBattleRelive::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRetResBattleRelive::~stRetResBattleRelive() {
  SharedDtor();
}

void stRetResBattleRelive::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRetResBattleRelive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRetResBattleRelive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetResBattleRelive_descriptor_;
}

const stRetResBattleRelive& stRetResBattleRelive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stRetResBattleRelive* stRetResBattleRelive::default_instance_ = NULL;

stRetResBattleRelive* stRetResBattleRelive::New() const {
  return new stRetResBattleRelive;
}

void stRetResBattleRelive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRetResBattleRelive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SortProto.stRetResBattleRelive.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SortProto::stRetResBattleRelive_eResult_IsValid(value)) {
            set_result(static_cast< ::SortProto::stRetResBattleRelive_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRetResBattleRelive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SortProto.stRetResBattleRelive.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRetResBattleRelive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SortProto.stRetResBattleRelive.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRetResBattleRelive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SortProto.stRetResBattleRelive.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRetResBattleRelive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRetResBattleRelive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRetResBattleRelive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRetResBattleRelive::MergeFrom(const stRetResBattleRelive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRetResBattleRelive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRetResBattleRelive::CopyFrom(const stRetResBattleRelive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRetResBattleRelive::IsInitialized() const {

  return true;
}

void stRetResBattleRelive::Swap(stRetResBattleRelive* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRetResBattleRelive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRetResBattleRelive_descriptor_;
  metadata.reflection = stRetResBattleRelive_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqLeaveResBattle_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqLeaveResBattle_ProtoModID_descriptor_;
}
bool stReqLeaveResBattle_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqLeaveResBattle_ProtoModID stReqLeaveResBattle::ModID;
const stReqLeaveResBattle_ProtoModID stReqLeaveResBattle::ProtoModID_MIN;
const stReqLeaveResBattle_ProtoModID stReqLeaveResBattle::ProtoModID_MAX;
const int stReqLeaveResBattle::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqLeaveResBattle_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqLeaveResBattle_ProtoFunID_descriptor_;
}
bool stReqLeaveResBattle_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 117:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqLeaveResBattle_ProtoFunID stReqLeaveResBattle::FunID;
const stReqLeaveResBattle_ProtoFunID stReqLeaveResBattle::ProtoFunID_MIN;
const stReqLeaveResBattle_ProtoFunID stReqLeaveResBattle::ProtoFunID_MAX;
const int stReqLeaveResBattle::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqLeaveResBattle::kCharIdFieldNumber;
#endif  // !_MSC_VER

stReqLeaveResBattle::stReqLeaveResBattle()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqLeaveResBattle::InitAsDefaultInstance() {
}

stReqLeaveResBattle::stReqLeaveResBattle(const stReqLeaveResBattle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqLeaveResBattle::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqLeaveResBattle::~stReqLeaveResBattle() {
  SharedDtor();
}

void stReqLeaveResBattle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqLeaveResBattle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqLeaveResBattle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqLeaveResBattle_descriptor_;
}

const stReqLeaveResBattle& stReqLeaveResBattle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stReqLeaveResBattle* stReqLeaveResBattle::default_instance_ = NULL;

stReqLeaveResBattle* stReqLeaveResBattle::New() const {
  return new stReqLeaveResBattle;
}

void stReqLeaveResBattle::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqLeaveResBattle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqLeaveResBattle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charId = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqLeaveResBattle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charId = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqLeaveResBattle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charId = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqLeaveResBattle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqLeaveResBattle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqLeaveResBattle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqLeaveResBattle::MergeFrom(const stReqLeaveResBattle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqLeaveResBattle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqLeaveResBattle::CopyFrom(const stReqLeaveResBattle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqLeaveResBattle::IsInitialized() const {

  return true;
}

void stReqLeaveResBattle::Swap(stReqLeaveResBattle* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqLeaveResBattle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqLeaveResBattle_descriptor_;
  metadata.reflection = stReqLeaveResBattle_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRetLeaveResBattle_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetLeaveResBattle_eResult_descriptor_;
}
bool stRetLeaveResBattle_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetLeaveResBattle_eResult stRetLeaveResBattle::eSuccess;
const stRetLeaveResBattle_eResult stRetLeaveResBattle::eNot_In_CopyMap;
const stRetLeaveResBattle_eResult stRetLeaveResBattle::eResult_MIN;
const stRetLeaveResBattle_eResult stRetLeaveResBattle::eResult_MAX;
const int stRetLeaveResBattle::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetLeaveResBattle_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetLeaveResBattle_ProtoModID_descriptor_;
}
bool stRetLeaveResBattle_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetLeaveResBattle_ProtoModID stRetLeaveResBattle::ModID;
const stRetLeaveResBattle_ProtoModID stRetLeaveResBattle::ProtoModID_MIN;
const stRetLeaveResBattle_ProtoModID stRetLeaveResBattle::ProtoModID_MAX;
const int stRetLeaveResBattle::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetLeaveResBattle_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetLeaveResBattle_ProtoFunID_descriptor_;
}
bool stRetLeaveResBattle_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 118:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetLeaveResBattle_ProtoFunID stRetLeaveResBattle::FunID;
const stRetLeaveResBattle_ProtoFunID stRetLeaveResBattle::ProtoFunID_MIN;
const stRetLeaveResBattle_ProtoFunID stRetLeaveResBattle::ProtoFunID_MAX;
const int stRetLeaveResBattle::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRetLeaveResBattle::kResultFieldNumber;
#endif  // !_MSC_VER

stRetLeaveResBattle::stRetLeaveResBattle()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRetLeaveResBattle::InitAsDefaultInstance() {
}

stRetLeaveResBattle::stRetLeaveResBattle(const stRetLeaveResBattle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRetLeaveResBattle::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRetLeaveResBattle::~stRetLeaveResBattle() {
  SharedDtor();
}

void stRetLeaveResBattle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRetLeaveResBattle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRetLeaveResBattle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetLeaveResBattle_descriptor_;
}

const stRetLeaveResBattle& stRetLeaveResBattle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stRetLeaveResBattle* stRetLeaveResBattle::default_instance_ = NULL;

stRetLeaveResBattle* stRetLeaveResBattle::New() const {
  return new stRetLeaveResBattle;
}

void stRetLeaveResBattle::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRetLeaveResBattle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SortProto.stRetLeaveResBattle.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SortProto::stRetLeaveResBattle_eResult_IsValid(value)) {
            set_result(static_cast< ::SortProto::stRetLeaveResBattle_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRetLeaveResBattle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SortProto.stRetLeaveResBattle.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRetLeaveResBattle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SortProto.stRetLeaveResBattle.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRetLeaveResBattle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SortProto.stRetLeaveResBattle.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRetLeaveResBattle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRetLeaveResBattle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRetLeaveResBattle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRetLeaveResBattle::MergeFrom(const stRetLeaveResBattle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRetLeaveResBattle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRetLeaveResBattle::CopyFrom(const stRetLeaveResBattle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRetLeaveResBattle::IsInitialized() const {

  return true;
}

void stRetLeaveResBattle::Swap(stRetLeaveResBattle* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRetLeaveResBattle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRetLeaveResBattle_descriptor_;
  metadata.reflection = stRetLeaveResBattle_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqRecvResBattleRes_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqRecvResBattleRes_ProtoModID_descriptor_;
}
bool stReqRecvResBattleRes_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqRecvResBattleRes_ProtoModID stReqRecvResBattleRes::ModID;
const stReqRecvResBattleRes_ProtoModID stReqRecvResBattleRes::ProtoModID_MIN;
const stReqRecvResBattleRes_ProtoModID stReqRecvResBattleRes::ProtoModID_MAX;
const int stReqRecvResBattleRes::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqRecvResBattleRes_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqRecvResBattleRes_ProtoFunID_descriptor_;
}
bool stReqRecvResBattleRes_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 119:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqRecvResBattleRes_ProtoFunID stReqRecvResBattleRes::FunID;
const stReqRecvResBattleRes_ProtoFunID stReqRecvResBattleRes::ProtoFunID_MIN;
const stReqRecvResBattleRes_ProtoFunID stReqRecvResBattleRes::ProtoFunID_MAX;
const int stReqRecvResBattleRes::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqRecvResBattleRes::kCharIdFieldNumber;
#endif  // !_MSC_VER

stReqRecvResBattleRes::stReqRecvResBattleRes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqRecvResBattleRes::InitAsDefaultInstance() {
}

stReqRecvResBattleRes::stReqRecvResBattleRes(const stReqRecvResBattleRes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqRecvResBattleRes::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqRecvResBattleRes::~stReqRecvResBattleRes() {
  SharedDtor();
}

void stReqRecvResBattleRes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqRecvResBattleRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqRecvResBattleRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqRecvResBattleRes_descriptor_;
}

const stReqRecvResBattleRes& stReqRecvResBattleRes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stReqRecvResBattleRes* stReqRecvResBattleRes::default_instance_ = NULL;

stReqRecvResBattleRes* stReqRecvResBattleRes::New() const {
  return new stReqRecvResBattleRes;
}

void stReqRecvResBattleRes::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqRecvResBattleRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqRecvResBattleRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charId = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqRecvResBattleRes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charId = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqRecvResBattleRes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charId = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqRecvResBattleRes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqRecvResBattleRes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqRecvResBattleRes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqRecvResBattleRes::MergeFrom(const stReqRecvResBattleRes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqRecvResBattleRes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqRecvResBattleRes::CopyFrom(const stReqRecvResBattleRes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqRecvResBattleRes::IsInitialized() const {

  return true;
}

void stReqRecvResBattleRes::Swap(stReqRecvResBattleRes* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqRecvResBattleRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqRecvResBattleRes_descriptor_;
  metadata.reflection = stReqRecvResBattleRes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stResBattleResItem::kItemIdFieldNumber;
const int stResBattleResItem::kNumFieldNumber;
#endif  // !_MSC_VER

stResBattleResItem::stResBattleResItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stResBattleResItem::InitAsDefaultInstance() {
}

stResBattleResItem::stResBattleResItem(const stResBattleResItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stResBattleResItem::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0u;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stResBattleResItem::~stResBattleResItem() {
  SharedDtor();
}

void stResBattleResItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stResBattleResItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stResBattleResItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stResBattleResItem_descriptor_;
}

const stResBattleResItem& stResBattleResItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stResBattleResItem* stResBattleResItem::default_instance_ = NULL;

stResBattleResItem* stResBattleResItem::New() const {
  return new stResBattleResItem;
}

void stResBattleResItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = 0u;
    num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stResBattleResItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 itemId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional uint32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stResBattleResItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 itemId = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itemid(), output);
  }

  // optional uint32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stResBattleResItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 itemId = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->itemid(), target);
  }

  // optional uint32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stResBattleResItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 itemId = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // optional uint32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stResBattleResItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stResBattleResItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stResBattleResItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stResBattleResItem::MergeFrom(const stResBattleResItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stResBattleResItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stResBattleResItem::CopyFrom(const stResBattleResItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stResBattleResItem::IsInitialized() const {

  return true;
}

void stResBattleResItem::Swap(stResBattleResItem* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stResBattleResItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stResBattleResItem_descriptor_;
  metadata.reflection = stResBattleResItem_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRetRecvResBattleRes_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetRecvResBattleRes_ProtoModID_descriptor_;
}
bool stRetRecvResBattleRes_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetRecvResBattleRes_ProtoModID stRetRecvResBattleRes::ModID;
const stRetRecvResBattleRes_ProtoModID stRetRecvResBattleRes::ProtoModID_MIN;
const stRetRecvResBattleRes_ProtoModID stRetRecvResBattleRes::ProtoModID_MAX;
const int stRetRecvResBattleRes::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetRecvResBattleRes_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetRecvResBattleRes_ProtoFunID_descriptor_;
}
bool stRetRecvResBattleRes_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 120:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetRecvResBattleRes_ProtoFunID stRetRecvResBattleRes::FunID;
const stRetRecvResBattleRes_ProtoFunID stRetRecvResBattleRes::ProtoFunID_MIN;
const stRetRecvResBattleRes_ProtoFunID stRetRecvResBattleRes::ProtoFunID_MAX;
const int stRetRecvResBattleRes::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRetRecvResBattleRes::kKillNumFieldNumber;
const int stRetRecvResBattleRes::kStreakNumFieldNumber;
const int stRetRecvResBattleRes::kGloryValFieldNumber;
const int stRetRecvResBattleRes::kItemFieldNumber;
#endif  // !_MSC_VER

stRetRecvResBattleRes::stRetRecvResBattleRes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRetRecvResBattleRes::InitAsDefaultInstance() {
}

stRetRecvResBattleRes::stRetRecvResBattleRes(const stRetRecvResBattleRes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRetRecvResBattleRes::SharedCtor() {
  _cached_size_ = 0;
  killnum_ = 0u;
  streaknum_ = 0u;
  gloryval_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRetRecvResBattleRes::~stRetRecvResBattleRes() {
  SharedDtor();
}

void stRetRecvResBattleRes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRetRecvResBattleRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRetRecvResBattleRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetRecvResBattleRes_descriptor_;
}

const stRetRecvResBattleRes& stRetRecvResBattleRes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stRetRecvResBattleRes* stRetRecvResBattleRes::default_instance_ = NULL;

stRetRecvResBattleRes* stRetRecvResBattleRes::New() const {
  return new stRetRecvResBattleRes;
}

void stRetRecvResBattleRes::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    killnum_ = 0u;
    streaknum_ = 0u;
    gloryval_ = 0u;
  }
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRetRecvResBattleRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 killNum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &killnum_)));
          set_has_killnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_streakNum;
        break;
      }

      // optional uint32 streakNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_streakNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &streaknum_)));
          set_has_streaknum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gloryVal;
        break;
      }

      // optional uint32 gloryVal = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gloryVal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gloryval_)));
          set_has_gloryval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_item;
        break;
      }

      // repeated .SortProto.stResBattleResItem item = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_item;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRetRecvResBattleRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 killNum = 1;
  if (has_killnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->killnum(), output);
  }

  // optional uint32 streakNum = 2;
  if (has_streaknum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->streaknum(), output);
  }

  // optional uint32 gloryVal = 3;
  if (has_gloryval()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->gloryval(), output);
  }

  // repeated .SortProto.stResBattleResItem item = 4;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->item(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRetRecvResBattleRes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 killNum = 1;
  if (has_killnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->killnum(), target);
  }

  // optional uint32 streakNum = 2;
  if (has_streaknum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->streaknum(), target);
  }

  // optional uint32 gloryVal = 3;
  if (has_gloryval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->gloryval(), target);
  }

  // repeated .SortProto.stResBattleResItem item = 4;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->item(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRetRecvResBattleRes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 killNum = 1;
    if (has_killnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->killnum());
    }

    // optional uint32 streakNum = 2;
    if (has_streaknum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->streaknum());
    }

    // optional uint32 gloryVal = 3;
    if (has_gloryval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gloryval());
    }

  }
  // repeated .SortProto.stResBattleResItem item = 4;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRetRecvResBattleRes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRetRecvResBattleRes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRetRecvResBattleRes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRetRecvResBattleRes::MergeFrom(const stRetRecvResBattleRes& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_killnum()) {
      set_killnum(from.killnum());
    }
    if (from.has_streaknum()) {
      set_streaknum(from.streaknum());
    }
    if (from.has_gloryval()) {
      set_gloryval(from.gloryval());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRetRecvResBattleRes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRetRecvResBattleRes::CopyFrom(const stRetRecvResBattleRes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRetRecvResBattleRes::IsInitialized() const {

  return true;
}

void stRetRecvResBattleRes::Swap(stRetRecvResBattleRes* other) {
  if (other != this) {
    std::swap(killnum_, other->killnum_);
    std::swap(streaknum_, other->streaknum_);
    std::swap(gloryval_, other->gloryval_);
    item_.Swap(&other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRetRecvResBattleRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRetRecvResBattleRes_descriptor_;
  metadata.reflection = stRetRecvResBattleRes_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stSendResBattleStreakNum_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSendResBattleStreakNum_ProtoModID_descriptor_;
}
bool stSendResBattleStreakNum_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSendResBattleStreakNum_ProtoModID stSendResBattleStreakNum::ModID;
const stSendResBattleStreakNum_ProtoModID stSendResBattleStreakNum::ProtoModID_MIN;
const stSendResBattleStreakNum_ProtoModID stSendResBattleStreakNum::ProtoModID_MAX;
const int stSendResBattleStreakNum::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSendResBattleStreakNum_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSendResBattleStreakNum_ProtoFunID_descriptor_;
}
bool stSendResBattleStreakNum_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 121:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSendResBattleStreakNum_ProtoFunID stSendResBattleStreakNum::FunID;
const stSendResBattleStreakNum_ProtoFunID stSendResBattleStreakNum::ProtoFunID_MIN;
const stSendResBattleStreakNum_ProtoFunID stSendResBattleStreakNum::ProtoFunID_MAX;
const int stSendResBattleStreakNum::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stSendResBattleStreakNum::kNameFieldNumber;
const int stSendResBattleStreakNum::kAreaCodeFieldNumber;
const int stSendResBattleStreakNum::kValFieldNumber;
#endif  // !_MSC_VER

stSendResBattleStreakNum::stSendResBattleStreakNum()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSendResBattleStreakNum::InitAsDefaultInstance() {
}

stSendResBattleStreakNum::stSendResBattleStreakNum(const stSendResBattleStreakNum& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSendResBattleStreakNum::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  areacode_ = 0u;
  val_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSendResBattleStreakNum::~stSendResBattleStreakNum() {
  SharedDtor();
}

void stSendResBattleStreakNum::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void stSendResBattleStreakNum::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSendResBattleStreakNum::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSendResBattleStreakNum_descriptor_;
}

const stSendResBattleStreakNum& stSendResBattleStreakNum::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stSendResBattleStreakNum* stSendResBattleStreakNum::default_instance_ = NULL;

stSendResBattleStreakNum* stSendResBattleStreakNum::New() const {
  return new stSendResBattleStreakNum;
}

void stSendResBattleStreakNum::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    areacode_ = 0u;
    val_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSendResBattleStreakNum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_areaCode;
        break;
      }

      // optional uint32 areaCode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_areaCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &areacode_)));
          set_has_areacode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_val;
        break;
      }

      // optional uint32 val = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &val_)));
          set_has_val();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSendResBattleStreakNum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional uint32 areaCode = 2;
  if (has_areacode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->areacode(), output);
  }

  // optional uint32 val = 3;
  if (has_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->val(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSendResBattleStreakNum::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional uint32 areaCode = 2;
  if (has_areacode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->areacode(), target);
  }

  // optional uint32 val = 3;
  if (has_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->val(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSendResBattleStreakNum::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 areaCode = 2;
    if (has_areacode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->areacode());
    }

    // optional uint32 val = 3;
    if (has_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->val());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSendResBattleStreakNum::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSendResBattleStreakNum* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSendResBattleStreakNum*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSendResBattleStreakNum::MergeFrom(const stSendResBattleStreakNum& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_areacode()) {
      set_areacode(from.areacode());
    }
    if (from.has_val()) {
      set_val(from.val());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSendResBattleStreakNum::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSendResBattleStreakNum::CopyFrom(const stSendResBattleStreakNum& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSendResBattleStreakNum::IsInitialized() const {

  return true;
}

void stSendResBattleStreakNum::Swap(stSendResBattleStreakNum* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(areacode_, other->areacode_);
    std::swap(val_, other->val_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSendResBattleStreakNum::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSendResBattleStreakNum_descriptor_;
  metadata.reflection = stSendResBattleStreakNum_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stSendResBattleNotice_eNotice_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSendResBattleNotice_eNotice_descriptor_;
}
bool stSendResBattleNotice_eNotice_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSendResBattleNotice_eNotice stSendResBattleNotice::eActivity_Start;
const stSendResBattleNotice_eNotice stSendResBattleNotice::eActivity_End;
const stSendResBattleNotice_eNotice stSendResBattleNotice::eRes_Is_Refresh;
const stSendResBattleNotice_eNotice stSendResBattleNotice::eRes_Has_Refresh;
const stSendResBattleNotice_eNotice stSendResBattleNotice::eNotice_MIN;
const stSendResBattleNotice_eNotice stSendResBattleNotice::eNotice_MAX;
const int stSendResBattleNotice::eNotice_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSendResBattleNotice_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSendResBattleNotice_ProtoModID_descriptor_;
}
bool stSendResBattleNotice_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSendResBattleNotice_ProtoModID stSendResBattleNotice::ModID;
const stSendResBattleNotice_ProtoModID stSendResBattleNotice::ProtoModID_MIN;
const stSendResBattleNotice_ProtoModID stSendResBattleNotice::ProtoModID_MAX;
const int stSendResBattleNotice::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSendResBattleNotice_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSendResBattleNotice_ProtoFunID_descriptor_;
}
bool stSendResBattleNotice_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 122:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSendResBattleNotice_ProtoFunID stSendResBattleNotice::FunID;
const stSendResBattleNotice_ProtoFunID stSendResBattleNotice::ProtoFunID_MIN;
const stSendResBattleNotice_ProtoFunID stSendResBattleNotice::ProtoFunID_MAX;
const int stSendResBattleNotice::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stSendResBattleNotice::kNoticeIndexFieldNumber;
#endif  // !_MSC_VER

stSendResBattleNotice::stSendResBattleNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSendResBattleNotice::InitAsDefaultInstance() {
}

stSendResBattleNotice::stSendResBattleNotice(const stSendResBattleNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSendResBattleNotice::SharedCtor() {
  _cached_size_ = 0;
  noticeindex_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSendResBattleNotice::~stSendResBattleNotice() {
  SharedDtor();
}

void stSendResBattleNotice::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stSendResBattleNotice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSendResBattleNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSendResBattleNotice_descriptor_;
}

const stSendResBattleNotice& stSendResBattleNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stSendResBattleNotice* stSendResBattleNotice::default_instance_ = NULL;

stSendResBattleNotice* stSendResBattleNotice::New() const {
  return new stSendResBattleNotice;
}

void stSendResBattleNotice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    noticeindex_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSendResBattleNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SortProto.stSendResBattleNotice.eNotice noticeIndex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SortProto::stSendResBattleNotice_eNotice_IsValid(value)) {
            set_noticeindex(static_cast< ::SortProto::stSendResBattleNotice_eNotice >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSendResBattleNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SortProto.stSendResBattleNotice.eNotice noticeIndex = 1;
  if (has_noticeindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->noticeindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSendResBattleNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SortProto.stSendResBattleNotice.eNotice noticeIndex = 1;
  if (has_noticeindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->noticeindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSendResBattleNotice::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SortProto.stSendResBattleNotice.eNotice noticeIndex = 1;
    if (has_noticeindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->noticeindex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSendResBattleNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSendResBattleNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSendResBattleNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSendResBattleNotice::MergeFrom(const stSendResBattleNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_noticeindex()) {
      set_noticeindex(from.noticeindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSendResBattleNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSendResBattleNotice::CopyFrom(const stSendResBattleNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSendResBattleNotice::IsInitialized() const {

  return true;
}

void stSendResBattleNotice::Swap(stSendResBattleNotice* other) {
  if (other != this) {
    std::swap(noticeindex_, other->noticeindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSendResBattleNotice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSendResBattleNotice_descriptor_;
  metadata.reflection = stSendResBattleNotice_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stNotityResBattleKillInfo_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotityResBattleKillInfo_ProtoModID_descriptor_;
}
bool stNotityResBattleKillInfo_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotityResBattleKillInfo_ProtoModID stNotityResBattleKillInfo::ModID;
const stNotityResBattleKillInfo_ProtoModID stNotityResBattleKillInfo::ProtoModID_MIN;
const stNotityResBattleKillInfo_ProtoModID stNotityResBattleKillInfo::ProtoModID_MAX;
const int stNotityResBattleKillInfo::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stNotityResBattleKillInfo_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotityResBattleKillInfo_ProtoFunID_descriptor_;
}
bool stNotityResBattleKillInfo_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 123:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotityResBattleKillInfo_ProtoFunID stNotityResBattleKillInfo::FunID;
const stNotityResBattleKillInfo_ProtoFunID stNotityResBattleKillInfo::ProtoFunID_MIN;
const stNotityResBattleKillInfo_ProtoFunID stNotityResBattleKillInfo::ProtoFunID_MAX;
const int stNotityResBattleKillInfo::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stNotityResBattleKillInfo::kNameFieldNumber;
const int stNotityResBattleKillInfo::kAreaCodeFieldNumber;
#endif  // !_MSC_VER

stNotityResBattleKillInfo::stNotityResBattleKillInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stNotityResBattleKillInfo::InitAsDefaultInstance() {
}

stNotityResBattleKillInfo::stNotityResBattleKillInfo(const stNotityResBattleKillInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stNotityResBattleKillInfo::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  areacode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stNotityResBattleKillInfo::~stNotityResBattleKillInfo() {
  SharedDtor();
}

void stNotityResBattleKillInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void stNotityResBattleKillInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stNotityResBattleKillInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotityResBattleKillInfo_descriptor_;
}

const stNotityResBattleKillInfo& stNotityResBattleKillInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stNotityResBattleKillInfo* stNotityResBattleKillInfo::default_instance_ = NULL;

stNotityResBattleKillInfo* stNotityResBattleKillInfo::New() const {
  return new stNotityResBattleKillInfo;
}

void stNotityResBattleKillInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    areacode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stNotityResBattleKillInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_areaCode;
        break;
      }

      // optional uint32 areaCode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_areaCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &areacode_)));
          set_has_areacode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stNotityResBattleKillInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional uint32 areaCode = 2;
  if (has_areacode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->areacode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stNotityResBattleKillInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional uint32 areaCode = 2;
  if (has_areacode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->areacode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stNotityResBattleKillInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 areaCode = 2;
    if (has_areacode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->areacode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stNotityResBattleKillInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stNotityResBattleKillInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stNotityResBattleKillInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stNotityResBattleKillInfo::MergeFrom(const stNotityResBattleKillInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_areacode()) {
      set_areacode(from.areacode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stNotityResBattleKillInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stNotityResBattleKillInfo::CopyFrom(const stNotityResBattleKillInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stNotityResBattleKillInfo::IsInitialized() const {

  return true;
}

void stNotityResBattleKillInfo::Swap(stNotityResBattleKillInfo* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(areacode_, other->areacode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stNotityResBattleKillInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stNotityResBattleKillInfo_descriptor_;
  metadata.reflection = stNotityResBattleKillInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stBattleResRefreshItem::kXFieldNumber;
const int stBattleResRefreshItem::kYFieldNumber;
const int stBattleResRefreshItem::kZFieldNumber;
const int stBattleResRefreshItem::kIdFieldNumber;
const int stBattleResRefreshItem::kItemIdFieldNumber;
const int stBattleResRefreshItem::kCollectTimesFieldNumber;
#endif  // !_MSC_VER

stBattleResRefreshItem::stBattleResRefreshItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stBattleResRefreshItem::InitAsDefaultInstance() {
}

stBattleResRefreshItem::stBattleResRefreshItem(const stBattleResRefreshItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stBattleResRefreshItem::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0u;
  y_ = 0u;
  z_ = 0u;
  id_ = 0u;
  itemid_ = 0u;
  collecttimes_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stBattleResRefreshItem::~stBattleResRefreshItem() {
  SharedDtor();
}

void stBattleResRefreshItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stBattleResRefreshItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stBattleResRefreshItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stBattleResRefreshItem_descriptor_;
}

const stBattleResRefreshItem& stBattleResRefreshItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stBattleResRefreshItem* stBattleResRefreshItem::default_instance_ = NULL;

stBattleResRefreshItem* stBattleResRefreshItem::New() const {
  return new stBattleResRefreshItem;
}

void stBattleResRefreshItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0u;
    y_ = 0u;
    z_ = 0u;
    id_ = 0u;
    itemid_ = 0u;
    collecttimes_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stBattleResRefreshItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_y;
        break;
      }

      // optional uint32 y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_z;
        break;
      }

      // optional uint32 z = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_id;
        break;
      }

      // optional uint32 id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_itemId;
        break;
      }

      // optional uint32 itemId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_collectTimes;
        break;
      }

      // optional uint32 collectTimes = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_collectTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &collecttimes_)));
          set_has_collecttimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stBattleResRefreshItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->x(), output);
  }

  // optional uint32 y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->y(), output);
  }

  // optional uint32 z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->z(), output);
  }

  // optional uint32 id = 4;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->id(), output);
  }

  // optional uint32 itemId = 5;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->itemid(), output);
  }

  // optional uint32 collectTimes = 6;
  if (has_collecttimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->collecttimes(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stBattleResRefreshItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->x(), target);
  }

  // optional uint32 y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->y(), target);
  }

  // optional uint32 z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->z(), target);
  }

  // optional uint32 id = 4;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->id(), target);
  }

  // optional uint32 itemId = 5;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->itemid(), target);
  }

  // optional uint32 collectTimes = 6;
  if (has_collecttimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->collecttimes(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stBattleResRefreshItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 x = 1;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->x());
    }

    // optional uint32 y = 2;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->y());
    }

    // optional uint32 z = 3;
    if (has_z()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->z());
    }

    // optional uint32 id = 4;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 itemId = 5;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // optional uint32 collectTimes = 6;
    if (has_collecttimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->collecttimes());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stBattleResRefreshItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stBattleResRefreshItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stBattleResRefreshItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stBattleResRefreshItem::MergeFrom(const stBattleResRefreshItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_collecttimes()) {
      set_collecttimes(from.collecttimes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stBattleResRefreshItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stBattleResRefreshItem::CopyFrom(const stBattleResRefreshItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stBattleResRefreshItem::IsInitialized() const {

  return true;
}

void stBattleResRefreshItem::Swap(stBattleResRefreshItem* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(id_, other->id_);
    std::swap(itemid_, other->itemid_);
    std::swap(collecttimes_, other->collecttimes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stBattleResRefreshItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stBattleResRefreshItem_descriptor_;
  metadata.reflection = stBattleResRefreshItem_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stNotityResBattleResRefresh_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotityResBattleResRefresh_ProtoModID_descriptor_;
}
bool stNotityResBattleResRefresh_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotityResBattleResRefresh_ProtoModID stNotityResBattleResRefresh::ModID;
const stNotityResBattleResRefresh_ProtoModID stNotityResBattleResRefresh::ProtoModID_MIN;
const stNotityResBattleResRefresh_ProtoModID stNotityResBattleResRefresh::ProtoModID_MAX;
const int stNotityResBattleResRefresh::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stNotityResBattleResRefresh_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotityResBattleResRefresh_ProtoFunID_descriptor_;
}
bool stNotityResBattleResRefresh_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 124:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotityResBattleResRefresh_ProtoFunID stNotityResBattleResRefresh::FunID;
const stNotityResBattleResRefresh_ProtoFunID stNotityResBattleResRefresh::ProtoFunID_MIN;
const stNotityResBattleResRefresh_ProtoFunID stNotityResBattleResRefresh::ProtoFunID_MAX;
const int stNotityResBattleResRefresh::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stNotityResBattleResRefresh::kItemFieldNumber;
#endif  // !_MSC_VER

stNotityResBattleResRefresh::stNotityResBattleResRefresh()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stNotityResBattleResRefresh::InitAsDefaultInstance() {
}

stNotityResBattleResRefresh::stNotityResBattleResRefresh(const stNotityResBattleResRefresh& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stNotityResBattleResRefresh::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stNotityResBattleResRefresh::~stNotityResBattleResRefresh() {
  SharedDtor();
}

void stNotityResBattleResRefresh::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stNotityResBattleResRefresh::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stNotityResBattleResRefresh::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotityResBattleResRefresh_descriptor_;
}

const stNotityResBattleResRefresh& stNotityResBattleResRefresh::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stNotityResBattleResRefresh* stNotityResBattleResRefresh::default_instance_ = NULL;

stNotityResBattleResRefresh* stNotityResBattleResRefresh::New() const {
  return new stNotityResBattleResRefresh;
}

void stNotityResBattleResRefresh::Clear() {
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stNotityResBattleResRefresh::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SortProto.stBattleResRefreshItem item = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_item;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stNotityResBattleResRefresh::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .SortProto.stBattleResRefreshItem item = 1;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->item(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stNotityResBattleResRefresh::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .SortProto.stBattleResRefreshItem item = 1;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->item(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stNotityResBattleResRefresh::ByteSize() const {
  int total_size = 0;

  // repeated .SortProto.stBattleResRefreshItem item = 1;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stNotityResBattleResRefresh::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stNotityResBattleResRefresh* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stNotityResBattleResRefresh*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stNotityResBattleResRefresh::MergeFrom(const stNotityResBattleResRefresh& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stNotityResBattleResRefresh::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stNotityResBattleResRefresh::CopyFrom(const stNotityResBattleResRefresh& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stNotityResBattleResRefresh::IsInitialized() const {

  return true;
}

void stNotityResBattleResRefresh::Swap(stNotityResBattleResRefresh* other) {
  if (other != this) {
    item_.Swap(&other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stNotityResBattleResRefresh::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stNotityResBattleResRefresh_descriptor_;
  metadata.reflection = stNotityResBattleResRefresh_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stNotityResBattleResEmpty_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotityResBattleResEmpty_ProtoModID_descriptor_;
}
bool stNotityResBattleResEmpty_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotityResBattleResEmpty_ProtoModID stNotityResBattleResEmpty::ModID;
const stNotityResBattleResEmpty_ProtoModID stNotityResBattleResEmpty::ProtoModID_MIN;
const stNotityResBattleResEmpty_ProtoModID stNotityResBattleResEmpty::ProtoModID_MAX;
const int stNotityResBattleResEmpty::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stNotityResBattleResEmpty_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotityResBattleResEmpty_ProtoFunID_descriptor_;
}
bool stNotityResBattleResEmpty_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 125:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotityResBattleResEmpty_ProtoFunID stNotityResBattleResEmpty::FunID;
const stNotityResBattleResEmpty_ProtoFunID stNotityResBattleResEmpty::ProtoFunID_MIN;
const stNotityResBattleResEmpty_ProtoFunID stNotityResBattleResEmpty::ProtoFunID_MAX;
const int stNotityResBattleResEmpty::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stNotityResBattleResEmpty::kIdFieldNumber;
#endif  // !_MSC_VER

stNotityResBattleResEmpty::stNotityResBattleResEmpty()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stNotityResBattleResEmpty::InitAsDefaultInstance() {
}

stNotityResBattleResEmpty::stNotityResBattleResEmpty(const stNotityResBattleResEmpty& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stNotityResBattleResEmpty::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stNotityResBattleResEmpty::~stNotityResBattleResEmpty() {
  SharedDtor();
}

void stNotityResBattleResEmpty::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stNotityResBattleResEmpty::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stNotityResBattleResEmpty::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotityResBattleResEmpty_descriptor_;
}

const stNotityResBattleResEmpty& stNotityResBattleResEmpty::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stNotityResBattleResEmpty* stNotityResBattleResEmpty::default_instance_ = NULL;

stNotityResBattleResEmpty* stNotityResBattleResEmpty::New() const {
  return new stNotityResBattleResEmpty;
}

void stNotityResBattleResEmpty::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stNotityResBattleResEmpty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stNotityResBattleResEmpty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stNotityResBattleResEmpty::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stNotityResBattleResEmpty::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stNotityResBattleResEmpty::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stNotityResBattleResEmpty* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stNotityResBattleResEmpty*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stNotityResBattleResEmpty::MergeFrom(const stNotityResBattleResEmpty& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stNotityResBattleResEmpty::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stNotityResBattleResEmpty::CopyFrom(const stNotityResBattleResEmpty& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stNotityResBattleResEmpty::IsInitialized() const {

  return true;
}

void stNotityResBattleResEmpty::Swap(stNotityResBattleResEmpty* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stNotityResBattleResEmpty::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stNotityResBattleResEmpty_descriptor_;
  metadata.reflection = stNotityResBattleResEmpty_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stNotityResBattleGlory_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotityResBattleGlory_ProtoModID_descriptor_;
}
bool stNotityResBattleGlory_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotityResBattleGlory_ProtoModID stNotityResBattleGlory::ModID;
const stNotityResBattleGlory_ProtoModID stNotityResBattleGlory::ProtoModID_MIN;
const stNotityResBattleGlory_ProtoModID stNotityResBattleGlory::ProtoModID_MAX;
const int stNotityResBattleGlory::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stNotityResBattleGlory_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotityResBattleGlory_ProtoFunID_descriptor_;
}
bool stNotityResBattleGlory_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 126:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotityResBattleGlory_ProtoFunID stNotityResBattleGlory::FunID;
const stNotityResBattleGlory_ProtoFunID stNotityResBattleGlory::ProtoFunID_MIN;
const stNotityResBattleGlory_ProtoFunID stNotityResBattleGlory::ProtoFunID_MAX;
const int stNotityResBattleGlory::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stNotityResBattleGlory::kValFieldNumber;
#endif  // !_MSC_VER

stNotityResBattleGlory::stNotityResBattleGlory()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stNotityResBattleGlory::InitAsDefaultInstance() {
}

stNotityResBattleGlory::stNotityResBattleGlory(const stNotityResBattleGlory& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stNotityResBattleGlory::SharedCtor() {
  _cached_size_ = 0;
  val_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stNotityResBattleGlory::~stNotityResBattleGlory() {
  SharedDtor();
}

void stNotityResBattleGlory::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stNotityResBattleGlory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stNotityResBattleGlory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotityResBattleGlory_descriptor_;
}

const stNotityResBattleGlory& stNotityResBattleGlory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stNotityResBattleGlory* stNotityResBattleGlory::default_instance_ = NULL;

stNotityResBattleGlory* stNotityResBattleGlory::New() const {
  return new stNotityResBattleGlory;
}

void stNotityResBattleGlory::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    val_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stNotityResBattleGlory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 val = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &val_)));
          set_has_val();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stNotityResBattleGlory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 val = 1;
  if (has_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->val(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stNotityResBattleGlory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 val = 1;
  if (has_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->val(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stNotityResBattleGlory::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 val = 1;
    if (has_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->val());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stNotityResBattleGlory::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stNotityResBattleGlory* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stNotityResBattleGlory*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stNotityResBattleGlory::MergeFrom(const stNotityResBattleGlory& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_val()) {
      set_val(from.val());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stNotityResBattleGlory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stNotityResBattleGlory::CopyFrom(const stNotityResBattleGlory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stNotityResBattleGlory::IsInitialized() const {

  return true;
}

void stNotityResBattleGlory::Swap(stNotityResBattleGlory* other) {
  if (other != this) {
    std::swap(val_, other->val_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stNotityResBattleGlory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stNotityResBattleGlory_descriptor_;
  metadata.reflection = stNotityResBattleGlory_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stBroadCastResBattleInvite_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stBroadCastResBattleInvite_ProtoModID_descriptor_;
}
bool stBroadCastResBattleInvite_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stBroadCastResBattleInvite_ProtoModID stBroadCastResBattleInvite::ModID;
const stBroadCastResBattleInvite_ProtoModID stBroadCastResBattleInvite::ProtoModID_MIN;
const stBroadCastResBattleInvite_ProtoModID stBroadCastResBattleInvite::ProtoModID_MAX;
const int stBroadCastResBattleInvite::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stBroadCastResBattleInvite_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stBroadCastResBattleInvite_ProtoFunID_descriptor_;
}
bool stBroadCastResBattleInvite_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 127:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stBroadCastResBattleInvite_ProtoFunID stBroadCastResBattleInvite::FunID;
const stBroadCastResBattleInvite_ProtoFunID stBroadCastResBattleInvite::ProtoFunID_MIN;
const stBroadCastResBattleInvite_ProtoFunID stBroadCastResBattleInvite::ProtoFunID_MAX;
const int stBroadCastResBattleInvite::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stBroadCastResBattleInvite::kCharIdFieldNumber;
#endif  // !_MSC_VER

stBroadCastResBattleInvite::stBroadCastResBattleInvite()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stBroadCastResBattleInvite::InitAsDefaultInstance() {
}

stBroadCastResBattleInvite::stBroadCastResBattleInvite(const stBroadCastResBattleInvite& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stBroadCastResBattleInvite::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stBroadCastResBattleInvite::~stBroadCastResBattleInvite() {
  SharedDtor();
}

void stBroadCastResBattleInvite::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stBroadCastResBattleInvite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stBroadCastResBattleInvite::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stBroadCastResBattleInvite_descriptor_;
}

const stBroadCastResBattleInvite& stBroadCastResBattleInvite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stBroadCastResBattleInvite* stBroadCastResBattleInvite::default_instance_ = NULL;

stBroadCastResBattleInvite* stBroadCastResBattleInvite::New() const {
  return new stBroadCastResBattleInvite;
}

void stBroadCastResBattleInvite::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stBroadCastResBattleInvite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stBroadCastResBattleInvite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charId = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stBroadCastResBattleInvite::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charId = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stBroadCastResBattleInvite::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charId = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stBroadCastResBattleInvite::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stBroadCastResBattleInvite* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stBroadCastResBattleInvite*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stBroadCastResBattleInvite::MergeFrom(const stBroadCastResBattleInvite& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stBroadCastResBattleInvite::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stBroadCastResBattleInvite::CopyFrom(const stBroadCastResBattleInvite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stBroadCastResBattleInvite::IsInitialized() const {

  return true;
}

void stBroadCastResBattleInvite::Swap(stBroadCastResBattleInvite* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stBroadCastResBattleInvite::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stBroadCastResBattleInvite_descriptor_;
  metadata.reflection = stBroadCastResBattleInvite_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRetResBattleReceiveInvite_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetResBattleReceiveInvite_ProtoModID_descriptor_;
}
bool stRetResBattleReceiveInvite_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetResBattleReceiveInvite_ProtoModID stRetResBattleReceiveInvite::ModID;
const stRetResBattleReceiveInvite_ProtoModID stRetResBattleReceiveInvite::ProtoModID_MIN;
const stRetResBattleReceiveInvite_ProtoModID stRetResBattleReceiveInvite::ProtoModID_MAX;
const int stRetResBattleReceiveInvite::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetResBattleReceiveInvite_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetResBattleReceiveInvite_ProtoFunID_descriptor_;
}
bool stRetResBattleReceiveInvite_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 128:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetResBattleReceiveInvite_ProtoFunID stRetResBattleReceiveInvite::FunID;
const stRetResBattleReceiveInvite_ProtoFunID stRetResBattleReceiveInvite::ProtoFunID_MIN;
const stRetResBattleReceiveInvite_ProtoFunID stRetResBattleReceiveInvite::ProtoFunID_MAX;
const int stRetResBattleReceiveInvite::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRetResBattleReceiveInvite::kNameFieldNumber;
const int stRetResBattleReceiveInvite::kCharIdFieldNumber;
const int stRetResBattleReceiveInvite::kInstanceLvlFieldNumber;
const int stRetResBattleReceiveInvite::kJobFieldNumber;
const int stRetResBattleReceiveInvite::kSexFieldNumber;
const int stRetResBattleReceiveInvite::kBattlePowerFieldNumber;
const int stRetResBattleReceiveInvite::kVipLvFieldNumber;
const int stRetResBattleReceiveInvite::kPhotoIDFieldNumber;
#endif  // !_MSC_VER

stRetResBattleReceiveInvite::stRetResBattleReceiveInvite()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRetResBattleReceiveInvite::InitAsDefaultInstance() {
}

stRetResBattleReceiveInvite::stRetResBattleReceiveInvite(const stRetResBattleReceiveInvite& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRetResBattleReceiveInvite::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  charid_ = 0u;
  instancelvl_ = 0u;
  job_ = 0u;
  sex_ = 0u;
  battlepower_ = 0u;
  viplv_ = 0u;
  photoid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRetResBattleReceiveInvite::~stRetResBattleReceiveInvite() {
  SharedDtor();
}

void stRetResBattleReceiveInvite::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void stRetResBattleReceiveInvite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRetResBattleReceiveInvite::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetResBattleReceiveInvite_descriptor_;
}

const stRetResBattleReceiveInvite& stRetResBattleReceiveInvite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stRetResBattleReceiveInvite* stRetResBattleReceiveInvite::default_instance_ = NULL;

stRetResBattleReceiveInvite* stRetResBattleReceiveInvite::New() const {
  return new stRetResBattleReceiveInvite;
}

void stRetResBattleReceiveInvite::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    charid_ = 0u;
    instancelvl_ = 0u;
    job_ = 0u;
    sex_ = 0u;
    battlepower_ = 0u;
    viplv_ = 0u;
    photoid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRetResBattleReceiveInvite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_charId;
        break;
      }

      // optional uint32 charId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_instanceLvl;
        break;
      }

      // optional uint32 instanceLvl = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_instanceLvl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &instancelvl_)));
          set_has_instancelvl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_job;
        break;
      }

      // optional uint32 job = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &job_)));
          set_has_job();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_sex;
        break;
      }

      // optional uint32 sex = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_battlePower;
        break;
      }

      // optional uint32 battlePower = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battlePower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battlepower_)));
          set_has_battlepower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_vipLv;
        break;
      }

      // optional uint32 vipLv = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vipLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &viplv_)));
          set_has_viplv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_photoID;
        break;
      }

      // optional uint32 photoID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_photoID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &photoid_)));
          set_has_photoid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRetResBattleReceiveInvite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional uint32 charId = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->charid(), output);
  }

  // optional uint32 instanceLvl = 3;
  if (has_instancelvl()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->instancelvl(), output);
  }

  // optional uint32 job = 4;
  if (has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->job(), output);
  }

  // optional uint32 sex = 5;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->sex(), output);
  }

  // optional uint32 battlePower = 6;
  if (has_battlepower()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->battlepower(), output);
  }

  // optional uint32 vipLv = 7;
  if (has_viplv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->viplv(), output);
  }

  // optional uint32 photoID = 8;
  if (has_photoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->photoid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRetResBattleReceiveInvite::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional uint32 charId = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->charid(), target);
  }

  // optional uint32 instanceLvl = 3;
  if (has_instancelvl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->instancelvl(), target);
  }

  // optional uint32 job = 4;
  if (has_job()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->job(), target);
  }

  // optional uint32 sex = 5;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->sex(), target);
  }

  // optional uint32 battlePower = 6;
  if (has_battlepower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->battlepower(), target);
  }

  // optional uint32 vipLv = 7;
  if (has_viplv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->viplv(), target);
  }

  // optional uint32 photoID = 8;
  if (has_photoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->photoid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRetResBattleReceiveInvite::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 charId = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 instanceLvl = 3;
    if (has_instancelvl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->instancelvl());
    }

    // optional uint32 job = 4;
    if (has_job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->job());
    }

    // optional uint32 sex = 5;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sex());
    }

    // optional uint32 battlePower = 6;
    if (has_battlepower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battlepower());
    }

    // optional uint32 vipLv = 7;
    if (has_viplv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->viplv());
    }

    // optional uint32 photoID = 8;
    if (has_photoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->photoid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRetResBattleReceiveInvite::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRetResBattleReceiveInvite* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRetResBattleReceiveInvite*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRetResBattleReceiveInvite::MergeFrom(const stRetResBattleReceiveInvite& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_instancelvl()) {
      set_instancelvl(from.instancelvl());
    }
    if (from.has_job()) {
      set_job(from.job());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_battlepower()) {
      set_battlepower(from.battlepower());
    }
    if (from.has_viplv()) {
      set_viplv(from.viplv());
    }
    if (from.has_photoid()) {
      set_photoid(from.photoid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRetResBattleReceiveInvite::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRetResBattleReceiveInvite::CopyFrom(const stRetResBattleReceiveInvite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRetResBattleReceiveInvite::IsInitialized() const {

  return true;
}

void stRetResBattleReceiveInvite::Swap(stRetResBattleReceiveInvite* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(charid_, other->charid_);
    std::swap(instancelvl_, other->instancelvl_);
    std::swap(job_, other->job_);
    std::swap(sex_, other->sex_);
    std::swap(battlepower_, other->battlepower_);
    std::swap(viplv_, other->viplv_);
    std::swap(photoid_, other->photoid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRetResBattleReceiveInvite::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRetResBattleReceiveInvite_descriptor_;
  metadata.reflection = stRetResBattleReceiveInvite_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stResBattleReplyInviteJoin_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stResBattleReplyInviteJoin_ProtoModID_descriptor_;
}
bool stResBattleReplyInviteJoin_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stResBattleReplyInviteJoin_ProtoModID stResBattleReplyInviteJoin::ModID;
const stResBattleReplyInviteJoin_ProtoModID stResBattleReplyInviteJoin::ProtoModID_MIN;
const stResBattleReplyInviteJoin_ProtoModID stResBattleReplyInviteJoin::ProtoModID_MAX;
const int stResBattleReplyInviteJoin::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stResBattleReplyInviteJoin_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stResBattleReplyInviteJoin_ProtoFunID_descriptor_;
}
bool stResBattleReplyInviteJoin_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 129:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stResBattleReplyInviteJoin_ProtoFunID stResBattleReplyInviteJoin::FunID;
const stResBattleReplyInviteJoin_ProtoFunID stResBattleReplyInviteJoin::ProtoFunID_MIN;
const stResBattleReplyInviteJoin_ProtoFunID stResBattleReplyInviteJoin::ProtoFunID_MAX;
const int stResBattleReplyInviteJoin::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stResBattleReplyInviteJoin::kAgreeFieldNumber;
const int stResBattleReplyInviteJoin::kCharIdFieldNumber;
#endif  // !_MSC_VER

stResBattleReplyInviteJoin::stResBattleReplyInviteJoin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stResBattleReplyInviteJoin::InitAsDefaultInstance() {
}

stResBattleReplyInviteJoin::stResBattleReplyInviteJoin(const stResBattleReplyInviteJoin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stResBattleReplyInviteJoin::SharedCtor() {
  _cached_size_ = 0;
  agree_ = false;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stResBattleReplyInviteJoin::~stResBattleReplyInviteJoin() {
  SharedDtor();
}

void stResBattleReplyInviteJoin::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stResBattleReplyInviteJoin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stResBattleReplyInviteJoin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stResBattleReplyInviteJoin_descriptor_;
}

const stResBattleReplyInviteJoin& stResBattleReplyInviteJoin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stResBattleReplyInviteJoin* stResBattleReplyInviteJoin::default_instance_ = NULL;

stResBattleReplyInviteJoin* stResBattleReplyInviteJoin::New() const {
  return new stResBattleReplyInviteJoin;
}

void stResBattleReplyInviteJoin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    agree_ = false;
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stResBattleReplyInviteJoin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool agree = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &agree_)));
          set_has_agree();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_charId;
        break;
      }

      // optional uint32 charId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stResBattleReplyInviteJoin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool agree = 1;
  if (has_agree()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->agree(), output);
  }

  // optional uint32 charId = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stResBattleReplyInviteJoin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool agree = 1;
  if (has_agree()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->agree(), target);
  }

  // optional uint32 charId = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stResBattleReplyInviteJoin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool agree = 1;
    if (has_agree()) {
      total_size += 1 + 1;
    }

    // optional uint32 charId = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stResBattleReplyInviteJoin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stResBattleReplyInviteJoin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stResBattleReplyInviteJoin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stResBattleReplyInviteJoin::MergeFrom(const stResBattleReplyInviteJoin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_agree()) {
      set_agree(from.agree());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stResBattleReplyInviteJoin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stResBattleReplyInviteJoin::CopyFrom(const stResBattleReplyInviteJoin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stResBattleReplyInviteJoin::IsInitialized() const {

  return true;
}

void stResBattleReplyInviteJoin::Swap(stResBattleReplyInviteJoin* other) {
  if (other != this) {
    std::swap(agree_, other->agree_);
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stResBattleReplyInviteJoin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stResBattleReplyInviteJoin_descriptor_;
  metadata.reflection = stResBattleReplyInviteJoin_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stResBattleInviteJoinRes_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stResBattleInviteJoinRes_eResult_descriptor_;
}
bool stResBattleInviteJoinRes_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stResBattleInviteJoinRes_eResult stResBattleInviteJoinRes::TEAM_NOT_EXSIT;
const stResBattleInviteJoinRes_eResult stResBattleInviteJoinRes::TEAM_FULL;
const stResBattleInviteJoinRes_eResult stResBattleInviteJoinRes::INNER_ERROR;
const stResBattleInviteJoinRes_eResult stResBattleInviteJoinRes::eResult_MIN;
const stResBattleInviteJoinRes_eResult stResBattleInviteJoinRes::eResult_MAX;
const int stResBattleInviteJoinRes::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stResBattleInviteJoinRes_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stResBattleInviteJoinRes_ProtoModID_descriptor_;
}
bool stResBattleInviteJoinRes_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stResBattleInviteJoinRes_ProtoModID stResBattleInviteJoinRes::ModID;
const stResBattleInviteJoinRes_ProtoModID stResBattleInviteJoinRes::ProtoModID_MIN;
const stResBattleInviteJoinRes_ProtoModID stResBattleInviteJoinRes::ProtoModID_MAX;
const int stResBattleInviteJoinRes::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stResBattleInviteJoinRes_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stResBattleInviteJoinRes_ProtoFunID_descriptor_;
}
bool stResBattleInviteJoinRes_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 130:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stResBattleInviteJoinRes_ProtoFunID stResBattleInviteJoinRes::FunID;
const stResBattleInviteJoinRes_ProtoFunID stResBattleInviteJoinRes::ProtoFunID_MIN;
const stResBattleInviteJoinRes_ProtoFunID stResBattleInviteJoinRes::ProtoFunID_MAX;
const int stResBattleInviteJoinRes::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stResBattleInviteJoinRes::kResultFieldNumber;
#endif  // !_MSC_VER

stResBattleInviteJoinRes::stResBattleInviteJoinRes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stResBattleInviteJoinRes::InitAsDefaultInstance() {
}

stResBattleInviteJoinRes::stResBattleInviteJoinRes(const stResBattleInviteJoinRes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stResBattleInviteJoinRes::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stResBattleInviteJoinRes::~stResBattleInviteJoinRes() {
  SharedDtor();
}

void stResBattleInviteJoinRes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stResBattleInviteJoinRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stResBattleInviteJoinRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stResBattleInviteJoinRes_descriptor_;
}

const stResBattleInviteJoinRes& stResBattleInviteJoinRes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stResBattleInviteJoinRes* stResBattleInviteJoinRes::default_instance_ = NULL;

stResBattleInviteJoinRes* stResBattleInviteJoinRes::New() const {
  return new stResBattleInviteJoinRes;
}

void stResBattleInviteJoinRes::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stResBattleInviteJoinRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SortProto.stResBattleInviteJoinRes.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SortProto::stResBattleInviteJoinRes_eResult_IsValid(value)) {
            set_result(static_cast< ::SortProto::stResBattleInviteJoinRes_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stResBattleInviteJoinRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SortProto.stResBattleInviteJoinRes.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stResBattleInviteJoinRes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SortProto.stResBattleInviteJoinRes.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stResBattleInviteJoinRes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SortProto.stResBattleInviteJoinRes.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stResBattleInviteJoinRes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stResBattleInviteJoinRes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stResBattleInviteJoinRes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stResBattleInviteJoinRes::MergeFrom(const stResBattleInviteJoinRes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stResBattleInviteJoinRes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stResBattleInviteJoinRes::CopyFrom(const stResBattleInviteJoinRes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stResBattleInviteJoinRes::IsInitialized() const {

  return true;
}

void stResBattleInviteJoinRes::Swap(stResBattleInviteJoinRes* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stResBattleInviteJoinRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stResBattleInviteJoinRes_descriptor_;
  metadata.reflection = stResBattleInviteJoinRes_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqStoneCopyMapInfo_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqStoneCopyMapInfo_ProtoModID_descriptor_;
}
bool stReqStoneCopyMapInfo_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqStoneCopyMapInfo_ProtoModID stReqStoneCopyMapInfo::ModID;
const stReqStoneCopyMapInfo_ProtoModID stReqStoneCopyMapInfo::ProtoModID_MIN;
const stReqStoneCopyMapInfo_ProtoModID stReqStoneCopyMapInfo::ProtoModID_MAX;
const int stReqStoneCopyMapInfo::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqStoneCopyMapInfo_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqStoneCopyMapInfo_ProtoFunID_descriptor_;
}
bool stReqStoneCopyMapInfo_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 131:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqStoneCopyMapInfo_ProtoFunID stReqStoneCopyMapInfo::FunID;
const stReqStoneCopyMapInfo_ProtoFunID stReqStoneCopyMapInfo::ProtoFunID_MIN;
const stReqStoneCopyMapInfo_ProtoFunID stReqStoneCopyMapInfo::ProtoFunID_MAX;
const int stReqStoneCopyMapInfo::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqStoneCopyMapInfo::kCharIDFieldNumber;
#endif  // !_MSC_VER

stReqStoneCopyMapInfo::stReqStoneCopyMapInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqStoneCopyMapInfo::InitAsDefaultInstance() {
}

stReqStoneCopyMapInfo::stReqStoneCopyMapInfo(const stReqStoneCopyMapInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqStoneCopyMapInfo::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqStoneCopyMapInfo::~stReqStoneCopyMapInfo() {
  SharedDtor();
}

void stReqStoneCopyMapInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqStoneCopyMapInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqStoneCopyMapInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqStoneCopyMapInfo_descriptor_;
}

const stReqStoneCopyMapInfo& stReqStoneCopyMapInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stReqStoneCopyMapInfo* stReqStoneCopyMapInfo::default_instance_ = NULL;

stReqStoneCopyMapInfo* stReqStoneCopyMapInfo::New() const {
  return new stReqStoneCopyMapInfo;
}

void stReqStoneCopyMapInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqStoneCopyMapInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqStoneCopyMapInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqStoneCopyMapInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqStoneCopyMapInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqStoneCopyMapInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqStoneCopyMapInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqStoneCopyMapInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqStoneCopyMapInfo::MergeFrom(const stReqStoneCopyMapInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqStoneCopyMapInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqStoneCopyMapInfo::CopyFrom(const stReqStoneCopyMapInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqStoneCopyMapInfo::IsInitialized() const {

  return true;
}

void stReqStoneCopyMapInfo::Swap(stReqStoneCopyMapInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqStoneCopyMapInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqStoneCopyMapInfo_descriptor_;
  metadata.reflection = stReqStoneCopyMapInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stStoneCopyMapInfoResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stStoneCopyMapInfoResult_ProtoModID_descriptor_;
}
bool stStoneCopyMapInfoResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stStoneCopyMapInfoResult_ProtoModID stStoneCopyMapInfoResult::ModID;
const stStoneCopyMapInfoResult_ProtoModID stStoneCopyMapInfoResult::ProtoModID_MIN;
const stStoneCopyMapInfoResult_ProtoModID stStoneCopyMapInfoResult::ProtoModID_MAX;
const int stStoneCopyMapInfoResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stStoneCopyMapInfoResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stStoneCopyMapInfoResult_ProtoFunID_descriptor_;
}
bool stStoneCopyMapInfoResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 132:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stStoneCopyMapInfoResult_ProtoFunID stStoneCopyMapInfoResult::FunID;
const stStoneCopyMapInfoResult_ProtoFunID stStoneCopyMapInfoResult::ProtoFunID_MIN;
const stStoneCopyMapInfoResult_ProtoFunID stStoneCopyMapInfoResult::ProtoFunID_MAX;
const int stStoneCopyMapInfoResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stStoneCopyMapInfoResult::kUsedTimesFieldNumber;
const int stStoneCopyMapInfoResult::kMaxTimesFieldNumber;
const int stStoneCopyMapInfoResult::kResetTimesFieldNumber;
#endif  // !_MSC_VER

stStoneCopyMapInfoResult::stStoneCopyMapInfoResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stStoneCopyMapInfoResult::InitAsDefaultInstance() {
}

stStoneCopyMapInfoResult::stStoneCopyMapInfoResult(const stStoneCopyMapInfoResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stStoneCopyMapInfoResult::SharedCtor() {
  _cached_size_ = 0;
  usedtimes_ = 0u;
  maxtimes_ = 0u;
  resettimes_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stStoneCopyMapInfoResult::~stStoneCopyMapInfoResult() {
  SharedDtor();
}

void stStoneCopyMapInfoResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stStoneCopyMapInfoResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stStoneCopyMapInfoResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stStoneCopyMapInfoResult_descriptor_;
}

const stStoneCopyMapInfoResult& stStoneCopyMapInfoResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stStoneCopyMapInfoResult* stStoneCopyMapInfoResult::default_instance_ = NULL;

stStoneCopyMapInfoResult* stStoneCopyMapInfoResult::New() const {
  return new stStoneCopyMapInfoResult;
}

void stStoneCopyMapInfoResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    usedtimes_ = 0u;
    maxtimes_ = 0u;
    resettimes_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stStoneCopyMapInfoResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 usedTimes = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usedtimes_)));
          set_has_usedtimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_maxTimes;
        break;
      }

      // optional uint32 maxTimes = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxtimes_)));
          set_has_maxtimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_resetTimes;
        break;
      }

      // optional uint32 resetTimes = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_resetTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resettimes_)));
          set_has_resettimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stStoneCopyMapInfoResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 usedTimes = 1;
  if (has_usedtimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->usedtimes(), output);
  }

  // optional uint32 maxTimes = 2;
  if (has_maxtimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->maxtimes(), output);
  }

  // optional uint32 resetTimes = 3;
  if (has_resettimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->resettimes(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stStoneCopyMapInfoResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 usedTimes = 1;
  if (has_usedtimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->usedtimes(), target);
  }

  // optional uint32 maxTimes = 2;
  if (has_maxtimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->maxtimes(), target);
  }

  // optional uint32 resetTimes = 3;
  if (has_resettimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->resettimes(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stStoneCopyMapInfoResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 usedTimes = 1;
    if (has_usedtimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->usedtimes());
    }

    // optional uint32 maxTimes = 2;
    if (has_maxtimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxtimes());
    }

    // optional uint32 resetTimes = 3;
    if (has_resettimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->resettimes());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stStoneCopyMapInfoResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stStoneCopyMapInfoResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stStoneCopyMapInfoResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stStoneCopyMapInfoResult::MergeFrom(const stStoneCopyMapInfoResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_usedtimes()) {
      set_usedtimes(from.usedtimes());
    }
    if (from.has_maxtimes()) {
      set_maxtimes(from.maxtimes());
    }
    if (from.has_resettimes()) {
      set_resettimes(from.resettimes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stStoneCopyMapInfoResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stStoneCopyMapInfoResult::CopyFrom(const stStoneCopyMapInfoResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stStoneCopyMapInfoResult::IsInitialized() const {

  return true;
}

void stStoneCopyMapInfoResult::Swap(stStoneCopyMapInfoResult* other) {
  if (other != this) {
    std::swap(usedtimes_, other->usedtimes_);
    std::swap(maxtimes_, other->maxtimes_);
    std::swap(resettimes_, other->resettimes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stStoneCopyMapInfoResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stStoneCopyMapInfoResult_descriptor_;
  metadata.reflection = stStoneCopyMapInfoResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqChallengeStoneCopyMap_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqChallengeStoneCopyMap_ProtoModID_descriptor_;
}
bool stReqChallengeStoneCopyMap_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqChallengeStoneCopyMap_ProtoModID stReqChallengeStoneCopyMap::ModID;
const stReqChallengeStoneCopyMap_ProtoModID stReqChallengeStoneCopyMap::ProtoModID_MIN;
const stReqChallengeStoneCopyMap_ProtoModID stReqChallengeStoneCopyMap::ProtoModID_MAX;
const int stReqChallengeStoneCopyMap::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqChallengeStoneCopyMap_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqChallengeStoneCopyMap_ProtoFunID_descriptor_;
}
bool stReqChallengeStoneCopyMap_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 133:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqChallengeStoneCopyMap_ProtoFunID stReqChallengeStoneCopyMap::FunID;
const stReqChallengeStoneCopyMap_ProtoFunID stReqChallengeStoneCopyMap::ProtoFunID_MIN;
const stReqChallengeStoneCopyMap_ProtoFunID stReqChallengeStoneCopyMap::ProtoFunID_MAX;
const int stReqChallengeStoneCopyMap::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqChallengeStoneCopyMap::kLevelIdFieldNumber;
#endif  // !_MSC_VER

stReqChallengeStoneCopyMap::stReqChallengeStoneCopyMap()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqChallengeStoneCopyMap::InitAsDefaultInstance() {
}

stReqChallengeStoneCopyMap::stReqChallengeStoneCopyMap(const stReqChallengeStoneCopyMap& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqChallengeStoneCopyMap::SharedCtor() {
  _cached_size_ = 0;
  levelid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqChallengeStoneCopyMap::~stReqChallengeStoneCopyMap() {
  SharedDtor();
}

void stReqChallengeStoneCopyMap::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqChallengeStoneCopyMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqChallengeStoneCopyMap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqChallengeStoneCopyMap_descriptor_;
}

const stReqChallengeStoneCopyMap& stReqChallengeStoneCopyMap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stReqChallengeStoneCopyMap* stReqChallengeStoneCopyMap::default_instance_ = NULL;

stReqChallengeStoneCopyMap* stReqChallengeStoneCopyMap::New() const {
  return new stReqChallengeStoneCopyMap;
}

void stReqChallengeStoneCopyMap::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    levelid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqChallengeStoneCopyMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 levelId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &levelid_)));
          set_has_levelid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqChallengeStoneCopyMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 levelId = 1;
  if (has_levelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->levelid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqChallengeStoneCopyMap::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 levelId = 1;
  if (has_levelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->levelid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqChallengeStoneCopyMap::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 levelId = 1;
    if (has_levelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->levelid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqChallengeStoneCopyMap::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqChallengeStoneCopyMap* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqChallengeStoneCopyMap*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqChallengeStoneCopyMap::MergeFrom(const stReqChallengeStoneCopyMap& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_levelid()) {
      set_levelid(from.levelid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqChallengeStoneCopyMap::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqChallengeStoneCopyMap::CopyFrom(const stReqChallengeStoneCopyMap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqChallengeStoneCopyMap::IsInitialized() const {

  return true;
}

void stReqChallengeStoneCopyMap::Swap(stReqChallengeStoneCopyMap* other) {
  if (other != this) {
    std::swap(levelid_, other->levelid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqChallengeStoneCopyMap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqChallengeStoneCopyMap_descriptor_;
  metadata.reflection = stReqChallengeStoneCopyMap_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stChallengeStoneCopyMap_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stChallengeStoneCopyMap_eResult_descriptor_;
}
bool stChallengeStoneCopyMap_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stChallengeStoneCopyMap_eResult stChallengeStoneCopyMap::eSuccess;
const stChallengeStoneCopyMap_eResult stChallengeStoneCopyMap::eLvl_Id_Not_Exist;
const stChallengeStoneCopyMap_eResult stChallengeStoneCopyMap::eTime_not_Open;
const stChallengeStoneCopyMap_eResult stChallengeStoneCopyMap::eLess_Of_Challenge_Time;
const stChallengeStoneCopyMap_eResult stChallengeStoneCopyMap::eLess_Of_Sp;
const stChallengeStoneCopyMap_eResult stChallengeStoneCopyMap::eLess_Of_Lilian;
const stChallengeStoneCopyMap_eResult stChallengeStoneCopyMap::eLvl_Limit;
const stChallengeStoneCopyMap_eResult stChallengeStoneCopyMap::eBag_Full;
const stChallengeStoneCopyMap_eResult stChallengeStoneCopyMap::ePre_Lvl_Id_Not_Pass;
const stChallengeStoneCopyMap_eResult stChallengeStoneCopyMap::ePre_Lvl_Id_Not_Exists;
const stChallengeStoneCopyMap_eResult stChallengeStoneCopyMap::eResult_MIN;
const stChallengeStoneCopyMap_eResult stChallengeStoneCopyMap::eResult_MAX;
const int stChallengeStoneCopyMap::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stChallengeStoneCopyMap_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stChallengeStoneCopyMap_ProtoModID_descriptor_;
}
bool stChallengeStoneCopyMap_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stChallengeStoneCopyMap_ProtoModID stChallengeStoneCopyMap::ModID;
const stChallengeStoneCopyMap_ProtoModID stChallengeStoneCopyMap::ProtoModID_MIN;
const stChallengeStoneCopyMap_ProtoModID stChallengeStoneCopyMap::ProtoModID_MAX;
const int stChallengeStoneCopyMap::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stChallengeStoneCopyMap_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stChallengeStoneCopyMap_ProtoFunID_descriptor_;
}
bool stChallengeStoneCopyMap_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 134:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stChallengeStoneCopyMap_ProtoFunID stChallengeStoneCopyMap::FunID;
const stChallengeStoneCopyMap_ProtoFunID stChallengeStoneCopyMap::ProtoFunID_MIN;
const stChallengeStoneCopyMap_ProtoFunID stChallengeStoneCopyMap::ProtoFunID_MAX;
const int stChallengeStoneCopyMap::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stChallengeStoneCopyMap::kLevelIdFieldNumber;
const int stChallengeStoneCopyMap::kResultFieldNumber;
#endif  // !_MSC_VER

stChallengeStoneCopyMap::stChallengeStoneCopyMap()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stChallengeStoneCopyMap::InitAsDefaultInstance() {
}

stChallengeStoneCopyMap::stChallengeStoneCopyMap(const stChallengeStoneCopyMap& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stChallengeStoneCopyMap::SharedCtor() {
  _cached_size_ = 0;
  levelid_ = 0u;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stChallengeStoneCopyMap::~stChallengeStoneCopyMap() {
  SharedDtor();
}

void stChallengeStoneCopyMap::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stChallengeStoneCopyMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stChallengeStoneCopyMap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stChallengeStoneCopyMap_descriptor_;
}

const stChallengeStoneCopyMap& stChallengeStoneCopyMap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stChallengeStoneCopyMap* stChallengeStoneCopyMap::default_instance_ = NULL;

stChallengeStoneCopyMap* stChallengeStoneCopyMap::New() const {
  return new stChallengeStoneCopyMap;
}

void stChallengeStoneCopyMap::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    levelid_ = 0u;
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stChallengeStoneCopyMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 levelId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &levelid_)));
          set_has_levelid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .SortProto.stChallengeStoneCopyMap.eResult result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SortProto::stChallengeStoneCopyMap_eResult_IsValid(value)) {
            set_result(static_cast< ::SortProto::stChallengeStoneCopyMap_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stChallengeStoneCopyMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 levelId = 1;
  if (has_levelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->levelid(), output);
  }

  // optional .SortProto.stChallengeStoneCopyMap.eResult result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stChallengeStoneCopyMap::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 levelId = 1;
  if (has_levelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->levelid(), target);
  }

  // optional .SortProto.stChallengeStoneCopyMap.eResult result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stChallengeStoneCopyMap::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 levelId = 1;
    if (has_levelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->levelid());
    }

    // optional .SortProto.stChallengeStoneCopyMap.eResult result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stChallengeStoneCopyMap::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stChallengeStoneCopyMap* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stChallengeStoneCopyMap*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stChallengeStoneCopyMap::MergeFrom(const stChallengeStoneCopyMap& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_levelid()) {
      set_levelid(from.levelid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stChallengeStoneCopyMap::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stChallengeStoneCopyMap::CopyFrom(const stChallengeStoneCopyMap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stChallengeStoneCopyMap::IsInitialized() const {

  return true;
}

void stChallengeStoneCopyMap::Swap(stChallengeStoneCopyMap* other) {
  if (other != this) {
    std::swap(levelid_, other->levelid_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stChallengeStoneCopyMap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stChallengeStoneCopyMap_descriptor_;
  metadata.reflection = stChallengeStoneCopyMap_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqResetStoneCopyMapNum_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqResetStoneCopyMapNum_ProtoModID_descriptor_;
}
bool stReqResetStoneCopyMapNum_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqResetStoneCopyMapNum_ProtoModID stReqResetStoneCopyMapNum::ModID;
const stReqResetStoneCopyMapNum_ProtoModID stReqResetStoneCopyMapNum::ProtoModID_MIN;
const stReqResetStoneCopyMapNum_ProtoModID stReqResetStoneCopyMapNum::ProtoModID_MAX;
const int stReqResetStoneCopyMapNum::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqResetStoneCopyMapNum_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqResetStoneCopyMapNum_ProtoFunID_descriptor_;
}
bool stReqResetStoneCopyMapNum_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 135:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqResetStoneCopyMapNum_ProtoFunID stReqResetStoneCopyMapNum::FunID;
const stReqResetStoneCopyMapNum_ProtoFunID stReqResetStoneCopyMapNum::ProtoFunID_MIN;
const stReqResetStoneCopyMapNum_ProtoFunID stReqResetStoneCopyMapNum::ProtoFunID_MAX;
const int stReqResetStoneCopyMapNum::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqResetStoneCopyMapNum::kCharIDFieldNumber;
#endif  // !_MSC_VER

stReqResetStoneCopyMapNum::stReqResetStoneCopyMapNum()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqResetStoneCopyMapNum::InitAsDefaultInstance() {
}

stReqResetStoneCopyMapNum::stReqResetStoneCopyMapNum(const stReqResetStoneCopyMapNum& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqResetStoneCopyMapNum::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqResetStoneCopyMapNum::~stReqResetStoneCopyMapNum() {
  SharedDtor();
}

void stReqResetStoneCopyMapNum::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqResetStoneCopyMapNum::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqResetStoneCopyMapNum::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqResetStoneCopyMapNum_descriptor_;
}

const stReqResetStoneCopyMapNum& stReqResetStoneCopyMapNum::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stReqResetStoneCopyMapNum* stReqResetStoneCopyMapNum::default_instance_ = NULL;

stReqResetStoneCopyMapNum* stReqResetStoneCopyMapNum::New() const {
  return new stReqResetStoneCopyMapNum;
}

void stReqResetStoneCopyMapNum::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqResetStoneCopyMapNum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqResetStoneCopyMapNum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 CharID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqResetStoneCopyMapNum::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqResetStoneCopyMapNum::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqResetStoneCopyMapNum::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqResetStoneCopyMapNum* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqResetStoneCopyMapNum*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqResetStoneCopyMapNum::MergeFrom(const stReqResetStoneCopyMapNum& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqResetStoneCopyMapNum::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqResetStoneCopyMapNum::CopyFrom(const stReqResetStoneCopyMapNum& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqResetStoneCopyMapNum::IsInitialized() const {

  return true;
}

void stReqResetStoneCopyMapNum::Swap(stReqResetStoneCopyMapNum* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqResetStoneCopyMapNum::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqResetStoneCopyMapNum_descriptor_;
  metadata.reflection = stReqResetStoneCopyMapNum_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stResetStoneCopyMapNum_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stResetStoneCopyMapNum_eResult_descriptor_;
}
bool stResetStoneCopyMapNum_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stResetStoneCopyMapNum_eResult stResetStoneCopyMapNum::eSuccess;
const stResetStoneCopyMapNum_eResult stResetStoneCopyMapNum::eLess_of_Diamond;
const stResetStoneCopyMapNum_eResult stResetStoneCopyMapNum::eTimes_Remain;
const stResetStoneCopyMapNum_eResult stResetStoneCopyMapNum::eResult_MIN;
const stResetStoneCopyMapNum_eResult stResetStoneCopyMapNum::eResult_MAX;
const int stResetStoneCopyMapNum::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stResetStoneCopyMapNum_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stResetStoneCopyMapNum_ProtoModID_descriptor_;
}
bool stResetStoneCopyMapNum_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stResetStoneCopyMapNum_ProtoModID stResetStoneCopyMapNum::ModID;
const stResetStoneCopyMapNum_ProtoModID stResetStoneCopyMapNum::ProtoModID_MIN;
const stResetStoneCopyMapNum_ProtoModID stResetStoneCopyMapNum::ProtoModID_MAX;
const int stResetStoneCopyMapNum::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stResetStoneCopyMapNum_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stResetStoneCopyMapNum_ProtoFunID_descriptor_;
}
bool stResetStoneCopyMapNum_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 136:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stResetStoneCopyMapNum_ProtoFunID stResetStoneCopyMapNum::FunID;
const stResetStoneCopyMapNum_ProtoFunID stResetStoneCopyMapNum::ProtoFunID_MIN;
const stResetStoneCopyMapNum_ProtoFunID stResetStoneCopyMapNum::ProtoFunID_MAX;
const int stResetStoneCopyMapNum::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stResetStoneCopyMapNum::kResultFieldNumber;
#endif  // !_MSC_VER

stResetStoneCopyMapNum::stResetStoneCopyMapNum()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stResetStoneCopyMapNum::InitAsDefaultInstance() {
}

stResetStoneCopyMapNum::stResetStoneCopyMapNum(const stResetStoneCopyMapNum& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stResetStoneCopyMapNum::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stResetStoneCopyMapNum::~stResetStoneCopyMapNum() {
  SharedDtor();
}

void stResetStoneCopyMapNum::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stResetStoneCopyMapNum::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stResetStoneCopyMapNum::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stResetStoneCopyMapNum_descriptor_;
}

const stResetStoneCopyMapNum& stResetStoneCopyMapNum::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stResetStoneCopyMapNum* stResetStoneCopyMapNum::default_instance_ = NULL;

stResetStoneCopyMapNum* stResetStoneCopyMapNum::New() const {
  return new stResetStoneCopyMapNum;
}

void stResetStoneCopyMapNum::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stResetStoneCopyMapNum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SortProto.stResetStoneCopyMapNum.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SortProto::stResetStoneCopyMapNum_eResult_IsValid(value)) {
            set_result(static_cast< ::SortProto::stResetStoneCopyMapNum_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stResetStoneCopyMapNum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SortProto.stResetStoneCopyMapNum.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stResetStoneCopyMapNum::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SortProto.stResetStoneCopyMapNum.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stResetStoneCopyMapNum::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SortProto.stResetStoneCopyMapNum.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stResetStoneCopyMapNum::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stResetStoneCopyMapNum* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stResetStoneCopyMapNum*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stResetStoneCopyMapNum::MergeFrom(const stResetStoneCopyMapNum& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stResetStoneCopyMapNum::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stResetStoneCopyMapNum::CopyFrom(const stResetStoneCopyMapNum& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stResetStoneCopyMapNum::IsInitialized() const {

  return true;
}

void stResetStoneCopyMapNum::Swap(stResetStoneCopyMapNum* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stResetStoneCopyMapNum::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stResetStoneCopyMapNum_descriptor_;
  metadata.reflection = stResetStoneCopyMapNum_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqResBattleResource_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqResBattleResource_ProtoModID_descriptor_;
}
bool stReqResBattleResource_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqResBattleResource_ProtoModID stReqResBattleResource::ModID;
const stReqResBattleResource_ProtoModID stReqResBattleResource::ProtoModID_MIN;
const stReqResBattleResource_ProtoModID stReqResBattleResource::ProtoModID_MAX;
const int stReqResBattleResource::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqResBattleResource_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqResBattleResource_ProtoFunID_descriptor_;
}
bool stReqResBattleResource_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 137:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqResBattleResource_ProtoFunID stReqResBattleResource::FunID;
const stReqResBattleResource_ProtoFunID stReqResBattleResource::ProtoFunID_MIN;
const stReqResBattleResource_ProtoFunID stReqResBattleResource::ProtoFunID_MAX;
const int stReqResBattleResource::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqResBattleResource::kCharIDFieldNumber;
#endif  // !_MSC_VER

stReqResBattleResource::stReqResBattleResource()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqResBattleResource::InitAsDefaultInstance() {
}

stReqResBattleResource::stReqResBattleResource(const stReqResBattleResource& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqResBattleResource::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqResBattleResource::~stReqResBattleResource() {
  SharedDtor();
}

void stReqResBattleResource::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqResBattleResource::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqResBattleResource::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqResBattleResource_descriptor_;
}

const stReqResBattleResource& stReqResBattleResource::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stReqResBattleResource* stReqResBattleResource::default_instance_ = NULL;

stReqResBattleResource* stReqResBattleResource::New() const {
  return new stReqResBattleResource;
}

void stReqResBattleResource::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqResBattleResource::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqResBattleResource::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqResBattleResource::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqResBattleResource::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqResBattleResource::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqResBattleResource* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqResBattleResource*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqResBattleResource::MergeFrom(const stReqResBattleResource& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqResBattleResource::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqResBattleResource::CopyFrom(const stReqResBattleResource& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqResBattleResource::IsInitialized() const {

  return true;
}

void stReqResBattleResource::Swap(stReqResBattleResource* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqResBattleResource::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqResBattleResource_descriptor_;
  metadata.reflection = stReqResBattleResource_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRetResBattleResource_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetResBattleResource_eResult_descriptor_;
}
bool stRetResBattleResource_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetResBattleResource_eResult stRetResBattleResource::eSuccess;
const stRetResBattleResource_eResult stRetResBattleResource::eNot_In_Battle;
const stRetResBattleResource_eResult stRetResBattleResource::eResult_MIN;
const stRetResBattleResource_eResult stRetResBattleResource::eResult_MAX;
const int stRetResBattleResource::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetResBattleResource_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetResBattleResource_ProtoModID_descriptor_;
}
bool stRetResBattleResource_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetResBattleResource_ProtoModID stRetResBattleResource::ModID;
const stRetResBattleResource_ProtoModID stRetResBattleResource::ProtoModID_MIN;
const stRetResBattleResource_ProtoModID stRetResBattleResource::ProtoModID_MAX;
const int stRetResBattleResource::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetResBattleResource_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetResBattleResource_ProtoFunID_descriptor_;
}
bool stRetResBattleResource_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 138:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetResBattleResource_ProtoFunID stRetResBattleResource::FunID;
const stRetResBattleResource_ProtoFunID stRetResBattleResource::ProtoFunID_MIN;
const stRetResBattleResource_ProtoFunID stRetResBattleResource::ProtoFunID_MAX;
const int stRetResBattleResource::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRetResBattleResource::kResultFieldNumber;
const int stRetResBattleResource::kItemFieldNumber;
#endif  // !_MSC_VER

stRetResBattleResource::stRetResBattleResource()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRetResBattleResource::InitAsDefaultInstance() {
}

stRetResBattleResource::stRetResBattleResource(const stRetResBattleResource& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRetResBattleResource::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRetResBattleResource::~stRetResBattleResource() {
  SharedDtor();
}

void stRetResBattleResource::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRetResBattleResource::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRetResBattleResource::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetResBattleResource_descriptor_;
}

const stRetResBattleResource& stRetResBattleResource::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stRetResBattleResource* stRetResBattleResource::default_instance_ = NULL;

stRetResBattleResource* stRetResBattleResource::New() const {
  return new stRetResBattleResource;
}

void stRetResBattleResource::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
  }
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRetResBattleResource::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SortProto.stRetResBattleResource.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SortProto::stRetResBattleResource_eResult_IsValid(value)) {
            set_result(static_cast< ::SortProto::stRetResBattleResource_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item;
        break;
      }

      // repeated .SortProto.stBattleResRefreshItem item = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRetResBattleResource::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SortProto.stRetResBattleResource.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // repeated .SortProto.stBattleResRefreshItem item = 2;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->item(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRetResBattleResource::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SortProto.stRetResBattleResource.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // repeated .SortProto.stBattleResRefreshItem item = 2;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->item(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRetResBattleResource::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SortProto.stRetResBattleResource.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  // repeated .SortProto.stBattleResRefreshItem item = 2;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRetResBattleResource::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRetResBattleResource* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRetResBattleResource*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRetResBattleResource::MergeFrom(const stRetResBattleResource& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRetResBattleResource::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRetResBattleResource::CopyFrom(const stRetResBattleResource& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRetResBattleResource::IsInitialized() const {

  return true;
}

void stRetResBattleResource::Swap(stRetResBattleResource* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    item_.Swap(&other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRetResBattleResource::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRetResBattleResource_descriptor_;
  metadata.reflection = stRetResBattleResource_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stResBattleEnd_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stResBattleEnd_ProtoModID_descriptor_;
}
bool stResBattleEnd_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stResBattleEnd_ProtoModID stResBattleEnd::ModID;
const stResBattleEnd_ProtoModID stResBattleEnd::ProtoModID_MIN;
const stResBattleEnd_ProtoModID stResBattleEnd::ProtoModID_MAX;
const int stResBattleEnd::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stResBattleEnd_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stResBattleEnd_ProtoFunID_descriptor_;
}
bool stResBattleEnd_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 139:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stResBattleEnd_ProtoFunID stResBattleEnd::FunID;
const stResBattleEnd_ProtoFunID stResBattleEnd::ProtoFunID_MIN;
const stResBattleEnd_ProtoFunID stResBattleEnd::ProtoFunID_MAX;
const int stResBattleEnd::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stResBattleEnd::kCharidFieldNumber;
#endif  // !_MSC_VER

stResBattleEnd::stResBattleEnd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stResBattleEnd::InitAsDefaultInstance() {
}

stResBattleEnd::stResBattleEnd(const stResBattleEnd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stResBattleEnd::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stResBattleEnd::~stResBattleEnd() {
  SharedDtor();
}

void stResBattleEnd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stResBattleEnd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stResBattleEnd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stResBattleEnd_descriptor_;
}

const stResBattleEnd& stResBattleEnd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SortList_2eproto();
  return *default_instance_;
}

stResBattleEnd* stResBattleEnd::default_instance_ = NULL;

stResBattleEnd* stResBattleEnd::New() const {
  return new stResBattleEnd;
}

void stResBattleEnd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stResBattleEnd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stResBattleEnd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stResBattleEnd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stResBattleEnd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stResBattleEnd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stResBattleEnd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stResBattleEnd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stResBattleEnd::MergeFrom(const stResBattleEnd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stResBattleEnd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stResBattleEnd::CopyFrom(const stResBattleEnd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stResBattleEnd::IsInitialized() const {

  return true;
}

void stResBattleEnd::Swap(stResBattleEnd* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stResBattleEnd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stResBattleEnd_descriptor_;
  metadata.reflection = stResBattleEnd_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace SortProto

// @@protoc_insertion_point(global_scope)
