// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Map.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Map.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Map {

namespace {

const ::google::protobuf::Descriptor* stNotifyEnterMapInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stNotifyEnterMapInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyEnterMapInfo_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyEnterMapInfo_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stClientLoadResFinish_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stClientLoadResFinish_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stClientLoadResFinish_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stClientLoadResFinish_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ReqEnterLevelMap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqEnterLevelMap_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ReqEnterLevelMap_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ReqEnterLevelMap_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSynDropInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSynDropInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* stSynMonsterInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSynMonsterInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyEnterLevelMap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyEnterLevelMap_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NotifyEnterLevelMap_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* NotifyEnterLevelMap_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqLeaveLevel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqLeaveLevel_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqLeaveLevel_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqLeaveLevel_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stLeaveLevelSuccess_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stLeaveLevelSuccess_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stLeaveLevelSuccess_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stLeaveLevelSuccess_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stEnterLevelError_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stEnterLevelError_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stEnterLevelError_Error_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stEnterLevelError_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stEnterLevelError_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stPlayerData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stPlayerData_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyPlayerAppear_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyPlayerAppear_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NotifyPlayerAppear_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* NotifyPlayerAppear_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NotifyObjDisappear_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyObjDisappear_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyObjDisappear_stObjDisappearInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyObjDisappear_stObjDisappearInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NotifyObjDisappear_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* NotifyObjDisappear_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NotifyNpcAppear_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyNpcAppear_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyNpcAppear_stNpcData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyNpcAppear_stNpcData_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NotifyNpcAppear_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* NotifyNpcAppear_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NotifyHeroAppear_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyHeroAppear_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyHeroAppear_stHeroData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyHeroAppear_stHeroData_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NotifyHeroAppear_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* NotifyHeroAppear_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Pos_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Pos_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqMove_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqMove_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ReqMove_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ReqMove_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stNotifyMODMove_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stNotifyMODMove_reflection_ = NULL;
const ::google::protobuf::Descriptor* stNotifyMODMove_stModMoveInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stNotifyMODMove_stModMoveInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyMODMove_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyMODMove_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stThrowSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stThrowSkill_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stThrowSkill_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stThrowSkill_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stHitInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stHitInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* stNotifyHit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stNotifyHit_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyHit_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyHit_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* AttRetInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AttRetInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AttackResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AttackResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* AttackResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* AttackResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stMapObjAddHP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stMapObjAddHP_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stMapObjAddHP_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stMapObjAddHP_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stInstantMove_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stInstantMove_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stInstantMove_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stInstantMove_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stAttackFail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stAttackFail_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stAttackFail_ErrorCode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stAttackFail_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stAttackFail_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stInterruptPlaySkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stInterruptPlaySkill_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stInterruptPlaySkill_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stInterruptPlaySkill_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stMapObjectChgDir_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stMapObjectChgDir_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stMapObjectChgDir_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stMapObjectChgDir_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqOnlineUserOnMainCity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqOnlineUserOnMainCity_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqOnlineUserOnMainCity_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqOnlineUserOnMainCity_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stOnlineUserOnMainCity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stOnlineUserOnMainCity_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stOnlineUserOnMainCity_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stOnlineUserOnMainCity_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stChangeHeroGroup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stChangeHeroGroup_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stChangeHeroGroup_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stChangeHeroGroup_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stChangeHeroGroupError_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stChangeHeroGroupError_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stChangeHeroGroupError_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stChangeHeroGroupError_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stChangeHeroGroupError_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stNotifyObjMP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stNotifyObjMP_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyObjMP_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyObjMP_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stNotifyObjBati_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stNotifyObjBati_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyObjBati_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyObjBati_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stAddBufferState2Me_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stAddBufferState2Me_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stAddBufferState2Me_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stAddBufferState2Me_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stDelBufferState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stDelBufferState_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stDelBufferState_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stDelBufferState_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stNotifyExecAI_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stNotifyExecAI_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyExecAI_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyExecAI_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stAlertBossAppear_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stAlertBossAppear_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stAlertBossAppear_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stAlertBossAppear_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqChangeMainCity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqChangeMainCity_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqChangeMainCity_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqChangeMainCity_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stNotifyAddFireWall_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stNotifyAddFireWall_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyAddFireWall_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyAddFireWall_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stBeginThunderDamage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stBeginThunderDamage_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stBeginThunderDamage_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stBeginThunderDamage_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stCalcThunderDamage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stCalcThunderDamage_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stCalcThunderDamage_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stCalcThunderDamage_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stDirectDamge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stDirectDamge_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stDirectDamge_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stDirectDamge_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stNotifyObjDie_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stNotifyObjDie_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyObjDie_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyObjDie_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stBeginBattle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stBeginBattle_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stBeginBattle_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stBeginBattle_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stThrowSkillFail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stThrowSkillFail_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stThrowSkillFail_eReason_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stThrowSkillFail_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stThrowSkillFail_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stNotifyResAppear_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stNotifyResAppear_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyResAppear_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyResAppear_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stNotifyResDisappear_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stNotifyResDisappear_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyResDisappear_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyResDisappear_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stNotifyBuffAppear_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stNotifyBuffAppear_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyBuffAppear_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyBuffAppear_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stNotifyBuffDisappear_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stNotifyBuffDisappear_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyBuffDisappear_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyBuffDisappear_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stOpCopyMapRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stOpCopyMapRes_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stOpCopyMapRes_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stOpCopyMapRes_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stPlayerGotBuff_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stPlayerGotBuff_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stPlayerGotBuff_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stPlayerGotBuff_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stPlayerCollectSuccess_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stPlayerCollectSuccess_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stPlayerCollectSuccess_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stPlayerCollectSuccess_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSynCampScore_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSynCampScore_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynCampScore_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynCampScore_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stUserRelive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stUserRelive_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stUserRelive_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stUserRelive_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stNotifyUserPointToPos_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stNotifyUserPointToPos_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyUserPointToPos_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyUserPointToPos_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* eBeingState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* eMapObjectType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* eCamp_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* eAttResultType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_Map_2eproto() {
  protobuf_AddDesc_Map_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Map.proto");
  GOOGLE_CHECK(file != NULL);
  stNotifyEnterMapInfo_descriptor_ = file->message_type(0);
  static const int stNotifyEnterMapInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyEnterMapInfo, mapid_),
  };
  stNotifyEnterMapInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stNotifyEnterMapInfo_descriptor_,
      stNotifyEnterMapInfo::default_instance_,
      stNotifyEnterMapInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyEnterMapInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyEnterMapInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stNotifyEnterMapInfo));
  stNotifyEnterMapInfo_ProtoModID_descriptor_ = stNotifyEnterMapInfo_descriptor_->enum_type(0);
  stNotifyEnterMapInfo_ProtoFunID_descriptor_ = stNotifyEnterMapInfo_descriptor_->enum_type(1);
  stClientLoadResFinish_descriptor_ = file->message_type(1);
  static const int stClientLoadResFinish_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stClientLoadResFinish, levelid_),
  };
  stClientLoadResFinish_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stClientLoadResFinish_descriptor_,
      stClientLoadResFinish::default_instance_,
      stClientLoadResFinish_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stClientLoadResFinish, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stClientLoadResFinish, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stClientLoadResFinish));
  stClientLoadResFinish_ProtoModID_descriptor_ = stClientLoadResFinish_descriptor_->enum_type(0);
  stClientLoadResFinish_ProtoFunID_descriptor_ = stClientLoadResFinish_descriptor_->enum_type(1);
  ReqEnterLevelMap_descriptor_ = file->message_type(2);
  static const int ReqEnterLevelMap_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqEnterLevelMap, levelid_),
  };
  ReqEnterLevelMap_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqEnterLevelMap_descriptor_,
      ReqEnterLevelMap::default_instance_,
      ReqEnterLevelMap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqEnterLevelMap, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqEnterLevelMap, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqEnterLevelMap));
  ReqEnterLevelMap_ProtoModID_descriptor_ = ReqEnterLevelMap_descriptor_->enum_type(0);
  ReqEnterLevelMap_ProtoFunID_descriptor_ = ReqEnterLevelMap_descriptor_->enum_type(1);
  stSynDropInfo_descriptor_ = file->message_type(3);
  static const int stSynDropInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynDropInfo, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynDropInfo, num_),
  };
  stSynDropInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSynDropInfo_descriptor_,
      stSynDropInfo::default_instance_,
      stSynDropInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynDropInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynDropInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSynDropInfo));
  stSynMonsterInfo_descriptor_ = file->message_type(4);
  static const int stSynMonsterInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynMonsterInfo, monsterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynMonsterInfo, monsterlv_),
  };
  stSynMonsterInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSynMonsterInfo_descriptor_,
      stSynMonsterInfo::default_instance_,
      stSynMonsterInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynMonsterInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynMonsterInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSynMonsterInfo));
  NotifyEnterLevelMap_descriptor_ = file->message_type(5);
  static const int NotifyEnterLevelMap_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyEnterLevelMap, levelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyEnterLevelMap, dropinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyEnterLevelMap, monsterinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyEnterLevelMap, bossinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyEnterLevelMap, drawinfo_),
  };
  NotifyEnterLevelMap_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyEnterLevelMap_descriptor_,
      NotifyEnterLevelMap::default_instance_,
      NotifyEnterLevelMap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyEnterLevelMap, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyEnterLevelMap, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyEnterLevelMap));
  NotifyEnterLevelMap_ProtoModID_descriptor_ = NotifyEnterLevelMap_descriptor_->enum_type(0);
  NotifyEnterLevelMap_ProtoFunID_descriptor_ = NotifyEnterLevelMap_descriptor_->enum_type(1);
  stReqLeaveLevel_descriptor_ = file->message_type(6);
  static const int stReqLeaveLevel_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqLeaveLevel, flag_),
  };
  stReqLeaveLevel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqLeaveLevel_descriptor_,
      stReqLeaveLevel::default_instance_,
      stReqLeaveLevel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqLeaveLevel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqLeaveLevel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqLeaveLevel));
  stReqLeaveLevel_ProtoModID_descriptor_ = stReqLeaveLevel_descriptor_->enum_type(0);
  stReqLeaveLevel_ProtoFunID_descriptor_ = stReqLeaveLevel_descriptor_->enum_type(1);
  stLeaveLevelSuccess_descriptor_ = file->message_type(7);
  static const int stLeaveLevelSuccess_offsets_[1] = {
  };
  stLeaveLevelSuccess_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stLeaveLevelSuccess_descriptor_,
      stLeaveLevelSuccess::default_instance_,
      stLeaveLevelSuccess_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stLeaveLevelSuccess, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stLeaveLevelSuccess, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stLeaveLevelSuccess));
  stLeaveLevelSuccess_ProtoModID_descriptor_ = stLeaveLevelSuccess_descriptor_->enum_type(0);
  stLeaveLevelSuccess_ProtoFunID_descriptor_ = stLeaveLevelSuccess_descriptor_->enum_type(1);
  stEnterLevelError_descriptor_ = file->message_type(8);
  static const int stEnterLevelError_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stEnterLevelError, errorcode_),
  };
  stEnterLevelError_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stEnterLevelError_descriptor_,
      stEnterLevelError::default_instance_,
      stEnterLevelError_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stEnterLevelError, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stEnterLevelError, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stEnterLevelError));
  stEnterLevelError_Error_descriptor_ = stEnterLevelError_descriptor_->enum_type(0);
  stEnterLevelError_ProtoModID_descriptor_ = stEnterLevelError_descriptor_->enum_type(1);
  stEnterLevelError_ProtoFunID_descriptor_ = stEnterLevelError_descriptor_->enum_type(2);
  stPlayerData_descriptor_ = file->message_type(9);
  static const int stPlayerData_offsets_[37] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPlayerData, moid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPlayerData, rolename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPlayerData, job_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPlayerData, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPlayerData, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPlayerData, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPlayerData, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPlayerData, z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPlayerData, dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPlayerData, campid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPlayerData, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPlayerData, maxhp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPlayerData, mp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPlayerData, maxmp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPlayerData, bati_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPlayerData, maxbati_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPlayerData, headid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPlayerData, bodyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPlayerData, weaponid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPlayerData, cloackid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPlayerData, wingid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPlayerData, shoeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPlayerData, fashionhair_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPlayerData, fashionface_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPlayerData, fashionbody_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPlayerData, fashionweapon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPlayerData, fashionshoe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPlayerData, fashiondecoration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPlayerData, titleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPlayerData, effectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPlayerData, wingbreaklv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPlayerData, followspriteid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPlayerData, followspritelvl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPlayerData, fashionwingid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPlayerData, couplename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPlayerData, mountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPlayerData, isrobot_),
  };
  stPlayerData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stPlayerData_descriptor_,
      stPlayerData::default_instance_,
      stPlayerData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPlayerData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPlayerData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stPlayerData));
  NotifyPlayerAppear_descriptor_ = file->message_type(10);
  static const int NotifyPlayerAppear_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyPlayerAppear, data_),
  };
  NotifyPlayerAppear_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyPlayerAppear_descriptor_,
      NotifyPlayerAppear::default_instance_,
      NotifyPlayerAppear_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyPlayerAppear, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyPlayerAppear, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyPlayerAppear));
  NotifyPlayerAppear_ProtoModID_descriptor_ = NotifyPlayerAppear_descriptor_->enum_type(0);
  NotifyPlayerAppear_ProtoFunID_descriptor_ = NotifyPlayerAppear_descriptor_->enum_type(1);
  NotifyObjDisappear_descriptor_ = file->message_type(11);
  static const int NotifyObjDisappear_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyObjDisappear, data_),
  };
  NotifyObjDisappear_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyObjDisappear_descriptor_,
      NotifyObjDisappear::default_instance_,
      NotifyObjDisappear_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyObjDisappear, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyObjDisappear, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyObjDisappear));
  NotifyObjDisappear_stObjDisappearInfo_descriptor_ = NotifyObjDisappear_descriptor_->nested_type(0);
  static const int NotifyObjDisappear_stObjDisappearInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyObjDisappear_stObjDisappearInfo, moid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyObjDisappear_stObjDisappearInfo, motype_),
  };
  NotifyObjDisappear_stObjDisappearInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyObjDisappear_stObjDisappearInfo_descriptor_,
      NotifyObjDisappear_stObjDisappearInfo::default_instance_,
      NotifyObjDisappear_stObjDisappearInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyObjDisappear_stObjDisappearInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyObjDisappear_stObjDisappearInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyObjDisappear_stObjDisappearInfo));
  NotifyObjDisappear_ProtoModID_descriptor_ = NotifyObjDisappear_descriptor_->enum_type(0);
  NotifyObjDisappear_ProtoFunID_descriptor_ = NotifyObjDisappear_descriptor_->enum_type(1);
  NotifyNpcAppear_descriptor_ = file->message_type(12);
  static const int NotifyNpcAppear_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyNpcAppear, data_),
  };
  NotifyNpcAppear_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyNpcAppear_descriptor_,
      NotifyNpcAppear::default_instance_,
      NotifyNpcAppear_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyNpcAppear, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyNpcAppear, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyNpcAppear));
  NotifyNpcAppear_stNpcData_descriptor_ = NotifyNpcAppear_descriptor_->nested_type(0);
  static const int NotifyNpcAppear_stNpcData_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyNpcAppear_stNpcData, npcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyNpcAppear_stNpcData, moid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyNpcAppear_stNpcData, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyNpcAppear_stNpcData, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyNpcAppear_stNpcData, z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyNpcAppear_stNpcData, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyNpcAppear_stNpcData, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyNpcAppear_stNpcData, bornaminid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyNpcAppear_stNpcData, isboss_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyNpcAppear_stNpcData, dirangle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyNpcAppear_stNpcData, actiongroupid_),
  };
  NotifyNpcAppear_stNpcData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyNpcAppear_stNpcData_descriptor_,
      NotifyNpcAppear_stNpcData::default_instance_,
      NotifyNpcAppear_stNpcData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyNpcAppear_stNpcData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyNpcAppear_stNpcData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyNpcAppear_stNpcData));
  NotifyNpcAppear_ProtoModID_descriptor_ = NotifyNpcAppear_descriptor_->enum_type(0);
  NotifyNpcAppear_ProtoFunID_descriptor_ = NotifyNpcAppear_descriptor_->enum_type(1);
  NotifyHeroAppear_descriptor_ = file->message_type(13);
  static const int NotifyHeroAppear_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyHeroAppear, data_),
  };
  NotifyHeroAppear_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyHeroAppear_descriptor_,
      NotifyHeroAppear::default_instance_,
      NotifyHeroAppear_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyHeroAppear, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyHeroAppear, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyHeroAppear));
  NotifyHeroAppear_stHeroData_descriptor_ = NotifyHeroAppear_descriptor_->nested_type(0);
  static const int NotifyHeroAppear_stHeroData_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyHeroAppear_stHeroData, heroid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyHeroAppear_stHeroData, moid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyHeroAppear_stHeroData, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyHeroAppear_stHeroData, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyHeroAppear_stHeroData, z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyHeroAppear_stHeroData, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyHeroAppear_stHeroData, maxhp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyHeroAppear_stHeroData, mastermoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyHeroAppear_stHeroData, campid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyHeroAppear_stHeroData, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyHeroAppear_stHeroData, createbyskill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyHeroAppear_stHeroData, pos_),
  };
  NotifyHeroAppear_stHeroData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyHeroAppear_stHeroData_descriptor_,
      NotifyHeroAppear_stHeroData::default_instance_,
      NotifyHeroAppear_stHeroData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyHeroAppear_stHeroData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyHeroAppear_stHeroData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyHeroAppear_stHeroData));
  NotifyHeroAppear_ProtoModID_descriptor_ = NotifyHeroAppear_descriptor_->enum_type(0);
  NotifyHeroAppear_ProtoFunID_descriptor_ = NotifyHeroAppear_descriptor_->enum_type(1);
  Pos_descriptor_ = file->message_type(14);
  static const int Pos_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pos, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pos, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pos, z_),
  };
  Pos_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Pos_descriptor_,
      Pos::default_instance_,
      Pos_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pos, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pos, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Pos));
  ReqMove_descriptor_ = file->message_type(15);
  static const int ReqMove_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMove, moid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMove, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMove, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMove, isinstant_),
  };
  ReqMove_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqMove_descriptor_,
      ReqMove::default_instance_,
      ReqMove_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMove, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMove, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqMove));
  ReqMove_ProtoModID_descriptor_ = ReqMove_descriptor_->enum_type(0);
  ReqMove_ProtoFunID_descriptor_ = ReqMove_descriptor_->enum_type(1);
  stNotifyMODMove_descriptor_ = file->message_type(16);
  static const int stNotifyMODMove_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyMODMove, data_),
  };
  stNotifyMODMove_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stNotifyMODMove_descriptor_,
      stNotifyMODMove::default_instance_,
      stNotifyMODMove_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyMODMove, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyMODMove, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stNotifyMODMove));
  stNotifyMODMove_stModMoveInfo_descriptor_ = stNotifyMODMove_descriptor_->nested_type(0);
  static const int stNotifyMODMove_stModMoveInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyMODMove_stModMoveInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyMODMove_stModMoveInfo, modid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyMODMove_stModMoveInfo, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyMODMove_stModMoveInfo, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyMODMove_stModMoveInfo, z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyMODMove_stModMoveInfo, dir_),
  };
  stNotifyMODMove_stModMoveInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stNotifyMODMove_stModMoveInfo_descriptor_,
      stNotifyMODMove_stModMoveInfo::default_instance_,
      stNotifyMODMove_stModMoveInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyMODMove_stModMoveInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyMODMove_stModMoveInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stNotifyMODMove_stModMoveInfo));
  stNotifyMODMove_ProtoModID_descriptor_ = stNotifyMODMove_descriptor_->enum_type(0);
  stNotifyMODMove_ProtoFunID_descriptor_ = stNotifyMODMove_descriptor_->enum_type(1);
  stThrowSkill_descriptor_ = file->message_type(17);
  static const int stThrowSkill_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stThrowSkill, skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stThrowSkill, atttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stThrowSkill, attmoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stThrowSkill, step_),
  };
  stThrowSkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stThrowSkill_descriptor_,
      stThrowSkill::default_instance_,
      stThrowSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stThrowSkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stThrowSkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stThrowSkill));
  stThrowSkill_ProtoModID_descriptor_ = stThrowSkill_descriptor_->enum_type(0);
  stThrowSkill_ProtoFunID_descriptor_ = stThrowSkill_descriptor_->enum_type(1);
  stHitInfo_descriptor_ = file->message_type(18);
  static const int stHitInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stHitInfo, motype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stHitInfo, moid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stHitInfo, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stHitInfo, damagetime_),
  };
  stHitInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stHitInfo_descriptor_,
      stHitInfo::default_instance_,
      stHitInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stHitInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stHitInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stHitInfo));
  stNotifyHit_descriptor_ = file->message_type(19);
  static const int stNotifyHit_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyHit, atttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyHit, attmoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyHit, step_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyHit, hitinfos_),
  };
  stNotifyHit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stNotifyHit_descriptor_,
      stNotifyHit::default_instance_,
      stNotifyHit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyHit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyHit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stNotifyHit));
  stNotifyHit_ProtoModID_descriptor_ = stNotifyHit_descriptor_->enum_type(0);
  stNotifyHit_ProtoFunID_descriptor_ = stNotifyHit_descriptor_->enum_type(1);
  AttRetInfo_descriptor_ = file->message_type(20);
  static const int AttRetInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttRetInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttRetInfo, moid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttRetInfo, skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttRetInfo, dechp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttRetInfo, result_),
  };
  AttRetInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AttRetInfo_descriptor_,
      AttRetInfo::default_instance_,
      AttRetInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttRetInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttRetInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AttRetInfo));
  AttackResult_descriptor_ = file->message_type(21);
  static const int AttackResult_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttackResult, atttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttackResult, attmoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttackResult, step_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttackResult, damagetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttackResult, attlist_),
  };
  AttackResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AttackResult_descriptor_,
      AttackResult::default_instance_,
      AttackResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttackResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttackResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AttackResult));
  AttackResult_ProtoModID_descriptor_ = AttackResult_descriptor_->enum_type(0);
  AttackResult_ProtoFunID_descriptor_ = AttackResult_descriptor_->enum_type(1);
  stMapObjAddHP_descriptor_ = file->message_type(22);
  static const int stMapObjAddHP_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stMapObjAddHP, motype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stMapObjAddHP, moid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stMapObjAddHP, addhp_),
  };
  stMapObjAddHP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stMapObjAddHP_descriptor_,
      stMapObjAddHP::default_instance_,
      stMapObjAddHP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stMapObjAddHP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stMapObjAddHP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stMapObjAddHP));
  stMapObjAddHP_ProtoModID_descriptor_ = stMapObjAddHP_descriptor_->enum_type(0);
  stMapObjAddHP_ProtoFunID_descriptor_ = stMapObjAddHP_descriptor_->enum_type(1);
  stInstantMove_descriptor_ = file->message_type(23);
  static const int stInstantMove_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stInstantMove, moid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stInstantMove, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stInstantMove, destpos_),
  };
  stInstantMove_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stInstantMove_descriptor_,
      stInstantMove::default_instance_,
      stInstantMove_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stInstantMove, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stInstantMove, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stInstantMove));
  stInstantMove_ProtoModID_descriptor_ = stInstantMove_descriptor_->enum_type(0);
  stInstantMove_ProtoFunID_descriptor_ = stInstantMove_descriptor_->enum_type(1);
  stAttackFail_descriptor_ = file->message_type(24);
  static const int stAttackFail_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAttackFail, errorcode_),
  };
  stAttackFail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stAttackFail_descriptor_,
      stAttackFail::default_instance_,
      stAttackFail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAttackFail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAttackFail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stAttackFail));
  stAttackFail_ErrorCode_descriptor_ = stAttackFail_descriptor_->enum_type(0);
  stAttackFail_ProtoModID_descriptor_ = stAttackFail_descriptor_->enum_type(1);
  stAttackFail_ProtoFunID_descriptor_ = stAttackFail_descriptor_->enum_type(2);
  stInterruptPlaySkill_descriptor_ = file->message_type(25);
  static const int stInterruptPlaySkill_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stInterruptPlaySkill, atttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stInterruptPlaySkill, attid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stInterruptPlaySkill, nextaction_),
  };
  stInterruptPlaySkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stInterruptPlaySkill_descriptor_,
      stInterruptPlaySkill::default_instance_,
      stInterruptPlaySkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stInterruptPlaySkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stInterruptPlaySkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stInterruptPlaySkill));
  stInterruptPlaySkill_ProtoModID_descriptor_ = stInterruptPlaySkill_descriptor_->enum_type(0);
  stInterruptPlaySkill_ProtoFunID_descriptor_ = stInterruptPlaySkill_descriptor_->enum_type(1);
  stMapObjectChgDir_descriptor_ = file->message_type(26);
  static const int stMapObjectChgDir_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stMapObjectChgDir, motype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stMapObjectChgDir, moid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stMapObjectChgDir, dir_),
  };
  stMapObjectChgDir_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stMapObjectChgDir_descriptor_,
      stMapObjectChgDir::default_instance_,
      stMapObjectChgDir_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stMapObjectChgDir, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stMapObjectChgDir, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stMapObjectChgDir));
  stMapObjectChgDir_ProtoModID_descriptor_ = stMapObjectChgDir_descriptor_->enum_type(0);
  stMapObjectChgDir_ProtoFunID_descriptor_ = stMapObjectChgDir_descriptor_->enum_type(1);
  stReqOnlineUserOnMainCity_descriptor_ = file->message_type(27);
  static const int stReqOnlineUserOnMainCity_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqOnlineUserOnMainCity, charid_),
  };
  stReqOnlineUserOnMainCity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqOnlineUserOnMainCity_descriptor_,
      stReqOnlineUserOnMainCity::default_instance_,
      stReqOnlineUserOnMainCity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqOnlineUserOnMainCity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqOnlineUserOnMainCity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqOnlineUserOnMainCity));
  stReqOnlineUserOnMainCity_ProtoModID_descriptor_ = stReqOnlineUserOnMainCity_descriptor_->enum_type(0);
  stReqOnlineUserOnMainCity_ProtoFunID_descriptor_ = stReqOnlineUserOnMainCity_descriptor_->enum_type(1);
  stOnlineUserOnMainCity_descriptor_ = file->message_type(28);
  static const int stOnlineUserOnMainCity_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOnlineUserOnMainCity, userlist_),
  };
  stOnlineUserOnMainCity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stOnlineUserOnMainCity_descriptor_,
      stOnlineUserOnMainCity::default_instance_,
      stOnlineUserOnMainCity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOnlineUserOnMainCity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOnlineUserOnMainCity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stOnlineUserOnMainCity));
  stOnlineUserOnMainCity_ProtoModID_descriptor_ = stOnlineUserOnMainCity_descriptor_->enum_type(0);
  stOnlineUserOnMainCity_ProtoFunID_descriptor_ = stOnlineUserOnMainCity_descriptor_->enum_type(1);
  stChangeHeroGroup_descriptor_ = file->message_type(29);
  static const int stChangeHeroGroup_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stChangeHeroGroup, groupid_),
  };
  stChangeHeroGroup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stChangeHeroGroup_descriptor_,
      stChangeHeroGroup::default_instance_,
      stChangeHeroGroup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stChangeHeroGroup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stChangeHeroGroup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stChangeHeroGroup));
  stChangeHeroGroup_ProtoModID_descriptor_ = stChangeHeroGroup_descriptor_->enum_type(0);
  stChangeHeroGroup_ProtoFunID_descriptor_ = stChangeHeroGroup_descriptor_->enum_type(1);
  stChangeHeroGroupError_descriptor_ = file->message_type(30);
  static const int stChangeHeroGroupError_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stChangeHeroGroupError, result_),
  };
  stChangeHeroGroupError_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stChangeHeroGroupError_descriptor_,
      stChangeHeroGroupError::default_instance_,
      stChangeHeroGroupError_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stChangeHeroGroupError, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stChangeHeroGroupError, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stChangeHeroGroupError));
  stChangeHeroGroupError_eResult_descriptor_ = stChangeHeroGroupError_descriptor_->enum_type(0);
  stChangeHeroGroupError_ProtoModID_descriptor_ = stChangeHeroGroupError_descriptor_->enum_type(1);
  stChangeHeroGroupError_ProtoFunID_descriptor_ = stChangeHeroGroupError_descriptor_->enum_type(2);
  stNotifyObjMP_descriptor_ = file->message_type(31);
  static const int stNotifyObjMP_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyObjMP, motype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyObjMP, moid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyObjMP, num_),
  };
  stNotifyObjMP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stNotifyObjMP_descriptor_,
      stNotifyObjMP::default_instance_,
      stNotifyObjMP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyObjMP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyObjMP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stNotifyObjMP));
  stNotifyObjMP_ProtoModID_descriptor_ = stNotifyObjMP_descriptor_->enum_type(0);
  stNotifyObjMP_ProtoFunID_descriptor_ = stNotifyObjMP_descriptor_->enum_type(1);
  stNotifyObjBati_descriptor_ = file->message_type(32);
  static const int stNotifyObjBati_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyObjBati, motype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyObjBati, moid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyObjBati, num_),
  };
  stNotifyObjBati_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stNotifyObjBati_descriptor_,
      stNotifyObjBati::default_instance_,
      stNotifyObjBati_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyObjBati, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyObjBati, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stNotifyObjBati));
  stNotifyObjBati_ProtoModID_descriptor_ = stNotifyObjBati_descriptor_->enum_type(0);
  stNotifyObjBati_ProtoFunID_descriptor_ = stNotifyObjBati_descriptor_->enum_type(1);
  stAddBufferState2Me_descriptor_ = file->message_type(33);
  static const int stAddBufferState2Me_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAddBufferState2Me, atttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAddBufferState2Me, attmodid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAddBufferState2Me, stateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAddBufferState2Me, deftype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAddBufferState2Me, defmodid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAddBufferState2Me, extraval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAddBufferState2Me, buffid_),
  };
  stAddBufferState2Me_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stAddBufferState2Me_descriptor_,
      stAddBufferState2Me::default_instance_,
      stAddBufferState2Me_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAddBufferState2Me, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAddBufferState2Me, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stAddBufferState2Me));
  stAddBufferState2Me_ProtoModID_descriptor_ = stAddBufferState2Me_descriptor_->enum_type(0);
  stAddBufferState2Me_ProtoFunID_descriptor_ = stAddBufferState2Me_descriptor_->enum_type(1);
  stDelBufferState_descriptor_ = file->message_type(34);
  static const int stDelBufferState_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDelBufferState, stateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDelBufferState, motype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDelBufferState, moid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDelBufferState, bufferid_),
  };
  stDelBufferState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stDelBufferState_descriptor_,
      stDelBufferState::default_instance_,
      stDelBufferState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDelBufferState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDelBufferState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stDelBufferState));
  stDelBufferState_ProtoModID_descriptor_ = stDelBufferState_descriptor_->enum_type(0);
  stDelBufferState_ProtoFunID_descriptor_ = stDelBufferState_descriptor_->enum_type(1);
  stNotifyExecAI_descriptor_ = file->message_type(35);
  static const int stNotifyExecAI_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyExecAI, charid_),
  };
  stNotifyExecAI_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stNotifyExecAI_descriptor_,
      stNotifyExecAI::default_instance_,
      stNotifyExecAI_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyExecAI, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyExecAI, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stNotifyExecAI));
  stNotifyExecAI_ProtoModID_descriptor_ = stNotifyExecAI_descriptor_->enum_type(0);
  stNotifyExecAI_ProtoFunID_descriptor_ = stNotifyExecAI_descriptor_->enum_type(1);
  stAlertBossAppear_descriptor_ = file->message_type(36);
  static const int stAlertBossAppear_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAlertBossAppear, delay_),
  };
  stAlertBossAppear_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stAlertBossAppear_descriptor_,
      stAlertBossAppear::default_instance_,
      stAlertBossAppear_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAlertBossAppear, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAlertBossAppear, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stAlertBossAppear));
  stAlertBossAppear_ProtoModID_descriptor_ = stAlertBossAppear_descriptor_->enum_type(0);
  stAlertBossAppear_ProtoFunID_descriptor_ = stAlertBossAppear_descriptor_->enum_type(1);
  stReqChangeMainCity_descriptor_ = file->message_type(37);
  static const int stReqChangeMainCity_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqChangeMainCity, levelid_),
  };
  stReqChangeMainCity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqChangeMainCity_descriptor_,
      stReqChangeMainCity::default_instance_,
      stReqChangeMainCity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqChangeMainCity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqChangeMainCity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqChangeMainCity));
  stReqChangeMainCity_ProtoModID_descriptor_ = stReqChangeMainCity_descriptor_->enum_type(0);
  stReqChangeMainCity_ProtoFunID_descriptor_ = stReqChangeMainCity_descriptor_->enum_type(1);
  stNotifyAddFireWall_descriptor_ = file->message_type(38);
  static const int stNotifyAddFireWall_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyAddFireWall, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyAddFireWall, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyAddFireWall, z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyAddFireWall, lasttime_),
  };
  stNotifyAddFireWall_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stNotifyAddFireWall_descriptor_,
      stNotifyAddFireWall::default_instance_,
      stNotifyAddFireWall_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyAddFireWall, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyAddFireWall, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stNotifyAddFireWall));
  stNotifyAddFireWall_ProtoModID_descriptor_ = stNotifyAddFireWall_descriptor_->enum_type(0);
  stNotifyAddFireWall_ProtoFunID_descriptor_ = stNotifyAddFireWall_descriptor_->enum_type(1);
  stBeginThunderDamage_descriptor_ = file->message_type(39);
  static const int stBeginThunderDamage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBeginThunderDamage, attmodtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBeginThunderDamage, attmodid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBeginThunderDamage, deftype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBeginThunderDamage, defmodid_),
  };
  stBeginThunderDamage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stBeginThunderDamage_descriptor_,
      stBeginThunderDamage::default_instance_,
      stBeginThunderDamage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBeginThunderDamage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBeginThunderDamage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stBeginThunderDamage));
  stBeginThunderDamage_ProtoModID_descriptor_ = stBeginThunderDamage_descriptor_->enum_type(0);
  stBeginThunderDamage_ProtoFunID_descriptor_ = stBeginThunderDamage_descriptor_->enum_type(1);
  stCalcThunderDamage_descriptor_ = file->message_type(40);
  static const int stCalcThunderDamage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCalcThunderDamage, attmodtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCalcThunderDamage, attmodid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCalcThunderDamage, deftype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCalcThunderDamage, defmodid_),
  };
  stCalcThunderDamage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stCalcThunderDamage_descriptor_,
      stCalcThunderDamage::default_instance_,
      stCalcThunderDamage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCalcThunderDamage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCalcThunderDamage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stCalcThunderDamage));
  stCalcThunderDamage_ProtoModID_descriptor_ = stCalcThunderDamage_descriptor_->enum_type(0);
  stCalcThunderDamage_ProtoFunID_descriptor_ = stCalcThunderDamage_descriptor_->enum_type(1);
  stDirectDamge_descriptor_ = file->message_type(41);
  static const int stDirectDamge_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDirectDamge, modtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDirectDamge, modid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDirectDamge, damage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDirectDamge, atttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDirectDamge, attmodid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDirectDamge, result_),
  };
  stDirectDamge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stDirectDamge_descriptor_,
      stDirectDamge::default_instance_,
      stDirectDamge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDirectDamge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDirectDamge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stDirectDamge));
  stDirectDamge_ProtoModID_descriptor_ = stDirectDamge_descriptor_->enum_type(0);
  stDirectDamge_ProtoFunID_descriptor_ = stDirectDamge_descriptor_->enum_type(1);
  stNotifyObjDie_descriptor_ = file->message_type(42);
  static const int stNotifyObjDie_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyObjDie, motype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyObjDie, moid_),
  };
  stNotifyObjDie_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stNotifyObjDie_descriptor_,
      stNotifyObjDie::default_instance_,
      stNotifyObjDie_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyObjDie, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyObjDie, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stNotifyObjDie));
  stNotifyObjDie_ProtoModID_descriptor_ = stNotifyObjDie_descriptor_->enum_type(0);
  stNotifyObjDie_ProtoFunID_descriptor_ = stNotifyObjDie_descriptor_->enum_type(1);
  stBeginBattle_descriptor_ = file->message_type(43);
  static const int stBeginBattle_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBeginBattle, delay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBeginBattle, remaintime_),
  };
  stBeginBattle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stBeginBattle_descriptor_,
      stBeginBattle::default_instance_,
      stBeginBattle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBeginBattle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBeginBattle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stBeginBattle));
  stBeginBattle_ProtoModID_descriptor_ = stBeginBattle_descriptor_->enum_type(0);
  stBeginBattle_ProtoFunID_descriptor_ = stBeginBattle_descriptor_->enum_type(1);
  stThrowSkillFail_descriptor_ = file->message_type(44);
  static const int stThrowSkillFail_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stThrowSkillFail, reason_),
  };
  stThrowSkillFail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stThrowSkillFail_descriptor_,
      stThrowSkillFail::default_instance_,
      stThrowSkillFail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stThrowSkillFail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stThrowSkillFail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stThrowSkillFail));
  stThrowSkillFail_eReason_descriptor_ = stThrowSkillFail_descriptor_->enum_type(0);
  stThrowSkillFail_ProtoModID_descriptor_ = stThrowSkillFail_descriptor_->enum_type(1);
  stThrowSkillFail_ProtoFunID_descriptor_ = stThrowSkillFail_descriptor_->enum_type(2);
  stNotifyResAppear_descriptor_ = file->message_type(45);
  static const int stNotifyResAppear_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyResAppear, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyResAppear, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyResAppear, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyResAppear, z_),
  };
  stNotifyResAppear_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stNotifyResAppear_descriptor_,
      stNotifyResAppear::default_instance_,
      stNotifyResAppear_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyResAppear, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyResAppear, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stNotifyResAppear));
  stNotifyResAppear_ProtoModID_descriptor_ = stNotifyResAppear_descriptor_->enum_type(0);
  stNotifyResAppear_ProtoFunID_descriptor_ = stNotifyResAppear_descriptor_->enum_type(1);
  stNotifyResDisappear_descriptor_ = file->message_type(46);
  static const int stNotifyResDisappear_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyResDisappear, id_),
  };
  stNotifyResDisappear_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stNotifyResDisappear_descriptor_,
      stNotifyResDisappear::default_instance_,
      stNotifyResDisappear_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyResDisappear, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyResDisappear, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stNotifyResDisappear));
  stNotifyResDisappear_ProtoModID_descriptor_ = stNotifyResDisappear_descriptor_->enum_type(0);
  stNotifyResDisappear_ProtoFunID_descriptor_ = stNotifyResDisappear_descriptor_->enum_type(1);
  stNotifyBuffAppear_descriptor_ = file->message_type(47);
  static const int stNotifyBuffAppear_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyBuffAppear, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyBuffAppear, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyBuffAppear, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyBuffAppear, z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyBuffAppear, buffid_),
  };
  stNotifyBuffAppear_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stNotifyBuffAppear_descriptor_,
      stNotifyBuffAppear::default_instance_,
      stNotifyBuffAppear_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyBuffAppear, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyBuffAppear, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stNotifyBuffAppear));
  stNotifyBuffAppear_ProtoModID_descriptor_ = stNotifyBuffAppear_descriptor_->enum_type(0);
  stNotifyBuffAppear_ProtoFunID_descriptor_ = stNotifyBuffAppear_descriptor_->enum_type(1);
  stNotifyBuffDisappear_descriptor_ = file->message_type(48);
  static const int stNotifyBuffDisappear_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyBuffDisappear, id_),
  };
  stNotifyBuffDisappear_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stNotifyBuffDisappear_descriptor_,
      stNotifyBuffDisappear::default_instance_,
      stNotifyBuffDisappear_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyBuffDisappear, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyBuffDisappear, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stNotifyBuffDisappear));
  stNotifyBuffDisappear_ProtoModID_descriptor_ = stNotifyBuffDisappear_descriptor_->enum_type(0);
  stNotifyBuffDisappear_ProtoFunID_descriptor_ = stNotifyBuffDisappear_descriptor_->enum_type(1);
  stOpCopyMapRes_descriptor_ = file->message_type(49);
  static const int stOpCopyMapRes_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOpCopyMapRes, collect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOpCopyMapRes, time_),
  };
  stOpCopyMapRes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stOpCopyMapRes_descriptor_,
      stOpCopyMapRes::default_instance_,
      stOpCopyMapRes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOpCopyMapRes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOpCopyMapRes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stOpCopyMapRes));
  stOpCopyMapRes_ProtoModID_descriptor_ = stOpCopyMapRes_descriptor_->enum_type(0);
  stOpCopyMapRes_ProtoFunID_descriptor_ = stOpCopyMapRes_descriptor_->enum_type(1);
  stPlayerGotBuff_descriptor_ = file->message_type(50);
  static const int stPlayerGotBuff_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPlayerGotBuff, buffid_),
  };
  stPlayerGotBuff_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stPlayerGotBuff_descriptor_,
      stPlayerGotBuff::default_instance_,
      stPlayerGotBuff_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPlayerGotBuff, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPlayerGotBuff, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stPlayerGotBuff));
  stPlayerGotBuff_ProtoModID_descriptor_ = stPlayerGotBuff_descriptor_->enum_type(0);
  stPlayerGotBuff_ProtoFunID_descriptor_ = stPlayerGotBuff_descriptor_->enum_type(1);
  stPlayerCollectSuccess_descriptor_ = file->message_type(51);
  static const int stPlayerCollectSuccess_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPlayerCollectSuccess, score_),
  };
  stPlayerCollectSuccess_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stPlayerCollectSuccess_descriptor_,
      stPlayerCollectSuccess::default_instance_,
      stPlayerCollectSuccess_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPlayerCollectSuccess, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPlayerCollectSuccess, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stPlayerCollectSuccess));
  stPlayerCollectSuccess_ProtoModID_descriptor_ = stPlayerCollectSuccess_descriptor_->enum_type(0);
  stPlayerCollectSuccess_ProtoFunID_descriptor_ = stPlayerCollectSuccess_descriptor_->enum_type(1);
  stSynCampScore_descriptor_ = file->message_type(52);
  static const int stSynCampScore_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynCampScore, campid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynCampScore, score_),
  };
  stSynCampScore_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSynCampScore_descriptor_,
      stSynCampScore::default_instance_,
      stSynCampScore_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynCampScore, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynCampScore, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSynCampScore));
  stSynCampScore_ProtoModID_descriptor_ = stSynCampScore_descriptor_->enum_type(0);
  stSynCampScore_ProtoFunID_descriptor_ = stSynCampScore_descriptor_->enum_type(1);
  stUserRelive_descriptor_ = file->message_type(53);
  static const int stUserRelive_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserRelive, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserRelive, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserRelive, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserRelive, z_),
  };
  stUserRelive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stUserRelive_descriptor_,
      stUserRelive::default_instance_,
      stUserRelive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserRelive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserRelive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stUserRelive));
  stUserRelive_ProtoModID_descriptor_ = stUserRelive_descriptor_->enum_type(0);
  stUserRelive_ProtoFunID_descriptor_ = stUserRelive_descriptor_->enum_type(1);
  stNotifyUserPointToPos_descriptor_ = file->message_type(54);
  static const int stNotifyUserPointToPos_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyUserPointToPos, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyUserPointToPos, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyUserPointToPos, z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyUserPointToPos, lasttime_),
  };
  stNotifyUserPointToPos_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stNotifyUserPointToPos_descriptor_,
      stNotifyUserPointToPos::default_instance_,
      stNotifyUserPointToPos_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyUserPointToPos, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyUserPointToPos, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stNotifyUserPointToPos));
  stNotifyUserPointToPos_ProtoModID_descriptor_ = stNotifyUserPointToPos_descriptor_->enum_type(0);
  stNotifyUserPointToPos_ProtoFunID_descriptor_ = stNotifyUserPointToPos_descriptor_->enum_type(1);
  eBeingState_descriptor_ = file->enum_type(0);
  eMapObjectType_descriptor_ = file->enum_type(1);
  eCamp_descriptor_ = file->enum_type(2);
  eAttResultType_descriptor_ = file->enum_type(3);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Map_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stNotifyEnterMapInfo_descriptor_, &stNotifyEnterMapInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stClientLoadResFinish_descriptor_, &stClientLoadResFinish::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqEnterLevelMap_descriptor_, &ReqEnterLevelMap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSynDropInfo_descriptor_, &stSynDropInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSynMonsterInfo_descriptor_, &stSynMonsterInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyEnterLevelMap_descriptor_, &NotifyEnterLevelMap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqLeaveLevel_descriptor_, &stReqLeaveLevel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stLeaveLevelSuccess_descriptor_, &stLeaveLevelSuccess::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stEnterLevelError_descriptor_, &stEnterLevelError::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stPlayerData_descriptor_, &stPlayerData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyPlayerAppear_descriptor_, &NotifyPlayerAppear::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyObjDisappear_descriptor_, &NotifyObjDisappear::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyObjDisappear_stObjDisappearInfo_descriptor_, &NotifyObjDisappear_stObjDisappearInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyNpcAppear_descriptor_, &NotifyNpcAppear::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyNpcAppear_stNpcData_descriptor_, &NotifyNpcAppear_stNpcData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyHeroAppear_descriptor_, &NotifyHeroAppear::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyHeroAppear_stHeroData_descriptor_, &NotifyHeroAppear_stHeroData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Pos_descriptor_, &Pos::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqMove_descriptor_, &ReqMove::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stNotifyMODMove_descriptor_, &stNotifyMODMove::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stNotifyMODMove_stModMoveInfo_descriptor_, &stNotifyMODMove_stModMoveInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stThrowSkill_descriptor_, &stThrowSkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stHitInfo_descriptor_, &stHitInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stNotifyHit_descriptor_, &stNotifyHit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AttRetInfo_descriptor_, &AttRetInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AttackResult_descriptor_, &AttackResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stMapObjAddHP_descriptor_, &stMapObjAddHP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stInstantMove_descriptor_, &stInstantMove::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stAttackFail_descriptor_, &stAttackFail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stInterruptPlaySkill_descriptor_, &stInterruptPlaySkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stMapObjectChgDir_descriptor_, &stMapObjectChgDir::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqOnlineUserOnMainCity_descriptor_, &stReqOnlineUserOnMainCity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stOnlineUserOnMainCity_descriptor_, &stOnlineUserOnMainCity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stChangeHeroGroup_descriptor_, &stChangeHeroGroup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stChangeHeroGroupError_descriptor_, &stChangeHeroGroupError::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stNotifyObjMP_descriptor_, &stNotifyObjMP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stNotifyObjBati_descriptor_, &stNotifyObjBati::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stAddBufferState2Me_descriptor_, &stAddBufferState2Me::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stDelBufferState_descriptor_, &stDelBufferState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stNotifyExecAI_descriptor_, &stNotifyExecAI::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stAlertBossAppear_descriptor_, &stAlertBossAppear::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqChangeMainCity_descriptor_, &stReqChangeMainCity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stNotifyAddFireWall_descriptor_, &stNotifyAddFireWall::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stBeginThunderDamage_descriptor_, &stBeginThunderDamage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stCalcThunderDamage_descriptor_, &stCalcThunderDamage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stDirectDamge_descriptor_, &stDirectDamge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stNotifyObjDie_descriptor_, &stNotifyObjDie::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stBeginBattle_descriptor_, &stBeginBattle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stThrowSkillFail_descriptor_, &stThrowSkillFail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stNotifyResAppear_descriptor_, &stNotifyResAppear::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stNotifyResDisappear_descriptor_, &stNotifyResDisappear::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stNotifyBuffAppear_descriptor_, &stNotifyBuffAppear::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stNotifyBuffDisappear_descriptor_, &stNotifyBuffDisappear::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stOpCopyMapRes_descriptor_, &stOpCopyMapRes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stPlayerGotBuff_descriptor_, &stPlayerGotBuff::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stPlayerCollectSuccess_descriptor_, &stPlayerCollectSuccess::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSynCampScore_descriptor_, &stSynCampScore::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stUserRelive_descriptor_, &stUserRelive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stNotifyUserPointToPos_descriptor_, &stNotifyUserPointToPos::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Map_2eproto() {
  delete stNotifyEnterMapInfo::default_instance_;
  delete stNotifyEnterMapInfo_reflection_;
  delete stClientLoadResFinish::default_instance_;
  delete stClientLoadResFinish_reflection_;
  delete ReqEnterLevelMap::default_instance_;
  delete ReqEnterLevelMap_reflection_;
  delete stSynDropInfo::default_instance_;
  delete stSynDropInfo_reflection_;
  delete stSynMonsterInfo::default_instance_;
  delete stSynMonsterInfo_reflection_;
  delete NotifyEnterLevelMap::default_instance_;
  delete NotifyEnterLevelMap_reflection_;
  delete stReqLeaveLevel::default_instance_;
  delete stReqLeaveLevel_reflection_;
  delete stLeaveLevelSuccess::default_instance_;
  delete stLeaveLevelSuccess_reflection_;
  delete stEnterLevelError::default_instance_;
  delete stEnterLevelError_reflection_;
  delete stPlayerData::default_instance_;
  delete stPlayerData_reflection_;
  delete NotifyPlayerAppear::default_instance_;
  delete NotifyPlayerAppear_reflection_;
  delete NotifyObjDisappear::default_instance_;
  delete NotifyObjDisappear_reflection_;
  delete NotifyObjDisappear_stObjDisappearInfo::default_instance_;
  delete NotifyObjDisappear_stObjDisappearInfo_reflection_;
  delete NotifyNpcAppear::default_instance_;
  delete NotifyNpcAppear_reflection_;
  delete NotifyNpcAppear_stNpcData::default_instance_;
  delete NotifyNpcAppear_stNpcData_reflection_;
  delete NotifyHeroAppear::default_instance_;
  delete NotifyHeroAppear_reflection_;
  delete NotifyHeroAppear_stHeroData::default_instance_;
  delete NotifyHeroAppear_stHeroData_reflection_;
  delete Pos::default_instance_;
  delete Pos_reflection_;
  delete ReqMove::default_instance_;
  delete ReqMove_reflection_;
  delete stNotifyMODMove::default_instance_;
  delete stNotifyMODMove_reflection_;
  delete stNotifyMODMove_stModMoveInfo::default_instance_;
  delete stNotifyMODMove_stModMoveInfo_reflection_;
  delete stThrowSkill::default_instance_;
  delete stThrowSkill_reflection_;
  delete stHitInfo::default_instance_;
  delete stHitInfo_reflection_;
  delete stNotifyHit::default_instance_;
  delete stNotifyHit_reflection_;
  delete AttRetInfo::default_instance_;
  delete AttRetInfo_reflection_;
  delete AttackResult::default_instance_;
  delete AttackResult_reflection_;
  delete stMapObjAddHP::default_instance_;
  delete stMapObjAddHP_reflection_;
  delete stInstantMove::default_instance_;
  delete stInstantMove_reflection_;
  delete stAttackFail::default_instance_;
  delete stAttackFail_reflection_;
  delete stInterruptPlaySkill::default_instance_;
  delete stInterruptPlaySkill_reflection_;
  delete stMapObjectChgDir::default_instance_;
  delete stMapObjectChgDir_reflection_;
  delete stReqOnlineUserOnMainCity::default_instance_;
  delete stReqOnlineUserOnMainCity_reflection_;
  delete stOnlineUserOnMainCity::default_instance_;
  delete stOnlineUserOnMainCity_reflection_;
  delete stChangeHeroGroup::default_instance_;
  delete stChangeHeroGroup_reflection_;
  delete stChangeHeroGroupError::default_instance_;
  delete stChangeHeroGroupError_reflection_;
  delete stNotifyObjMP::default_instance_;
  delete stNotifyObjMP_reflection_;
  delete stNotifyObjBati::default_instance_;
  delete stNotifyObjBati_reflection_;
  delete stAddBufferState2Me::default_instance_;
  delete stAddBufferState2Me_reflection_;
  delete stDelBufferState::default_instance_;
  delete stDelBufferState_reflection_;
  delete stNotifyExecAI::default_instance_;
  delete stNotifyExecAI_reflection_;
  delete stAlertBossAppear::default_instance_;
  delete stAlertBossAppear_reflection_;
  delete stReqChangeMainCity::default_instance_;
  delete stReqChangeMainCity_reflection_;
  delete stNotifyAddFireWall::default_instance_;
  delete stNotifyAddFireWall_reflection_;
  delete stBeginThunderDamage::default_instance_;
  delete stBeginThunderDamage_reflection_;
  delete stCalcThunderDamage::default_instance_;
  delete stCalcThunderDamage_reflection_;
  delete stDirectDamge::default_instance_;
  delete stDirectDamge_reflection_;
  delete stNotifyObjDie::default_instance_;
  delete stNotifyObjDie_reflection_;
  delete stBeginBattle::default_instance_;
  delete stBeginBattle_reflection_;
  delete stThrowSkillFail::default_instance_;
  delete stThrowSkillFail_reflection_;
  delete stNotifyResAppear::default_instance_;
  delete stNotifyResAppear_reflection_;
  delete stNotifyResDisappear::default_instance_;
  delete stNotifyResDisappear_reflection_;
  delete stNotifyBuffAppear::default_instance_;
  delete stNotifyBuffAppear_reflection_;
  delete stNotifyBuffDisappear::default_instance_;
  delete stNotifyBuffDisappear_reflection_;
  delete stOpCopyMapRes::default_instance_;
  delete stOpCopyMapRes_reflection_;
  delete stPlayerGotBuff::default_instance_;
  delete stPlayerGotBuff_reflection_;
  delete stPlayerCollectSuccess::default_instance_;
  delete stPlayerCollectSuccess_reflection_;
  delete stSynCampScore::default_instance_;
  delete stSynCampScore_reflection_;
  delete stUserRelive::default_instance_;
  delete stUserRelive_reflection_;
  delete stNotifyUserPointToPos::default_instance_;
  delete stNotifyUserPointToPos_reflection_;
}

void protobuf_AddDesc_Map_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Proto::protobuf_AddDesc_ModID_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tMap.proto\022\003Map\032\013ModID.proto\"W\n\024stNotif"
    "yEnterMapInfo\022\r\n\005mapID\030\001 \001(\r\"\027\n\nProtoMod"
    "ID\022\t\n\005ModID\020\003\"\027\n\nProtoFunID\022\t\n\005FunID\020\001\"Z"
    "\n\025stClientLoadResFinish\022\017\n\007levelID\030\001 \001(\r"
    "\"\027\n\nProtoModID\022\t\n\005ModID\020\003\"\027\n\nProtoFunID\022"
    "\t\n\005FunID\020\002\"U\n\020ReqEnterLevelMap\022\017\n\007levelI"
    "D\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\003\"\027\n\nProt"
    "oFunID\022\t\n\005FunID\020\003\",\n\rstSynDropInfo\022\016\n\006it"
    "emID\030\001 \001(\r\022\013\n\003num\030\002 \001(\r\"8\n\020stSynMonsterI"
    "nfo\022\021\n\tmonsterID\030\001 \001(\r\022\021\n\tmonsterLv\030\002 \001("
    "\r\"\371\001\n\023NotifyEnterLevelMap\022\017\n\007levelID\030\001 \001"
    "(\r\022$\n\010dropInfo\030\002 \003(\0132\022.Map.stSynDropInfo"
    "\022*\n\013monsterInfo\030\003 \003(\0132\025.Map.stSynMonster"
    "Info\022\'\n\010bossInfo\030\004 \001(\0132\025.Map.stSynMonste"
    "rInfo\022$\n\010drawInfo\030\005 \001(\0132\022.Map.stSynDropI"
    "nfo\"\027\n\nProtoModID\022\t\n\005ModID\020\003\"\027\n\nProtoFun"
    "ID\022\t\n\005FunID\020\004\"Q\n\017stReqLeaveLevel\022\014\n\004flag"
    "\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\003\"\027\n\nProto"
    "FunID\022\t\n\005FunID\020\005\"G\n\023stLeaveLevelSuccess\""
    "\027\n\nProtoModID\022\t\n\005ModID\020\003\"\027\n\nProtoFunID\022\t"
    "\n\005FunID\020\006\"\257\002\n\021stEnterLevelError\022/\n\terror"
    "Code\030\001 \001(\0162\034.Map.stEnterLevelError.Error"
    "\"\266\001\n\005Error\022\020\n\014HAS_IN_LEVEL\020\001\022\030\n\024PRE_LEVE"
    "L_NOT_FINISH\020\002\022\021\n\rSVR_CFG_ERROR\020\003\022\017\n\013LEV"
    "EL_LIMIT\020\004\022\021\n\rSP_NOT_ENGOUH\020\005\022\025\n\021LILIAN_"
    "NOT_ENOUGH\020\006\022\024\n\020RUSH_NUM_USE_OUT\020\007\022\014\n\010BA"
    "G_FULL\020\010\022\017\n\013EQUIP_LIMIT\020\t\"\027\n\nProtoModID\022"
    "\t\n\005ModID\020\003\"\027\n\nProtoFunID\022\t\n\005FunID\020\007\"\212\005\n\014"
    "stPlayerData\022\014\n\004moID\030\001 \001(\r\022\020\n\010roleName\030\002"
    " \001(\t\022\013\n\003job\030\003 \001(\r\022\013\n\003sex\030\004 \001(\r\022\r\n\005level\030"
    "\005 \001(\r\022\t\n\001x\030\006 \001(\r\022\t\n\001y\030\007 \001(\r\022\t\n\001z\030\010 \001(\r\022\013"
    "\n\003dir\030\t \001(\r\022\016\n\006campID\030\n \001(\r\022\n\n\002hp\030\013 \001(\r\022"
    "\r\n\005maxHP\030\014 \001(\r\022\n\n\002mp\030\r \001(\r\022\r\n\005maxMP\030\016 \001("
    "\r\022\014\n\004bati\030\017 \001(\r\022\017\n\007maxBati\030\020 \001(\r\022\016\n\006head"
    "ID\030\021 \001(\r\022\016\n\006bodyID\030\022 \001(\r\022\020\n\010weaponID\030\023 \001"
    "(\r\022\020\n\010cloackID\030\024 \001(\r\022\016\n\006wingID\030\025 \001(\r\022\016\n\006"
    "shoeID\030\026 \001(\r\022\023\n\013fashionHair\030\027 \001(\r\022\023\n\013fas"
    "hionFace\030\030 \001(\r\022\023\n\013fashionBody\030\031 \001(\r\022\025\n\rf"
    "ashionWeapon\030\032 \001(\r\022\023\n\013fashionShoe\030\033 \001(\r\022"
    "\031\n\021fashionDecoration\030\034 \001(\r\022\017\n\007titleID\030\035 "
    "\001(\r\022\020\n\010effectID\030\036 \001(\r\022\023\n\013wingBreakLv\030\037 \001"
    "(\r\022\026\n\016followSpriteId\030  \001(\r\022\027\n\017followSpri"
    "teLvl\030! \001(\r\022\025\n\rfashionWingID\030\" \001(\r\022\022\n\nco"
    "uplename\030# \001(\t\022\017\n\007mountID\030$ \001(\r\022\017\n\007isRob"
    "ot\030% \001(\010\"g\n\022NotifyPlayerAppear\022\037\n\004data\030\001"
    " \003(\0132\021.Map.stPlayerData\"\027\n\nProtoModID\022\t\n"
    "\005ModID\020\003\"\027\n\nProtoFunID\022\t\n\005FunID\020\010\"\264\001\n\022No"
    "tifyObjDisappear\0228\n\004data\030\001 \003(\0132*.Map.Not"
    "ifyObjDisappear.stObjDisappearInfo\0322\n\022st"
    "ObjDisappearInfo\022\014\n\004moID\030\001 \001(\r\022\016\n\006moType"
    "\030\002 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\003\"\027\n\nProto"
    "FunID\022\t\n\005FunID\020\t\"\245\002\n\017NotifyNpcAppear\022,\n\004"
    "data\030\001 \003(\0132\036.Map.NotifyNpcAppear.stNpcDa"
    "ta\032\261\001\n\tstNpcData\022\r\n\005npcID\030\001 \001(\r\022\014\n\004moID\030"
    "\002 \001(\r\022\t\n\001x\030\003 \001(\r\022\t\n\001y\030\004 \001(\r\022\t\n\001z\030\005 \001(\r\022\n"
    "\n\002hp\030\006 \001(\r\022\r\n\005level\030\007 \001(\r\022\022\n\nbornAminID\030"
    "\010 \001(\r\022\016\n\006isBoss\030\t \001(\010\022\020\n\010dirAngle\030\n \001(\r\022"
    "\025\n\ractionGroupID\030\013 \001(\r\"\027\n\nProtoModID\022\t\n\005"
    "ModID\020\003\"\027\n\nProtoFunID\022\t\n\005FunID\020\n\"\264\002\n\020Not"
    "ifyHeroAppear\022.\n\004data\030\001 \003(\0132 .Map.Notify"
    "HeroAppear.stHeroData\032\275\001\n\nstHeroData\022\016\n\006"
    "heroID\030\001 \001(\r\022\014\n\004moID\030\002 \001(\r\022\t\n\001x\030\003 \001(\r\022\t\n"
    "\001y\030\004 \001(\r\022\t\n\001z\030\005 \001(\r\022\n\n\002hp\030\006 \001(\r\022\r\n\005maxHP"
    "\030\007 \001(\r\022\022\n\nmasterMoID\030\010 \001(\r\022\016\n\006campID\030\t \001"
    "(\r\022\r\n\005level\030\n \001(\r\022\025\n\rcreateBySkill\030\013 \001(\010"
    "\022\013\n\003pos\030\014 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\003\"\027"
    "\n\nProtoFunID\022\t\n\005FunID\020\013\"&\n\003Pos\022\t\n\001x\030\001 \001("
    "\r\022\t\n\001y\030\002 \001(\r\022\t\n\001z\030\003 \001(\r\"\202\001\n\007ReqMove\022\014\n\004m"
    "oID\030\001 \001(\r\022\014\n\004type\030\002 \001(\r\022\026\n\004path\030\003 \001(\0132\010."
    "Map.Pos\022\021\n\tisInstant\030\004 \001(\010\"\027\n\nProtoModID"
    "\022\t\n\005ModID\020\003\"\027\n\nProtoFunID\022\t\n\005FunID\020\014\"\321\001\n"
    "\017stNotifyMODMove\0220\n\004data\030\001 \003(\0132\".Map.stN"
    "otifyMODMove.stModMoveInfo\032Z\n\rstModMoveI"
    "nfo\022\014\n\004type\030\001 \001(\r\022\r\n\005modID\030\002 \001(\r\022\t\n\001x\030\003 "
    "\001(\r\022\t\n\001y\030\004 \001(\r\022\t\n\001z\030\005 \001(\r\022\013\n\003dir\030\006 \001(\r\"\027"
    "\n\nProtoModID\022\t\n\005ModID\020\003\"\027\n\nProtoFunID\022\t\n"
    "\005FunID\020\r\"\177\n\014stThrowSkill\022\r\n\005skill\030\001 \001(\r\022"
    "\017\n\007attType\030\002 \001(\r\022\017\n\007attMoID\030\003 \001(\r\022\014\n\004ste"
    "p\030\004 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\003\"\027\n\nProt"
    "oFunID\022\t\n\005FunID\020\016\"N\n\tstHitInfo\022\016\n\006moType"
    "\030\001 \001(\r\022\014\n\004moID\030\002 \001(\r\022\017\n\007skillID\030\003 \001(\r\022\022\n"
    "\ndamageTime\030\004 \001(\r\"\221\001\n\013stNotifyHit\022\017\n\007att"
    "Type\030\001 \001(\r\022\017\n\007attMoID\030\002 \001(\r\022\014\n\004step\030\003 \001("
    "\r\022 \n\010hitInfos\030\004 \003(\0132\016.Map.stHitInfo\"\027\n\nP"
    "rotoModID\022\t\n\005ModID\020\003\"\027\n\nProtoFunID\022\t\n\005Fu"
    "nID\020\017\"V\n\nAttRetInfo\022\014\n\004type\030\001 \001(\r\022\014\n\004moI"
    "D\030\002 \001(\r\022\r\n\005skill\030\003 \001(\r\022\r\n\005decHP\030\004 \001(\r\022\016\n"
    "\006result\030\005 \001(\r\"\246\001\n\014AttackResult\022\017\n\007attTyp"
    "e\030\001 \001(\r\022\017\n\007attMoID\030\002 \001(\r\022\014\n\004step\030\003 \001(\r\022\022"
    "\n\ndamageTime\030\004 \001(\r\022 \n\007attList\030\005 \003(\0132\017.Ma"
    "p.AttRetInfo\"\027\n\nProtoModID\022\t\n\005ModID\020\003\"\027\n"
    "\nProtoFunID\022\t\n\005FunID\020\020\"n\n\rstMapObjAddHP\022"
    "\016\n\006moType\030\001 \001(\r\022\014\n\004moID\030\002 \001(\r\022\r\n\005addHP\030\003"
    " \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\003\"\027\n\nProtoFu"
    "nID\022\t\n\005FunID\020\021\"x\n\rstInstantMove\022\014\n\004moID\030"
    "\001 \001(\r\022\014\n\004type\030\002 \001(\r\022\031\n\007destPos\030\003 \001(\0132\010.M"
    "ap.Pos\"\027\n\nProtoModID\022\t\n\005ModID\020\003\"\027\n\nProto"
    "FunID\022\t\n\005FunID\020\022\"\223\001\n\014stAttackFail\022.\n\terr"
    "orCode\030\001 \001(\0162\033.Map.stAttackFail.ErrorCod"
    "e\"!\n\tErrorCode\022\024\n\020TARGET_HASH_DIED\020\001\"\027\n\n"
    "ProtoModID\022\t\n\005ModID\020\003\"\027\n\nProtoFunID\022\t\n\005F"
    "unID\020\023\"|\n\024stInterruptPlaySkill\022\017\n\007attTyp"
    "e\030\001 \001(\r\022\r\n\005attID\030\002 \001(\r\022\022\n\nnextAction\030\003 \001"
    "(\t\"\027\n\nProtoModID\022\t\n\005ModID\020\003\"\027\n\nProtoFunI"
    "D\022\t\n\005FunID\020\024\"p\n\021stMapObjectChgDir\022\016\n\006moT"
    "ype\030\001 \001(\r\022\014\n\004moID\030\002 \001(\r\022\013\n\003dir\030\003 \001(\r\"\027\n\n"
    "ProtoModID\022\t\n\005ModID\020\003\"\027\n\nProtoFunID\022\t\n\005F"
    "unID\020\025\"]\n\031stReqOnlineUserOnMainCity\022\016\n\006c"
    "harID\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\003\"\027\n\n"
    "ProtoFunID\022\t\n\005FunID\020\026\"o\n\026stOnlineUserOnM"
    "ainCity\022#\n\010userList\030\001 \003(\0132\021.Map.stPlayer"
    "Data\"\027\n\nProtoModID\022\t\n\005ModID\020\003\"\027\n\nProtoFu"
    "nID\022\t\n\005FunID\020\027\"V\n\021stChangeHeroGroup\022\017\n\007g"
    "roupID\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\003\"\027\n"
    "\nProtoFunID\022\t\n\005FunID\020\030\"\275\001\n\026stChangeHeroG"
    "roupError\0223\n\006result\030\001 \001(\0162#.Map.stChange"
    "HeroGroupError.eResult\"<\n\007eResult\022\027\n\023eCH"
    "G_HERO_COLD_DOWN\020\001\022\030\n\024eCUR_GROUP_HAS_GOO"
    "UT\020\002\"\027\n\nProtoModID\022\t\n\005ModID\020\003\"\027\n\nProtoFu"
    "nID\022\t\n\005FunID\020\031\"l\n\rstNotifyObjMP\022\016\n\006moTyp"
    "e\030\001 \001(\r\022\014\n\004moID\030\002 \001(\r\022\013\n\003num\030\003 \001(\r\"\027\n\nPr"
    "otoModID\022\t\n\005ModID\020\003\"\027\n\nProtoFunID\022\t\n\005Fun"
    "ID\020\032\"n\n\017stNotifyObjBati\022\016\n\006moType\030\001 \001(\r\022"
    "\014\n\004moID\030\002 \001(\r\022\013\n\003num\030\003 \001(\r\"\027\n\nProtoModID"
    "\022\t\n\005ModID\020\003\"\027\n\nProtoFunID\022\t\n\005FunID\020\033\"\300\001\n"
    "\023stAddBufferState2Me\022\017\n\007attType\030\001 \001(\r\022\020\n"
    "\010attModID\030\002 \001(\r\022\017\n\007stateID\030\003 \001(\r\022\017\n\007defT"
    "ype\030\004 \001(\r\022\020\n\010defModID\030\005 \001(\r\022\020\n\010extraVal\030"
    "\006 \001(\005\022\016\n\006buffID\030\007 \001(\r\"\027\n\nProtoModID\022\t\n\005M"
    "odID\020\003\"\027\n\nProtoFunID\022\t\n\005FunID\020\034\"\205\001\n\020stDe"
    "lBufferState\022\017\n\007stateID\030\001 \001(\r\022\016\n\006moType\030"
    "\002 \001(\r\022\014\n\004moID\030\003 \001(\r\022\020\n\010bufferID\030\004 \001(\r\"\027\n"
    "\nProtoModID\022\t\n\005ModID\020\003\"\027\n\nProtoFunID\022\t\n\005"
    "FunID\020\035\"R\n\016stNotifyExecAI\022\016\n\006charID\030\001 \001("
    "\r\"\027\n\nProtoModID\022\t\n\005ModID\020\003\"\027\n\nProtoFunID"
    "\022\t\n\005FunID\020\036\"T\n\021stAlertBossAppear\022\r\n\005dela"
    "y\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\003\"\027\n\nProt"
    "oFunID\022\t\n\005FunID\020\037\"X\n\023stReqChangeMainCity"
    "\022\017\n\007levelID\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID"
    "\020\003\"\027\n\nProtoFunID\022\t\n\005FunID\020 \"z\n\023stNotifyA"
    "ddFireWall\022\t\n\001x\030\001 \001(\r\022\t\n\001y\030\002 \001(\r\022\t\n\001z\030\003 "
    "\001(\r\022\020\n\010lastTime\030\004 \001(\r\"\027\n\nProtoModID\022\t\n\005M"
    "odID\020\003\"\027\n\nProtoFunID\022\t\n\005FunID\020!\"\221\001\n\024stBe"
    "ginThunderDamage\022\022\n\nattModType\030\001 \001(\r\022\020\n\010"
    "attModID\030\002 \001(\r\022\017\n\007defType\030\003 \001(\r\022\020\n\010defMo"
    "dID\030\004 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\003\"\027\n\nPr"
    "otoFunID\022\t\n\005FunID\020\"\"\220\001\n\023stCalcThunderDam"
    "age\022\022\n\nattModType\030\001 \001(\r\022\020\n\010attModID\030\002 \001("
    "\r\022\017\n\007defType\030\003 \001(\r\022\020\n\010defModID\030\004 \001(\r\"\027\n\n"
    "ProtoModID\022\t\n\005ModID\020\003\"\027\n\nProtoFunID\022\t\n\005F"
    "unID\020#\"\244\001\n\rstDirectDamge\022\017\n\007modType\030\001 \001("
    "\r\022\r\n\005modID\030\002 \001(\r\022\016\n\006damage\030\003 \001(\r\022\017\n\007attT"
    "ype\030\004 \001(\r\022\020\n\010attModID\030\005 \001(\r\022\016\n\006result\030\006 "
    "\001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\003\"\027\n\nProtoFun"
    "ID\022\t\n\005FunID\020$\"`\n\016stNotifyObjDie\022\016\n\006moTyp"
    "e\030\001 \001(\r\022\014\n\004moID\030\002 \001(\r\"\027\n\nProtoModID\022\t\n\005M"
    "odID\020\003\"\027\n\nProtoFunID\022\t\n\005FunID\020%\"d\n\rstBeg"
    "inBattle\022\r\n\005delay\030\001 \001(\r\022\022\n\nremainTime\030\002 "
    "\001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\003\"\027\n\nProtoFun"
    "ID\022\t\n\005FunID\020&\"\336\001\n\020stThrowSkillFail\022-\n\006re"
    "ason\030\001 \001(\0162\035.Map.stThrowSkillFail.eReaso"
    "n\"i\n\007eReason\022\023\n\017ATTER_NOT_EXIST\020\001\022\031\n\025ATT"
    "ER_SKILL_NOT_EXIST\020\002\022\027\n\023ATTER_MP_NOT_ENO"
    "UGH\020\003\022\025\n\021ATTER_HAS_SILENCE\020\004\"\027\n\nProtoMod"
    "ID\022\t\n\005ModID\020\003\"\027\n\nProtoFunID\022\t\n\005FunID\020\'\"r"
    "\n\021stNotifyResAppear\022\n\n\002id\030\001 \001(\r\022\t\n\001x\030\002 \001"
    "(\r\022\t\n\001y\030\003 \001(\r\022\t\n\001z\030\004 \001(\r\"\027\n\nProtoModID\022\t"
    "\n\005ModID\020\003\"\027\n\nProtoFunID\022\t\n\005FunID\020(\"T\n\024st"
    "NotifyResDisappear\022\n\n\002id\030\001 \001(\r\"\027\n\nProtoM"
    "odID\022\t\n\005ModID\020\003\"\027\n\nProtoFunID\022\t\n\005FunID\020)"
    "\"\203\001\n\022stNotifyBuffAppear\022\n\n\002id\030\001 \001(\r\022\t\n\001x"
    "\030\002 \001(\r\022\t\n\001y\030\003 \001(\r\022\t\n\001z\030\004 \001(\r\022\016\n\006buffID\030\005"
    " \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\003\"\027\n\nProtoFu"
    "nID\022\t\n\005FunID\020*\"U\n\025stNotifyBuffDisappear\022"
    "\n\n\002id\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\003\"\027\n\n"
    "ProtoFunID\022\t\n\005FunID\020+\"a\n\016stOpCopyMapRes\022"
    "\017\n\007collect\030\001 \001(\010\022\014\n\004time\030\002 \001(\r\"\027\n\nProtoM"
    "odID\022\t\n\005ModID\020\003\"\027\n\nProtoFunID\022\t\n\005FunID\020,"
    "\"S\n\017stPlayerGotBuff\022\016\n\006buffID\030\001 \001(\r\"\027\n\nP"
    "rotoModID\022\t\n\005ModID\020\003\"\027\n\nProtoFunID\022\t\n\005Fu"
    "nID\020-\"Y\n\026stPlayerCollectSuccess\022\r\n\005score"
    "\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\003\"\027\n\nProto"
    "FunID\022\t\n\005FunID\020.\"a\n\016stSynCampScore\022\016\n\006ca"
    "mpID\030\001 \001(\r\022\r\n\005score\030\002 \001(\r\"\027\n\nProtoModID\022"
    "\t\n\005ModID\020\003\"\027\n\nProtoFunID\022\t\n\005FunID\020/\"q\n\014s"
    "tUserRelive\022\016\n\006charID\030\001 \001(\r\022\t\n\001x\030\002 \001(\r\022\t"
    "\n\001y\030\003 \001(\r\022\t\n\001z\030\004 \001(\r\"\027\n\nProtoModID\022\t\n\005Mo"
    "dID\020\003\"\027\n\nProtoFunID\022\t\n\005FunID\0200\"}\n\026stNoti"
    "fyUserPointToPos\022\t\n\001x\030\001 \001(\r\022\t\n\001y\030\002 \001(\r\022\t"
    "\n\001z\030\003 \001(\r\022\020\n\010lasttime\030\004 \001(\r\"\027\n\nProtoModI"
    "D\022\t\n\005ModID\020\003\"\027\n\nProtoFunID\022\t\n\005FunID\0201*\272\004"
    "\n\013eBeingState\022\025\n\021BEING_STATE_DEATH\020\000\022\023\n\017"
    "BEING_STATE_ICE\020\001\022\027\n\023BEING_STATE_SILENCE"
    "\020\002\022\035\n\031BEING_STATE_IMMUNE_DEBUFF\020\003\022\024\n\020BEI"
    "NG_STATE_RAGE\020\004\022\033\n\027BEING_STATE_FIRE_SPIR"
    "IT\020\005\022\035\n\031BEING_STATE_LIMIT_DEFENSE\020\006\022\034\n\030B"
    "EING_STATE_DEC_VELOCITY\020\007\022\025\n\021BEING_STATE"
    "_DIZZY\020\010\022\031\n\025BEING_STATE_PROVATION\020\t\022\037\n\033B"
    "EING_STATE_CHG_DAMAGE_PROP\020\n\022!\n\035BEING_ST"
    "ATE_CHG_REF_BANG_PROP\020\013\022\034\n\030BEING_STATE_C"
    "HG_HIT_RATE\020\014\022\034\n\030BEING_STATE_TIMER_DEC_H"
    "P\020\r\022\030\n\024BEING_STATE_CHG_BATI\020\016\022\034\n\030BEING_S"
    "TATE_TIMER_ADD_HP\020\017\022\031\n\025BEING_STATE_CHG_D"
    "ODGE\020\020\022\036\n\032BEING_STATE_CHG_APPEARANCE\020\021\022\035"
    "\n\031BEING_STATE_CHG_BANG_PROP\020\022\022\023\n\017BEING_S"
    "TATE_MAX\020\037*i\n\016eMapObjectType\022\025\n\021eMapObje"
    "ct_Player\020\000\022\026\n\022eMapObject_Monster\020\001\022\023\n\017e"
    "MapObject_Hero\020\002\022\023\n\017eMapObject_Item\020\003*\'\n"
    "\005eCamp\022\r\n\teCamp_Red\020\001\022\017\n\013eCamp_Black\020\002*\223"
    "\001\n\016eAttResultType\022\026\n\022eAttResult_Missing\020"
    "\001\022\023\n\017eAttResult_Bang\020\002\022\032\n\026eAttResult_Fir"
    "e_Damage\020\004\022\031\n\025eAttResult_Ice_Damage\020\010\022\035\n"
    "\031eAttResult_Thunder_Damage\020\020", 8508);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Map.proto", &protobuf_RegisterTypes);
  stNotifyEnterMapInfo::default_instance_ = new stNotifyEnterMapInfo();
  stClientLoadResFinish::default_instance_ = new stClientLoadResFinish();
  ReqEnterLevelMap::default_instance_ = new ReqEnterLevelMap();
  stSynDropInfo::default_instance_ = new stSynDropInfo();
  stSynMonsterInfo::default_instance_ = new stSynMonsterInfo();
  NotifyEnterLevelMap::default_instance_ = new NotifyEnterLevelMap();
  stReqLeaveLevel::default_instance_ = new stReqLeaveLevel();
  stLeaveLevelSuccess::default_instance_ = new stLeaveLevelSuccess();
  stEnterLevelError::default_instance_ = new stEnterLevelError();
  stPlayerData::default_instance_ = new stPlayerData();
  NotifyPlayerAppear::default_instance_ = new NotifyPlayerAppear();
  NotifyObjDisappear::default_instance_ = new NotifyObjDisappear();
  NotifyObjDisappear_stObjDisappearInfo::default_instance_ = new NotifyObjDisappear_stObjDisappearInfo();
  NotifyNpcAppear::default_instance_ = new NotifyNpcAppear();
  NotifyNpcAppear_stNpcData::default_instance_ = new NotifyNpcAppear_stNpcData();
  NotifyHeroAppear::default_instance_ = new NotifyHeroAppear();
  NotifyHeroAppear_stHeroData::default_instance_ = new NotifyHeroAppear_stHeroData();
  Pos::default_instance_ = new Pos();
  ReqMove::default_instance_ = new ReqMove();
  stNotifyMODMove::default_instance_ = new stNotifyMODMove();
  stNotifyMODMove_stModMoveInfo::default_instance_ = new stNotifyMODMove_stModMoveInfo();
  stThrowSkill::default_instance_ = new stThrowSkill();
  stHitInfo::default_instance_ = new stHitInfo();
  stNotifyHit::default_instance_ = new stNotifyHit();
  AttRetInfo::default_instance_ = new AttRetInfo();
  AttackResult::default_instance_ = new AttackResult();
  stMapObjAddHP::default_instance_ = new stMapObjAddHP();
  stInstantMove::default_instance_ = new stInstantMove();
  stAttackFail::default_instance_ = new stAttackFail();
  stInterruptPlaySkill::default_instance_ = new stInterruptPlaySkill();
  stMapObjectChgDir::default_instance_ = new stMapObjectChgDir();
  stReqOnlineUserOnMainCity::default_instance_ = new stReqOnlineUserOnMainCity();
  stOnlineUserOnMainCity::default_instance_ = new stOnlineUserOnMainCity();
  stChangeHeroGroup::default_instance_ = new stChangeHeroGroup();
  stChangeHeroGroupError::default_instance_ = new stChangeHeroGroupError();
  stNotifyObjMP::default_instance_ = new stNotifyObjMP();
  stNotifyObjBati::default_instance_ = new stNotifyObjBati();
  stAddBufferState2Me::default_instance_ = new stAddBufferState2Me();
  stDelBufferState::default_instance_ = new stDelBufferState();
  stNotifyExecAI::default_instance_ = new stNotifyExecAI();
  stAlertBossAppear::default_instance_ = new stAlertBossAppear();
  stReqChangeMainCity::default_instance_ = new stReqChangeMainCity();
  stNotifyAddFireWall::default_instance_ = new stNotifyAddFireWall();
  stBeginThunderDamage::default_instance_ = new stBeginThunderDamage();
  stCalcThunderDamage::default_instance_ = new stCalcThunderDamage();
  stDirectDamge::default_instance_ = new stDirectDamge();
  stNotifyObjDie::default_instance_ = new stNotifyObjDie();
  stBeginBattle::default_instance_ = new stBeginBattle();
  stThrowSkillFail::default_instance_ = new stThrowSkillFail();
  stNotifyResAppear::default_instance_ = new stNotifyResAppear();
  stNotifyResDisappear::default_instance_ = new stNotifyResDisappear();
  stNotifyBuffAppear::default_instance_ = new stNotifyBuffAppear();
  stNotifyBuffDisappear::default_instance_ = new stNotifyBuffDisappear();
  stOpCopyMapRes::default_instance_ = new stOpCopyMapRes();
  stPlayerGotBuff::default_instance_ = new stPlayerGotBuff();
  stPlayerCollectSuccess::default_instance_ = new stPlayerCollectSuccess();
  stSynCampScore::default_instance_ = new stSynCampScore();
  stUserRelive::default_instance_ = new stUserRelive();
  stNotifyUserPointToPos::default_instance_ = new stNotifyUserPointToPos();
  stNotifyEnterMapInfo::default_instance_->InitAsDefaultInstance();
  stClientLoadResFinish::default_instance_->InitAsDefaultInstance();
  ReqEnterLevelMap::default_instance_->InitAsDefaultInstance();
  stSynDropInfo::default_instance_->InitAsDefaultInstance();
  stSynMonsterInfo::default_instance_->InitAsDefaultInstance();
  NotifyEnterLevelMap::default_instance_->InitAsDefaultInstance();
  stReqLeaveLevel::default_instance_->InitAsDefaultInstance();
  stLeaveLevelSuccess::default_instance_->InitAsDefaultInstance();
  stEnterLevelError::default_instance_->InitAsDefaultInstance();
  stPlayerData::default_instance_->InitAsDefaultInstance();
  NotifyPlayerAppear::default_instance_->InitAsDefaultInstance();
  NotifyObjDisappear::default_instance_->InitAsDefaultInstance();
  NotifyObjDisappear_stObjDisappearInfo::default_instance_->InitAsDefaultInstance();
  NotifyNpcAppear::default_instance_->InitAsDefaultInstance();
  NotifyNpcAppear_stNpcData::default_instance_->InitAsDefaultInstance();
  NotifyHeroAppear::default_instance_->InitAsDefaultInstance();
  NotifyHeroAppear_stHeroData::default_instance_->InitAsDefaultInstance();
  Pos::default_instance_->InitAsDefaultInstance();
  ReqMove::default_instance_->InitAsDefaultInstance();
  stNotifyMODMove::default_instance_->InitAsDefaultInstance();
  stNotifyMODMove_stModMoveInfo::default_instance_->InitAsDefaultInstance();
  stThrowSkill::default_instance_->InitAsDefaultInstance();
  stHitInfo::default_instance_->InitAsDefaultInstance();
  stNotifyHit::default_instance_->InitAsDefaultInstance();
  AttRetInfo::default_instance_->InitAsDefaultInstance();
  AttackResult::default_instance_->InitAsDefaultInstance();
  stMapObjAddHP::default_instance_->InitAsDefaultInstance();
  stInstantMove::default_instance_->InitAsDefaultInstance();
  stAttackFail::default_instance_->InitAsDefaultInstance();
  stInterruptPlaySkill::default_instance_->InitAsDefaultInstance();
  stMapObjectChgDir::default_instance_->InitAsDefaultInstance();
  stReqOnlineUserOnMainCity::default_instance_->InitAsDefaultInstance();
  stOnlineUserOnMainCity::default_instance_->InitAsDefaultInstance();
  stChangeHeroGroup::default_instance_->InitAsDefaultInstance();
  stChangeHeroGroupError::default_instance_->InitAsDefaultInstance();
  stNotifyObjMP::default_instance_->InitAsDefaultInstance();
  stNotifyObjBati::default_instance_->InitAsDefaultInstance();
  stAddBufferState2Me::default_instance_->InitAsDefaultInstance();
  stDelBufferState::default_instance_->InitAsDefaultInstance();
  stNotifyExecAI::default_instance_->InitAsDefaultInstance();
  stAlertBossAppear::default_instance_->InitAsDefaultInstance();
  stReqChangeMainCity::default_instance_->InitAsDefaultInstance();
  stNotifyAddFireWall::default_instance_->InitAsDefaultInstance();
  stBeginThunderDamage::default_instance_->InitAsDefaultInstance();
  stCalcThunderDamage::default_instance_->InitAsDefaultInstance();
  stDirectDamge::default_instance_->InitAsDefaultInstance();
  stNotifyObjDie::default_instance_->InitAsDefaultInstance();
  stBeginBattle::default_instance_->InitAsDefaultInstance();
  stThrowSkillFail::default_instance_->InitAsDefaultInstance();
  stNotifyResAppear::default_instance_->InitAsDefaultInstance();
  stNotifyResDisappear::default_instance_->InitAsDefaultInstance();
  stNotifyBuffAppear::default_instance_->InitAsDefaultInstance();
  stNotifyBuffDisappear::default_instance_->InitAsDefaultInstance();
  stOpCopyMapRes::default_instance_->InitAsDefaultInstance();
  stPlayerGotBuff::default_instance_->InitAsDefaultInstance();
  stPlayerCollectSuccess::default_instance_->InitAsDefaultInstance();
  stSynCampScore::default_instance_->InitAsDefaultInstance();
  stUserRelive::default_instance_->InitAsDefaultInstance();
  stNotifyUserPointToPos::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Map_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Map_2eproto {
  StaticDescriptorInitializer_Map_2eproto() {
    protobuf_AddDesc_Map_2eproto();
  }
} static_descriptor_initializer_Map_2eproto_;
const ::google::protobuf::EnumDescriptor* eBeingState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eBeingState_descriptor_;
}
bool eBeingState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 31:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* eMapObjectType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eMapObjectType_descriptor_;
}
bool eMapObjectType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* eCamp_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eCamp_descriptor_;
}
bool eCamp_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* eAttResultType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eAttResultType_descriptor_;
}
bool eAttResultType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
      return true;
    default:
      return false;
  }
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stNotifyEnterMapInfo_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyEnterMapInfo_ProtoModID_descriptor_;
}
bool stNotifyEnterMapInfo_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyEnterMapInfo_ProtoModID stNotifyEnterMapInfo::ModID;
const stNotifyEnterMapInfo_ProtoModID stNotifyEnterMapInfo::ProtoModID_MIN;
const stNotifyEnterMapInfo_ProtoModID stNotifyEnterMapInfo::ProtoModID_MAX;
const int stNotifyEnterMapInfo::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stNotifyEnterMapInfo_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyEnterMapInfo_ProtoFunID_descriptor_;
}
bool stNotifyEnterMapInfo_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyEnterMapInfo_ProtoFunID stNotifyEnterMapInfo::FunID;
const stNotifyEnterMapInfo_ProtoFunID stNotifyEnterMapInfo::ProtoFunID_MIN;
const stNotifyEnterMapInfo_ProtoFunID stNotifyEnterMapInfo::ProtoFunID_MAX;
const int stNotifyEnterMapInfo::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stNotifyEnterMapInfo::kMapIDFieldNumber;
#endif  // !_MSC_VER

stNotifyEnterMapInfo::stNotifyEnterMapInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stNotifyEnterMapInfo::InitAsDefaultInstance() {
}

stNotifyEnterMapInfo::stNotifyEnterMapInfo(const stNotifyEnterMapInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stNotifyEnterMapInfo::SharedCtor() {
  _cached_size_ = 0;
  mapid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stNotifyEnterMapInfo::~stNotifyEnterMapInfo() {
  SharedDtor();
}

void stNotifyEnterMapInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stNotifyEnterMapInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stNotifyEnterMapInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyEnterMapInfo_descriptor_;
}

const stNotifyEnterMapInfo& stNotifyEnterMapInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Map_2eproto();
  return *default_instance_;
}

stNotifyEnterMapInfo* stNotifyEnterMapInfo::default_instance_ = NULL;

stNotifyEnterMapInfo* stNotifyEnterMapInfo::New() const {
  return new stNotifyEnterMapInfo;
}

void stNotifyEnterMapInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mapid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stNotifyEnterMapInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mapID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stNotifyEnterMapInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 mapID = 1;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mapid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stNotifyEnterMapInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 mapID = 1;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mapid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stNotifyEnterMapInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 mapID = 1;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mapid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stNotifyEnterMapInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stNotifyEnterMapInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stNotifyEnterMapInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stNotifyEnterMapInfo::MergeFrom(const stNotifyEnterMapInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stNotifyEnterMapInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stNotifyEnterMapInfo::CopyFrom(const stNotifyEnterMapInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stNotifyEnterMapInfo::IsInitialized() const {

  return true;
}

void stNotifyEnterMapInfo::Swap(stNotifyEnterMapInfo* other) {
  if (other != this) {
    std::swap(mapid_, other->mapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stNotifyEnterMapInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stNotifyEnterMapInfo_descriptor_;
  metadata.reflection = stNotifyEnterMapInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stClientLoadResFinish_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stClientLoadResFinish_ProtoModID_descriptor_;
}
bool stClientLoadResFinish_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stClientLoadResFinish_ProtoModID stClientLoadResFinish::ModID;
const stClientLoadResFinish_ProtoModID stClientLoadResFinish::ProtoModID_MIN;
const stClientLoadResFinish_ProtoModID stClientLoadResFinish::ProtoModID_MAX;
const int stClientLoadResFinish::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stClientLoadResFinish_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stClientLoadResFinish_ProtoFunID_descriptor_;
}
bool stClientLoadResFinish_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stClientLoadResFinish_ProtoFunID stClientLoadResFinish::FunID;
const stClientLoadResFinish_ProtoFunID stClientLoadResFinish::ProtoFunID_MIN;
const stClientLoadResFinish_ProtoFunID stClientLoadResFinish::ProtoFunID_MAX;
const int stClientLoadResFinish::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stClientLoadResFinish::kLevelIDFieldNumber;
#endif  // !_MSC_VER

stClientLoadResFinish::stClientLoadResFinish()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stClientLoadResFinish::InitAsDefaultInstance() {
}

stClientLoadResFinish::stClientLoadResFinish(const stClientLoadResFinish& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stClientLoadResFinish::SharedCtor() {
  _cached_size_ = 0;
  levelid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stClientLoadResFinish::~stClientLoadResFinish() {
  SharedDtor();
}

void stClientLoadResFinish::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stClientLoadResFinish::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stClientLoadResFinish::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stClientLoadResFinish_descriptor_;
}

const stClientLoadResFinish& stClientLoadResFinish::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Map_2eproto();
  return *default_instance_;
}

stClientLoadResFinish* stClientLoadResFinish::default_instance_ = NULL;

stClientLoadResFinish* stClientLoadResFinish::New() const {
  return new stClientLoadResFinish;
}

void stClientLoadResFinish::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    levelid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stClientLoadResFinish::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 levelID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &levelid_)));
          set_has_levelid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stClientLoadResFinish::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 levelID = 1;
  if (has_levelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->levelid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stClientLoadResFinish::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 levelID = 1;
  if (has_levelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->levelid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stClientLoadResFinish::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 levelID = 1;
    if (has_levelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->levelid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stClientLoadResFinish::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stClientLoadResFinish* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stClientLoadResFinish*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stClientLoadResFinish::MergeFrom(const stClientLoadResFinish& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_levelid()) {
      set_levelid(from.levelid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stClientLoadResFinish::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stClientLoadResFinish::CopyFrom(const stClientLoadResFinish& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stClientLoadResFinish::IsInitialized() const {

  return true;
}

void stClientLoadResFinish::Swap(stClientLoadResFinish* other) {
  if (other != this) {
    std::swap(levelid_, other->levelid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stClientLoadResFinish::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stClientLoadResFinish_descriptor_;
  metadata.reflection = stClientLoadResFinish_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ReqEnterLevelMap_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqEnterLevelMap_ProtoModID_descriptor_;
}
bool ReqEnterLevelMap_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ReqEnterLevelMap_ProtoModID ReqEnterLevelMap::ModID;
const ReqEnterLevelMap_ProtoModID ReqEnterLevelMap::ProtoModID_MIN;
const ReqEnterLevelMap_ProtoModID ReqEnterLevelMap::ProtoModID_MAX;
const int ReqEnterLevelMap::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* ReqEnterLevelMap_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqEnterLevelMap_ProtoFunID_descriptor_;
}
bool ReqEnterLevelMap_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ReqEnterLevelMap_ProtoFunID ReqEnterLevelMap::FunID;
const ReqEnterLevelMap_ProtoFunID ReqEnterLevelMap::ProtoFunID_MIN;
const ReqEnterLevelMap_ProtoFunID ReqEnterLevelMap::ProtoFunID_MAX;
const int ReqEnterLevelMap::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ReqEnterLevelMap::kLevelIDFieldNumber;
#endif  // !_MSC_VER

ReqEnterLevelMap::ReqEnterLevelMap()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqEnterLevelMap::InitAsDefaultInstance() {
}

ReqEnterLevelMap::ReqEnterLevelMap(const ReqEnterLevelMap& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqEnterLevelMap::SharedCtor() {
  _cached_size_ = 0;
  levelid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqEnterLevelMap::~ReqEnterLevelMap() {
  SharedDtor();
}

void ReqEnterLevelMap::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqEnterLevelMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqEnterLevelMap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqEnterLevelMap_descriptor_;
}

const ReqEnterLevelMap& ReqEnterLevelMap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Map_2eproto();
  return *default_instance_;
}

ReqEnterLevelMap* ReqEnterLevelMap::default_instance_ = NULL;

ReqEnterLevelMap* ReqEnterLevelMap::New() const {
  return new ReqEnterLevelMap;
}

void ReqEnterLevelMap::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    levelid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqEnterLevelMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 levelID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &levelid_)));
          set_has_levelid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqEnterLevelMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 levelID = 1;
  if (has_levelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->levelid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqEnterLevelMap::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 levelID = 1;
  if (has_levelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->levelid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqEnterLevelMap::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 levelID = 1;
    if (has_levelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->levelid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqEnterLevelMap::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqEnterLevelMap* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqEnterLevelMap*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqEnterLevelMap::MergeFrom(const ReqEnterLevelMap& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_levelid()) {
      set_levelid(from.levelid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqEnterLevelMap::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqEnterLevelMap::CopyFrom(const ReqEnterLevelMap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqEnterLevelMap::IsInitialized() const {

  return true;
}

void ReqEnterLevelMap::Swap(ReqEnterLevelMap* other) {
  if (other != this) {
    std::swap(levelid_, other->levelid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqEnterLevelMap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqEnterLevelMap_descriptor_;
  metadata.reflection = ReqEnterLevelMap_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stSynDropInfo::kItemIDFieldNumber;
const int stSynDropInfo::kNumFieldNumber;
#endif  // !_MSC_VER

stSynDropInfo::stSynDropInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSynDropInfo::InitAsDefaultInstance() {
}

stSynDropInfo::stSynDropInfo(const stSynDropInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSynDropInfo::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0u;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSynDropInfo::~stSynDropInfo() {
  SharedDtor();
}

void stSynDropInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stSynDropInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSynDropInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynDropInfo_descriptor_;
}

const stSynDropInfo& stSynDropInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Map_2eproto();
  return *default_instance_;
}

stSynDropInfo* stSynDropInfo::default_instance_ = NULL;

stSynDropInfo* stSynDropInfo::New() const {
  return new stSynDropInfo;
}

void stSynDropInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = 0u;
    num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSynDropInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 itemID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional uint32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSynDropInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 itemID = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itemid(), output);
  }

  // optional uint32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSynDropInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 itemID = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->itemid(), target);
  }

  // optional uint32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSynDropInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 itemID = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // optional uint32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSynDropInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSynDropInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSynDropInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSynDropInfo::MergeFrom(const stSynDropInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSynDropInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSynDropInfo::CopyFrom(const stSynDropInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSynDropInfo::IsInitialized() const {

  return true;
}

void stSynDropInfo::Swap(stSynDropInfo* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSynDropInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSynDropInfo_descriptor_;
  metadata.reflection = stSynDropInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stSynMonsterInfo::kMonsterIDFieldNumber;
const int stSynMonsterInfo::kMonsterLvFieldNumber;
#endif  // !_MSC_VER

stSynMonsterInfo::stSynMonsterInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSynMonsterInfo::InitAsDefaultInstance() {
}

stSynMonsterInfo::stSynMonsterInfo(const stSynMonsterInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSynMonsterInfo::SharedCtor() {
  _cached_size_ = 0;
  monsterid_ = 0u;
  monsterlv_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSynMonsterInfo::~stSynMonsterInfo() {
  SharedDtor();
}

void stSynMonsterInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stSynMonsterInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSynMonsterInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynMonsterInfo_descriptor_;
}

const stSynMonsterInfo& stSynMonsterInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Map_2eproto();
  return *default_instance_;
}

stSynMonsterInfo* stSynMonsterInfo::default_instance_ = NULL;

stSynMonsterInfo* stSynMonsterInfo::New() const {
  return new stSynMonsterInfo;
}

void stSynMonsterInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    monsterid_ = 0u;
    monsterlv_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSynMonsterInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 monsterID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &monsterid_)));
          set_has_monsterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_monsterLv;
        break;
      }

      // optional uint32 monsterLv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_monsterLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &monsterlv_)));
          set_has_monsterlv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSynMonsterInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 monsterID = 1;
  if (has_monsterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->monsterid(), output);
  }

  // optional uint32 monsterLv = 2;
  if (has_monsterlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->monsterlv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSynMonsterInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 monsterID = 1;
  if (has_monsterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->monsterid(), target);
  }

  // optional uint32 monsterLv = 2;
  if (has_monsterlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->monsterlv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSynMonsterInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 monsterID = 1;
    if (has_monsterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->monsterid());
    }

    // optional uint32 monsterLv = 2;
    if (has_monsterlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->monsterlv());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSynMonsterInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSynMonsterInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSynMonsterInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSynMonsterInfo::MergeFrom(const stSynMonsterInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_monsterid()) {
      set_monsterid(from.monsterid());
    }
    if (from.has_monsterlv()) {
      set_monsterlv(from.monsterlv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSynMonsterInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSynMonsterInfo::CopyFrom(const stSynMonsterInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSynMonsterInfo::IsInitialized() const {

  return true;
}

void stSynMonsterInfo::Swap(stSynMonsterInfo* other) {
  if (other != this) {
    std::swap(monsterid_, other->monsterid_);
    std::swap(monsterlv_, other->monsterlv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSynMonsterInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSynMonsterInfo_descriptor_;
  metadata.reflection = stSynMonsterInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NotifyEnterLevelMap_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyEnterLevelMap_ProtoModID_descriptor_;
}
bool NotifyEnterLevelMap_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NotifyEnterLevelMap_ProtoModID NotifyEnterLevelMap::ModID;
const NotifyEnterLevelMap_ProtoModID NotifyEnterLevelMap::ProtoModID_MIN;
const NotifyEnterLevelMap_ProtoModID NotifyEnterLevelMap::ProtoModID_MAX;
const int NotifyEnterLevelMap::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* NotifyEnterLevelMap_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyEnterLevelMap_ProtoFunID_descriptor_;
}
bool NotifyEnterLevelMap_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NotifyEnterLevelMap_ProtoFunID NotifyEnterLevelMap::FunID;
const NotifyEnterLevelMap_ProtoFunID NotifyEnterLevelMap::ProtoFunID_MIN;
const NotifyEnterLevelMap_ProtoFunID NotifyEnterLevelMap::ProtoFunID_MAX;
const int NotifyEnterLevelMap::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NotifyEnterLevelMap::kLevelIDFieldNumber;
const int NotifyEnterLevelMap::kDropInfoFieldNumber;
const int NotifyEnterLevelMap::kMonsterInfoFieldNumber;
const int NotifyEnterLevelMap::kBossInfoFieldNumber;
const int NotifyEnterLevelMap::kDrawInfoFieldNumber;
#endif  // !_MSC_VER

NotifyEnterLevelMap::NotifyEnterLevelMap()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyEnterLevelMap::InitAsDefaultInstance() {
  bossinfo_ = const_cast< ::Map::stSynMonsterInfo*>(&::Map::stSynMonsterInfo::default_instance());
  drawinfo_ = const_cast< ::Map::stSynDropInfo*>(&::Map::stSynDropInfo::default_instance());
}

NotifyEnterLevelMap::NotifyEnterLevelMap(const NotifyEnterLevelMap& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyEnterLevelMap::SharedCtor() {
  _cached_size_ = 0;
  levelid_ = 0u;
  bossinfo_ = NULL;
  drawinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyEnterLevelMap::~NotifyEnterLevelMap() {
  SharedDtor();
}

void NotifyEnterLevelMap::SharedDtor() {
  if (this != default_instance_) {
    delete bossinfo_;
    delete drawinfo_;
  }
}

void NotifyEnterLevelMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyEnterLevelMap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyEnterLevelMap_descriptor_;
}

const NotifyEnterLevelMap& NotifyEnterLevelMap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Map_2eproto();
  return *default_instance_;
}

NotifyEnterLevelMap* NotifyEnterLevelMap::default_instance_ = NULL;

NotifyEnterLevelMap* NotifyEnterLevelMap::New() const {
  return new NotifyEnterLevelMap;
}

void NotifyEnterLevelMap::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    levelid_ = 0u;
    if (has_bossinfo()) {
      if (bossinfo_ != NULL) bossinfo_->::Map::stSynMonsterInfo::Clear();
    }
    if (has_drawinfo()) {
      if (drawinfo_ != NULL) drawinfo_->::Map::stSynDropInfo::Clear();
    }
  }
  dropinfo_.Clear();
  monsterinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyEnterLevelMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 levelID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &levelid_)));
          set_has_levelid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_dropInfo;
        break;
      }

      // repeated .Map.stSynDropInfo dropInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dropInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dropinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_dropInfo;
        if (input->ExpectTag(26)) goto parse_monsterInfo;
        break;
      }

      // repeated .Map.stSynMonsterInfo monsterInfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_monsterInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_monsterinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_monsterInfo;
        if (input->ExpectTag(34)) goto parse_bossInfo;
        break;
      }

      // optional .Map.stSynMonsterInfo bossInfo = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bossInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bossinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_drawInfo;
        break;
      }

      // optional .Map.stSynDropInfo drawInfo = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_drawInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_drawinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyEnterLevelMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 levelID = 1;
  if (has_levelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->levelid(), output);
  }

  // repeated .Map.stSynDropInfo dropInfo = 2;
  for (int i = 0; i < this->dropinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->dropinfo(i), output);
  }

  // repeated .Map.stSynMonsterInfo monsterInfo = 3;
  for (int i = 0; i < this->monsterinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->monsterinfo(i), output);
  }

  // optional .Map.stSynMonsterInfo bossInfo = 4;
  if (has_bossinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->bossinfo(), output);
  }

  // optional .Map.stSynDropInfo drawInfo = 5;
  if (has_drawinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->drawinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyEnterLevelMap::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 levelID = 1;
  if (has_levelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->levelid(), target);
  }

  // repeated .Map.stSynDropInfo dropInfo = 2;
  for (int i = 0; i < this->dropinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->dropinfo(i), target);
  }

  // repeated .Map.stSynMonsterInfo monsterInfo = 3;
  for (int i = 0; i < this->monsterinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->monsterinfo(i), target);
  }

  // optional .Map.stSynMonsterInfo bossInfo = 4;
  if (has_bossinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->bossinfo(), target);
  }

  // optional .Map.stSynDropInfo drawInfo = 5;
  if (has_drawinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->drawinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyEnterLevelMap::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 levelID = 1;
    if (has_levelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->levelid());
    }

    // optional .Map.stSynMonsterInfo bossInfo = 4;
    if (has_bossinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bossinfo());
    }

    // optional .Map.stSynDropInfo drawInfo = 5;
    if (has_drawinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->drawinfo());
    }

  }
  // repeated .Map.stSynDropInfo dropInfo = 2;
  total_size += 1 * this->dropinfo_size();
  for (int i = 0; i < this->dropinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dropinfo(i));
  }

  // repeated .Map.stSynMonsterInfo monsterInfo = 3;
  total_size += 1 * this->monsterinfo_size();
  for (int i = 0; i < this->monsterinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->monsterinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyEnterLevelMap::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyEnterLevelMap* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyEnterLevelMap*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyEnterLevelMap::MergeFrom(const NotifyEnterLevelMap& from) {
  GOOGLE_CHECK_NE(&from, this);
  dropinfo_.MergeFrom(from.dropinfo_);
  monsterinfo_.MergeFrom(from.monsterinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_levelid()) {
      set_levelid(from.levelid());
    }
    if (from.has_bossinfo()) {
      mutable_bossinfo()->::Map::stSynMonsterInfo::MergeFrom(from.bossinfo());
    }
    if (from.has_drawinfo()) {
      mutable_drawinfo()->::Map::stSynDropInfo::MergeFrom(from.drawinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyEnterLevelMap::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyEnterLevelMap::CopyFrom(const NotifyEnterLevelMap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyEnterLevelMap::IsInitialized() const {

  return true;
}

void NotifyEnterLevelMap::Swap(NotifyEnterLevelMap* other) {
  if (other != this) {
    std::swap(levelid_, other->levelid_);
    dropinfo_.Swap(&other->dropinfo_);
    monsterinfo_.Swap(&other->monsterinfo_);
    std::swap(bossinfo_, other->bossinfo_);
    std::swap(drawinfo_, other->drawinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyEnterLevelMap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyEnterLevelMap_descriptor_;
  metadata.reflection = NotifyEnterLevelMap_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqLeaveLevel_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqLeaveLevel_ProtoModID_descriptor_;
}
bool stReqLeaveLevel_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqLeaveLevel_ProtoModID stReqLeaveLevel::ModID;
const stReqLeaveLevel_ProtoModID stReqLeaveLevel::ProtoModID_MIN;
const stReqLeaveLevel_ProtoModID stReqLeaveLevel::ProtoModID_MAX;
const int stReqLeaveLevel::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqLeaveLevel_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqLeaveLevel_ProtoFunID_descriptor_;
}
bool stReqLeaveLevel_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqLeaveLevel_ProtoFunID stReqLeaveLevel::FunID;
const stReqLeaveLevel_ProtoFunID stReqLeaveLevel::ProtoFunID_MIN;
const stReqLeaveLevel_ProtoFunID stReqLeaveLevel::ProtoFunID_MAX;
const int stReqLeaveLevel::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqLeaveLevel::kFlagFieldNumber;
#endif  // !_MSC_VER

stReqLeaveLevel::stReqLeaveLevel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqLeaveLevel::InitAsDefaultInstance() {
}

stReqLeaveLevel::stReqLeaveLevel(const stReqLeaveLevel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqLeaveLevel::SharedCtor() {
  _cached_size_ = 0;
  flag_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqLeaveLevel::~stReqLeaveLevel() {
  SharedDtor();
}

void stReqLeaveLevel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqLeaveLevel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqLeaveLevel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqLeaveLevel_descriptor_;
}

const stReqLeaveLevel& stReqLeaveLevel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Map_2eproto();
  return *default_instance_;
}

stReqLeaveLevel* stReqLeaveLevel::default_instance_ = NULL;

stReqLeaveLevel* stReqLeaveLevel::New() const {
  return new stReqLeaveLevel;
}

void stReqLeaveLevel::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    flag_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqLeaveLevel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 flag = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqLeaveLevel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 flag = 1;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->flag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqLeaveLevel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 flag = 1;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->flag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqLeaveLevel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 flag = 1;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqLeaveLevel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqLeaveLevel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqLeaveLevel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqLeaveLevel::MergeFrom(const stReqLeaveLevel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flag()) {
      set_flag(from.flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqLeaveLevel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqLeaveLevel::CopyFrom(const stReqLeaveLevel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqLeaveLevel::IsInitialized() const {

  return true;
}

void stReqLeaveLevel::Swap(stReqLeaveLevel* other) {
  if (other != this) {
    std::swap(flag_, other->flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqLeaveLevel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqLeaveLevel_descriptor_;
  metadata.reflection = stReqLeaveLevel_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stLeaveLevelSuccess_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stLeaveLevelSuccess_ProtoModID_descriptor_;
}
bool stLeaveLevelSuccess_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stLeaveLevelSuccess_ProtoModID stLeaveLevelSuccess::ModID;
const stLeaveLevelSuccess_ProtoModID stLeaveLevelSuccess::ProtoModID_MIN;
const stLeaveLevelSuccess_ProtoModID stLeaveLevelSuccess::ProtoModID_MAX;
const int stLeaveLevelSuccess::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stLeaveLevelSuccess_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stLeaveLevelSuccess_ProtoFunID_descriptor_;
}
bool stLeaveLevelSuccess_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stLeaveLevelSuccess_ProtoFunID stLeaveLevelSuccess::FunID;
const stLeaveLevelSuccess_ProtoFunID stLeaveLevelSuccess::ProtoFunID_MIN;
const stLeaveLevelSuccess_ProtoFunID stLeaveLevelSuccess::ProtoFunID_MAX;
const int stLeaveLevelSuccess::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
#endif  // !_MSC_VER

stLeaveLevelSuccess::stLeaveLevelSuccess()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stLeaveLevelSuccess::InitAsDefaultInstance() {
}

stLeaveLevelSuccess::stLeaveLevelSuccess(const stLeaveLevelSuccess& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stLeaveLevelSuccess::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stLeaveLevelSuccess::~stLeaveLevelSuccess() {
  SharedDtor();
}

void stLeaveLevelSuccess::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stLeaveLevelSuccess::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stLeaveLevelSuccess::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stLeaveLevelSuccess_descriptor_;
}

const stLeaveLevelSuccess& stLeaveLevelSuccess::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Map_2eproto();
  return *default_instance_;
}

stLeaveLevelSuccess* stLeaveLevelSuccess::default_instance_ = NULL;

stLeaveLevelSuccess* stLeaveLevelSuccess::New() const {
  return new stLeaveLevelSuccess;
}

void stLeaveLevelSuccess::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stLeaveLevelSuccess::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void stLeaveLevelSuccess::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stLeaveLevelSuccess::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stLeaveLevelSuccess::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stLeaveLevelSuccess::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stLeaveLevelSuccess* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stLeaveLevelSuccess*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stLeaveLevelSuccess::MergeFrom(const stLeaveLevelSuccess& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stLeaveLevelSuccess::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stLeaveLevelSuccess::CopyFrom(const stLeaveLevelSuccess& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stLeaveLevelSuccess::IsInitialized() const {

  return true;
}

void stLeaveLevelSuccess::Swap(stLeaveLevelSuccess* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stLeaveLevelSuccess::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stLeaveLevelSuccess_descriptor_;
  metadata.reflection = stLeaveLevelSuccess_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stEnterLevelError_Error_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stEnterLevelError_Error_descriptor_;
}
bool stEnterLevelError_Error_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stEnterLevelError_Error stEnterLevelError::HAS_IN_LEVEL;
const stEnterLevelError_Error stEnterLevelError::PRE_LEVEL_NOT_FINISH;
const stEnterLevelError_Error stEnterLevelError::SVR_CFG_ERROR;
const stEnterLevelError_Error stEnterLevelError::LEVEL_LIMIT;
const stEnterLevelError_Error stEnterLevelError::SP_NOT_ENGOUH;
const stEnterLevelError_Error stEnterLevelError::LILIAN_NOT_ENOUGH;
const stEnterLevelError_Error stEnterLevelError::RUSH_NUM_USE_OUT;
const stEnterLevelError_Error stEnterLevelError::BAG_FULL;
const stEnterLevelError_Error stEnterLevelError::EQUIP_LIMIT;
const stEnterLevelError_Error stEnterLevelError::Error_MIN;
const stEnterLevelError_Error stEnterLevelError::Error_MAX;
const int stEnterLevelError::Error_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stEnterLevelError_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stEnterLevelError_ProtoModID_descriptor_;
}
bool stEnterLevelError_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stEnterLevelError_ProtoModID stEnterLevelError::ModID;
const stEnterLevelError_ProtoModID stEnterLevelError::ProtoModID_MIN;
const stEnterLevelError_ProtoModID stEnterLevelError::ProtoModID_MAX;
const int stEnterLevelError::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stEnterLevelError_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stEnterLevelError_ProtoFunID_descriptor_;
}
bool stEnterLevelError_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stEnterLevelError_ProtoFunID stEnterLevelError::FunID;
const stEnterLevelError_ProtoFunID stEnterLevelError::ProtoFunID_MIN;
const stEnterLevelError_ProtoFunID stEnterLevelError::ProtoFunID_MAX;
const int stEnterLevelError::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stEnterLevelError::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

stEnterLevelError::stEnterLevelError()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stEnterLevelError::InitAsDefaultInstance() {
}

stEnterLevelError::stEnterLevelError(const stEnterLevelError& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stEnterLevelError::SharedCtor() {
  _cached_size_ = 0;
  errorcode_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stEnterLevelError::~stEnterLevelError() {
  SharedDtor();
}

void stEnterLevelError::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stEnterLevelError::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stEnterLevelError::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stEnterLevelError_descriptor_;
}

const stEnterLevelError& stEnterLevelError::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Map_2eproto();
  return *default_instance_;
}

stEnterLevelError* stEnterLevelError::default_instance_ = NULL;

stEnterLevelError* stEnterLevelError::New() const {
  return new stEnterLevelError;
}

void stEnterLevelError::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errorcode_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stEnterLevelError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Map.stEnterLevelError.Error errorCode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Map::stEnterLevelError_Error_IsValid(value)) {
            set_errorcode(static_cast< ::Map::stEnterLevelError_Error >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stEnterLevelError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Map.stEnterLevelError.Error errorCode = 1;
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->errorcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stEnterLevelError::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Map.stEnterLevelError.Error errorCode = 1;
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->errorcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stEnterLevelError::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Map.stEnterLevelError.Error errorCode = 1;
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->errorcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stEnterLevelError::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stEnterLevelError* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stEnterLevelError*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stEnterLevelError::MergeFrom(const stEnterLevelError& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stEnterLevelError::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stEnterLevelError::CopyFrom(const stEnterLevelError& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stEnterLevelError::IsInitialized() const {

  return true;
}

void stEnterLevelError::Swap(stEnterLevelError* other) {
  if (other != this) {
    std::swap(errorcode_, other->errorcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stEnterLevelError::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stEnterLevelError_descriptor_;
  metadata.reflection = stEnterLevelError_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stPlayerData::kMoIDFieldNumber;
const int stPlayerData::kRoleNameFieldNumber;
const int stPlayerData::kJobFieldNumber;
const int stPlayerData::kSexFieldNumber;
const int stPlayerData::kLevelFieldNumber;
const int stPlayerData::kXFieldNumber;
const int stPlayerData::kYFieldNumber;
const int stPlayerData::kZFieldNumber;
const int stPlayerData::kDirFieldNumber;
const int stPlayerData::kCampIDFieldNumber;
const int stPlayerData::kHpFieldNumber;
const int stPlayerData::kMaxHPFieldNumber;
const int stPlayerData::kMpFieldNumber;
const int stPlayerData::kMaxMPFieldNumber;
const int stPlayerData::kBatiFieldNumber;
const int stPlayerData::kMaxBatiFieldNumber;
const int stPlayerData::kHeadIDFieldNumber;
const int stPlayerData::kBodyIDFieldNumber;
const int stPlayerData::kWeaponIDFieldNumber;
const int stPlayerData::kCloackIDFieldNumber;
const int stPlayerData::kWingIDFieldNumber;
const int stPlayerData::kShoeIDFieldNumber;
const int stPlayerData::kFashionHairFieldNumber;
const int stPlayerData::kFashionFaceFieldNumber;
const int stPlayerData::kFashionBodyFieldNumber;
const int stPlayerData::kFashionWeaponFieldNumber;
const int stPlayerData::kFashionShoeFieldNumber;
const int stPlayerData::kFashionDecorationFieldNumber;
const int stPlayerData::kTitleIDFieldNumber;
const int stPlayerData::kEffectIDFieldNumber;
const int stPlayerData::kWingBreakLvFieldNumber;
const int stPlayerData::kFollowSpriteIdFieldNumber;
const int stPlayerData::kFollowSpriteLvlFieldNumber;
const int stPlayerData::kFashionWingIDFieldNumber;
const int stPlayerData::kCouplenameFieldNumber;
const int stPlayerData::kMountIDFieldNumber;
const int stPlayerData::kIsRobotFieldNumber;
#endif  // !_MSC_VER

stPlayerData::stPlayerData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stPlayerData::InitAsDefaultInstance() {
}

stPlayerData::stPlayerData(const stPlayerData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stPlayerData::SharedCtor() {
  _cached_size_ = 0;
  moid_ = 0u;
  rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  job_ = 0u;
  sex_ = 0u;
  level_ = 0u;
  x_ = 0u;
  y_ = 0u;
  z_ = 0u;
  dir_ = 0u;
  campid_ = 0u;
  hp_ = 0u;
  maxhp_ = 0u;
  mp_ = 0u;
  maxmp_ = 0u;
  bati_ = 0u;
  maxbati_ = 0u;
  headid_ = 0u;
  bodyid_ = 0u;
  weaponid_ = 0u;
  cloackid_ = 0u;
  wingid_ = 0u;
  shoeid_ = 0u;
  fashionhair_ = 0u;
  fashionface_ = 0u;
  fashionbody_ = 0u;
  fashionweapon_ = 0u;
  fashionshoe_ = 0u;
  fashiondecoration_ = 0u;
  titleid_ = 0u;
  effectid_ = 0u;
  wingbreaklv_ = 0u;
  followspriteid_ = 0u;
  followspritelvl_ = 0u;
  fashionwingid_ = 0u;
  couplename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mountid_ = 0u;
  isrobot_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stPlayerData::~stPlayerData() {
  SharedDtor();
}

void stPlayerData::SharedDtor() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  if (couplename_ != &::google::protobuf::internal::kEmptyString) {
    delete couplename_;
  }
  if (this != default_instance_) {
  }
}

void stPlayerData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stPlayerData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stPlayerData_descriptor_;
}

const stPlayerData& stPlayerData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Map_2eproto();
  return *default_instance_;
}

stPlayerData* stPlayerData::default_instance_ = NULL;

stPlayerData* stPlayerData::New() const {
  return new stPlayerData;
}

void stPlayerData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    moid_ = 0u;
    if (has_rolename()) {
      if (rolename_ != &::google::protobuf::internal::kEmptyString) {
        rolename_->clear();
      }
    }
    job_ = 0u;
    sex_ = 0u;
    level_ = 0u;
    x_ = 0u;
    y_ = 0u;
    z_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    dir_ = 0u;
    campid_ = 0u;
    hp_ = 0u;
    maxhp_ = 0u;
    mp_ = 0u;
    maxmp_ = 0u;
    bati_ = 0u;
    maxbati_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    headid_ = 0u;
    bodyid_ = 0u;
    weaponid_ = 0u;
    cloackid_ = 0u;
    wingid_ = 0u;
    shoeid_ = 0u;
    fashionhair_ = 0u;
    fashionface_ = 0u;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    fashionbody_ = 0u;
    fashionweapon_ = 0u;
    fashionshoe_ = 0u;
    fashiondecoration_ = 0u;
    titleid_ = 0u;
    effectid_ = 0u;
    wingbreaklv_ = 0u;
    followspriteid_ = 0u;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    followspritelvl_ = 0u;
    fashionwingid_ = 0u;
    if (has_couplename()) {
      if (couplename_ != &::google::protobuf::internal::kEmptyString) {
        couplename_->clear();
      }
    }
    mountid_ = 0u;
    isrobot_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stPlayerData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 moID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &moid_)));
          set_has_moid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_roleName;
        break;
      }

      // optional string roleName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roleName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rolename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rolename().data(), this->rolename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_job;
        break;
      }

      // optional uint32 job = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &job_)));
          set_has_job();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_sex;
        break;
      }

      // optional uint32 sex = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_level;
        break;
      }

      // optional uint32 level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_x;
        break;
      }

      // optional uint32 x = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_y;
        break;
      }

      // optional uint32 y = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_z;
        break;
      }

      // optional uint32 z = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_dir;
        break;
      }

      // optional uint32 dir = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dir:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dir_)));
          set_has_dir();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_campID;
        break;
      }

      // optional uint32 campID = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_campID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &campid_)));
          set_has_campid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_hp;
        break;
      }

      // optional uint32 hp = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_maxHP;
        break;
      }

      // optional uint32 maxHP = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxHP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxhp_)));
          set_has_maxhp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_mp;
        break;
      }

      // optional uint32 mp = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mp_)));
          set_has_mp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_maxMP;
        break;
      }

      // optional uint32 maxMP = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxMP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxmp_)));
          set_has_maxmp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_bati;
        break;
      }

      // optional uint32 bati = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bati:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bati_)));
          set_has_bati();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_maxBati;
        break;
      }

      // optional uint32 maxBati = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxBati:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxbati_)));
          set_has_maxbati();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_headID;
        break;
      }

      // optional uint32 headID = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_headID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &headid_)));
          set_has_headid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_bodyID;
        break;
      }

      // optional uint32 bodyID = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bodyID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bodyid_)));
          set_has_bodyid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_weaponID;
        break;
      }

      // optional uint32 weaponID = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weaponID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weaponid_)));
          set_has_weaponid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_cloackID;
        break;
      }

      // optional uint32 cloackID = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cloackID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cloackid_)));
          set_has_cloackid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_wingID;
        break;
      }

      // optional uint32 wingID = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wingID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wingid_)));
          set_has_wingid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_shoeID;
        break;
      }

      // optional uint32 shoeID = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shoeID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shoeid_)));
          set_has_shoeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_fashionHair;
        break;
      }

      // optional uint32 fashionHair = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fashionHair:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fashionhair_)));
          set_has_fashionhair();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_fashionFace;
        break;
      }

      // optional uint32 fashionFace = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fashionFace:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fashionface_)));
          set_has_fashionface();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_fashionBody;
        break;
      }

      // optional uint32 fashionBody = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fashionBody:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fashionbody_)));
          set_has_fashionbody();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_fashionWeapon;
        break;
      }

      // optional uint32 fashionWeapon = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fashionWeapon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fashionweapon_)));
          set_has_fashionweapon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_fashionShoe;
        break;
      }

      // optional uint32 fashionShoe = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fashionShoe:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fashionshoe_)));
          set_has_fashionshoe();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_fashionDecoration;
        break;
      }

      // optional uint32 fashionDecoration = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fashionDecoration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fashiondecoration_)));
          set_has_fashiondecoration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_titleID;
        break;
      }

      // optional uint32 titleID = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_titleID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &titleid_)));
          set_has_titleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_effectID;
        break;
      }

      // optional uint32 effectID = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_effectID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &effectid_)));
          set_has_effectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_wingBreakLv;
        break;
      }

      // optional uint32 wingBreakLv = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wingBreakLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wingbreaklv_)));
          set_has_wingbreaklv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_followSpriteId;
        break;
      }

      // optional uint32 followSpriteId = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_followSpriteId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &followspriteid_)));
          set_has_followspriteid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_followSpriteLvl;
        break;
      }

      // optional uint32 followSpriteLvl = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_followSpriteLvl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &followspritelvl_)));
          set_has_followspritelvl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_fashionWingID;
        break;
      }

      // optional uint32 fashionWingID = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fashionWingID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fashionwingid_)));
          set_has_fashionwingid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(282)) goto parse_couplename;
        break;
      }

      // optional string couplename = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_couplename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_couplename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->couplename().data(), this->couplename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(288)) goto parse_mountID;
        break;
      }

      // optional uint32 mountID = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mountID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mountid_)));
          set_has_mountid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(296)) goto parse_isRobot;
        break;
      }

      // optional bool isRobot = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isRobot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isrobot_)));
          set_has_isrobot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stPlayerData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 moID = 1;
  if (has_moid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->moid(), output);
  }

  // optional string roleName = 2;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->rolename(), output);
  }

  // optional uint32 job = 3;
  if (has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->job(), output);
  }

  // optional uint32 sex = 4;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sex(), output);
  }

  // optional uint32 level = 5;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->level(), output);
  }

  // optional uint32 x = 6;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->x(), output);
  }

  // optional uint32 y = 7;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->y(), output);
  }

  // optional uint32 z = 8;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->z(), output);
  }

  // optional uint32 dir = 9;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->dir(), output);
  }

  // optional uint32 campID = 10;
  if (has_campid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->campid(), output);
  }

  // optional uint32 hp = 11;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->hp(), output);
  }

  // optional uint32 maxHP = 12;
  if (has_maxhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->maxhp(), output);
  }

  // optional uint32 mp = 13;
  if (has_mp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->mp(), output);
  }

  // optional uint32 maxMP = 14;
  if (has_maxmp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->maxmp(), output);
  }

  // optional uint32 bati = 15;
  if (has_bati()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->bati(), output);
  }

  // optional uint32 maxBati = 16;
  if (has_maxbati()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->maxbati(), output);
  }

  // optional uint32 headID = 17;
  if (has_headid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->headid(), output);
  }

  // optional uint32 bodyID = 18;
  if (has_bodyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->bodyid(), output);
  }

  // optional uint32 weaponID = 19;
  if (has_weaponid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->weaponid(), output);
  }

  // optional uint32 cloackID = 20;
  if (has_cloackid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->cloackid(), output);
  }

  // optional uint32 wingID = 21;
  if (has_wingid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->wingid(), output);
  }

  // optional uint32 shoeID = 22;
  if (has_shoeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->shoeid(), output);
  }

  // optional uint32 fashionHair = 23;
  if (has_fashionhair()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->fashionhair(), output);
  }

  // optional uint32 fashionFace = 24;
  if (has_fashionface()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->fashionface(), output);
  }

  // optional uint32 fashionBody = 25;
  if (has_fashionbody()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->fashionbody(), output);
  }

  // optional uint32 fashionWeapon = 26;
  if (has_fashionweapon()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->fashionweapon(), output);
  }

  // optional uint32 fashionShoe = 27;
  if (has_fashionshoe()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->fashionshoe(), output);
  }

  // optional uint32 fashionDecoration = 28;
  if (has_fashiondecoration()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->fashiondecoration(), output);
  }

  // optional uint32 titleID = 29;
  if (has_titleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(29, this->titleid(), output);
  }

  // optional uint32 effectID = 30;
  if (has_effectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->effectid(), output);
  }

  // optional uint32 wingBreakLv = 31;
  if (has_wingbreaklv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(31, this->wingbreaklv(), output);
  }

  // optional uint32 followSpriteId = 32;
  if (has_followspriteid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(32, this->followspriteid(), output);
  }

  // optional uint32 followSpriteLvl = 33;
  if (has_followspritelvl()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(33, this->followspritelvl(), output);
  }

  // optional uint32 fashionWingID = 34;
  if (has_fashionwingid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(34, this->fashionwingid(), output);
  }

  // optional string couplename = 35;
  if (has_couplename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->couplename().data(), this->couplename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      35, this->couplename(), output);
  }

  // optional uint32 mountID = 36;
  if (has_mountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(36, this->mountid(), output);
  }

  // optional bool isRobot = 37;
  if (has_isrobot()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(37, this->isrobot(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stPlayerData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 moID = 1;
  if (has_moid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->moid(), target);
  }

  // optional string roleName = 2;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->rolename(), target);
  }

  // optional uint32 job = 3;
  if (has_job()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->job(), target);
  }

  // optional uint32 sex = 4;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sex(), target);
  }

  // optional uint32 level = 5;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->level(), target);
  }

  // optional uint32 x = 6;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->x(), target);
  }

  // optional uint32 y = 7;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->y(), target);
  }

  // optional uint32 z = 8;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->z(), target);
  }

  // optional uint32 dir = 9;
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->dir(), target);
  }

  // optional uint32 campID = 10;
  if (has_campid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->campid(), target);
  }

  // optional uint32 hp = 11;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->hp(), target);
  }

  // optional uint32 maxHP = 12;
  if (has_maxhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->maxhp(), target);
  }

  // optional uint32 mp = 13;
  if (has_mp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->mp(), target);
  }

  // optional uint32 maxMP = 14;
  if (has_maxmp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->maxmp(), target);
  }

  // optional uint32 bati = 15;
  if (has_bati()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->bati(), target);
  }

  // optional uint32 maxBati = 16;
  if (has_maxbati()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->maxbati(), target);
  }

  // optional uint32 headID = 17;
  if (has_headid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->headid(), target);
  }

  // optional uint32 bodyID = 18;
  if (has_bodyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->bodyid(), target);
  }

  // optional uint32 weaponID = 19;
  if (has_weaponid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->weaponid(), target);
  }

  // optional uint32 cloackID = 20;
  if (has_cloackid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->cloackid(), target);
  }

  // optional uint32 wingID = 21;
  if (has_wingid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->wingid(), target);
  }

  // optional uint32 shoeID = 22;
  if (has_shoeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->shoeid(), target);
  }

  // optional uint32 fashionHair = 23;
  if (has_fashionhair()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->fashionhair(), target);
  }

  // optional uint32 fashionFace = 24;
  if (has_fashionface()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->fashionface(), target);
  }

  // optional uint32 fashionBody = 25;
  if (has_fashionbody()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->fashionbody(), target);
  }

  // optional uint32 fashionWeapon = 26;
  if (has_fashionweapon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(26, this->fashionweapon(), target);
  }

  // optional uint32 fashionShoe = 27;
  if (has_fashionshoe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(27, this->fashionshoe(), target);
  }

  // optional uint32 fashionDecoration = 28;
  if (has_fashiondecoration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(28, this->fashiondecoration(), target);
  }

  // optional uint32 titleID = 29;
  if (has_titleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(29, this->titleid(), target);
  }

  // optional uint32 effectID = 30;
  if (has_effectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->effectid(), target);
  }

  // optional uint32 wingBreakLv = 31;
  if (has_wingbreaklv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(31, this->wingbreaklv(), target);
  }

  // optional uint32 followSpriteId = 32;
  if (has_followspriteid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(32, this->followspriteid(), target);
  }

  // optional uint32 followSpriteLvl = 33;
  if (has_followspritelvl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(33, this->followspritelvl(), target);
  }

  // optional uint32 fashionWingID = 34;
  if (has_fashionwingid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(34, this->fashionwingid(), target);
  }

  // optional string couplename = 35;
  if (has_couplename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->couplename().data(), this->couplename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        35, this->couplename(), target);
  }

  // optional uint32 mountID = 36;
  if (has_mountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(36, this->mountid(), target);
  }

  // optional bool isRobot = 37;
  if (has_isrobot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(37, this->isrobot(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stPlayerData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 moID = 1;
    if (has_moid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->moid());
    }

    // optional string roleName = 2;
    if (has_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rolename());
    }

    // optional uint32 job = 3;
    if (has_job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->job());
    }

    // optional uint32 sex = 4;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sex());
    }

    // optional uint32 level = 5;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 x = 6;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->x());
    }

    // optional uint32 y = 7;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->y());
    }

    // optional uint32 z = 8;
    if (has_z()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->z());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 dir = 9;
    if (has_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dir());
    }

    // optional uint32 campID = 10;
    if (has_campid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->campid());
    }

    // optional uint32 hp = 11;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hp());
    }

    // optional uint32 maxHP = 12;
    if (has_maxhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxhp());
    }

    // optional uint32 mp = 13;
    if (has_mp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mp());
    }

    // optional uint32 maxMP = 14;
    if (has_maxmp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxmp());
    }

    // optional uint32 bati = 15;
    if (has_bati()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bati());
    }

    // optional uint32 maxBati = 16;
    if (has_maxbati()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxbati());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 headID = 17;
    if (has_headid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->headid());
    }

    // optional uint32 bodyID = 18;
    if (has_bodyid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bodyid());
    }

    // optional uint32 weaponID = 19;
    if (has_weaponid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weaponid());
    }

    // optional uint32 cloackID = 20;
    if (has_cloackid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cloackid());
    }

    // optional uint32 wingID = 21;
    if (has_wingid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wingid());
    }

    // optional uint32 shoeID = 22;
    if (has_shoeid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shoeid());
    }

    // optional uint32 fashionHair = 23;
    if (has_fashionhair()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fashionhair());
    }

    // optional uint32 fashionFace = 24;
    if (has_fashionface()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fashionface());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional uint32 fashionBody = 25;
    if (has_fashionbody()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fashionbody());
    }

    // optional uint32 fashionWeapon = 26;
    if (has_fashionweapon()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fashionweapon());
    }

    // optional uint32 fashionShoe = 27;
    if (has_fashionshoe()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fashionshoe());
    }

    // optional uint32 fashionDecoration = 28;
    if (has_fashiondecoration()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fashiondecoration());
    }

    // optional uint32 titleID = 29;
    if (has_titleid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->titleid());
    }

    // optional uint32 effectID = 30;
    if (has_effectid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->effectid());
    }

    // optional uint32 wingBreakLv = 31;
    if (has_wingbreaklv()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wingbreaklv());
    }

    // optional uint32 followSpriteId = 32;
    if (has_followspriteid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->followspriteid());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional uint32 followSpriteLvl = 33;
    if (has_followspritelvl()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->followspritelvl());
    }

    // optional uint32 fashionWingID = 34;
    if (has_fashionwingid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fashionwingid());
    }

    // optional string couplename = 35;
    if (has_couplename()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->couplename());
    }

    // optional uint32 mountID = 36;
    if (has_mountid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mountid());
    }

    // optional bool isRobot = 37;
    if (has_isrobot()) {
      total_size += 2 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stPlayerData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stPlayerData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stPlayerData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stPlayerData::MergeFrom(const stPlayerData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_moid()) {
      set_moid(from.moid());
    }
    if (from.has_rolename()) {
      set_rolename(from.rolename());
    }
    if (from.has_job()) {
      set_job(from.job());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_dir()) {
      set_dir(from.dir());
    }
    if (from.has_campid()) {
      set_campid(from.campid());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_maxhp()) {
      set_maxhp(from.maxhp());
    }
    if (from.has_mp()) {
      set_mp(from.mp());
    }
    if (from.has_maxmp()) {
      set_maxmp(from.maxmp());
    }
    if (from.has_bati()) {
      set_bati(from.bati());
    }
    if (from.has_maxbati()) {
      set_maxbati(from.maxbati());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_headid()) {
      set_headid(from.headid());
    }
    if (from.has_bodyid()) {
      set_bodyid(from.bodyid());
    }
    if (from.has_weaponid()) {
      set_weaponid(from.weaponid());
    }
    if (from.has_cloackid()) {
      set_cloackid(from.cloackid());
    }
    if (from.has_wingid()) {
      set_wingid(from.wingid());
    }
    if (from.has_shoeid()) {
      set_shoeid(from.shoeid());
    }
    if (from.has_fashionhair()) {
      set_fashionhair(from.fashionhair());
    }
    if (from.has_fashionface()) {
      set_fashionface(from.fashionface());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_fashionbody()) {
      set_fashionbody(from.fashionbody());
    }
    if (from.has_fashionweapon()) {
      set_fashionweapon(from.fashionweapon());
    }
    if (from.has_fashionshoe()) {
      set_fashionshoe(from.fashionshoe());
    }
    if (from.has_fashiondecoration()) {
      set_fashiondecoration(from.fashiondecoration());
    }
    if (from.has_titleid()) {
      set_titleid(from.titleid());
    }
    if (from.has_effectid()) {
      set_effectid(from.effectid());
    }
    if (from.has_wingbreaklv()) {
      set_wingbreaklv(from.wingbreaklv());
    }
    if (from.has_followspriteid()) {
      set_followspriteid(from.followspriteid());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_followspritelvl()) {
      set_followspritelvl(from.followspritelvl());
    }
    if (from.has_fashionwingid()) {
      set_fashionwingid(from.fashionwingid());
    }
    if (from.has_couplename()) {
      set_couplename(from.couplename());
    }
    if (from.has_mountid()) {
      set_mountid(from.mountid());
    }
    if (from.has_isrobot()) {
      set_isrobot(from.isrobot());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stPlayerData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stPlayerData::CopyFrom(const stPlayerData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stPlayerData::IsInitialized() const {

  return true;
}

void stPlayerData::Swap(stPlayerData* other) {
  if (other != this) {
    std::swap(moid_, other->moid_);
    std::swap(rolename_, other->rolename_);
    std::swap(job_, other->job_);
    std::swap(sex_, other->sex_);
    std::swap(level_, other->level_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(dir_, other->dir_);
    std::swap(campid_, other->campid_);
    std::swap(hp_, other->hp_);
    std::swap(maxhp_, other->maxhp_);
    std::swap(mp_, other->mp_);
    std::swap(maxmp_, other->maxmp_);
    std::swap(bati_, other->bati_);
    std::swap(maxbati_, other->maxbati_);
    std::swap(headid_, other->headid_);
    std::swap(bodyid_, other->bodyid_);
    std::swap(weaponid_, other->weaponid_);
    std::swap(cloackid_, other->cloackid_);
    std::swap(wingid_, other->wingid_);
    std::swap(shoeid_, other->shoeid_);
    std::swap(fashionhair_, other->fashionhair_);
    std::swap(fashionface_, other->fashionface_);
    std::swap(fashionbody_, other->fashionbody_);
    std::swap(fashionweapon_, other->fashionweapon_);
    std::swap(fashionshoe_, other->fashionshoe_);
    std::swap(fashiondecoration_, other->fashiondecoration_);
    std::swap(titleid_, other->titleid_);
    std::swap(effectid_, other->effectid_);
    std::swap(wingbreaklv_, other->wingbreaklv_);
    std::swap(followspriteid_, other->followspriteid_);
    std::swap(followspritelvl_, other->followspritelvl_);
    std::swap(fashionwingid_, other->fashionwingid_);
    std::swap(couplename_, other->couplename_);
    std::swap(mountid_, other->mountid_);
    std::swap(isrobot_, other->isrobot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stPlayerData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stPlayerData_descriptor_;
  metadata.reflection = stPlayerData_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NotifyPlayerAppear_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyPlayerAppear_ProtoModID_descriptor_;
}
bool NotifyPlayerAppear_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NotifyPlayerAppear_ProtoModID NotifyPlayerAppear::ModID;
const NotifyPlayerAppear_ProtoModID NotifyPlayerAppear::ProtoModID_MIN;
const NotifyPlayerAppear_ProtoModID NotifyPlayerAppear::ProtoModID_MAX;
const int NotifyPlayerAppear::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* NotifyPlayerAppear_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyPlayerAppear_ProtoFunID_descriptor_;
}
bool NotifyPlayerAppear_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NotifyPlayerAppear_ProtoFunID NotifyPlayerAppear::FunID;
const NotifyPlayerAppear_ProtoFunID NotifyPlayerAppear::ProtoFunID_MIN;
const NotifyPlayerAppear_ProtoFunID NotifyPlayerAppear::ProtoFunID_MAX;
const int NotifyPlayerAppear::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NotifyPlayerAppear::kDataFieldNumber;
#endif  // !_MSC_VER

NotifyPlayerAppear::NotifyPlayerAppear()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyPlayerAppear::InitAsDefaultInstance() {
}

NotifyPlayerAppear::NotifyPlayerAppear(const NotifyPlayerAppear& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyPlayerAppear::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyPlayerAppear::~NotifyPlayerAppear() {
  SharedDtor();
}

void NotifyPlayerAppear::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyPlayerAppear::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyPlayerAppear::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyPlayerAppear_descriptor_;
}

const NotifyPlayerAppear& NotifyPlayerAppear::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Map_2eproto();
  return *default_instance_;
}

NotifyPlayerAppear* NotifyPlayerAppear::default_instance_ = NULL;

NotifyPlayerAppear* NotifyPlayerAppear::New() const {
  return new NotifyPlayerAppear;
}

void NotifyPlayerAppear::Clear() {
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyPlayerAppear::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Map.stPlayerData data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyPlayerAppear::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Map.stPlayerData data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyPlayerAppear::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Map.stPlayerData data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyPlayerAppear::ByteSize() const {
  int total_size = 0;

  // repeated .Map.stPlayerData data = 1;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyPlayerAppear::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyPlayerAppear* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyPlayerAppear*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyPlayerAppear::MergeFrom(const NotifyPlayerAppear& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyPlayerAppear::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyPlayerAppear::CopyFrom(const NotifyPlayerAppear& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyPlayerAppear::IsInitialized() const {

  return true;
}

void NotifyPlayerAppear::Swap(NotifyPlayerAppear* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyPlayerAppear::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyPlayerAppear_descriptor_;
  metadata.reflection = NotifyPlayerAppear_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NotifyObjDisappear_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyObjDisappear_ProtoModID_descriptor_;
}
bool NotifyObjDisappear_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NotifyObjDisappear_ProtoModID NotifyObjDisappear::ModID;
const NotifyObjDisappear_ProtoModID NotifyObjDisappear::ProtoModID_MIN;
const NotifyObjDisappear_ProtoModID NotifyObjDisappear::ProtoModID_MAX;
const int NotifyObjDisappear::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* NotifyObjDisappear_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyObjDisappear_ProtoFunID_descriptor_;
}
bool NotifyObjDisappear_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 9:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NotifyObjDisappear_ProtoFunID NotifyObjDisappear::FunID;
const NotifyObjDisappear_ProtoFunID NotifyObjDisappear::ProtoFunID_MIN;
const NotifyObjDisappear_ProtoFunID NotifyObjDisappear::ProtoFunID_MAX;
const int NotifyObjDisappear::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NotifyObjDisappear_stObjDisappearInfo::kMoIDFieldNumber;
const int NotifyObjDisappear_stObjDisappearInfo::kMoTypeFieldNumber;
#endif  // !_MSC_VER

NotifyObjDisappear_stObjDisappearInfo::NotifyObjDisappear_stObjDisappearInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyObjDisappear_stObjDisappearInfo::InitAsDefaultInstance() {
}

NotifyObjDisappear_stObjDisappearInfo::NotifyObjDisappear_stObjDisappearInfo(const NotifyObjDisappear_stObjDisappearInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyObjDisappear_stObjDisappearInfo::SharedCtor() {
  _cached_size_ = 0;
  moid_ = 0u;
  motype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyObjDisappear_stObjDisappearInfo::~NotifyObjDisappear_stObjDisappearInfo() {
  SharedDtor();
}

void NotifyObjDisappear_stObjDisappearInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyObjDisappear_stObjDisappearInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyObjDisappear_stObjDisappearInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyObjDisappear_stObjDisappearInfo_descriptor_;
}

const NotifyObjDisappear_stObjDisappearInfo& NotifyObjDisappear_stObjDisappearInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Map_2eproto();
  return *default_instance_;
}

NotifyObjDisappear_stObjDisappearInfo* NotifyObjDisappear_stObjDisappearInfo::default_instance_ = NULL;

NotifyObjDisappear_stObjDisappearInfo* NotifyObjDisappear_stObjDisappearInfo::New() const {
  return new NotifyObjDisappear_stObjDisappearInfo;
}

void NotifyObjDisappear_stObjDisappearInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    moid_ = 0u;
    motype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyObjDisappear_stObjDisappearInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 moID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &moid_)));
          set_has_moid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_moType;
        break;
      }

      // optional uint32 moType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_moType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &motype_)));
          set_has_motype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyObjDisappear_stObjDisappearInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 moID = 1;
  if (has_moid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->moid(), output);
  }

  // optional uint32 moType = 2;
  if (has_motype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->motype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyObjDisappear_stObjDisappearInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 moID = 1;
  if (has_moid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->moid(), target);
  }

  // optional uint32 moType = 2;
  if (has_motype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->motype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyObjDisappear_stObjDisappearInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 moID = 1;
    if (has_moid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->moid());
    }

    // optional uint32 moType = 2;
    if (has_motype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->motype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyObjDisappear_stObjDisappearInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyObjDisappear_stObjDisappearInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyObjDisappear_stObjDisappearInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyObjDisappear_stObjDisappearInfo::MergeFrom(const NotifyObjDisappear_stObjDisappearInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_moid()) {
      set_moid(from.moid());
    }
    if (from.has_motype()) {
      set_motype(from.motype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyObjDisappear_stObjDisappearInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyObjDisappear_stObjDisappearInfo::CopyFrom(const NotifyObjDisappear_stObjDisappearInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyObjDisappear_stObjDisappearInfo::IsInitialized() const {

  return true;
}

void NotifyObjDisappear_stObjDisappearInfo::Swap(NotifyObjDisappear_stObjDisappearInfo* other) {
  if (other != this) {
    std::swap(moid_, other->moid_);
    std::swap(motype_, other->motype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyObjDisappear_stObjDisappearInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyObjDisappear_stObjDisappearInfo_descriptor_;
  metadata.reflection = NotifyObjDisappear_stObjDisappearInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int NotifyObjDisappear::kDataFieldNumber;
#endif  // !_MSC_VER

NotifyObjDisappear::NotifyObjDisappear()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyObjDisappear::InitAsDefaultInstance() {
}

NotifyObjDisappear::NotifyObjDisappear(const NotifyObjDisappear& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyObjDisappear::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyObjDisappear::~NotifyObjDisappear() {
  SharedDtor();
}

void NotifyObjDisappear::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyObjDisappear::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyObjDisappear::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyObjDisappear_descriptor_;
}

const NotifyObjDisappear& NotifyObjDisappear::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Map_2eproto();
  return *default_instance_;
}

NotifyObjDisappear* NotifyObjDisappear::default_instance_ = NULL;

NotifyObjDisappear* NotifyObjDisappear::New() const {
  return new NotifyObjDisappear;
}

void NotifyObjDisappear::Clear() {
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyObjDisappear::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Map.NotifyObjDisappear.stObjDisappearInfo data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyObjDisappear::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Map.NotifyObjDisappear.stObjDisappearInfo data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyObjDisappear::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Map.NotifyObjDisappear.stObjDisappearInfo data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyObjDisappear::ByteSize() const {
  int total_size = 0;

  // repeated .Map.NotifyObjDisappear.stObjDisappearInfo data = 1;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyObjDisappear::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyObjDisappear* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyObjDisappear*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyObjDisappear::MergeFrom(const NotifyObjDisappear& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyObjDisappear::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyObjDisappear::CopyFrom(const NotifyObjDisappear& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyObjDisappear::IsInitialized() const {

  return true;
}

void NotifyObjDisappear::Swap(NotifyObjDisappear* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyObjDisappear::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyObjDisappear_descriptor_;
  metadata.reflection = NotifyObjDisappear_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NotifyNpcAppear_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyNpcAppear_ProtoModID_descriptor_;
}
bool NotifyNpcAppear_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NotifyNpcAppear_ProtoModID NotifyNpcAppear::ModID;
const NotifyNpcAppear_ProtoModID NotifyNpcAppear::ProtoModID_MIN;
const NotifyNpcAppear_ProtoModID NotifyNpcAppear::ProtoModID_MAX;
const int NotifyNpcAppear::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* NotifyNpcAppear_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyNpcAppear_ProtoFunID_descriptor_;
}
bool NotifyNpcAppear_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 10:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NotifyNpcAppear_ProtoFunID NotifyNpcAppear::FunID;
const NotifyNpcAppear_ProtoFunID NotifyNpcAppear::ProtoFunID_MIN;
const NotifyNpcAppear_ProtoFunID NotifyNpcAppear::ProtoFunID_MAX;
const int NotifyNpcAppear::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NotifyNpcAppear_stNpcData::kNpcIDFieldNumber;
const int NotifyNpcAppear_stNpcData::kMoIDFieldNumber;
const int NotifyNpcAppear_stNpcData::kXFieldNumber;
const int NotifyNpcAppear_stNpcData::kYFieldNumber;
const int NotifyNpcAppear_stNpcData::kZFieldNumber;
const int NotifyNpcAppear_stNpcData::kHpFieldNumber;
const int NotifyNpcAppear_stNpcData::kLevelFieldNumber;
const int NotifyNpcAppear_stNpcData::kBornAminIDFieldNumber;
const int NotifyNpcAppear_stNpcData::kIsBossFieldNumber;
const int NotifyNpcAppear_stNpcData::kDirAngleFieldNumber;
const int NotifyNpcAppear_stNpcData::kActionGroupIDFieldNumber;
#endif  // !_MSC_VER

NotifyNpcAppear_stNpcData::NotifyNpcAppear_stNpcData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyNpcAppear_stNpcData::InitAsDefaultInstance() {
}

NotifyNpcAppear_stNpcData::NotifyNpcAppear_stNpcData(const NotifyNpcAppear_stNpcData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyNpcAppear_stNpcData::SharedCtor() {
  _cached_size_ = 0;
  npcid_ = 0u;
  moid_ = 0u;
  x_ = 0u;
  y_ = 0u;
  z_ = 0u;
  hp_ = 0u;
  level_ = 0u;
  bornaminid_ = 0u;
  isboss_ = false;
  dirangle_ = 0u;
  actiongroupid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyNpcAppear_stNpcData::~NotifyNpcAppear_stNpcData() {
  SharedDtor();
}

void NotifyNpcAppear_stNpcData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyNpcAppear_stNpcData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyNpcAppear_stNpcData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyNpcAppear_stNpcData_descriptor_;
}

const NotifyNpcAppear_stNpcData& NotifyNpcAppear_stNpcData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Map_2eproto();
  return *default_instance_;
}

NotifyNpcAppear_stNpcData* NotifyNpcAppear_stNpcData::default_instance_ = NULL;

NotifyNpcAppear_stNpcData* NotifyNpcAppear_stNpcData::New() const {
  return new NotifyNpcAppear_stNpcData;
}

void NotifyNpcAppear_stNpcData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    npcid_ = 0u;
    moid_ = 0u;
    x_ = 0u;
    y_ = 0u;
    z_ = 0u;
    hp_ = 0u;
    level_ = 0u;
    bornaminid_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    isboss_ = false;
    dirangle_ = 0u;
    actiongroupid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyNpcAppear_stNpcData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 npcID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &npcid_)));
          set_has_npcid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_moID;
        break;
      }

      // optional uint32 moID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_moID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &moid_)));
          set_has_moid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_x;
        break;
      }

      // optional uint32 x = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_y;
        break;
      }

      // optional uint32 y = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_z;
        break;
      }

      // optional uint32 z = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_hp;
        break;
      }

      // optional uint32 hp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_level;
        break;
      }

      // optional uint32 level = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_bornAminID;
        break;
      }

      // optional uint32 bornAminID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bornAminID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bornaminid_)));
          set_has_bornaminid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_isBoss;
        break;
      }

      // optional bool isBoss = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isBoss:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isboss_)));
          set_has_isboss();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_dirAngle;
        break;
      }

      // optional uint32 dirAngle = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dirAngle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dirangle_)));
          set_has_dirangle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_actionGroupID;
        break;
      }

      // optional uint32 actionGroupID = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_actionGroupID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &actiongroupid_)));
          set_has_actiongroupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyNpcAppear_stNpcData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 npcID = 1;
  if (has_npcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->npcid(), output);
  }

  // optional uint32 moID = 2;
  if (has_moid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->moid(), output);
  }

  // optional uint32 x = 3;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->x(), output);
  }

  // optional uint32 y = 4;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->y(), output);
  }

  // optional uint32 z = 5;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->z(), output);
  }

  // optional uint32 hp = 6;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->hp(), output);
  }

  // optional uint32 level = 7;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->level(), output);
  }

  // optional uint32 bornAminID = 8;
  if (has_bornaminid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->bornaminid(), output);
  }

  // optional bool isBoss = 9;
  if (has_isboss()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->isboss(), output);
  }

  // optional uint32 dirAngle = 10;
  if (has_dirangle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->dirangle(), output);
  }

  // optional uint32 actionGroupID = 11;
  if (has_actiongroupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->actiongroupid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyNpcAppear_stNpcData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 npcID = 1;
  if (has_npcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->npcid(), target);
  }

  // optional uint32 moID = 2;
  if (has_moid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->moid(), target);
  }

  // optional uint32 x = 3;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->x(), target);
  }

  // optional uint32 y = 4;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->y(), target);
  }

  // optional uint32 z = 5;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->z(), target);
  }

  // optional uint32 hp = 6;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->hp(), target);
  }

  // optional uint32 level = 7;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->level(), target);
  }

  // optional uint32 bornAminID = 8;
  if (has_bornaminid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->bornaminid(), target);
  }

  // optional bool isBoss = 9;
  if (has_isboss()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->isboss(), target);
  }

  // optional uint32 dirAngle = 10;
  if (has_dirangle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->dirangle(), target);
  }

  // optional uint32 actionGroupID = 11;
  if (has_actiongroupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->actiongroupid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyNpcAppear_stNpcData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 npcID = 1;
    if (has_npcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->npcid());
    }

    // optional uint32 moID = 2;
    if (has_moid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->moid());
    }

    // optional uint32 x = 3;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->x());
    }

    // optional uint32 y = 4;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->y());
    }

    // optional uint32 z = 5;
    if (has_z()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->z());
    }

    // optional uint32 hp = 6;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hp());
    }

    // optional uint32 level = 7;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 bornAminID = 8;
    if (has_bornaminid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bornaminid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool isBoss = 9;
    if (has_isboss()) {
      total_size += 1 + 1;
    }

    // optional uint32 dirAngle = 10;
    if (has_dirangle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dirangle());
    }

    // optional uint32 actionGroupID = 11;
    if (has_actiongroupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->actiongroupid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyNpcAppear_stNpcData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyNpcAppear_stNpcData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyNpcAppear_stNpcData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyNpcAppear_stNpcData::MergeFrom(const NotifyNpcAppear_stNpcData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_npcid()) {
      set_npcid(from.npcid());
    }
    if (from.has_moid()) {
      set_moid(from.moid());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_bornaminid()) {
      set_bornaminid(from.bornaminid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_isboss()) {
      set_isboss(from.isboss());
    }
    if (from.has_dirangle()) {
      set_dirangle(from.dirangle());
    }
    if (from.has_actiongroupid()) {
      set_actiongroupid(from.actiongroupid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyNpcAppear_stNpcData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyNpcAppear_stNpcData::CopyFrom(const NotifyNpcAppear_stNpcData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyNpcAppear_stNpcData::IsInitialized() const {

  return true;
}

void NotifyNpcAppear_stNpcData::Swap(NotifyNpcAppear_stNpcData* other) {
  if (other != this) {
    std::swap(npcid_, other->npcid_);
    std::swap(moid_, other->moid_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(hp_, other->hp_);
    std::swap(level_, other->level_);
    std::swap(bornaminid_, other->bornaminid_);
    std::swap(isboss_, other->isboss_);
    std::swap(dirangle_, other->dirangle_);
    std::swap(actiongroupid_, other->actiongroupid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyNpcAppear_stNpcData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyNpcAppear_stNpcData_descriptor_;
  metadata.reflection = NotifyNpcAppear_stNpcData_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int NotifyNpcAppear::kDataFieldNumber;
#endif  // !_MSC_VER

NotifyNpcAppear::NotifyNpcAppear()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyNpcAppear::InitAsDefaultInstance() {
}

NotifyNpcAppear::NotifyNpcAppear(const NotifyNpcAppear& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyNpcAppear::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyNpcAppear::~NotifyNpcAppear() {
  SharedDtor();
}

void NotifyNpcAppear::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyNpcAppear::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyNpcAppear::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyNpcAppear_descriptor_;
}

const NotifyNpcAppear& NotifyNpcAppear::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Map_2eproto();
  return *default_instance_;
}

NotifyNpcAppear* NotifyNpcAppear::default_instance_ = NULL;

NotifyNpcAppear* NotifyNpcAppear::New() const {
  return new NotifyNpcAppear;
}

void NotifyNpcAppear::Clear() {
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyNpcAppear::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Map.NotifyNpcAppear.stNpcData data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyNpcAppear::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Map.NotifyNpcAppear.stNpcData data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyNpcAppear::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Map.NotifyNpcAppear.stNpcData data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyNpcAppear::ByteSize() const {
  int total_size = 0;

  // repeated .Map.NotifyNpcAppear.stNpcData data = 1;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyNpcAppear::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyNpcAppear* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyNpcAppear*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyNpcAppear::MergeFrom(const NotifyNpcAppear& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyNpcAppear::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyNpcAppear::CopyFrom(const NotifyNpcAppear& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyNpcAppear::IsInitialized() const {

  return true;
}

void NotifyNpcAppear::Swap(NotifyNpcAppear* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyNpcAppear::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyNpcAppear_descriptor_;
  metadata.reflection = NotifyNpcAppear_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NotifyHeroAppear_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyHeroAppear_ProtoModID_descriptor_;
}
bool NotifyHeroAppear_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NotifyHeroAppear_ProtoModID NotifyHeroAppear::ModID;
const NotifyHeroAppear_ProtoModID NotifyHeroAppear::ProtoModID_MIN;
const NotifyHeroAppear_ProtoModID NotifyHeroAppear::ProtoModID_MAX;
const int NotifyHeroAppear::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* NotifyHeroAppear_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyHeroAppear_ProtoFunID_descriptor_;
}
bool NotifyHeroAppear_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 11:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NotifyHeroAppear_ProtoFunID NotifyHeroAppear::FunID;
const NotifyHeroAppear_ProtoFunID NotifyHeroAppear::ProtoFunID_MIN;
const NotifyHeroAppear_ProtoFunID NotifyHeroAppear::ProtoFunID_MAX;
const int NotifyHeroAppear::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NotifyHeroAppear_stHeroData::kHeroIDFieldNumber;
const int NotifyHeroAppear_stHeroData::kMoIDFieldNumber;
const int NotifyHeroAppear_stHeroData::kXFieldNumber;
const int NotifyHeroAppear_stHeroData::kYFieldNumber;
const int NotifyHeroAppear_stHeroData::kZFieldNumber;
const int NotifyHeroAppear_stHeroData::kHpFieldNumber;
const int NotifyHeroAppear_stHeroData::kMaxHPFieldNumber;
const int NotifyHeroAppear_stHeroData::kMasterMoIDFieldNumber;
const int NotifyHeroAppear_stHeroData::kCampIDFieldNumber;
const int NotifyHeroAppear_stHeroData::kLevelFieldNumber;
const int NotifyHeroAppear_stHeroData::kCreateBySkillFieldNumber;
const int NotifyHeroAppear_stHeroData::kPosFieldNumber;
#endif  // !_MSC_VER

NotifyHeroAppear_stHeroData::NotifyHeroAppear_stHeroData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyHeroAppear_stHeroData::InitAsDefaultInstance() {
}

NotifyHeroAppear_stHeroData::NotifyHeroAppear_stHeroData(const NotifyHeroAppear_stHeroData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyHeroAppear_stHeroData::SharedCtor() {
  _cached_size_ = 0;
  heroid_ = 0u;
  moid_ = 0u;
  x_ = 0u;
  y_ = 0u;
  z_ = 0u;
  hp_ = 0u;
  maxhp_ = 0u;
  mastermoid_ = 0u;
  campid_ = 0u;
  level_ = 0u;
  createbyskill_ = false;
  pos_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyHeroAppear_stHeroData::~NotifyHeroAppear_stHeroData() {
  SharedDtor();
}

void NotifyHeroAppear_stHeroData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyHeroAppear_stHeroData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyHeroAppear_stHeroData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyHeroAppear_stHeroData_descriptor_;
}

const NotifyHeroAppear_stHeroData& NotifyHeroAppear_stHeroData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Map_2eproto();
  return *default_instance_;
}

NotifyHeroAppear_stHeroData* NotifyHeroAppear_stHeroData::default_instance_ = NULL;

NotifyHeroAppear_stHeroData* NotifyHeroAppear_stHeroData::New() const {
  return new NotifyHeroAppear_stHeroData;
}

void NotifyHeroAppear_stHeroData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    heroid_ = 0u;
    moid_ = 0u;
    x_ = 0u;
    y_ = 0u;
    z_ = 0u;
    hp_ = 0u;
    maxhp_ = 0u;
    mastermoid_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    campid_ = 0u;
    level_ = 0u;
    createbyskill_ = false;
    pos_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyHeroAppear_stHeroData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 heroID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heroid_)));
          set_has_heroid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_moID;
        break;
      }

      // optional uint32 moID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_moID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &moid_)));
          set_has_moid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_x;
        break;
      }

      // optional uint32 x = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_y;
        break;
      }

      // optional uint32 y = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_z;
        break;
      }

      // optional uint32 z = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_hp;
        break;
      }

      // optional uint32 hp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_maxHP;
        break;
      }

      // optional uint32 maxHP = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxHP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxhp_)));
          set_has_maxhp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_masterMoID;
        break;
      }

      // optional uint32 masterMoID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_masterMoID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mastermoid_)));
          set_has_mastermoid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_campID;
        break;
      }

      // optional uint32 campID = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_campID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &campid_)));
          set_has_campid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_level;
        break;
      }

      // optional uint32 level = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_createBySkill;
        break;
      }

      // optional bool createBySkill = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_createBySkill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &createbyskill_)));
          set_has_createbyskill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_pos;
        break;
      }

      // optional uint32 pos = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyHeroAppear_stHeroData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 heroID = 1;
  if (has_heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->heroid(), output);
  }

  // optional uint32 moID = 2;
  if (has_moid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->moid(), output);
  }

  // optional uint32 x = 3;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->x(), output);
  }

  // optional uint32 y = 4;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->y(), output);
  }

  // optional uint32 z = 5;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->z(), output);
  }

  // optional uint32 hp = 6;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->hp(), output);
  }

  // optional uint32 maxHP = 7;
  if (has_maxhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->maxhp(), output);
  }

  // optional uint32 masterMoID = 8;
  if (has_mastermoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->mastermoid(), output);
  }

  // optional uint32 campID = 9;
  if (has_campid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->campid(), output);
  }

  // optional uint32 level = 10;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->level(), output);
  }

  // optional bool createBySkill = 11;
  if (has_createbyskill()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->createbyskill(), output);
  }

  // optional uint32 pos = 12;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyHeroAppear_stHeroData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 heroID = 1;
  if (has_heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->heroid(), target);
  }

  // optional uint32 moID = 2;
  if (has_moid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->moid(), target);
  }

  // optional uint32 x = 3;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->x(), target);
  }

  // optional uint32 y = 4;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->y(), target);
  }

  // optional uint32 z = 5;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->z(), target);
  }

  // optional uint32 hp = 6;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->hp(), target);
  }

  // optional uint32 maxHP = 7;
  if (has_maxhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->maxhp(), target);
  }

  // optional uint32 masterMoID = 8;
  if (has_mastermoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->mastermoid(), target);
  }

  // optional uint32 campID = 9;
  if (has_campid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->campid(), target);
  }

  // optional uint32 level = 10;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->level(), target);
  }

  // optional bool createBySkill = 11;
  if (has_createbyskill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->createbyskill(), target);
  }

  // optional uint32 pos = 12;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyHeroAppear_stHeroData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 heroID = 1;
    if (has_heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heroid());
    }

    // optional uint32 moID = 2;
    if (has_moid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->moid());
    }

    // optional uint32 x = 3;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->x());
    }

    // optional uint32 y = 4;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->y());
    }

    // optional uint32 z = 5;
    if (has_z()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->z());
    }

    // optional uint32 hp = 6;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hp());
    }

    // optional uint32 maxHP = 7;
    if (has_maxhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxhp());
    }

    // optional uint32 masterMoID = 8;
    if (has_mastermoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mastermoid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 campID = 9;
    if (has_campid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->campid());
    }

    // optional uint32 level = 10;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional bool createBySkill = 11;
    if (has_createbyskill()) {
      total_size += 1 + 1;
    }

    // optional uint32 pos = 12;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyHeroAppear_stHeroData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyHeroAppear_stHeroData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyHeroAppear_stHeroData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyHeroAppear_stHeroData::MergeFrom(const NotifyHeroAppear_stHeroData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_heroid()) {
      set_heroid(from.heroid());
    }
    if (from.has_moid()) {
      set_moid(from.moid());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_maxhp()) {
      set_maxhp(from.maxhp());
    }
    if (from.has_mastermoid()) {
      set_mastermoid(from.mastermoid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_campid()) {
      set_campid(from.campid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_createbyskill()) {
      set_createbyskill(from.createbyskill());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyHeroAppear_stHeroData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyHeroAppear_stHeroData::CopyFrom(const NotifyHeroAppear_stHeroData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyHeroAppear_stHeroData::IsInitialized() const {

  return true;
}

void NotifyHeroAppear_stHeroData::Swap(NotifyHeroAppear_stHeroData* other) {
  if (other != this) {
    std::swap(heroid_, other->heroid_);
    std::swap(moid_, other->moid_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(hp_, other->hp_);
    std::swap(maxhp_, other->maxhp_);
    std::swap(mastermoid_, other->mastermoid_);
    std::swap(campid_, other->campid_);
    std::swap(level_, other->level_);
    std::swap(createbyskill_, other->createbyskill_);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyHeroAppear_stHeroData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyHeroAppear_stHeroData_descriptor_;
  metadata.reflection = NotifyHeroAppear_stHeroData_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int NotifyHeroAppear::kDataFieldNumber;
#endif  // !_MSC_VER

NotifyHeroAppear::NotifyHeroAppear()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyHeroAppear::InitAsDefaultInstance() {
}

NotifyHeroAppear::NotifyHeroAppear(const NotifyHeroAppear& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyHeroAppear::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyHeroAppear::~NotifyHeroAppear() {
  SharedDtor();
}

void NotifyHeroAppear::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyHeroAppear::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyHeroAppear::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyHeroAppear_descriptor_;
}

const NotifyHeroAppear& NotifyHeroAppear::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Map_2eproto();
  return *default_instance_;
}

NotifyHeroAppear* NotifyHeroAppear::default_instance_ = NULL;

NotifyHeroAppear* NotifyHeroAppear::New() const {
  return new NotifyHeroAppear;
}

void NotifyHeroAppear::Clear() {
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyHeroAppear::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Map.NotifyHeroAppear.stHeroData data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyHeroAppear::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Map.NotifyHeroAppear.stHeroData data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyHeroAppear::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Map.NotifyHeroAppear.stHeroData data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyHeroAppear::ByteSize() const {
  int total_size = 0;

  // repeated .Map.NotifyHeroAppear.stHeroData data = 1;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyHeroAppear::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyHeroAppear* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyHeroAppear*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyHeroAppear::MergeFrom(const NotifyHeroAppear& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyHeroAppear::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyHeroAppear::CopyFrom(const NotifyHeroAppear& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyHeroAppear::IsInitialized() const {

  return true;
}

void NotifyHeroAppear::Swap(NotifyHeroAppear* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyHeroAppear::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyHeroAppear_descriptor_;
  metadata.reflection = NotifyHeroAppear_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Pos::kXFieldNumber;
const int Pos::kYFieldNumber;
const int Pos::kZFieldNumber;
#endif  // !_MSC_VER

Pos::Pos()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Pos::InitAsDefaultInstance() {
}

Pos::Pos(const Pos& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Pos::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0u;
  y_ = 0u;
  z_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Pos::~Pos() {
  SharedDtor();
}

void Pos::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Pos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Pos::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Pos_descriptor_;
}

const Pos& Pos::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Map_2eproto();
  return *default_instance_;
}

Pos* Pos::default_instance_ = NULL;

Pos* Pos::New() const {
  return new Pos;
}

void Pos::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0u;
    y_ = 0u;
    z_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Pos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_y;
        break;
      }

      // optional uint32 y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_z;
        break;
      }

      // optional uint32 z = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Pos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->x(), output);
  }

  // optional uint32 y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->y(), output);
  }

  // optional uint32 z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->z(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Pos::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->x(), target);
  }

  // optional uint32 y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->y(), target);
  }

  // optional uint32 z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->z(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Pos::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 x = 1;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->x());
    }

    // optional uint32 y = 2;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->y());
    }

    // optional uint32 z = 3;
    if (has_z()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->z());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Pos::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Pos* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Pos*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Pos::MergeFrom(const Pos& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Pos::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pos::CopyFrom(const Pos& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pos::IsInitialized() const {

  return true;
}

void Pos::Swap(Pos* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Pos::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Pos_descriptor_;
  metadata.reflection = Pos_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ReqMove_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqMove_ProtoModID_descriptor_;
}
bool ReqMove_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ReqMove_ProtoModID ReqMove::ModID;
const ReqMove_ProtoModID ReqMove::ProtoModID_MIN;
const ReqMove_ProtoModID ReqMove::ProtoModID_MAX;
const int ReqMove::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* ReqMove_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqMove_ProtoFunID_descriptor_;
}
bool ReqMove_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 12:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ReqMove_ProtoFunID ReqMove::FunID;
const ReqMove_ProtoFunID ReqMove::ProtoFunID_MIN;
const ReqMove_ProtoFunID ReqMove::ProtoFunID_MAX;
const int ReqMove::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ReqMove::kMoIDFieldNumber;
const int ReqMove::kTypeFieldNumber;
const int ReqMove::kPathFieldNumber;
const int ReqMove::kIsInstantFieldNumber;
#endif  // !_MSC_VER

ReqMove::ReqMove()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqMove::InitAsDefaultInstance() {
  path_ = const_cast< ::Map::Pos*>(&::Map::Pos::default_instance());
}

ReqMove::ReqMove(const ReqMove& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqMove::SharedCtor() {
  _cached_size_ = 0;
  moid_ = 0u;
  type_ = 0u;
  path_ = NULL;
  isinstant_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqMove::~ReqMove() {
  SharedDtor();
}

void ReqMove::SharedDtor() {
  if (this != default_instance_) {
    delete path_;
  }
}

void ReqMove::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqMove::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqMove_descriptor_;
}

const ReqMove& ReqMove::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Map_2eproto();
  return *default_instance_;
}

ReqMove* ReqMove::default_instance_ = NULL;

ReqMove* ReqMove::New() const {
  return new ReqMove;
}

void ReqMove::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    moid_ = 0u;
    type_ = 0u;
    if (has_path()) {
      if (path_ != NULL) path_->::Map::Pos::Clear();
    }
    isinstant_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqMove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 moID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &moid_)));
          set_has_moid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional uint32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_path;
        break;
      }

      // optional .Map.Pos path = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_path()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_isInstant;
        break;
      }

      // optional bool isInstant = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isInstant:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isinstant_)));
          set_has_isinstant();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqMove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 moID = 1;
  if (has_moid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->moid(), output);
  }

  // optional uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // optional .Map.Pos path = 3;
  if (has_path()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->path(), output);
  }

  // optional bool isInstant = 4;
  if (has_isinstant()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->isinstant(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqMove::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 moID = 1;
  if (has_moid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->moid(), target);
  }

  // optional uint32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // optional .Map.Pos path = 3;
  if (has_path()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->path(), target);
  }

  // optional bool isInstant = 4;
  if (has_isinstant()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->isinstant(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqMove::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 moID = 1;
    if (has_moid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->moid());
    }

    // optional uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional .Map.Pos path = 3;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->path());
    }

    // optional bool isInstant = 4;
    if (has_isinstant()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqMove::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqMove* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqMove*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqMove::MergeFrom(const ReqMove& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_moid()) {
      set_moid(from.moid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_path()) {
      mutable_path()->::Map::Pos::MergeFrom(from.path());
    }
    if (from.has_isinstant()) {
      set_isinstant(from.isinstant());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqMove::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqMove::CopyFrom(const ReqMove& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqMove::IsInitialized() const {

  return true;
}

void ReqMove::Swap(ReqMove* other) {
  if (other != this) {
    std::swap(moid_, other->moid_);
    std::swap(type_, other->type_);
    std::swap(path_, other->path_);
    std::swap(isinstant_, other->isinstant_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqMove::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqMove_descriptor_;
  metadata.reflection = ReqMove_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stNotifyMODMove_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyMODMove_ProtoModID_descriptor_;
}
bool stNotifyMODMove_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyMODMove_ProtoModID stNotifyMODMove::ModID;
const stNotifyMODMove_ProtoModID stNotifyMODMove::ProtoModID_MIN;
const stNotifyMODMove_ProtoModID stNotifyMODMove::ProtoModID_MAX;
const int stNotifyMODMove::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stNotifyMODMove_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyMODMove_ProtoFunID_descriptor_;
}
bool stNotifyMODMove_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 13:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyMODMove_ProtoFunID stNotifyMODMove::FunID;
const stNotifyMODMove_ProtoFunID stNotifyMODMove::ProtoFunID_MIN;
const stNotifyMODMove_ProtoFunID stNotifyMODMove::ProtoFunID_MAX;
const int stNotifyMODMove::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stNotifyMODMove_stModMoveInfo::kTypeFieldNumber;
const int stNotifyMODMove_stModMoveInfo::kModIDFieldNumber;
const int stNotifyMODMove_stModMoveInfo::kXFieldNumber;
const int stNotifyMODMove_stModMoveInfo::kYFieldNumber;
const int stNotifyMODMove_stModMoveInfo::kZFieldNumber;
const int stNotifyMODMove_stModMoveInfo::kDirFieldNumber;
#endif  // !_MSC_VER

stNotifyMODMove_stModMoveInfo::stNotifyMODMove_stModMoveInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stNotifyMODMove_stModMoveInfo::InitAsDefaultInstance() {
}

stNotifyMODMove_stModMoveInfo::stNotifyMODMove_stModMoveInfo(const stNotifyMODMove_stModMoveInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stNotifyMODMove_stModMoveInfo::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  modid_ = 0u;
  x_ = 0u;
  y_ = 0u;
  z_ = 0u;
  dir_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stNotifyMODMove_stModMoveInfo::~stNotifyMODMove_stModMoveInfo() {
  SharedDtor();
}

void stNotifyMODMove_stModMoveInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stNotifyMODMove_stModMoveInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stNotifyMODMove_stModMoveInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyMODMove_stModMoveInfo_descriptor_;
}

const stNotifyMODMove_stModMoveInfo& stNotifyMODMove_stModMoveInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Map_2eproto();
  return *default_instance_;
}

stNotifyMODMove_stModMoveInfo* stNotifyMODMove_stModMoveInfo::default_instance_ = NULL;

stNotifyMODMove_stModMoveInfo* stNotifyMODMove_stModMoveInfo::New() const {
  return new stNotifyMODMove_stModMoveInfo;
}

void stNotifyMODMove_stModMoveInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    modid_ = 0u;
    x_ = 0u;
    y_ = 0u;
    z_ = 0u;
    dir_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stNotifyMODMove_stModMoveInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_modID;
        break;
      }

      // optional uint32 modID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_modID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &modid_)));
          set_has_modid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_x;
        break;
      }

      // optional uint32 x = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_y;
        break;
      }

      // optional uint32 y = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_z;
        break;
      }

      // optional uint32 z = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_dir;
        break;
      }

      // optional uint32 dir = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dir:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dir_)));
          set_has_dir();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stNotifyMODMove_stModMoveInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // optional uint32 modID = 2;
  if (has_modid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->modid(), output);
  }

  // optional uint32 x = 3;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->x(), output);
  }

  // optional uint32 y = 4;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->y(), output);
  }

  // optional uint32 z = 5;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->z(), output);
  }

  // optional uint32 dir = 6;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->dir(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stNotifyMODMove_stModMoveInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // optional uint32 modID = 2;
  if (has_modid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->modid(), target);
  }

  // optional uint32 x = 3;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->x(), target);
  }

  // optional uint32 y = 4;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->y(), target);
  }

  // optional uint32 z = 5;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->z(), target);
  }

  // optional uint32 dir = 6;
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->dir(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stNotifyMODMove_stModMoveInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 modID = 2;
    if (has_modid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->modid());
    }

    // optional uint32 x = 3;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->x());
    }

    // optional uint32 y = 4;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->y());
    }

    // optional uint32 z = 5;
    if (has_z()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->z());
    }

    // optional uint32 dir = 6;
    if (has_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dir());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stNotifyMODMove_stModMoveInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stNotifyMODMove_stModMoveInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stNotifyMODMove_stModMoveInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stNotifyMODMove_stModMoveInfo::MergeFrom(const stNotifyMODMove_stModMoveInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_modid()) {
      set_modid(from.modid());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
    if (from.has_dir()) {
      set_dir(from.dir());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stNotifyMODMove_stModMoveInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stNotifyMODMove_stModMoveInfo::CopyFrom(const stNotifyMODMove_stModMoveInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stNotifyMODMove_stModMoveInfo::IsInitialized() const {

  return true;
}

void stNotifyMODMove_stModMoveInfo::Swap(stNotifyMODMove_stModMoveInfo* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(modid_, other->modid_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(dir_, other->dir_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stNotifyMODMove_stModMoveInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stNotifyMODMove_stModMoveInfo_descriptor_;
  metadata.reflection = stNotifyMODMove_stModMoveInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int stNotifyMODMove::kDataFieldNumber;
#endif  // !_MSC_VER

stNotifyMODMove::stNotifyMODMove()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stNotifyMODMove::InitAsDefaultInstance() {
}

stNotifyMODMove::stNotifyMODMove(const stNotifyMODMove& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stNotifyMODMove::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stNotifyMODMove::~stNotifyMODMove() {
  SharedDtor();
}

void stNotifyMODMove::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stNotifyMODMove::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stNotifyMODMove::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyMODMove_descriptor_;
}

const stNotifyMODMove& stNotifyMODMove::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Map_2eproto();
  return *default_instance_;
}

stNotifyMODMove* stNotifyMODMove::default_instance_ = NULL;

stNotifyMODMove* stNotifyMODMove::New() const {
  return new stNotifyMODMove;
}

void stNotifyMODMove::Clear() {
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stNotifyMODMove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Map.stNotifyMODMove.stModMoveInfo data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stNotifyMODMove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Map.stNotifyMODMove.stModMoveInfo data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stNotifyMODMove::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Map.stNotifyMODMove.stModMoveInfo data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stNotifyMODMove::ByteSize() const {
  int total_size = 0;

  // repeated .Map.stNotifyMODMove.stModMoveInfo data = 1;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stNotifyMODMove::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stNotifyMODMove* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stNotifyMODMove*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stNotifyMODMove::MergeFrom(const stNotifyMODMove& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stNotifyMODMove::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stNotifyMODMove::CopyFrom(const stNotifyMODMove& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stNotifyMODMove::IsInitialized() const {

  return true;
}

void stNotifyMODMove::Swap(stNotifyMODMove* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stNotifyMODMove::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stNotifyMODMove_descriptor_;
  metadata.reflection = stNotifyMODMove_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stThrowSkill_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stThrowSkill_ProtoModID_descriptor_;
}
bool stThrowSkill_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stThrowSkill_ProtoModID stThrowSkill::ModID;
const stThrowSkill_ProtoModID stThrowSkill::ProtoModID_MIN;
const stThrowSkill_ProtoModID stThrowSkill::ProtoModID_MAX;
const int stThrowSkill::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stThrowSkill_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stThrowSkill_ProtoFunID_descriptor_;
}
bool stThrowSkill_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 14:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stThrowSkill_ProtoFunID stThrowSkill::FunID;
const stThrowSkill_ProtoFunID stThrowSkill::ProtoFunID_MIN;
const stThrowSkill_ProtoFunID stThrowSkill::ProtoFunID_MAX;
const int stThrowSkill::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stThrowSkill::kSkillFieldNumber;
const int stThrowSkill::kAttTypeFieldNumber;
const int stThrowSkill::kAttMoIDFieldNumber;
const int stThrowSkill::kStepFieldNumber;
#endif  // !_MSC_VER

stThrowSkill::stThrowSkill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stThrowSkill::InitAsDefaultInstance() {
}

stThrowSkill::stThrowSkill(const stThrowSkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stThrowSkill::SharedCtor() {
  _cached_size_ = 0;
  skill_ = 0u;
  atttype_ = 0u;
  attmoid_ = 0u;
  step_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stThrowSkill::~stThrowSkill() {
  SharedDtor();
}

void stThrowSkill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stThrowSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stThrowSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stThrowSkill_descriptor_;
}

const stThrowSkill& stThrowSkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Map_2eproto();
  return *default_instance_;
}

stThrowSkill* stThrowSkill::default_instance_ = NULL;

stThrowSkill* stThrowSkill::New() const {
  return new stThrowSkill;
}

void stThrowSkill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skill_ = 0u;
    atttype_ = 0u;
    attmoid_ = 0u;
    step_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stThrowSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 skill = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_)));
          set_has_skill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_attType;
        break;
      }

      // optional uint32 attType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &atttype_)));
          set_has_atttype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_attMoID;
        break;
      }

      // optional uint32 attMoID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attMoID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attmoid_)));
          set_has_attmoid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_step;
        break;
      }

      // optional uint32 step = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_step:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &step_)));
          set_has_step();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stThrowSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 skill = 1;
  if (has_skill()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->skill(), output);
  }

  // optional uint32 attType = 2;
  if (has_atttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->atttype(), output);
  }

  // optional uint32 attMoID = 3;
  if (has_attmoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->attmoid(), output);
  }

  // optional uint32 step = 4;
  if (has_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->step(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stThrowSkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 skill = 1;
  if (has_skill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->skill(), target);
  }

  // optional uint32 attType = 2;
  if (has_atttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->atttype(), target);
  }

  // optional uint32 attMoID = 3;
  if (has_attmoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->attmoid(), target);
  }

  // optional uint32 step = 4;
  if (has_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->step(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stThrowSkill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 skill = 1;
    if (has_skill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill());
    }

    // optional uint32 attType = 2;
    if (has_atttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->atttype());
    }

    // optional uint32 attMoID = 3;
    if (has_attmoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attmoid());
    }

    // optional uint32 step = 4;
    if (has_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->step());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stThrowSkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stThrowSkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stThrowSkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stThrowSkill::MergeFrom(const stThrowSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skill()) {
      set_skill(from.skill());
    }
    if (from.has_atttype()) {
      set_atttype(from.atttype());
    }
    if (from.has_attmoid()) {
      set_attmoid(from.attmoid());
    }
    if (from.has_step()) {
      set_step(from.step());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stThrowSkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stThrowSkill::CopyFrom(const stThrowSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stThrowSkill::IsInitialized() const {

  return true;
}

void stThrowSkill::Swap(stThrowSkill* other) {
  if (other != this) {
    std::swap(skill_, other->skill_);
    std::swap(atttype_, other->atttype_);
    std::swap(attmoid_, other->attmoid_);
    std::swap(step_, other->step_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stThrowSkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stThrowSkill_descriptor_;
  metadata.reflection = stThrowSkill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stHitInfo::kMoTypeFieldNumber;
const int stHitInfo::kMoIDFieldNumber;
const int stHitInfo::kSkillIDFieldNumber;
const int stHitInfo::kDamageTimeFieldNumber;
#endif  // !_MSC_VER

stHitInfo::stHitInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stHitInfo::InitAsDefaultInstance() {
}

stHitInfo::stHitInfo(const stHitInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stHitInfo::SharedCtor() {
  _cached_size_ = 0;
  motype_ = 0u;
  moid_ = 0u;
  skillid_ = 0u;
  damagetime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stHitInfo::~stHitInfo() {
  SharedDtor();
}

void stHitInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stHitInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stHitInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stHitInfo_descriptor_;
}

const stHitInfo& stHitInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Map_2eproto();
  return *default_instance_;
}

stHitInfo* stHitInfo::default_instance_ = NULL;

stHitInfo* stHitInfo::New() const {
  return new stHitInfo;
}

void stHitInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    motype_ = 0u;
    moid_ = 0u;
    skillid_ = 0u;
    damagetime_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stHitInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 moType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &motype_)));
          set_has_motype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_moID;
        break;
      }

      // optional uint32 moID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_moID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &moid_)));
          set_has_moid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_skillID;
        break;
      }

      // optional uint32 skillID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_damageTime;
        break;
      }

      // optional uint32 damageTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_damageTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &damagetime_)));
          set_has_damagetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stHitInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 moType = 1;
  if (has_motype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->motype(), output);
  }

  // optional uint32 moID = 2;
  if (has_moid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->moid(), output);
  }

  // optional uint32 skillID = 3;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->skillid(), output);
  }

  // optional uint32 damageTime = 4;
  if (has_damagetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->damagetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stHitInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 moType = 1;
  if (has_motype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->motype(), target);
  }

  // optional uint32 moID = 2;
  if (has_moid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->moid(), target);
  }

  // optional uint32 skillID = 3;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->skillid(), target);
  }

  // optional uint32 damageTime = 4;
  if (has_damagetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->damagetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stHitInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 moType = 1;
    if (has_motype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->motype());
    }

    // optional uint32 moID = 2;
    if (has_moid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->moid());
    }

    // optional uint32 skillID = 3;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillid());
    }

    // optional uint32 damageTime = 4;
    if (has_damagetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->damagetime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stHitInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stHitInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stHitInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stHitInfo::MergeFrom(const stHitInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_motype()) {
      set_motype(from.motype());
    }
    if (from.has_moid()) {
      set_moid(from.moid());
    }
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_damagetime()) {
      set_damagetime(from.damagetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stHitInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stHitInfo::CopyFrom(const stHitInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stHitInfo::IsInitialized() const {

  return true;
}

void stHitInfo::Swap(stHitInfo* other) {
  if (other != this) {
    std::swap(motype_, other->motype_);
    std::swap(moid_, other->moid_);
    std::swap(skillid_, other->skillid_);
    std::swap(damagetime_, other->damagetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stHitInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stHitInfo_descriptor_;
  metadata.reflection = stHitInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stNotifyHit_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyHit_ProtoModID_descriptor_;
}
bool stNotifyHit_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyHit_ProtoModID stNotifyHit::ModID;
const stNotifyHit_ProtoModID stNotifyHit::ProtoModID_MIN;
const stNotifyHit_ProtoModID stNotifyHit::ProtoModID_MAX;
const int stNotifyHit::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stNotifyHit_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyHit_ProtoFunID_descriptor_;
}
bool stNotifyHit_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 15:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyHit_ProtoFunID stNotifyHit::FunID;
const stNotifyHit_ProtoFunID stNotifyHit::ProtoFunID_MIN;
const stNotifyHit_ProtoFunID stNotifyHit::ProtoFunID_MAX;
const int stNotifyHit::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stNotifyHit::kAttTypeFieldNumber;
const int stNotifyHit::kAttMoIDFieldNumber;
const int stNotifyHit::kStepFieldNumber;
const int stNotifyHit::kHitInfosFieldNumber;
#endif  // !_MSC_VER

stNotifyHit::stNotifyHit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stNotifyHit::InitAsDefaultInstance() {
}

stNotifyHit::stNotifyHit(const stNotifyHit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stNotifyHit::SharedCtor() {
  _cached_size_ = 0;
  atttype_ = 0u;
  attmoid_ = 0u;
  step_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stNotifyHit::~stNotifyHit() {
  SharedDtor();
}

void stNotifyHit::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stNotifyHit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stNotifyHit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyHit_descriptor_;
}

const stNotifyHit& stNotifyHit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Map_2eproto();
  return *default_instance_;
}

stNotifyHit* stNotifyHit::default_instance_ = NULL;

stNotifyHit* stNotifyHit::New() const {
  return new stNotifyHit;
}

void stNotifyHit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    atttype_ = 0u;
    attmoid_ = 0u;
    step_ = 0u;
  }
  hitinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stNotifyHit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 attType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &atttype_)));
          set_has_atttype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_attMoID;
        break;
      }

      // optional uint32 attMoID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attMoID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attmoid_)));
          set_has_attmoid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_step;
        break;
      }

      // optional uint32 step = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_step:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &step_)));
          set_has_step();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_hitInfos;
        break;
      }

      // repeated .Map.stHitInfo hitInfos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hitInfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hitinfos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_hitInfos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stNotifyHit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 attType = 1;
  if (has_atttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->atttype(), output);
  }

  // optional uint32 attMoID = 2;
  if (has_attmoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->attmoid(), output);
  }

  // optional uint32 step = 3;
  if (has_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->step(), output);
  }

  // repeated .Map.stHitInfo hitInfos = 4;
  for (int i = 0; i < this->hitinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->hitinfos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stNotifyHit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 attType = 1;
  if (has_atttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->atttype(), target);
  }

  // optional uint32 attMoID = 2;
  if (has_attmoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->attmoid(), target);
  }

  // optional uint32 step = 3;
  if (has_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->step(), target);
  }

  // repeated .Map.stHitInfo hitInfos = 4;
  for (int i = 0; i < this->hitinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->hitinfos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stNotifyHit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 attType = 1;
    if (has_atttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->atttype());
    }

    // optional uint32 attMoID = 2;
    if (has_attmoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attmoid());
    }

    // optional uint32 step = 3;
    if (has_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->step());
    }

  }
  // repeated .Map.stHitInfo hitInfos = 4;
  total_size += 1 * this->hitinfos_size();
  for (int i = 0; i < this->hitinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hitinfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stNotifyHit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stNotifyHit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stNotifyHit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stNotifyHit::MergeFrom(const stNotifyHit& from) {
  GOOGLE_CHECK_NE(&from, this);
  hitinfos_.MergeFrom(from.hitinfos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_atttype()) {
      set_atttype(from.atttype());
    }
    if (from.has_attmoid()) {
      set_attmoid(from.attmoid());
    }
    if (from.has_step()) {
      set_step(from.step());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stNotifyHit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stNotifyHit::CopyFrom(const stNotifyHit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stNotifyHit::IsInitialized() const {

  return true;
}

void stNotifyHit::Swap(stNotifyHit* other) {
  if (other != this) {
    std::swap(atttype_, other->atttype_);
    std::swap(attmoid_, other->attmoid_);
    std::swap(step_, other->step_);
    hitinfos_.Swap(&other->hitinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stNotifyHit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stNotifyHit_descriptor_;
  metadata.reflection = stNotifyHit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AttRetInfo::kTypeFieldNumber;
const int AttRetInfo::kMoIDFieldNumber;
const int AttRetInfo::kSkillFieldNumber;
const int AttRetInfo::kDecHPFieldNumber;
const int AttRetInfo::kResultFieldNumber;
#endif  // !_MSC_VER

AttRetInfo::AttRetInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AttRetInfo::InitAsDefaultInstance() {
}

AttRetInfo::AttRetInfo(const AttRetInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AttRetInfo::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  moid_ = 0u;
  skill_ = 0u;
  dechp_ = 0u;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AttRetInfo::~AttRetInfo() {
  SharedDtor();
}

void AttRetInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AttRetInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AttRetInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AttRetInfo_descriptor_;
}

const AttRetInfo& AttRetInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Map_2eproto();
  return *default_instance_;
}

AttRetInfo* AttRetInfo::default_instance_ = NULL;

AttRetInfo* AttRetInfo::New() const {
  return new AttRetInfo;
}

void AttRetInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    moid_ = 0u;
    skill_ = 0u;
    dechp_ = 0u;
    result_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AttRetInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_moID;
        break;
      }

      // optional uint32 moID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_moID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &moid_)));
          set_has_moid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_skill;
        break;
      }

      // optional uint32 skill = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_)));
          set_has_skill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_decHP;
        break;
      }

      // optional uint32 decHP = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_decHP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dechp_)));
          set_has_dechp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_result;
        break;
      }

      // optional uint32 result = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AttRetInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // optional uint32 moID = 2;
  if (has_moid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->moid(), output);
  }

  // optional uint32 skill = 3;
  if (has_skill()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->skill(), output);
  }

  // optional uint32 decHP = 4;
  if (has_dechp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->dechp(), output);
  }

  // optional uint32 result = 5;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AttRetInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // optional uint32 moID = 2;
  if (has_moid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->moid(), target);
  }

  // optional uint32 skill = 3;
  if (has_skill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->skill(), target);
  }

  // optional uint32 decHP = 4;
  if (has_dechp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->dechp(), target);
  }

  // optional uint32 result = 5;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AttRetInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 moID = 2;
    if (has_moid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->moid());
    }

    // optional uint32 skill = 3;
    if (has_skill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill());
    }

    // optional uint32 decHP = 4;
    if (has_dechp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dechp());
    }

    // optional uint32 result = 5;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AttRetInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AttRetInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AttRetInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AttRetInfo::MergeFrom(const AttRetInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_moid()) {
      set_moid(from.moid());
    }
    if (from.has_skill()) {
      set_skill(from.skill());
    }
    if (from.has_dechp()) {
      set_dechp(from.dechp());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AttRetInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AttRetInfo::CopyFrom(const AttRetInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttRetInfo::IsInitialized() const {

  return true;
}

void AttRetInfo::Swap(AttRetInfo* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(moid_, other->moid_);
    std::swap(skill_, other->skill_);
    std::swap(dechp_, other->dechp_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AttRetInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AttRetInfo_descriptor_;
  metadata.reflection = AttRetInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* AttackResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AttackResult_ProtoModID_descriptor_;
}
bool AttackResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const AttackResult_ProtoModID AttackResult::ModID;
const AttackResult_ProtoModID AttackResult::ProtoModID_MIN;
const AttackResult_ProtoModID AttackResult::ProtoModID_MAX;
const int AttackResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* AttackResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AttackResult_ProtoFunID_descriptor_;
}
bool AttackResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 16:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const AttackResult_ProtoFunID AttackResult::FunID;
const AttackResult_ProtoFunID AttackResult::ProtoFunID_MIN;
const AttackResult_ProtoFunID AttackResult::ProtoFunID_MAX;
const int AttackResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int AttackResult::kAttTypeFieldNumber;
const int AttackResult::kAttMoIDFieldNumber;
const int AttackResult::kStepFieldNumber;
const int AttackResult::kDamageTimeFieldNumber;
const int AttackResult::kAttListFieldNumber;
#endif  // !_MSC_VER

AttackResult::AttackResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AttackResult::InitAsDefaultInstance() {
}

AttackResult::AttackResult(const AttackResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AttackResult::SharedCtor() {
  _cached_size_ = 0;
  atttype_ = 0u;
  attmoid_ = 0u;
  step_ = 0u;
  damagetime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AttackResult::~AttackResult() {
  SharedDtor();
}

void AttackResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AttackResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AttackResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AttackResult_descriptor_;
}

const AttackResult& AttackResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Map_2eproto();
  return *default_instance_;
}

AttackResult* AttackResult::default_instance_ = NULL;

AttackResult* AttackResult::New() const {
  return new AttackResult;
}

void AttackResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    atttype_ = 0u;
    attmoid_ = 0u;
    step_ = 0u;
    damagetime_ = 0u;
  }
  attlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AttackResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 attType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &atttype_)));
          set_has_atttype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_attMoID;
        break;
      }

      // optional uint32 attMoID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attMoID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attmoid_)));
          set_has_attmoid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_step;
        break;
      }

      // optional uint32 step = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_step:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &step_)));
          set_has_step();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_damageTime;
        break;
      }

      // optional uint32 damageTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_damageTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &damagetime_)));
          set_has_damagetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_attList;
        break;
      }

      // repeated .Map.AttRetInfo attList = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_attList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AttackResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 attType = 1;
  if (has_atttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->atttype(), output);
  }

  // optional uint32 attMoID = 2;
  if (has_attmoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->attmoid(), output);
  }

  // optional uint32 step = 3;
  if (has_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->step(), output);
  }

  // optional uint32 damageTime = 4;
  if (has_damagetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->damagetime(), output);
  }

  // repeated .Map.AttRetInfo attList = 5;
  for (int i = 0; i < this->attlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->attlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AttackResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 attType = 1;
  if (has_atttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->atttype(), target);
  }

  // optional uint32 attMoID = 2;
  if (has_attmoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->attmoid(), target);
  }

  // optional uint32 step = 3;
  if (has_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->step(), target);
  }

  // optional uint32 damageTime = 4;
  if (has_damagetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->damagetime(), target);
  }

  // repeated .Map.AttRetInfo attList = 5;
  for (int i = 0; i < this->attlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->attlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AttackResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 attType = 1;
    if (has_atttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->atttype());
    }

    // optional uint32 attMoID = 2;
    if (has_attmoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attmoid());
    }

    // optional uint32 step = 3;
    if (has_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->step());
    }

    // optional uint32 damageTime = 4;
    if (has_damagetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->damagetime());
    }

  }
  // repeated .Map.AttRetInfo attList = 5;
  total_size += 1 * this->attlist_size();
  for (int i = 0; i < this->attlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AttackResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AttackResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AttackResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AttackResult::MergeFrom(const AttackResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  attlist_.MergeFrom(from.attlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_atttype()) {
      set_atttype(from.atttype());
    }
    if (from.has_attmoid()) {
      set_attmoid(from.attmoid());
    }
    if (from.has_step()) {
      set_step(from.step());
    }
    if (from.has_damagetime()) {
      set_damagetime(from.damagetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AttackResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AttackResult::CopyFrom(const AttackResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttackResult::IsInitialized() const {

  return true;
}

void AttackResult::Swap(AttackResult* other) {
  if (other != this) {
    std::swap(atttype_, other->atttype_);
    std::swap(attmoid_, other->attmoid_);
    std::swap(step_, other->step_);
    std::swap(damagetime_, other->damagetime_);
    attlist_.Swap(&other->attlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AttackResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AttackResult_descriptor_;
  metadata.reflection = AttackResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stMapObjAddHP_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stMapObjAddHP_ProtoModID_descriptor_;
}
bool stMapObjAddHP_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stMapObjAddHP_ProtoModID stMapObjAddHP::ModID;
const stMapObjAddHP_ProtoModID stMapObjAddHP::ProtoModID_MIN;
const stMapObjAddHP_ProtoModID stMapObjAddHP::ProtoModID_MAX;
const int stMapObjAddHP::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stMapObjAddHP_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stMapObjAddHP_ProtoFunID_descriptor_;
}
bool stMapObjAddHP_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 17:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stMapObjAddHP_ProtoFunID stMapObjAddHP::FunID;
const stMapObjAddHP_ProtoFunID stMapObjAddHP::ProtoFunID_MIN;
const stMapObjAddHP_ProtoFunID stMapObjAddHP::ProtoFunID_MAX;
const int stMapObjAddHP::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stMapObjAddHP::kMoTypeFieldNumber;
const int stMapObjAddHP::kMoIDFieldNumber;
const int stMapObjAddHP::kAddHPFieldNumber;
#endif  // !_MSC_VER

stMapObjAddHP::stMapObjAddHP()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stMapObjAddHP::InitAsDefaultInstance() {
}

stMapObjAddHP::stMapObjAddHP(const stMapObjAddHP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stMapObjAddHP::SharedCtor() {
  _cached_size_ = 0;
  motype_ = 0u;
  moid_ = 0u;
  addhp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stMapObjAddHP::~stMapObjAddHP() {
  SharedDtor();
}

void stMapObjAddHP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stMapObjAddHP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stMapObjAddHP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stMapObjAddHP_descriptor_;
}

const stMapObjAddHP& stMapObjAddHP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Map_2eproto();
  return *default_instance_;
}

stMapObjAddHP* stMapObjAddHP::default_instance_ = NULL;

stMapObjAddHP* stMapObjAddHP::New() const {
  return new stMapObjAddHP;
}

void stMapObjAddHP::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    motype_ = 0u;
    moid_ = 0u;
    addhp_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stMapObjAddHP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 moType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &motype_)));
          set_has_motype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_moID;
        break;
      }

      // optional uint32 moID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_moID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &moid_)));
          set_has_moid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_addHP;
        break;
      }

      // optional uint32 addHP = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addHP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &addhp_)));
          set_has_addhp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stMapObjAddHP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 moType = 1;
  if (has_motype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->motype(), output);
  }

  // optional uint32 moID = 2;
  if (has_moid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->moid(), output);
  }

  // optional uint32 addHP = 3;
  if (has_addhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->addhp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stMapObjAddHP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 moType = 1;
  if (has_motype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->motype(), target);
  }

  // optional uint32 moID = 2;
  if (has_moid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->moid(), target);
  }

  // optional uint32 addHP = 3;
  if (has_addhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->addhp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stMapObjAddHP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 moType = 1;
    if (has_motype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->motype());
    }

    // optional uint32 moID = 2;
    if (has_moid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->moid());
    }

    // optional uint32 addHP = 3;
    if (has_addhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->addhp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stMapObjAddHP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stMapObjAddHP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stMapObjAddHP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stMapObjAddHP::MergeFrom(const stMapObjAddHP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_motype()) {
      set_motype(from.motype());
    }
    if (from.has_moid()) {
      set_moid(from.moid());
    }
    if (from.has_addhp()) {
      set_addhp(from.addhp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stMapObjAddHP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stMapObjAddHP::CopyFrom(const stMapObjAddHP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stMapObjAddHP::IsInitialized() const {

  return true;
}

void stMapObjAddHP::Swap(stMapObjAddHP* other) {
  if (other != this) {
    std::swap(motype_, other->motype_);
    std::swap(moid_, other->moid_);
    std::swap(addhp_, other->addhp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stMapObjAddHP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stMapObjAddHP_descriptor_;
  metadata.reflection = stMapObjAddHP_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stInstantMove_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stInstantMove_ProtoModID_descriptor_;
}
bool stInstantMove_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stInstantMove_ProtoModID stInstantMove::ModID;
const stInstantMove_ProtoModID stInstantMove::ProtoModID_MIN;
const stInstantMove_ProtoModID stInstantMove::ProtoModID_MAX;
const int stInstantMove::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stInstantMove_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stInstantMove_ProtoFunID_descriptor_;
}
bool stInstantMove_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 18:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stInstantMove_ProtoFunID stInstantMove::FunID;
const stInstantMove_ProtoFunID stInstantMove::ProtoFunID_MIN;
const stInstantMove_ProtoFunID stInstantMove::ProtoFunID_MAX;
const int stInstantMove::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stInstantMove::kMoIDFieldNumber;
const int stInstantMove::kTypeFieldNumber;
const int stInstantMove::kDestPosFieldNumber;
#endif  // !_MSC_VER

stInstantMove::stInstantMove()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stInstantMove::InitAsDefaultInstance() {
  destpos_ = const_cast< ::Map::Pos*>(&::Map::Pos::default_instance());
}

stInstantMove::stInstantMove(const stInstantMove& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stInstantMove::SharedCtor() {
  _cached_size_ = 0;
  moid_ = 0u;
  type_ = 0u;
  destpos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stInstantMove::~stInstantMove() {
  SharedDtor();
}

void stInstantMove::SharedDtor() {
  if (this != default_instance_) {
    delete destpos_;
  }
}

void stInstantMove::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stInstantMove::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stInstantMove_descriptor_;
}

const stInstantMove& stInstantMove::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Map_2eproto();
  return *default_instance_;
}

stInstantMove* stInstantMove::default_instance_ = NULL;

stInstantMove* stInstantMove::New() const {
  return new stInstantMove;
}

void stInstantMove::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    moid_ = 0u;
    type_ = 0u;
    if (has_destpos()) {
      if (destpos_ != NULL) destpos_->::Map::Pos::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stInstantMove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 moID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &moid_)));
          set_has_moid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional uint32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_destPos;
        break;
      }

      // optional .Map.Pos destPos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_destPos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_destpos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stInstantMove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 moID = 1;
  if (has_moid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->moid(), output);
  }

  // optional uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // optional .Map.Pos destPos = 3;
  if (has_destpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->destpos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stInstantMove::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 moID = 1;
  if (has_moid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->moid(), target);
  }

  // optional uint32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // optional .Map.Pos destPos = 3;
  if (has_destpos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->destpos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stInstantMove::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 moID = 1;
    if (has_moid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->moid());
    }

    // optional uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional .Map.Pos destPos = 3;
    if (has_destpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->destpos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stInstantMove::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stInstantMove* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stInstantMove*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stInstantMove::MergeFrom(const stInstantMove& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_moid()) {
      set_moid(from.moid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_destpos()) {
      mutable_destpos()->::Map::Pos::MergeFrom(from.destpos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stInstantMove::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stInstantMove::CopyFrom(const stInstantMove& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stInstantMove::IsInitialized() const {

  return true;
}

void stInstantMove::Swap(stInstantMove* other) {
  if (other != this) {
    std::swap(moid_, other->moid_);
    std::swap(type_, other->type_);
    std::swap(destpos_, other->destpos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stInstantMove::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stInstantMove_descriptor_;
  metadata.reflection = stInstantMove_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stAttackFail_ErrorCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stAttackFail_ErrorCode_descriptor_;
}
bool stAttackFail_ErrorCode_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stAttackFail_ErrorCode stAttackFail::TARGET_HASH_DIED;
const stAttackFail_ErrorCode stAttackFail::ErrorCode_MIN;
const stAttackFail_ErrorCode stAttackFail::ErrorCode_MAX;
const int stAttackFail::ErrorCode_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stAttackFail_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stAttackFail_ProtoModID_descriptor_;
}
bool stAttackFail_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stAttackFail_ProtoModID stAttackFail::ModID;
const stAttackFail_ProtoModID stAttackFail::ProtoModID_MIN;
const stAttackFail_ProtoModID stAttackFail::ProtoModID_MAX;
const int stAttackFail::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stAttackFail_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stAttackFail_ProtoFunID_descriptor_;
}
bool stAttackFail_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 19:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stAttackFail_ProtoFunID stAttackFail::FunID;
const stAttackFail_ProtoFunID stAttackFail::ProtoFunID_MIN;
const stAttackFail_ProtoFunID stAttackFail::ProtoFunID_MAX;
const int stAttackFail::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stAttackFail::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

stAttackFail::stAttackFail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stAttackFail::InitAsDefaultInstance() {
}

stAttackFail::stAttackFail(const stAttackFail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stAttackFail::SharedCtor() {
  _cached_size_ = 0;
  errorcode_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stAttackFail::~stAttackFail() {
  SharedDtor();
}

void stAttackFail::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stAttackFail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stAttackFail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stAttackFail_descriptor_;
}

const stAttackFail& stAttackFail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Map_2eproto();
  return *default_instance_;
}

stAttackFail* stAttackFail::default_instance_ = NULL;

stAttackFail* stAttackFail::New() const {
  return new stAttackFail;
}

void stAttackFail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errorcode_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stAttackFail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Map.stAttackFail.ErrorCode errorCode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Map::stAttackFail_ErrorCode_IsValid(value)) {
            set_errorcode(static_cast< ::Map::stAttackFail_ErrorCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stAttackFail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Map.stAttackFail.ErrorCode errorCode = 1;
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->errorcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stAttackFail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Map.stAttackFail.ErrorCode errorCode = 1;
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->errorcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stAttackFail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Map.stAttackFail.ErrorCode errorCode = 1;
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->errorcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stAttackFail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stAttackFail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stAttackFail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stAttackFail::MergeFrom(const stAttackFail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stAttackFail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stAttackFail::CopyFrom(const stAttackFail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stAttackFail::IsInitialized() const {

  return true;
}

void stAttackFail::Swap(stAttackFail* other) {
  if (other != this) {
    std::swap(errorcode_, other->errorcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stAttackFail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stAttackFail_descriptor_;
  metadata.reflection = stAttackFail_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stInterruptPlaySkill_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stInterruptPlaySkill_ProtoModID_descriptor_;
}
bool stInterruptPlaySkill_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stInterruptPlaySkill_ProtoModID stInterruptPlaySkill::ModID;
const stInterruptPlaySkill_ProtoModID stInterruptPlaySkill::ProtoModID_MIN;
const stInterruptPlaySkill_ProtoModID stInterruptPlaySkill::ProtoModID_MAX;
const int stInterruptPlaySkill::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stInterruptPlaySkill_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stInterruptPlaySkill_ProtoFunID_descriptor_;
}
bool stInterruptPlaySkill_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 20:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stInterruptPlaySkill_ProtoFunID stInterruptPlaySkill::FunID;
const stInterruptPlaySkill_ProtoFunID stInterruptPlaySkill::ProtoFunID_MIN;
const stInterruptPlaySkill_ProtoFunID stInterruptPlaySkill::ProtoFunID_MAX;
const int stInterruptPlaySkill::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stInterruptPlaySkill::kAttTypeFieldNumber;
const int stInterruptPlaySkill::kAttIDFieldNumber;
const int stInterruptPlaySkill::kNextActionFieldNumber;
#endif  // !_MSC_VER

stInterruptPlaySkill::stInterruptPlaySkill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stInterruptPlaySkill::InitAsDefaultInstance() {
}

stInterruptPlaySkill::stInterruptPlaySkill(const stInterruptPlaySkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stInterruptPlaySkill::SharedCtor() {
  _cached_size_ = 0;
  atttype_ = 0u;
  attid_ = 0u;
  nextaction_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stInterruptPlaySkill::~stInterruptPlaySkill() {
  SharedDtor();
}

void stInterruptPlaySkill::SharedDtor() {
  if (nextaction_ != &::google::protobuf::internal::kEmptyString) {
    delete nextaction_;
  }
  if (this != default_instance_) {
  }
}

void stInterruptPlaySkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stInterruptPlaySkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stInterruptPlaySkill_descriptor_;
}

const stInterruptPlaySkill& stInterruptPlaySkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Map_2eproto();
  return *default_instance_;
}

stInterruptPlaySkill* stInterruptPlaySkill::default_instance_ = NULL;

stInterruptPlaySkill* stInterruptPlaySkill::New() const {
  return new stInterruptPlaySkill;
}

void stInterruptPlaySkill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    atttype_ = 0u;
    attid_ = 0u;
    if (has_nextaction()) {
      if (nextaction_ != &::google::protobuf::internal::kEmptyString) {
        nextaction_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stInterruptPlaySkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 attType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &atttype_)));
          set_has_atttype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_attID;
        break;
      }

      // optional uint32 attID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attid_)));
          set_has_attid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_nextAction;
        break;
      }

      // optional string nextAction = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nextAction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nextaction()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nextaction().data(), this->nextaction().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stInterruptPlaySkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 attType = 1;
  if (has_atttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->atttype(), output);
  }

  // optional uint32 attID = 2;
  if (has_attid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->attid(), output);
  }

  // optional string nextAction = 3;
  if (has_nextaction()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nextaction().data(), this->nextaction().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->nextaction(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stInterruptPlaySkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 attType = 1;
  if (has_atttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->atttype(), target);
  }

  // optional uint32 attID = 2;
  if (has_attid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->attid(), target);
  }

  // optional string nextAction = 3;
  if (has_nextaction()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nextaction().data(), this->nextaction().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->nextaction(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stInterruptPlaySkill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 attType = 1;
    if (has_atttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->atttype());
    }

    // optional uint32 attID = 2;
    if (has_attid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attid());
    }

    // optional string nextAction = 3;
    if (has_nextaction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nextaction());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stInterruptPlaySkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stInterruptPlaySkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stInterruptPlaySkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stInterruptPlaySkill::MergeFrom(const stInterruptPlaySkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_atttype()) {
      set_atttype(from.atttype());
    }
    if (from.has_attid()) {
      set_attid(from.attid());
    }
    if (from.has_nextaction()) {
      set_nextaction(from.nextaction());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stInterruptPlaySkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stInterruptPlaySkill::CopyFrom(const stInterruptPlaySkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stInterruptPlaySkill::IsInitialized() const {

  return true;
}

void stInterruptPlaySkill::Swap(stInterruptPlaySkill* other) {
  if (other != this) {
    std::swap(atttype_, other->atttype_);
    std::swap(attid_, other->attid_);
    std::swap(nextaction_, other->nextaction_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stInterruptPlaySkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stInterruptPlaySkill_descriptor_;
  metadata.reflection = stInterruptPlaySkill_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stMapObjectChgDir_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stMapObjectChgDir_ProtoModID_descriptor_;
}
bool stMapObjectChgDir_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stMapObjectChgDir_ProtoModID stMapObjectChgDir::ModID;
const stMapObjectChgDir_ProtoModID stMapObjectChgDir::ProtoModID_MIN;
const stMapObjectChgDir_ProtoModID stMapObjectChgDir::ProtoModID_MAX;
const int stMapObjectChgDir::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stMapObjectChgDir_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stMapObjectChgDir_ProtoFunID_descriptor_;
}
bool stMapObjectChgDir_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 21:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stMapObjectChgDir_ProtoFunID stMapObjectChgDir::FunID;
const stMapObjectChgDir_ProtoFunID stMapObjectChgDir::ProtoFunID_MIN;
const stMapObjectChgDir_ProtoFunID stMapObjectChgDir::ProtoFunID_MAX;
const int stMapObjectChgDir::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stMapObjectChgDir::kMoTypeFieldNumber;
const int stMapObjectChgDir::kMoIDFieldNumber;
const int stMapObjectChgDir::kDirFieldNumber;
#endif  // !_MSC_VER

stMapObjectChgDir::stMapObjectChgDir()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stMapObjectChgDir::InitAsDefaultInstance() {
}

stMapObjectChgDir::stMapObjectChgDir(const stMapObjectChgDir& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stMapObjectChgDir::SharedCtor() {
  _cached_size_ = 0;
  motype_ = 0u;
  moid_ = 0u;
  dir_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stMapObjectChgDir::~stMapObjectChgDir() {
  SharedDtor();
}

void stMapObjectChgDir::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stMapObjectChgDir::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stMapObjectChgDir::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stMapObjectChgDir_descriptor_;
}

const stMapObjectChgDir& stMapObjectChgDir::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Map_2eproto();
  return *default_instance_;
}

stMapObjectChgDir* stMapObjectChgDir::default_instance_ = NULL;

stMapObjectChgDir* stMapObjectChgDir::New() const {
  return new stMapObjectChgDir;
}

void stMapObjectChgDir::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    motype_ = 0u;
    moid_ = 0u;
    dir_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stMapObjectChgDir::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 moType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &motype_)));
          set_has_motype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_moID;
        break;
      }

      // optional uint32 moID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_moID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &moid_)));
          set_has_moid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_dir;
        break;
      }

      // optional uint32 dir = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dir:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dir_)));
          set_has_dir();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stMapObjectChgDir::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 moType = 1;
  if (has_motype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->motype(), output);
  }

  // optional uint32 moID = 2;
  if (has_moid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->moid(), output);
  }

  // optional uint32 dir = 3;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->dir(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stMapObjectChgDir::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 moType = 1;
  if (has_motype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->motype(), target);
  }

  // optional uint32 moID = 2;
  if (has_moid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->moid(), target);
  }

  // optional uint32 dir = 3;
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->dir(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stMapObjectChgDir::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 moType = 1;
    if (has_motype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->motype());
    }

    // optional uint32 moID = 2;
    if (has_moid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->moid());
    }

    // optional uint32 dir = 3;
    if (has_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dir());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stMapObjectChgDir::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stMapObjectChgDir* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stMapObjectChgDir*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stMapObjectChgDir::MergeFrom(const stMapObjectChgDir& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_motype()) {
      set_motype(from.motype());
    }
    if (from.has_moid()) {
      set_moid(from.moid());
    }
    if (from.has_dir()) {
      set_dir(from.dir());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stMapObjectChgDir::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stMapObjectChgDir::CopyFrom(const stMapObjectChgDir& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stMapObjectChgDir::IsInitialized() const {

  return true;
}

void stMapObjectChgDir::Swap(stMapObjectChgDir* other) {
  if (other != this) {
    std::swap(motype_, other->motype_);
    std::swap(moid_, other->moid_);
    std::swap(dir_, other->dir_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stMapObjectChgDir::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stMapObjectChgDir_descriptor_;
  metadata.reflection = stMapObjectChgDir_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqOnlineUserOnMainCity_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqOnlineUserOnMainCity_ProtoModID_descriptor_;
}
bool stReqOnlineUserOnMainCity_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqOnlineUserOnMainCity_ProtoModID stReqOnlineUserOnMainCity::ModID;
const stReqOnlineUserOnMainCity_ProtoModID stReqOnlineUserOnMainCity::ProtoModID_MIN;
const stReqOnlineUserOnMainCity_ProtoModID stReqOnlineUserOnMainCity::ProtoModID_MAX;
const int stReqOnlineUserOnMainCity::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqOnlineUserOnMainCity_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqOnlineUserOnMainCity_ProtoFunID_descriptor_;
}
bool stReqOnlineUserOnMainCity_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 22:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqOnlineUserOnMainCity_ProtoFunID stReqOnlineUserOnMainCity::FunID;
const stReqOnlineUserOnMainCity_ProtoFunID stReqOnlineUserOnMainCity::ProtoFunID_MIN;
const stReqOnlineUserOnMainCity_ProtoFunID stReqOnlineUserOnMainCity::ProtoFunID_MAX;
const int stReqOnlineUserOnMainCity::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqOnlineUserOnMainCity::kCharIDFieldNumber;
#endif  // !_MSC_VER

stReqOnlineUserOnMainCity::stReqOnlineUserOnMainCity()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqOnlineUserOnMainCity::InitAsDefaultInstance() {
}

stReqOnlineUserOnMainCity::stReqOnlineUserOnMainCity(const stReqOnlineUserOnMainCity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqOnlineUserOnMainCity::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqOnlineUserOnMainCity::~stReqOnlineUserOnMainCity() {
  SharedDtor();
}

void stReqOnlineUserOnMainCity::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqOnlineUserOnMainCity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqOnlineUserOnMainCity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqOnlineUserOnMainCity_descriptor_;
}

const stReqOnlineUserOnMainCity& stReqOnlineUserOnMainCity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Map_2eproto();
  return *default_instance_;
}

stReqOnlineUserOnMainCity* stReqOnlineUserOnMainCity::default_instance_ = NULL;

stReqOnlineUserOnMainCity* stReqOnlineUserOnMainCity::New() const {
  return new stReqOnlineUserOnMainCity;
}

void stReqOnlineUserOnMainCity::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqOnlineUserOnMainCity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqOnlineUserOnMainCity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqOnlineUserOnMainCity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqOnlineUserOnMainCity::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqOnlineUserOnMainCity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqOnlineUserOnMainCity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqOnlineUserOnMainCity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqOnlineUserOnMainCity::MergeFrom(const stReqOnlineUserOnMainCity& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqOnlineUserOnMainCity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqOnlineUserOnMainCity::CopyFrom(const stReqOnlineUserOnMainCity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqOnlineUserOnMainCity::IsInitialized() const {

  return true;
}

void stReqOnlineUserOnMainCity::Swap(stReqOnlineUserOnMainCity* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqOnlineUserOnMainCity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqOnlineUserOnMainCity_descriptor_;
  metadata.reflection = stReqOnlineUserOnMainCity_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stOnlineUserOnMainCity_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stOnlineUserOnMainCity_ProtoModID_descriptor_;
}
bool stOnlineUserOnMainCity_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stOnlineUserOnMainCity_ProtoModID stOnlineUserOnMainCity::ModID;
const stOnlineUserOnMainCity_ProtoModID stOnlineUserOnMainCity::ProtoModID_MIN;
const stOnlineUserOnMainCity_ProtoModID stOnlineUserOnMainCity::ProtoModID_MAX;
const int stOnlineUserOnMainCity::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stOnlineUserOnMainCity_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stOnlineUserOnMainCity_ProtoFunID_descriptor_;
}
bool stOnlineUserOnMainCity_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 23:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stOnlineUserOnMainCity_ProtoFunID stOnlineUserOnMainCity::FunID;
const stOnlineUserOnMainCity_ProtoFunID stOnlineUserOnMainCity::ProtoFunID_MIN;
const stOnlineUserOnMainCity_ProtoFunID stOnlineUserOnMainCity::ProtoFunID_MAX;
const int stOnlineUserOnMainCity::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stOnlineUserOnMainCity::kUserListFieldNumber;
#endif  // !_MSC_VER

stOnlineUserOnMainCity::stOnlineUserOnMainCity()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stOnlineUserOnMainCity::InitAsDefaultInstance() {
}

stOnlineUserOnMainCity::stOnlineUserOnMainCity(const stOnlineUserOnMainCity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stOnlineUserOnMainCity::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stOnlineUserOnMainCity::~stOnlineUserOnMainCity() {
  SharedDtor();
}

void stOnlineUserOnMainCity::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stOnlineUserOnMainCity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stOnlineUserOnMainCity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stOnlineUserOnMainCity_descriptor_;
}

const stOnlineUserOnMainCity& stOnlineUserOnMainCity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Map_2eproto();
  return *default_instance_;
}

stOnlineUserOnMainCity* stOnlineUserOnMainCity::default_instance_ = NULL;

stOnlineUserOnMainCity* stOnlineUserOnMainCity::New() const {
  return new stOnlineUserOnMainCity;
}

void stOnlineUserOnMainCity::Clear() {
  userlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stOnlineUserOnMainCity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Map.stPlayerData userList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_userlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_userList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stOnlineUserOnMainCity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Map.stPlayerData userList = 1;
  for (int i = 0; i < this->userlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->userlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stOnlineUserOnMainCity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Map.stPlayerData userList = 1;
  for (int i = 0; i < this->userlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->userlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stOnlineUserOnMainCity::ByteSize() const {
  int total_size = 0;

  // repeated .Map.stPlayerData userList = 1;
  total_size += 1 * this->userlist_size();
  for (int i = 0; i < this->userlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->userlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stOnlineUserOnMainCity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stOnlineUserOnMainCity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stOnlineUserOnMainCity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stOnlineUserOnMainCity::MergeFrom(const stOnlineUserOnMainCity& from) {
  GOOGLE_CHECK_NE(&from, this);
  userlist_.MergeFrom(from.userlist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stOnlineUserOnMainCity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stOnlineUserOnMainCity::CopyFrom(const stOnlineUserOnMainCity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stOnlineUserOnMainCity::IsInitialized() const {

  return true;
}

void stOnlineUserOnMainCity::Swap(stOnlineUserOnMainCity* other) {
  if (other != this) {
    userlist_.Swap(&other->userlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stOnlineUserOnMainCity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stOnlineUserOnMainCity_descriptor_;
  metadata.reflection = stOnlineUserOnMainCity_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stChangeHeroGroup_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stChangeHeroGroup_ProtoModID_descriptor_;
}
bool stChangeHeroGroup_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stChangeHeroGroup_ProtoModID stChangeHeroGroup::ModID;
const stChangeHeroGroup_ProtoModID stChangeHeroGroup::ProtoModID_MIN;
const stChangeHeroGroup_ProtoModID stChangeHeroGroup::ProtoModID_MAX;
const int stChangeHeroGroup::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stChangeHeroGroup_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stChangeHeroGroup_ProtoFunID_descriptor_;
}
bool stChangeHeroGroup_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 24:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stChangeHeroGroup_ProtoFunID stChangeHeroGroup::FunID;
const stChangeHeroGroup_ProtoFunID stChangeHeroGroup::ProtoFunID_MIN;
const stChangeHeroGroup_ProtoFunID stChangeHeroGroup::ProtoFunID_MAX;
const int stChangeHeroGroup::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stChangeHeroGroup::kGroupIDFieldNumber;
#endif  // !_MSC_VER

stChangeHeroGroup::stChangeHeroGroup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stChangeHeroGroup::InitAsDefaultInstance() {
}

stChangeHeroGroup::stChangeHeroGroup(const stChangeHeroGroup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stChangeHeroGroup::SharedCtor() {
  _cached_size_ = 0;
  groupid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stChangeHeroGroup::~stChangeHeroGroup() {
  SharedDtor();
}

void stChangeHeroGroup::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stChangeHeroGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stChangeHeroGroup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stChangeHeroGroup_descriptor_;
}

const stChangeHeroGroup& stChangeHeroGroup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Map_2eproto();
  return *default_instance_;
}

stChangeHeroGroup* stChangeHeroGroup::default_instance_ = NULL;

stChangeHeroGroup* stChangeHeroGroup::New() const {
  return new stChangeHeroGroup;
}

void stChangeHeroGroup::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    groupid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stChangeHeroGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 groupID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stChangeHeroGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 groupID = 1;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->groupid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stChangeHeroGroup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 groupID = 1;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->groupid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stChangeHeroGroup::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 groupID = 1;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->groupid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stChangeHeroGroup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stChangeHeroGroup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stChangeHeroGroup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stChangeHeroGroup::MergeFrom(const stChangeHeroGroup& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stChangeHeroGroup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stChangeHeroGroup::CopyFrom(const stChangeHeroGroup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stChangeHeroGroup::IsInitialized() const {

  return true;
}

void stChangeHeroGroup::Swap(stChangeHeroGroup* other) {
  if (other != this) {
    std::swap(groupid_, other->groupid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stChangeHeroGroup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stChangeHeroGroup_descriptor_;
  metadata.reflection = stChangeHeroGroup_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stChangeHeroGroupError_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stChangeHeroGroupError_eResult_descriptor_;
}
bool stChangeHeroGroupError_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stChangeHeroGroupError_eResult stChangeHeroGroupError::eCHG_HERO_COLD_DOWN;
const stChangeHeroGroupError_eResult stChangeHeroGroupError::eCUR_GROUP_HAS_GOOUT;
const stChangeHeroGroupError_eResult stChangeHeroGroupError::eResult_MIN;
const stChangeHeroGroupError_eResult stChangeHeroGroupError::eResult_MAX;
const int stChangeHeroGroupError::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stChangeHeroGroupError_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stChangeHeroGroupError_ProtoModID_descriptor_;
}
bool stChangeHeroGroupError_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stChangeHeroGroupError_ProtoModID stChangeHeroGroupError::ModID;
const stChangeHeroGroupError_ProtoModID stChangeHeroGroupError::ProtoModID_MIN;
const stChangeHeroGroupError_ProtoModID stChangeHeroGroupError::ProtoModID_MAX;
const int stChangeHeroGroupError::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stChangeHeroGroupError_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stChangeHeroGroupError_ProtoFunID_descriptor_;
}
bool stChangeHeroGroupError_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 25:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stChangeHeroGroupError_ProtoFunID stChangeHeroGroupError::FunID;
const stChangeHeroGroupError_ProtoFunID stChangeHeroGroupError::ProtoFunID_MIN;
const stChangeHeroGroupError_ProtoFunID stChangeHeroGroupError::ProtoFunID_MAX;
const int stChangeHeroGroupError::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stChangeHeroGroupError::kResultFieldNumber;
#endif  // !_MSC_VER

stChangeHeroGroupError::stChangeHeroGroupError()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stChangeHeroGroupError::InitAsDefaultInstance() {
}

stChangeHeroGroupError::stChangeHeroGroupError(const stChangeHeroGroupError& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stChangeHeroGroupError::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stChangeHeroGroupError::~stChangeHeroGroupError() {
  SharedDtor();
}

void stChangeHeroGroupError::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stChangeHeroGroupError::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stChangeHeroGroupError::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stChangeHeroGroupError_descriptor_;
}

const stChangeHeroGroupError& stChangeHeroGroupError::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Map_2eproto();
  return *default_instance_;
}

stChangeHeroGroupError* stChangeHeroGroupError::default_instance_ = NULL;

stChangeHeroGroupError* stChangeHeroGroupError::New() const {
  return new stChangeHeroGroupError;
}

void stChangeHeroGroupError::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stChangeHeroGroupError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Map.stChangeHeroGroupError.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Map::stChangeHeroGroupError_eResult_IsValid(value)) {
            set_result(static_cast< ::Map::stChangeHeroGroupError_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stChangeHeroGroupError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Map.stChangeHeroGroupError.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stChangeHeroGroupError::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Map.stChangeHeroGroupError.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stChangeHeroGroupError::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Map.stChangeHeroGroupError.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stChangeHeroGroupError::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stChangeHeroGroupError* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stChangeHeroGroupError*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stChangeHeroGroupError::MergeFrom(const stChangeHeroGroupError& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stChangeHeroGroupError::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stChangeHeroGroupError::CopyFrom(const stChangeHeroGroupError& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stChangeHeroGroupError::IsInitialized() const {

  return true;
}

void stChangeHeroGroupError::Swap(stChangeHeroGroupError* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stChangeHeroGroupError::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stChangeHeroGroupError_descriptor_;
  metadata.reflection = stChangeHeroGroupError_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stNotifyObjMP_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyObjMP_ProtoModID_descriptor_;
}
bool stNotifyObjMP_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyObjMP_ProtoModID stNotifyObjMP::ModID;
const stNotifyObjMP_ProtoModID stNotifyObjMP::ProtoModID_MIN;
const stNotifyObjMP_ProtoModID stNotifyObjMP::ProtoModID_MAX;
const int stNotifyObjMP::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stNotifyObjMP_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyObjMP_ProtoFunID_descriptor_;
}
bool stNotifyObjMP_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 26:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyObjMP_ProtoFunID stNotifyObjMP::FunID;
const stNotifyObjMP_ProtoFunID stNotifyObjMP::ProtoFunID_MIN;
const stNotifyObjMP_ProtoFunID stNotifyObjMP::ProtoFunID_MAX;
const int stNotifyObjMP::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stNotifyObjMP::kMoTypeFieldNumber;
const int stNotifyObjMP::kMoIDFieldNumber;
const int stNotifyObjMP::kNumFieldNumber;
#endif  // !_MSC_VER

stNotifyObjMP::stNotifyObjMP()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stNotifyObjMP::InitAsDefaultInstance() {
}

stNotifyObjMP::stNotifyObjMP(const stNotifyObjMP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stNotifyObjMP::SharedCtor() {
  _cached_size_ = 0;
  motype_ = 0u;
  moid_ = 0u;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stNotifyObjMP::~stNotifyObjMP() {
  SharedDtor();
}

void stNotifyObjMP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stNotifyObjMP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stNotifyObjMP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyObjMP_descriptor_;
}

const stNotifyObjMP& stNotifyObjMP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Map_2eproto();
  return *default_instance_;
}

stNotifyObjMP* stNotifyObjMP::default_instance_ = NULL;

stNotifyObjMP* stNotifyObjMP::New() const {
  return new stNotifyObjMP;
}

void stNotifyObjMP::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    motype_ = 0u;
    moid_ = 0u;
    num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stNotifyObjMP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 moType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &motype_)));
          set_has_motype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_moID;
        break;
      }

      // optional uint32 moID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_moID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &moid_)));
          set_has_moid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }

      // optional uint32 num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stNotifyObjMP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 moType = 1;
  if (has_motype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->motype(), output);
  }

  // optional uint32 moID = 2;
  if (has_moid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->moid(), output);
  }

  // optional uint32 num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stNotifyObjMP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 moType = 1;
  if (has_motype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->motype(), target);
  }

  // optional uint32 moID = 2;
  if (has_moid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->moid(), target);
  }

  // optional uint32 num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stNotifyObjMP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 moType = 1;
    if (has_motype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->motype());
    }

    // optional uint32 moID = 2;
    if (has_moid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->moid());
    }

    // optional uint32 num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stNotifyObjMP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stNotifyObjMP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stNotifyObjMP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stNotifyObjMP::MergeFrom(const stNotifyObjMP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_motype()) {
      set_motype(from.motype());
    }
    if (from.has_moid()) {
      set_moid(from.moid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stNotifyObjMP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stNotifyObjMP::CopyFrom(const stNotifyObjMP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stNotifyObjMP::IsInitialized() const {

  return true;
}

void stNotifyObjMP::Swap(stNotifyObjMP* other) {
  if (other != this) {
    std::swap(motype_, other->motype_);
    std::swap(moid_, other->moid_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stNotifyObjMP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stNotifyObjMP_descriptor_;
  metadata.reflection = stNotifyObjMP_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stNotifyObjBati_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyObjBati_ProtoModID_descriptor_;
}
bool stNotifyObjBati_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyObjBati_ProtoModID stNotifyObjBati::ModID;
const stNotifyObjBati_ProtoModID stNotifyObjBati::ProtoModID_MIN;
const stNotifyObjBati_ProtoModID stNotifyObjBati::ProtoModID_MAX;
const int stNotifyObjBati::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stNotifyObjBati_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyObjBati_ProtoFunID_descriptor_;
}
bool stNotifyObjBati_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 27:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyObjBati_ProtoFunID stNotifyObjBati::FunID;
const stNotifyObjBati_ProtoFunID stNotifyObjBati::ProtoFunID_MIN;
const stNotifyObjBati_ProtoFunID stNotifyObjBati::ProtoFunID_MAX;
const int stNotifyObjBati::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stNotifyObjBati::kMoTypeFieldNumber;
const int stNotifyObjBati::kMoIDFieldNumber;
const int stNotifyObjBati::kNumFieldNumber;
#endif  // !_MSC_VER

stNotifyObjBati::stNotifyObjBati()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stNotifyObjBati::InitAsDefaultInstance() {
}

stNotifyObjBati::stNotifyObjBati(const stNotifyObjBati& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stNotifyObjBati::SharedCtor() {
  _cached_size_ = 0;
  motype_ = 0u;
  moid_ = 0u;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stNotifyObjBati::~stNotifyObjBati() {
  SharedDtor();
}

void stNotifyObjBati::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stNotifyObjBati::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stNotifyObjBati::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyObjBati_descriptor_;
}

const stNotifyObjBati& stNotifyObjBati::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Map_2eproto();
  return *default_instance_;
}

stNotifyObjBati* stNotifyObjBati::default_instance_ = NULL;

stNotifyObjBati* stNotifyObjBati::New() const {
  return new stNotifyObjBati;
}

void stNotifyObjBati::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    motype_ = 0u;
    moid_ = 0u;
    num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stNotifyObjBati::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 moType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &motype_)));
          set_has_motype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_moID;
        break;
      }

      // optional uint32 moID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_moID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &moid_)));
          set_has_moid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }

      // optional uint32 num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stNotifyObjBati::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 moType = 1;
  if (has_motype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->motype(), output);
  }

  // optional uint32 moID = 2;
  if (has_moid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->moid(), output);
  }

  // optional uint32 num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stNotifyObjBati::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 moType = 1;
  if (has_motype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->motype(), target);
  }

  // optional uint32 moID = 2;
  if (has_moid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->moid(), target);
  }

  // optional uint32 num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stNotifyObjBati::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 moType = 1;
    if (has_motype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->motype());
    }

    // optional uint32 moID = 2;
    if (has_moid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->moid());
    }

    // optional uint32 num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stNotifyObjBati::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stNotifyObjBati* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stNotifyObjBati*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stNotifyObjBati::MergeFrom(const stNotifyObjBati& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_motype()) {
      set_motype(from.motype());
    }
    if (from.has_moid()) {
      set_moid(from.moid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stNotifyObjBati::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stNotifyObjBati::CopyFrom(const stNotifyObjBati& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stNotifyObjBati::IsInitialized() const {

  return true;
}

void stNotifyObjBati::Swap(stNotifyObjBati* other) {
  if (other != this) {
    std::swap(motype_, other->motype_);
    std::swap(moid_, other->moid_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stNotifyObjBati::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stNotifyObjBati_descriptor_;
  metadata.reflection = stNotifyObjBati_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stAddBufferState2Me_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stAddBufferState2Me_ProtoModID_descriptor_;
}
bool stAddBufferState2Me_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stAddBufferState2Me_ProtoModID stAddBufferState2Me::ModID;
const stAddBufferState2Me_ProtoModID stAddBufferState2Me::ProtoModID_MIN;
const stAddBufferState2Me_ProtoModID stAddBufferState2Me::ProtoModID_MAX;
const int stAddBufferState2Me::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stAddBufferState2Me_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stAddBufferState2Me_ProtoFunID_descriptor_;
}
bool stAddBufferState2Me_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 28:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stAddBufferState2Me_ProtoFunID stAddBufferState2Me::FunID;
const stAddBufferState2Me_ProtoFunID stAddBufferState2Me::ProtoFunID_MIN;
const stAddBufferState2Me_ProtoFunID stAddBufferState2Me::ProtoFunID_MAX;
const int stAddBufferState2Me::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stAddBufferState2Me::kAttTypeFieldNumber;
const int stAddBufferState2Me::kAttModIDFieldNumber;
const int stAddBufferState2Me::kStateIDFieldNumber;
const int stAddBufferState2Me::kDefTypeFieldNumber;
const int stAddBufferState2Me::kDefModIDFieldNumber;
const int stAddBufferState2Me::kExtraValFieldNumber;
const int stAddBufferState2Me::kBuffIDFieldNumber;
#endif  // !_MSC_VER

stAddBufferState2Me::stAddBufferState2Me()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stAddBufferState2Me::InitAsDefaultInstance() {
}

stAddBufferState2Me::stAddBufferState2Me(const stAddBufferState2Me& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stAddBufferState2Me::SharedCtor() {
  _cached_size_ = 0;
  atttype_ = 0u;
  attmodid_ = 0u;
  stateid_ = 0u;
  deftype_ = 0u;
  defmodid_ = 0u;
  extraval_ = 0;
  buffid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stAddBufferState2Me::~stAddBufferState2Me() {
  SharedDtor();
}

void stAddBufferState2Me::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stAddBufferState2Me::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stAddBufferState2Me::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stAddBufferState2Me_descriptor_;
}

const stAddBufferState2Me& stAddBufferState2Me::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Map_2eproto();
  return *default_instance_;
}

stAddBufferState2Me* stAddBufferState2Me::default_instance_ = NULL;

stAddBufferState2Me* stAddBufferState2Me::New() const {
  return new stAddBufferState2Me;
}

void stAddBufferState2Me::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    atttype_ = 0u;
    attmodid_ = 0u;
    stateid_ = 0u;
    deftype_ = 0u;
    defmodid_ = 0u;
    extraval_ = 0;
    buffid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stAddBufferState2Me::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 attType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &atttype_)));
          set_has_atttype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_attModID;
        break;
      }

      // optional uint32 attModID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attModID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attmodid_)));
          set_has_attmodid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_stateID;
        break;
      }

      // optional uint32 stateID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stateID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stateid_)));
          set_has_stateid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_defType;
        break;
      }

      // optional uint32 defType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_defType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deftype_)));
          set_has_deftype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_defModID;
        break;
      }

      // optional uint32 defModID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_defModID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &defmodid_)));
          set_has_defmodid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_extraVal;
        break;
      }

      // optional int32 extraVal = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_extraVal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &extraval_)));
          set_has_extraval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_buffID;
        break;
      }

      // optional uint32 buffID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buffID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buffid_)));
          set_has_buffid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stAddBufferState2Me::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 attType = 1;
  if (has_atttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->atttype(), output);
  }

  // optional uint32 attModID = 2;
  if (has_attmodid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->attmodid(), output);
  }

  // optional uint32 stateID = 3;
  if (has_stateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->stateid(), output);
  }

  // optional uint32 defType = 4;
  if (has_deftype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->deftype(), output);
  }

  // optional uint32 defModID = 5;
  if (has_defmodid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->defmodid(), output);
  }

  // optional int32 extraVal = 6;
  if (has_extraval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->extraval(), output);
  }

  // optional uint32 buffID = 7;
  if (has_buffid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->buffid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stAddBufferState2Me::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 attType = 1;
  if (has_atttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->atttype(), target);
  }

  // optional uint32 attModID = 2;
  if (has_attmodid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->attmodid(), target);
  }

  // optional uint32 stateID = 3;
  if (has_stateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->stateid(), target);
  }

  // optional uint32 defType = 4;
  if (has_deftype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->deftype(), target);
  }

  // optional uint32 defModID = 5;
  if (has_defmodid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->defmodid(), target);
  }

  // optional int32 extraVal = 6;
  if (has_extraval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->extraval(), target);
  }

  // optional uint32 buffID = 7;
  if (has_buffid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->buffid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stAddBufferState2Me::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 attType = 1;
    if (has_atttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->atttype());
    }

    // optional uint32 attModID = 2;
    if (has_attmodid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attmodid());
    }

    // optional uint32 stateID = 3;
    if (has_stateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stateid());
    }

    // optional uint32 defType = 4;
    if (has_deftype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deftype());
    }

    // optional uint32 defModID = 5;
    if (has_defmodid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->defmodid());
    }

    // optional int32 extraVal = 6;
    if (has_extraval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->extraval());
    }

    // optional uint32 buffID = 7;
    if (has_buffid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buffid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stAddBufferState2Me::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stAddBufferState2Me* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stAddBufferState2Me*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stAddBufferState2Me::MergeFrom(const stAddBufferState2Me& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_atttype()) {
      set_atttype(from.atttype());
    }
    if (from.has_attmodid()) {
      set_attmodid(from.attmodid());
    }
    if (from.has_stateid()) {
      set_stateid(from.stateid());
    }
    if (from.has_deftype()) {
      set_deftype(from.deftype());
    }
    if (from.has_defmodid()) {
      set_defmodid(from.defmodid());
    }
    if (from.has_extraval()) {
      set_extraval(from.extraval());
    }
    if (from.has_buffid()) {
      set_buffid(from.buffid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stAddBufferState2Me::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stAddBufferState2Me::CopyFrom(const stAddBufferState2Me& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stAddBufferState2Me::IsInitialized() const {

  return true;
}

void stAddBufferState2Me::Swap(stAddBufferState2Me* other) {
  if (other != this) {
    std::swap(atttype_, other->atttype_);
    std::swap(attmodid_, other->attmodid_);
    std::swap(stateid_, other->stateid_);
    std::swap(deftype_, other->deftype_);
    std::swap(defmodid_, other->defmodid_);
    std::swap(extraval_, other->extraval_);
    std::swap(buffid_, other->buffid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stAddBufferState2Me::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stAddBufferState2Me_descriptor_;
  metadata.reflection = stAddBufferState2Me_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stDelBufferState_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stDelBufferState_ProtoModID_descriptor_;
}
bool stDelBufferState_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stDelBufferState_ProtoModID stDelBufferState::ModID;
const stDelBufferState_ProtoModID stDelBufferState::ProtoModID_MIN;
const stDelBufferState_ProtoModID stDelBufferState::ProtoModID_MAX;
const int stDelBufferState::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stDelBufferState_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stDelBufferState_ProtoFunID_descriptor_;
}
bool stDelBufferState_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 29:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stDelBufferState_ProtoFunID stDelBufferState::FunID;
const stDelBufferState_ProtoFunID stDelBufferState::ProtoFunID_MIN;
const stDelBufferState_ProtoFunID stDelBufferState::ProtoFunID_MAX;
const int stDelBufferState::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stDelBufferState::kStateIDFieldNumber;
const int stDelBufferState::kMoTypeFieldNumber;
const int stDelBufferState::kMoIDFieldNumber;
const int stDelBufferState::kBufferIDFieldNumber;
#endif  // !_MSC_VER

stDelBufferState::stDelBufferState()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stDelBufferState::InitAsDefaultInstance() {
}

stDelBufferState::stDelBufferState(const stDelBufferState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stDelBufferState::SharedCtor() {
  _cached_size_ = 0;
  stateid_ = 0u;
  motype_ = 0u;
  moid_ = 0u;
  bufferid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stDelBufferState::~stDelBufferState() {
  SharedDtor();
}

void stDelBufferState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stDelBufferState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stDelBufferState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stDelBufferState_descriptor_;
}

const stDelBufferState& stDelBufferState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Map_2eproto();
  return *default_instance_;
}

stDelBufferState* stDelBufferState::default_instance_ = NULL;

stDelBufferState* stDelBufferState::New() const {
  return new stDelBufferState;
}

void stDelBufferState::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    stateid_ = 0u;
    motype_ = 0u;
    moid_ = 0u;
    bufferid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stDelBufferState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 stateID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stateid_)));
          set_has_stateid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_moType;
        break;
      }

      // optional uint32 moType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_moType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &motype_)));
          set_has_motype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_moID;
        break;
      }

      // optional uint32 moID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_moID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &moid_)));
          set_has_moid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_bufferID;
        break;
      }

      // optional uint32 bufferID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bufferID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bufferid_)));
          set_has_bufferid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stDelBufferState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 stateID = 1;
  if (has_stateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->stateid(), output);
  }

  // optional uint32 moType = 2;
  if (has_motype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->motype(), output);
  }

  // optional uint32 moID = 3;
  if (has_moid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->moid(), output);
  }

  // optional uint32 bufferID = 4;
  if (has_bufferid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->bufferid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stDelBufferState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 stateID = 1;
  if (has_stateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->stateid(), target);
  }

  // optional uint32 moType = 2;
  if (has_motype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->motype(), target);
  }

  // optional uint32 moID = 3;
  if (has_moid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->moid(), target);
  }

  // optional uint32 bufferID = 4;
  if (has_bufferid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->bufferid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stDelBufferState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 stateID = 1;
    if (has_stateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stateid());
    }

    // optional uint32 moType = 2;
    if (has_motype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->motype());
    }

    // optional uint32 moID = 3;
    if (has_moid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->moid());
    }

    // optional uint32 bufferID = 4;
    if (has_bufferid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bufferid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stDelBufferState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stDelBufferState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stDelBufferState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stDelBufferState::MergeFrom(const stDelBufferState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stateid()) {
      set_stateid(from.stateid());
    }
    if (from.has_motype()) {
      set_motype(from.motype());
    }
    if (from.has_moid()) {
      set_moid(from.moid());
    }
    if (from.has_bufferid()) {
      set_bufferid(from.bufferid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stDelBufferState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stDelBufferState::CopyFrom(const stDelBufferState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stDelBufferState::IsInitialized() const {

  return true;
}

void stDelBufferState::Swap(stDelBufferState* other) {
  if (other != this) {
    std::swap(stateid_, other->stateid_);
    std::swap(motype_, other->motype_);
    std::swap(moid_, other->moid_);
    std::swap(bufferid_, other->bufferid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stDelBufferState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stDelBufferState_descriptor_;
  metadata.reflection = stDelBufferState_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stNotifyExecAI_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyExecAI_ProtoModID_descriptor_;
}
bool stNotifyExecAI_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyExecAI_ProtoModID stNotifyExecAI::ModID;
const stNotifyExecAI_ProtoModID stNotifyExecAI::ProtoModID_MIN;
const stNotifyExecAI_ProtoModID stNotifyExecAI::ProtoModID_MAX;
const int stNotifyExecAI::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stNotifyExecAI_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyExecAI_ProtoFunID_descriptor_;
}
bool stNotifyExecAI_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 30:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyExecAI_ProtoFunID stNotifyExecAI::FunID;
const stNotifyExecAI_ProtoFunID stNotifyExecAI::ProtoFunID_MIN;
const stNotifyExecAI_ProtoFunID stNotifyExecAI::ProtoFunID_MAX;
const int stNotifyExecAI::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stNotifyExecAI::kCharIDFieldNumber;
#endif  // !_MSC_VER

stNotifyExecAI::stNotifyExecAI()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stNotifyExecAI::InitAsDefaultInstance() {
}

stNotifyExecAI::stNotifyExecAI(const stNotifyExecAI& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stNotifyExecAI::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stNotifyExecAI::~stNotifyExecAI() {
  SharedDtor();
}

void stNotifyExecAI::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stNotifyExecAI::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stNotifyExecAI::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyExecAI_descriptor_;
}

const stNotifyExecAI& stNotifyExecAI::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Map_2eproto();
  return *default_instance_;
}

stNotifyExecAI* stNotifyExecAI::default_instance_ = NULL;

stNotifyExecAI* stNotifyExecAI::New() const {
  return new stNotifyExecAI;
}

void stNotifyExecAI::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stNotifyExecAI::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stNotifyExecAI::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stNotifyExecAI::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stNotifyExecAI::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stNotifyExecAI::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stNotifyExecAI* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stNotifyExecAI*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stNotifyExecAI::MergeFrom(const stNotifyExecAI& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stNotifyExecAI::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stNotifyExecAI::CopyFrom(const stNotifyExecAI& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stNotifyExecAI::IsInitialized() const {

  return true;
}

void stNotifyExecAI::Swap(stNotifyExecAI* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stNotifyExecAI::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stNotifyExecAI_descriptor_;
  metadata.reflection = stNotifyExecAI_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stAlertBossAppear_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stAlertBossAppear_ProtoModID_descriptor_;
}
bool stAlertBossAppear_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stAlertBossAppear_ProtoModID stAlertBossAppear::ModID;
const stAlertBossAppear_ProtoModID stAlertBossAppear::ProtoModID_MIN;
const stAlertBossAppear_ProtoModID stAlertBossAppear::ProtoModID_MAX;
const int stAlertBossAppear::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stAlertBossAppear_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stAlertBossAppear_ProtoFunID_descriptor_;
}
bool stAlertBossAppear_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 31:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stAlertBossAppear_ProtoFunID stAlertBossAppear::FunID;
const stAlertBossAppear_ProtoFunID stAlertBossAppear::ProtoFunID_MIN;
const stAlertBossAppear_ProtoFunID stAlertBossAppear::ProtoFunID_MAX;
const int stAlertBossAppear::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stAlertBossAppear::kDelayFieldNumber;
#endif  // !_MSC_VER

stAlertBossAppear::stAlertBossAppear()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stAlertBossAppear::InitAsDefaultInstance() {
}

stAlertBossAppear::stAlertBossAppear(const stAlertBossAppear& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stAlertBossAppear::SharedCtor() {
  _cached_size_ = 0;
  delay_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stAlertBossAppear::~stAlertBossAppear() {
  SharedDtor();
}

void stAlertBossAppear::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stAlertBossAppear::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stAlertBossAppear::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stAlertBossAppear_descriptor_;
}

const stAlertBossAppear& stAlertBossAppear::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Map_2eproto();
  return *default_instance_;
}

stAlertBossAppear* stAlertBossAppear::default_instance_ = NULL;

stAlertBossAppear* stAlertBossAppear::New() const {
  return new stAlertBossAppear;
}

void stAlertBossAppear::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    delay_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stAlertBossAppear::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 delay = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &delay_)));
          set_has_delay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stAlertBossAppear::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 delay = 1;
  if (has_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->delay(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stAlertBossAppear::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 delay = 1;
  if (has_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->delay(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stAlertBossAppear::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 delay = 1;
    if (has_delay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->delay());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stAlertBossAppear::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stAlertBossAppear* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stAlertBossAppear*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stAlertBossAppear::MergeFrom(const stAlertBossAppear& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_delay()) {
      set_delay(from.delay());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stAlertBossAppear::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stAlertBossAppear::CopyFrom(const stAlertBossAppear& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stAlertBossAppear::IsInitialized() const {

  return true;
}

void stAlertBossAppear::Swap(stAlertBossAppear* other) {
  if (other != this) {
    std::swap(delay_, other->delay_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stAlertBossAppear::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stAlertBossAppear_descriptor_;
  metadata.reflection = stAlertBossAppear_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqChangeMainCity_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqChangeMainCity_ProtoModID_descriptor_;
}
bool stReqChangeMainCity_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqChangeMainCity_ProtoModID stReqChangeMainCity::ModID;
const stReqChangeMainCity_ProtoModID stReqChangeMainCity::ProtoModID_MIN;
const stReqChangeMainCity_ProtoModID stReqChangeMainCity::ProtoModID_MAX;
const int stReqChangeMainCity::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqChangeMainCity_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqChangeMainCity_ProtoFunID_descriptor_;
}
bool stReqChangeMainCity_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 32:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqChangeMainCity_ProtoFunID stReqChangeMainCity::FunID;
const stReqChangeMainCity_ProtoFunID stReqChangeMainCity::ProtoFunID_MIN;
const stReqChangeMainCity_ProtoFunID stReqChangeMainCity::ProtoFunID_MAX;
const int stReqChangeMainCity::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqChangeMainCity::kLevelIDFieldNumber;
#endif  // !_MSC_VER

stReqChangeMainCity::stReqChangeMainCity()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqChangeMainCity::InitAsDefaultInstance() {
}

stReqChangeMainCity::stReqChangeMainCity(const stReqChangeMainCity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqChangeMainCity::SharedCtor() {
  _cached_size_ = 0;
  levelid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqChangeMainCity::~stReqChangeMainCity() {
  SharedDtor();
}

void stReqChangeMainCity::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqChangeMainCity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqChangeMainCity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqChangeMainCity_descriptor_;
}

const stReqChangeMainCity& stReqChangeMainCity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Map_2eproto();
  return *default_instance_;
}

stReqChangeMainCity* stReqChangeMainCity::default_instance_ = NULL;

stReqChangeMainCity* stReqChangeMainCity::New() const {
  return new stReqChangeMainCity;
}

void stReqChangeMainCity::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    levelid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqChangeMainCity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 levelID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &levelid_)));
          set_has_levelid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqChangeMainCity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 levelID = 1;
  if (has_levelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->levelid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqChangeMainCity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 levelID = 1;
  if (has_levelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->levelid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqChangeMainCity::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 levelID = 1;
    if (has_levelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->levelid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqChangeMainCity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqChangeMainCity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqChangeMainCity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqChangeMainCity::MergeFrom(const stReqChangeMainCity& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_levelid()) {
      set_levelid(from.levelid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqChangeMainCity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqChangeMainCity::CopyFrom(const stReqChangeMainCity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqChangeMainCity::IsInitialized() const {

  return true;
}

void stReqChangeMainCity::Swap(stReqChangeMainCity* other) {
  if (other != this) {
    std::swap(levelid_, other->levelid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqChangeMainCity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqChangeMainCity_descriptor_;
  metadata.reflection = stReqChangeMainCity_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stNotifyAddFireWall_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyAddFireWall_ProtoModID_descriptor_;
}
bool stNotifyAddFireWall_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyAddFireWall_ProtoModID stNotifyAddFireWall::ModID;
const stNotifyAddFireWall_ProtoModID stNotifyAddFireWall::ProtoModID_MIN;
const stNotifyAddFireWall_ProtoModID stNotifyAddFireWall::ProtoModID_MAX;
const int stNotifyAddFireWall::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stNotifyAddFireWall_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyAddFireWall_ProtoFunID_descriptor_;
}
bool stNotifyAddFireWall_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 33:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyAddFireWall_ProtoFunID stNotifyAddFireWall::FunID;
const stNotifyAddFireWall_ProtoFunID stNotifyAddFireWall::ProtoFunID_MIN;
const stNotifyAddFireWall_ProtoFunID stNotifyAddFireWall::ProtoFunID_MAX;
const int stNotifyAddFireWall::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stNotifyAddFireWall::kXFieldNumber;
const int stNotifyAddFireWall::kYFieldNumber;
const int stNotifyAddFireWall::kZFieldNumber;
const int stNotifyAddFireWall::kLastTimeFieldNumber;
#endif  // !_MSC_VER

stNotifyAddFireWall::stNotifyAddFireWall()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stNotifyAddFireWall::InitAsDefaultInstance() {
}

stNotifyAddFireWall::stNotifyAddFireWall(const stNotifyAddFireWall& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stNotifyAddFireWall::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0u;
  y_ = 0u;
  z_ = 0u;
  lasttime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stNotifyAddFireWall::~stNotifyAddFireWall() {
  SharedDtor();
}

void stNotifyAddFireWall::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stNotifyAddFireWall::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stNotifyAddFireWall::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyAddFireWall_descriptor_;
}

const stNotifyAddFireWall& stNotifyAddFireWall::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Map_2eproto();
  return *default_instance_;
}

stNotifyAddFireWall* stNotifyAddFireWall::default_instance_ = NULL;

stNotifyAddFireWall* stNotifyAddFireWall::New() const {
  return new stNotifyAddFireWall;
}

void stNotifyAddFireWall::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0u;
    y_ = 0u;
    z_ = 0u;
    lasttime_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stNotifyAddFireWall::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_y;
        break;
      }

      // optional uint32 y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_z;
        break;
      }

      // optional uint32 z = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_lastTime;
        break;
      }

      // optional uint32 lastTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lasttime_)));
          set_has_lasttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stNotifyAddFireWall::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->x(), output);
  }

  // optional uint32 y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->y(), output);
  }

  // optional uint32 z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->z(), output);
  }

  // optional uint32 lastTime = 4;
  if (has_lasttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->lasttime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stNotifyAddFireWall::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->x(), target);
  }

  // optional uint32 y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->y(), target);
  }

  // optional uint32 z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->z(), target);
  }

  // optional uint32 lastTime = 4;
  if (has_lasttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->lasttime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stNotifyAddFireWall::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 x = 1;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->x());
    }

    // optional uint32 y = 2;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->y());
    }

    // optional uint32 z = 3;
    if (has_z()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->z());
    }

    // optional uint32 lastTime = 4;
    if (has_lasttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lasttime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stNotifyAddFireWall::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stNotifyAddFireWall* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stNotifyAddFireWall*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stNotifyAddFireWall::MergeFrom(const stNotifyAddFireWall& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
    if (from.has_lasttime()) {
      set_lasttime(from.lasttime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stNotifyAddFireWall::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stNotifyAddFireWall::CopyFrom(const stNotifyAddFireWall& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stNotifyAddFireWall::IsInitialized() const {

  return true;
}

void stNotifyAddFireWall::Swap(stNotifyAddFireWall* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(lasttime_, other->lasttime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stNotifyAddFireWall::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stNotifyAddFireWall_descriptor_;
  metadata.reflection = stNotifyAddFireWall_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stBeginThunderDamage_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stBeginThunderDamage_ProtoModID_descriptor_;
}
bool stBeginThunderDamage_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stBeginThunderDamage_ProtoModID stBeginThunderDamage::ModID;
const stBeginThunderDamage_ProtoModID stBeginThunderDamage::ProtoModID_MIN;
const stBeginThunderDamage_ProtoModID stBeginThunderDamage::ProtoModID_MAX;
const int stBeginThunderDamage::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stBeginThunderDamage_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stBeginThunderDamage_ProtoFunID_descriptor_;
}
bool stBeginThunderDamage_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 34:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stBeginThunderDamage_ProtoFunID stBeginThunderDamage::FunID;
const stBeginThunderDamage_ProtoFunID stBeginThunderDamage::ProtoFunID_MIN;
const stBeginThunderDamage_ProtoFunID stBeginThunderDamage::ProtoFunID_MAX;
const int stBeginThunderDamage::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stBeginThunderDamage::kAttModTypeFieldNumber;
const int stBeginThunderDamage::kAttModIDFieldNumber;
const int stBeginThunderDamage::kDefTypeFieldNumber;
const int stBeginThunderDamage::kDefModIDFieldNumber;
#endif  // !_MSC_VER

stBeginThunderDamage::stBeginThunderDamage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stBeginThunderDamage::InitAsDefaultInstance() {
}

stBeginThunderDamage::stBeginThunderDamage(const stBeginThunderDamage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stBeginThunderDamage::SharedCtor() {
  _cached_size_ = 0;
  attmodtype_ = 0u;
  attmodid_ = 0u;
  deftype_ = 0u;
  defmodid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stBeginThunderDamage::~stBeginThunderDamage() {
  SharedDtor();
}

void stBeginThunderDamage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stBeginThunderDamage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stBeginThunderDamage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stBeginThunderDamage_descriptor_;
}

const stBeginThunderDamage& stBeginThunderDamage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Map_2eproto();
  return *default_instance_;
}

stBeginThunderDamage* stBeginThunderDamage::default_instance_ = NULL;

stBeginThunderDamage* stBeginThunderDamage::New() const {
  return new stBeginThunderDamage;
}

void stBeginThunderDamage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    attmodtype_ = 0u;
    attmodid_ = 0u;
    deftype_ = 0u;
    defmodid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stBeginThunderDamage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 attModType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attmodtype_)));
          set_has_attmodtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_attModID;
        break;
      }

      // optional uint32 attModID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attModID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attmodid_)));
          set_has_attmodid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_defType;
        break;
      }

      // optional uint32 defType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_defType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deftype_)));
          set_has_deftype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_defModID;
        break;
      }

      // optional uint32 defModID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_defModID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &defmodid_)));
          set_has_defmodid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stBeginThunderDamage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 attModType = 1;
  if (has_attmodtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->attmodtype(), output);
  }

  // optional uint32 attModID = 2;
  if (has_attmodid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->attmodid(), output);
  }

  // optional uint32 defType = 3;
  if (has_deftype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->deftype(), output);
  }

  // optional uint32 defModID = 4;
  if (has_defmodid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->defmodid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stBeginThunderDamage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 attModType = 1;
  if (has_attmodtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->attmodtype(), target);
  }

  // optional uint32 attModID = 2;
  if (has_attmodid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->attmodid(), target);
  }

  // optional uint32 defType = 3;
  if (has_deftype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->deftype(), target);
  }

  // optional uint32 defModID = 4;
  if (has_defmodid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->defmodid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stBeginThunderDamage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 attModType = 1;
    if (has_attmodtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attmodtype());
    }

    // optional uint32 attModID = 2;
    if (has_attmodid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attmodid());
    }

    // optional uint32 defType = 3;
    if (has_deftype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deftype());
    }

    // optional uint32 defModID = 4;
    if (has_defmodid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->defmodid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stBeginThunderDamage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stBeginThunderDamage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stBeginThunderDamage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stBeginThunderDamage::MergeFrom(const stBeginThunderDamage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_attmodtype()) {
      set_attmodtype(from.attmodtype());
    }
    if (from.has_attmodid()) {
      set_attmodid(from.attmodid());
    }
    if (from.has_deftype()) {
      set_deftype(from.deftype());
    }
    if (from.has_defmodid()) {
      set_defmodid(from.defmodid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stBeginThunderDamage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stBeginThunderDamage::CopyFrom(const stBeginThunderDamage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stBeginThunderDamage::IsInitialized() const {

  return true;
}

void stBeginThunderDamage::Swap(stBeginThunderDamage* other) {
  if (other != this) {
    std::swap(attmodtype_, other->attmodtype_);
    std::swap(attmodid_, other->attmodid_);
    std::swap(deftype_, other->deftype_);
    std::swap(defmodid_, other->defmodid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stBeginThunderDamage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stBeginThunderDamage_descriptor_;
  metadata.reflection = stBeginThunderDamage_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stCalcThunderDamage_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCalcThunderDamage_ProtoModID_descriptor_;
}
bool stCalcThunderDamage_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stCalcThunderDamage_ProtoModID stCalcThunderDamage::ModID;
const stCalcThunderDamage_ProtoModID stCalcThunderDamage::ProtoModID_MIN;
const stCalcThunderDamage_ProtoModID stCalcThunderDamage::ProtoModID_MAX;
const int stCalcThunderDamage::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stCalcThunderDamage_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCalcThunderDamage_ProtoFunID_descriptor_;
}
bool stCalcThunderDamage_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 35:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stCalcThunderDamage_ProtoFunID stCalcThunderDamage::FunID;
const stCalcThunderDamage_ProtoFunID stCalcThunderDamage::ProtoFunID_MIN;
const stCalcThunderDamage_ProtoFunID stCalcThunderDamage::ProtoFunID_MAX;
const int stCalcThunderDamage::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stCalcThunderDamage::kAttModTypeFieldNumber;
const int stCalcThunderDamage::kAttModIDFieldNumber;
const int stCalcThunderDamage::kDefTypeFieldNumber;
const int stCalcThunderDamage::kDefModIDFieldNumber;
#endif  // !_MSC_VER

stCalcThunderDamage::stCalcThunderDamage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stCalcThunderDamage::InitAsDefaultInstance() {
}

stCalcThunderDamage::stCalcThunderDamage(const stCalcThunderDamage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stCalcThunderDamage::SharedCtor() {
  _cached_size_ = 0;
  attmodtype_ = 0u;
  attmodid_ = 0u;
  deftype_ = 0u;
  defmodid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stCalcThunderDamage::~stCalcThunderDamage() {
  SharedDtor();
}

void stCalcThunderDamage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stCalcThunderDamage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stCalcThunderDamage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCalcThunderDamage_descriptor_;
}

const stCalcThunderDamage& stCalcThunderDamage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Map_2eproto();
  return *default_instance_;
}

stCalcThunderDamage* stCalcThunderDamage::default_instance_ = NULL;

stCalcThunderDamage* stCalcThunderDamage::New() const {
  return new stCalcThunderDamage;
}

void stCalcThunderDamage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    attmodtype_ = 0u;
    attmodid_ = 0u;
    deftype_ = 0u;
    defmodid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stCalcThunderDamage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 attModType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attmodtype_)));
          set_has_attmodtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_attModID;
        break;
      }

      // optional uint32 attModID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attModID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attmodid_)));
          set_has_attmodid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_defType;
        break;
      }

      // optional uint32 defType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_defType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deftype_)));
          set_has_deftype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_defModID;
        break;
      }

      // optional uint32 defModID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_defModID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &defmodid_)));
          set_has_defmodid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stCalcThunderDamage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 attModType = 1;
  if (has_attmodtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->attmodtype(), output);
  }

  // optional uint32 attModID = 2;
  if (has_attmodid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->attmodid(), output);
  }

  // optional uint32 defType = 3;
  if (has_deftype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->deftype(), output);
  }

  // optional uint32 defModID = 4;
  if (has_defmodid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->defmodid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stCalcThunderDamage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 attModType = 1;
  if (has_attmodtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->attmodtype(), target);
  }

  // optional uint32 attModID = 2;
  if (has_attmodid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->attmodid(), target);
  }

  // optional uint32 defType = 3;
  if (has_deftype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->deftype(), target);
  }

  // optional uint32 defModID = 4;
  if (has_defmodid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->defmodid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stCalcThunderDamage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 attModType = 1;
    if (has_attmodtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attmodtype());
    }

    // optional uint32 attModID = 2;
    if (has_attmodid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attmodid());
    }

    // optional uint32 defType = 3;
    if (has_deftype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deftype());
    }

    // optional uint32 defModID = 4;
    if (has_defmodid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->defmodid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stCalcThunderDamage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stCalcThunderDamage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stCalcThunderDamage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stCalcThunderDamage::MergeFrom(const stCalcThunderDamage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_attmodtype()) {
      set_attmodtype(from.attmodtype());
    }
    if (from.has_attmodid()) {
      set_attmodid(from.attmodid());
    }
    if (from.has_deftype()) {
      set_deftype(from.deftype());
    }
    if (from.has_defmodid()) {
      set_defmodid(from.defmodid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stCalcThunderDamage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stCalcThunderDamage::CopyFrom(const stCalcThunderDamage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stCalcThunderDamage::IsInitialized() const {

  return true;
}

void stCalcThunderDamage::Swap(stCalcThunderDamage* other) {
  if (other != this) {
    std::swap(attmodtype_, other->attmodtype_);
    std::swap(attmodid_, other->attmodid_);
    std::swap(deftype_, other->deftype_);
    std::swap(defmodid_, other->defmodid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stCalcThunderDamage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stCalcThunderDamage_descriptor_;
  metadata.reflection = stCalcThunderDamage_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stDirectDamge_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stDirectDamge_ProtoModID_descriptor_;
}
bool stDirectDamge_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stDirectDamge_ProtoModID stDirectDamge::ModID;
const stDirectDamge_ProtoModID stDirectDamge::ProtoModID_MIN;
const stDirectDamge_ProtoModID stDirectDamge::ProtoModID_MAX;
const int stDirectDamge::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stDirectDamge_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stDirectDamge_ProtoFunID_descriptor_;
}
bool stDirectDamge_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 36:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stDirectDamge_ProtoFunID stDirectDamge::FunID;
const stDirectDamge_ProtoFunID stDirectDamge::ProtoFunID_MIN;
const stDirectDamge_ProtoFunID stDirectDamge::ProtoFunID_MAX;
const int stDirectDamge::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stDirectDamge::kModTypeFieldNumber;
const int stDirectDamge::kModIDFieldNumber;
const int stDirectDamge::kDamageFieldNumber;
const int stDirectDamge::kAttTypeFieldNumber;
const int stDirectDamge::kAttModIDFieldNumber;
const int stDirectDamge::kResultFieldNumber;
#endif  // !_MSC_VER

stDirectDamge::stDirectDamge()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stDirectDamge::InitAsDefaultInstance() {
}

stDirectDamge::stDirectDamge(const stDirectDamge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stDirectDamge::SharedCtor() {
  _cached_size_ = 0;
  modtype_ = 0u;
  modid_ = 0u;
  damage_ = 0u;
  atttype_ = 0u;
  attmodid_ = 0u;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stDirectDamge::~stDirectDamge() {
  SharedDtor();
}

void stDirectDamge::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stDirectDamge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stDirectDamge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stDirectDamge_descriptor_;
}

const stDirectDamge& stDirectDamge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Map_2eproto();
  return *default_instance_;
}

stDirectDamge* stDirectDamge::default_instance_ = NULL;

stDirectDamge* stDirectDamge::New() const {
  return new stDirectDamge;
}

void stDirectDamge::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    modtype_ = 0u;
    modid_ = 0u;
    damage_ = 0u;
    atttype_ = 0u;
    attmodid_ = 0u;
    result_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stDirectDamge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 modType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &modtype_)));
          set_has_modtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_modID;
        break;
      }

      // optional uint32 modID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_modID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &modid_)));
          set_has_modid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_damage;
        break;
      }

      // optional uint32 damage = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &damage_)));
          set_has_damage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_attType;
        break;
      }

      // optional uint32 attType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &atttype_)));
          set_has_atttype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_attModID;
        break;
      }

      // optional uint32 attModID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attModID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attmodid_)));
          set_has_attmodid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_result;
        break;
      }

      // optional uint32 result = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stDirectDamge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 modType = 1;
  if (has_modtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->modtype(), output);
  }

  // optional uint32 modID = 2;
  if (has_modid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->modid(), output);
  }

  // optional uint32 damage = 3;
  if (has_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->damage(), output);
  }

  // optional uint32 attType = 4;
  if (has_atttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->atttype(), output);
  }

  // optional uint32 attModID = 5;
  if (has_attmodid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->attmodid(), output);
  }

  // optional uint32 result = 6;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stDirectDamge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 modType = 1;
  if (has_modtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->modtype(), target);
  }

  // optional uint32 modID = 2;
  if (has_modid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->modid(), target);
  }

  // optional uint32 damage = 3;
  if (has_damage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->damage(), target);
  }

  // optional uint32 attType = 4;
  if (has_atttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->atttype(), target);
  }

  // optional uint32 attModID = 5;
  if (has_attmodid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->attmodid(), target);
  }

  // optional uint32 result = 6;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stDirectDamge::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 modType = 1;
    if (has_modtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->modtype());
    }

    // optional uint32 modID = 2;
    if (has_modid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->modid());
    }

    // optional uint32 damage = 3;
    if (has_damage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->damage());
    }

    // optional uint32 attType = 4;
    if (has_atttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->atttype());
    }

    // optional uint32 attModID = 5;
    if (has_attmodid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attmodid());
    }

    // optional uint32 result = 6;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stDirectDamge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stDirectDamge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stDirectDamge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stDirectDamge::MergeFrom(const stDirectDamge& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_modtype()) {
      set_modtype(from.modtype());
    }
    if (from.has_modid()) {
      set_modid(from.modid());
    }
    if (from.has_damage()) {
      set_damage(from.damage());
    }
    if (from.has_atttype()) {
      set_atttype(from.atttype());
    }
    if (from.has_attmodid()) {
      set_attmodid(from.attmodid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stDirectDamge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stDirectDamge::CopyFrom(const stDirectDamge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stDirectDamge::IsInitialized() const {

  return true;
}

void stDirectDamge::Swap(stDirectDamge* other) {
  if (other != this) {
    std::swap(modtype_, other->modtype_);
    std::swap(modid_, other->modid_);
    std::swap(damage_, other->damage_);
    std::swap(atttype_, other->atttype_);
    std::swap(attmodid_, other->attmodid_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stDirectDamge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stDirectDamge_descriptor_;
  metadata.reflection = stDirectDamge_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stNotifyObjDie_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyObjDie_ProtoModID_descriptor_;
}
bool stNotifyObjDie_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyObjDie_ProtoModID stNotifyObjDie::ModID;
const stNotifyObjDie_ProtoModID stNotifyObjDie::ProtoModID_MIN;
const stNotifyObjDie_ProtoModID stNotifyObjDie::ProtoModID_MAX;
const int stNotifyObjDie::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stNotifyObjDie_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyObjDie_ProtoFunID_descriptor_;
}
bool stNotifyObjDie_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 37:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyObjDie_ProtoFunID stNotifyObjDie::FunID;
const stNotifyObjDie_ProtoFunID stNotifyObjDie::ProtoFunID_MIN;
const stNotifyObjDie_ProtoFunID stNotifyObjDie::ProtoFunID_MAX;
const int stNotifyObjDie::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stNotifyObjDie::kMoTypeFieldNumber;
const int stNotifyObjDie::kMoIDFieldNumber;
#endif  // !_MSC_VER

stNotifyObjDie::stNotifyObjDie()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stNotifyObjDie::InitAsDefaultInstance() {
}

stNotifyObjDie::stNotifyObjDie(const stNotifyObjDie& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stNotifyObjDie::SharedCtor() {
  _cached_size_ = 0;
  motype_ = 0u;
  moid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stNotifyObjDie::~stNotifyObjDie() {
  SharedDtor();
}

void stNotifyObjDie::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stNotifyObjDie::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stNotifyObjDie::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyObjDie_descriptor_;
}

const stNotifyObjDie& stNotifyObjDie::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Map_2eproto();
  return *default_instance_;
}

stNotifyObjDie* stNotifyObjDie::default_instance_ = NULL;

stNotifyObjDie* stNotifyObjDie::New() const {
  return new stNotifyObjDie;
}

void stNotifyObjDie::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    motype_ = 0u;
    moid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stNotifyObjDie::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 moType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &motype_)));
          set_has_motype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_moID;
        break;
      }

      // optional uint32 moID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_moID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &moid_)));
          set_has_moid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stNotifyObjDie::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 moType = 1;
  if (has_motype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->motype(), output);
  }

  // optional uint32 moID = 2;
  if (has_moid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->moid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stNotifyObjDie::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 moType = 1;
  if (has_motype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->motype(), target);
  }

  // optional uint32 moID = 2;
  if (has_moid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->moid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stNotifyObjDie::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 moType = 1;
    if (has_motype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->motype());
    }

    // optional uint32 moID = 2;
    if (has_moid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->moid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stNotifyObjDie::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stNotifyObjDie* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stNotifyObjDie*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stNotifyObjDie::MergeFrom(const stNotifyObjDie& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_motype()) {
      set_motype(from.motype());
    }
    if (from.has_moid()) {
      set_moid(from.moid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stNotifyObjDie::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stNotifyObjDie::CopyFrom(const stNotifyObjDie& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stNotifyObjDie::IsInitialized() const {

  return true;
}

void stNotifyObjDie::Swap(stNotifyObjDie* other) {
  if (other != this) {
    std::swap(motype_, other->motype_);
    std::swap(moid_, other->moid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stNotifyObjDie::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stNotifyObjDie_descriptor_;
  metadata.reflection = stNotifyObjDie_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stBeginBattle_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stBeginBattle_ProtoModID_descriptor_;
}
bool stBeginBattle_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stBeginBattle_ProtoModID stBeginBattle::ModID;
const stBeginBattle_ProtoModID stBeginBattle::ProtoModID_MIN;
const stBeginBattle_ProtoModID stBeginBattle::ProtoModID_MAX;
const int stBeginBattle::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stBeginBattle_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stBeginBattle_ProtoFunID_descriptor_;
}
bool stBeginBattle_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 38:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stBeginBattle_ProtoFunID stBeginBattle::FunID;
const stBeginBattle_ProtoFunID stBeginBattle::ProtoFunID_MIN;
const stBeginBattle_ProtoFunID stBeginBattle::ProtoFunID_MAX;
const int stBeginBattle::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stBeginBattle::kDelayFieldNumber;
const int stBeginBattle::kRemainTimeFieldNumber;
#endif  // !_MSC_VER

stBeginBattle::stBeginBattle()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stBeginBattle::InitAsDefaultInstance() {
}

stBeginBattle::stBeginBattle(const stBeginBattle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stBeginBattle::SharedCtor() {
  _cached_size_ = 0;
  delay_ = 0u;
  remaintime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stBeginBattle::~stBeginBattle() {
  SharedDtor();
}

void stBeginBattle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stBeginBattle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stBeginBattle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stBeginBattle_descriptor_;
}

const stBeginBattle& stBeginBattle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Map_2eproto();
  return *default_instance_;
}

stBeginBattle* stBeginBattle::default_instance_ = NULL;

stBeginBattle* stBeginBattle::New() const {
  return new stBeginBattle;
}

void stBeginBattle::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    delay_ = 0u;
    remaintime_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stBeginBattle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 delay = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &delay_)));
          set_has_delay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_remainTime;
        break;
      }

      // optional uint32 remainTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remainTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &remaintime_)));
          set_has_remaintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stBeginBattle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 delay = 1;
  if (has_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->delay(), output);
  }

  // optional uint32 remainTime = 2;
  if (has_remaintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->remaintime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stBeginBattle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 delay = 1;
  if (has_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->delay(), target);
  }

  // optional uint32 remainTime = 2;
  if (has_remaintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->remaintime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stBeginBattle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 delay = 1;
    if (has_delay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->delay());
    }

    // optional uint32 remainTime = 2;
    if (has_remaintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->remaintime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stBeginBattle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stBeginBattle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stBeginBattle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stBeginBattle::MergeFrom(const stBeginBattle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_delay()) {
      set_delay(from.delay());
    }
    if (from.has_remaintime()) {
      set_remaintime(from.remaintime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stBeginBattle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stBeginBattle::CopyFrom(const stBeginBattle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stBeginBattle::IsInitialized() const {

  return true;
}

void stBeginBattle::Swap(stBeginBattle* other) {
  if (other != this) {
    std::swap(delay_, other->delay_);
    std::swap(remaintime_, other->remaintime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stBeginBattle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stBeginBattle_descriptor_;
  metadata.reflection = stBeginBattle_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stThrowSkillFail_eReason_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stThrowSkillFail_eReason_descriptor_;
}
bool stThrowSkillFail_eReason_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stThrowSkillFail_eReason stThrowSkillFail::ATTER_NOT_EXIST;
const stThrowSkillFail_eReason stThrowSkillFail::ATTER_SKILL_NOT_EXIST;
const stThrowSkillFail_eReason stThrowSkillFail::ATTER_MP_NOT_ENOUGH;
const stThrowSkillFail_eReason stThrowSkillFail::ATTER_HAS_SILENCE;
const stThrowSkillFail_eReason stThrowSkillFail::eReason_MIN;
const stThrowSkillFail_eReason stThrowSkillFail::eReason_MAX;
const int stThrowSkillFail::eReason_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stThrowSkillFail_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stThrowSkillFail_ProtoModID_descriptor_;
}
bool stThrowSkillFail_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stThrowSkillFail_ProtoModID stThrowSkillFail::ModID;
const stThrowSkillFail_ProtoModID stThrowSkillFail::ProtoModID_MIN;
const stThrowSkillFail_ProtoModID stThrowSkillFail::ProtoModID_MAX;
const int stThrowSkillFail::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stThrowSkillFail_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stThrowSkillFail_ProtoFunID_descriptor_;
}
bool stThrowSkillFail_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 39:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stThrowSkillFail_ProtoFunID stThrowSkillFail::FunID;
const stThrowSkillFail_ProtoFunID stThrowSkillFail::ProtoFunID_MIN;
const stThrowSkillFail_ProtoFunID stThrowSkillFail::ProtoFunID_MAX;
const int stThrowSkillFail::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stThrowSkillFail::kReasonFieldNumber;
#endif  // !_MSC_VER

stThrowSkillFail::stThrowSkillFail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stThrowSkillFail::InitAsDefaultInstance() {
}

stThrowSkillFail::stThrowSkillFail(const stThrowSkillFail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stThrowSkillFail::SharedCtor() {
  _cached_size_ = 0;
  reason_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stThrowSkillFail::~stThrowSkillFail() {
  SharedDtor();
}

void stThrowSkillFail::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stThrowSkillFail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stThrowSkillFail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stThrowSkillFail_descriptor_;
}

const stThrowSkillFail& stThrowSkillFail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Map_2eproto();
  return *default_instance_;
}

stThrowSkillFail* stThrowSkillFail::default_instance_ = NULL;

stThrowSkillFail* stThrowSkillFail::New() const {
  return new stThrowSkillFail;
}

void stThrowSkillFail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reason_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stThrowSkillFail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Map.stThrowSkillFail.eReason reason = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Map::stThrowSkillFail_eReason_IsValid(value)) {
            set_reason(static_cast< ::Map::stThrowSkillFail_eReason >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stThrowSkillFail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Map.stThrowSkillFail.eReason reason = 1;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->reason(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stThrowSkillFail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Map.stThrowSkillFail.eReason reason = 1;
  if (has_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->reason(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stThrowSkillFail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Map.stThrowSkillFail.eReason reason = 1;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->reason());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stThrowSkillFail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stThrowSkillFail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stThrowSkillFail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stThrowSkillFail::MergeFrom(const stThrowSkillFail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reason()) {
      set_reason(from.reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stThrowSkillFail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stThrowSkillFail::CopyFrom(const stThrowSkillFail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stThrowSkillFail::IsInitialized() const {

  return true;
}

void stThrowSkillFail::Swap(stThrowSkillFail* other) {
  if (other != this) {
    std::swap(reason_, other->reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stThrowSkillFail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stThrowSkillFail_descriptor_;
  metadata.reflection = stThrowSkillFail_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stNotifyResAppear_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyResAppear_ProtoModID_descriptor_;
}
bool stNotifyResAppear_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyResAppear_ProtoModID stNotifyResAppear::ModID;
const stNotifyResAppear_ProtoModID stNotifyResAppear::ProtoModID_MIN;
const stNotifyResAppear_ProtoModID stNotifyResAppear::ProtoModID_MAX;
const int stNotifyResAppear::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stNotifyResAppear_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyResAppear_ProtoFunID_descriptor_;
}
bool stNotifyResAppear_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 40:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyResAppear_ProtoFunID stNotifyResAppear::FunID;
const stNotifyResAppear_ProtoFunID stNotifyResAppear::ProtoFunID_MIN;
const stNotifyResAppear_ProtoFunID stNotifyResAppear::ProtoFunID_MAX;
const int stNotifyResAppear::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stNotifyResAppear::kIdFieldNumber;
const int stNotifyResAppear::kXFieldNumber;
const int stNotifyResAppear::kYFieldNumber;
const int stNotifyResAppear::kZFieldNumber;
#endif  // !_MSC_VER

stNotifyResAppear::stNotifyResAppear()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stNotifyResAppear::InitAsDefaultInstance() {
}

stNotifyResAppear::stNotifyResAppear(const stNotifyResAppear& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stNotifyResAppear::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  x_ = 0u;
  y_ = 0u;
  z_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stNotifyResAppear::~stNotifyResAppear() {
  SharedDtor();
}

void stNotifyResAppear::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stNotifyResAppear::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stNotifyResAppear::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyResAppear_descriptor_;
}

const stNotifyResAppear& stNotifyResAppear::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Map_2eproto();
  return *default_instance_;
}

stNotifyResAppear* stNotifyResAppear::default_instance_ = NULL;

stNotifyResAppear* stNotifyResAppear::New() const {
  return new stNotifyResAppear;
}

void stNotifyResAppear::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    x_ = 0u;
    y_ = 0u;
    z_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stNotifyResAppear::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_x;
        break;
      }

      // optional uint32 x = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_y;
        break;
      }

      // optional uint32 y = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_z;
        break;
      }

      // optional uint32 z = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stNotifyResAppear::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 x = 2;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->x(), output);
  }

  // optional uint32 y = 3;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->y(), output);
  }

  // optional uint32 z = 4;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->z(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stNotifyResAppear::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 x = 2;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->x(), target);
  }

  // optional uint32 y = 3;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->y(), target);
  }

  // optional uint32 z = 4;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->z(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stNotifyResAppear::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 x = 2;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->x());
    }

    // optional uint32 y = 3;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->y());
    }

    // optional uint32 z = 4;
    if (has_z()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->z());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stNotifyResAppear::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stNotifyResAppear* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stNotifyResAppear*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stNotifyResAppear::MergeFrom(const stNotifyResAppear& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stNotifyResAppear::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stNotifyResAppear::CopyFrom(const stNotifyResAppear& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stNotifyResAppear::IsInitialized() const {

  return true;
}

void stNotifyResAppear::Swap(stNotifyResAppear* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stNotifyResAppear::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stNotifyResAppear_descriptor_;
  metadata.reflection = stNotifyResAppear_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stNotifyResDisappear_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyResDisappear_ProtoModID_descriptor_;
}
bool stNotifyResDisappear_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyResDisappear_ProtoModID stNotifyResDisappear::ModID;
const stNotifyResDisappear_ProtoModID stNotifyResDisappear::ProtoModID_MIN;
const stNotifyResDisappear_ProtoModID stNotifyResDisappear::ProtoModID_MAX;
const int stNotifyResDisappear::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stNotifyResDisappear_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyResDisappear_ProtoFunID_descriptor_;
}
bool stNotifyResDisappear_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 41:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyResDisappear_ProtoFunID stNotifyResDisappear::FunID;
const stNotifyResDisappear_ProtoFunID stNotifyResDisappear::ProtoFunID_MIN;
const stNotifyResDisappear_ProtoFunID stNotifyResDisappear::ProtoFunID_MAX;
const int stNotifyResDisappear::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stNotifyResDisappear::kIdFieldNumber;
#endif  // !_MSC_VER

stNotifyResDisappear::stNotifyResDisappear()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stNotifyResDisappear::InitAsDefaultInstance() {
}

stNotifyResDisappear::stNotifyResDisappear(const stNotifyResDisappear& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stNotifyResDisappear::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stNotifyResDisappear::~stNotifyResDisappear() {
  SharedDtor();
}

void stNotifyResDisappear::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stNotifyResDisappear::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stNotifyResDisappear::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyResDisappear_descriptor_;
}

const stNotifyResDisappear& stNotifyResDisappear::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Map_2eproto();
  return *default_instance_;
}

stNotifyResDisappear* stNotifyResDisappear::default_instance_ = NULL;

stNotifyResDisappear* stNotifyResDisappear::New() const {
  return new stNotifyResDisappear;
}

void stNotifyResDisappear::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stNotifyResDisappear::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stNotifyResDisappear::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stNotifyResDisappear::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stNotifyResDisappear::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stNotifyResDisappear::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stNotifyResDisappear* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stNotifyResDisappear*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stNotifyResDisappear::MergeFrom(const stNotifyResDisappear& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stNotifyResDisappear::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stNotifyResDisappear::CopyFrom(const stNotifyResDisappear& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stNotifyResDisappear::IsInitialized() const {

  return true;
}

void stNotifyResDisappear::Swap(stNotifyResDisappear* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stNotifyResDisappear::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stNotifyResDisappear_descriptor_;
  metadata.reflection = stNotifyResDisappear_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stNotifyBuffAppear_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyBuffAppear_ProtoModID_descriptor_;
}
bool stNotifyBuffAppear_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyBuffAppear_ProtoModID stNotifyBuffAppear::ModID;
const stNotifyBuffAppear_ProtoModID stNotifyBuffAppear::ProtoModID_MIN;
const stNotifyBuffAppear_ProtoModID stNotifyBuffAppear::ProtoModID_MAX;
const int stNotifyBuffAppear::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stNotifyBuffAppear_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyBuffAppear_ProtoFunID_descriptor_;
}
bool stNotifyBuffAppear_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 42:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyBuffAppear_ProtoFunID stNotifyBuffAppear::FunID;
const stNotifyBuffAppear_ProtoFunID stNotifyBuffAppear::ProtoFunID_MIN;
const stNotifyBuffAppear_ProtoFunID stNotifyBuffAppear::ProtoFunID_MAX;
const int stNotifyBuffAppear::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stNotifyBuffAppear::kIdFieldNumber;
const int stNotifyBuffAppear::kXFieldNumber;
const int stNotifyBuffAppear::kYFieldNumber;
const int stNotifyBuffAppear::kZFieldNumber;
const int stNotifyBuffAppear::kBuffIDFieldNumber;
#endif  // !_MSC_VER

stNotifyBuffAppear::stNotifyBuffAppear()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stNotifyBuffAppear::InitAsDefaultInstance() {
}

stNotifyBuffAppear::stNotifyBuffAppear(const stNotifyBuffAppear& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stNotifyBuffAppear::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  x_ = 0u;
  y_ = 0u;
  z_ = 0u;
  buffid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stNotifyBuffAppear::~stNotifyBuffAppear() {
  SharedDtor();
}

void stNotifyBuffAppear::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stNotifyBuffAppear::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stNotifyBuffAppear::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyBuffAppear_descriptor_;
}

const stNotifyBuffAppear& stNotifyBuffAppear::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Map_2eproto();
  return *default_instance_;
}

stNotifyBuffAppear* stNotifyBuffAppear::default_instance_ = NULL;

stNotifyBuffAppear* stNotifyBuffAppear::New() const {
  return new stNotifyBuffAppear;
}

void stNotifyBuffAppear::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    x_ = 0u;
    y_ = 0u;
    z_ = 0u;
    buffid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stNotifyBuffAppear::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_x;
        break;
      }

      // optional uint32 x = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_y;
        break;
      }

      // optional uint32 y = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_z;
        break;
      }

      // optional uint32 z = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_buffID;
        break;
      }

      // optional uint32 buffID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buffID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buffid_)));
          set_has_buffid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stNotifyBuffAppear::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 x = 2;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->x(), output);
  }

  // optional uint32 y = 3;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->y(), output);
  }

  // optional uint32 z = 4;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->z(), output);
  }

  // optional uint32 buffID = 5;
  if (has_buffid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->buffid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stNotifyBuffAppear::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 x = 2;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->x(), target);
  }

  // optional uint32 y = 3;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->y(), target);
  }

  // optional uint32 z = 4;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->z(), target);
  }

  // optional uint32 buffID = 5;
  if (has_buffid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->buffid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stNotifyBuffAppear::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 x = 2;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->x());
    }

    // optional uint32 y = 3;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->y());
    }

    // optional uint32 z = 4;
    if (has_z()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->z());
    }

    // optional uint32 buffID = 5;
    if (has_buffid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buffid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stNotifyBuffAppear::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stNotifyBuffAppear* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stNotifyBuffAppear*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stNotifyBuffAppear::MergeFrom(const stNotifyBuffAppear& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
    if (from.has_buffid()) {
      set_buffid(from.buffid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stNotifyBuffAppear::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stNotifyBuffAppear::CopyFrom(const stNotifyBuffAppear& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stNotifyBuffAppear::IsInitialized() const {

  return true;
}

void stNotifyBuffAppear::Swap(stNotifyBuffAppear* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(buffid_, other->buffid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stNotifyBuffAppear::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stNotifyBuffAppear_descriptor_;
  metadata.reflection = stNotifyBuffAppear_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stNotifyBuffDisappear_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyBuffDisappear_ProtoModID_descriptor_;
}
bool stNotifyBuffDisappear_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyBuffDisappear_ProtoModID stNotifyBuffDisappear::ModID;
const stNotifyBuffDisappear_ProtoModID stNotifyBuffDisappear::ProtoModID_MIN;
const stNotifyBuffDisappear_ProtoModID stNotifyBuffDisappear::ProtoModID_MAX;
const int stNotifyBuffDisappear::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stNotifyBuffDisappear_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyBuffDisappear_ProtoFunID_descriptor_;
}
bool stNotifyBuffDisappear_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 43:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyBuffDisappear_ProtoFunID stNotifyBuffDisappear::FunID;
const stNotifyBuffDisappear_ProtoFunID stNotifyBuffDisappear::ProtoFunID_MIN;
const stNotifyBuffDisappear_ProtoFunID stNotifyBuffDisappear::ProtoFunID_MAX;
const int stNotifyBuffDisappear::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stNotifyBuffDisappear::kIdFieldNumber;
#endif  // !_MSC_VER

stNotifyBuffDisappear::stNotifyBuffDisappear()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stNotifyBuffDisappear::InitAsDefaultInstance() {
}

stNotifyBuffDisappear::stNotifyBuffDisappear(const stNotifyBuffDisappear& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stNotifyBuffDisappear::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stNotifyBuffDisappear::~stNotifyBuffDisappear() {
  SharedDtor();
}

void stNotifyBuffDisappear::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stNotifyBuffDisappear::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stNotifyBuffDisappear::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyBuffDisappear_descriptor_;
}

const stNotifyBuffDisappear& stNotifyBuffDisappear::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Map_2eproto();
  return *default_instance_;
}

stNotifyBuffDisappear* stNotifyBuffDisappear::default_instance_ = NULL;

stNotifyBuffDisappear* stNotifyBuffDisappear::New() const {
  return new stNotifyBuffDisappear;
}

void stNotifyBuffDisappear::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stNotifyBuffDisappear::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stNotifyBuffDisappear::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stNotifyBuffDisappear::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stNotifyBuffDisappear::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stNotifyBuffDisappear::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stNotifyBuffDisappear* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stNotifyBuffDisappear*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stNotifyBuffDisappear::MergeFrom(const stNotifyBuffDisappear& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stNotifyBuffDisappear::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stNotifyBuffDisappear::CopyFrom(const stNotifyBuffDisappear& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stNotifyBuffDisappear::IsInitialized() const {

  return true;
}

void stNotifyBuffDisappear::Swap(stNotifyBuffDisappear* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stNotifyBuffDisappear::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stNotifyBuffDisappear_descriptor_;
  metadata.reflection = stNotifyBuffDisappear_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stOpCopyMapRes_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stOpCopyMapRes_ProtoModID_descriptor_;
}
bool stOpCopyMapRes_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stOpCopyMapRes_ProtoModID stOpCopyMapRes::ModID;
const stOpCopyMapRes_ProtoModID stOpCopyMapRes::ProtoModID_MIN;
const stOpCopyMapRes_ProtoModID stOpCopyMapRes::ProtoModID_MAX;
const int stOpCopyMapRes::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stOpCopyMapRes_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stOpCopyMapRes_ProtoFunID_descriptor_;
}
bool stOpCopyMapRes_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 44:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stOpCopyMapRes_ProtoFunID stOpCopyMapRes::FunID;
const stOpCopyMapRes_ProtoFunID stOpCopyMapRes::ProtoFunID_MIN;
const stOpCopyMapRes_ProtoFunID stOpCopyMapRes::ProtoFunID_MAX;
const int stOpCopyMapRes::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stOpCopyMapRes::kCollectFieldNumber;
const int stOpCopyMapRes::kTimeFieldNumber;
#endif  // !_MSC_VER

stOpCopyMapRes::stOpCopyMapRes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stOpCopyMapRes::InitAsDefaultInstance() {
}

stOpCopyMapRes::stOpCopyMapRes(const stOpCopyMapRes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stOpCopyMapRes::SharedCtor() {
  _cached_size_ = 0;
  collect_ = false;
  time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stOpCopyMapRes::~stOpCopyMapRes() {
  SharedDtor();
}

void stOpCopyMapRes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stOpCopyMapRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stOpCopyMapRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stOpCopyMapRes_descriptor_;
}

const stOpCopyMapRes& stOpCopyMapRes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Map_2eproto();
  return *default_instance_;
}

stOpCopyMapRes* stOpCopyMapRes::default_instance_ = NULL;

stOpCopyMapRes* stOpCopyMapRes::New() const {
  return new stOpCopyMapRes;
}

void stOpCopyMapRes::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    collect_ = false;
    time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stOpCopyMapRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool collect = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &collect_)));
          set_has_collect();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // optional uint32 time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stOpCopyMapRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool collect = 1;
  if (has_collect()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->collect(), output);
  }

  // optional uint32 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stOpCopyMapRes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool collect = 1;
  if (has_collect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->collect(), target);
  }

  // optional uint32 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stOpCopyMapRes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool collect = 1;
    if (has_collect()) {
      total_size += 1 + 1;
    }

    // optional uint32 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stOpCopyMapRes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stOpCopyMapRes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stOpCopyMapRes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stOpCopyMapRes::MergeFrom(const stOpCopyMapRes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_collect()) {
      set_collect(from.collect());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stOpCopyMapRes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stOpCopyMapRes::CopyFrom(const stOpCopyMapRes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stOpCopyMapRes::IsInitialized() const {

  return true;
}

void stOpCopyMapRes::Swap(stOpCopyMapRes* other) {
  if (other != this) {
    std::swap(collect_, other->collect_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stOpCopyMapRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stOpCopyMapRes_descriptor_;
  metadata.reflection = stOpCopyMapRes_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stPlayerGotBuff_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stPlayerGotBuff_ProtoModID_descriptor_;
}
bool stPlayerGotBuff_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stPlayerGotBuff_ProtoModID stPlayerGotBuff::ModID;
const stPlayerGotBuff_ProtoModID stPlayerGotBuff::ProtoModID_MIN;
const stPlayerGotBuff_ProtoModID stPlayerGotBuff::ProtoModID_MAX;
const int stPlayerGotBuff::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stPlayerGotBuff_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stPlayerGotBuff_ProtoFunID_descriptor_;
}
bool stPlayerGotBuff_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 45:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stPlayerGotBuff_ProtoFunID stPlayerGotBuff::FunID;
const stPlayerGotBuff_ProtoFunID stPlayerGotBuff::ProtoFunID_MIN;
const stPlayerGotBuff_ProtoFunID stPlayerGotBuff::ProtoFunID_MAX;
const int stPlayerGotBuff::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stPlayerGotBuff::kBuffIDFieldNumber;
#endif  // !_MSC_VER

stPlayerGotBuff::stPlayerGotBuff()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stPlayerGotBuff::InitAsDefaultInstance() {
}

stPlayerGotBuff::stPlayerGotBuff(const stPlayerGotBuff& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stPlayerGotBuff::SharedCtor() {
  _cached_size_ = 0;
  buffid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stPlayerGotBuff::~stPlayerGotBuff() {
  SharedDtor();
}

void stPlayerGotBuff::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stPlayerGotBuff::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stPlayerGotBuff::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stPlayerGotBuff_descriptor_;
}

const stPlayerGotBuff& stPlayerGotBuff::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Map_2eproto();
  return *default_instance_;
}

stPlayerGotBuff* stPlayerGotBuff::default_instance_ = NULL;

stPlayerGotBuff* stPlayerGotBuff::New() const {
  return new stPlayerGotBuff;
}

void stPlayerGotBuff::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    buffid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stPlayerGotBuff::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 buffID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buffid_)));
          set_has_buffid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stPlayerGotBuff::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 buffID = 1;
  if (has_buffid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->buffid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stPlayerGotBuff::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 buffID = 1;
  if (has_buffid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->buffid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stPlayerGotBuff::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 buffID = 1;
    if (has_buffid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buffid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stPlayerGotBuff::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stPlayerGotBuff* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stPlayerGotBuff*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stPlayerGotBuff::MergeFrom(const stPlayerGotBuff& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buffid()) {
      set_buffid(from.buffid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stPlayerGotBuff::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stPlayerGotBuff::CopyFrom(const stPlayerGotBuff& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stPlayerGotBuff::IsInitialized() const {

  return true;
}

void stPlayerGotBuff::Swap(stPlayerGotBuff* other) {
  if (other != this) {
    std::swap(buffid_, other->buffid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stPlayerGotBuff::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stPlayerGotBuff_descriptor_;
  metadata.reflection = stPlayerGotBuff_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stPlayerCollectSuccess_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stPlayerCollectSuccess_ProtoModID_descriptor_;
}
bool stPlayerCollectSuccess_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stPlayerCollectSuccess_ProtoModID stPlayerCollectSuccess::ModID;
const stPlayerCollectSuccess_ProtoModID stPlayerCollectSuccess::ProtoModID_MIN;
const stPlayerCollectSuccess_ProtoModID stPlayerCollectSuccess::ProtoModID_MAX;
const int stPlayerCollectSuccess::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stPlayerCollectSuccess_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stPlayerCollectSuccess_ProtoFunID_descriptor_;
}
bool stPlayerCollectSuccess_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 46:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stPlayerCollectSuccess_ProtoFunID stPlayerCollectSuccess::FunID;
const stPlayerCollectSuccess_ProtoFunID stPlayerCollectSuccess::ProtoFunID_MIN;
const stPlayerCollectSuccess_ProtoFunID stPlayerCollectSuccess::ProtoFunID_MAX;
const int stPlayerCollectSuccess::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stPlayerCollectSuccess::kScoreFieldNumber;
#endif  // !_MSC_VER

stPlayerCollectSuccess::stPlayerCollectSuccess()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stPlayerCollectSuccess::InitAsDefaultInstance() {
}

stPlayerCollectSuccess::stPlayerCollectSuccess(const stPlayerCollectSuccess& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stPlayerCollectSuccess::SharedCtor() {
  _cached_size_ = 0;
  score_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stPlayerCollectSuccess::~stPlayerCollectSuccess() {
  SharedDtor();
}

void stPlayerCollectSuccess::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stPlayerCollectSuccess::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stPlayerCollectSuccess::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stPlayerCollectSuccess_descriptor_;
}

const stPlayerCollectSuccess& stPlayerCollectSuccess::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Map_2eproto();
  return *default_instance_;
}

stPlayerCollectSuccess* stPlayerCollectSuccess::default_instance_ = NULL;

stPlayerCollectSuccess* stPlayerCollectSuccess::New() const {
  return new stPlayerCollectSuccess;
}

void stPlayerCollectSuccess::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    score_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stPlayerCollectSuccess::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 score = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stPlayerCollectSuccess::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 score = 1;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stPlayerCollectSuccess::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 score = 1;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stPlayerCollectSuccess::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 score = 1;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stPlayerCollectSuccess::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stPlayerCollectSuccess* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stPlayerCollectSuccess*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stPlayerCollectSuccess::MergeFrom(const stPlayerCollectSuccess& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stPlayerCollectSuccess::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stPlayerCollectSuccess::CopyFrom(const stPlayerCollectSuccess& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stPlayerCollectSuccess::IsInitialized() const {

  return true;
}

void stPlayerCollectSuccess::Swap(stPlayerCollectSuccess* other) {
  if (other != this) {
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stPlayerCollectSuccess::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stPlayerCollectSuccess_descriptor_;
  metadata.reflection = stPlayerCollectSuccess_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stSynCampScore_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynCampScore_ProtoModID_descriptor_;
}
bool stSynCampScore_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynCampScore_ProtoModID stSynCampScore::ModID;
const stSynCampScore_ProtoModID stSynCampScore::ProtoModID_MIN;
const stSynCampScore_ProtoModID stSynCampScore::ProtoModID_MAX;
const int stSynCampScore::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSynCampScore_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynCampScore_ProtoFunID_descriptor_;
}
bool stSynCampScore_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 47:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynCampScore_ProtoFunID stSynCampScore::FunID;
const stSynCampScore_ProtoFunID stSynCampScore::ProtoFunID_MIN;
const stSynCampScore_ProtoFunID stSynCampScore::ProtoFunID_MAX;
const int stSynCampScore::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stSynCampScore::kCampIDFieldNumber;
const int stSynCampScore::kScoreFieldNumber;
#endif  // !_MSC_VER

stSynCampScore::stSynCampScore()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSynCampScore::InitAsDefaultInstance() {
}

stSynCampScore::stSynCampScore(const stSynCampScore& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSynCampScore::SharedCtor() {
  _cached_size_ = 0;
  campid_ = 0u;
  score_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSynCampScore::~stSynCampScore() {
  SharedDtor();
}

void stSynCampScore::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stSynCampScore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSynCampScore::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynCampScore_descriptor_;
}

const stSynCampScore& stSynCampScore::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Map_2eproto();
  return *default_instance_;
}

stSynCampScore* stSynCampScore::default_instance_ = NULL;

stSynCampScore* stSynCampScore::New() const {
  return new stSynCampScore;
}

void stSynCampScore::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    campid_ = 0u;
    score_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSynCampScore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 campID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &campid_)));
          set_has_campid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_score;
        break;
      }

      // optional uint32 score = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSynCampScore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 campID = 1;
  if (has_campid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->campid(), output);
  }

  // optional uint32 score = 2;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSynCampScore::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 campID = 1;
  if (has_campid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->campid(), target);
  }

  // optional uint32 score = 2;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSynCampScore::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 campID = 1;
    if (has_campid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->campid());
    }

    // optional uint32 score = 2;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSynCampScore::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSynCampScore* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSynCampScore*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSynCampScore::MergeFrom(const stSynCampScore& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_campid()) {
      set_campid(from.campid());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSynCampScore::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSynCampScore::CopyFrom(const stSynCampScore& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSynCampScore::IsInitialized() const {

  return true;
}

void stSynCampScore::Swap(stSynCampScore* other) {
  if (other != this) {
    std::swap(campid_, other->campid_);
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSynCampScore::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSynCampScore_descriptor_;
  metadata.reflection = stSynCampScore_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stUserRelive_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUserRelive_ProtoModID_descriptor_;
}
bool stUserRelive_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stUserRelive_ProtoModID stUserRelive::ModID;
const stUserRelive_ProtoModID stUserRelive::ProtoModID_MIN;
const stUserRelive_ProtoModID stUserRelive::ProtoModID_MAX;
const int stUserRelive::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stUserRelive_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUserRelive_ProtoFunID_descriptor_;
}
bool stUserRelive_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 48:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stUserRelive_ProtoFunID stUserRelive::FunID;
const stUserRelive_ProtoFunID stUserRelive::ProtoFunID_MIN;
const stUserRelive_ProtoFunID stUserRelive::ProtoFunID_MAX;
const int stUserRelive::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stUserRelive::kCharIDFieldNumber;
const int stUserRelive::kXFieldNumber;
const int stUserRelive::kYFieldNumber;
const int stUserRelive::kZFieldNumber;
#endif  // !_MSC_VER

stUserRelive::stUserRelive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stUserRelive::InitAsDefaultInstance() {
}

stUserRelive::stUserRelive(const stUserRelive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stUserRelive::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  x_ = 0u;
  y_ = 0u;
  z_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stUserRelive::~stUserRelive() {
  SharedDtor();
}

void stUserRelive::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stUserRelive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stUserRelive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUserRelive_descriptor_;
}

const stUserRelive& stUserRelive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Map_2eproto();
  return *default_instance_;
}

stUserRelive* stUserRelive::default_instance_ = NULL;

stUserRelive* stUserRelive::New() const {
  return new stUserRelive;
}

void stUserRelive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    x_ = 0u;
    y_ = 0u;
    z_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stUserRelive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_x;
        break;
      }

      // optional uint32 x = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_y;
        break;
      }

      // optional uint32 y = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_z;
        break;
      }

      // optional uint32 z = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stUserRelive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 x = 2;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->x(), output);
  }

  // optional uint32 y = 3;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->y(), output);
  }

  // optional uint32 z = 4;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->z(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stUserRelive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 x = 2;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->x(), target);
  }

  // optional uint32 y = 3;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->y(), target);
  }

  // optional uint32 z = 4;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->z(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stUserRelive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 x = 2;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->x());
    }

    // optional uint32 y = 3;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->y());
    }

    // optional uint32 z = 4;
    if (has_z()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->z());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stUserRelive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stUserRelive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stUserRelive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stUserRelive::MergeFrom(const stUserRelive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stUserRelive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stUserRelive::CopyFrom(const stUserRelive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stUserRelive::IsInitialized() const {

  return true;
}

void stUserRelive::Swap(stUserRelive* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stUserRelive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stUserRelive_descriptor_;
  metadata.reflection = stUserRelive_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stNotifyUserPointToPos_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyUserPointToPos_ProtoModID_descriptor_;
}
bool stNotifyUserPointToPos_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyUserPointToPos_ProtoModID stNotifyUserPointToPos::ModID;
const stNotifyUserPointToPos_ProtoModID stNotifyUserPointToPos::ProtoModID_MIN;
const stNotifyUserPointToPos_ProtoModID stNotifyUserPointToPos::ProtoModID_MAX;
const int stNotifyUserPointToPos::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stNotifyUserPointToPos_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyUserPointToPos_ProtoFunID_descriptor_;
}
bool stNotifyUserPointToPos_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 49:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyUserPointToPos_ProtoFunID stNotifyUserPointToPos::FunID;
const stNotifyUserPointToPos_ProtoFunID stNotifyUserPointToPos::ProtoFunID_MIN;
const stNotifyUserPointToPos_ProtoFunID stNotifyUserPointToPos::ProtoFunID_MAX;
const int stNotifyUserPointToPos::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stNotifyUserPointToPos::kXFieldNumber;
const int stNotifyUserPointToPos::kYFieldNumber;
const int stNotifyUserPointToPos::kZFieldNumber;
const int stNotifyUserPointToPos::kLasttimeFieldNumber;
#endif  // !_MSC_VER

stNotifyUserPointToPos::stNotifyUserPointToPos()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stNotifyUserPointToPos::InitAsDefaultInstance() {
}

stNotifyUserPointToPos::stNotifyUserPointToPos(const stNotifyUserPointToPos& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stNotifyUserPointToPos::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0u;
  y_ = 0u;
  z_ = 0u;
  lasttime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stNotifyUserPointToPos::~stNotifyUserPointToPos() {
  SharedDtor();
}

void stNotifyUserPointToPos::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stNotifyUserPointToPos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stNotifyUserPointToPos::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyUserPointToPos_descriptor_;
}

const stNotifyUserPointToPos& stNotifyUserPointToPos::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Map_2eproto();
  return *default_instance_;
}

stNotifyUserPointToPos* stNotifyUserPointToPos::default_instance_ = NULL;

stNotifyUserPointToPos* stNotifyUserPointToPos::New() const {
  return new stNotifyUserPointToPos;
}

void stNotifyUserPointToPos::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0u;
    y_ = 0u;
    z_ = 0u;
    lasttime_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stNotifyUserPointToPos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_y;
        break;
      }

      // optional uint32 y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_z;
        break;
      }

      // optional uint32 z = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_lasttime;
        break;
      }

      // optional uint32 lasttime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lasttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lasttime_)));
          set_has_lasttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stNotifyUserPointToPos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->x(), output);
  }

  // optional uint32 y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->y(), output);
  }

  // optional uint32 z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->z(), output);
  }

  // optional uint32 lasttime = 4;
  if (has_lasttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->lasttime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stNotifyUserPointToPos::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->x(), target);
  }

  // optional uint32 y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->y(), target);
  }

  // optional uint32 z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->z(), target);
  }

  // optional uint32 lasttime = 4;
  if (has_lasttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->lasttime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stNotifyUserPointToPos::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 x = 1;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->x());
    }

    // optional uint32 y = 2;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->y());
    }

    // optional uint32 z = 3;
    if (has_z()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->z());
    }

    // optional uint32 lasttime = 4;
    if (has_lasttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lasttime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stNotifyUserPointToPos::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stNotifyUserPointToPos* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stNotifyUserPointToPos*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stNotifyUserPointToPos::MergeFrom(const stNotifyUserPointToPos& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
    if (from.has_lasttime()) {
      set_lasttime(from.lasttime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stNotifyUserPointToPos::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stNotifyUserPointToPos::CopyFrom(const stNotifyUserPointToPos& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stNotifyUserPointToPos::IsInitialized() const {

  return true;
}

void stNotifyUserPointToPos::Swap(stNotifyUserPointToPos* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(lasttime_, other->lasttime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stNotifyUserPointToPos::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stNotifyUserPointToPos_descriptor_;
  metadata.reflection = stNotifyUserPointToPos_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Map

// @@protoc_insertion_point(global_scope)
