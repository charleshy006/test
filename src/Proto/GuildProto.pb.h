// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GuildProto.proto

#ifndef PROTOBUF_GuildProto_2eproto__INCLUDED
#define PROTOBUF_GuildProto_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "ModID.pb.h"
// @@protoc_insertion_point(includes)

namespace GuildProto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_GuildProto_2eproto();
void protobuf_AssignDesc_GuildProto_2eproto();
void protobuf_ShutdownFile_GuildProto_2eproto();

class stSynGuildMemInfo;
class stGuildListInfo;
class stReqGuild;
class stRetGuild;
class stReqGuildDetailInfo;
class stRetGuildDetailInfo;
class stReqCreateGuild;
class stCreateGuildError;
class stSendMyGuild;
class stReqJoinInGuild;
class stJoinInGuildResult;
class stReqApplyJoinInList;
class stSynApplierInfo;
class stRetApplyJoinInList;
class stReplyApplier;
class stReplyApplerError;
class stJoinInGuildTip;
class stMemJoinInGuild;
class stReqLeaveGuild;
class stMemLeaveGuild;
class stAssignGuildTitle;
class stAssignTitleError;
class stCancelTitle;
class stCancelTitleError;
class stGiveLeader2Other;
class stGiveLeaderError;
class stFireGuild;
class stFireGuildError;
class stGuildMemOnOffLine;
class stKillOutGroupMember;
class stKillOutTip;
class stKillOutGroupMemberError;
class stRetGuildMemInfo;
class stSynGuildContribute;
class stChgGuildSign;
class stNotifyFireRemainTime;
class stReqGuildMemInfo;
class stCancelFireGuild;
class stCancelFireGuildResult;
class stCancelJoinInGuild;
class stCancelJoinInGuildResult;
class stReqDonate;
class stDonateResult;
class stReqLevelUpHallLv;
class stLevelUpHallLvResult;
class stSynHallLv;
class stReqPrayBuildingLv;
class stPrayBuildingLvResult;
class stSynPrayBuildingLv;
class stReqPray;
class stPrayResult;
class stReqLevelUpShopBuildingLv;
class stLevelUpShopBuildingLvResult;
class stSynShopBuilding;
class stReqGuildTrace;
class stGuildTraceInfo;
class stRetGuildTrace;
class stAddNewGuildTrace;
class stChgNotice;
class stGuildDonateState;
class stGuildPrayState;
class stReqChangeBadge;
class stChangeBadge;
class stIntoGuildCopymap;
class stIntoGuildCopymapError;
class stSearchGuild;
class stRetSearchGuildResult;
class stSynMemberContribute;
class stReqOpenGuildCopymapWin;
class stCopymapOpenInfo;
class stRetGuildCopymapInfo;
class stReqDamageSortlist;
class stDamageSortItemInfo;
class stRetDamageSortlist;
class stCopymapScoreSortItem;
class stReqGuildCopymapScoreSortlist;
class stRetGuildCopymapScoreSortlist;
class stSynGuildActivityDegree;
class stSynMemberChallengeNum;
class stSynMemberAssistNum;
class stReqEnterGuildCopymap;
class stRetEnterGuildCopymapResult;
class stStartGuildCopymap;
class stStartGuildCopymapResult;
class stInviteTeamInGuildChannel;
class stNotifyGuildMemContribute;
class stNotifyGuildMemActivityDegree;
class stReqGuildManorFightWin;
class stSynManorInfo;
class stRetGuildManorFightInfo;
class stReqOpenApplyManorFightWin;
class stSynManoryApplyInfo;
class stApplyManorWinInfo;
class stRefreshManorApplyInfo;
class stRetManorApplyInfo;
class stApplyManorFight;
class stApplyManorFightRet;
class stReqManorFightWin;
class stSynFormationTeamInfo;
class stRetManorFightWinInfo;
class stReqManorFightFormation;
class stSynManorBattleMem;
class stRetManorFightFormation;
class stEnterManorFightTeam;
class stEnterManorFightTeamResult;
class stNotifyLeaveManorFightWin;
class stSynManorFightItem;
class stManorFightPKResult;
class stManorFightPKFail;
class stNotifyWinerAfterApplyEnd;
class stReqChgManorFightTeamPos;
class stNotifyChgManorFightTeamPos;
class stChgManorFightTeamPosResult;
class stNotifyManorFightFail;
class stManorFightHasNotMatch;
class stManorFightFormationResult;
class stManorFightFinish;
class stReqLevelUpBlackMarketLv;
class stLevelUpBlackMarketLvResult;
class stSynBlackMarketBuildingLv;

enum stReqGuild_ProtoModID {
  stReqGuild_ProtoModID_ModID = 7
};
bool stReqGuild_ProtoModID_IsValid(int value);
const stReqGuild_ProtoModID stReqGuild_ProtoModID_ProtoModID_MIN = stReqGuild_ProtoModID_ModID;
const stReqGuild_ProtoModID stReqGuild_ProtoModID_ProtoModID_MAX = stReqGuild_ProtoModID_ModID;
const int stReqGuild_ProtoModID_ProtoModID_ARRAYSIZE = stReqGuild_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqGuild_ProtoModID_descriptor();
inline const ::std::string& stReqGuild_ProtoModID_Name(stReqGuild_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqGuild_ProtoModID_descriptor(), value);
}
inline bool stReqGuild_ProtoModID_Parse(
    const ::std::string& name, stReqGuild_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqGuild_ProtoModID>(
    stReqGuild_ProtoModID_descriptor(), name, value);
}
enum stReqGuild_ProtoFunID {
  stReqGuild_ProtoFunID_FunID = 1
};
bool stReqGuild_ProtoFunID_IsValid(int value);
const stReqGuild_ProtoFunID stReqGuild_ProtoFunID_ProtoFunID_MIN = stReqGuild_ProtoFunID_FunID;
const stReqGuild_ProtoFunID stReqGuild_ProtoFunID_ProtoFunID_MAX = stReqGuild_ProtoFunID_FunID;
const int stReqGuild_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqGuild_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqGuild_ProtoFunID_descriptor();
inline const ::std::string& stReqGuild_ProtoFunID_Name(stReqGuild_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqGuild_ProtoFunID_descriptor(), value);
}
inline bool stReqGuild_ProtoFunID_Parse(
    const ::std::string& name, stReqGuild_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqGuild_ProtoFunID>(
    stReqGuild_ProtoFunID_descriptor(), name, value);
}
enum stRetGuild_ProtoModID {
  stRetGuild_ProtoModID_ModID = 7
};
bool stRetGuild_ProtoModID_IsValid(int value);
const stRetGuild_ProtoModID stRetGuild_ProtoModID_ProtoModID_MIN = stRetGuild_ProtoModID_ModID;
const stRetGuild_ProtoModID stRetGuild_ProtoModID_ProtoModID_MAX = stRetGuild_ProtoModID_ModID;
const int stRetGuild_ProtoModID_ProtoModID_ARRAYSIZE = stRetGuild_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetGuild_ProtoModID_descriptor();
inline const ::std::string& stRetGuild_ProtoModID_Name(stRetGuild_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetGuild_ProtoModID_descriptor(), value);
}
inline bool stRetGuild_ProtoModID_Parse(
    const ::std::string& name, stRetGuild_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetGuild_ProtoModID>(
    stRetGuild_ProtoModID_descriptor(), name, value);
}
enum stRetGuild_ProtoFunID {
  stRetGuild_ProtoFunID_FunID = 2
};
bool stRetGuild_ProtoFunID_IsValid(int value);
const stRetGuild_ProtoFunID stRetGuild_ProtoFunID_ProtoFunID_MIN = stRetGuild_ProtoFunID_FunID;
const stRetGuild_ProtoFunID stRetGuild_ProtoFunID_ProtoFunID_MAX = stRetGuild_ProtoFunID_FunID;
const int stRetGuild_ProtoFunID_ProtoFunID_ARRAYSIZE = stRetGuild_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetGuild_ProtoFunID_descriptor();
inline const ::std::string& stRetGuild_ProtoFunID_Name(stRetGuild_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetGuild_ProtoFunID_descriptor(), value);
}
inline bool stRetGuild_ProtoFunID_Parse(
    const ::std::string& name, stRetGuild_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetGuild_ProtoFunID>(
    stRetGuild_ProtoFunID_descriptor(), name, value);
}
enum stReqGuildDetailInfo_ProtoModID {
  stReqGuildDetailInfo_ProtoModID_ModID = 7
};
bool stReqGuildDetailInfo_ProtoModID_IsValid(int value);
const stReqGuildDetailInfo_ProtoModID stReqGuildDetailInfo_ProtoModID_ProtoModID_MIN = stReqGuildDetailInfo_ProtoModID_ModID;
const stReqGuildDetailInfo_ProtoModID stReqGuildDetailInfo_ProtoModID_ProtoModID_MAX = stReqGuildDetailInfo_ProtoModID_ModID;
const int stReqGuildDetailInfo_ProtoModID_ProtoModID_ARRAYSIZE = stReqGuildDetailInfo_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqGuildDetailInfo_ProtoModID_descriptor();
inline const ::std::string& stReqGuildDetailInfo_ProtoModID_Name(stReqGuildDetailInfo_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqGuildDetailInfo_ProtoModID_descriptor(), value);
}
inline bool stReqGuildDetailInfo_ProtoModID_Parse(
    const ::std::string& name, stReqGuildDetailInfo_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqGuildDetailInfo_ProtoModID>(
    stReqGuildDetailInfo_ProtoModID_descriptor(), name, value);
}
enum stReqGuildDetailInfo_ProtoFunID {
  stReqGuildDetailInfo_ProtoFunID_FunID = 3
};
bool stReqGuildDetailInfo_ProtoFunID_IsValid(int value);
const stReqGuildDetailInfo_ProtoFunID stReqGuildDetailInfo_ProtoFunID_ProtoFunID_MIN = stReqGuildDetailInfo_ProtoFunID_FunID;
const stReqGuildDetailInfo_ProtoFunID stReqGuildDetailInfo_ProtoFunID_ProtoFunID_MAX = stReqGuildDetailInfo_ProtoFunID_FunID;
const int stReqGuildDetailInfo_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqGuildDetailInfo_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqGuildDetailInfo_ProtoFunID_descriptor();
inline const ::std::string& stReqGuildDetailInfo_ProtoFunID_Name(stReqGuildDetailInfo_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqGuildDetailInfo_ProtoFunID_descriptor(), value);
}
inline bool stReqGuildDetailInfo_ProtoFunID_Parse(
    const ::std::string& name, stReqGuildDetailInfo_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqGuildDetailInfo_ProtoFunID>(
    stReqGuildDetailInfo_ProtoFunID_descriptor(), name, value);
}
enum stRetGuildDetailInfo_ProtoModID {
  stRetGuildDetailInfo_ProtoModID_ModID = 7
};
bool stRetGuildDetailInfo_ProtoModID_IsValid(int value);
const stRetGuildDetailInfo_ProtoModID stRetGuildDetailInfo_ProtoModID_ProtoModID_MIN = stRetGuildDetailInfo_ProtoModID_ModID;
const stRetGuildDetailInfo_ProtoModID stRetGuildDetailInfo_ProtoModID_ProtoModID_MAX = stRetGuildDetailInfo_ProtoModID_ModID;
const int stRetGuildDetailInfo_ProtoModID_ProtoModID_ARRAYSIZE = stRetGuildDetailInfo_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetGuildDetailInfo_ProtoModID_descriptor();
inline const ::std::string& stRetGuildDetailInfo_ProtoModID_Name(stRetGuildDetailInfo_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetGuildDetailInfo_ProtoModID_descriptor(), value);
}
inline bool stRetGuildDetailInfo_ProtoModID_Parse(
    const ::std::string& name, stRetGuildDetailInfo_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetGuildDetailInfo_ProtoModID>(
    stRetGuildDetailInfo_ProtoModID_descriptor(), name, value);
}
enum stRetGuildDetailInfo_ProtoFunID {
  stRetGuildDetailInfo_ProtoFunID_FunID = 4
};
bool stRetGuildDetailInfo_ProtoFunID_IsValid(int value);
const stRetGuildDetailInfo_ProtoFunID stRetGuildDetailInfo_ProtoFunID_ProtoFunID_MIN = stRetGuildDetailInfo_ProtoFunID_FunID;
const stRetGuildDetailInfo_ProtoFunID stRetGuildDetailInfo_ProtoFunID_ProtoFunID_MAX = stRetGuildDetailInfo_ProtoFunID_FunID;
const int stRetGuildDetailInfo_ProtoFunID_ProtoFunID_ARRAYSIZE = stRetGuildDetailInfo_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetGuildDetailInfo_ProtoFunID_descriptor();
inline const ::std::string& stRetGuildDetailInfo_ProtoFunID_Name(stRetGuildDetailInfo_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetGuildDetailInfo_ProtoFunID_descriptor(), value);
}
inline bool stRetGuildDetailInfo_ProtoFunID_Parse(
    const ::std::string& name, stRetGuildDetailInfo_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetGuildDetailInfo_ProtoFunID>(
    stRetGuildDetailInfo_ProtoFunID_descriptor(), name, value);
}
enum stReqCreateGuild_eUseResType {
  stReqCreateGuild_eUseResType_eDiamond = 1,
  stReqCreateGuild_eUseResType_eGoldCoin = 2
};
bool stReqCreateGuild_eUseResType_IsValid(int value);
const stReqCreateGuild_eUseResType stReqCreateGuild_eUseResType_eUseResType_MIN = stReqCreateGuild_eUseResType_eDiamond;
const stReqCreateGuild_eUseResType stReqCreateGuild_eUseResType_eUseResType_MAX = stReqCreateGuild_eUseResType_eGoldCoin;
const int stReqCreateGuild_eUseResType_eUseResType_ARRAYSIZE = stReqCreateGuild_eUseResType_eUseResType_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqCreateGuild_eUseResType_descriptor();
inline const ::std::string& stReqCreateGuild_eUseResType_Name(stReqCreateGuild_eUseResType value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqCreateGuild_eUseResType_descriptor(), value);
}
inline bool stReqCreateGuild_eUseResType_Parse(
    const ::std::string& name, stReqCreateGuild_eUseResType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqCreateGuild_eUseResType>(
    stReqCreateGuild_eUseResType_descriptor(), name, value);
}
enum stReqCreateGuild_ProtoModID {
  stReqCreateGuild_ProtoModID_ModID = 7
};
bool stReqCreateGuild_ProtoModID_IsValid(int value);
const stReqCreateGuild_ProtoModID stReqCreateGuild_ProtoModID_ProtoModID_MIN = stReqCreateGuild_ProtoModID_ModID;
const stReqCreateGuild_ProtoModID stReqCreateGuild_ProtoModID_ProtoModID_MAX = stReqCreateGuild_ProtoModID_ModID;
const int stReqCreateGuild_ProtoModID_ProtoModID_ARRAYSIZE = stReqCreateGuild_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqCreateGuild_ProtoModID_descriptor();
inline const ::std::string& stReqCreateGuild_ProtoModID_Name(stReqCreateGuild_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqCreateGuild_ProtoModID_descriptor(), value);
}
inline bool stReqCreateGuild_ProtoModID_Parse(
    const ::std::string& name, stReqCreateGuild_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqCreateGuild_ProtoModID>(
    stReqCreateGuild_ProtoModID_descriptor(), name, value);
}
enum stReqCreateGuild_ProtoFunID {
  stReqCreateGuild_ProtoFunID_FunID = 5
};
bool stReqCreateGuild_ProtoFunID_IsValid(int value);
const stReqCreateGuild_ProtoFunID stReqCreateGuild_ProtoFunID_ProtoFunID_MIN = stReqCreateGuild_ProtoFunID_FunID;
const stReqCreateGuild_ProtoFunID stReqCreateGuild_ProtoFunID_ProtoFunID_MAX = stReqCreateGuild_ProtoFunID_FunID;
const int stReqCreateGuild_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqCreateGuild_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqCreateGuild_ProtoFunID_descriptor();
inline const ::std::string& stReqCreateGuild_ProtoFunID_Name(stReqCreateGuild_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqCreateGuild_ProtoFunID_descriptor(), value);
}
inline bool stReqCreateGuild_ProtoFunID_Parse(
    const ::std::string& name, stReqCreateGuild_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqCreateGuild_ProtoFunID>(
    stReqCreateGuild_ProtoFunID_descriptor(), name, value);
}
enum stCreateGuildError_ProtoModID {
  stCreateGuildError_ProtoModID_ModID = 7
};
bool stCreateGuildError_ProtoModID_IsValid(int value);
const stCreateGuildError_ProtoModID stCreateGuildError_ProtoModID_ProtoModID_MIN = stCreateGuildError_ProtoModID_ModID;
const stCreateGuildError_ProtoModID stCreateGuildError_ProtoModID_ProtoModID_MAX = stCreateGuildError_ProtoModID_ModID;
const int stCreateGuildError_ProtoModID_ProtoModID_ARRAYSIZE = stCreateGuildError_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stCreateGuildError_ProtoModID_descriptor();
inline const ::std::string& stCreateGuildError_ProtoModID_Name(stCreateGuildError_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stCreateGuildError_ProtoModID_descriptor(), value);
}
inline bool stCreateGuildError_ProtoModID_Parse(
    const ::std::string& name, stCreateGuildError_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stCreateGuildError_ProtoModID>(
    stCreateGuildError_ProtoModID_descriptor(), name, value);
}
enum stCreateGuildError_ProtoFunID {
  stCreateGuildError_ProtoFunID_FunID = 6
};
bool stCreateGuildError_ProtoFunID_IsValid(int value);
const stCreateGuildError_ProtoFunID stCreateGuildError_ProtoFunID_ProtoFunID_MIN = stCreateGuildError_ProtoFunID_FunID;
const stCreateGuildError_ProtoFunID stCreateGuildError_ProtoFunID_ProtoFunID_MAX = stCreateGuildError_ProtoFunID_FunID;
const int stCreateGuildError_ProtoFunID_ProtoFunID_ARRAYSIZE = stCreateGuildError_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stCreateGuildError_ProtoFunID_descriptor();
inline const ::std::string& stCreateGuildError_ProtoFunID_Name(stCreateGuildError_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stCreateGuildError_ProtoFunID_descriptor(), value);
}
inline bool stCreateGuildError_ProtoFunID_Parse(
    const ::std::string& name, stCreateGuildError_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stCreateGuildError_ProtoFunID>(
    stCreateGuildError_ProtoFunID_descriptor(), name, value);
}
enum stSendMyGuild_ProtoModID {
  stSendMyGuild_ProtoModID_ModID = 7
};
bool stSendMyGuild_ProtoModID_IsValid(int value);
const stSendMyGuild_ProtoModID stSendMyGuild_ProtoModID_ProtoModID_MIN = stSendMyGuild_ProtoModID_ModID;
const stSendMyGuild_ProtoModID stSendMyGuild_ProtoModID_ProtoModID_MAX = stSendMyGuild_ProtoModID_ModID;
const int stSendMyGuild_ProtoModID_ProtoModID_ARRAYSIZE = stSendMyGuild_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSendMyGuild_ProtoModID_descriptor();
inline const ::std::string& stSendMyGuild_ProtoModID_Name(stSendMyGuild_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSendMyGuild_ProtoModID_descriptor(), value);
}
inline bool stSendMyGuild_ProtoModID_Parse(
    const ::std::string& name, stSendMyGuild_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSendMyGuild_ProtoModID>(
    stSendMyGuild_ProtoModID_descriptor(), name, value);
}
enum stSendMyGuild_ProtoFunID {
  stSendMyGuild_ProtoFunID_FunID = 7
};
bool stSendMyGuild_ProtoFunID_IsValid(int value);
const stSendMyGuild_ProtoFunID stSendMyGuild_ProtoFunID_ProtoFunID_MIN = stSendMyGuild_ProtoFunID_FunID;
const stSendMyGuild_ProtoFunID stSendMyGuild_ProtoFunID_ProtoFunID_MAX = stSendMyGuild_ProtoFunID_FunID;
const int stSendMyGuild_ProtoFunID_ProtoFunID_ARRAYSIZE = stSendMyGuild_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSendMyGuild_ProtoFunID_descriptor();
inline const ::std::string& stSendMyGuild_ProtoFunID_Name(stSendMyGuild_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSendMyGuild_ProtoFunID_descriptor(), value);
}
inline bool stSendMyGuild_ProtoFunID_Parse(
    const ::std::string& name, stSendMyGuild_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSendMyGuild_ProtoFunID>(
    stSendMyGuild_ProtoFunID_descriptor(), name, value);
}
enum stReqJoinInGuild_ProtoModID {
  stReqJoinInGuild_ProtoModID_ModID = 7
};
bool stReqJoinInGuild_ProtoModID_IsValid(int value);
const stReqJoinInGuild_ProtoModID stReqJoinInGuild_ProtoModID_ProtoModID_MIN = stReqJoinInGuild_ProtoModID_ModID;
const stReqJoinInGuild_ProtoModID stReqJoinInGuild_ProtoModID_ProtoModID_MAX = stReqJoinInGuild_ProtoModID_ModID;
const int stReqJoinInGuild_ProtoModID_ProtoModID_ARRAYSIZE = stReqJoinInGuild_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqJoinInGuild_ProtoModID_descriptor();
inline const ::std::string& stReqJoinInGuild_ProtoModID_Name(stReqJoinInGuild_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqJoinInGuild_ProtoModID_descriptor(), value);
}
inline bool stReqJoinInGuild_ProtoModID_Parse(
    const ::std::string& name, stReqJoinInGuild_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqJoinInGuild_ProtoModID>(
    stReqJoinInGuild_ProtoModID_descriptor(), name, value);
}
enum stReqJoinInGuild_ProtoFunID {
  stReqJoinInGuild_ProtoFunID_FunID = 8
};
bool stReqJoinInGuild_ProtoFunID_IsValid(int value);
const stReqJoinInGuild_ProtoFunID stReqJoinInGuild_ProtoFunID_ProtoFunID_MIN = stReqJoinInGuild_ProtoFunID_FunID;
const stReqJoinInGuild_ProtoFunID stReqJoinInGuild_ProtoFunID_ProtoFunID_MAX = stReqJoinInGuild_ProtoFunID_FunID;
const int stReqJoinInGuild_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqJoinInGuild_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqJoinInGuild_ProtoFunID_descriptor();
inline const ::std::string& stReqJoinInGuild_ProtoFunID_Name(stReqJoinInGuild_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqJoinInGuild_ProtoFunID_descriptor(), value);
}
inline bool stReqJoinInGuild_ProtoFunID_Parse(
    const ::std::string& name, stReqJoinInGuild_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqJoinInGuild_ProtoFunID>(
    stReqJoinInGuild_ProtoFunID_descriptor(), name, value);
}
enum stJoinInGuildResult_ProtoModID {
  stJoinInGuildResult_ProtoModID_ModID = 7
};
bool stJoinInGuildResult_ProtoModID_IsValid(int value);
const stJoinInGuildResult_ProtoModID stJoinInGuildResult_ProtoModID_ProtoModID_MIN = stJoinInGuildResult_ProtoModID_ModID;
const stJoinInGuildResult_ProtoModID stJoinInGuildResult_ProtoModID_ProtoModID_MAX = stJoinInGuildResult_ProtoModID_ModID;
const int stJoinInGuildResult_ProtoModID_ProtoModID_ARRAYSIZE = stJoinInGuildResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stJoinInGuildResult_ProtoModID_descriptor();
inline const ::std::string& stJoinInGuildResult_ProtoModID_Name(stJoinInGuildResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stJoinInGuildResult_ProtoModID_descriptor(), value);
}
inline bool stJoinInGuildResult_ProtoModID_Parse(
    const ::std::string& name, stJoinInGuildResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stJoinInGuildResult_ProtoModID>(
    stJoinInGuildResult_ProtoModID_descriptor(), name, value);
}
enum stJoinInGuildResult_ProtoFunID {
  stJoinInGuildResult_ProtoFunID_FunID = 9
};
bool stJoinInGuildResult_ProtoFunID_IsValid(int value);
const stJoinInGuildResult_ProtoFunID stJoinInGuildResult_ProtoFunID_ProtoFunID_MIN = stJoinInGuildResult_ProtoFunID_FunID;
const stJoinInGuildResult_ProtoFunID stJoinInGuildResult_ProtoFunID_ProtoFunID_MAX = stJoinInGuildResult_ProtoFunID_FunID;
const int stJoinInGuildResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stJoinInGuildResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stJoinInGuildResult_ProtoFunID_descriptor();
inline const ::std::string& stJoinInGuildResult_ProtoFunID_Name(stJoinInGuildResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stJoinInGuildResult_ProtoFunID_descriptor(), value);
}
inline bool stJoinInGuildResult_ProtoFunID_Parse(
    const ::std::string& name, stJoinInGuildResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stJoinInGuildResult_ProtoFunID>(
    stJoinInGuildResult_ProtoFunID_descriptor(), name, value);
}
enum stReqApplyJoinInList_ProtoModID {
  stReqApplyJoinInList_ProtoModID_ModID = 7
};
bool stReqApplyJoinInList_ProtoModID_IsValid(int value);
const stReqApplyJoinInList_ProtoModID stReqApplyJoinInList_ProtoModID_ProtoModID_MIN = stReqApplyJoinInList_ProtoModID_ModID;
const stReqApplyJoinInList_ProtoModID stReqApplyJoinInList_ProtoModID_ProtoModID_MAX = stReqApplyJoinInList_ProtoModID_ModID;
const int stReqApplyJoinInList_ProtoModID_ProtoModID_ARRAYSIZE = stReqApplyJoinInList_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqApplyJoinInList_ProtoModID_descriptor();
inline const ::std::string& stReqApplyJoinInList_ProtoModID_Name(stReqApplyJoinInList_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqApplyJoinInList_ProtoModID_descriptor(), value);
}
inline bool stReqApplyJoinInList_ProtoModID_Parse(
    const ::std::string& name, stReqApplyJoinInList_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqApplyJoinInList_ProtoModID>(
    stReqApplyJoinInList_ProtoModID_descriptor(), name, value);
}
enum stReqApplyJoinInList_ProtoFunID {
  stReqApplyJoinInList_ProtoFunID_FunID = 10
};
bool stReqApplyJoinInList_ProtoFunID_IsValid(int value);
const stReqApplyJoinInList_ProtoFunID stReqApplyJoinInList_ProtoFunID_ProtoFunID_MIN = stReqApplyJoinInList_ProtoFunID_FunID;
const stReqApplyJoinInList_ProtoFunID stReqApplyJoinInList_ProtoFunID_ProtoFunID_MAX = stReqApplyJoinInList_ProtoFunID_FunID;
const int stReqApplyJoinInList_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqApplyJoinInList_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqApplyJoinInList_ProtoFunID_descriptor();
inline const ::std::string& stReqApplyJoinInList_ProtoFunID_Name(stReqApplyJoinInList_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqApplyJoinInList_ProtoFunID_descriptor(), value);
}
inline bool stReqApplyJoinInList_ProtoFunID_Parse(
    const ::std::string& name, stReqApplyJoinInList_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqApplyJoinInList_ProtoFunID>(
    stReqApplyJoinInList_ProtoFunID_descriptor(), name, value);
}
enum stRetApplyJoinInList_ProtoModID {
  stRetApplyJoinInList_ProtoModID_ModID = 7
};
bool stRetApplyJoinInList_ProtoModID_IsValid(int value);
const stRetApplyJoinInList_ProtoModID stRetApplyJoinInList_ProtoModID_ProtoModID_MIN = stRetApplyJoinInList_ProtoModID_ModID;
const stRetApplyJoinInList_ProtoModID stRetApplyJoinInList_ProtoModID_ProtoModID_MAX = stRetApplyJoinInList_ProtoModID_ModID;
const int stRetApplyJoinInList_ProtoModID_ProtoModID_ARRAYSIZE = stRetApplyJoinInList_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetApplyJoinInList_ProtoModID_descriptor();
inline const ::std::string& stRetApplyJoinInList_ProtoModID_Name(stRetApplyJoinInList_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetApplyJoinInList_ProtoModID_descriptor(), value);
}
inline bool stRetApplyJoinInList_ProtoModID_Parse(
    const ::std::string& name, stRetApplyJoinInList_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetApplyJoinInList_ProtoModID>(
    stRetApplyJoinInList_ProtoModID_descriptor(), name, value);
}
enum stRetApplyJoinInList_ProtoFunID {
  stRetApplyJoinInList_ProtoFunID_FunID = 11
};
bool stRetApplyJoinInList_ProtoFunID_IsValid(int value);
const stRetApplyJoinInList_ProtoFunID stRetApplyJoinInList_ProtoFunID_ProtoFunID_MIN = stRetApplyJoinInList_ProtoFunID_FunID;
const stRetApplyJoinInList_ProtoFunID stRetApplyJoinInList_ProtoFunID_ProtoFunID_MAX = stRetApplyJoinInList_ProtoFunID_FunID;
const int stRetApplyJoinInList_ProtoFunID_ProtoFunID_ARRAYSIZE = stRetApplyJoinInList_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetApplyJoinInList_ProtoFunID_descriptor();
inline const ::std::string& stRetApplyJoinInList_ProtoFunID_Name(stRetApplyJoinInList_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetApplyJoinInList_ProtoFunID_descriptor(), value);
}
inline bool stRetApplyJoinInList_ProtoFunID_Parse(
    const ::std::string& name, stRetApplyJoinInList_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetApplyJoinInList_ProtoFunID>(
    stRetApplyJoinInList_ProtoFunID_descriptor(), name, value);
}
enum stReplyApplier_ProtoModID {
  stReplyApplier_ProtoModID_ModID = 7
};
bool stReplyApplier_ProtoModID_IsValid(int value);
const stReplyApplier_ProtoModID stReplyApplier_ProtoModID_ProtoModID_MIN = stReplyApplier_ProtoModID_ModID;
const stReplyApplier_ProtoModID stReplyApplier_ProtoModID_ProtoModID_MAX = stReplyApplier_ProtoModID_ModID;
const int stReplyApplier_ProtoModID_ProtoModID_ARRAYSIZE = stReplyApplier_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReplyApplier_ProtoModID_descriptor();
inline const ::std::string& stReplyApplier_ProtoModID_Name(stReplyApplier_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReplyApplier_ProtoModID_descriptor(), value);
}
inline bool stReplyApplier_ProtoModID_Parse(
    const ::std::string& name, stReplyApplier_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReplyApplier_ProtoModID>(
    stReplyApplier_ProtoModID_descriptor(), name, value);
}
enum stReplyApplier_ProtoFunID {
  stReplyApplier_ProtoFunID_FunID = 12
};
bool stReplyApplier_ProtoFunID_IsValid(int value);
const stReplyApplier_ProtoFunID stReplyApplier_ProtoFunID_ProtoFunID_MIN = stReplyApplier_ProtoFunID_FunID;
const stReplyApplier_ProtoFunID stReplyApplier_ProtoFunID_ProtoFunID_MAX = stReplyApplier_ProtoFunID_FunID;
const int stReplyApplier_ProtoFunID_ProtoFunID_ARRAYSIZE = stReplyApplier_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReplyApplier_ProtoFunID_descriptor();
inline const ::std::string& stReplyApplier_ProtoFunID_Name(stReplyApplier_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReplyApplier_ProtoFunID_descriptor(), value);
}
inline bool stReplyApplier_ProtoFunID_Parse(
    const ::std::string& name, stReplyApplier_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReplyApplier_ProtoFunID>(
    stReplyApplier_ProtoFunID_descriptor(), name, value);
}
enum stReplyApplerError_ProtoModID {
  stReplyApplerError_ProtoModID_ModID = 7
};
bool stReplyApplerError_ProtoModID_IsValid(int value);
const stReplyApplerError_ProtoModID stReplyApplerError_ProtoModID_ProtoModID_MIN = stReplyApplerError_ProtoModID_ModID;
const stReplyApplerError_ProtoModID stReplyApplerError_ProtoModID_ProtoModID_MAX = stReplyApplerError_ProtoModID_ModID;
const int stReplyApplerError_ProtoModID_ProtoModID_ARRAYSIZE = stReplyApplerError_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReplyApplerError_ProtoModID_descriptor();
inline const ::std::string& stReplyApplerError_ProtoModID_Name(stReplyApplerError_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReplyApplerError_ProtoModID_descriptor(), value);
}
inline bool stReplyApplerError_ProtoModID_Parse(
    const ::std::string& name, stReplyApplerError_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReplyApplerError_ProtoModID>(
    stReplyApplerError_ProtoModID_descriptor(), name, value);
}
enum stReplyApplerError_ProtoFunID {
  stReplyApplerError_ProtoFunID_FunID = 13
};
bool stReplyApplerError_ProtoFunID_IsValid(int value);
const stReplyApplerError_ProtoFunID stReplyApplerError_ProtoFunID_ProtoFunID_MIN = stReplyApplerError_ProtoFunID_FunID;
const stReplyApplerError_ProtoFunID stReplyApplerError_ProtoFunID_ProtoFunID_MAX = stReplyApplerError_ProtoFunID_FunID;
const int stReplyApplerError_ProtoFunID_ProtoFunID_ARRAYSIZE = stReplyApplerError_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReplyApplerError_ProtoFunID_descriptor();
inline const ::std::string& stReplyApplerError_ProtoFunID_Name(stReplyApplerError_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReplyApplerError_ProtoFunID_descriptor(), value);
}
inline bool stReplyApplerError_ProtoFunID_Parse(
    const ::std::string& name, stReplyApplerError_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReplyApplerError_ProtoFunID>(
    stReplyApplerError_ProtoFunID_descriptor(), name, value);
}
enum stJoinInGuildTip_ProtoModID {
  stJoinInGuildTip_ProtoModID_ModID = 7
};
bool stJoinInGuildTip_ProtoModID_IsValid(int value);
const stJoinInGuildTip_ProtoModID stJoinInGuildTip_ProtoModID_ProtoModID_MIN = stJoinInGuildTip_ProtoModID_ModID;
const stJoinInGuildTip_ProtoModID stJoinInGuildTip_ProtoModID_ProtoModID_MAX = stJoinInGuildTip_ProtoModID_ModID;
const int stJoinInGuildTip_ProtoModID_ProtoModID_ARRAYSIZE = stJoinInGuildTip_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stJoinInGuildTip_ProtoModID_descriptor();
inline const ::std::string& stJoinInGuildTip_ProtoModID_Name(stJoinInGuildTip_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stJoinInGuildTip_ProtoModID_descriptor(), value);
}
inline bool stJoinInGuildTip_ProtoModID_Parse(
    const ::std::string& name, stJoinInGuildTip_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stJoinInGuildTip_ProtoModID>(
    stJoinInGuildTip_ProtoModID_descriptor(), name, value);
}
enum stJoinInGuildTip_ProtoFunID {
  stJoinInGuildTip_ProtoFunID_FunID = 14
};
bool stJoinInGuildTip_ProtoFunID_IsValid(int value);
const stJoinInGuildTip_ProtoFunID stJoinInGuildTip_ProtoFunID_ProtoFunID_MIN = stJoinInGuildTip_ProtoFunID_FunID;
const stJoinInGuildTip_ProtoFunID stJoinInGuildTip_ProtoFunID_ProtoFunID_MAX = stJoinInGuildTip_ProtoFunID_FunID;
const int stJoinInGuildTip_ProtoFunID_ProtoFunID_ARRAYSIZE = stJoinInGuildTip_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stJoinInGuildTip_ProtoFunID_descriptor();
inline const ::std::string& stJoinInGuildTip_ProtoFunID_Name(stJoinInGuildTip_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stJoinInGuildTip_ProtoFunID_descriptor(), value);
}
inline bool stJoinInGuildTip_ProtoFunID_Parse(
    const ::std::string& name, stJoinInGuildTip_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stJoinInGuildTip_ProtoFunID>(
    stJoinInGuildTip_ProtoFunID_descriptor(), name, value);
}
enum stMemJoinInGuild_ProtoModID {
  stMemJoinInGuild_ProtoModID_ModID = 7
};
bool stMemJoinInGuild_ProtoModID_IsValid(int value);
const stMemJoinInGuild_ProtoModID stMemJoinInGuild_ProtoModID_ProtoModID_MIN = stMemJoinInGuild_ProtoModID_ModID;
const stMemJoinInGuild_ProtoModID stMemJoinInGuild_ProtoModID_ProtoModID_MAX = stMemJoinInGuild_ProtoModID_ModID;
const int stMemJoinInGuild_ProtoModID_ProtoModID_ARRAYSIZE = stMemJoinInGuild_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stMemJoinInGuild_ProtoModID_descriptor();
inline const ::std::string& stMemJoinInGuild_ProtoModID_Name(stMemJoinInGuild_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stMemJoinInGuild_ProtoModID_descriptor(), value);
}
inline bool stMemJoinInGuild_ProtoModID_Parse(
    const ::std::string& name, stMemJoinInGuild_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stMemJoinInGuild_ProtoModID>(
    stMemJoinInGuild_ProtoModID_descriptor(), name, value);
}
enum stMemJoinInGuild_ProtoFunID {
  stMemJoinInGuild_ProtoFunID_FunID = 15
};
bool stMemJoinInGuild_ProtoFunID_IsValid(int value);
const stMemJoinInGuild_ProtoFunID stMemJoinInGuild_ProtoFunID_ProtoFunID_MIN = stMemJoinInGuild_ProtoFunID_FunID;
const stMemJoinInGuild_ProtoFunID stMemJoinInGuild_ProtoFunID_ProtoFunID_MAX = stMemJoinInGuild_ProtoFunID_FunID;
const int stMemJoinInGuild_ProtoFunID_ProtoFunID_ARRAYSIZE = stMemJoinInGuild_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stMemJoinInGuild_ProtoFunID_descriptor();
inline const ::std::string& stMemJoinInGuild_ProtoFunID_Name(stMemJoinInGuild_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stMemJoinInGuild_ProtoFunID_descriptor(), value);
}
inline bool stMemJoinInGuild_ProtoFunID_Parse(
    const ::std::string& name, stMemJoinInGuild_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stMemJoinInGuild_ProtoFunID>(
    stMemJoinInGuild_ProtoFunID_descriptor(), name, value);
}
enum stReqLeaveGuild_ProtoModID {
  stReqLeaveGuild_ProtoModID_ModID = 7
};
bool stReqLeaveGuild_ProtoModID_IsValid(int value);
const stReqLeaveGuild_ProtoModID stReqLeaveGuild_ProtoModID_ProtoModID_MIN = stReqLeaveGuild_ProtoModID_ModID;
const stReqLeaveGuild_ProtoModID stReqLeaveGuild_ProtoModID_ProtoModID_MAX = stReqLeaveGuild_ProtoModID_ModID;
const int stReqLeaveGuild_ProtoModID_ProtoModID_ARRAYSIZE = stReqLeaveGuild_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqLeaveGuild_ProtoModID_descriptor();
inline const ::std::string& stReqLeaveGuild_ProtoModID_Name(stReqLeaveGuild_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqLeaveGuild_ProtoModID_descriptor(), value);
}
inline bool stReqLeaveGuild_ProtoModID_Parse(
    const ::std::string& name, stReqLeaveGuild_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqLeaveGuild_ProtoModID>(
    stReqLeaveGuild_ProtoModID_descriptor(), name, value);
}
enum stReqLeaveGuild_ProtoFunID {
  stReqLeaveGuild_ProtoFunID_FunID = 16
};
bool stReqLeaveGuild_ProtoFunID_IsValid(int value);
const stReqLeaveGuild_ProtoFunID stReqLeaveGuild_ProtoFunID_ProtoFunID_MIN = stReqLeaveGuild_ProtoFunID_FunID;
const stReqLeaveGuild_ProtoFunID stReqLeaveGuild_ProtoFunID_ProtoFunID_MAX = stReqLeaveGuild_ProtoFunID_FunID;
const int stReqLeaveGuild_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqLeaveGuild_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqLeaveGuild_ProtoFunID_descriptor();
inline const ::std::string& stReqLeaveGuild_ProtoFunID_Name(stReqLeaveGuild_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqLeaveGuild_ProtoFunID_descriptor(), value);
}
inline bool stReqLeaveGuild_ProtoFunID_Parse(
    const ::std::string& name, stReqLeaveGuild_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqLeaveGuild_ProtoFunID>(
    stReqLeaveGuild_ProtoFunID_descriptor(), name, value);
}
enum stMemLeaveGuild_ProtoModID {
  stMemLeaveGuild_ProtoModID_ModID = 7
};
bool stMemLeaveGuild_ProtoModID_IsValid(int value);
const stMemLeaveGuild_ProtoModID stMemLeaveGuild_ProtoModID_ProtoModID_MIN = stMemLeaveGuild_ProtoModID_ModID;
const stMemLeaveGuild_ProtoModID stMemLeaveGuild_ProtoModID_ProtoModID_MAX = stMemLeaveGuild_ProtoModID_ModID;
const int stMemLeaveGuild_ProtoModID_ProtoModID_ARRAYSIZE = stMemLeaveGuild_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stMemLeaveGuild_ProtoModID_descriptor();
inline const ::std::string& stMemLeaveGuild_ProtoModID_Name(stMemLeaveGuild_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stMemLeaveGuild_ProtoModID_descriptor(), value);
}
inline bool stMemLeaveGuild_ProtoModID_Parse(
    const ::std::string& name, stMemLeaveGuild_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stMemLeaveGuild_ProtoModID>(
    stMemLeaveGuild_ProtoModID_descriptor(), name, value);
}
enum stMemLeaveGuild_ProtoFunID {
  stMemLeaveGuild_ProtoFunID_FunID = 17
};
bool stMemLeaveGuild_ProtoFunID_IsValid(int value);
const stMemLeaveGuild_ProtoFunID stMemLeaveGuild_ProtoFunID_ProtoFunID_MIN = stMemLeaveGuild_ProtoFunID_FunID;
const stMemLeaveGuild_ProtoFunID stMemLeaveGuild_ProtoFunID_ProtoFunID_MAX = stMemLeaveGuild_ProtoFunID_FunID;
const int stMemLeaveGuild_ProtoFunID_ProtoFunID_ARRAYSIZE = stMemLeaveGuild_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stMemLeaveGuild_ProtoFunID_descriptor();
inline const ::std::string& stMemLeaveGuild_ProtoFunID_Name(stMemLeaveGuild_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stMemLeaveGuild_ProtoFunID_descriptor(), value);
}
inline bool stMemLeaveGuild_ProtoFunID_Parse(
    const ::std::string& name, stMemLeaveGuild_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stMemLeaveGuild_ProtoFunID>(
    stMemLeaveGuild_ProtoFunID_descriptor(), name, value);
}
enum stAssignGuildTitle_ProtoModID {
  stAssignGuildTitle_ProtoModID_ModID = 7
};
bool stAssignGuildTitle_ProtoModID_IsValid(int value);
const stAssignGuildTitle_ProtoModID stAssignGuildTitle_ProtoModID_ProtoModID_MIN = stAssignGuildTitle_ProtoModID_ModID;
const stAssignGuildTitle_ProtoModID stAssignGuildTitle_ProtoModID_ProtoModID_MAX = stAssignGuildTitle_ProtoModID_ModID;
const int stAssignGuildTitle_ProtoModID_ProtoModID_ARRAYSIZE = stAssignGuildTitle_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stAssignGuildTitle_ProtoModID_descriptor();
inline const ::std::string& stAssignGuildTitle_ProtoModID_Name(stAssignGuildTitle_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stAssignGuildTitle_ProtoModID_descriptor(), value);
}
inline bool stAssignGuildTitle_ProtoModID_Parse(
    const ::std::string& name, stAssignGuildTitle_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stAssignGuildTitle_ProtoModID>(
    stAssignGuildTitle_ProtoModID_descriptor(), name, value);
}
enum stAssignGuildTitle_ProtoFunID {
  stAssignGuildTitle_ProtoFunID_FunID = 18
};
bool stAssignGuildTitle_ProtoFunID_IsValid(int value);
const stAssignGuildTitle_ProtoFunID stAssignGuildTitle_ProtoFunID_ProtoFunID_MIN = stAssignGuildTitle_ProtoFunID_FunID;
const stAssignGuildTitle_ProtoFunID stAssignGuildTitle_ProtoFunID_ProtoFunID_MAX = stAssignGuildTitle_ProtoFunID_FunID;
const int stAssignGuildTitle_ProtoFunID_ProtoFunID_ARRAYSIZE = stAssignGuildTitle_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stAssignGuildTitle_ProtoFunID_descriptor();
inline const ::std::string& stAssignGuildTitle_ProtoFunID_Name(stAssignGuildTitle_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stAssignGuildTitle_ProtoFunID_descriptor(), value);
}
inline bool stAssignGuildTitle_ProtoFunID_Parse(
    const ::std::string& name, stAssignGuildTitle_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stAssignGuildTitle_ProtoFunID>(
    stAssignGuildTitle_ProtoFunID_descriptor(), name, value);
}
enum stAssignTitleError_ProtoModID {
  stAssignTitleError_ProtoModID_ModID = 7
};
bool stAssignTitleError_ProtoModID_IsValid(int value);
const stAssignTitleError_ProtoModID stAssignTitleError_ProtoModID_ProtoModID_MIN = stAssignTitleError_ProtoModID_ModID;
const stAssignTitleError_ProtoModID stAssignTitleError_ProtoModID_ProtoModID_MAX = stAssignTitleError_ProtoModID_ModID;
const int stAssignTitleError_ProtoModID_ProtoModID_ARRAYSIZE = stAssignTitleError_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stAssignTitleError_ProtoModID_descriptor();
inline const ::std::string& stAssignTitleError_ProtoModID_Name(stAssignTitleError_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stAssignTitleError_ProtoModID_descriptor(), value);
}
inline bool stAssignTitleError_ProtoModID_Parse(
    const ::std::string& name, stAssignTitleError_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stAssignTitleError_ProtoModID>(
    stAssignTitleError_ProtoModID_descriptor(), name, value);
}
enum stAssignTitleError_ProtoFunID {
  stAssignTitleError_ProtoFunID_FunID = 19
};
bool stAssignTitleError_ProtoFunID_IsValid(int value);
const stAssignTitleError_ProtoFunID stAssignTitleError_ProtoFunID_ProtoFunID_MIN = stAssignTitleError_ProtoFunID_FunID;
const stAssignTitleError_ProtoFunID stAssignTitleError_ProtoFunID_ProtoFunID_MAX = stAssignTitleError_ProtoFunID_FunID;
const int stAssignTitleError_ProtoFunID_ProtoFunID_ARRAYSIZE = stAssignTitleError_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stAssignTitleError_ProtoFunID_descriptor();
inline const ::std::string& stAssignTitleError_ProtoFunID_Name(stAssignTitleError_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stAssignTitleError_ProtoFunID_descriptor(), value);
}
inline bool stAssignTitleError_ProtoFunID_Parse(
    const ::std::string& name, stAssignTitleError_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stAssignTitleError_ProtoFunID>(
    stAssignTitleError_ProtoFunID_descriptor(), name, value);
}
enum stCancelTitle_ProtoModID {
  stCancelTitle_ProtoModID_ModID = 7
};
bool stCancelTitle_ProtoModID_IsValid(int value);
const stCancelTitle_ProtoModID stCancelTitle_ProtoModID_ProtoModID_MIN = stCancelTitle_ProtoModID_ModID;
const stCancelTitle_ProtoModID stCancelTitle_ProtoModID_ProtoModID_MAX = stCancelTitle_ProtoModID_ModID;
const int stCancelTitle_ProtoModID_ProtoModID_ARRAYSIZE = stCancelTitle_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stCancelTitle_ProtoModID_descriptor();
inline const ::std::string& stCancelTitle_ProtoModID_Name(stCancelTitle_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stCancelTitle_ProtoModID_descriptor(), value);
}
inline bool stCancelTitle_ProtoModID_Parse(
    const ::std::string& name, stCancelTitle_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stCancelTitle_ProtoModID>(
    stCancelTitle_ProtoModID_descriptor(), name, value);
}
enum stCancelTitle_ProtoFunID {
  stCancelTitle_ProtoFunID_FunID = 20
};
bool stCancelTitle_ProtoFunID_IsValid(int value);
const stCancelTitle_ProtoFunID stCancelTitle_ProtoFunID_ProtoFunID_MIN = stCancelTitle_ProtoFunID_FunID;
const stCancelTitle_ProtoFunID stCancelTitle_ProtoFunID_ProtoFunID_MAX = stCancelTitle_ProtoFunID_FunID;
const int stCancelTitle_ProtoFunID_ProtoFunID_ARRAYSIZE = stCancelTitle_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stCancelTitle_ProtoFunID_descriptor();
inline const ::std::string& stCancelTitle_ProtoFunID_Name(stCancelTitle_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stCancelTitle_ProtoFunID_descriptor(), value);
}
inline bool stCancelTitle_ProtoFunID_Parse(
    const ::std::string& name, stCancelTitle_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stCancelTitle_ProtoFunID>(
    stCancelTitle_ProtoFunID_descriptor(), name, value);
}
enum stCancelTitleError_ProtoModID {
  stCancelTitleError_ProtoModID_ModID = 7
};
bool stCancelTitleError_ProtoModID_IsValid(int value);
const stCancelTitleError_ProtoModID stCancelTitleError_ProtoModID_ProtoModID_MIN = stCancelTitleError_ProtoModID_ModID;
const stCancelTitleError_ProtoModID stCancelTitleError_ProtoModID_ProtoModID_MAX = stCancelTitleError_ProtoModID_ModID;
const int stCancelTitleError_ProtoModID_ProtoModID_ARRAYSIZE = stCancelTitleError_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stCancelTitleError_ProtoModID_descriptor();
inline const ::std::string& stCancelTitleError_ProtoModID_Name(stCancelTitleError_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stCancelTitleError_ProtoModID_descriptor(), value);
}
inline bool stCancelTitleError_ProtoModID_Parse(
    const ::std::string& name, stCancelTitleError_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stCancelTitleError_ProtoModID>(
    stCancelTitleError_ProtoModID_descriptor(), name, value);
}
enum stCancelTitleError_ProtoFunID {
  stCancelTitleError_ProtoFunID_FunID = 21
};
bool stCancelTitleError_ProtoFunID_IsValid(int value);
const stCancelTitleError_ProtoFunID stCancelTitleError_ProtoFunID_ProtoFunID_MIN = stCancelTitleError_ProtoFunID_FunID;
const stCancelTitleError_ProtoFunID stCancelTitleError_ProtoFunID_ProtoFunID_MAX = stCancelTitleError_ProtoFunID_FunID;
const int stCancelTitleError_ProtoFunID_ProtoFunID_ARRAYSIZE = stCancelTitleError_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stCancelTitleError_ProtoFunID_descriptor();
inline const ::std::string& stCancelTitleError_ProtoFunID_Name(stCancelTitleError_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stCancelTitleError_ProtoFunID_descriptor(), value);
}
inline bool stCancelTitleError_ProtoFunID_Parse(
    const ::std::string& name, stCancelTitleError_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stCancelTitleError_ProtoFunID>(
    stCancelTitleError_ProtoFunID_descriptor(), name, value);
}
enum stGiveLeader2Other_ProtoModID {
  stGiveLeader2Other_ProtoModID_ModID = 7
};
bool stGiveLeader2Other_ProtoModID_IsValid(int value);
const stGiveLeader2Other_ProtoModID stGiveLeader2Other_ProtoModID_ProtoModID_MIN = stGiveLeader2Other_ProtoModID_ModID;
const stGiveLeader2Other_ProtoModID stGiveLeader2Other_ProtoModID_ProtoModID_MAX = stGiveLeader2Other_ProtoModID_ModID;
const int stGiveLeader2Other_ProtoModID_ProtoModID_ARRAYSIZE = stGiveLeader2Other_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stGiveLeader2Other_ProtoModID_descriptor();
inline const ::std::string& stGiveLeader2Other_ProtoModID_Name(stGiveLeader2Other_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stGiveLeader2Other_ProtoModID_descriptor(), value);
}
inline bool stGiveLeader2Other_ProtoModID_Parse(
    const ::std::string& name, stGiveLeader2Other_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stGiveLeader2Other_ProtoModID>(
    stGiveLeader2Other_ProtoModID_descriptor(), name, value);
}
enum stGiveLeader2Other_ProtoFunID {
  stGiveLeader2Other_ProtoFunID_FunID = 22
};
bool stGiveLeader2Other_ProtoFunID_IsValid(int value);
const stGiveLeader2Other_ProtoFunID stGiveLeader2Other_ProtoFunID_ProtoFunID_MIN = stGiveLeader2Other_ProtoFunID_FunID;
const stGiveLeader2Other_ProtoFunID stGiveLeader2Other_ProtoFunID_ProtoFunID_MAX = stGiveLeader2Other_ProtoFunID_FunID;
const int stGiveLeader2Other_ProtoFunID_ProtoFunID_ARRAYSIZE = stGiveLeader2Other_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stGiveLeader2Other_ProtoFunID_descriptor();
inline const ::std::string& stGiveLeader2Other_ProtoFunID_Name(stGiveLeader2Other_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stGiveLeader2Other_ProtoFunID_descriptor(), value);
}
inline bool stGiveLeader2Other_ProtoFunID_Parse(
    const ::std::string& name, stGiveLeader2Other_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stGiveLeader2Other_ProtoFunID>(
    stGiveLeader2Other_ProtoFunID_descriptor(), name, value);
}
enum stGiveLeaderError_ProtoModID {
  stGiveLeaderError_ProtoModID_ModID = 7
};
bool stGiveLeaderError_ProtoModID_IsValid(int value);
const stGiveLeaderError_ProtoModID stGiveLeaderError_ProtoModID_ProtoModID_MIN = stGiveLeaderError_ProtoModID_ModID;
const stGiveLeaderError_ProtoModID stGiveLeaderError_ProtoModID_ProtoModID_MAX = stGiveLeaderError_ProtoModID_ModID;
const int stGiveLeaderError_ProtoModID_ProtoModID_ARRAYSIZE = stGiveLeaderError_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stGiveLeaderError_ProtoModID_descriptor();
inline const ::std::string& stGiveLeaderError_ProtoModID_Name(stGiveLeaderError_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stGiveLeaderError_ProtoModID_descriptor(), value);
}
inline bool stGiveLeaderError_ProtoModID_Parse(
    const ::std::string& name, stGiveLeaderError_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stGiveLeaderError_ProtoModID>(
    stGiveLeaderError_ProtoModID_descriptor(), name, value);
}
enum stGiveLeaderError_ProtoFunID {
  stGiveLeaderError_ProtoFunID_FunID = 23
};
bool stGiveLeaderError_ProtoFunID_IsValid(int value);
const stGiveLeaderError_ProtoFunID stGiveLeaderError_ProtoFunID_ProtoFunID_MIN = stGiveLeaderError_ProtoFunID_FunID;
const stGiveLeaderError_ProtoFunID stGiveLeaderError_ProtoFunID_ProtoFunID_MAX = stGiveLeaderError_ProtoFunID_FunID;
const int stGiveLeaderError_ProtoFunID_ProtoFunID_ARRAYSIZE = stGiveLeaderError_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stGiveLeaderError_ProtoFunID_descriptor();
inline const ::std::string& stGiveLeaderError_ProtoFunID_Name(stGiveLeaderError_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stGiveLeaderError_ProtoFunID_descriptor(), value);
}
inline bool stGiveLeaderError_ProtoFunID_Parse(
    const ::std::string& name, stGiveLeaderError_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stGiveLeaderError_ProtoFunID>(
    stGiveLeaderError_ProtoFunID_descriptor(), name, value);
}
enum stFireGuild_ProtoModID {
  stFireGuild_ProtoModID_ModID = 7
};
bool stFireGuild_ProtoModID_IsValid(int value);
const stFireGuild_ProtoModID stFireGuild_ProtoModID_ProtoModID_MIN = stFireGuild_ProtoModID_ModID;
const stFireGuild_ProtoModID stFireGuild_ProtoModID_ProtoModID_MAX = stFireGuild_ProtoModID_ModID;
const int stFireGuild_ProtoModID_ProtoModID_ARRAYSIZE = stFireGuild_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stFireGuild_ProtoModID_descriptor();
inline const ::std::string& stFireGuild_ProtoModID_Name(stFireGuild_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stFireGuild_ProtoModID_descriptor(), value);
}
inline bool stFireGuild_ProtoModID_Parse(
    const ::std::string& name, stFireGuild_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stFireGuild_ProtoModID>(
    stFireGuild_ProtoModID_descriptor(), name, value);
}
enum stFireGuild_ProtoFunID {
  stFireGuild_ProtoFunID_FunID = 24
};
bool stFireGuild_ProtoFunID_IsValid(int value);
const stFireGuild_ProtoFunID stFireGuild_ProtoFunID_ProtoFunID_MIN = stFireGuild_ProtoFunID_FunID;
const stFireGuild_ProtoFunID stFireGuild_ProtoFunID_ProtoFunID_MAX = stFireGuild_ProtoFunID_FunID;
const int stFireGuild_ProtoFunID_ProtoFunID_ARRAYSIZE = stFireGuild_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stFireGuild_ProtoFunID_descriptor();
inline const ::std::string& stFireGuild_ProtoFunID_Name(stFireGuild_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stFireGuild_ProtoFunID_descriptor(), value);
}
inline bool stFireGuild_ProtoFunID_Parse(
    const ::std::string& name, stFireGuild_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stFireGuild_ProtoFunID>(
    stFireGuild_ProtoFunID_descriptor(), name, value);
}
enum stFireGuildError_ProtoModID {
  stFireGuildError_ProtoModID_ModID = 7
};
bool stFireGuildError_ProtoModID_IsValid(int value);
const stFireGuildError_ProtoModID stFireGuildError_ProtoModID_ProtoModID_MIN = stFireGuildError_ProtoModID_ModID;
const stFireGuildError_ProtoModID stFireGuildError_ProtoModID_ProtoModID_MAX = stFireGuildError_ProtoModID_ModID;
const int stFireGuildError_ProtoModID_ProtoModID_ARRAYSIZE = stFireGuildError_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stFireGuildError_ProtoModID_descriptor();
inline const ::std::string& stFireGuildError_ProtoModID_Name(stFireGuildError_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stFireGuildError_ProtoModID_descriptor(), value);
}
inline bool stFireGuildError_ProtoModID_Parse(
    const ::std::string& name, stFireGuildError_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stFireGuildError_ProtoModID>(
    stFireGuildError_ProtoModID_descriptor(), name, value);
}
enum stFireGuildError_ProtoFunID {
  stFireGuildError_ProtoFunID_FunID = 25
};
bool stFireGuildError_ProtoFunID_IsValid(int value);
const stFireGuildError_ProtoFunID stFireGuildError_ProtoFunID_ProtoFunID_MIN = stFireGuildError_ProtoFunID_FunID;
const stFireGuildError_ProtoFunID stFireGuildError_ProtoFunID_ProtoFunID_MAX = stFireGuildError_ProtoFunID_FunID;
const int stFireGuildError_ProtoFunID_ProtoFunID_ARRAYSIZE = stFireGuildError_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stFireGuildError_ProtoFunID_descriptor();
inline const ::std::string& stFireGuildError_ProtoFunID_Name(stFireGuildError_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stFireGuildError_ProtoFunID_descriptor(), value);
}
inline bool stFireGuildError_ProtoFunID_Parse(
    const ::std::string& name, stFireGuildError_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stFireGuildError_ProtoFunID>(
    stFireGuildError_ProtoFunID_descriptor(), name, value);
}
enum stGuildMemOnOffLine_ProtoModID {
  stGuildMemOnOffLine_ProtoModID_ModID = 7
};
bool stGuildMemOnOffLine_ProtoModID_IsValid(int value);
const stGuildMemOnOffLine_ProtoModID stGuildMemOnOffLine_ProtoModID_ProtoModID_MIN = stGuildMemOnOffLine_ProtoModID_ModID;
const stGuildMemOnOffLine_ProtoModID stGuildMemOnOffLine_ProtoModID_ProtoModID_MAX = stGuildMemOnOffLine_ProtoModID_ModID;
const int stGuildMemOnOffLine_ProtoModID_ProtoModID_ARRAYSIZE = stGuildMemOnOffLine_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stGuildMemOnOffLine_ProtoModID_descriptor();
inline const ::std::string& stGuildMemOnOffLine_ProtoModID_Name(stGuildMemOnOffLine_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stGuildMemOnOffLine_ProtoModID_descriptor(), value);
}
inline bool stGuildMemOnOffLine_ProtoModID_Parse(
    const ::std::string& name, stGuildMemOnOffLine_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stGuildMemOnOffLine_ProtoModID>(
    stGuildMemOnOffLine_ProtoModID_descriptor(), name, value);
}
enum stGuildMemOnOffLine_ProtoFunID {
  stGuildMemOnOffLine_ProtoFunID_FunID = 26
};
bool stGuildMemOnOffLine_ProtoFunID_IsValid(int value);
const stGuildMemOnOffLine_ProtoFunID stGuildMemOnOffLine_ProtoFunID_ProtoFunID_MIN = stGuildMemOnOffLine_ProtoFunID_FunID;
const stGuildMemOnOffLine_ProtoFunID stGuildMemOnOffLine_ProtoFunID_ProtoFunID_MAX = stGuildMemOnOffLine_ProtoFunID_FunID;
const int stGuildMemOnOffLine_ProtoFunID_ProtoFunID_ARRAYSIZE = stGuildMemOnOffLine_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stGuildMemOnOffLine_ProtoFunID_descriptor();
inline const ::std::string& stGuildMemOnOffLine_ProtoFunID_Name(stGuildMemOnOffLine_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stGuildMemOnOffLine_ProtoFunID_descriptor(), value);
}
inline bool stGuildMemOnOffLine_ProtoFunID_Parse(
    const ::std::string& name, stGuildMemOnOffLine_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stGuildMemOnOffLine_ProtoFunID>(
    stGuildMemOnOffLine_ProtoFunID_descriptor(), name, value);
}
enum stKillOutGroupMember_ProtoModID {
  stKillOutGroupMember_ProtoModID_ModID = 7
};
bool stKillOutGroupMember_ProtoModID_IsValid(int value);
const stKillOutGroupMember_ProtoModID stKillOutGroupMember_ProtoModID_ProtoModID_MIN = stKillOutGroupMember_ProtoModID_ModID;
const stKillOutGroupMember_ProtoModID stKillOutGroupMember_ProtoModID_ProtoModID_MAX = stKillOutGroupMember_ProtoModID_ModID;
const int stKillOutGroupMember_ProtoModID_ProtoModID_ARRAYSIZE = stKillOutGroupMember_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stKillOutGroupMember_ProtoModID_descriptor();
inline const ::std::string& stKillOutGroupMember_ProtoModID_Name(stKillOutGroupMember_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stKillOutGroupMember_ProtoModID_descriptor(), value);
}
inline bool stKillOutGroupMember_ProtoModID_Parse(
    const ::std::string& name, stKillOutGroupMember_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stKillOutGroupMember_ProtoModID>(
    stKillOutGroupMember_ProtoModID_descriptor(), name, value);
}
enum stKillOutGroupMember_ProtoFunID {
  stKillOutGroupMember_ProtoFunID_FunID = 27
};
bool stKillOutGroupMember_ProtoFunID_IsValid(int value);
const stKillOutGroupMember_ProtoFunID stKillOutGroupMember_ProtoFunID_ProtoFunID_MIN = stKillOutGroupMember_ProtoFunID_FunID;
const stKillOutGroupMember_ProtoFunID stKillOutGroupMember_ProtoFunID_ProtoFunID_MAX = stKillOutGroupMember_ProtoFunID_FunID;
const int stKillOutGroupMember_ProtoFunID_ProtoFunID_ARRAYSIZE = stKillOutGroupMember_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stKillOutGroupMember_ProtoFunID_descriptor();
inline const ::std::string& stKillOutGroupMember_ProtoFunID_Name(stKillOutGroupMember_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stKillOutGroupMember_ProtoFunID_descriptor(), value);
}
inline bool stKillOutGroupMember_ProtoFunID_Parse(
    const ::std::string& name, stKillOutGroupMember_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stKillOutGroupMember_ProtoFunID>(
    stKillOutGroupMember_ProtoFunID_descriptor(), name, value);
}
enum stKillOutTip_ProtoModID {
  stKillOutTip_ProtoModID_ModID = 7
};
bool stKillOutTip_ProtoModID_IsValid(int value);
const stKillOutTip_ProtoModID stKillOutTip_ProtoModID_ProtoModID_MIN = stKillOutTip_ProtoModID_ModID;
const stKillOutTip_ProtoModID stKillOutTip_ProtoModID_ProtoModID_MAX = stKillOutTip_ProtoModID_ModID;
const int stKillOutTip_ProtoModID_ProtoModID_ARRAYSIZE = stKillOutTip_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stKillOutTip_ProtoModID_descriptor();
inline const ::std::string& stKillOutTip_ProtoModID_Name(stKillOutTip_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stKillOutTip_ProtoModID_descriptor(), value);
}
inline bool stKillOutTip_ProtoModID_Parse(
    const ::std::string& name, stKillOutTip_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stKillOutTip_ProtoModID>(
    stKillOutTip_ProtoModID_descriptor(), name, value);
}
enum stKillOutTip_ProtoFunID {
  stKillOutTip_ProtoFunID_FunID = 28
};
bool stKillOutTip_ProtoFunID_IsValid(int value);
const stKillOutTip_ProtoFunID stKillOutTip_ProtoFunID_ProtoFunID_MIN = stKillOutTip_ProtoFunID_FunID;
const stKillOutTip_ProtoFunID stKillOutTip_ProtoFunID_ProtoFunID_MAX = stKillOutTip_ProtoFunID_FunID;
const int stKillOutTip_ProtoFunID_ProtoFunID_ARRAYSIZE = stKillOutTip_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stKillOutTip_ProtoFunID_descriptor();
inline const ::std::string& stKillOutTip_ProtoFunID_Name(stKillOutTip_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stKillOutTip_ProtoFunID_descriptor(), value);
}
inline bool stKillOutTip_ProtoFunID_Parse(
    const ::std::string& name, stKillOutTip_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stKillOutTip_ProtoFunID>(
    stKillOutTip_ProtoFunID_descriptor(), name, value);
}
enum stKillOutGroupMemberError_ProtoModID {
  stKillOutGroupMemberError_ProtoModID_ModID = 7
};
bool stKillOutGroupMemberError_ProtoModID_IsValid(int value);
const stKillOutGroupMemberError_ProtoModID stKillOutGroupMemberError_ProtoModID_ProtoModID_MIN = stKillOutGroupMemberError_ProtoModID_ModID;
const stKillOutGroupMemberError_ProtoModID stKillOutGroupMemberError_ProtoModID_ProtoModID_MAX = stKillOutGroupMemberError_ProtoModID_ModID;
const int stKillOutGroupMemberError_ProtoModID_ProtoModID_ARRAYSIZE = stKillOutGroupMemberError_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stKillOutGroupMemberError_ProtoModID_descriptor();
inline const ::std::string& stKillOutGroupMemberError_ProtoModID_Name(stKillOutGroupMemberError_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stKillOutGroupMemberError_ProtoModID_descriptor(), value);
}
inline bool stKillOutGroupMemberError_ProtoModID_Parse(
    const ::std::string& name, stKillOutGroupMemberError_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stKillOutGroupMemberError_ProtoModID>(
    stKillOutGroupMemberError_ProtoModID_descriptor(), name, value);
}
enum stKillOutGroupMemberError_ProtoFunID {
  stKillOutGroupMemberError_ProtoFunID_FunID = 29
};
bool stKillOutGroupMemberError_ProtoFunID_IsValid(int value);
const stKillOutGroupMemberError_ProtoFunID stKillOutGroupMemberError_ProtoFunID_ProtoFunID_MIN = stKillOutGroupMemberError_ProtoFunID_FunID;
const stKillOutGroupMemberError_ProtoFunID stKillOutGroupMemberError_ProtoFunID_ProtoFunID_MAX = stKillOutGroupMemberError_ProtoFunID_FunID;
const int stKillOutGroupMemberError_ProtoFunID_ProtoFunID_ARRAYSIZE = stKillOutGroupMemberError_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stKillOutGroupMemberError_ProtoFunID_descriptor();
inline const ::std::string& stKillOutGroupMemberError_ProtoFunID_Name(stKillOutGroupMemberError_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stKillOutGroupMemberError_ProtoFunID_descriptor(), value);
}
inline bool stKillOutGroupMemberError_ProtoFunID_Parse(
    const ::std::string& name, stKillOutGroupMemberError_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stKillOutGroupMemberError_ProtoFunID>(
    stKillOutGroupMemberError_ProtoFunID_descriptor(), name, value);
}
enum stRetGuildMemInfo_ProtoModID {
  stRetGuildMemInfo_ProtoModID_ModID = 7
};
bool stRetGuildMemInfo_ProtoModID_IsValid(int value);
const stRetGuildMemInfo_ProtoModID stRetGuildMemInfo_ProtoModID_ProtoModID_MIN = stRetGuildMemInfo_ProtoModID_ModID;
const stRetGuildMemInfo_ProtoModID stRetGuildMemInfo_ProtoModID_ProtoModID_MAX = stRetGuildMemInfo_ProtoModID_ModID;
const int stRetGuildMemInfo_ProtoModID_ProtoModID_ARRAYSIZE = stRetGuildMemInfo_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetGuildMemInfo_ProtoModID_descriptor();
inline const ::std::string& stRetGuildMemInfo_ProtoModID_Name(stRetGuildMemInfo_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetGuildMemInfo_ProtoModID_descriptor(), value);
}
inline bool stRetGuildMemInfo_ProtoModID_Parse(
    const ::std::string& name, stRetGuildMemInfo_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetGuildMemInfo_ProtoModID>(
    stRetGuildMemInfo_ProtoModID_descriptor(), name, value);
}
enum stRetGuildMemInfo_ProtoFunID {
  stRetGuildMemInfo_ProtoFunID_FunID = 30
};
bool stRetGuildMemInfo_ProtoFunID_IsValid(int value);
const stRetGuildMemInfo_ProtoFunID stRetGuildMemInfo_ProtoFunID_ProtoFunID_MIN = stRetGuildMemInfo_ProtoFunID_FunID;
const stRetGuildMemInfo_ProtoFunID stRetGuildMemInfo_ProtoFunID_ProtoFunID_MAX = stRetGuildMemInfo_ProtoFunID_FunID;
const int stRetGuildMemInfo_ProtoFunID_ProtoFunID_ARRAYSIZE = stRetGuildMemInfo_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetGuildMemInfo_ProtoFunID_descriptor();
inline const ::std::string& stRetGuildMemInfo_ProtoFunID_Name(stRetGuildMemInfo_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetGuildMemInfo_ProtoFunID_descriptor(), value);
}
inline bool stRetGuildMemInfo_ProtoFunID_Parse(
    const ::std::string& name, stRetGuildMemInfo_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetGuildMemInfo_ProtoFunID>(
    stRetGuildMemInfo_ProtoFunID_descriptor(), name, value);
}
enum stSynGuildContribute_ProtoModID {
  stSynGuildContribute_ProtoModID_ModID = 7
};
bool stSynGuildContribute_ProtoModID_IsValid(int value);
const stSynGuildContribute_ProtoModID stSynGuildContribute_ProtoModID_ProtoModID_MIN = stSynGuildContribute_ProtoModID_ModID;
const stSynGuildContribute_ProtoModID stSynGuildContribute_ProtoModID_ProtoModID_MAX = stSynGuildContribute_ProtoModID_ModID;
const int stSynGuildContribute_ProtoModID_ProtoModID_ARRAYSIZE = stSynGuildContribute_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynGuildContribute_ProtoModID_descriptor();
inline const ::std::string& stSynGuildContribute_ProtoModID_Name(stSynGuildContribute_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynGuildContribute_ProtoModID_descriptor(), value);
}
inline bool stSynGuildContribute_ProtoModID_Parse(
    const ::std::string& name, stSynGuildContribute_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynGuildContribute_ProtoModID>(
    stSynGuildContribute_ProtoModID_descriptor(), name, value);
}
enum stSynGuildContribute_ProtoFunID {
  stSynGuildContribute_ProtoFunID_FunID = 31
};
bool stSynGuildContribute_ProtoFunID_IsValid(int value);
const stSynGuildContribute_ProtoFunID stSynGuildContribute_ProtoFunID_ProtoFunID_MIN = stSynGuildContribute_ProtoFunID_FunID;
const stSynGuildContribute_ProtoFunID stSynGuildContribute_ProtoFunID_ProtoFunID_MAX = stSynGuildContribute_ProtoFunID_FunID;
const int stSynGuildContribute_ProtoFunID_ProtoFunID_ARRAYSIZE = stSynGuildContribute_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynGuildContribute_ProtoFunID_descriptor();
inline const ::std::string& stSynGuildContribute_ProtoFunID_Name(stSynGuildContribute_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynGuildContribute_ProtoFunID_descriptor(), value);
}
inline bool stSynGuildContribute_ProtoFunID_Parse(
    const ::std::string& name, stSynGuildContribute_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynGuildContribute_ProtoFunID>(
    stSynGuildContribute_ProtoFunID_descriptor(), name, value);
}
enum stChgGuildSign_ProtoModID {
  stChgGuildSign_ProtoModID_ModID = 7
};
bool stChgGuildSign_ProtoModID_IsValid(int value);
const stChgGuildSign_ProtoModID stChgGuildSign_ProtoModID_ProtoModID_MIN = stChgGuildSign_ProtoModID_ModID;
const stChgGuildSign_ProtoModID stChgGuildSign_ProtoModID_ProtoModID_MAX = stChgGuildSign_ProtoModID_ModID;
const int stChgGuildSign_ProtoModID_ProtoModID_ARRAYSIZE = stChgGuildSign_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stChgGuildSign_ProtoModID_descriptor();
inline const ::std::string& stChgGuildSign_ProtoModID_Name(stChgGuildSign_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stChgGuildSign_ProtoModID_descriptor(), value);
}
inline bool stChgGuildSign_ProtoModID_Parse(
    const ::std::string& name, stChgGuildSign_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stChgGuildSign_ProtoModID>(
    stChgGuildSign_ProtoModID_descriptor(), name, value);
}
enum stChgGuildSign_ProtoFunID {
  stChgGuildSign_ProtoFunID_FunID = 32
};
bool stChgGuildSign_ProtoFunID_IsValid(int value);
const stChgGuildSign_ProtoFunID stChgGuildSign_ProtoFunID_ProtoFunID_MIN = stChgGuildSign_ProtoFunID_FunID;
const stChgGuildSign_ProtoFunID stChgGuildSign_ProtoFunID_ProtoFunID_MAX = stChgGuildSign_ProtoFunID_FunID;
const int stChgGuildSign_ProtoFunID_ProtoFunID_ARRAYSIZE = stChgGuildSign_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stChgGuildSign_ProtoFunID_descriptor();
inline const ::std::string& stChgGuildSign_ProtoFunID_Name(stChgGuildSign_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stChgGuildSign_ProtoFunID_descriptor(), value);
}
inline bool stChgGuildSign_ProtoFunID_Parse(
    const ::std::string& name, stChgGuildSign_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stChgGuildSign_ProtoFunID>(
    stChgGuildSign_ProtoFunID_descriptor(), name, value);
}
enum stNotifyFireRemainTime_ProtoModID {
  stNotifyFireRemainTime_ProtoModID_ModID = 7
};
bool stNotifyFireRemainTime_ProtoModID_IsValid(int value);
const stNotifyFireRemainTime_ProtoModID stNotifyFireRemainTime_ProtoModID_ProtoModID_MIN = stNotifyFireRemainTime_ProtoModID_ModID;
const stNotifyFireRemainTime_ProtoModID stNotifyFireRemainTime_ProtoModID_ProtoModID_MAX = stNotifyFireRemainTime_ProtoModID_ModID;
const int stNotifyFireRemainTime_ProtoModID_ProtoModID_ARRAYSIZE = stNotifyFireRemainTime_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyFireRemainTime_ProtoModID_descriptor();
inline const ::std::string& stNotifyFireRemainTime_ProtoModID_Name(stNotifyFireRemainTime_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyFireRemainTime_ProtoModID_descriptor(), value);
}
inline bool stNotifyFireRemainTime_ProtoModID_Parse(
    const ::std::string& name, stNotifyFireRemainTime_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyFireRemainTime_ProtoModID>(
    stNotifyFireRemainTime_ProtoModID_descriptor(), name, value);
}
enum stNotifyFireRemainTime_ProtoFunID {
  stNotifyFireRemainTime_ProtoFunID_FunID = 33
};
bool stNotifyFireRemainTime_ProtoFunID_IsValid(int value);
const stNotifyFireRemainTime_ProtoFunID stNotifyFireRemainTime_ProtoFunID_ProtoFunID_MIN = stNotifyFireRemainTime_ProtoFunID_FunID;
const stNotifyFireRemainTime_ProtoFunID stNotifyFireRemainTime_ProtoFunID_ProtoFunID_MAX = stNotifyFireRemainTime_ProtoFunID_FunID;
const int stNotifyFireRemainTime_ProtoFunID_ProtoFunID_ARRAYSIZE = stNotifyFireRemainTime_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyFireRemainTime_ProtoFunID_descriptor();
inline const ::std::string& stNotifyFireRemainTime_ProtoFunID_Name(stNotifyFireRemainTime_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyFireRemainTime_ProtoFunID_descriptor(), value);
}
inline bool stNotifyFireRemainTime_ProtoFunID_Parse(
    const ::std::string& name, stNotifyFireRemainTime_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyFireRemainTime_ProtoFunID>(
    stNotifyFireRemainTime_ProtoFunID_descriptor(), name, value);
}
enum stReqGuildMemInfo_ProtoModID {
  stReqGuildMemInfo_ProtoModID_ModID = 7
};
bool stReqGuildMemInfo_ProtoModID_IsValid(int value);
const stReqGuildMemInfo_ProtoModID stReqGuildMemInfo_ProtoModID_ProtoModID_MIN = stReqGuildMemInfo_ProtoModID_ModID;
const stReqGuildMemInfo_ProtoModID stReqGuildMemInfo_ProtoModID_ProtoModID_MAX = stReqGuildMemInfo_ProtoModID_ModID;
const int stReqGuildMemInfo_ProtoModID_ProtoModID_ARRAYSIZE = stReqGuildMemInfo_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqGuildMemInfo_ProtoModID_descriptor();
inline const ::std::string& stReqGuildMemInfo_ProtoModID_Name(stReqGuildMemInfo_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqGuildMemInfo_ProtoModID_descriptor(), value);
}
inline bool stReqGuildMemInfo_ProtoModID_Parse(
    const ::std::string& name, stReqGuildMemInfo_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqGuildMemInfo_ProtoModID>(
    stReqGuildMemInfo_ProtoModID_descriptor(), name, value);
}
enum stReqGuildMemInfo_ProtoFunID {
  stReqGuildMemInfo_ProtoFunID_FunID = 34
};
bool stReqGuildMemInfo_ProtoFunID_IsValid(int value);
const stReqGuildMemInfo_ProtoFunID stReqGuildMemInfo_ProtoFunID_ProtoFunID_MIN = stReqGuildMemInfo_ProtoFunID_FunID;
const stReqGuildMemInfo_ProtoFunID stReqGuildMemInfo_ProtoFunID_ProtoFunID_MAX = stReqGuildMemInfo_ProtoFunID_FunID;
const int stReqGuildMemInfo_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqGuildMemInfo_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqGuildMemInfo_ProtoFunID_descriptor();
inline const ::std::string& stReqGuildMemInfo_ProtoFunID_Name(stReqGuildMemInfo_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqGuildMemInfo_ProtoFunID_descriptor(), value);
}
inline bool stReqGuildMemInfo_ProtoFunID_Parse(
    const ::std::string& name, stReqGuildMemInfo_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqGuildMemInfo_ProtoFunID>(
    stReqGuildMemInfo_ProtoFunID_descriptor(), name, value);
}
enum stCancelFireGuild_ProtoModID {
  stCancelFireGuild_ProtoModID_ModID = 7
};
bool stCancelFireGuild_ProtoModID_IsValid(int value);
const stCancelFireGuild_ProtoModID stCancelFireGuild_ProtoModID_ProtoModID_MIN = stCancelFireGuild_ProtoModID_ModID;
const stCancelFireGuild_ProtoModID stCancelFireGuild_ProtoModID_ProtoModID_MAX = stCancelFireGuild_ProtoModID_ModID;
const int stCancelFireGuild_ProtoModID_ProtoModID_ARRAYSIZE = stCancelFireGuild_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stCancelFireGuild_ProtoModID_descriptor();
inline const ::std::string& stCancelFireGuild_ProtoModID_Name(stCancelFireGuild_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stCancelFireGuild_ProtoModID_descriptor(), value);
}
inline bool stCancelFireGuild_ProtoModID_Parse(
    const ::std::string& name, stCancelFireGuild_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stCancelFireGuild_ProtoModID>(
    stCancelFireGuild_ProtoModID_descriptor(), name, value);
}
enum stCancelFireGuild_ProtoFunID {
  stCancelFireGuild_ProtoFunID_FunID = 35
};
bool stCancelFireGuild_ProtoFunID_IsValid(int value);
const stCancelFireGuild_ProtoFunID stCancelFireGuild_ProtoFunID_ProtoFunID_MIN = stCancelFireGuild_ProtoFunID_FunID;
const stCancelFireGuild_ProtoFunID stCancelFireGuild_ProtoFunID_ProtoFunID_MAX = stCancelFireGuild_ProtoFunID_FunID;
const int stCancelFireGuild_ProtoFunID_ProtoFunID_ARRAYSIZE = stCancelFireGuild_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stCancelFireGuild_ProtoFunID_descriptor();
inline const ::std::string& stCancelFireGuild_ProtoFunID_Name(stCancelFireGuild_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stCancelFireGuild_ProtoFunID_descriptor(), value);
}
inline bool stCancelFireGuild_ProtoFunID_Parse(
    const ::std::string& name, stCancelFireGuild_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stCancelFireGuild_ProtoFunID>(
    stCancelFireGuild_ProtoFunID_descriptor(), name, value);
}
enum stCancelFireGuildResult_eResult {
  stCancelFireGuildResult_eResult_eSUCCESS = 1,
  stCancelFireGuildResult_eResult_eHAS_NOT_POWER = 2
};
bool stCancelFireGuildResult_eResult_IsValid(int value);
const stCancelFireGuildResult_eResult stCancelFireGuildResult_eResult_eResult_MIN = stCancelFireGuildResult_eResult_eSUCCESS;
const stCancelFireGuildResult_eResult stCancelFireGuildResult_eResult_eResult_MAX = stCancelFireGuildResult_eResult_eHAS_NOT_POWER;
const int stCancelFireGuildResult_eResult_eResult_ARRAYSIZE = stCancelFireGuildResult_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stCancelFireGuildResult_eResult_descriptor();
inline const ::std::string& stCancelFireGuildResult_eResult_Name(stCancelFireGuildResult_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stCancelFireGuildResult_eResult_descriptor(), value);
}
inline bool stCancelFireGuildResult_eResult_Parse(
    const ::std::string& name, stCancelFireGuildResult_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stCancelFireGuildResult_eResult>(
    stCancelFireGuildResult_eResult_descriptor(), name, value);
}
enum stCancelFireGuildResult_ProtoModID {
  stCancelFireGuildResult_ProtoModID_ModID = 7
};
bool stCancelFireGuildResult_ProtoModID_IsValid(int value);
const stCancelFireGuildResult_ProtoModID stCancelFireGuildResult_ProtoModID_ProtoModID_MIN = stCancelFireGuildResult_ProtoModID_ModID;
const stCancelFireGuildResult_ProtoModID stCancelFireGuildResult_ProtoModID_ProtoModID_MAX = stCancelFireGuildResult_ProtoModID_ModID;
const int stCancelFireGuildResult_ProtoModID_ProtoModID_ARRAYSIZE = stCancelFireGuildResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stCancelFireGuildResult_ProtoModID_descriptor();
inline const ::std::string& stCancelFireGuildResult_ProtoModID_Name(stCancelFireGuildResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stCancelFireGuildResult_ProtoModID_descriptor(), value);
}
inline bool stCancelFireGuildResult_ProtoModID_Parse(
    const ::std::string& name, stCancelFireGuildResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stCancelFireGuildResult_ProtoModID>(
    stCancelFireGuildResult_ProtoModID_descriptor(), name, value);
}
enum stCancelFireGuildResult_ProtoFunID {
  stCancelFireGuildResult_ProtoFunID_FunID = 36
};
bool stCancelFireGuildResult_ProtoFunID_IsValid(int value);
const stCancelFireGuildResult_ProtoFunID stCancelFireGuildResult_ProtoFunID_ProtoFunID_MIN = stCancelFireGuildResult_ProtoFunID_FunID;
const stCancelFireGuildResult_ProtoFunID stCancelFireGuildResult_ProtoFunID_ProtoFunID_MAX = stCancelFireGuildResult_ProtoFunID_FunID;
const int stCancelFireGuildResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stCancelFireGuildResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stCancelFireGuildResult_ProtoFunID_descriptor();
inline const ::std::string& stCancelFireGuildResult_ProtoFunID_Name(stCancelFireGuildResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stCancelFireGuildResult_ProtoFunID_descriptor(), value);
}
inline bool stCancelFireGuildResult_ProtoFunID_Parse(
    const ::std::string& name, stCancelFireGuildResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stCancelFireGuildResult_ProtoFunID>(
    stCancelFireGuildResult_ProtoFunID_descriptor(), name, value);
}
enum stCancelJoinInGuild_ProtoModID {
  stCancelJoinInGuild_ProtoModID_ModID = 7
};
bool stCancelJoinInGuild_ProtoModID_IsValid(int value);
const stCancelJoinInGuild_ProtoModID stCancelJoinInGuild_ProtoModID_ProtoModID_MIN = stCancelJoinInGuild_ProtoModID_ModID;
const stCancelJoinInGuild_ProtoModID stCancelJoinInGuild_ProtoModID_ProtoModID_MAX = stCancelJoinInGuild_ProtoModID_ModID;
const int stCancelJoinInGuild_ProtoModID_ProtoModID_ARRAYSIZE = stCancelJoinInGuild_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stCancelJoinInGuild_ProtoModID_descriptor();
inline const ::std::string& stCancelJoinInGuild_ProtoModID_Name(stCancelJoinInGuild_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stCancelJoinInGuild_ProtoModID_descriptor(), value);
}
inline bool stCancelJoinInGuild_ProtoModID_Parse(
    const ::std::string& name, stCancelJoinInGuild_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stCancelJoinInGuild_ProtoModID>(
    stCancelJoinInGuild_ProtoModID_descriptor(), name, value);
}
enum stCancelJoinInGuild_ProtoFunID {
  stCancelJoinInGuild_ProtoFunID_FunID = 37
};
bool stCancelJoinInGuild_ProtoFunID_IsValid(int value);
const stCancelJoinInGuild_ProtoFunID stCancelJoinInGuild_ProtoFunID_ProtoFunID_MIN = stCancelJoinInGuild_ProtoFunID_FunID;
const stCancelJoinInGuild_ProtoFunID stCancelJoinInGuild_ProtoFunID_ProtoFunID_MAX = stCancelJoinInGuild_ProtoFunID_FunID;
const int stCancelJoinInGuild_ProtoFunID_ProtoFunID_ARRAYSIZE = stCancelJoinInGuild_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stCancelJoinInGuild_ProtoFunID_descriptor();
inline const ::std::string& stCancelJoinInGuild_ProtoFunID_Name(stCancelJoinInGuild_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stCancelJoinInGuild_ProtoFunID_descriptor(), value);
}
inline bool stCancelJoinInGuild_ProtoFunID_Parse(
    const ::std::string& name, stCancelJoinInGuild_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stCancelJoinInGuild_ProtoFunID>(
    stCancelJoinInGuild_ProtoFunID_descriptor(), name, value);
}
enum stCancelJoinInGuildResult_eResult {
  stCancelJoinInGuildResult_eResult_eSUCCESS = 1,
  stCancelJoinInGuildResult_eResult_eFAIL = 2
};
bool stCancelJoinInGuildResult_eResult_IsValid(int value);
const stCancelJoinInGuildResult_eResult stCancelJoinInGuildResult_eResult_eResult_MIN = stCancelJoinInGuildResult_eResult_eSUCCESS;
const stCancelJoinInGuildResult_eResult stCancelJoinInGuildResult_eResult_eResult_MAX = stCancelJoinInGuildResult_eResult_eFAIL;
const int stCancelJoinInGuildResult_eResult_eResult_ARRAYSIZE = stCancelJoinInGuildResult_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stCancelJoinInGuildResult_eResult_descriptor();
inline const ::std::string& stCancelJoinInGuildResult_eResult_Name(stCancelJoinInGuildResult_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stCancelJoinInGuildResult_eResult_descriptor(), value);
}
inline bool stCancelJoinInGuildResult_eResult_Parse(
    const ::std::string& name, stCancelJoinInGuildResult_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stCancelJoinInGuildResult_eResult>(
    stCancelJoinInGuildResult_eResult_descriptor(), name, value);
}
enum stCancelJoinInGuildResult_ProtoModID {
  stCancelJoinInGuildResult_ProtoModID_ModID = 7
};
bool stCancelJoinInGuildResult_ProtoModID_IsValid(int value);
const stCancelJoinInGuildResult_ProtoModID stCancelJoinInGuildResult_ProtoModID_ProtoModID_MIN = stCancelJoinInGuildResult_ProtoModID_ModID;
const stCancelJoinInGuildResult_ProtoModID stCancelJoinInGuildResult_ProtoModID_ProtoModID_MAX = stCancelJoinInGuildResult_ProtoModID_ModID;
const int stCancelJoinInGuildResult_ProtoModID_ProtoModID_ARRAYSIZE = stCancelJoinInGuildResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stCancelJoinInGuildResult_ProtoModID_descriptor();
inline const ::std::string& stCancelJoinInGuildResult_ProtoModID_Name(stCancelJoinInGuildResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stCancelJoinInGuildResult_ProtoModID_descriptor(), value);
}
inline bool stCancelJoinInGuildResult_ProtoModID_Parse(
    const ::std::string& name, stCancelJoinInGuildResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stCancelJoinInGuildResult_ProtoModID>(
    stCancelJoinInGuildResult_ProtoModID_descriptor(), name, value);
}
enum stCancelJoinInGuildResult_ProtoFunID {
  stCancelJoinInGuildResult_ProtoFunID_FunID = 38
};
bool stCancelJoinInGuildResult_ProtoFunID_IsValid(int value);
const stCancelJoinInGuildResult_ProtoFunID stCancelJoinInGuildResult_ProtoFunID_ProtoFunID_MIN = stCancelJoinInGuildResult_ProtoFunID_FunID;
const stCancelJoinInGuildResult_ProtoFunID stCancelJoinInGuildResult_ProtoFunID_ProtoFunID_MAX = stCancelJoinInGuildResult_ProtoFunID_FunID;
const int stCancelJoinInGuildResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stCancelJoinInGuildResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stCancelJoinInGuildResult_ProtoFunID_descriptor();
inline const ::std::string& stCancelJoinInGuildResult_ProtoFunID_Name(stCancelJoinInGuildResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stCancelJoinInGuildResult_ProtoFunID_descriptor(), value);
}
inline bool stCancelJoinInGuildResult_ProtoFunID_Parse(
    const ::std::string& name, stCancelJoinInGuildResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stCancelJoinInGuildResult_ProtoFunID>(
    stCancelJoinInGuildResult_ProtoFunID_descriptor(), name, value);
}
enum stReqDonate_eType {
  stReqDonate_eType_eType1 = 1,
  stReqDonate_eType_eType2 = 2,
  stReqDonate_eType_eType3 = 3
};
bool stReqDonate_eType_IsValid(int value);
const stReqDonate_eType stReqDonate_eType_eType_MIN = stReqDonate_eType_eType1;
const stReqDonate_eType stReqDonate_eType_eType_MAX = stReqDonate_eType_eType3;
const int stReqDonate_eType_eType_ARRAYSIZE = stReqDonate_eType_eType_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqDonate_eType_descriptor();
inline const ::std::string& stReqDonate_eType_Name(stReqDonate_eType value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqDonate_eType_descriptor(), value);
}
inline bool stReqDonate_eType_Parse(
    const ::std::string& name, stReqDonate_eType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqDonate_eType>(
    stReqDonate_eType_descriptor(), name, value);
}
enum stReqDonate_ProtoModID {
  stReqDonate_ProtoModID_ModID = 7
};
bool stReqDonate_ProtoModID_IsValid(int value);
const stReqDonate_ProtoModID stReqDonate_ProtoModID_ProtoModID_MIN = stReqDonate_ProtoModID_ModID;
const stReqDonate_ProtoModID stReqDonate_ProtoModID_ProtoModID_MAX = stReqDonate_ProtoModID_ModID;
const int stReqDonate_ProtoModID_ProtoModID_ARRAYSIZE = stReqDonate_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqDonate_ProtoModID_descriptor();
inline const ::std::string& stReqDonate_ProtoModID_Name(stReqDonate_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqDonate_ProtoModID_descriptor(), value);
}
inline bool stReqDonate_ProtoModID_Parse(
    const ::std::string& name, stReqDonate_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqDonate_ProtoModID>(
    stReqDonate_ProtoModID_descriptor(), name, value);
}
enum stReqDonate_ProtoFunID {
  stReqDonate_ProtoFunID_FunID = 39
};
bool stReqDonate_ProtoFunID_IsValid(int value);
const stReqDonate_ProtoFunID stReqDonate_ProtoFunID_ProtoFunID_MIN = stReqDonate_ProtoFunID_FunID;
const stReqDonate_ProtoFunID stReqDonate_ProtoFunID_ProtoFunID_MAX = stReqDonate_ProtoFunID_FunID;
const int stReqDonate_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqDonate_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqDonate_ProtoFunID_descriptor();
inline const ::std::string& stReqDonate_ProtoFunID_Name(stReqDonate_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqDonate_ProtoFunID_descriptor(), value);
}
inline bool stReqDonate_ProtoFunID_Parse(
    const ::std::string& name, stReqDonate_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqDonate_ProtoFunID>(
    stReqDonate_ProtoFunID_descriptor(), name, value);
}
enum stDonateResult_eResult {
  stDonateResult_eResult_eSUCCESS = 1,
  stDonateResult_eResult_eMONEY_NOT_ENOUGH = 2,
  stDonateResult_eResult_eINNER_ERROR = 3,
  stDonateResult_eResult_eHAS_NO_GUILD = 4,
  stDonateResult_eResult_eHAS_DONATE = 5,
  stDonateResult_eResult_eHAS_NO_VIPRIGHT = 6
};
bool stDonateResult_eResult_IsValid(int value);
const stDonateResult_eResult stDonateResult_eResult_eResult_MIN = stDonateResult_eResult_eSUCCESS;
const stDonateResult_eResult stDonateResult_eResult_eResult_MAX = stDonateResult_eResult_eHAS_NO_VIPRIGHT;
const int stDonateResult_eResult_eResult_ARRAYSIZE = stDonateResult_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stDonateResult_eResult_descriptor();
inline const ::std::string& stDonateResult_eResult_Name(stDonateResult_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stDonateResult_eResult_descriptor(), value);
}
inline bool stDonateResult_eResult_Parse(
    const ::std::string& name, stDonateResult_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stDonateResult_eResult>(
    stDonateResult_eResult_descriptor(), name, value);
}
enum stDonateResult_ProtoModID {
  stDonateResult_ProtoModID_ModID = 7
};
bool stDonateResult_ProtoModID_IsValid(int value);
const stDonateResult_ProtoModID stDonateResult_ProtoModID_ProtoModID_MIN = stDonateResult_ProtoModID_ModID;
const stDonateResult_ProtoModID stDonateResult_ProtoModID_ProtoModID_MAX = stDonateResult_ProtoModID_ModID;
const int stDonateResult_ProtoModID_ProtoModID_ARRAYSIZE = stDonateResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stDonateResult_ProtoModID_descriptor();
inline const ::std::string& stDonateResult_ProtoModID_Name(stDonateResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stDonateResult_ProtoModID_descriptor(), value);
}
inline bool stDonateResult_ProtoModID_Parse(
    const ::std::string& name, stDonateResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stDonateResult_ProtoModID>(
    stDonateResult_ProtoModID_descriptor(), name, value);
}
enum stDonateResult_ProtoFunID {
  stDonateResult_ProtoFunID_FunID = 40
};
bool stDonateResult_ProtoFunID_IsValid(int value);
const stDonateResult_ProtoFunID stDonateResult_ProtoFunID_ProtoFunID_MIN = stDonateResult_ProtoFunID_FunID;
const stDonateResult_ProtoFunID stDonateResult_ProtoFunID_ProtoFunID_MAX = stDonateResult_ProtoFunID_FunID;
const int stDonateResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stDonateResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stDonateResult_ProtoFunID_descriptor();
inline const ::std::string& stDonateResult_ProtoFunID_Name(stDonateResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stDonateResult_ProtoFunID_descriptor(), value);
}
inline bool stDonateResult_ProtoFunID_Parse(
    const ::std::string& name, stDonateResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stDonateResult_ProtoFunID>(
    stDonateResult_ProtoFunID_descriptor(), name, value);
}
enum stReqLevelUpHallLv_ProtoModID {
  stReqLevelUpHallLv_ProtoModID_ModID = 7
};
bool stReqLevelUpHallLv_ProtoModID_IsValid(int value);
const stReqLevelUpHallLv_ProtoModID stReqLevelUpHallLv_ProtoModID_ProtoModID_MIN = stReqLevelUpHallLv_ProtoModID_ModID;
const stReqLevelUpHallLv_ProtoModID stReqLevelUpHallLv_ProtoModID_ProtoModID_MAX = stReqLevelUpHallLv_ProtoModID_ModID;
const int stReqLevelUpHallLv_ProtoModID_ProtoModID_ARRAYSIZE = stReqLevelUpHallLv_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqLevelUpHallLv_ProtoModID_descriptor();
inline const ::std::string& stReqLevelUpHallLv_ProtoModID_Name(stReqLevelUpHallLv_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqLevelUpHallLv_ProtoModID_descriptor(), value);
}
inline bool stReqLevelUpHallLv_ProtoModID_Parse(
    const ::std::string& name, stReqLevelUpHallLv_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqLevelUpHallLv_ProtoModID>(
    stReqLevelUpHallLv_ProtoModID_descriptor(), name, value);
}
enum stReqLevelUpHallLv_ProtoFunID {
  stReqLevelUpHallLv_ProtoFunID_FunID = 41
};
bool stReqLevelUpHallLv_ProtoFunID_IsValid(int value);
const stReqLevelUpHallLv_ProtoFunID stReqLevelUpHallLv_ProtoFunID_ProtoFunID_MIN = stReqLevelUpHallLv_ProtoFunID_FunID;
const stReqLevelUpHallLv_ProtoFunID stReqLevelUpHallLv_ProtoFunID_ProtoFunID_MAX = stReqLevelUpHallLv_ProtoFunID_FunID;
const int stReqLevelUpHallLv_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqLevelUpHallLv_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqLevelUpHallLv_ProtoFunID_descriptor();
inline const ::std::string& stReqLevelUpHallLv_ProtoFunID_Name(stReqLevelUpHallLv_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqLevelUpHallLv_ProtoFunID_descriptor(), value);
}
inline bool stReqLevelUpHallLv_ProtoFunID_Parse(
    const ::std::string& name, stReqLevelUpHallLv_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqLevelUpHallLv_ProtoFunID>(
    stReqLevelUpHallLv_ProtoFunID_descriptor(), name, value);
}
enum stLevelUpHallLvResult_eResult {
  stLevelUpHallLvResult_eResult_eSUCCESS = 1,
  stLevelUpHallLvResult_eResult_eCONTRIBUTE_NOT_ENOGUH = 2,
  stLevelUpHallLvResult_eResult_eHAS_NOT_RIGHT = 3,
  stLevelUpHallLvResult_eResult_eINNER_ERROR = 4
};
bool stLevelUpHallLvResult_eResult_IsValid(int value);
const stLevelUpHallLvResult_eResult stLevelUpHallLvResult_eResult_eResult_MIN = stLevelUpHallLvResult_eResult_eSUCCESS;
const stLevelUpHallLvResult_eResult stLevelUpHallLvResult_eResult_eResult_MAX = stLevelUpHallLvResult_eResult_eINNER_ERROR;
const int stLevelUpHallLvResult_eResult_eResult_ARRAYSIZE = stLevelUpHallLvResult_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stLevelUpHallLvResult_eResult_descriptor();
inline const ::std::string& stLevelUpHallLvResult_eResult_Name(stLevelUpHallLvResult_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stLevelUpHallLvResult_eResult_descriptor(), value);
}
inline bool stLevelUpHallLvResult_eResult_Parse(
    const ::std::string& name, stLevelUpHallLvResult_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stLevelUpHallLvResult_eResult>(
    stLevelUpHallLvResult_eResult_descriptor(), name, value);
}
enum stLevelUpHallLvResult_ProtoModID {
  stLevelUpHallLvResult_ProtoModID_ModID = 7
};
bool stLevelUpHallLvResult_ProtoModID_IsValid(int value);
const stLevelUpHallLvResult_ProtoModID stLevelUpHallLvResult_ProtoModID_ProtoModID_MIN = stLevelUpHallLvResult_ProtoModID_ModID;
const stLevelUpHallLvResult_ProtoModID stLevelUpHallLvResult_ProtoModID_ProtoModID_MAX = stLevelUpHallLvResult_ProtoModID_ModID;
const int stLevelUpHallLvResult_ProtoModID_ProtoModID_ARRAYSIZE = stLevelUpHallLvResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stLevelUpHallLvResult_ProtoModID_descriptor();
inline const ::std::string& stLevelUpHallLvResult_ProtoModID_Name(stLevelUpHallLvResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stLevelUpHallLvResult_ProtoModID_descriptor(), value);
}
inline bool stLevelUpHallLvResult_ProtoModID_Parse(
    const ::std::string& name, stLevelUpHallLvResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stLevelUpHallLvResult_ProtoModID>(
    stLevelUpHallLvResult_ProtoModID_descriptor(), name, value);
}
enum stLevelUpHallLvResult_ProtoFunID {
  stLevelUpHallLvResult_ProtoFunID_FunID = 42
};
bool stLevelUpHallLvResult_ProtoFunID_IsValid(int value);
const stLevelUpHallLvResult_ProtoFunID stLevelUpHallLvResult_ProtoFunID_ProtoFunID_MIN = stLevelUpHallLvResult_ProtoFunID_FunID;
const stLevelUpHallLvResult_ProtoFunID stLevelUpHallLvResult_ProtoFunID_ProtoFunID_MAX = stLevelUpHallLvResult_ProtoFunID_FunID;
const int stLevelUpHallLvResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stLevelUpHallLvResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stLevelUpHallLvResult_ProtoFunID_descriptor();
inline const ::std::string& stLevelUpHallLvResult_ProtoFunID_Name(stLevelUpHallLvResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stLevelUpHallLvResult_ProtoFunID_descriptor(), value);
}
inline bool stLevelUpHallLvResult_ProtoFunID_Parse(
    const ::std::string& name, stLevelUpHallLvResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stLevelUpHallLvResult_ProtoFunID>(
    stLevelUpHallLvResult_ProtoFunID_descriptor(), name, value);
}
enum stSynHallLv_ProtoModID {
  stSynHallLv_ProtoModID_ModID = 7
};
bool stSynHallLv_ProtoModID_IsValid(int value);
const stSynHallLv_ProtoModID stSynHallLv_ProtoModID_ProtoModID_MIN = stSynHallLv_ProtoModID_ModID;
const stSynHallLv_ProtoModID stSynHallLv_ProtoModID_ProtoModID_MAX = stSynHallLv_ProtoModID_ModID;
const int stSynHallLv_ProtoModID_ProtoModID_ARRAYSIZE = stSynHallLv_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynHallLv_ProtoModID_descriptor();
inline const ::std::string& stSynHallLv_ProtoModID_Name(stSynHallLv_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynHallLv_ProtoModID_descriptor(), value);
}
inline bool stSynHallLv_ProtoModID_Parse(
    const ::std::string& name, stSynHallLv_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynHallLv_ProtoModID>(
    stSynHallLv_ProtoModID_descriptor(), name, value);
}
enum stSynHallLv_ProtoFunID {
  stSynHallLv_ProtoFunID_FunID = 43
};
bool stSynHallLv_ProtoFunID_IsValid(int value);
const stSynHallLv_ProtoFunID stSynHallLv_ProtoFunID_ProtoFunID_MIN = stSynHallLv_ProtoFunID_FunID;
const stSynHallLv_ProtoFunID stSynHallLv_ProtoFunID_ProtoFunID_MAX = stSynHallLv_ProtoFunID_FunID;
const int stSynHallLv_ProtoFunID_ProtoFunID_ARRAYSIZE = stSynHallLv_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynHallLv_ProtoFunID_descriptor();
inline const ::std::string& stSynHallLv_ProtoFunID_Name(stSynHallLv_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynHallLv_ProtoFunID_descriptor(), value);
}
inline bool stSynHallLv_ProtoFunID_Parse(
    const ::std::string& name, stSynHallLv_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynHallLv_ProtoFunID>(
    stSynHallLv_ProtoFunID_descriptor(), name, value);
}
enum stReqPrayBuildingLv_ProtoModID {
  stReqPrayBuildingLv_ProtoModID_ModID = 7
};
bool stReqPrayBuildingLv_ProtoModID_IsValid(int value);
const stReqPrayBuildingLv_ProtoModID stReqPrayBuildingLv_ProtoModID_ProtoModID_MIN = stReqPrayBuildingLv_ProtoModID_ModID;
const stReqPrayBuildingLv_ProtoModID stReqPrayBuildingLv_ProtoModID_ProtoModID_MAX = stReqPrayBuildingLv_ProtoModID_ModID;
const int stReqPrayBuildingLv_ProtoModID_ProtoModID_ARRAYSIZE = stReqPrayBuildingLv_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqPrayBuildingLv_ProtoModID_descriptor();
inline const ::std::string& stReqPrayBuildingLv_ProtoModID_Name(stReqPrayBuildingLv_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqPrayBuildingLv_ProtoModID_descriptor(), value);
}
inline bool stReqPrayBuildingLv_ProtoModID_Parse(
    const ::std::string& name, stReqPrayBuildingLv_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqPrayBuildingLv_ProtoModID>(
    stReqPrayBuildingLv_ProtoModID_descriptor(), name, value);
}
enum stReqPrayBuildingLv_ProtoFunID {
  stReqPrayBuildingLv_ProtoFunID_FunID = 44
};
bool stReqPrayBuildingLv_ProtoFunID_IsValid(int value);
const stReqPrayBuildingLv_ProtoFunID stReqPrayBuildingLv_ProtoFunID_ProtoFunID_MIN = stReqPrayBuildingLv_ProtoFunID_FunID;
const stReqPrayBuildingLv_ProtoFunID stReqPrayBuildingLv_ProtoFunID_ProtoFunID_MAX = stReqPrayBuildingLv_ProtoFunID_FunID;
const int stReqPrayBuildingLv_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqPrayBuildingLv_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqPrayBuildingLv_ProtoFunID_descriptor();
inline const ::std::string& stReqPrayBuildingLv_ProtoFunID_Name(stReqPrayBuildingLv_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqPrayBuildingLv_ProtoFunID_descriptor(), value);
}
inline bool stReqPrayBuildingLv_ProtoFunID_Parse(
    const ::std::string& name, stReqPrayBuildingLv_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqPrayBuildingLv_ProtoFunID>(
    stReqPrayBuildingLv_ProtoFunID_descriptor(), name, value);
}
enum stPrayBuildingLvResult_eResult {
  stPrayBuildingLvResult_eResult_eSUCCESS = 1,
  stPrayBuildingLvResult_eResult_eCONTRIBUTE_NOT_ENOGUH = 2,
  stPrayBuildingLvResult_eResult_eHAS_NOT_RIGHT = 3,
  stPrayBuildingLvResult_eResult_eINNER_ERROR = 4,
  stPrayBuildingLvResult_eResult_eHALL_LV_TOO_LOW = 5
};
bool stPrayBuildingLvResult_eResult_IsValid(int value);
const stPrayBuildingLvResult_eResult stPrayBuildingLvResult_eResult_eResult_MIN = stPrayBuildingLvResult_eResult_eSUCCESS;
const stPrayBuildingLvResult_eResult stPrayBuildingLvResult_eResult_eResult_MAX = stPrayBuildingLvResult_eResult_eHALL_LV_TOO_LOW;
const int stPrayBuildingLvResult_eResult_eResult_ARRAYSIZE = stPrayBuildingLvResult_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stPrayBuildingLvResult_eResult_descriptor();
inline const ::std::string& stPrayBuildingLvResult_eResult_Name(stPrayBuildingLvResult_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stPrayBuildingLvResult_eResult_descriptor(), value);
}
inline bool stPrayBuildingLvResult_eResult_Parse(
    const ::std::string& name, stPrayBuildingLvResult_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stPrayBuildingLvResult_eResult>(
    stPrayBuildingLvResult_eResult_descriptor(), name, value);
}
enum stPrayBuildingLvResult_ProtoModID {
  stPrayBuildingLvResult_ProtoModID_ModID = 7
};
bool stPrayBuildingLvResult_ProtoModID_IsValid(int value);
const stPrayBuildingLvResult_ProtoModID stPrayBuildingLvResult_ProtoModID_ProtoModID_MIN = stPrayBuildingLvResult_ProtoModID_ModID;
const stPrayBuildingLvResult_ProtoModID stPrayBuildingLvResult_ProtoModID_ProtoModID_MAX = stPrayBuildingLvResult_ProtoModID_ModID;
const int stPrayBuildingLvResult_ProtoModID_ProtoModID_ARRAYSIZE = stPrayBuildingLvResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stPrayBuildingLvResult_ProtoModID_descriptor();
inline const ::std::string& stPrayBuildingLvResult_ProtoModID_Name(stPrayBuildingLvResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stPrayBuildingLvResult_ProtoModID_descriptor(), value);
}
inline bool stPrayBuildingLvResult_ProtoModID_Parse(
    const ::std::string& name, stPrayBuildingLvResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stPrayBuildingLvResult_ProtoModID>(
    stPrayBuildingLvResult_ProtoModID_descriptor(), name, value);
}
enum stPrayBuildingLvResult_ProtoFunID {
  stPrayBuildingLvResult_ProtoFunID_FunID = 45
};
bool stPrayBuildingLvResult_ProtoFunID_IsValid(int value);
const stPrayBuildingLvResult_ProtoFunID stPrayBuildingLvResult_ProtoFunID_ProtoFunID_MIN = stPrayBuildingLvResult_ProtoFunID_FunID;
const stPrayBuildingLvResult_ProtoFunID stPrayBuildingLvResult_ProtoFunID_ProtoFunID_MAX = stPrayBuildingLvResult_ProtoFunID_FunID;
const int stPrayBuildingLvResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stPrayBuildingLvResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stPrayBuildingLvResult_ProtoFunID_descriptor();
inline const ::std::string& stPrayBuildingLvResult_ProtoFunID_Name(stPrayBuildingLvResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stPrayBuildingLvResult_ProtoFunID_descriptor(), value);
}
inline bool stPrayBuildingLvResult_ProtoFunID_Parse(
    const ::std::string& name, stPrayBuildingLvResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stPrayBuildingLvResult_ProtoFunID>(
    stPrayBuildingLvResult_ProtoFunID_descriptor(), name, value);
}
enum stSynPrayBuildingLv_ProtoModID {
  stSynPrayBuildingLv_ProtoModID_ModID = 7
};
bool stSynPrayBuildingLv_ProtoModID_IsValid(int value);
const stSynPrayBuildingLv_ProtoModID stSynPrayBuildingLv_ProtoModID_ProtoModID_MIN = stSynPrayBuildingLv_ProtoModID_ModID;
const stSynPrayBuildingLv_ProtoModID stSynPrayBuildingLv_ProtoModID_ProtoModID_MAX = stSynPrayBuildingLv_ProtoModID_ModID;
const int stSynPrayBuildingLv_ProtoModID_ProtoModID_ARRAYSIZE = stSynPrayBuildingLv_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynPrayBuildingLv_ProtoModID_descriptor();
inline const ::std::string& stSynPrayBuildingLv_ProtoModID_Name(stSynPrayBuildingLv_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynPrayBuildingLv_ProtoModID_descriptor(), value);
}
inline bool stSynPrayBuildingLv_ProtoModID_Parse(
    const ::std::string& name, stSynPrayBuildingLv_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynPrayBuildingLv_ProtoModID>(
    stSynPrayBuildingLv_ProtoModID_descriptor(), name, value);
}
enum stSynPrayBuildingLv_ProtoFunID {
  stSynPrayBuildingLv_ProtoFunID_FunID = 46
};
bool stSynPrayBuildingLv_ProtoFunID_IsValid(int value);
const stSynPrayBuildingLv_ProtoFunID stSynPrayBuildingLv_ProtoFunID_ProtoFunID_MIN = stSynPrayBuildingLv_ProtoFunID_FunID;
const stSynPrayBuildingLv_ProtoFunID stSynPrayBuildingLv_ProtoFunID_ProtoFunID_MAX = stSynPrayBuildingLv_ProtoFunID_FunID;
const int stSynPrayBuildingLv_ProtoFunID_ProtoFunID_ARRAYSIZE = stSynPrayBuildingLv_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynPrayBuildingLv_ProtoFunID_descriptor();
inline const ::std::string& stSynPrayBuildingLv_ProtoFunID_Name(stSynPrayBuildingLv_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynPrayBuildingLv_ProtoFunID_descriptor(), value);
}
inline bool stSynPrayBuildingLv_ProtoFunID_Parse(
    const ::std::string& name, stSynPrayBuildingLv_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynPrayBuildingLv_ProtoFunID>(
    stSynPrayBuildingLv_ProtoFunID_descriptor(), name, value);
}
enum stReqPray_ProtoModID {
  stReqPray_ProtoModID_ModID = 7
};
bool stReqPray_ProtoModID_IsValid(int value);
const stReqPray_ProtoModID stReqPray_ProtoModID_ProtoModID_MIN = stReqPray_ProtoModID_ModID;
const stReqPray_ProtoModID stReqPray_ProtoModID_ProtoModID_MAX = stReqPray_ProtoModID_ModID;
const int stReqPray_ProtoModID_ProtoModID_ARRAYSIZE = stReqPray_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqPray_ProtoModID_descriptor();
inline const ::std::string& stReqPray_ProtoModID_Name(stReqPray_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqPray_ProtoModID_descriptor(), value);
}
inline bool stReqPray_ProtoModID_Parse(
    const ::std::string& name, stReqPray_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqPray_ProtoModID>(
    stReqPray_ProtoModID_descriptor(), name, value);
}
enum stReqPray_ProtoFunID {
  stReqPray_ProtoFunID_FunID = 47
};
bool stReqPray_ProtoFunID_IsValid(int value);
const stReqPray_ProtoFunID stReqPray_ProtoFunID_ProtoFunID_MIN = stReqPray_ProtoFunID_FunID;
const stReqPray_ProtoFunID stReqPray_ProtoFunID_ProtoFunID_MAX = stReqPray_ProtoFunID_FunID;
const int stReqPray_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqPray_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqPray_ProtoFunID_descriptor();
inline const ::std::string& stReqPray_ProtoFunID_Name(stReqPray_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqPray_ProtoFunID_descriptor(), value);
}
inline bool stReqPray_ProtoFunID_Parse(
    const ::std::string& name, stReqPray_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqPray_ProtoFunID>(
    stReqPray_ProtoFunID_descriptor(), name, value);
}
enum stPrayResult_eResult {
  stPrayResult_eResult_eSUCCESS = 1,
  stPrayResult_eResult_eHAS_PRAY = 2,
  stPrayResult_eResult_ePRAY_NUM_OUT = 3,
  stPrayResult_eResult_eCANNT_PRAY = 4
};
bool stPrayResult_eResult_IsValid(int value);
const stPrayResult_eResult stPrayResult_eResult_eResult_MIN = stPrayResult_eResult_eSUCCESS;
const stPrayResult_eResult stPrayResult_eResult_eResult_MAX = stPrayResult_eResult_eCANNT_PRAY;
const int stPrayResult_eResult_eResult_ARRAYSIZE = stPrayResult_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stPrayResult_eResult_descriptor();
inline const ::std::string& stPrayResult_eResult_Name(stPrayResult_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stPrayResult_eResult_descriptor(), value);
}
inline bool stPrayResult_eResult_Parse(
    const ::std::string& name, stPrayResult_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stPrayResult_eResult>(
    stPrayResult_eResult_descriptor(), name, value);
}
enum stPrayResult_ProtoModID {
  stPrayResult_ProtoModID_ModID = 7
};
bool stPrayResult_ProtoModID_IsValid(int value);
const stPrayResult_ProtoModID stPrayResult_ProtoModID_ProtoModID_MIN = stPrayResult_ProtoModID_ModID;
const stPrayResult_ProtoModID stPrayResult_ProtoModID_ProtoModID_MAX = stPrayResult_ProtoModID_ModID;
const int stPrayResult_ProtoModID_ProtoModID_ARRAYSIZE = stPrayResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stPrayResult_ProtoModID_descriptor();
inline const ::std::string& stPrayResult_ProtoModID_Name(stPrayResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stPrayResult_ProtoModID_descriptor(), value);
}
inline bool stPrayResult_ProtoModID_Parse(
    const ::std::string& name, stPrayResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stPrayResult_ProtoModID>(
    stPrayResult_ProtoModID_descriptor(), name, value);
}
enum stPrayResult_ProtoFunID {
  stPrayResult_ProtoFunID_FunID = 48
};
bool stPrayResult_ProtoFunID_IsValid(int value);
const stPrayResult_ProtoFunID stPrayResult_ProtoFunID_ProtoFunID_MIN = stPrayResult_ProtoFunID_FunID;
const stPrayResult_ProtoFunID stPrayResult_ProtoFunID_ProtoFunID_MAX = stPrayResult_ProtoFunID_FunID;
const int stPrayResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stPrayResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stPrayResult_ProtoFunID_descriptor();
inline const ::std::string& stPrayResult_ProtoFunID_Name(stPrayResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stPrayResult_ProtoFunID_descriptor(), value);
}
inline bool stPrayResult_ProtoFunID_Parse(
    const ::std::string& name, stPrayResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stPrayResult_ProtoFunID>(
    stPrayResult_ProtoFunID_descriptor(), name, value);
}
enum stReqLevelUpShopBuildingLv_ProtoModID {
  stReqLevelUpShopBuildingLv_ProtoModID_ModID = 7
};
bool stReqLevelUpShopBuildingLv_ProtoModID_IsValid(int value);
const stReqLevelUpShopBuildingLv_ProtoModID stReqLevelUpShopBuildingLv_ProtoModID_ProtoModID_MIN = stReqLevelUpShopBuildingLv_ProtoModID_ModID;
const stReqLevelUpShopBuildingLv_ProtoModID stReqLevelUpShopBuildingLv_ProtoModID_ProtoModID_MAX = stReqLevelUpShopBuildingLv_ProtoModID_ModID;
const int stReqLevelUpShopBuildingLv_ProtoModID_ProtoModID_ARRAYSIZE = stReqLevelUpShopBuildingLv_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqLevelUpShopBuildingLv_ProtoModID_descriptor();
inline const ::std::string& stReqLevelUpShopBuildingLv_ProtoModID_Name(stReqLevelUpShopBuildingLv_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqLevelUpShopBuildingLv_ProtoModID_descriptor(), value);
}
inline bool stReqLevelUpShopBuildingLv_ProtoModID_Parse(
    const ::std::string& name, stReqLevelUpShopBuildingLv_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqLevelUpShopBuildingLv_ProtoModID>(
    stReqLevelUpShopBuildingLv_ProtoModID_descriptor(), name, value);
}
enum stReqLevelUpShopBuildingLv_ProtoFunID {
  stReqLevelUpShopBuildingLv_ProtoFunID_FunID = 49
};
bool stReqLevelUpShopBuildingLv_ProtoFunID_IsValid(int value);
const stReqLevelUpShopBuildingLv_ProtoFunID stReqLevelUpShopBuildingLv_ProtoFunID_ProtoFunID_MIN = stReqLevelUpShopBuildingLv_ProtoFunID_FunID;
const stReqLevelUpShopBuildingLv_ProtoFunID stReqLevelUpShopBuildingLv_ProtoFunID_ProtoFunID_MAX = stReqLevelUpShopBuildingLv_ProtoFunID_FunID;
const int stReqLevelUpShopBuildingLv_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqLevelUpShopBuildingLv_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqLevelUpShopBuildingLv_ProtoFunID_descriptor();
inline const ::std::string& stReqLevelUpShopBuildingLv_ProtoFunID_Name(stReqLevelUpShopBuildingLv_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqLevelUpShopBuildingLv_ProtoFunID_descriptor(), value);
}
inline bool stReqLevelUpShopBuildingLv_ProtoFunID_Parse(
    const ::std::string& name, stReqLevelUpShopBuildingLv_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqLevelUpShopBuildingLv_ProtoFunID>(
    stReqLevelUpShopBuildingLv_ProtoFunID_descriptor(), name, value);
}
enum stLevelUpShopBuildingLvResult_eResult {
  stLevelUpShopBuildingLvResult_eResult_eSUCCESS = 1,
  stLevelUpShopBuildingLvResult_eResult_eHAS_NO_RIGHT = 2,
  stLevelUpShopBuildingLvResult_eResult_eCONTRIBUTE_NOT_ENOUGH = 3,
  stLevelUpShopBuildingLvResult_eResult_eINNER_ERROR = 4,
  stLevelUpShopBuildingLvResult_eResult_eHALL_LV_TOO_LOW = 5
};
bool stLevelUpShopBuildingLvResult_eResult_IsValid(int value);
const stLevelUpShopBuildingLvResult_eResult stLevelUpShopBuildingLvResult_eResult_eResult_MIN = stLevelUpShopBuildingLvResult_eResult_eSUCCESS;
const stLevelUpShopBuildingLvResult_eResult stLevelUpShopBuildingLvResult_eResult_eResult_MAX = stLevelUpShopBuildingLvResult_eResult_eHALL_LV_TOO_LOW;
const int stLevelUpShopBuildingLvResult_eResult_eResult_ARRAYSIZE = stLevelUpShopBuildingLvResult_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stLevelUpShopBuildingLvResult_eResult_descriptor();
inline const ::std::string& stLevelUpShopBuildingLvResult_eResult_Name(stLevelUpShopBuildingLvResult_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stLevelUpShopBuildingLvResult_eResult_descriptor(), value);
}
inline bool stLevelUpShopBuildingLvResult_eResult_Parse(
    const ::std::string& name, stLevelUpShopBuildingLvResult_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stLevelUpShopBuildingLvResult_eResult>(
    stLevelUpShopBuildingLvResult_eResult_descriptor(), name, value);
}
enum stLevelUpShopBuildingLvResult_ProtoModID {
  stLevelUpShopBuildingLvResult_ProtoModID_ModID = 7
};
bool stLevelUpShopBuildingLvResult_ProtoModID_IsValid(int value);
const stLevelUpShopBuildingLvResult_ProtoModID stLevelUpShopBuildingLvResult_ProtoModID_ProtoModID_MIN = stLevelUpShopBuildingLvResult_ProtoModID_ModID;
const stLevelUpShopBuildingLvResult_ProtoModID stLevelUpShopBuildingLvResult_ProtoModID_ProtoModID_MAX = stLevelUpShopBuildingLvResult_ProtoModID_ModID;
const int stLevelUpShopBuildingLvResult_ProtoModID_ProtoModID_ARRAYSIZE = stLevelUpShopBuildingLvResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stLevelUpShopBuildingLvResult_ProtoModID_descriptor();
inline const ::std::string& stLevelUpShopBuildingLvResult_ProtoModID_Name(stLevelUpShopBuildingLvResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stLevelUpShopBuildingLvResult_ProtoModID_descriptor(), value);
}
inline bool stLevelUpShopBuildingLvResult_ProtoModID_Parse(
    const ::std::string& name, stLevelUpShopBuildingLvResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stLevelUpShopBuildingLvResult_ProtoModID>(
    stLevelUpShopBuildingLvResult_ProtoModID_descriptor(), name, value);
}
enum stLevelUpShopBuildingLvResult_ProtoFunID {
  stLevelUpShopBuildingLvResult_ProtoFunID_FunID = 50
};
bool stLevelUpShopBuildingLvResult_ProtoFunID_IsValid(int value);
const stLevelUpShopBuildingLvResult_ProtoFunID stLevelUpShopBuildingLvResult_ProtoFunID_ProtoFunID_MIN = stLevelUpShopBuildingLvResult_ProtoFunID_FunID;
const stLevelUpShopBuildingLvResult_ProtoFunID stLevelUpShopBuildingLvResult_ProtoFunID_ProtoFunID_MAX = stLevelUpShopBuildingLvResult_ProtoFunID_FunID;
const int stLevelUpShopBuildingLvResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stLevelUpShopBuildingLvResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stLevelUpShopBuildingLvResult_ProtoFunID_descriptor();
inline const ::std::string& stLevelUpShopBuildingLvResult_ProtoFunID_Name(stLevelUpShopBuildingLvResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stLevelUpShopBuildingLvResult_ProtoFunID_descriptor(), value);
}
inline bool stLevelUpShopBuildingLvResult_ProtoFunID_Parse(
    const ::std::string& name, stLevelUpShopBuildingLvResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stLevelUpShopBuildingLvResult_ProtoFunID>(
    stLevelUpShopBuildingLvResult_ProtoFunID_descriptor(), name, value);
}
enum stSynShopBuilding_ProtoModID {
  stSynShopBuilding_ProtoModID_ModID = 7
};
bool stSynShopBuilding_ProtoModID_IsValid(int value);
const stSynShopBuilding_ProtoModID stSynShopBuilding_ProtoModID_ProtoModID_MIN = stSynShopBuilding_ProtoModID_ModID;
const stSynShopBuilding_ProtoModID stSynShopBuilding_ProtoModID_ProtoModID_MAX = stSynShopBuilding_ProtoModID_ModID;
const int stSynShopBuilding_ProtoModID_ProtoModID_ARRAYSIZE = stSynShopBuilding_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynShopBuilding_ProtoModID_descriptor();
inline const ::std::string& stSynShopBuilding_ProtoModID_Name(stSynShopBuilding_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynShopBuilding_ProtoModID_descriptor(), value);
}
inline bool stSynShopBuilding_ProtoModID_Parse(
    const ::std::string& name, stSynShopBuilding_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynShopBuilding_ProtoModID>(
    stSynShopBuilding_ProtoModID_descriptor(), name, value);
}
enum stSynShopBuilding_ProtoFunID {
  stSynShopBuilding_ProtoFunID_FunID = 51
};
bool stSynShopBuilding_ProtoFunID_IsValid(int value);
const stSynShopBuilding_ProtoFunID stSynShopBuilding_ProtoFunID_ProtoFunID_MIN = stSynShopBuilding_ProtoFunID_FunID;
const stSynShopBuilding_ProtoFunID stSynShopBuilding_ProtoFunID_ProtoFunID_MAX = stSynShopBuilding_ProtoFunID_FunID;
const int stSynShopBuilding_ProtoFunID_ProtoFunID_ARRAYSIZE = stSynShopBuilding_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynShopBuilding_ProtoFunID_descriptor();
inline const ::std::string& stSynShopBuilding_ProtoFunID_Name(stSynShopBuilding_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynShopBuilding_ProtoFunID_descriptor(), value);
}
inline bool stSynShopBuilding_ProtoFunID_Parse(
    const ::std::string& name, stSynShopBuilding_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynShopBuilding_ProtoFunID>(
    stSynShopBuilding_ProtoFunID_descriptor(), name, value);
}
enum stReqGuildTrace_ProtoModID {
  stReqGuildTrace_ProtoModID_ModID = 7
};
bool stReqGuildTrace_ProtoModID_IsValid(int value);
const stReqGuildTrace_ProtoModID stReqGuildTrace_ProtoModID_ProtoModID_MIN = stReqGuildTrace_ProtoModID_ModID;
const stReqGuildTrace_ProtoModID stReqGuildTrace_ProtoModID_ProtoModID_MAX = stReqGuildTrace_ProtoModID_ModID;
const int stReqGuildTrace_ProtoModID_ProtoModID_ARRAYSIZE = stReqGuildTrace_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqGuildTrace_ProtoModID_descriptor();
inline const ::std::string& stReqGuildTrace_ProtoModID_Name(stReqGuildTrace_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqGuildTrace_ProtoModID_descriptor(), value);
}
inline bool stReqGuildTrace_ProtoModID_Parse(
    const ::std::string& name, stReqGuildTrace_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqGuildTrace_ProtoModID>(
    stReqGuildTrace_ProtoModID_descriptor(), name, value);
}
enum stReqGuildTrace_ProtoFunID {
  stReqGuildTrace_ProtoFunID_FunID = 52
};
bool stReqGuildTrace_ProtoFunID_IsValid(int value);
const stReqGuildTrace_ProtoFunID stReqGuildTrace_ProtoFunID_ProtoFunID_MIN = stReqGuildTrace_ProtoFunID_FunID;
const stReqGuildTrace_ProtoFunID stReqGuildTrace_ProtoFunID_ProtoFunID_MAX = stReqGuildTrace_ProtoFunID_FunID;
const int stReqGuildTrace_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqGuildTrace_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqGuildTrace_ProtoFunID_descriptor();
inline const ::std::string& stReqGuildTrace_ProtoFunID_Name(stReqGuildTrace_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqGuildTrace_ProtoFunID_descriptor(), value);
}
inline bool stReqGuildTrace_ProtoFunID_Parse(
    const ::std::string& name, stReqGuildTrace_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqGuildTrace_ProtoFunID>(
    stReqGuildTrace_ProtoFunID_descriptor(), name, value);
}
enum stRetGuildTrace_ProtoModID {
  stRetGuildTrace_ProtoModID_ModID = 7
};
bool stRetGuildTrace_ProtoModID_IsValid(int value);
const stRetGuildTrace_ProtoModID stRetGuildTrace_ProtoModID_ProtoModID_MIN = stRetGuildTrace_ProtoModID_ModID;
const stRetGuildTrace_ProtoModID stRetGuildTrace_ProtoModID_ProtoModID_MAX = stRetGuildTrace_ProtoModID_ModID;
const int stRetGuildTrace_ProtoModID_ProtoModID_ARRAYSIZE = stRetGuildTrace_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetGuildTrace_ProtoModID_descriptor();
inline const ::std::string& stRetGuildTrace_ProtoModID_Name(stRetGuildTrace_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetGuildTrace_ProtoModID_descriptor(), value);
}
inline bool stRetGuildTrace_ProtoModID_Parse(
    const ::std::string& name, stRetGuildTrace_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetGuildTrace_ProtoModID>(
    stRetGuildTrace_ProtoModID_descriptor(), name, value);
}
enum stRetGuildTrace_ProtoFunID {
  stRetGuildTrace_ProtoFunID_FunID = 53
};
bool stRetGuildTrace_ProtoFunID_IsValid(int value);
const stRetGuildTrace_ProtoFunID stRetGuildTrace_ProtoFunID_ProtoFunID_MIN = stRetGuildTrace_ProtoFunID_FunID;
const stRetGuildTrace_ProtoFunID stRetGuildTrace_ProtoFunID_ProtoFunID_MAX = stRetGuildTrace_ProtoFunID_FunID;
const int stRetGuildTrace_ProtoFunID_ProtoFunID_ARRAYSIZE = stRetGuildTrace_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetGuildTrace_ProtoFunID_descriptor();
inline const ::std::string& stRetGuildTrace_ProtoFunID_Name(stRetGuildTrace_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetGuildTrace_ProtoFunID_descriptor(), value);
}
inline bool stRetGuildTrace_ProtoFunID_Parse(
    const ::std::string& name, stRetGuildTrace_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetGuildTrace_ProtoFunID>(
    stRetGuildTrace_ProtoFunID_descriptor(), name, value);
}
enum stAddNewGuildTrace_ProtoModID {
  stAddNewGuildTrace_ProtoModID_ModID = 7
};
bool stAddNewGuildTrace_ProtoModID_IsValid(int value);
const stAddNewGuildTrace_ProtoModID stAddNewGuildTrace_ProtoModID_ProtoModID_MIN = stAddNewGuildTrace_ProtoModID_ModID;
const stAddNewGuildTrace_ProtoModID stAddNewGuildTrace_ProtoModID_ProtoModID_MAX = stAddNewGuildTrace_ProtoModID_ModID;
const int stAddNewGuildTrace_ProtoModID_ProtoModID_ARRAYSIZE = stAddNewGuildTrace_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stAddNewGuildTrace_ProtoModID_descriptor();
inline const ::std::string& stAddNewGuildTrace_ProtoModID_Name(stAddNewGuildTrace_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stAddNewGuildTrace_ProtoModID_descriptor(), value);
}
inline bool stAddNewGuildTrace_ProtoModID_Parse(
    const ::std::string& name, stAddNewGuildTrace_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stAddNewGuildTrace_ProtoModID>(
    stAddNewGuildTrace_ProtoModID_descriptor(), name, value);
}
enum stAddNewGuildTrace_ProtoFunID {
  stAddNewGuildTrace_ProtoFunID_FunID = 54
};
bool stAddNewGuildTrace_ProtoFunID_IsValid(int value);
const stAddNewGuildTrace_ProtoFunID stAddNewGuildTrace_ProtoFunID_ProtoFunID_MIN = stAddNewGuildTrace_ProtoFunID_FunID;
const stAddNewGuildTrace_ProtoFunID stAddNewGuildTrace_ProtoFunID_ProtoFunID_MAX = stAddNewGuildTrace_ProtoFunID_FunID;
const int stAddNewGuildTrace_ProtoFunID_ProtoFunID_ARRAYSIZE = stAddNewGuildTrace_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stAddNewGuildTrace_ProtoFunID_descriptor();
inline const ::std::string& stAddNewGuildTrace_ProtoFunID_Name(stAddNewGuildTrace_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stAddNewGuildTrace_ProtoFunID_descriptor(), value);
}
inline bool stAddNewGuildTrace_ProtoFunID_Parse(
    const ::std::string& name, stAddNewGuildTrace_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stAddNewGuildTrace_ProtoFunID>(
    stAddNewGuildTrace_ProtoFunID_descriptor(), name, value);
}
enum stChgNotice_ProtoModID {
  stChgNotice_ProtoModID_ModID = 7
};
bool stChgNotice_ProtoModID_IsValid(int value);
const stChgNotice_ProtoModID stChgNotice_ProtoModID_ProtoModID_MIN = stChgNotice_ProtoModID_ModID;
const stChgNotice_ProtoModID stChgNotice_ProtoModID_ProtoModID_MAX = stChgNotice_ProtoModID_ModID;
const int stChgNotice_ProtoModID_ProtoModID_ARRAYSIZE = stChgNotice_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stChgNotice_ProtoModID_descriptor();
inline const ::std::string& stChgNotice_ProtoModID_Name(stChgNotice_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stChgNotice_ProtoModID_descriptor(), value);
}
inline bool stChgNotice_ProtoModID_Parse(
    const ::std::string& name, stChgNotice_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stChgNotice_ProtoModID>(
    stChgNotice_ProtoModID_descriptor(), name, value);
}
enum stChgNotice_ProtoFunID {
  stChgNotice_ProtoFunID_FunID = 55
};
bool stChgNotice_ProtoFunID_IsValid(int value);
const stChgNotice_ProtoFunID stChgNotice_ProtoFunID_ProtoFunID_MIN = stChgNotice_ProtoFunID_FunID;
const stChgNotice_ProtoFunID stChgNotice_ProtoFunID_ProtoFunID_MAX = stChgNotice_ProtoFunID_FunID;
const int stChgNotice_ProtoFunID_ProtoFunID_ARRAYSIZE = stChgNotice_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stChgNotice_ProtoFunID_descriptor();
inline const ::std::string& stChgNotice_ProtoFunID_Name(stChgNotice_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stChgNotice_ProtoFunID_descriptor(), value);
}
inline bool stChgNotice_ProtoFunID_Parse(
    const ::std::string& name, stChgNotice_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stChgNotice_ProtoFunID>(
    stChgNotice_ProtoFunID_descriptor(), name, value);
}
enum stGuildDonateState_ProtoModID {
  stGuildDonateState_ProtoModID_ModID = 7
};
bool stGuildDonateState_ProtoModID_IsValid(int value);
const stGuildDonateState_ProtoModID stGuildDonateState_ProtoModID_ProtoModID_MIN = stGuildDonateState_ProtoModID_ModID;
const stGuildDonateState_ProtoModID stGuildDonateState_ProtoModID_ProtoModID_MAX = stGuildDonateState_ProtoModID_ModID;
const int stGuildDonateState_ProtoModID_ProtoModID_ARRAYSIZE = stGuildDonateState_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stGuildDonateState_ProtoModID_descriptor();
inline const ::std::string& stGuildDonateState_ProtoModID_Name(stGuildDonateState_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stGuildDonateState_ProtoModID_descriptor(), value);
}
inline bool stGuildDonateState_ProtoModID_Parse(
    const ::std::string& name, stGuildDonateState_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stGuildDonateState_ProtoModID>(
    stGuildDonateState_ProtoModID_descriptor(), name, value);
}
enum stGuildDonateState_ProtoFunID {
  stGuildDonateState_ProtoFunID_FunID = 56
};
bool stGuildDonateState_ProtoFunID_IsValid(int value);
const stGuildDonateState_ProtoFunID stGuildDonateState_ProtoFunID_ProtoFunID_MIN = stGuildDonateState_ProtoFunID_FunID;
const stGuildDonateState_ProtoFunID stGuildDonateState_ProtoFunID_ProtoFunID_MAX = stGuildDonateState_ProtoFunID_FunID;
const int stGuildDonateState_ProtoFunID_ProtoFunID_ARRAYSIZE = stGuildDonateState_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stGuildDonateState_ProtoFunID_descriptor();
inline const ::std::string& stGuildDonateState_ProtoFunID_Name(stGuildDonateState_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stGuildDonateState_ProtoFunID_descriptor(), value);
}
inline bool stGuildDonateState_ProtoFunID_Parse(
    const ::std::string& name, stGuildDonateState_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stGuildDonateState_ProtoFunID>(
    stGuildDonateState_ProtoFunID_descriptor(), name, value);
}
enum stGuildPrayState_ProtoModID {
  stGuildPrayState_ProtoModID_ModID = 7
};
bool stGuildPrayState_ProtoModID_IsValid(int value);
const stGuildPrayState_ProtoModID stGuildPrayState_ProtoModID_ProtoModID_MIN = stGuildPrayState_ProtoModID_ModID;
const stGuildPrayState_ProtoModID stGuildPrayState_ProtoModID_ProtoModID_MAX = stGuildPrayState_ProtoModID_ModID;
const int stGuildPrayState_ProtoModID_ProtoModID_ARRAYSIZE = stGuildPrayState_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stGuildPrayState_ProtoModID_descriptor();
inline const ::std::string& stGuildPrayState_ProtoModID_Name(stGuildPrayState_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stGuildPrayState_ProtoModID_descriptor(), value);
}
inline bool stGuildPrayState_ProtoModID_Parse(
    const ::std::string& name, stGuildPrayState_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stGuildPrayState_ProtoModID>(
    stGuildPrayState_ProtoModID_descriptor(), name, value);
}
enum stGuildPrayState_ProtoFunID {
  stGuildPrayState_ProtoFunID_FunID = 57
};
bool stGuildPrayState_ProtoFunID_IsValid(int value);
const stGuildPrayState_ProtoFunID stGuildPrayState_ProtoFunID_ProtoFunID_MIN = stGuildPrayState_ProtoFunID_FunID;
const stGuildPrayState_ProtoFunID stGuildPrayState_ProtoFunID_ProtoFunID_MAX = stGuildPrayState_ProtoFunID_FunID;
const int stGuildPrayState_ProtoFunID_ProtoFunID_ARRAYSIZE = stGuildPrayState_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stGuildPrayState_ProtoFunID_descriptor();
inline const ::std::string& stGuildPrayState_ProtoFunID_Name(stGuildPrayState_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stGuildPrayState_ProtoFunID_descriptor(), value);
}
inline bool stGuildPrayState_ProtoFunID_Parse(
    const ::std::string& name, stGuildPrayState_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stGuildPrayState_ProtoFunID>(
    stGuildPrayState_ProtoFunID_descriptor(), name, value);
}
enum stReqChangeBadge_ProtoModID {
  stReqChangeBadge_ProtoModID_ModID = 7
};
bool stReqChangeBadge_ProtoModID_IsValid(int value);
const stReqChangeBadge_ProtoModID stReqChangeBadge_ProtoModID_ProtoModID_MIN = stReqChangeBadge_ProtoModID_ModID;
const stReqChangeBadge_ProtoModID stReqChangeBadge_ProtoModID_ProtoModID_MAX = stReqChangeBadge_ProtoModID_ModID;
const int stReqChangeBadge_ProtoModID_ProtoModID_ARRAYSIZE = stReqChangeBadge_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqChangeBadge_ProtoModID_descriptor();
inline const ::std::string& stReqChangeBadge_ProtoModID_Name(stReqChangeBadge_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqChangeBadge_ProtoModID_descriptor(), value);
}
inline bool stReqChangeBadge_ProtoModID_Parse(
    const ::std::string& name, stReqChangeBadge_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqChangeBadge_ProtoModID>(
    stReqChangeBadge_ProtoModID_descriptor(), name, value);
}
enum stReqChangeBadge_ProtoFunID {
  stReqChangeBadge_ProtoFunID_FunID = 58
};
bool stReqChangeBadge_ProtoFunID_IsValid(int value);
const stReqChangeBadge_ProtoFunID stReqChangeBadge_ProtoFunID_ProtoFunID_MIN = stReqChangeBadge_ProtoFunID_FunID;
const stReqChangeBadge_ProtoFunID stReqChangeBadge_ProtoFunID_ProtoFunID_MAX = stReqChangeBadge_ProtoFunID_FunID;
const int stReqChangeBadge_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqChangeBadge_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqChangeBadge_ProtoFunID_descriptor();
inline const ::std::string& stReqChangeBadge_ProtoFunID_Name(stReqChangeBadge_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqChangeBadge_ProtoFunID_descriptor(), value);
}
inline bool stReqChangeBadge_ProtoFunID_Parse(
    const ::std::string& name, stReqChangeBadge_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqChangeBadge_ProtoFunID>(
    stReqChangeBadge_ProtoFunID_descriptor(), name, value);
}
enum stChangeBadge_eResult {
  stChangeBadge_eResult_eSuccess = 1,
  stChangeBadge_eResult_eNot_Enough_Diamond = 2
};
bool stChangeBadge_eResult_IsValid(int value);
const stChangeBadge_eResult stChangeBadge_eResult_eResult_MIN = stChangeBadge_eResult_eSuccess;
const stChangeBadge_eResult stChangeBadge_eResult_eResult_MAX = stChangeBadge_eResult_eNot_Enough_Diamond;
const int stChangeBadge_eResult_eResult_ARRAYSIZE = stChangeBadge_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stChangeBadge_eResult_descriptor();
inline const ::std::string& stChangeBadge_eResult_Name(stChangeBadge_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stChangeBadge_eResult_descriptor(), value);
}
inline bool stChangeBadge_eResult_Parse(
    const ::std::string& name, stChangeBadge_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stChangeBadge_eResult>(
    stChangeBadge_eResult_descriptor(), name, value);
}
enum stChangeBadge_ProtoModID {
  stChangeBadge_ProtoModID_ModID = 7
};
bool stChangeBadge_ProtoModID_IsValid(int value);
const stChangeBadge_ProtoModID stChangeBadge_ProtoModID_ProtoModID_MIN = stChangeBadge_ProtoModID_ModID;
const stChangeBadge_ProtoModID stChangeBadge_ProtoModID_ProtoModID_MAX = stChangeBadge_ProtoModID_ModID;
const int stChangeBadge_ProtoModID_ProtoModID_ARRAYSIZE = stChangeBadge_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stChangeBadge_ProtoModID_descriptor();
inline const ::std::string& stChangeBadge_ProtoModID_Name(stChangeBadge_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stChangeBadge_ProtoModID_descriptor(), value);
}
inline bool stChangeBadge_ProtoModID_Parse(
    const ::std::string& name, stChangeBadge_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stChangeBadge_ProtoModID>(
    stChangeBadge_ProtoModID_descriptor(), name, value);
}
enum stChangeBadge_ProtoFunID {
  stChangeBadge_ProtoFunID_FunID = 59
};
bool stChangeBadge_ProtoFunID_IsValid(int value);
const stChangeBadge_ProtoFunID stChangeBadge_ProtoFunID_ProtoFunID_MIN = stChangeBadge_ProtoFunID_FunID;
const stChangeBadge_ProtoFunID stChangeBadge_ProtoFunID_ProtoFunID_MAX = stChangeBadge_ProtoFunID_FunID;
const int stChangeBadge_ProtoFunID_ProtoFunID_ARRAYSIZE = stChangeBadge_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stChangeBadge_ProtoFunID_descriptor();
inline const ::std::string& stChangeBadge_ProtoFunID_Name(stChangeBadge_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stChangeBadge_ProtoFunID_descriptor(), value);
}
inline bool stChangeBadge_ProtoFunID_Parse(
    const ::std::string& name, stChangeBadge_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stChangeBadge_ProtoFunID>(
    stChangeBadge_ProtoFunID_descriptor(), name, value);
}
enum stIntoGuildCopymap_ProtoModID {
  stIntoGuildCopymap_ProtoModID_ModID = 7
};
bool stIntoGuildCopymap_ProtoModID_IsValid(int value);
const stIntoGuildCopymap_ProtoModID stIntoGuildCopymap_ProtoModID_ProtoModID_MIN = stIntoGuildCopymap_ProtoModID_ModID;
const stIntoGuildCopymap_ProtoModID stIntoGuildCopymap_ProtoModID_ProtoModID_MAX = stIntoGuildCopymap_ProtoModID_ModID;
const int stIntoGuildCopymap_ProtoModID_ProtoModID_ARRAYSIZE = stIntoGuildCopymap_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stIntoGuildCopymap_ProtoModID_descriptor();
inline const ::std::string& stIntoGuildCopymap_ProtoModID_Name(stIntoGuildCopymap_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stIntoGuildCopymap_ProtoModID_descriptor(), value);
}
inline bool stIntoGuildCopymap_ProtoModID_Parse(
    const ::std::string& name, stIntoGuildCopymap_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stIntoGuildCopymap_ProtoModID>(
    stIntoGuildCopymap_ProtoModID_descriptor(), name, value);
}
enum stIntoGuildCopymap_ProtoFunID {
  stIntoGuildCopymap_ProtoFunID_FunID = 60
};
bool stIntoGuildCopymap_ProtoFunID_IsValid(int value);
const stIntoGuildCopymap_ProtoFunID stIntoGuildCopymap_ProtoFunID_ProtoFunID_MIN = stIntoGuildCopymap_ProtoFunID_FunID;
const stIntoGuildCopymap_ProtoFunID stIntoGuildCopymap_ProtoFunID_ProtoFunID_MAX = stIntoGuildCopymap_ProtoFunID_FunID;
const int stIntoGuildCopymap_ProtoFunID_ProtoFunID_ARRAYSIZE = stIntoGuildCopymap_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stIntoGuildCopymap_ProtoFunID_descriptor();
inline const ::std::string& stIntoGuildCopymap_ProtoFunID_Name(stIntoGuildCopymap_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stIntoGuildCopymap_ProtoFunID_descriptor(), value);
}
inline bool stIntoGuildCopymap_ProtoFunID_Parse(
    const ::std::string& name, stIntoGuildCopymap_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stIntoGuildCopymap_ProtoFunID>(
    stIntoGuildCopymap_ProtoFunID_descriptor(), name, value);
}
enum stIntoGuildCopymapError_eResult {
  stIntoGuildCopymapError_eResult_eHAS_NOT_GUILD = 1
};
bool stIntoGuildCopymapError_eResult_IsValid(int value);
const stIntoGuildCopymapError_eResult stIntoGuildCopymapError_eResult_eResult_MIN = stIntoGuildCopymapError_eResult_eHAS_NOT_GUILD;
const stIntoGuildCopymapError_eResult stIntoGuildCopymapError_eResult_eResult_MAX = stIntoGuildCopymapError_eResult_eHAS_NOT_GUILD;
const int stIntoGuildCopymapError_eResult_eResult_ARRAYSIZE = stIntoGuildCopymapError_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stIntoGuildCopymapError_eResult_descriptor();
inline const ::std::string& stIntoGuildCopymapError_eResult_Name(stIntoGuildCopymapError_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stIntoGuildCopymapError_eResult_descriptor(), value);
}
inline bool stIntoGuildCopymapError_eResult_Parse(
    const ::std::string& name, stIntoGuildCopymapError_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stIntoGuildCopymapError_eResult>(
    stIntoGuildCopymapError_eResult_descriptor(), name, value);
}
enum stIntoGuildCopymapError_ProtoModID {
  stIntoGuildCopymapError_ProtoModID_ModID = 7
};
bool stIntoGuildCopymapError_ProtoModID_IsValid(int value);
const stIntoGuildCopymapError_ProtoModID stIntoGuildCopymapError_ProtoModID_ProtoModID_MIN = stIntoGuildCopymapError_ProtoModID_ModID;
const stIntoGuildCopymapError_ProtoModID stIntoGuildCopymapError_ProtoModID_ProtoModID_MAX = stIntoGuildCopymapError_ProtoModID_ModID;
const int stIntoGuildCopymapError_ProtoModID_ProtoModID_ARRAYSIZE = stIntoGuildCopymapError_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stIntoGuildCopymapError_ProtoModID_descriptor();
inline const ::std::string& stIntoGuildCopymapError_ProtoModID_Name(stIntoGuildCopymapError_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stIntoGuildCopymapError_ProtoModID_descriptor(), value);
}
inline bool stIntoGuildCopymapError_ProtoModID_Parse(
    const ::std::string& name, stIntoGuildCopymapError_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stIntoGuildCopymapError_ProtoModID>(
    stIntoGuildCopymapError_ProtoModID_descriptor(), name, value);
}
enum stIntoGuildCopymapError_ProtoFunID {
  stIntoGuildCopymapError_ProtoFunID_FunID = 61
};
bool stIntoGuildCopymapError_ProtoFunID_IsValid(int value);
const stIntoGuildCopymapError_ProtoFunID stIntoGuildCopymapError_ProtoFunID_ProtoFunID_MIN = stIntoGuildCopymapError_ProtoFunID_FunID;
const stIntoGuildCopymapError_ProtoFunID stIntoGuildCopymapError_ProtoFunID_ProtoFunID_MAX = stIntoGuildCopymapError_ProtoFunID_FunID;
const int stIntoGuildCopymapError_ProtoFunID_ProtoFunID_ARRAYSIZE = stIntoGuildCopymapError_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stIntoGuildCopymapError_ProtoFunID_descriptor();
inline const ::std::string& stIntoGuildCopymapError_ProtoFunID_Name(stIntoGuildCopymapError_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stIntoGuildCopymapError_ProtoFunID_descriptor(), value);
}
inline bool stIntoGuildCopymapError_ProtoFunID_Parse(
    const ::std::string& name, stIntoGuildCopymapError_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stIntoGuildCopymapError_ProtoFunID>(
    stIntoGuildCopymapError_ProtoFunID_descriptor(), name, value);
}
enum stSearchGuild_ProtoModID {
  stSearchGuild_ProtoModID_ModID = 7
};
bool stSearchGuild_ProtoModID_IsValid(int value);
const stSearchGuild_ProtoModID stSearchGuild_ProtoModID_ProtoModID_MIN = stSearchGuild_ProtoModID_ModID;
const stSearchGuild_ProtoModID stSearchGuild_ProtoModID_ProtoModID_MAX = stSearchGuild_ProtoModID_ModID;
const int stSearchGuild_ProtoModID_ProtoModID_ARRAYSIZE = stSearchGuild_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSearchGuild_ProtoModID_descriptor();
inline const ::std::string& stSearchGuild_ProtoModID_Name(stSearchGuild_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSearchGuild_ProtoModID_descriptor(), value);
}
inline bool stSearchGuild_ProtoModID_Parse(
    const ::std::string& name, stSearchGuild_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSearchGuild_ProtoModID>(
    stSearchGuild_ProtoModID_descriptor(), name, value);
}
enum stSearchGuild_ProtoFunID {
  stSearchGuild_ProtoFunID_FunID = 62
};
bool stSearchGuild_ProtoFunID_IsValid(int value);
const stSearchGuild_ProtoFunID stSearchGuild_ProtoFunID_ProtoFunID_MIN = stSearchGuild_ProtoFunID_FunID;
const stSearchGuild_ProtoFunID stSearchGuild_ProtoFunID_ProtoFunID_MAX = stSearchGuild_ProtoFunID_FunID;
const int stSearchGuild_ProtoFunID_ProtoFunID_ARRAYSIZE = stSearchGuild_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSearchGuild_ProtoFunID_descriptor();
inline const ::std::string& stSearchGuild_ProtoFunID_Name(stSearchGuild_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSearchGuild_ProtoFunID_descriptor(), value);
}
inline bool stSearchGuild_ProtoFunID_Parse(
    const ::std::string& name, stSearchGuild_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSearchGuild_ProtoFunID>(
    stSearchGuild_ProtoFunID_descriptor(), name, value);
}
enum stRetSearchGuildResult_ProtoModID {
  stRetSearchGuildResult_ProtoModID_ModID = 7
};
bool stRetSearchGuildResult_ProtoModID_IsValid(int value);
const stRetSearchGuildResult_ProtoModID stRetSearchGuildResult_ProtoModID_ProtoModID_MIN = stRetSearchGuildResult_ProtoModID_ModID;
const stRetSearchGuildResult_ProtoModID stRetSearchGuildResult_ProtoModID_ProtoModID_MAX = stRetSearchGuildResult_ProtoModID_ModID;
const int stRetSearchGuildResult_ProtoModID_ProtoModID_ARRAYSIZE = stRetSearchGuildResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetSearchGuildResult_ProtoModID_descriptor();
inline const ::std::string& stRetSearchGuildResult_ProtoModID_Name(stRetSearchGuildResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetSearchGuildResult_ProtoModID_descriptor(), value);
}
inline bool stRetSearchGuildResult_ProtoModID_Parse(
    const ::std::string& name, stRetSearchGuildResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetSearchGuildResult_ProtoModID>(
    stRetSearchGuildResult_ProtoModID_descriptor(), name, value);
}
enum stRetSearchGuildResult_ProtoFunID {
  stRetSearchGuildResult_ProtoFunID_FunID = 63
};
bool stRetSearchGuildResult_ProtoFunID_IsValid(int value);
const stRetSearchGuildResult_ProtoFunID stRetSearchGuildResult_ProtoFunID_ProtoFunID_MIN = stRetSearchGuildResult_ProtoFunID_FunID;
const stRetSearchGuildResult_ProtoFunID stRetSearchGuildResult_ProtoFunID_ProtoFunID_MAX = stRetSearchGuildResult_ProtoFunID_FunID;
const int stRetSearchGuildResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stRetSearchGuildResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetSearchGuildResult_ProtoFunID_descriptor();
inline const ::std::string& stRetSearchGuildResult_ProtoFunID_Name(stRetSearchGuildResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetSearchGuildResult_ProtoFunID_descriptor(), value);
}
inline bool stRetSearchGuildResult_ProtoFunID_Parse(
    const ::std::string& name, stRetSearchGuildResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetSearchGuildResult_ProtoFunID>(
    stRetSearchGuildResult_ProtoFunID_descriptor(), name, value);
}
enum stSynMemberContribute_ProtoModID {
  stSynMemberContribute_ProtoModID_ModID = 7
};
bool stSynMemberContribute_ProtoModID_IsValid(int value);
const stSynMemberContribute_ProtoModID stSynMemberContribute_ProtoModID_ProtoModID_MIN = stSynMemberContribute_ProtoModID_ModID;
const stSynMemberContribute_ProtoModID stSynMemberContribute_ProtoModID_ProtoModID_MAX = stSynMemberContribute_ProtoModID_ModID;
const int stSynMemberContribute_ProtoModID_ProtoModID_ARRAYSIZE = stSynMemberContribute_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynMemberContribute_ProtoModID_descriptor();
inline const ::std::string& stSynMemberContribute_ProtoModID_Name(stSynMemberContribute_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynMemberContribute_ProtoModID_descriptor(), value);
}
inline bool stSynMemberContribute_ProtoModID_Parse(
    const ::std::string& name, stSynMemberContribute_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynMemberContribute_ProtoModID>(
    stSynMemberContribute_ProtoModID_descriptor(), name, value);
}
enum stSynMemberContribute_ProtoFunID {
  stSynMemberContribute_ProtoFunID_FunID = 64
};
bool stSynMemberContribute_ProtoFunID_IsValid(int value);
const stSynMemberContribute_ProtoFunID stSynMemberContribute_ProtoFunID_ProtoFunID_MIN = stSynMemberContribute_ProtoFunID_FunID;
const stSynMemberContribute_ProtoFunID stSynMemberContribute_ProtoFunID_ProtoFunID_MAX = stSynMemberContribute_ProtoFunID_FunID;
const int stSynMemberContribute_ProtoFunID_ProtoFunID_ARRAYSIZE = stSynMemberContribute_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynMemberContribute_ProtoFunID_descriptor();
inline const ::std::string& stSynMemberContribute_ProtoFunID_Name(stSynMemberContribute_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynMemberContribute_ProtoFunID_descriptor(), value);
}
inline bool stSynMemberContribute_ProtoFunID_Parse(
    const ::std::string& name, stSynMemberContribute_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynMemberContribute_ProtoFunID>(
    stSynMemberContribute_ProtoFunID_descriptor(), name, value);
}
enum stReqOpenGuildCopymapWin_ProtoModID {
  stReqOpenGuildCopymapWin_ProtoModID_ModID = 7
};
bool stReqOpenGuildCopymapWin_ProtoModID_IsValid(int value);
const stReqOpenGuildCopymapWin_ProtoModID stReqOpenGuildCopymapWin_ProtoModID_ProtoModID_MIN = stReqOpenGuildCopymapWin_ProtoModID_ModID;
const stReqOpenGuildCopymapWin_ProtoModID stReqOpenGuildCopymapWin_ProtoModID_ProtoModID_MAX = stReqOpenGuildCopymapWin_ProtoModID_ModID;
const int stReqOpenGuildCopymapWin_ProtoModID_ProtoModID_ARRAYSIZE = stReqOpenGuildCopymapWin_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqOpenGuildCopymapWin_ProtoModID_descriptor();
inline const ::std::string& stReqOpenGuildCopymapWin_ProtoModID_Name(stReqOpenGuildCopymapWin_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqOpenGuildCopymapWin_ProtoModID_descriptor(), value);
}
inline bool stReqOpenGuildCopymapWin_ProtoModID_Parse(
    const ::std::string& name, stReqOpenGuildCopymapWin_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqOpenGuildCopymapWin_ProtoModID>(
    stReqOpenGuildCopymapWin_ProtoModID_descriptor(), name, value);
}
enum stReqOpenGuildCopymapWin_ProtoFunID {
  stReqOpenGuildCopymapWin_ProtoFunID_FunID = 65
};
bool stReqOpenGuildCopymapWin_ProtoFunID_IsValid(int value);
const stReqOpenGuildCopymapWin_ProtoFunID stReqOpenGuildCopymapWin_ProtoFunID_ProtoFunID_MIN = stReqOpenGuildCopymapWin_ProtoFunID_FunID;
const stReqOpenGuildCopymapWin_ProtoFunID stReqOpenGuildCopymapWin_ProtoFunID_ProtoFunID_MAX = stReqOpenGuildCopymapWin_ProtoFunID_FunID;
const int stReqOpenGuildCopymapWin_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqOpenGuildCopymapWin_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqOpenGuildCopymapWin_ProtoFunID_descriptor();
inline const ::std::string& stReqOpenGuildCopymapWin_ProtoFunID_Name(stReqOpenGuildCopymapWin_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqOpenGuildCopymapWin_ProtoFunID_descriptor(), value);
}
inline bool stReqOpenGuildCopymapWin_ProtoFunID_Parse(
    const ::std::string& name, stReqOpenGuildCopymapWin_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqOpenGuildCopymapWin_ProtoFunID>(
    stReqOpenGuildCopymapWin_ProtoFunID_descriptor(), name, value);
}
enum stRetGuildCopymapInfo_ProtoModID {
  stRetGuildCopymapInfo_ProtoModID_ModID = 7
};
bool stRetGuildCopymapInfo_ProtoModID_IsValid(int value);
const stRetGuildCopymapInfo_ProtoModID stRetGuildCopymapInfo_ProtoModID_ProtoModID_MIN = stRetGuildCopymapInfo_ProtoModID_ModID;
const stRetGuildCopymapInfo_ProtoModID stRetGuildCopymapInfo_ProtoModID_ProtoModID_MAX = stRetGuildCopymapInfo_ProtoModID_ModID;
const int stRetGuildCopymapInfo_ProtoModID_ProtoModID_ARRAYSIZE = stRetGuildCopymapInfo_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetGuildCopymapInfo_ProtoModID_descriptor();
inline const ::std::string& stRetGuildCopymapInfo_ProtoModID_Name(stRetGuildCopymapInfo_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetGuildCopymapInfo_ProtoModID_descriptor(), value);
}
inline bool stRetGuildCopymapInfo_ProtoModID_Parse(
    const ::std::string& name, stRetGuildCopymapInfo_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetGuildCopymapInfo_ProtoModID>(
    stRetGuildCopymapInfo_ProtoModID_descriptor(), name, value);
}
enum stRetGuildCopymapInfo_ProtoFunID {
  stRetGuildCopymapInfo_ProtoFunID_FunID = 66
};
bool stRetGuildCopymapInfo_ProtoFunID_IsValid(int value);
const stRetGuildCopymapInfo_ProtoFunID stRetGuildCopymapInfo_ProtoFunID_ProtoFunID_MIN = stRetGuildCopymapInfo_ProtoFunID_FunID;
const stRetGuildCopymapInfo_ProtoFunID stRetGuildCopymapInfo_ProtoFunID_ProtoFunID_MAX = stRetGuildCopymapInfo_ProtoFunID_FunID;
const int stRetGuildCopymapInfo_ProtoFunID_ProtoFunID_ARRAYSIZE = stRetGuildCopymapInfo_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetGuildCopymapInfo_ProtoFunID_descriptor();
inline const ::std::string& stRetGuildCopymapInfo_ProtoFunID_Name(stRetGuildCopymapInfo_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetGuildCopymapInfo_ProtoFunID_descriptor(), value);
}
inline bool stRetGuildCopymapInfo_ProtoFunID_Parse(
    const ::std::string& name, stRetGuildCopymapInfo_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetGuildCopymapInfo_ProtoFunID>(
    stRetGuildCopymapInfo_ProtoFunID_descriptor(), name, value);
}
enum stReqDamageSortlist_ProtoModID {
  stReqDamageSortlist_ProtoModID_ModID = 7
};
bool stReqDamageSortlist_ProtoModID_IsValid(int value);
const stReqDamageSortlist_ProtoModID stReqDamageSortlist_ProtoModID_ProtoModID_MIN = stReqDamageSortlist_ProtoModID_ModID;
const stReqDamageSortlist_ProtoModID stReqDamageSortlist_ProtoModID_ProtoModID_MAX = stReqDamageSortlist_ProtoModID_ModID;
const int stReqDamageSortlist_ProtoModID_ProtoModID_ARRAYSIZE = stReqDamageSortlist_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqDamageSortlist_ProtoModID_descriptor();
inline const ::std::string& stReqDamageSortlist_ProtoModID_Name(stReqDamageSortlist_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqDamageSortlist_ProtoModID_descriptor(), value);
}
inline bool stReqDamageSortlist_ProtoModID_Parse(
    const ::std::string& name, stReqDamageSortlist_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqDamageSortlist_ProtoModID>(
    stReqDamageSortlist_ProtoModID_descriptor(), name, value);
}
enum stReqDamageSortlist_ProtoFunID {
  stReqDamageSortlist_ProtoFunID_FunID = 67
};
bool stReqDamageSortlist_ProtoFunID_IsValid(int value);
const stReqDamageSortlist_ProtoFunID stReqDamageSortlist_ProtoFunID_ProtoFunID_MIN = stReqDamageSortlist_ProtoFunID_FunID;
const stReqDamageSortlist_ProtoFunID stReqDamageSortlist_ProtoFunID_ProtoFunID_MAX = stReqDamageSortlist_ProtoFunID_FunID;
const int stReqDamageSortlist_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqDamageSortlist_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqDamageSortlist_ProtoFunID_descriptor();
inline const ::std::string& stReqDamageSortlist_ProtoFunID_Name(stReqDamageSortlist_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqDamageSortlist_ProtoFunID_descriptor(), value);
}
inline bool stReqDamageSortlist_ProtoFunID_Parse(
    const ::std::string& name, stReqDamageSortlist_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqDamageSortlist_ProtoFunID>(
    stReqDamageSortlist_ProtoFunID_descriptor(), name, value);
}
enum stRetDamageSortlist_ProtoModID {
  stRetDamageSortlist_ProtoModID_ModID = 7
};
bool stRetDamageSortlist_ProtoModID_IsValid(int value);
const stRetDamageSortlist_ProtoModID stRetDamageSortlist_ProtoModID_ProtoModID_MIN = stRetDamageSortlist_ProtoModID_ModID;
const stRetDamageSortlist_ProtoModID stRetDamageSortlist_ProtoModID_ProtoModID_MAX = stRetDamageSortlist_ProtoModID_ModID;
const int stRetDamageSortlist_ProtoModID_ProtoModID_ARRAYSIZE = stRetDamageSortlist_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetDamageSortlist_ProtoModID_descriptor();
inline const ::std::string& stRetDamageSortlist_ProtoModID_Name(stRetDamageSortlist_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetDamageSortlist_ProtoModID_descriptor(), value);
}
inline bool stRetDamageSortlist_ProtoModID_Parse(
    const ::std::string& name, stRetDamageSortlist_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetDamageSortlist_ProtoModID>(
    stRetDamageSortlist_ProtoModID_descriptor(), name, value);
}
enum stRetDamageSortlist_ProtoFunID {
  stRetDamageSortlist_ProtoFunID_FunID = 68
};
bool stRetDamageSortlist_ProtoFunID_IsValid(int value);
const stRetDamageSortlist_ProtoFunID stRetDamageSortlist_ProtoFunID_ProtoFunID_MIN = stRetDamageSortlist_ProtoFunID_FunID;
const stRetDamageSortlist_ProtoFunID stRetDamageSortlist_ProtoFunID_ProtoFunID_MAX = stRetDamageSortlist_ProtoFunID_FunID;
const int stRetDamageSortlist_ProtoFunID_ProtoFunID_ARRAYSIZE = stRetDamageSortlist_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetDamageSortlist_ProtoFunID_descriptor();
inline const ::std::string& stRetDamageSortlist_ProtoFunID_Name(stRetDamageSortlist_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetDamageSortlist_ProtoFunID_descriptor(), value);
}
inline bool stRetDamageSortlist_ProtoFunID_Parse(
    const ::std::string& name, stRetDamageSortlist_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetDamageSortlist_ProtoFunID>(
    stRetDamageSortlist_ProtoFunID_descriptor(), name, value);
}
enum stReqGuildCopymapScoreSortlist_ProtoModID {
  stReqGuildCopymapScoreSortlist_ProtoModID_ModID = 7
};
bool stReqGuildCopymapScoreSortlist_ProtoModID_IsValid(int value);
const stReqGuildCopymapScoreSortlist_ProtoModID stReqGuildCopymapScoreSortlist_ProtoModID_ProtoModID_MIN = stReqGuildCopymapScoreSortlist_ProtoModID_ModID;
const stReqGuildCopymapScoreSortlist_ProtoModID stReqGuildCopymapScoreSortlist_ProtoModID_ProtoModID_MAX = stReqGuildCopymapScoreSortlist_ProtoModID_ModID;
const int stReqGuildCopymapScoreSortlist_ProtoModID_ProtoModID_ARRAYSIZE = stReqGuildCopymapScoreSortlist_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqGuildCopymapScoreSortlist_ProtoModID_descriptor();
inline const ::std::string& stReqGuildCopymapScoreSortlist_ProtoModID_Name(stReqGuildCopymapScoreSortlist_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqGuildCopymapScoreSortlist_ProtoModID_descriptor(), value);
}
inline bool stReqGuildCopymapScoreSortlist_ProtoModID_Parse(
    const ::std::string& name, stReqGuildCopymapScoreSortlist_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqGuildCopymapScoreSortlist_ProtoModID>(
    stReqGuildCopymapScoreSortlist_ProtoModID_descriptor(), name, value);
}
enum stReqGuildCopymapScoreSortlist_ProtoFunID {
  stReqGuildCopymapScoreSortlist_ProtoFunID_FunID = 69
};
bool stReqGuildCopymapScoreSortlist_ProtoFunID_IsValid(int value);
const stReqGuildCopymapScoreSortlist_ProtoFunID stReqGuildCopymapScoreSortlist_ProtoFunID_ProtoFunID_MIN = stReqGuildCopymapScoreSortlist_ProtoFunID_FunID;
const stReqGuildCopymapScoreSortlist_ProtoFunID stReqGuildCopymapScoreSortlist_ProtoFunID_ProtoFunID_MAX = stReqGuildCopymapScoreSortlist_ProtoFunID_FunID;
const int stReqGuildCopymapScoreSortlist_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqGuildCopymapScoreSortlist_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqGuildCopymapScoreSortlist_ProtoFunID_descriptor();
inline const ::std::string& stReqGuildCopymapScoreSortlist_ProtoFunID_Name(stReqGuildCopymapScoreSortlist_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqGuildCopymapScoreSortlist_ProtoFunID_descriptor(), value);
}
inline bool stReqGuildCopymapScoreSortlist_ProtoFunID_Parse(
    const ::std::string& name, stReqGuildCopymapScoreSortlist_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqGuildCopymapScoreSortlist_ProtoFunID>(
    stReqGuildCopymapScoreSortlist_ProtoFunID_descriptor(), name, value);
}
enum stRetGuildCopymapScoreSortlist_ProtoModID {
  stRetGuildCopymapScoreSortlist_ProtoModID_ModID = 7
};
bool stRetGuildCopymapScoreSortlist_ProtoModID_IsValid(int value);
const stRetGuildCopymapScoreSortlist_ProtoModID stRetGuildCopymapScoreSortlist_ProtoModID_ProtoModID_MIN = stRetGuildCopymapScoreSortlist_ProtoModID_ModID;
const stRetGuildCopymapScoreSortlist_ProtoModID stRetGuildCopymapScoreSortlist_ProtoModID_ProtoModID_MAX = stRetGuildCopymapScoreSortlist_ProtoModID_ModID;
const int stRetGuildCopymapScoreSortlist_ProtoModID_ProtoModID_ARRAYSIZE = stRetGuildCopymapScoreSortlist_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetGuildCopymapScoreSortlist_ProtoModID_descriptor();
inline const ::std::string& stRetGuildCopymapScoreSortlist_ProtoModID_Name(stRetGuildCopymapScoreSortlist_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetGuildCopymapScoreSortlist_ProtoModID_descriptor(), value);
}
inline bool stRetGuildCopymapScoreSortlist_ProtoModID_Parse(
    const ::std::string& name, stRetGuildCopymapScoreSortlist_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetGuildCopymapScoreSortlist_ProtoModID>(
    stRetGuildCopymapScoreSortlist_ProtoModID_descriptor(), name, value);
}
enum stRetGuildCopymapScoreSortlist_ProtoFunID {
  stRetGuildCopymapScoreSortlist_ProtoFunID_FunID = 70
};
bool stRetGuildCopymapScoreSortlist_ProtoFunID_IsValid(int value);
const stRetGuildCopymapScoreSortlist_ProtoFunID stRetGuildCopymapScoreSortlist_ProtoFunID_ProtoFunID_MIN = stRetGuildCopymapScoreSortlist_ProtoFunID_FunID;
const stRetGuildCopymapScoreSortlist_ProtoFunID stRetGuildCopymapScoreSortlist_ProtoFunID_ProtoFunID_MAX = stRetGuildCopymapScoreSortlist_ProtoFunID_FunID;
const int stRetGuildCopymapScoreSortlist_ProtoFunID_ProtoFunID_ARRAYSIZE = stRetGuildCopymapScoreSortlist_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetGuildCopymapScoreSortlist_ProtoFunID_descriptor();
inline const ::std::string& stRetGuildCopymapScoreSortlist_ProtoFunID_Name(stRetGuildCopymapScoreSortlist_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetGuildCopymapScoreSortlist_ProtoFunID_descriptor(), value);
}
inline bool stRetGuildCopymapScoreSortlist_ProtoFunID_Parse(
    const ::std::string& name, stRetGuildCopymapScoreSortlist_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetGuildCopymapScoreSortlist_ProtoFunID>(
    stRetGuildCopymapScoreSortlist_ProtoFunID_descriptor(), name, value);
}
enum stSynGuildActivityDegree_ProtoModID {
  stSynGuildActivityDegree_ProtoModID_ModID = 7
};
bool stSynGuildActivityDegree_ProtoModID_IsValid(int value);
const stSynGuildActivityDegree_ProtoModID stSynGuildActivityDegree_ProtoModID_ProtoModID_MIN = stSynGuildActivityDegree_ProtoModID_ModID;
const stSynGuildActivityDegree_ProtoModID stSynGuildActivityDegree_ProtoModID_ProtoModID_MAX = stSynGuildActivityDegree_ProtoModID_ModID;
const int stSynGuildActivityDegree_ProtoModID_ProtoModID_ARRAYSIZE = stSynGuildActivityDegree_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynGuildActivityDegree_ProtoModID_descriptor();
inline const ::std::string& stSynGuildActivityDegree_ProtoModID_Name(stSynGuildActivityDegree_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynGuildActivityDegree_ProtoModID_descriptor(), value);
}
inline bool stSynGuildActivityDegree_ProtoModID_Parse(
    const ::std::string& name, stSynGuildActivityDegree_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynGuildActivityDegree_ProtoModID>(
    stSynGuildActivityDegree_ProtoModID_descriptor(), name, value);
}
enum stSynGuildActivityDegree_ProtoFunID {
  stSynGuildActivityDegree_ProtoFunID_FunID = 71
};
bool stSynGuildActivityDegree_ProtoFunID_IsValid(int value);
const stSynGuildActivityDegree_ProtoFunID stSynGuildActivityDegree_ProtoFunID_ProtoFunID_MIN = stSynGuildActivityDegree_ProtoFunID_FunID;
const stSynGuildActivityDegree_ProtoFunID stSynGuildActivityDegree_ProtoFunID_ProtoFunID_MAX = stSynGuildActivityDegree_ProtoFunID_FunID;
const int stSynGuildActivityDegree_ProtoFunID_ProtoFunID_ARRAYSIZE = stSynGuildActivityDegree_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynGuildActivityDegree_ProtoFunID_descriptor();
inline const ::std::string& stSynGuildActivityDegree_ProtoFunID_Name(stSynGuildActivityDegree_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynGuildActivityDegree_ProtoFunID_descriptor(), value);
}
inline bool stSynGuildActivityDegree_ProtoFunID_Parse(
    const ::std::string& name, stSynGuildActivityDegree_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynGuildActivityDegree_ProtoFunID>(
    stSynGuildActivityDegree_ProtoFunID_descriptor(), name, value);
}
enum stSynMemberChallengeNum_ProtoModID {
  stSynMemberChallengeNum_ProtoModID_ModID = 7
};
bool stSynMemberChallengeNum_ProtoModID_IsValid(int value);
const stSynMemberChallengeNum_ProtoModID stSynMemberChallengeNum_ProtoModID_ProtoModID_MIN = stSynMemberChallengeNum_ProtoModID_ModID;
const stSynMemberChallengeNum_ProtoModID stSynMemberChallengeNum_ProtoModID_ProtoModID_MAX = stSynMemberChallengeNum_ProtoModID_ModID;
const int stSynMemberChallengeNum_ProtoModID_ProtoModID_ARRAYSIZE = stSynMemberChallengeNum_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynMemberChallengeNum_ProtoModID_descriptor();
inline const ::std::string& stSynMemberChallengeNum_ProtoModID_Name(stSynMemberChallengeNum_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynMemberChallengeNum_ProtoModID_descriptor(), value);
}
inline bool stSynMemberChallengeNum_ProtoModID_Parse(
    const ::std::string& name, stSynMemberChallengeNum_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynMemberChallengeNum_ProtoModID>(
    stSynMemberChallengeNum_ProtoModID_descriptor(), name, value);
}
enum stSynMemberChallengeNum_ProtoFunID {
  stSynMemberChallengeNum_ProtoFunID_FunID = 72
};
bool stSynMemberChallengeNum_ProtoFunID_IsValid(int value);
const stSynMemberChallengeNum_ProtoFunID stSynMemberChallengeNum_ProtoFunID_ProtoFunID_MIN = stSynMemberChallengeNum_ProtoFunID_FunID;
const stSynMemberChallengeNum_ProtoFunID stSynMemberChallengeNum_ProtoFunID_ProtoFunID_MAX = stSynMemberChallengeNum_ProtoFunID_FunID;
const int stSynMemberChallengeNum_ProtoFunID_ProtoFunID_ARRAYSIZE = stSynMemberChallengeNum_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynMemberChallengeNum_ProtoFunID_descriptor();
inline const ::std::string& stSynMemberChallengeNum_ProtoFunID_Name(stSynMemberChallengeNum_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynMemberChallengeNum_ProtoFunID_descriptor(), value);
}
inline bool stSynMemberChallengeNum_ProtoFunID_Parse(
    const ::std::string& name, stSynMemberChallengeNum_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynMemberChallengeNum_ProtoFunID>(
    stSynMemberChallengeNum_ProtoFunID_descriptor(), name, value);
}
enum stSynMemberAssistNum_ProtoModID {
  stSynMemberAssistNum_ProtoModID_ModID = 7
};
bool stSynMemberAssistNum_ProtoModID_IsValid(int value);
const stSynMemberAssistNum_ProtoModID stSynMemberAssistNum_ProtoModID_ProtoModID_MIN = stSynMemberAssistNum_ProtoModID_ModID;
const stSynMemberAssistNum_ProtoModID stSynMemberAssistNum_ProtoModID_ProtoModID_MAX = stSynMemberAssistNum_ProtoModID_ModID;
const int stSynMemberAssistNum_ProtoModID_ProtoModID_ARRAYSIZE = stSynMemberAssistNum_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynMemberAssistNum_ProtoModID_descriptor();
inline const ::std::string& stSynMemberAssistNum_ProtoModID_Name(stSynMemberAssistNum_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynMemberAssistNum_ProtoModID_descriptor(), value);
}
inline bool stSynMemberAssistNum_ProtoModID_Parse(
    const ::std::string& name, stSynMemberAssistNum_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynMemberAssistNum_ProtoModID>(
    stSynMemberAssistNum_ProtoModID_descriptor(), name, value);
}
enum stSynMemberAssistNum_ProtoFunID {
  stSynMemberAssistNum_ProtoFunID_FunID = 73
};
bool stSynMemberAssistNum_ProtoFunID_IsValid(int value);
const stSynMemberAssistNum_ProtoFunID stSynMemberAssistNum_ProtoFunID_ProtoFunID_MIN = stSynMemberAssistNum_ProtoFunID_FunID;
const stSynMemberAssistNum_ProtoFunID stSynMemberAssistNum_ProtoFunID_ProtoFunID_MAX = stSynMemberAssistNum_ProtoFunID_FunID;
const int stSynMemberAssistNum_ProtoFunID_ProtoFunID_ARRAYSIZE = stSynMemberAssistNum_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynMemberAssistNum_ProtoFunID_descriptor();
inline const ::std::string& stSynMemberAssistNum_ProtoFunID_Name(stSynMemberAssistNum_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynMemberAssistNum_ProtoFunID_descriptor(), value);
}
inline bool stSynMemberAssistNum_ProtoFunID_Parse(
    const ::std::string& name, stSynMemberAssistNum_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynMemberAssistNum_ProtoFunID>(
    stSynMemberAssistNum_ProtoFunID_descriptor(), name, value);
}
enum stReqEnterGuildCopymap_ProtoModID {
  stReqEnterGuildCopymap_ProtoModID_ModID = 7
};
bool stReqEnterGuildCopymap_ProtoModID_IsValid(int value);
const stReqEnterGuildCopymap_ProtoModID stReqEnterGuildCopymap_ProtoModID_ProtoModID_MIN = stReqEnterGuildCopymap_ProtoModID_ModID;
const stReqEnterGuildCopymap_ProtoModID stReqEnterGuildCopymap_ProtoModID_ProtoModID_MAX = stReqEnterGuildCopymap_ProtoModID_ModID;
const int stReqEnterGuildCopymap_ProtoModID_ProtoModID_ARRAYSIZE = stReqEnterGuildCopymap_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqEnterGuildCopymap_ProtoModID_descriptor();
inline const ::std::string& stReqEnterGuildCopymap_ProtoModID_Name(stReqEnterGuildCopymap_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqEnterGuildCopymap_ProtoModID_descriptor(), value);
}
inline bool stReqEnterGuildCopymap_ProtoModID_Parse(
    const ::std::string& name, stReqEnterGuildCopymap_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqEnterGuildCopymap_ProtoModID>(
    stReqEnterGuildCopymap_ProtoModID_descriptor(), name, value);
}
enum stReqEnterGuildCopymap_ProtoFunID {
  stReqEnterGuildCopymap_ProtoFunID_FunID = 74
};
bool stReqEnterGuildCopymap_ProtoFunID_IsValid(int value);
const stReqEnterGuildCopymap_ProtoFunID stReqEnterGuildCopymap_ProtoFunID_ProtoFunID_MIN = stReqEnterGuildCopymap_ProtoFunID_FunID;
const stReqEnterGuildCopymap_ProtoFunID stReqEnterGuildCopymap_ProtoFunID_ProtoFunID_MAX = stReqEnterGuildCopymap_ProtoFunID_FunID;
const int stReqEnterGuildCopymap_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqEnterGuildCopymap_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqEnterGuildCopymap_ProtoFunID_descriptor();
inline const ::std::string& stReqEnterGuildCopymap_ProtoFunID_Name(stReqEnterGuildCopymap_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqEnterGuildCopymap_ProtoFunID_descriptor(), value);
}
inline bool stReqEnterGuildCopymap_ProtoFunID_Parse(
    const ::std::string& name, stReqEnterGuildCopymap_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqEnterGuildCopymap_ProtoFunID>(
    stReqEnterGuildCopymap_ProtoFunID_descriptor(), name, value);
}
enum stRetEnterGuildCopymapResult_eResult {
  stRetEnterGuildCopymapResult_eResult_eHas_Member_timeout = 1,
  stRetEnterGuildCopymapResult_eResult_eHas_Not_Start = 2,
  stRetEnterGuildCopymapResult_eResult_eHas_No_Team = 3,
  stRetEnterGuildCopymapResult_eResult_eNot_Leader = 4
};
bool stRetEnterGuildCopymapResult_eResult_IsValid(int value);
const stRetEnterGuildCopymapResult_eResult stRetEnterGuildCopymapResult_eResult_eResult_MIN = stRetEnterGuildCopymapResult_eResult_eHas_Member_timeout;
const stRetEnterGuildCopymapResult_eResult stRetEnterGuildCopymapResult_eResult_eResult_MAX = stRetEnterGuildCopymapResult_eResult_eNot_Leader;
const int stRetEnterGuildCopymapResult_eResult_eResult_ARRAYSIZE = stRetEnterGuildCopymapResult_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetEnterGuildCopymapResult_eResult_descriptor();
inline const ::std::string& stRetEnterGuildCopymapResult_eResult_Name(stRetEnterGuildCopymapResult_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetEnterGuildCopymapResult_eResult_descriptor(), value);
}
inline bool stRetEnterGuildCopymapResult_eResult_Parse(
    const ::std::string& name, stRetEnterGuildCopymapResult_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetEnterGuildCopymapResult_eResult>(
    stRetEnterGuildCopymapResult_eResult_descriptor(), name, value);
}
enum stRetEnterGuildCopymapResult_ProtoModID {
  stRetEnterGuildCopymapResult_ProtoModID_ModID = 7
};
bool stRetEnterGuildCopymapResult_ProtoModID_IsValid(int value);
const stRetEnterGuildCopymapResult_ProtoModID stRetEnterGuildCopymapResult_ProtoModID_ProtoModID_MIN = stRetEnterGuildCopymapResult_ProtoModID_ModID;
const stRetEnterGuildCopymapResult_ProtoModID stRetEnterGuildCopymapResult_ProtoModID_ProtoModID_MAX = stRetEnterGuildCopymapResult_ProtoModID_ModID;
const int stRetEnterGuildCopymapResult_ProtoModID_ProtoModID_ARRAYSIZE = stRetEnterGuildCopymapResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetEnterGuildCopymapResult_ProtoModID_descriptor();
inline const ::std::string& stRetEnterGuildCopymapResult_ProtoModID_Name(stRetEnterGuildCopymapResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetEnterGuildCopymapResult_ProtoModID_descriptor(), value);
}
inline bool stRetEnterGuildCopymapResult_ProtoModID_Parse(
    const ::std::string& name, stRetEnterGuildCopymapResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetEnterGuildCopymapResult_ProtoModID>(
    stRetEnterGuildCopymapResult_ProtoModID_descriptor(), name, value);
}
enum stRetEnterGuildCopymapResult_ProtoFunID {
  stRetEnterGuildCopymapResult_ProtoFunID_FunID = 75
};
bool stRetEnterGuildCopymapResult_ProtoFunID_IsValid(int value);
const stRetEnterGuildCopymapResult_ProtoFunID stRetEnterGuildCopymapResult_ProtoFunID_ProtoFunID_MIN = stRetEnterGuildCopymapResult_ProtoFunID_FunID;
const stRetEnterGuildCopymapResult_ProtoFunID stRetEnterGuildCopymapResult_ProtoFunID_ProtoFunID_MAX = stRetEnterGuildCopymapResult_ProtoFunID_FunID;
const int stRetEnterGuildCopymapResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stRetEnterGuildCopymapResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetEnterGuildCopymapResult_ProtoFunID_descriptor();
inline const ::std::string& stRetEnterGuildCopymapResult_ProtoFunID_Name(stRetEnterGuildCopymapResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetEnterGuildCopymapResult_ProtoFunID_descriptor(), value);
}
inline bool stRetEnterGuildCopymapResult_ProtoFunID_Parse(
    const ::std::string& name, stRetEnterGuildCopymapResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetEnterGuildCopymapResult_ProtoFunID>(
    stRetEnterGuildCopymapResult_ProtoFunID_descriptor(), name, value);
}
enum stStartGuildCopymap_ProtoModID {
  stStartGuildCopymap_ProtoModID_ModID = 7
};
bool stStartGuildCopymap_ProtoModID_IsValid(int value);
const stStartGuildCopymap_ProtoModID stStartGuildCopymap_ProtoModID_ProtoModID_MIN = stStartGuildCopymap_ProtoModID_ModID;
const stStartGuildCopymap_ProtoModID stStartGuildCopymap_ProtoModID_ProtoModID_MAX = stStartGuildCopymap_ProtoModID_ModID;
const int stStartGuildCopymap_ProtoModID_ProtoModID_ARRAYSIZE = stStartGuildCopymap_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stStartGuildCopymap_ProtoModID_descriptor();
inline const ::std::string& stStartGuildCopymap_ProtoModID_Name(stStartGuildCopymap_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stStartGuildCopymap_ProtoModID_descriptor(), value);
}
inline bool stStartGuildCopymap_ProtoModID_Parse(
    const ::std::string& name, stStartGuildCopymap_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stStartGuildCopymap_ProtoModID>(
    stStartGuildCopymap_ProtoModID_descriptor(), name, value);
}
enum stStartGuildCopymap_ProtoFunID {
  stStartGuildCopymap_ProtoFunID_FunID = 76
};
bool stStartGuildCopymap_ProtoFunID_IsValid(int value);
const stStartGuildCopymap_ProtoFunID stStartGuildCopymap_ProtoFunID_ProtoFunID_MIN = stStartGuildCopymap_ProtoFunID_FunID;
const stStartGuildCopymap_ProtoFunID stStartGuildCopymap_ProtoFunID_ProtoFunID_MAX = stStartGuildCopymap_ProtoFunID_FunID;
const int stStartGuildCopymap_ProtoFunID_ProtoFunID_ARRAYSIZE = stStartGuildCopymap_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stStartGuildCopymap_ProtoFunID_descriptor();
inline const ::std::string& stStartGuildCopymap_ProtoFunID_Name(stStartGuildCopymap_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stStartGuildCopymap_ProtoFunID_descriptor(), value);
}
inline bool stStartGuildCopymap_ProtoFunID_Parse(
    const ::std::string& name, stStartGuildCopymap_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stStartGuildCopymap_ProtoFunID>(
    stStartGuildCopymap_ProtoFunID_descriptor(), name, value);
}
enum stStartGuildCopymapResult_eResult {
  stStartGuildCopymapResult_eResult_eSuccess = 1,
  stStartGuildCopymapResult_eResult_eNot_Enough_Activity = 2,
  stStartGuildCopymapResult_eResult_eHas_Open = 3,
  stStartGuildCopymapResult_eResult_eHas_No_Right = 4,
  stStartGuildCopymapResult_eResult_eLevel_Not_Meet = 5
};
bool stStartGuildCopymapResult_eResult_IsValid(int value);
const stStartGuildCopymapResult_eResult stStartGuildCopymapResult_eResult_eResult_MIN = stStartGuildCopymapResult_eResult_eSuccess;
const stStartGuildCopymapResult_eResult stStartGuildCopymapResult_eResult_eResult_MAX = stStartGuildCopymapResult_eResult_eLevel_Not_Meet;
const int stStartGuildCopymapResult_eResult_eResult_ARRAYSIZE = stStartGuildCopymapResult_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stStartGuildCopymapResult_eResult_descriptor();
inline const ::std::string& stStartGuildCopymapResult_eResult_Name(stStartGuildCopymapResult_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stStartGuildCopymapResult_eResult_descriptor(), value);
}
inline bool stStartGuildCopymapResult_eResult_Parse(
    const ::std::string& name, stStartGuildCopymapResult_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stStartGuildCopymapResult_eResult>(
    stStartGuildCopymapResult_eResult_descriptor(), name, value);
}
enum stStartGuildCopymapResult_ProtoModID {
  stStartGuildCopymapResult_ProtoModID_ModID = 7
};
bool stStartGuildCopymapResult_ProtoModID_IsValid(int value);
const stStartGuildCopymapResult_ProtoModID stStartGuildCopymapResult_ProtoModID_ProtoModID_MIN = stStartGuildCopymapResult_ProtoModID_ModID;
const stStartGuildCopymapResult_ProtoModID stStartGuildCopymapResult_ProtoModID_ProtoModID_MAX = stStartGuildCopymapResult_ProtoModID_ModID;
const int stStartGuildCopymapResult_ProtoModID_ProtoModID_ARRAYSIZE = stStartGuildCopymapResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stStartGuildCopymapResult_ProtoModID_descriptor();
inline const ::std::string& stStartGuildCopymapResult_ProtoModID_Name(stStartGuildCopymapResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stStartGuildCopymapResult_ProtoModID_descriptor(), value);
}
inline bool stStartGuildCopymapResult_ProtoModID_Parse(
    const ::std::string& name, stStartGuildCopymapResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stStartGuildCopymapResult_ProtoModID>(
    stStartGuildCopymapResult_ProtoModID_descriptor(), name, value);
}
enum stStartGuildCopymapResult_ProtoFunID {
  stStartGuildCopymapResult_ProtoFunID_FunID = 77
};
bool stStartGuildCopymapResult_ProtoFunID_IsValid(int value);
const stStartGuildCopymapResult_ProtoFunID stStartGuildCopymapResult_ProtoFunID_ProtoFunID_MIN = stStartGuildCopymapResult_ProtoFunID_FunID;
const stStartGuildCopymapResult_ProtoFunID stStartGuildCopymapResult_ProtoFunID_ProtoFunID_MAX = stStartGuildCopymapResult_ProtoFunID_FunID;
const int stStartGuildCopymapResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stStartGuildCopymapResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stStartGuildCopymapResult_ProtoFunID_descriptor();
inline const ::std::string& stStartGuildCopymapResult_ProtoFunID_Name(stStartGuildCopymapResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stStartGuildCopymapResult_ProtoFunID_descriptor(), value);
}
inline bool stStartGuildCopymapResult_ProtoFunID_Parse(
    const ::std::string& name, stStartGuildCopymapResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stStartGuildCopymapResult_ProtoFunID>(
    stStartGuildCopymapResult_ProtoFunID_descriptor(), name, value);
}
enum stInviteTeamInGuildChannel_ProtoModID {
  stInviteTeamInGuildChannel_ProtoModID_ModID = 7
};
bool stInviteTeamInGuildChannel_ProtoModID_IsValid(int value);
const stInviteTeamInGuildChannel_ProtoModID stInviteTeamInGuildChannel_ProtoModID_ProtoModID_MIN = stInviteTeamInGuildChannel_ProtoModID_ModID;
const stInviteTeamInGuildChannel_ProtoModID stInviteTeamInGuildChannel_ProtoModID_ProtoModID_MAX = stInviteTeamInGuildChannel_ProtoModID_ModID;
const int stInviteTeamInGuildChannel_ProtoModID_ProtoModID_ARRAYSIZE = stInviteTeamInGuildChannel_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stInviteTeamInGuildChannel_ProtoModID_descriptor();
inline const ::std::string& stInviteTeamInGuildChannel_ProtoModID_Name(stInviteTeamInGuildChannel_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stInviteTeamInGuildChannel_ProtoModID_descriptor(), value);
}
inline bool stInviteTeamInGuildChannel_ProtoModID_Parse(
    const ::std::string& name, stInviteTeamInGuildChannel_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stInviteTeamInGuildChannel_ProtoModID>(
    stInviteTeamInGuildChannel_ProtoModID_descriptor(), name, value);
}
enum stInviteTeamInGuildChannel_ProtoFunID {
  stInviteTeamInGuildChannel_ProtoFunID_FunID = 78
};
bool stInviteTeamInGuildChannel_ProtoFunID_IsValid(int value);
const stInviteTeamInGuildChannel_ProtoFunID stInviteTeamInGuildChannel_ProtoFunID_ProtoFunID_MIN = stInviteTeamInGuildChannel_ProtoFunID_FunID;
const stInviteTeamInGuildChannel_ProtoFunID stInviteTeamInGuildChannel_ProtoFunID_ProtoFunID_MAX = stInviteTeamInGuildChannel_ProtoFunID_FunID;
const int stInviteTeamInGuildChannel_ProtoFunID_ProtoFunID_ARRAYSIZE = stInviteTeamInGuildChannel_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stInviteTeamInGuildChannel_ProtoFunID_descriptor();
inline const ::std::string& stInviteTeamInGuildChannel_ProtoFunID_Name(stInviteTeamInGuildChannel_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stInviteTeamInGuildChannel_ProtoFunID_descriptor(), value);
}
inline bool stInviteTeamInGuildChannel_ProtoFunID_Parse(
    const ::std::string& name, stInviteTeamInGuildChannel_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stInviteTeamInGuildChannel_ProtoFunID>(
    stInviteTeamInGuildChannel_ProtoFunID_descriptor(), name, value);
}
enum stNotifyGuildMemContribute_ProtoModID {
  stNotifyGuildMemContribute_ProtoModID_ModID = 7
};
bool stNotifyGuildMemContribute_ProtoModID_IsValid(int value);
const stNotifyGuildMemContribute_ProtoModID stNotifyGuildMemContribute_ProtoModID_ProtoModID_MIN = stNotifyGuildMemContribute_ProtoModID_ModID;
const stNotifyGuildMemContribute_ProtoModID stNotifyGuildMemContribute_ProtoModID_ProtoModID_MAX = stNotifyGuildMemContribute_ProtoModID_ModID;
const int stNotifyGuildMemContribute_ProtoModID_ProtoModID_ARRAYSIZE = stNotifyGuildMemContribute_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyGuildMemContribute_ProtoModID_descriptor();
inline const ::std::string& stNotifyGuildMemContribute_ProtoModID_Name(stNotifyGuildMemContribute_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyGuildMemContribute_ProtoModID_descriptor(), value);
}
inline bool stNotifyGuildMemContribute_ProtoModID_Parse(
    const ::std::string& name, stNotifyGuildMemContribute_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyGuildMemContribute_ProtoModID>(
    stNotifyGuildMemContribute_ProtoModID_descriptor(), name, value);
}
enum stNotifyGuildMemContribute_ProtoFunID {
  stNotifyGuildMemContribute_ProtoFunID_FunID = 79
};
bool stNotifyGuildMemContribute_ProtoFunID_IsValid(int value);
const stNotifyGuildMemContribute_ProtoFunID stNotifyGuildMemContribute_ProtoFunID_ProtoFunID_MIN = stNotifyGuildMemContribute_ProtoFunID_FunID;
const stNotifyGuildMemContribute_ProtoFunID stNotifyGuildMemContribute_ProtoFunID_ProtoFunID_MAX = stNotifyGuildMemContribute_ProtoFunID_FunID;
const int stNotifyGuildMemContribute_ProtoFunID_ProtoFunID_ARRAYSIZE = stNotifyGuildMemContribute_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyGuildMemContribute_ProtoFunID_descriptor();
inline const ::std::string& stNotifyGuildMemContribute_ProtoFunID_Name(stNotifyGuildMemContribute_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyGuildMemContribute_ProtoFunID_descriptor(), value);
}
inline bool stNotifyGuildMemContribute_ProtoFunID_Parse(
    const ::std::string& name, stNotifyGuildMemContribute_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyGuildMemContribute_ProtoFunID>(
    stNotifyGuildMemContribute_ProtoFunID_descriptor(), name, value);
}
enum stNotifyGuildMemActivityDegree_ProtoModID {
  stNotifyGuildMemActivityDegree_ProtoModID_ModID = 7
};
bool stNotifyGuildMemActivityDegree_ProtoModID_IsValid(int value);
const stNotifyGuildMemActivityDegree_ProtoModID stNotifyGuildMemActivityDegree_ProtoModID_ProtoModID_MIN = stNotifyGuildMemActivityDegree_ProtoModID_ModID;
const stNotifyGuildMemActivityDegree_ProtoModID stNotifyGuildMemActivityDegree_ProtoModID_ProtoModID_MAX = stNotifyGuildMemActivityDegree_ProtoModID_ModID;
const int stNotifyGuildMemActivityDegree_ProtoModID_ProtoModID_ARRAYSIZE = stNotifyGuildMemActivityDegree_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyGuildMemActivityDegree_ProtoModID_descriptor();
inline const ::std::string& stNotifyGuildMemActivityDegree_ProtoModID_Name(stNotifyGuildMemActivityDegree_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyGuildMemActivityDegree_ProtoModID_descriptor(), value);
}
inline bool stNotifyGuildMemActivityDegree_ProtoModID_Parse(
    const ::std::string& name, stNotifyGuildMemActivityDegree_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyGuildMemActivityDegree_ProtoModID>(
    stNotifyGuildMemActivityDegree_ProtoModID_descriptor(), name, value);
}
enum stNotifyGuildMemActivityDegree_ProtoFunID {
  stNotifyGuildMemActivityDegree_ProtoFunID_FunID = 80
};
bool stNotifyGuildMemActivityDegree_ProtoFunID_IsValid(int value);
const stNotifyGuildMemActivityDegree_ProtoFunID stNotifyGuildMemActivityDegree_ProtoFunID_ProtoFunID_MIN = stNotifyGuildMemActivityDegree_ProtoFunID_FunID;
const stNotifyGuildMemActivityDegree_ProtoFunID stNotifyGuildMemActivityDegree_ProtoFunID_ProtoFunID_MAX = stNotifyGuildMemActivityDegree_ProtoFunID_FunID;
const int stNotifyGuildMemActivityDegree_ProtoFunID_ProtoFunID_ARRAYSIZE = stNotifyGuildMemActivityDegree_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyGuildMemActivityDegree_ProtoFunID_descriptor();
inline const ::std::string& stNotifyGuildMemActivityDegree_ProtoFunID_Name(stNotifyGuildMemActivityDegree_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyGuildMemActivityDegree_ProtoFunID_descriptor(), value);
}
inline bool stNotifyGuildMemActivityDegree_ProtoFunID_Parse(
    const ::std::string& name, stNotifyGuildMemActivityDegree_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyGuildMemActivityDegree_ProtoFunID>(
    stNotifyGuildMemActivityDegree_ProtoFunID_descriptor(), name, value);
}
enum stReqGuildManorFightWin_ProtoModID {
  stReqGuildManorFightWin_ProtoModID_ModID = 7
};
bool stReqGuildManorFightWin_ProtoModID_IsValid(int value);
const stReqGuildManorFightWin_ProtoModID stReqGuildManorFightWin_ProtoModID_ProtoModID_MIN = stReqGuildManorFightWin_ProtoModID_ModID;
const stReqGuildManorFightWin_ProtoModID stReqGuildManorFightWin_ProtoModID_ProtoModID_MAX = stReqGuildManorFightWin_ProtoModID_ModID;
const int stReqGuildManorFightWin_ProtoModID_ProtoModID_ARRAYSIZE = stReqGuildManorFightWin_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqGuildManorFightWin_ProtoModID_descriptor();
inline const ::std::string& stReqGuildManorFightWin_ProtoModID_Name(stReqGuildManorFightWin_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqGuildManorFightWin_ProtoModID_descriptor(), value);
}
inline bool stReqGuildManorFightWin_ProtoModID_Parse(
    const ::std::string& name, stReqGuildManorFightWin_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqGuildManorFightWin_ProtoModID>(
    stReqGuildManorFightWin_ProtoModID_descriptor(), name, value);
}
enum stReqGuildManorFightWin_ProtoFunID {
  stReqGuildManorFightWin_ProtoFunID_FunID = 81
};
bool stReqGuildManorFightWin_ProtoFunID_IsValid(int value);
const stReqGuildManorFightWin_ProtoFunID stReqGuildManorFightWin_ProtoFunID_ProtoFunID_MIN = stReqGuildManorFightWin_ProtoFunID_FunID;
const stReqGuildManorFightWin_ProtoFunID stReqGuildManorFightWin_ProtoFunID_ProtoFunID_MAX = stReqGuildManorFightWin_ProtoFunID_FunID;
const int stReqGuildManorFightWin_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqGuildManorFightWin_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqGuildManorFightWin_ProtoFunID_descriptor();
inline const ::std::string& stReqGuildManorFightWin_ProtoFunID_Name(stReqGuildManorFightWin_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqGuildManorFightWin_ProtoFunID_descriptor(), value);
}
inline bool stReqGuildManorFightWin_ProtoFunID_Parse(
    const ::std::string& name, stReqGuildManorFightWin_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqGuildManorFightWin_ProtoFunID>(
    stReqGuildManorFightWin_ProtoFunID_descriptor(), name, value);
}
enum stRetGuildManorFightInfo_ProtoModID {
  stRetGuildManorFightInfo_ProtoModID_ModID = 7
};
bool stRetGuildManorFightInfo_ProtoModID_IsValid(int value);
const stRetGuildManorFightInfo_ProtoModID stRetGuildManorFightInfo_ProtoModID_ProtoModID_MIN = stRetGuildManorFightInfo_ProtoModID_ModID;
const stRetGuildManorFightInfo_ProtoModID stRetGuildManorFightInfo_ProtoModID_ProtoModID_MAX = stRetGuildManorFightInfo_ProtoModID_ModID;
const int stRetGuildManorFightInfo_ProtoModID_ProtoModID_ARRAYSIZE = stRetGuildManorFightInfo_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetGuildManorFightInfo_ProtoModID_descriptor();
inline const ::std::string& stRetGuildManorFightInfo_ProtoModID_Name(stRetGuildManorFightInfo_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetGuildManorFightInfo_ProtoModID_descriptor(), value);
}
inline bool stRetGuildManorFightInfo_ProtoModID_Parse(
    const ::std::string& name, stRetGuildManorFightInfo_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetGuildManorFightInfo_ProtoModID>(
    stRetGuildManorFightInfo_ProtoModID_descriptor(), name, value);
}
enum stRetGuildManorFightInfo_ProtoFunID {
  stRetGuildManorFightInfo_ProtoFunID_FunID = 82
};
bool stRetGuildManorFightInfo_ProtoFunID_IsValid(int value);
const stRetGuildManorFightInfo_ProtoFunID stRetGuildManorFightInfo_ProtoFunID_ProtoFunID_MIN = stRetGuildManorFightInfo_ProtoFunID_FunID;
const stRetGuildManorFightInfo_ProtoFunID stRetGuildManorFightInfo_ProtoFunID_ProtoFunID_MAX = stRetGuildManorFightInfo_ProtoFunID_FunID;
const int stRetGuildManorFightInfo_ProtoFunID_ProtoFunID_ARRAYSIZE = stRetGuildManorFightInfo_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetGuildManorFightInfo_ProtoFunID_descriptor();
inline const ::std::string& stRetGuildManorFightInfo_ProtoFunID_Name(stRetGuildManorFightInfo_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetGuildManorFightInfo_ProtoFunID_descriptor(), value);
}
inline bool stRetGuildManorFightInfo_ProtoFunID_Parse(
    const ::std::string& name, stRetGuildManorFightInfo_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetGuildManorFightInfo_ProtoFunID>(
    stRetGuildManorFightInfo_ProtoFunID_descriptor(), name, value);
}
enum stReqOpenApplyManorFightWin_ProtoModID {
  stReqOpenApplyManorFightWin_ProtoModID_ModID = 7
};
bool stReqOpenApplyManorFightWin_ProtoModID_IsValid(int value);
const stReqOpenApplyManorFightWin_ProtoModID stReqOpenApplyManorFightWin_ProtoModID_ProtoModID_MIN = stReqOpenApplyManorFightWin_ProtoModID_ModID;
const stReqOpenApplyManorFightWin_ProtoModID stReqOpenApplyManorFightWin_ProtoModID_ProtoModID_MAX = stReqOpenApplyManorFightWin_ProtoModID_ModID;
const int stReqOpenApplyManorFightWin_ProtoModID_ProtoModID_ARRAYSIZE = stReqOpenApplyManorFightWin_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqOpenApplyManorFightWin_ProtoModID_descriptor();
inline const ::std::string& stReqOpenApplyManorFightWin_ProtoModID_Name(stReqOpenApplyManorFightWin_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqOpenApplyManorFightWin_ProtoModID_descriptor(), value);
}
inline bool stReqOpenApplyManorFightWin_ProtoModID_Parse(
    const ::std::string& name, stReqOpenApplyManorFightWin_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqOpenApplyManorFightWin_ProtoModID>(
    stReqOpenApplyManorFightWin_ProtoModID_descriptor(), name, value);
}
enum stReqOpenApplyManorFightWin_ProtoFunID {
  stReqOpenApplyManorFightWin_ProtoFunID_FunID = 83
};
bool stReqOpenApplyManorFightWin_ProtoFunID_IsValid(int value);
const stReqOpenApplyManorFightWin_ProtoFunID stReqOpenApplyManorFightWin_ProtoFunID_ProtoFunID_MIN = stReqOpenApplyManorFightWin_ProtoFunID_FunID;
const stReqOpenApplyManorFightWin_ProtoFunID stReqOpenApplyManorFightWin_ProtoFunID_ProtoFunID_MAX = stReqOpenApplyManorFightWin_ProtoFunID_FunID;
const int stReqOpenApplyManorFightWin_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqOpenApplyManorFightWin_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqOpenApplyManorFightWin_ProtoFunID_descriptor();
inline const ::std::string& stReqOpenApplyManorFightWin_ProtoFunID_Name(stReqOpenApplyManorFightWin_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqOpenApplyManorFightWin_ProtoFunID_descriptor(), value);
}
inline bool stReqOpenApplyManorFightWin_ProtoFunID_Parse(
    const ::std::string& name, stReqOpenApplyManorFightWin_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqOpenApplyManorFightWin_ProtoFunID>(
    stReqOpenApplyManorFightWin_ProtoFunID_descriptor(), name, value);
}
enum stApplyManorWinInfo_ProtoModID {
  stApplyManorWinInfo_ProtoModID_ModID = 7
};
bool stApplyManorWinInfo_ProtoModID_IsValid(int value);
const stApplyManorWinInfo_ProtoModID stApplyManorWinInfo_ProtoModID_ProtoModID_MIN = stApplyManorWinInfo_ProtoModID_ModID;
const stApplyManorWinInfo_ProtoModID stApplyManorWinInfo_ProtoModID_ProtoModID_MAX = stApplyManorWinInfo_ProtoModID_ModID;
const int stApplyManorWinInfo_ProtoModID_ProtoModID_ARRAYSIZE = stApplyManorWinInfo_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stApplyManorWinInfo_ProtoModID_descriptor();
inline const ::std::string& stApplyManorWinInfo_ProtoModID_Name(stApplyManorWinInfo_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stApplyManorWinInfo_ProtoModID_descriptor(), value);
}
inline bool stApplyManorWinInfo_ProtoModID_Parse(
    const ::std::string& name, stApplyManorWinInfo_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stApplyManorWinInfo_ProtoModID>(
    stApplyManorWinInfo_ProtoModID_descriptor(), name, value);
}
enum stApplyManorWinInfo_ProtoFunID {
  stApplyManorWinInfo_ProtoFunID_FunID = 84
};
bool stApplyManorWinInfo_ProtoFunID_IsValid(int value);
const stApplyManorWinInfo_ProtoFunID stApplyManorWinInfo_ProtoFunID_ProtoFunID_MIN = stApplyManorWinInfo_ProtoFunID_FunID;
const stApplyManorWinInfo_ProtoFunID stApplyManorWinInfo_ProtoFunID_ProtoFunID_MAX = stApplyManorWinInfo_ProtoFunID_FunID;
const int stApplyManorWinInfo_ProtoFunID_ProtoFunID_ARRAYSIZE = stApplyManorWinInfo_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stApplyManorWinInfo_ProtoFunID_descriptor();
inline const ::std::string& stApplyManorWinInfo_ProtoFunID_Name(stApplyManorWinInfo_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stApplyManorWinInfo_ProtoFunID_descriptor(), value);
}
inline bool stApplyManorWinInfo_ProtoFunID_Parse(
    const ::std::string& name, stApplyManorWinInfo_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stApplyManorWinInfo_ProtoFunID>(
    stApplyManorWinInfo_ProtoFunID_descriptor(), name, value);
}
enum stRefreshManorApplyInfo_ProtoModID {
  stRefreshManorApplyInfo_ProtoModID_ModID = 7
};
bool stRefreshManorApplyInfo_ProtoModID_IsValid(int value);
const stRefreshManorApplyInfo_ProtoModID stRefreshManorApplyInfo_ProtoModID_ProtoModID_MIN = stRefreshManorApplyInfo_ProtoModID_ModID;
const stRefreshManorApplyInfo_ProtoModID stRefreshManorApplyInfo_ProtoModID_ProtoModID_MAX = stRefreshManorApplyInfo_ProtoModID_ModID;
const int stRefreshManorApplyInfo_ProtoModID_ProtoModID_ARRAYSIZE = stRefreshManorApplyInfo_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRefreshManorApplyInfo_ProtoModID_descriptor();
inline const ::std::string& stRefreshManorApplyInfo_ProtoModID_Name(stRefreshManorApplyInfo_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRefreshManorApplyInfo_ProtoModID_descriptor(), value);
}
inline bool stRefreshManorApplyInfo_ProtoModID_Parse(
    const ::std::string& name, stRefreshManorApplyInfo_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRefreshManorApplyInfo_ProtoModID>(
    stRefreshManorApplyInfo_ProtoModID_descriptor(), name, value);
}
enum stRefreshManorApplyInfo_ProtoFunID {
  stRefreshManorApplyInfo_ProtoFunID_FunID = 85
};
bool stRefreshManorApplyInfo_ProtoFunID_IsValid(int value);
const stRefreshManorApplyInfo_ProtoFunID stRefreshManorApplyInfo_ProtoFunID_ProtoFunID_MIN = stRefreshManorApplyInfo_ProtoFunID_FunID;
const stRefreshManorApplyInfo_ProtoFunID stRefreshManorApplyInfo_ProtoFunID_ProtoFunID_MAX = stRefreshManorApplyInfo_ProtoFunID_FunID;
const int stRefreshManorApplyInfo_ProtoFunID_ProtoFunID_ARRAYSIZE = stRefreshManorApplyInfo_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRefreshManorApplyInfo_ProtoFunID_descriptor();
inline const ::std::string& stRefreshManorApplyInfo_ProtoFunID_Name(stRefreshManorApplyInfo_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRefreshManorApplyInfo_ProtoFunID_descriptor(), value);
}
inline bool stRefreshManorApplyInfo_ProtoFunID_Parse(
    const ::std::string& name, stRefreshManorApplyInfo_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRefreshManorApplyInfo_ProtoFunID>(
    stRefreshManorApplyInfo_ProtoFunID_descriptor(), name, value);
}
enum stRetManorApplyInfo_ProtoModID {
  stRetManorApplyInfo_ProtoModID_ModID = 7
};
bool stRetManorApplyInfo_ProtoModID_IsValid(int value);
const stRetManorApplyInfo_ProtoModID stRetManorApplyInfo_ProtoModID_ProtoModID_MIN = stRetManorApplyInfo_ProtoModID_ModID;
const stRetManorApplyInfo_ProtoModID stRetManorApplyInfo_ProtoModID_ProtoModID_MAX = stRetManorApplyInfo_ProtoModID_ModID;
const int stRetManorApplyInfo_ProtoModID_ProtoModID_ARRAYSIZE = stRetManorApplyInfo_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetManorApplyInfo_ProtoModID_descriptor();
inline const ::std::string& stRetManorApplyInfo_ProtoModID_Name(stRetManorApplyInfo_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetManorApplyInfo_ProtoModID_descriptor(), value);
}
inline bool stRetManorApplyInfo_ProtoModID_Parse(
    const ::std::string& name, stRetManorApplyInfo_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetManorApplyInfo_ProtoModID>(
    stRetManorApplyInfo_ProtoModID_descriptor(), name, value);
}
enum stRetManorApplyInfo_ProtoFunID {
  stRetManorApplyInfo_ProtoFunID_FunID = 86
};
bool stRetManorApplyInfo_ProtoFunID_IsValid(int value);
const stRetManorApplyInfo_ProtoFunID stRetManorApplyInfo_ProtoFunID_ProtoFunID_MIN = stRetManorApplyInfo_ProtoFunID_FunID;
const stRetManorApplyInfo_ProtoFunID stRetManorApplyInfo_ProtoFunID_ProtoFunID_MAX = stRetManorApplyInfo_ProtoFunID_FunID;
const int stRetManorApplyInfo_ProtoFunID_ProtoFunID_ARRAYSIZE = stRetManorApplyInfo_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetManorApplyInfo_ProtoFunID_descriptor();
inline const ::std::string& stRetManorApplyInfo_ProtoFunID_Name(stRetManorApplyInfo_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetManorApplyInfo_ProtoFunID_descriptor(), value);
}
inline bool stRetManorApplyInfo_ProtoFunID_Parse(
    const ::std::string& name, stRetManorApplyInfo_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetManorApplyInfo_ProtoFunID>(
    stRetManorApplyInfo_ProtoFunID_descriptor(), name, value);
}
enum stApplyManorFight_ProtoModID {
  stApplyManorFight_ProtoModID_ModID = 7
};
bool stApplyManorFight_ProtoModID_IsValid(int value);
const stApplyManorFight_ProtoModID stApplyManorFight_ProtoModID_ProtoModID_MIN = stApplyManorFight_ProtoModID_ModID;
const stApplyManorFight_ProtoModID stApplyManorFight_ProtoModID_ProtoModID_MAX = stApplyManorFight_ProtoModID_ModID;
const int stApplyManorFight_ProtoModID_ProtoModID_ARRAYSIZE = stApplyManorFight_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stApplyManorFight_ProtoModID_descriptor();
inline const ::std::string& stApplyManorFight_ProtoModID_Name(stApplyManorFight_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stApplyManorFight_ProtoModID_descriptor(), value);
}
inline bool stApplyManorFight_ProtoModID_Parse(
    const ::std::string& name, stApplyManorFight_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stApplyManorFight_ProtoModID>(
    stApplyManorFight_ProtoModID_descriptor(), name, value);
}
enum stApplyManorFight_ProtoFunID {
  stApplyManorFight_ProtoFunID_FunID = 87
};
bool stApplyManorFight_ProtoFunID_IsValid(int value);
const stApplyManorFight_ProtoFunID stApplyManorFight_ProtoFunID_ProtoFunID_MIN = stApplyManorFight_ProtoFunID_FunID;
const stApplyManorFight_ProtoFunID stApplyManorFight_ProtoFunID_ProtoFunID_MAX = stApplyManorFight_ProtoFunID_FunID;
const int stApplyManorFight_ProtoFunID_ProtoFunID_ARRAYSIZE = stApplyManorFight_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stApplyManorFight_ProtoFunID_descriptor();
inline const ::std::string& stApplyManorFight_ProtoFunID_Name(stApplyManorFight_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stApplyManorFight_ProtoFunID_descriptor(), value);
}
inline bool stApplyManorFight_ProtoFunID_Parse(
    const ::std::string& name, stApplyManorFight_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stApplyManorFight_ProtoFunID>(
    stApplyManorFight_ProtoFunID_descriptor(), name, value);
}
enum stApplyManorFightRet_eResult {
  stApplyManorFightRet_eResult_eSuccess = 1,
  stApplyManorFightRet_eResult_eRes_Not_Enough = 2,
  stApplyManorFightRet_eResult_eOut_Time = 3,
  stApplyManorFightRet_eResult_eHas_No_Right = 4,
  stApplyManorFightRet_eResult_eManor_ID_Error = 5,
  stApplyManorFightRet_eResult_eManor_Has_Apply = 6
};
bool stApplyManorFightRet_eResult_IsValid(int value);
const stApplyManorFightRet_eResult stApplyManorFightRet_eResult_eResult_MIN = stApplyManorFightRet_eResult_eSuccess;
const stApplyManorFightRet_eResult stApplyManorFightRet_eResult_eResult_MAX = stApplyManorFightRet_eResult_eManor_Has_Apply;
const int stApplyManorFightRet_eResult_eResult_ARRAYSIZE = stApplyManorFightRet_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stApplyManorFightRet_eResult_descriptor();
inline const ::std::string& stApplyManorFightRet_eResult_Name(stApplyManorFightRet_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stApplyManorFightRet_eResult_descriptor(), value);
}
inline bool stApplyManorFightRet_eResult_Parse(
    const ::std::string& name, stApplyManorFightRet_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stApplyManorFightRet_eResult>(
    stApplyManorFightRet_eResult_descriptor(), name, value);
}
enum stApplyManorFightRet_ProtoModID {
  stApplyManorFightRet_ProtoModID_ModID = 7
};
bool stApplyManorFightRet_ProtoModID_IsValid(int value);
const stApplyManorFightRet_ProtoModID stApplyManorFightRet_ProtoModID_ProtoModID_MIN = stApplyManorFightRet_ProtoModID_ModID;
const stApplyManorFightRet_ProtoModID stApplyManorFightRet_ProtoModID_ProtoModID_MAX = stApplyManorFightRet_ProtoModID_ModID;
const int stApplyManorFightRet_ProtoModID_ProtoModID_ARRAYSIZE = stApplyManorFightRet_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stApplyManorFightRet_ProtoModID_descriptor();
inline const ::std::string& stApplyManorFightRet_ProtoModID_Name(stApplyManorFightRet_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stApplyManorFightRet_ProtoModID_descriptor(), value);
}
inline bool stApplyManorFightRet_ProtoModID_Parse(
    const ::std::string& name, stApplyManorFightRet_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stApplyManorFightRet_ProtoModID>(
    stApplyManorFightRet_ProtoModID_descriptor(), name, value);
}
enum stApplyManorFightRet_ProtoFunID {
  stApplyManorFightRet_ProtoFunID_FunID = 88
};
bool stApplyManorFightRet_ProtoFunID_IsValid(int value);
const stApplyManorFightRet_ProtoFunID stApplyManorFightRet_ProtoFunID_ProtoFunID_MIN = stApplyManorFightRet_ProtoFunID_FunID;
const stApplyManorFightRet_ProtoFunID stApplyManorFightRet_ProtoFunID_ProtoFunID_MAX = stApplyManorFightRet_ProtoFunID_FunID;
const int stApplyManorFightRet_ProtoFunID_ProtoFunID_ARRAYSIZE = stApplyManorFightRet_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stApplyManorFightRet_ProtoFunID_descriptor();
inline const ::std::string& stApplyManorFightRet_ProtoFunID_Name(stApplyManorFightRet_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stApplyManorFightRet_ProtoFunID_descriptor(), value);
}
inline bool stApplyManorFightRet_ProtoFunID_Parse(
    const ::std::string& name, stApplyManorFightRet_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stApplyManorFightRet_ProtoFunID>(
    stApplyManorFightRet_ProtoFunID_descriptor(), name, value);
}
enum stReqManorFightWin_ProtoModID {
  stReqManorFightWin_ProtoModID_ModID = 7
};
bool stReqManorFightWin_ProtoModID_IsValid(int value);
const stReqManorFightWin_ProtoModID stReqManorFightWin_ProtoModID_ProtoModID_MIN = stReqManorFightWin_ProtoModID_ModID;
const stReqManorFightWin_ProtoModID stReqManorFightWin_ProtoModID_ProtoModID_MAX = stReqManorFightWin_ProtoModID_ModID;
const int stReqManorFightWin_ProtoModID_ProtoModID_ARRAYSIZE = stReqManorFightWin_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqManorFightWin_ProtoModID_descriptor();
inline const ::std::string& stReqManorFightWin_ProtoModID_Name(stReqManorFightWin_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqManorFightWin_ProtoModID_descriptor(), value);
}
inline bool stReqManorFightWin_ProtoModID_Parse(
    const ::std::string& name, stReqManorFightWin_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqManorFightWin_ProtoModID>(
    stReqManorFightWin_ProtoModID_descriptor(), name, value);
}
enum stReqManorFightWin_ProtoFunID {
  stReqManorFightWin_ProtoFunID_FunID = 89
};
bool stReqManorFightWin_ProtoFunID_IsValid(int value);
const stReqManorFightWin_ProtoFunID stReqManorFightWin_ProtoFunID_ProtoFunID_MIN = stReqManorFightWin_ProtoFunID_FunID;
const stReqManorFightWin_ProtoFunID stReqManorFightWin_ProtoFunID_ProtoFunID_MAX = stReqManorFightWin_ProtoFunID_FunID;
const int stReqManorFightWin_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqManorFightWin_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqManorFightWin_ProtoFunID_descriptor();
inline const ::std::string& stReqManorFightWin_ProtoFunID_Name(stReqManorFightWin_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqManorFightWin_ProtoFunID_descriptor(), value);
}
inline bool stReqManorFightWin_ProtoFunID_Parse(
    const ::std::string& name, stReqManorFightWin_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqManorFightWin_ProtoFunID>(
    stReqManorFightWin_ProtoFunID_descriptor(), name, value);
}
enum stRetManorFightWinInfo_ProtoModID {
  stRetManorFightWinInfo_ProtoModID_ModID = 7
};
bool stRetManorFightWinInfo_ProtoModID_IsValid(int value);
const stRetManorFightWinInfo_ProtoModID stRetManorFightWinInfo_ProtoModID_ProtoModID_MIN = stRetManorFightWinInfo_ProtoModID_ModID;
const stRetManorFightWinInfo_ProtoModID stRetManorFightWinInfo_ProtoModID_ProtoModID_MAX = stRetManorFightWinInfo_ProtoModID_ModID;
const int stRetManorFightWinInfo_ProtoModID_ProtoModID_ARRAYSIZE = stRetManorFightWinInfo_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetManorFightWinInfo_ProtoModID_descriptor();
inline const ::std::string& stRetManorFightWinInfo_ProtoModID_Name(stRetManorFightWinInfo_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetManorFightWinInfo_ProtoModID_descriptor(), value);
}
inline bool stRetManorFightWinInfo_ProtoModID_Parse(
    const ::std::string& name, stRetManorFightWinInfo_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetManorFightWinInfo_ProtoModID>(
    stRetManorFightWinInfo_ProtoModID_descriptor(), name, value);
}
enum stRetManorFightWinInfo_ProtoFunID {
  stRetManorFightWinInfo_ProtoFunID_FunID = 90
};
bool stRetManorFightWinInfo_ProtoFunID_IsValid(int value);
const stRetManorFightWinInfo_ProtoFunID stRetManorFightWinInfo_ProtoFunID_ProtoFunID_MIN = stRetManorFightWinInfo_ProtoFunID_FunID;
const stRetManorFightWinInfo_ProtoFunID stRetManorFightWinInfo_ProtoFunID_ProtoFunID_MAX = stRetManorFightWinInfo_ProtoFunID_FunID;
const int stRetManorFightWinInfo_ProtoFunID_ProtoFunID_ARRAYSIZE = stRetManorFightWinInfo_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetManorFightWinInfo_ProtoFunID_descriptor();
inline const ::std::string& stRetManorFightWinInfo_ProtoFunID_Name(stRetManorFightWinInfo_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetManorFightWinInfo_ProtoFunID_descriptor(), value);
}
inline bool stRetManorFightWinInfo_ProtoFunID_Parse(
    const ::std::string& name, stRetManorFightWinInfo_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetManorFightWinInfo_ProtoFunID>(
    stRetManorFightWinInfo_ProtoFunID_descriptor(), name, value);
}
enum stReqManorFightFormation_ProtoModID {
  stReqManorFightFormation_ProtoModID_ModID = 7
};
bool stReqManorFightFormation_ProtoModID_IsValid(int value);
const stReqManorFightFormation_ProtoModID stReqManorFightFormation_ProtoModID_ProtoModID_MIN = stReqManorFightFormation_ProtoModID_ModID;
const stReqManorFightFormation_ProtoModID stReqManorFightFormation_ProtoModID_ProtoModID_MAX = stReqManorFightFormation_ProtoModID_ModID;
const int stReqManorFightFormation_ProtoModID_ProtoModID_ARRAYSIZE = stReqManorFightFormation_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqManorFightFormation_ProtoModID_descriptor();
inline const ::std::string& stReqManorFightFormation_ProtoModID_Name(stReqManorFightFormation_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqManorFightFormation_ProtoModID_descriptor(), value);
}
inline bool stReqManorFightFormation_ProtoModID_Parse(
    const ::std::string& name, stReqManorFightFormation_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqManorFightFormation_ProtoModID>(
    stReqManorFightFormation_ProtoModID_descriptor(), name, value);
}
enum stReqManorFightFormation_ProtoFunID {
  stReqManorFightFormation_ProtoFunID_FunID = 91
};
bool stReqManorFightFormation_ProtoFunID_IsValid(int value);
const stReqManorFightFormation_ProtoFunID stReqManorFightFormation_ProtoFunID_ProtoFunID_MIN = stReqManorFightFormation_ProtoFunID_FunID;
const stReqManorFightFormation_ProtoFunID stReqManorFightFormation_ProtoFunID_ProtoFunID_MAX = stReqManorFightFormation_ProtoFunID_FunID;
const int stReqManorFightFormation_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqManorFightFormation_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqManorFightFormation_ProtoFunID_descriptor();
inline const ::std::string& stReqManorFightFormation_ProtoFunID_Name(stReqManorFightFormation_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqManorFightFormation_ProtoFunID_descriptor(), value);
}
inline bool stReqManorFightFormation_ProtoFunID_Parse(
    const ::std::string& name, stReqManorFightFormation_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqManorFightFormation_ProtoFunID>(
    stReqManorFightFormation_ProtoFunID_descriptor(), name, value);
}
enum stRetManorFightFormation_ProtoModID {
  stRetManorFightFormation_ProtoModID_ModID = 7
};
bool stRetManorFightFormation_ProtoModID_IsValid(int value);
const stRetManorFightFormation_ProtoModID stRetManorFightFormation_ProtoModID_ProtoModID_MIN = stRetManorFightFormation_ProtoModID_ModID;
const stRetManorFightFormation_ProtoModID stRetManorFightFormation_ProtoModID_ProtoModID_MAX = stRetManorFightFormation_ProtoModID_ModID;
const int stRetManorFightFormation_ProtoModID_ProtoModID_ARRAYSIZE = stRetManorFightFormation_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetManorFightFormation_ProtoModID_descriptor();
inline const ::std::string& stRetManorFightFormation_ProtoModID_Name(stRetManorFightFormation_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetManorFightFormation_ProtoModID_descriptor(), value);
}
inline bool stRetManorFightFormation_ProtoModID_Parse(
    const ::std::string& name, stRetManorFightFormation_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetManorFightFormation_ProtoModID>(
    stRetManorFightFormation_ProtoModID_descriptor(), name, value);
}
enum stRetManorFightFormation_ProtoFunID {
  stRetManorFightFormation_ProtoFunID_FunID = 92
};
bool stRetManorFightFormation_ProtoFunID_IsValid(int value);
const stRetManorFightFormation_ProtoFunID stRetManorFightFormation_ProtoFunID_ProtoFunID_MIN = stRetManorFightFormation_ProtoFunID_FunID;
const stRetManorFightFormation_ProtoFunID stRetManorFightFormation_ProtoFunID_ProtoFunID_MAX = stRetManorFightFormation_ProtoFunID_FunID;
const int stRetManorFightFormation_ProtoFunID_ProtoFunID_ARRAYSIZE = stRetManorFightFormation_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetManorFightFormation_ProtoFunID_descriptor();
inline const ::std::string& stRetManorFightFormation_ProtoFunID_Name(stRetManorFightFormation_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetManorFightFormation_ProtoFunID_descriptor(), value);
}
inline bool stRetManorFightFormation_ProtoFunID_Parse(
    const ::std::string& name, stRetManorFightFormation_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetManorFightFormation_ProtoFunID>(
    stRetManorFightFormation_ProtoFunID_descriptor(), name, value);
}
enum stEnterManorFightTeam_ProtoModID {
  stEnterManorFightTeam_ProtoModID_ModID = 7
};
bool stEnterManorFightTeam_ProtoModID_IsValid(int value);
const stEnterManorFightTeam_ProtoModID stEnterManorFightTeam_ProtoModID_ProtoModID_MIN = stEnterManorFightTeam_ProtoModID_ModID;
const stEnterManorFightTeam_ProtoModID stEnterManorFightTeam_ProtoModID_ProtoModID_MAX = stEnterManorFightTeam_ProtoModID_ModID;
const int stEnterManorFightTeam_ProtoModID_ProtoModID_ARRAYSIZE = stEnterManorFightTeam_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stEnterManorFightTeam_ProtoModID_descriptor();
inline const ::std::string& stEnterManorFightTeam_ProtoModID_Name(stEnterManorFightTeam_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stEnterManorFightTeam_ProtoModID_descriptor(), value);
}
inline bool stEnterManorFightTeam_ProtoModID_Parse(
    const ::std::string& name, stEnterManorFightTeam_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stEnterManorFightTeam_ProtoModID>(
    stEnterManorFightTeam_ProtoModID_descriptor(), name, value);
}
enum stEnterManorFightTeam_ProtoFunID {
  stEnterManorFightTeam_ProtoFunID_FunID = 93
};
bool stEnterManorFightTeam_ProtoFunID_IsValid(int value);
const stEnterManorFightTeam_ProtoFunID stEnterManorFightTeam_ProtoFunID_ProtoFunID_MIN = stEnterManorFightTeam_ProtoFunID_FunID;
const stEnterManorFightTeam_ProtoFunID stEnterManorFightTeam_ProtoFunID_ProtoFunID_MAX = stEnterManorFightTeam_ProtoFunID_FunID;
const int stEnterManorFightTeam_ProtoFunID_ProtoFunID_ARRAYSIZE = stEnterManorFightTeam_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stEnterManorFightTeam_ProtoFunID_descriptor();
inline const ::std::string& stEnterManorFightTeam_ProtoFunID_Name(stEnterManorFightTeam_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stEnterManorFightTeam_ProtoFunID_descriptor(), value);
}
inline bool stEnterManorFightTeam_ProtoFunID_Parse(
    const ::std::string& name, stEnterManorFightTeam_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stEnterManorFightTeam_ProtoFunID>(
    stEnterManorFightTeam_ProtoFunID_descriptor(), name, value);
}
enum stEnterManorFightTeamResult_eResult {
  stEnterManorFightTeamResult_eResult_eSuccess = 1,
  stEnterManorFightTeamResult_eResult_eNot_ChallengeGuildID = 2,
  stEnterManorFightTeamResult_eResult_ePos_Not_Empty = 3,
  stEnterManorFightTeamResult_eResult_eNot_In_Time = 4
};
bool stEnterManorFightTeamResult_eResult_IsValid(int value);
const stEnterManorFightTeamResult_eResult stEnterManorFightTeamResult_eResult_eResult_MIN = stEnterManorFightTeamResult_eResult_eSuccess;
const stEnterManorFightTeamResult_eResult stEnterManorFightTeamResult_eResult_eResult_MAX = stEnterManorFightTeamResult_eResult_eNot_In_Time;
const int stEnterManorFightTeamResult_eResult_eResult_ARRAYSIZE = stEnterManorFightTeamResult_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stEnterManorFightTeamResult_eResult_descriptor();
inline const ::std::string& stEnterManorFightTeamResult_eResult_Name(stEnterManorFightTeamResult_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stEnterManorFightTeamResult_eResult_descriptor(), value);
}
inline bool stEnterManorFightTeamResult_eResult_Parse(
    const ::std::string& name, stEnterManorFightTeamResult_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stEnterManorFightTeamResult_eResult>(
    stEnterManorFightTeamResult_eResult_descriptor(), name, value);
}
enum stEnterManorFightTeamResult_ProtoModID {
  stEnterManorFightTeamResult_ProtoModID_ModID = 7
};
bool stEnterManorFightTeamResult_ProtoModID_IsValid(int value);
const stEnterManorFightTeamResult_ProtoModID stEnterManorFightTeamResult_ProtoModID_ProtoModID_MIN = stEnterManorFightTeamResult_ProtoModID_ModID;
const stEnterManorFightTeamResult_ProtoModID stEnterManorFightTeamResult_ProtoModID_ProtoModID_MAX = stEnterManorFightTeamResult_ProtoModID_ModID;
const int stEnterManorFightTeamResult_ProtoModID_ProtoModID_ARRAYSIZE = stEnterManorFightTeamResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stEnterManorFightTeamResult_ProtoModID_descriptor();
inline const ::std::string& stEnterManorFightTeamResult_ProtoModID_Name(stEnterManorFightTeamResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stEnterManorFightTeamResult_ProtoModID_descriptor(), value);
}
inline bool stEnterManorFightTeamResult_ProtoModID_Parse(
    const ::std::string& name, stEnterManorFightTeamResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stEnterManorFightTeamResult_ProtoModID>(
    stEnterManorFightTeamResult_ProtoModID_descriptor(), name, value);
}
enum stEnterManorFightTeamResult_ProtoFunID {
  stEnterManorFightTeamResult_ProtoFunID_FunID = 94
};
bool stEnterManorFightTeamResult_ProtoFunID_IsValid(int value);
const stEnterManorFightTeamResult_ProtoFunID stEnterManorFightTeamResult_ProtoFunID_ProtoFunID_MIN = stEnterManorFightTeamResult_ProtoFunID_FunID;
const stEnterManorFightTeamResult_ProtoFunID stEnterManorFightTeamResult_ProtoFunID_ProtoFunID_MAX = stEnterManorFightTeamResult_ProtoFunID_FunID;
const int stEnterManorFightTeamResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stEnterManorFightTeamResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stEnterManorFightTeamResult_ProtoFunID_descriptor();
inline const ::std::string& stEnterManorFightTeamResult_ProtoFunID_Name(stEnterManorFightTeamResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stEnterManorFightTeamResult_ProtoFunID_descriptor(), value);
}
inline bool stEnterManorFightTeamResult_ProtoFunID_Parse(
    const ::std::string& name, stEnterManorFightTeamResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stEnterManorFightTeamResult_ProtoFunID>(
    stEnterManorFightTeamResult_ProtoFunID_descriptor(), name, value);
}
enum stNotifyLeaveManorFightWin_ProtoModID {
  stNotifyLeaveManorFightWin_ProtoModID_ModID = 7
};
bool stNotifyLeaveManorFightWin_ProtoModID_IsValid(int value);
const stNotifyLeaveManorFightWin_ProtoModID stNotifyLeaveManorFightWin_ProtoModID_ProtoModID_MIN = stNotifyLeaveManorFightWin_ProtoModID_ModID;
const stNotifyLeaveManorFightWin_ProtoModID stNotifyLeaveManorFightWin_ProtoModID_ProtoModID_MAX = stNotifyLeaveManorFightWin_ProtoModID_ModID;
const int stNotifyLeaveManorFightWin_ProtoModID_ProtoModID_ARRAYSIZE = stNotifyLeaveManorFightWin_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyLeaveManorFightWin_ProtoModID_descriptor();
inline const ::std::string& stNotifyLeaveManorFightWin_ProtoModID_Name(stNotifyLeaveManorFightWin_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyLeaveManorFightWin_ProtoModID_descriptor(), value);
}
inline bool stNotifyLeaveManorFightWin_ProtoModID_Parse(
    const ::std::string& name, stNotifyLeaveManorFightWin_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyLeaveManorFightWin_ProtoModID>(
    stNotifyLeaveManorFightWin_ProtoModID_descriptor(), name, value);
}
enum stNotifyLeaveManorFightWin_ProtoFunID {
  stNotifyLeaveManorFightWin_ProtoFunID_FunID = 95
};
bool stNotifyLeaveManorFightWin_ProtoFunID_IsValid(int value);
const stNotifyLeaveManorFightWin_ProtoFunID stNotifyLeaveManorFightWin_ProtoFunID_ProtoFunID_MIN = stNotifyLeaveManorFightWin_ProtoFunID_FunID;
const stNotifyLeaveManorFightWin_ProtoFunID stNotifyLeaveManorFightWin_ProtoFunID_ProtoFunID_MAX = stNotifyLeaveManorFightWin_ProtoFunID_FunID;
const int stNotifyLeaveManorFightWin_ProtoFunID_ProtoFunID_ARRAYSIZE = stNotifyLeaveManorFightWin_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyLeaveManorFightWin_ProtoFunID_descriptor();
inline const ::std::string& stNotifyLeaveManorFightWin_ProtoFunID_Name(stNotifyLeaveManorFightWin_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyLeaveManorFightWin_ProtoFunID_descriptor(), value);
}
inline bool stNotifyLeaveManorFightWin_ProtoFunID_Parse(
    const ::std::string& name, stNotifyLeaveManorFightWin_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyLeaveManorFightWin_ProtoFunID>(
    stNotifyLeaveManorFightWin_ProtoFunID_descriptor(), name, value);
}
enum stManorFightPKResult_ProtoModID {
  stManorFightPKResult_ProtoModID_ModID = 7
};
bool stManorFightPKResult_ProtoModID_IsValid(int value);
const stManorFightPKResult_ProtoModID stManorFightPKResult_ProtoModID_ProtoModID_MIN = stManorFightPKResult_ProtoModID_ModID;
const stManorFightPKResult_ProtoModID stManorFightPKResult_ProtoModID_ProtoModID_MAX = stManorFightPKResult_ProtoModID_ModID;
const int stManorFightPKResult_ProtoModID_ProtoModID_ARRAYSIZE = stManorFightPKResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stManorFightPKResult_ProtoModID_descriptor();
inline const ::std::string& stManorFightPKResult_ProtoModID_Name(stManorFightPKResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stManorFightPKResult_ProtoModID_descriptor(), value);
}
inline bool stManorFightPKResult_ProtoModID_Parse(
    const ::std::string& name, stManorFightPKResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stManorFightPKResult_ProtoModID>(
    stManorFightPKResult_ProtoModID_descriptor(), name, value);
}
enum stManorFightPKResult_ProtoFunID {
  stManorFightPKResult_ProtoFunID_FunID = 96
};
bool stManorFightPKResult_ProtoFunID_IsValid(int value);
const stManorFightPKResult_ProtoFunID stManorFightPKResult_ProtoFunID_ProtoFunID_MIN = stManorFightPKResult_ProtoFunID_FunID;
const stManorFightPKResult_ProtoFunID stManorFightPKResult_ProtoFunID_ProtoFunID_MAX = stManorFightPKResult_ProtoFunID_FunID;
const int stManorFightPKResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stManorFightPKResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stManorFightPKResult_ProtoFunID_descriptor();
inline const ::std::string& stManorFightPKResult_ProtoFunID_Name(stManorFightPKResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stManorFightPKResult_ProtoFunID_descriptor(), value);
}
inline bool stManorFightPKResult_ProtoFunID_Parse(
    const ::std::string& name, stManorFightPKResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stManorFightPKResult_ProtoFunID>(
    stManorFightPKResult_ProtoFunID_descriptor(), name, value);
}
enum stManorFightPKFail_ProtoModID {
  stManorFightPKFail_ProtoModID_ModID = 7
};
bool stManorFightPKFail_ProtoModID_IsValid(int value);
const stManorFightPKFail_ProtoModID stManorFightPKFail_ProtoModID_ProtoModID_MIN = stManorFightPKFail_ProtoModID_ModID;
const stManorFightPKFail_ProtoModID stManorFightPKFail_ProtoModID_ProtoModID_MAX = stManorFightPKFail_ProtoModID_ModID;
const int stManorFightPKFail_ProtoModID_ProtoModID_ARRAYSIZE = stManorFightPKFail_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stManorFightPKFail_ProtoModID_descriptor();
inline const ::std::string& stManorFightPKFail_ProtoModID_Name(stManorFightPKFail_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stManorFightPKFail_ProtoModID_descriptor(), value);
}
inline bool stManorFightPKFail_ProtoModID_Parse(
    const ::std::string& name, stManorFightPKFail_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stManorFightPKFail_ProtoModID>(
    stManorFightPKFail_ProtoModID_descriptor(), name, value);
}
enum stManorFightPKFail_ProtoFunID {
  stManorFightPKFail_ProtoFunID_FunID = 97
};
bool stManorFightPKFail_ProtoFunID_IsValid(int value);
const stManorFightPKFail_ProtoFunID stManorFightPKFail_ProtoFunID_ProtoFunID_MIN = stManorFightPKFail_ProtoFunID_FunID;
const stManorFightPKFail_ProtoFunID stManorFightPKFail_ProtoFunID_ProtoFunID_MAX = stManorFightPKFail_ProtoFunID_FunID;
const int stManorFightPKFail_ProtoFunID_ProtoFunID_ARRAYSIZE = stManorFightPKFail_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stManorFightPKFail_ProtoFunID_descriptor();
inline const ::std::string& stManorFightPKFail_ProtoFunID_Name(stManorFightPKFail_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stManorFightPKFail_ProtoFunID_descriptor(), value);
}
inline bool stManorFightPKFail_ProtoFunID_Parse(
    const ::std::string& name, stManorFightPKFail_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stManorFightPKFail_ProtoFunID>(
    stManorFightPKFail_ProtoFunID_descriptor(), name, value);
}
enum stNotifyWinerAfterApplyEnd_ProtoModID {
  stNotifyWinerAfterApplyEnd_ProtoModID_ModID = 7
};
bool stNotifyWinerAfterApplyEnd_ProtoModID_IsValid(int value);
const stNotifyWinerAfterApplyEnd_ProtoModID stNotifyWinerAfterApplyEnd_ProtoModID_ProtoModID_MIN = stNotifyWinerAfterApplyEnd_ProtoModID_ModID;
const stNotifyWinerAfterApplyEnd_ProtoModID stNotifyWinerAfterApplyEnd_ProtoModID_ProtoModID_MAX = stNotifyWinerAfterApplyEnd_ProtoModID_ModID;
const int stNotifyWinerAfterApplyEnd_ProtoModID_ProtoModID_ARRAYSIZE = stNotifyWinerAfterApplyEnd_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyWinerAfterApplyEnd_ProtoModID_descriptor();
inline const ::std::string& stNotifyWinerAfterApplyEnd_ProtoModID_Name(stNotifyWinerAfterApplyEnd_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyWinerAfterApplyEnd_ProtoModID_descriptor(), value);
}
inline bool stNotifyWinerAfterApplyEnd_ProtoModID_Parse(
    const ::std::string& name, stNotifyWinerAfterApplyEnd_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyWinerAfterApplyEnd_ProtoModID>(
    stNotifyWinerAfterApplyEnd_ProtoModID_descriptor(), name, value);
}
enum stNotifyWinerAfterApplyEnd_ProtoFunID {
  stNotifyWinerAfterApplyEnd_ProtoFunID_FunID = 98
};
bool stNotifyWinerAfterApplyEnd_ProtoFunID_IsValid(int value);
const stNotifyWinerAfterApplyEnd_ProtoFunID stNotifyWinerAfterApplyEnd_ProtoFunID_ProtoFunID_MIN = stNotifyWinerAfterApplyEnd_ProtoFunID_FunID;
const stNotifyWinerAfterApplyEnd_ProtoFunID stNotifyWinerAfterApplyEnd_ProtoFunID_ProtoFunID_MAX = stNotifyWinerAfterApplyEnd_ProtoFunID_FunID;
const int stNotifyWinerAfterApplyEnd_ProtoFunID_ProtoFunID_ARRAYSIZE = stNotifyWinerAfterApplyEnd_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyWinerAfterApplyEnd_ProtoFunID_descriptor();
inline const ::std::string& stNotifyWinerAfterApplyEnd_ProtoFunID_Name(stNotifyWinerAfterApplyEnd_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyWinerAfterApplyEnd_ProtoFunID_descriptor(), value);
}
inline bool stNotifyWinerAfterApplyEnd_ProtoFunID_Parse(
    const ::std::string& name, stNotifyWinerAfterApplyEnd_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyWinerAfterApplyEnd_ProtoFunID>(
    stNotifyWinerAfterApplyEnd_ProtoFunID_descriptor(), name, value);
}
enum stReqChgManorFightTeamPos_ProtoModID {
  stReqChgManorFightTeamPos_ProtoModID_ModID = 7
};
bool stReqChgManorFightTeamPos_ProtoModID_IsValid(int value);
const stReqChgManorFightTeamPos_ProtoModID stReqChgManorFightTeamPos_ProtoModID_ProtoModID_MIN = stReqChgManorFightTeamPos_ProtoModID_ModID;
const stReqChgManorFightTeamPos_ProtoModID stReqChgManorFightTeamPos_ProtoModID_ProtoModID_MAX = stReqChgManorFightTeamPos_ProtoModID_ModID;
const int stReqChgManorFightTeamPos_ProtoModID_ProtoModID_ARRAYSIZE = stReqChgManorFightTeamPos_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqChgManorFightTeamPos_ProtoModID_descriptor();
inline const ::std::string& stReqChgManorFightTeamPos_ProtoModID_Name(stReqChgManorFightTeamPos_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqChgManorFightTeamPos_ProtoModID_descriptor(), value);
}
inline bool stReqChgManorFightTeamPos_ProtoModID_Parse(
    const ::std::string& name, stReqChgManorFightTeamPos_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqChgManorFightTeamPos_ProtoModID>(
    stReqChgManorFightTeamPos_ProtoModID_descriptor(), name, value);
}
enum stReqChgManorFightTeamPos_ProtoFunID {
  stReqChgManorFightTeamPos_ProtoFunID_FunID = 99
};
bool stReqChgManorFightTeamPos_ProtoFunID_IsValid(int value);
const stReqChgManorFightTeamPos_ProtoFunID stReqChgManorFightTeamPos_ProtoFunID_ProtoFunID_MIN = stReqChgManorFightTeamPos_ProtoFunID_FunID;
const stReqChgManorFightTeamPos_ProtoFunID stReqChgManorFightTeamPos_ProtoFunID_ProtoFunID_MAX = stReqChgManorFightTeamPos_ProtoFunID_FunID;
const int stReqChgManorFightTeamPos_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqChgManorFightTeamPos_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqChgManorFightTeamPos_ProtoFunID_descriptor();
inline const ::std::string& stReqChgManorFightTeamPos_ProtoFunID_Name(stReqChgManorFightTeamPos_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqChgManorFightTeamPos_ProtoFunID_descriptor(), value);
}
inline bool stReqChgManorFightTeamPos_ProtoFunID_Parse(
    const ::std::string& name, stReqChgManorFightTeamPos_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqChgManorFightTeamPos_ProtoFunID>(
    stReqChgManorFightTeamPos_ProtoFunID_descriptor(), name, value);
}
enum stNotifyChgManorFightTeamPos_ProtoModID {
  stNotifyChgManorFightTeamPos_ProtoModID_ModID = 7
};
bool stNotifyChgManorFightTeamPos_ProtoModID_IsValid(int value);
const stNotifyChgManorFightTeamPos_ProtoModID stNotifyChgManorFightTeamPos_ProtoModID_ProtoModID_MIN = stNotifyChgManorFightTeamPos_ProtoModID_ModID;
const stNotifyChgManorFightTeamPos_ProtoModID stNotifyChgManorFightTeamPos_ProtoModID_ProtoModID_MAX = stNotifyChgManorFightTeamPos_ProtoModID_ModID;
const int stNotifyChgManorFightTeamPos_ProtoModID_ProtoModID_ARRAYSIZE = stNotifyChgManorFightTeamPos_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyChgManorFightTeamPos_ProtoModID_descriptor();
inline const ::std::string& stNotifyChgManorFightTeamPos_ProtoModID_Name(stNotifyChgManorFightTeamPos_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyChgManorFightTeamPos_ProtoModID_descriptor(), value);
}
inline bool stNotifyChgManorFightTeamPos_ProtoModID_Parse(
    const ::std::string& name, stNotifyChgManorFightTeamPos_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyChgManorFightTeamPos_ProtoModID>(
    stNotifyChgManorFightTeamPos_ProtoModID_descriptor(), name, value);
}
enum stNotifyChgManorFightTeamPos_ProtoFunID {
  stNotifyChgManorFightTeamPos_ProtoFunID_FunID = 100
};
bool stNotifyChgManorFightTeamPos_ProtoFunID_IsValid(int value);
const stNotifyChgManorFightTeamPos_ProtoFunID stNotifyChgManorFightTeamPos_ProtoFunID_ProtoFunID_MIN = stNotifyChgManorFightTeamPos_ProtoFunID_FunID;
const stNotifyChgManorFightTeamPos_ProtoFunID stNotifyChgManorFightTeamPos_ProtoFunID_ProtoFunID_MAX = stNotifyChgManorFightTeamPos_ProtoFunID_FunID;
const int stNotifyChgManorFightTeamPos_ProtoFunID_ProtoFunID_ARRAYSIZE = stNotifyChgManorFightTeamPos_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyChgManorFightTeamPos_ProtoFunID_descriptor();
inline const ::std::string& stNotifyChgManorFightTeamPos_ProtoFunID_Name(stNotifyChgManorFightTeamPos_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyChgManorFightTeamPos_ProtoFunID_descriptor(), value);
}
inline bool stNotifyChgManorFightTeamPos_ProtoFunID_Parse(
    const ::std::string& name, stNotifyChgManorFightTeamPos_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyChgManorFightTeamPos_ProtoFunID>(
    stNotifyChgManorFightTeamPos_ProtoFunID_descriptor(), name, value);
}
enum stChgManorFightTeamPosResult_eResult {
  stChgManorFightTeamPosResult_eResult_eSuccess = 1,
  stChgManorFightTeamPosResult_eResult_eHas_Not_Enter = 2,
  stChgManorFightTeamPosResult_eResult_eDest_Pos_Was_Occupied = 3
};
bool stChgManorFightTeamPosResult_eResult_IsValid(int value);
const stChgManorFightTeamPosResult_eResult stChgManorFightTeamPosResult_eResult_eResult_MIN = stChgManorFightTeamPosResult_eResult_eSuccess;
const stChgManorFightTeamPosResult_eResult stChgManorFightTeamPosResult_eResult_eResult_MAX = stChgManorFightTeamPosResult_eResult_eDest_Pos_Was_Occupied;
const int stChgManorFightTeamPosResult_eResult_eResult_ARRAYSIZE = stChgManorFightTeamPosResult_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stChgManorFightTeamPosResult_eResult_descriptor();
inline const ::std::string& stChgManorFightTeamPosResult_eResult_Name(stChgManorFightTeamPosResult_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stChgManorFightTeamPosResult_eResult_descriptor(), value);
}
inline bool stChgManorFightTeamPosResult_eResult_Parse(
    const ::std::string& name, stChgManorFightTeamPosResult_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stChgManorFightTeamPosResult_eResult>(
    stChgManorFightTeamPosResult_eResult_descriptor(), name, value);
}
enum stChgManorFightTeamPosResult_ProtoModID {
  stChgManorFightTeamPosResult_ProtoModID_ModID = 7
};
bool stChgManorFightTeamPosResult_ProtoModID_IsValid(int value);
const stChgManorFightTeamPosResult_ProtoModID stChgManorFightTeamPosResult_ProtoModID_ProtoModID_MIN = stChgManorFightTeamPosResult_ProtoModID_ModID;
const stChgManorFightTeamPosResult_ProtoModID stChgManorFightTeamPosResult_ProtoModID_ProtoModID_MAX = stChgManorFightTeamPosResult_ProtoModID_ModID;
const int stChgManorFightTeamPosResult_ProtoModID_ProtoModID_ARRAYSIZE = stChgManorFightTeamPosResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stChgManorFightTeamPosResult_ProtoModID_descriptor();
inline const ::std::string& stChgManorFightTeamPosResult_ProtoModID_Name(stChgManorFightTeamPosResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stChgManorFightTeamPosResult_ProtoModID_descriptor(), value);
}
inline bool stChgManorFightTeamPosResult_ProtoModID_Parse(
    const ::std::string& name, stChgManorFightTeamPosResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stChgManorFightTeamPosResult_ProtoModID>(
    stChgManorFightTeamPosResult_ProtoModID_descriptor(), name, value);
}
enum stChgManorFightTeamPosResult_ProtoFunID {
  stChgManorFightTeamPosResult_ProtoFunID_FunID = 101
};
bool stChgManorFightTeamPosResult_ProtoFunID_IsValid(int value);
const stChgManorFightTeamPosResult_ProtoFunID stChgManorFightTeamPosResult_ProtoFunID_ProtoFunID_MIN = stChgManorFightTeamPosResult_ProtoFunID_FunID;
const stChgManorFightTeamPosResult_ProtoFunID stChgManorFightTeamPosResult_ProtoFunID_ProtoFunID_MAX = stChgManorFightTeamPosResult_ProtoFunID_FunID;
const int stChgManorFightTeamPosResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stChgManorFightTeamPosResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stChgManorFightTeamPosResult_ProtoFunID_descriptor();
inline const ::std::string& stChgManorFightTeamPosResult_ProtoFunID_Name(stChgManorFightTeamPosResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stChgManorFightTeamPosResult_ProtoFunID_descriptor(), value);
}
inline bool stChgManorFightTeamPosResult_ProtoFunID_Parse(
    const ::std::string& name, stChgManorFightTeamPosResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stChgManorFightTeamPosResult_ProtoFunID>(
    stChgManorFightTeamPosResult_ProtoFunID_descriptor(), name, value);
}
enum stNotifyManorFightFail_ProtoModID {
  stNotifyManorFightFail_ProtoModID_ModID = 7
};
bool stNotifyManorFightFail_ProtoModID_IsValid(int value);
const stNotifyManorFightFail_ProtoModID stNotifyManorFightFail_ProtoModID_ProtoModID_MIN = stNotifyManorFightFail_ProtoModID_ModID;
const stNotifyManorFightFail_ProtoModID stNotifyManorFightFail_ProtoModID_ProtoModID_MAX = stNotifyManorFightFail_ProtoModID_ModID;
const int stNotifyManorFightFail_ProtoModID_ProtoModID_ARRAYSIZE = stNotifyManorFightFail_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyManorFightFail_ProtoModID_descriptor();
inline const ::std::string& stNotifyManorFightFail_ProtoModID_Name(stNotifyManorFightFail_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyManorFightFail_ProtoModID_descriptor(), value);
}
inline bool stNotifyManorFightFail_ProtoModID_Parse(
    const ::std::string& name, stNotifyManorFightFail_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyManorFightFail_ProtoModID>(
    stNotifyManorFightFail_ProtoModID_descriptor(), name, value);
}
enum stNotifyManorFightFail_ProtoFunID {
  stNotifyManorFightFail_ProtoFunID_FunID = 102
};
bool stNotifyManorFightFail_ProtoFunID_IsValid(int value);
const stNotifyManorFightFail_ProtoFunID stNotifyManorFightFail_ProtoFunID_ProtoFunID_MIN = stNotifyManorFightFail_ProtoFunID_FunID;
const stNotifyManorFightFail_ProtoFunID stNotifyManorFightFail_ProtoFunID_ProtoFunID_MAX = stNotifyManorFightFail_ProtoFunID_FunID;
const int stNotifyManorFightFail_ProtoFunID_ProtoFunID_ARRAYSIZE = stNotifyManorFightFail_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyManorFightFail_ProtoFunID_descriptor();
inline const ::std::string& stNotifyManorFightFail_ProtoFunID_Name(stNotifyManorFightFail_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyManorFightFail_ProtoFunID_descriptor(), value);
}
inline bool stNotifyManorFightFail_ProtoFunID_Parse(
    const ::std::string& name, stNotifyManorFightFail_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyManorFightFail_ProtoFunID>(
    stNotifyManorFightFail_ProtoFunID_descriptor(), name, value);
}
enum stManorFightHasNotMatch_ProtoModID {
  stManorFightHasNotMatch_ProtoModID_ModID = 7
};
bool stManorFightHasNotMatch_ProtoModID_IsValid(int value);
const stManorFightHasNotMatch_ProtoModID stManorFightHasNotMatch_ProtoModID_ProtoModID_MIN = stManorFightHasNotMatch_ProtoModID_ModID;
const stManorFightHasNotMatch_ProtoModID stManorFightHasNotMatch_ProtoModID_ProtoModID_MAX = stManorFightHasNotMatch_ProtoModID_ModID;
const int stManorFightHasNotMatch_ProtoModID_ProtoModID_ARRAYSIZE = stManorFightHasNotMatch_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stManorFightHasNotMatch_ProtoModID_descriptor();
inline const ::std::string& stManorFightHasNotMatch_ProtoModID_Name(stManorFightHasNotMatch_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stManorFightHasNotMatch_ProtoModID_descriptor(), value);
}
inline bool stManorFightHasNotMatch_ProtoModID_Parse(
    const ::std::string& name, stManorFightHasNotMatch_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stManorFightHasNotMatch_ProtoModID>(
    stManorFightHasNotMatch_ProtoModID_descriptor(), name, value);
}
enum stManorFightHasNotMatch_ProtoFunID {
  stManorFightHasNotMatch_ProtoFunID_FunID = 103
};
bool stManorFightHasNotMatch_ProtoFunID_IsValid(int value);
const stManorFightHasNotMatch_ProtoFunID stManorFightHasNotMatch_ProtoFunID_ProtoFunID_MIN = stManorFightHasNotMatch_ProtoFunID_FunID;
const stManorFightHasNotMatch_ProtoFunID stManorFightHasNotMatch_ProtoFunID_ProtoFunID_MAX = stManorFightHasNotMatch_ProtoFunID_FunID;
const int stManorFightHasNotMatch_ProtoFunID_ProtoFunID_ARRAYSIZE = stManorFightHasNotMatch_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stManorFightHasNotMatch_ProtoFunID_descriptor();
inline const ::std::string& stManorFightHasNotMatch_ProtoFunID_Name(stManorFightHasNotMatch_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stManorFightHasNotMatch_ProtoFunID_descriptor(), value);
}
inline bool stManorFightHasNotMatch_ProtoFunID_Parse(
    const ::std::string& name, stManorFightHasNotMatch_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stManorFightHasNotMatch_ProtoFunID>(
    stManorFightHasNotMatch_ProtoFunID_descriptor(), name, value);
}
enum stManorFightFormationResult_ProtoModID {
  stManorFightFormationResult_ProtoModID_ModID = 7
};
bool stManorFightFormationResult_ProtoModID_IsValid(int value);
const stManorFightFormationResult_ProtoModID stManorFightFormationResult_ProtoModID_ProtoModID_MIN = stManorFightFormationResult_ProtoModID_ModID;
const stManorFightFormationResult_ProtoModID stManorFightFormationResult_ProtoModID_ProtoModID_MAX = stManorFightFormationResult_ProtoModID_ModID;
const int stManorFightFormationResult_ProtoModID_ProtoModID_ARRAYSIZE = stManorFightFormationResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stManorFightFormationResult_ProtoModID_descriptor();
inline const ::std::string& stManorFightFormationResult_ProtoModID_Name(stManorFightFormationResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stManorFightFormationResult_ProtoModID_descriptor(), value);
}
inline bool stManorFightFormationResult_ProtoModID_Parse(
    const ::std::string& name, stManorFightFormationResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stManorFightFormationResult_ProtoModID>(
    stManorFightFormationResult_ProtoModID_descriptor(), name, value);
}
enum stManorFightFormationResult_ProtoFunID {
  stManorFightFormationResult_ProtoFunID_FunID = 104
};
bool stManorFightFormationResult_ProtoFunID_IsValid(int value);
const stManorFightFormationResult_ProtoFunID stManorFightFormationResult_ProtoFunID_ProtoFunID_MIN = stManorFightFormationResult_ProtoFunID_FunID;
const stManorFightFormationResult_ProtoFunID stManorFightFormationResult_ProtoFunID_ProtoFunID_MAX = stManorFightFormationResult_ProtoFunID_FunID;
const int stManorFightFormationResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stManorFightFormationResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stManorFightFormationResult_ProtoFunID_descriptor();
inline const ::std::string& stManorFightFormationResult_ProtoFunID_Name(stManorFightFormationResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stManorFightFormationResult_ProtoFunID_descriptor(), value);
}
inline bool stManorFightFormationResult_ProtoFunID_Parse(
    const ::std::string& name, stManorFightFormationResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stManorFightFormationResult_ProtoFunID>(
    stManorFightFormationResult_ProtoFunID_descriptor(), name, value);
}
enum stManorFightFinish_ProtoModID {
  stManorFightFinish_ProtoModID_ModID = 7
};
bool stManorFightFinish_ProtoModID_IsValid(int value);
const stManorFightFinish_ProtoModID stManorFightFinish_ProtoModID_ProtoModID_MIN = stManorFightFinish_ProtoModID_ModID;
const stManorFightFinish_ProtoModID stManorFightFinish_ProtoModID_ProtoModID_MAX = stManorFightFinish_ProtoModID_ModID;
const int stManorFightFinish_ProtoModID_ProtoModID_ARRAYSIZE = stManorFightFinish_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stManorFightFinish_ProtoModID_descriptor();
inline const ::std::string& stManorFightFinish_ProtoModID_Name(stManorFightFinish_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stManorFightFinish_ProtoModID_descriptor(), value);
}
inline bool stManorFightFinish_ProtoModID_Parse(
    const ::std::string& name, stManorFightFinish_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stManorFightFinish_ProtoModID>(
    stManorFightFinish_ProtoModID_descriptor(), name, value);
}
enum stManorFightFinish_ProtoFunID {
  stManorFightFinish_ProtoFunID_FunID = 105
};
bool stManorFightFinish_ProtoFunID_IsValid(int value);
const stManorFightFinish_ProtoFunID stManorFightFinish_ProtoFunID_ProtoFunID_MIN = stManorFightFinish_ProtoFunID_FunID;
const stManorFightFinish_ProtoFunID stManorFightFinish_ProtoFunID_ProtoFunID_MAX = stManorFightFinish_ProtoFunID_FunID;
const int stManorFightFinish_ProtoFunID_ProtoFunID_ARRAYSIZE = stManorFightFinish_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stManorFightFinish_ProtoFunID_descriptor();
inline const ::std::string& stManorFightFinish_ProtoFunID_Name(stManorFightFinish_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stManorFightFinish_ProtoFunID_descriptor(), value);
}
inline bool stManorFightFinish_ProtoFunID_Parse(
    const ::std::string& name, stManorFightFinish_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stManorFightFinish_ProtoFunID>(
    stManorFightFinish_ProtoFunID_descriptor(), name, value);
}
enum stReqLevelUpBlackMarketLv_ProtoModID {
  stReqLevelUpBlackMarketLv_ProtoModID_ModID = 7
};
bool stReqLevelUpBlackMarketLv_ProtoModID_IsValid(int value);
const stReqLevelUpBlackMarketLv_ProtoModID stReqLevelUpBlackMarketLv_ProtoModID_ProtoModID_MIN = stReqLevelUpBlackMarketLv_ProtoModID_ModID;
const stReqLevelUpBlackMarketLv_ProtoModID stReqLevelUpBlackMarketLv_ProtoModID_ProtoModID_MAX = stReqLevelUpBlackMarketLv_ProtoModID_ModID;
const int stReqLevelUpBlackMarketLv_ProtoModID_ProtoModID_ARRAYSIZE = stReqLevelUpBlackMarketLv_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqLevelUpBlackMarketLv_ProtoModID_descriptor();
inline const ::std::string& stReqLevelUpBlackMarketLv_ProtoModID_Name(stReqLevelUpBlackMarketLv_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqLevelUpBlackMarketLv_ProtoModID_descriptor(), value);
}
inline bool stReqLevelUpBlackMarketLv_ProtoModID_Parse(
    const ::std::string& name, stReqLevelUpBlackMarketLv_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqLevelUpBlackMarketLv_ProtoModID>(
    stReqLevelUpBlackMarketLv_ProtoModID_descriptor(), name, value);
}
enum stReqLevelUpBlackMarketLv_ProtoFunID {
  stReqLevelUpBlackMarketLv_ProtoFunID_FunID = 106
};
bool stReqLevelUpBlackMarketLv_ProtoFunID_IsValid(int value);
const stReqLevelUpBlackMarketLv_ProtoFunID stReqLevelUpBlackMarketLv_ProtoFunID_ProtoFunID_MIN = stReqLevelUpBlackMarketLv_ProtoFunID_FunID;
const stReqLevelUpBlackMarketLv_ProtoFunID stReqLevelUpBlackMarketLv_ProtoFunID_ProtoFunID_MAX = stReqLevelUpBlackMarketLv_ProtoFunID_FunID;
const int stReqLevelUpBlackMarketLv_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqLevelUpBlackMarketLv_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqLevelUpBlackMarketLv_ProtoFunID_descriptor();
inline const ::std::string& stReqLevelUpBlackMarketLv_ProtoFunID_Name(stReqLevelUpBlackMarketLv_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqLevelUpBlackMarketLv_ProtoFunID_descriptor(), value);
}
inline bool stReqLevelUpBlackMarketLv_ProtoFunID_Parse(
    const ::std::string& name, stReqLevelUpBlackMarketLv_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqLevelUpBlackMarketLv_ProtoFunID>(
    stReqLevelUpBlackMarketLv_ProtoFunID_descriptor(), name, value);
}
enum stLevelUpBlackMarketLvResult_eResult {
  stLevelUpBlackMarketLvResult_eResult_eSUCCESS = 1,
  stLevelUpBlackMarketLvResult_eResult_eHAS_NO_RIGHT = 2,
  stLevelUpBlackMarketLvResult_eResult_eCONTRIBUTE_NOT_ENOUGH = 3,
  stLevelUpBlackMarketLvResult_eResult_eINNER_ERROR = 4,
  stLevelUpBlackMarketLvResult_eResult_eHALL_LV_TOO_LOW = 5
};
bool stLevelUpBlackMarketLvResult_eResult_IsValid(int value);
const stLevelUpBlackMarketLvResult_eResult stLevelUpBlackMarketLvResult_eResult_eResult_MIN = stLevelUpBlackMarketLvResult_eResult_eSUCCESS;
const stLevelUpBlackMarketLvResult_eResult stLevelUpBlackMarketLvResult_eResult_eResult_MAX = stLevelUpBlackMarketLvResult_eResult_eHALL_LV_TOO_LOW;
const int stLevelUpBlackMarketLvResult_eResult_eResult_ARRAYSIZE = stLevelUpBlackMarketLvResult_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stLevelUpBlackMarketLvResult_eResult_descriptor();
inline const ::std::string& stLevelUpBlackMarketLvResult_eResult_Name(stLevelUpBlackMarketLvResult_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stLevelUpBlackMarketLvResult_eResult_descriptor(), value);
}
inline bool stLevelUpBlackMarketLvResult_eResult_Parse(
    const ::std::string& name, stLevelUpBlackMarketLvResult_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stLevelUpBlackMarketLvResult_eResult>(
    stLevelUpBlackMarketLvResult_eResult_descriptor(), name, value);
}
enum stLevelUpBlackMarketLvResult_ProtoModID {
  stLevelUpBlackMarketLvResult_ProtoModID_ModID = 7
};
bool stLevelUpBlackMarketLvResult_ProtoModID_IsValid(int value);
const stLevelUpBlackMarketLvResult_ProtoModID stLevelUpBlackMarketLvResult_ProtoModID_ProtoModID_MIN = stLevelUpBlackMarketLvResult_ProtoModID_ModID;
const stLevelUpBlackMarketLvResult_ProtoModID stLevelUpBlackMarketLvResult_ProtoModID_ProtoModID_MAX = stLevelUpBlackMarketLvResult_ProtoModID_ModID;
const int stLevelUpBlackMarketLvResult_ProtoModID_ProtoModID_ARRAYSIZE = stLevelUpBlackMarketLvResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stLevelUpBlackMarketLvResult_ProtoModID_descriptor();
inline const ::std::string& stLevelUpBlackMarketLvResult_ProtoModID_Name(stLevelUpBlackMarketLvResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stLevelUpBlackMarketLvResult_ProtoModID_descriptor(), value);
}
inline bool stLevelUpBlackMarketLvResult_ProtoModID_Parse(
    const ::std::string& name, stLevelUpBlackMarketLvResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stLevelUpBlackMarketLvResult_ProtoModID>(
    stLevelUpBlackMarketLvResult_ProtoModID_descriptor(), name, value);
}
enum stLevelUpBlackMarketLvResult_ProtoFunID {
  stLevelUpBlackMarketLvResult_ProtoFunID_FunID = 107
};
bool stLevelUpBlackMarketLvResult_ProtoFunID_IsValid(int value);
const stLevelUpBlackMarketLvResult_ProtoFunID stLevelUpBlackMarketLvResult_ProtoFunID_ProtoFunID_MIN = stLevelUpBlackMarketLvResult_ProtoFunID_FunID;
const stLevelUpBlackMarketLvResult_ProtoFunID stLevelUpBlackMarketLvResult_ProtoFunID_ProtoFunID_MAX = stLevelUpBlackMarketLvResult_ProtoFunID_FunID;
const int stLevelUpBlackMarketLvResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stLevelUpBlackMarketLvResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stLevelUpBlackMarketLvResult_ProtoFunID_descriptor();
inline const ::std::string& stLevelUpBlackMarketLvResult_ProtoFunID_Name(stLevelUpBlackMarketLvResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stLevelUpBlackMarketLvResult_ProtoFunID_descriptor(), value);
}
inline bool stLevelUpBlackMarketLvResult_ProtoFunID_Parse(
    const ::std::string& name, stLevelUpBlackMarketLvResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stLevelUpBlackMarketLvResult_ProtoFunID>(
    stLevelUpBlackMarketLvResult_ProtoFunID_descriptor(), name, value);
}
enum stSynBlackMarketBuildingLv_ProtoModID {
  stSynBlackMarketBuildingLv_ProtoModID_ModID = 7
};
bool stSynBlackMarketBuildingLv_ProtoModID_IsValid(int value);
const stSynBlackMarketBuildingLv_ProtoModID stSynBlackMarketBuildingLv_ProtoModID_ProtoModID_MIN = stSynBlackMarketBuildingLv_ProtoModID_ModID;
const stSynBlackMarketBuildingLv_ProtoModID stSynBlackMarketBuildingLv_ProtoModID_ProtoModID_MAX = stSynBlackMarketBuildingLv_ProtoModID_ModID;
const int stSynBlackMarketBuildingLv_ProtoModID_ProtoModID_ARRAYSIZE = stSynBlackMarketBuildingLv_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynBlackMarketBuildingLv_ProtoModID_descriptor();
inline const ::std::string& stSynBlackMarketBuildingLv_ProtoModID_Name(stSynBlackMarketBuildingLv_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynBlackMarketBuildingLv_ProtoModID_descriptor(), value);
}
inline bool stSynBlackMarketBuildingLv_ProtoModID_Parse(
    const ::std::string& name, stSynBlackMarketBuildingLv_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynBlackMarketBuildingLv_ProtoModID>(
    stSynBlackMarketBuildingLv_ProtoModID_descriptor(), name, value);
}
enum stSynBlackMarketBuildingLv_ProtoFunID {
  stSynBlackMarketBuildingLv_ProtoFunID_FunID = 108
};
bool stSynBlackMarketBuildingLv_ProtoFunID_IsValid(int value);
const stSynBlackMarketBuildingLv_ProtoFunID stSynBlackMarketBuildingLv_ProtoFunID_ProtoFunID_MIN = stSynBlackMarketBuildingLv_ProtoFunID_FunID;
const stSynBlackMarketBuildingLv_ProtoFunID stSynBlackMarketBuildingLv_ProtoFunID_ProtoFunID_MAX = stSynBlackMarketBuildingLv_ProtoFunID_FunID;
const int stSynBlackMarketBuildingLv_ProtoFunID_ProtoFunID_ARRAYSIZE = stSynBlackMarketBuildingLv_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynBlackMarketBuildingLv_ProtoFunID_descriptor();
inline const ::std::string& stSynBlackMarketBuildingLv_ProtoFunID_Name(stSynBlackMarketBuildingLv_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynBlackMarketBuildingLv_ProtoFunID_descriptor(), value);
}
inline bool stSynBlackMarketBuildingLv_ProtoFunID_Parse(
    const ::std::string& name, stSynBlackMarketBuildingLv_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynBlackMarketBuildingLv_ProtoFunID>(
    stSynBlackMarketBuildingLv_ProtoFunID_descriptor(), name, value);
}
enum eGuildTile {
  GUILD_TITLE_NORMAL = 0,
  GUILD_TITLE_ELITE = 1,
  GUILD_TILE_VICELEADER = 2,
  GUILD_TITLE_LEADER = 3
};
bool eGuildTile_IsValid(int value);
const eGuildTile eGuildTile_MIN = GUILD_TITLE_NORMAL;
const eGuildTile eGuildTile_MAX = GUILD_TITLE_LEADER;
const int eGuildTile_ARRAYSIZE = eGuildTile_MAX + 1;

const ::google::protobuf::EnumDescriptor* eGuildTile_descriptor();
inline const ::std::string& eGuildTile_Name(eGuildTile value) {
  return ::google::protobuf::internal::NameOfEnum(
    eGuildTile_descriptor(), value);
}
inline bool eGuildTile_Parse(
    const ::std::string& name, eGuildTile* value) {
  return ::google::protobuf::internal::ParseNamedEnum<eGuildTile>(
    eGuildTile_descriptor(), name, value);
}
enum eCreateGuildError {
  CREATE_GUILD_ERROR_LV_LOW = 1,
  CREATE_GUILD_ERROR_NO_GOLDCOIN = 2,
  CREATE_GUILD_ERROR_NO_DIAMOND = 3,
  CREATE_GUILD_ERROR_HAS_GUILD = 4,
  CREATE_GUILD_ERROR_NAME_EXIST = 5
};
bool eCreateGuildError_IsValid(int value);
const eCreateGuildError eCreateGuildError_MIN = CREATE_GUILD_ERROR_LV_LOW;
const eCreateGuildError eCreateGuildError_MAX = CREATE_GUILD_ERROR_NAME_EXIST;
const int eCreateGuildError_ARRAYSIZE = eCreateGuildError_MAX + 1;

const ::google::protobuf::EnumDescriptor* eCreateGuildError_descriptor();
inline const ::std::string& eCreateGuildError_Name(eCreateGuildError value) {
  return ::google::protobuf::internal::NameOfEnum(
    eCreateGuildError_descriptor(), value);
}
inline bool eCreateGuildError_Parse(
    const ::std::string& name, eCreateGuildError* value) {
  return ::google::protobuf::internal::ParseNamedEnum<eCreateGuildError>(
    eCreateGuildError_descriptor(), name, value);
}
enum JoinGuildResult {
  REQ_JOIN_GUILD_SUCESS = 1,
  REQ_JOIN_GUILD_ERROR_HAS_GROUP = 2,
  REQ_JOIN_GUILD_ERROR_NOT_EXIST = 3,
  REQ_JOIN_GUILD_ERROR_HAS_APPLY = 4,
  REQ_JOIN_GUILD_ERROR_CD = 5,
  REQ_JOIN_GUILD_ERROR_FULL = 6
};
bool JoinGuildResult_IsValid(int value);
const JoinGuildResult JoinGuildResult_MIN = REQ_JOIN_GUILD_SUCESS;
const JoinGuildResult JoinGuildResult_MAX = REQ_JOIN_GUILD_ERROR_FULL;
const int JoinGuildResult_ARRAYSIZE = JoinGuildResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* JoinGuildResult_descriptor();
inline const ::std::string& JoinGuildResult_Name(JoinGuildResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    JoinGuildResult_descriptor(), value);
}
inline bool JoinGuildResult_Parse(
    const ::std::string& name, JoinGuildResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<JoinGuildResult>(
    JoinGuildResult_descriptor(), name, value);
}
enum ReplyError {
  REPLY_ERROR_NO_POWER = 1,
  REPLY_ERROR_FULL = 2,
  REPLY_ERROR_NO_IN_LIST = 3,
  REPLY_ERROR_HAS_GUILD = 4
};
bool ReplyError_IsValid(int value);
const ReplyError ReplyError_MIN = REPLY_ERROR_NO_POWER;
const ReplyError ReplyError_MAX = REPLY_ERROR_HAS_GUILD;
const int ReplyError_ARRAYSIZE = ReplyError_MAX + 1;

const ::google::protobuf::EnumDescriptor* ReplyError_descriptor();
inline const ::std::string& ReplyError_Name(ReplyError value) {
  return ::google::protobuf::internal::NameOfEnum(
    ReplyError_descriptor(), value);
}
inline bool ReplyError_Parse(
    const ::std::string& name, ReplyError* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ReplyError>(
    ReplyError_descriptor(), name, value);
}
enum eAssignTitleError {
  ASSIGN_TITLE_ERROR_NO_POWER = 1,
  ASSIGN_TITLE_ERROR_NOT_MEMBER = 2
};
bool eAssignTitleError_IsValid(int value);
const eAssignTitleError eAssignTitleError_MIN = ASSIGN_TITLE_ERROR_NO_POWER;
const eAssignTitleError eAssignTitleError_MAX = ASSIGN_TITLE_ERROR_NOT_MEMBER;
const int eAssignTitleError_ARRAYSIZE = eAssignTitleError_MAX + 1;

const ::google::protobuf::EnumDescriptor* eAssignTitleError_descriptor();
inline const ::std::string& eAssignTitleError_Name(eAssignTitleError value) {
  return ::google::protobuf::internal::NameOfEnum(
    eAssignTitleError_descriptor(), value);
}
inline bool eAssignTitleError_Parse(
    const ::std::string& name, eAssignTitleError* value) {
  return ::google::protobuf::internal::ParseNamedEnum<eAssignTitleError>(
    eAssignTitleError_descriptor(), name, value);
}
enum eCancelTitleError {
  CANCEL_TITLE_ERROR_NO_POWER = 1,
  CANCEL_TITLE_ERROR_NOT_MEMBER = 2
};
bool eCancelTitleError_IsValid(int value);
const eCancelTitleError eCancelTitleError_MIN = CANCEL_TITLE_ERROR_NO_POWER;
const eCancelTitleError eCancelTitleError_MAX = CANCEL_TITLE_ERROR_NOT_MEMBER;
const int eCancelTitleError_ARRAYSIZE = eCancelTitleError_MAX + 1;

const ::google::protobuf::EnumDescriptor* eCancelTitleError_descriptor();
inline const ::std::string& eCancelTitleError_Name(eCancelTitleError value) {
  return ::google::protobuf::internal::NameOfEnum(
    eCancelTitleError_descriptor(), value);
}
inline bool eCancelTitleError_Parse(
    const ::std::string& name, eCancelTitleError* value) {
  return ::google::protobuf::internal::ParseNamedEnum<eCancelTitleError>(
    eCancelTitleError_descriptor(), name, value);
}
enum eGiveLeaderErrorNo {
  GIVE_LEADER_ERROR_NO_POWER = 1,
  GIVE_LEADER_ERROR_NOT_MEMBER = 2
};
bool eGiveLeaderErrorNo_IsValid(int value);
const eGiveLeaderErrorNo eGiveLeaderErrorNo_MIN = GIVE_LEADER_ERROR_NO_POWER;
const eGiveLeaderErrorNo eGiveLeaderErrorNo_MAX = GIVE_LEADER_ERROR_NOT_MEMBER;
const int eGiveLeaderErrorNo_ARRAYSIZE = eGiveLeaderErrorNo_MAX + 1;

const ::google::protobuf::EnumDescriptor* eGiveLeaderErrorNo_descriptor();
inline const ::std::string& eGiveLeaderErrorNo_Name(eGiveLeaderErrorNo value) {
  return ::google::protobuf::internal::NameOfEnum(
    eGiveLeaderErrorNo_descriptor(), value);
}
inline bool eGiveLeaderErrorNo_Parse(
    const ::std::string& name, eGiveLeaderErrorNo* value) {
  return ::google::protobuf::internal::ParseNamedEnum<eGiveLeaderErrorNo>(
    eGiveLeaderErrorNo_descriptor(), name, value);
}
enum eFireMemberErrorNo {
  FIRE_MEMBER_ERROR_NO_POWER = 1
};
bool eFireMemberErrorNo_IsValid(int value);
const eFireMemberErrorNo eFireMemberErrorNo_MIN = FIRE_MEMBER_ERROR_NO_POWER;
const eFireMemberErrorNo eFireMemberErrorNo_MAX = FIRE_MEMBER_ERROR_NO_POWER;
const int eFireMemberErrorNo_ARRAYSIZE = eFireMemberErrorNo_MAX + 1;

const ::google::protobuf::EnumDescriptor* eFireMemberErrorNo_descriptor();
inline const ::std::string& eFireMemberErrorNo_Name(eFireMemberErrorNo value) {
  return ::google::protobuf::internal::NameOfEnum(
    eFireMemberErrorNo_descriptor(), value);
}
inline bool eFireMemberErrorNo_Parse(
    const ::std::string& name, eFireMemberErrorNo* value) {
  return ::google::protobuf::internal::ParseNamedEnum<eFireMemberErrorNo>(
    eFireMemberErrorNo_descriptor(), name, value);
}
enum eKillOutErrorNo {
  KILL_OUT_ERROR_NOT_MEMBER = 1,
  KILL_OUT_ERROR_NO_POWER = 2
};
bool eKillOutErrorNo_IsValid(int value);
const eKillOutErrorNo eKillOutErrorNo_MIN = KILL_OUT_ERROR_NOT_MEMBER;
const eKillOutErrorNo eKillOutErrorNo_MAX = KILL_OUT_ERROR_NO_POWER;
const int eKillOutErrorNo_ARRAYSIZE = eKillOutErrorNo_MAX + 1;

const ::google::protobuf::EnumDescriptor* eKillOutErrorNo_descriptor();
inline const ::std::string& eKillOutErrorNo_Name(eKillOutErrorNo value) {
  return ::google::protobuf::internal::NameOfEnum(
    eKillOutErrorNo_descriptor(), value);
}
inline bool eKillOutErrorNo_Parse(
    const ::std::string& name, eKillOutErrorNo* value) {
  return ::google::protobuf::internal::ParseNamedEnum<eKillOutErrorNo>(
    eKillOutErrorNo_descriptor(), name, value);
}
enum eTraceID {
  eTrace_None = 0,
  eTrace_Enter_Guild = 1,
  eTrace_Leave_Guild = 2,
  eTrace_Kill_Out_Member = 3,
  eTrace_Assign_Vice_Leader = 4,
  eTrace_Assign_Elite = 5,
  eTrace_Donate_Type1 = 6,
  eTrace_Donate_Type2 = 7,
  eTrace_Donate_Type3 = 8,
  eTrace_Hall_Levelup = 9,
  eTrace_Pray_BuildingLevelup = 10,
  eTrace_Shop_Levelup = 11,
  eTrace_BlackMarket_Levelup = 12
};
bool eTraceID_IsValid(int value);
const eTraceID eTraceID_MIN = eTrace_None;
const eTraceID eTraceID_MAX = eTrace_BlackMarket_Levelup;
const int eTraceID_ARRAYSIZE = eTraceID_MAX + 1;

const ::google::protobuf::EnumDescriptor* eTraceID_descriptor();
inline const ::std::string& eTraceID_Name(eTraceID value) {
  return ::google::protobuf::internal::NameOfEnum(
    eTraceID_descriptor(), value);
}
inline bool eTraceID_Parse(
    const ::std::string& name, eTraceID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<eTraceID>(
    eTraceID_descriptor(), name, value);
}
enum eFormation {
  eFormation_Main = 1,
  eFormation_Left = 2,
  eFormation_Right = 3
};
bool eFormation_IsValid(int value);
const eFormation eFormation_MIN = eFormation_Main;
const eFormation eFormation_MAX = eFormation_Right;
const int eFormation_ARRAYSIZE = eFormation_MAX + 1;

const ::google::protobuf::EnumDescriptor* eFormation_descriptor();
inline const ::std::string& eFormation_Name(eFormation value) {
  return ::google::protobuf::internal::NameOfEnum(
    eFormation_descriptor(), value);
}
inline bool eFormation_Parse(
    const ::std::string& name, eFormation* value) {
  return ::google::protobuf::internal::ParseNamedEnum<eFormation>(
    eFormation_descriptor(), name, value);
}
// ===================================================================

class stSynGuildMemInfo : public ::google::protobuf::Message {
 public:
  stSynGuildMemInfo();
  virtual ~stSynGuildMemInfo();

  stSynGuildMemInfo(const stSynGuildMemInfo& from);

  inline stSynGuildMemInfo& operator=(const stSynGuildMemInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSynGuildMemInfo& default_instance();

  void Swap(stSynGuildMemInfo* other);

  // implements Message ----------------------------------------------

  stSynGuildMemInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSynGuildMemInfo& from);
  void MergeFrom(const stSynGuildMemInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint32 job = 4;
  inline bool has_job() const;
  inline void clear_job();
  static const int kJobFieldNumber = 4;
  inline ::google::protobuf::uint32 job() const;
  inline void set_job(::google::protobuf::uint32 value);

  // optional uint32 sex = 5;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 5;
  inline ::google::protobuf::uint32 sex() const;
  inline void set_sex(::google::protobuf::uint32 value);

  // optional uint32 title = 6;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 6;
  inline ::google::protobuf::uint32 title() const;
  inline void set_title(::google::protobuf::uint32 value);

  // optional uint32 todayContribute = 7;
  inline bool has_todaycontribute() const;
  inline void clear_todaycontribute();
  static const int kTodayContributeFieldNumber = 7;
  inline ::google::protobuf::uint32 todaycontribute() const;
  inline void set_todaycontribute(::google::protobuf::uint32 value);

  // optional uint32 contribute = 8;
  inline bool has_contribute() const;
  inline void clear_contribute();
  static const int kContributeFieldNumber = 8;
  inline ::google::protobuf::uint32 contribute() const;
  inline void set_contribute(::google::protobuf::uint32 value);

  // optional bool online = 9;
  inline bool has_online() const;
  inline void clear_online();
  static const int kOnlineFieldNumber = 9;
  inline bool online() const;
  inline void set_online(bool value);

  // optional uint32 battlePower = 10;
  inline bool has_battlepower() const;
  inline void clear_battlepower();
  static const int kBattlePowerFieldNumber = 10;
  inline ::google::protobuf::uint32 battlepower() const;
  inline void set_battlepower(::google::protobuf::uint32 value);

  // optional uint32 challengeNum = 11;
  inline bool has_challengenum() const;
  inline void clear_challengenum();
  static const int kChallengeNumFieldNumber = 11;
  inline ::google::protobuf::uint32 challengenum() const;
  inline void set_challengenum(::google::protobuf::uint32 value);

  // optional uint32 assistNum = 12;
  inline bool has_assistnum() const;
  inline void clear_assistnum();
  static const int kAssistNumFieldNumber = 12;
  inline ::google::protobuf::uint32 assistnum() const;
  inline void set_assistnum(::google::protobuf::uint32 value);

  // optional uint32 activityVal = 13;
  inline bool has_activityval() const;
  inline void clear_activityval();
  static const int kActivityValFieldNumber = 13;
  inline ::google::protobuf::uint32 activityval() const;
  inline void set_activityval(::google::protobuf::uint32 value);

  // optional uint32 lastLoginTime = 14;
  inline bool has_lastlogintime() const;
  inline void clear_lastlogintime();
  static const int kLastLoginTimeFieldNumber = 14;
  inline ::google::protobuf::uint32 lastlogintime() const;
  inline void set_lastlogintime(::google::protobuf::uint32 value);

  // optional uint32 photoID = 15;
  inline bool has_photoid() const;
  inline void clear_photoid();
  static const int kPhotoIDFieldNumber = 15;
  inline ::google::protobuf::uint32 photoid() const;
  inline void set_photoid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GuildProto.stSynGuildMemInfo)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_job();
  inline void clear_has_job();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_todaycontribute();
  inline void clear_has_todaycontribute();
  inline void set_has_contribute();
  inline void clear_has_contribute();
  inline void set_has_online();
  inline void clear_has_online();
  inline void set_has_battlepower();
  inline void clear_has_battlepower();
  inline void set_has_challengenum();
  inline void clear_has_challengenum();
  inline void set_has_assistnum();
  inline void clear_has_assistnum();
  inline void set_has_activityval();
  inline void clear_has_activityval();
  inline void set_has_lastlogintime();
  inline void clear_has_lastlogintime();
  inline void set_has_photoid();
  inline void clear_has_photoid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 job_;
  ::google::protobuf::uint32 sex_;
  ::google::protobuf::uint32 title_;
  ::google::protobuf::uint32 todaycontribute_;
  ::google::protobuf::uint32 contribute_;
  bool online_;
  ::google::protobuf::uint32 battlepower_;
  ::google::protobuf::uint32 challengenum_;
  ::google::protobuf::uint32 assistnum_;
  ::google::protobuf::uint32 activityval_;
  ::google::protobuf::uint32 lastlogintime_;
  ::google::protobuf::uint32 photoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(15 + 31) / 32];

  friend void  protobuf_AddDesc_GuildProto_2eproto();
  friend void protobuf_AssignDesc_GuildProto_2eproto();
  friend void protobuf_ShutdownFile_GuildProto_2eproto();

  void InitAsDefaultInstance();
  static stSynGuildMemInfo* default_instance_;
};
// -------------------------------------------------------------------

class stGuildListInfo : public ::google::protobuf::Message {
 public:
  stGuildListInfo();
  virtual ~stGuildListInfo();

  stGuildListInfo(const stGuildListInfo& from);

  inline stGuildListInfo& operator=(const stGuildListInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stGuildListInfo& default_instance();

  void Swap(stGuildListInfo* other);

  // implements Message ----------------------------------------------

  stGuildListInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stGuildListInfo& from);
  void MergeFrom(const stGuildListInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 rank = 1;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 1;
  inline ::google::protobuf::uint32 rank() const;
  inline void set_rank(::google::protobuf::uint32 value);

  // optional uint32 guildID = 2;
  inline bool has_guildid() const;
  inline void clear_guildid();
  static const int kGuildIDFieldNumber = 2;
  inline ::google::protobuf::uint32 guildid() const;
  inline void set_guildid(::google::protobuf::uint32 value);

  // optional string guildName = 3;
  inline bool has_guildname() const;
  inline void clear_guildname();
  static const int kGuildNameFieldNumber = 3;
  inline const ::std::string& guildname() const;
  inline void set_guildname(const ::std::string& value);
  inline void set_guildname(const char* value);
  inline void set_guildname(const char* value, size_t size);
  inline ::std::string* mutable_guildname();
  inline ::std::string* release_guildname();
  inline void set_allocated_guildname(::std::string* guildname);

  // optional uint32 hallLv = 4;
  inline bool has_halllv() const;
  inline void clear_halllv();
  static const int kHallLvFieldNumber = 4;
  inline ::google::protobuf::uint32 halllv() const;
  inline void set_halllv(::google::protobuf::uint32 value);

  // optional string leaderName = 5;
  inline bool has_leadername() const;
  inline void clear_leadername();
  static const int kLeaderNameFieldNumber = 5;
  inline const ::std::string& leadername() const;
  inline void set_leadername(const ::std::string& value);
  inline void set_leadername(const char* value);
  inline void set_leadername(const char* value, size_t size);
  inline ::std::string* mutable_leadername();
  inline ::std::string* release_leadername();
  inline void set_allocated_leadername(::std::string* leadername);

  // optional uint32 leaderLv = 6;
  inline bool has_leaderlv() const;
  inline void clear_leaderlv();
  static const int kLeaderLvFieldNumber = 6;
  inline ::google::protobuf::uint32 leaderlv() const;
  inline void set_leaderlv(::google::protobuf::uint32 value);

  // optional uint32 memNum = 7;
  inline bool has_memnum() const;
  inline void clear_memnum();
  static const int kMemNumFieldNumber = 7;
  inline ::google::protobuf::uint32 memnum() const;
  inline void set_memnum(::google::protobuf::uint32 value);

  // optional uint32 maxNum = 8;
  inline bool has_maxnum() const;
  inline void clear_maxnum();
  static const int kMaxNumFieldNumber = 8;
  inline ::google::protobuf::uint32 maxnum() const;
  inline void set_maxnum(::google::protobuf::uint32 value);

  // optional string sign = 9;
  inline bool has_sign() const;
  inline void clear_sign();
  static const int kSignFieldNumber = 9;
  inline const ::std::string& sign() const;
  inline void set_sign(const ::std::string& value);
  inline void set_sign(const char* value);
  inline void set_sign(const char* value, size_t size);
  inline ::std::string* mutable_sign();
  inline ::std::string* release_sign();
  inline void set_allocated_sign(::std::string* sign);

  // optional bool hasApplied = 10;
  inline bool has_hasapplied() const;
  inline void clear_hasapplied();
  static const int kHasAppliedFieldNumber = 10;
  inline bool hasapplied() const;
  inline void set_hasapplied(bool value);

  // optional uint32 badge = 11;
  inline bool has_badge() const;
  inline void clear_badge();
  static const int kBadgeFieldNumber = 11;
  inline ::google::protobuf::uint32 badge() const;
  inline void set_badge(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GuildProto.stGuildListInfo)
 private:
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_guildid();
  inline void clear_has_guildid();
  inline void set_has_guildname();
  inline void clear_has_guildname();
  inline void set_has_halllv();
  inline void clear_has_halllv();
  inline void set_has_leadername();
  inline void clear_has_leadername();
  inline void set_has_leaderlv();
  inline void clear_has_leaderlv();
  inline void set_has_memnum();
  inline void clear_has_memnum();
  inline void set_has_maxnum();
  inline void clear_has_maxnum();
  inline void set_has_sign();
  inline void clear_has_sign();
  inline void set_has_hasapplied();
  inline void clear_has_hasapplied();
  inline void set_has_badge();
  inline void clear_has_badge();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 rank_;
  ::google::protobuf::uint32 guildid_;
  ::std::string* guildname_;
  ::std::string* leadername_;
  ::google::protobuf::uint32 halllv_;
  ::google::protobuf::uint32 leaderlv_;
  ::google::protobuf::uint32 memnum_;
  ::google::protobuf::uint32 maxnum_;
  ::std::string* sign_;
  bool hasapplied_;
  ::google::protobuf::uint32 badge_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_GuildProto_2eproto();
  friend void protobuf_AssignDesc_GuildProto_2eproto();
  friend void protobuf_ShutdownFile_GuildProto_2eproto();

  void InitAsDefaultInstance();
  static stGuildListInfo* default_instance_;
};
// -------------------------------------------------------------------

class stReqGuild : public ::google::protobuf::Message {
 public:
  stReqGuild();
  virtual ~stReqGuild();

  stReqGuild(const stReqGuild& from);

  inline stReqGuild& operator=(const stReqGuild& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqGuild& default_instance();

  void Swap(stReqGuild* other);

  // implements Message ----------------------------------------------

  stReqGuild* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqGuild& from);
  void MergeFrom(const stReqGuild& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqGuild_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqGuild_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqGuild_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqGuild_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqGuild_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqGuild_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqGuild_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqGuild_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqGuild_ProtoModID_Parse(name, value);
  }

  typedef stReqGuild_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqGuild_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqGuild_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqGuild_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqGuild_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqGuild_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqGuild_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqGuild_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqGuild_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 rank = 1;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 1;
  inline ::google::protobuf::uint32 rank() const;
  inline void set_rank(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GuildProto.stReqGuild)
 private:
  inline void set_has_rank();
  inline void clear_has_rank();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 rank_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_GuildProto_2eproto();
  friend void protobuf_AssignDesc_GuildProto_2eproto();
  friend void protobuf_ShutdownFile_GuildProto_2eproto();

  void InitAsDefaultInstance();
  static stReqGuild* default_instance_;
};
// -------------------------------------------------------------------

class stRetGuild : public ::google::protobuf::Message {
 public:
  stRetGuild();
  virtual ~stRetGuild();

  stRetGuild(const stRetGuild& from);

  inline stRetGuild& operator=(const stRetGuild& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRetGuild& default_instance();

  void Swap(stRetGuild* other);

  // implements Message ----------------------------------------------

  stRetGuild* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRetGuild& from);
  void MergeFrom(const stRetGuild& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRetGuild_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRetGuild_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRetGuild_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRetGuild_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRetGuild_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRetGuild_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRetGuild_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRetGuild_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRetGuild_ProtoModID_Parse(name, value);
  }

  typedef stRetGuild_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRetGuild_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRetGuild_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRetGuild_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRetGuild_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRetGuild_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRetGuild_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRetGuild_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRetGuild_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 maxNum = 1;
  inline bool has_maxnum() const;
  inline void clear_maxnum();
  static const int kMaxNumFieldNumber = 1;
  inline ::google::protobuf::uint32 maxnum() const;
  inline void set_maxnum(::google::protobuf::uint32 value);

  // repeated .GuildProto.stGuildListInfo data = 2;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::GuildProto::stGuildListInfo& data(int index) const;
  inline ::GuildProto::stGuildListInfo* mutable_data(int index);
  inline ::GuildProto::stGuildListInfo* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::GuildProto::stGuildListInfo >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::GuildProto::stGuildListInfo >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:GuildProto.stRetGuild)
 private:
  inline void set_has_maxnum();
  inline void clear_has_maxnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::GuildProto::stGuildListInfo > data_;
  ::google::protobuf::uint32 maxnum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_GuildProto_2eproto();
  friend void protobuf_AssignDesc_GuildProto_2eproto();
  friend void protobuf_ShutdownFile_GuildProto_2eproto();

  void InitAsDefaultInstance();
  static stRetGuild* default_instance_;
};
// -------------------------------------------------------------------

class stReqGuildDetailInfo : public ::google::protobuf::Message {
 public:
  stReqGuildDetailInfo();
  virtual ~stReqGuildDetailInfo();

  stReqGuildDetailInfo(const stReqGuildDetailInfo& from);

  inline stReqGuildDetailInfo& operator=(const stReqGuildDetailInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqGuildDetailInfo& default_instance();

  void Swap(stReqGuildDetailInfo* other);

  // implements Message ----------------------------------------------

  stReqGuildDetailInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqGuildDetailInfo& from);
  void MergeFrom(const stReqGuildDetailInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqGuildDetailInfo_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqGuildDetailInfo_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqGuildDetailInfo_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqGuildDetailInfo_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqGuildDetailInfo_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqGuildDetailInfo_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqGuildDetailInfo_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqGuildDetailInfo_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqGuildDetailInfo_ProtoModID_Parse(name, value);
  }

  typedef stReqGuildDetailInfo_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqGuildDetailInfo_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqGuildDetailInfo_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqGuildDetailInfo_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqGuildDetailInfo_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqGuildDetailInfo_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqGuildDetailInfo_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqGuildDetailInfo_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqGuildDetailInfo_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 guildID = 1;
  inline bool has_guildid() const;
  inline void clear_guildid();
  static const int kGuildIDFieldNumber = 1;
  inline ::google::protobuf::uint32 guildid() const;
  inline void set_guildid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GuildProto.stReqGuildDetailInfo)
 private:
  inline void set_has_guildid();
  inline void clear_has_guildid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 guildid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_GuildProto_2eproto();
  friend void protobuf_AssignDesc_GuildProto_2eproto();
  friend void protobuf_ShutdownFile_GuildProto_2eproto();

  void InitAsDefaultInstance();
  static stReqGuildDetailInfo* default_instance_;
};
// -------------------------------------------------------------------

class stRetGuildDetailInfo : public ::google::protobuf::Message {
 public:
  stRetGuildDetailInfo();
  virtual ~stRetGuildDetailInfo();

  stRetGuildDetailInfo(const stRetGuildDetailInfo& from);

  inline stRetGuildDetailInfo& operator=(const stRetGuildDetailInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRetGuildDetailInfo& default_instance();

  void Swap(stRetGuildDetailInfo* other);

  // implements Message ----------------------------------------------

  stRetGuildDetailInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRetGuildDetailInfo& from);
  void MergeFrom(const stRetGuildDetailInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRetGuildDetailInfo_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRetGuildDetailInfo_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRetGuildDetailInfo_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRetGuildDetailInfo_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRetGuildDetailInfo_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRetGuildDetailInfo_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRetGuildDetailInfo_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRetGuildDetailInfo_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRetGuildDetailInfo_ProtoModID_Parse(name, value);
  }

  typedef stRetGuildDetailInfo_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRetGuildDetailInfo_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRetGuildDetailInfo_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRetGuildDetailInfo_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRetGuildDetailInfo_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRetGuildDetailInfo_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRetGuildDetailInfo_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRetGuildDetailInfo_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRetGuildDetailInfo_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 guildID = 1;
  inline bool has_guildid() const;
  inline void clear_guildid();
  static const int kGuildIDFieldNumber = 1;
  inline ::google::protobuf::uint32 guildid() const;
  inline void set_guildid(::google::protobuf::uint32 value);

  // optional string guildName = 2;
  inline bool has_guildname() const;
  inline void clear_guildname();
  static const int kGuildNameFieldNumber = 2;
  inline const ::std::string& guildname() const;
  inline void set_guildname(const ::std::string& value);
  inline void set_guildname(const char* value);
  inline void set_guildname(const char* value, size_t size);
  inline ::std::string* mutable_guildname();
  inline ::std::string* release_guildname();
  inline void set_allocated_guildname(::std::string* guildname);

  // optional uint32 hallLv = 3;
  inline bool has_halllv() const;
  inline void clear_halllv();
  static const int kHallLvFieldNumber = 3;
  inline ::google::protobuf::uint32 halllv() const;
  inline void set_halllv(::google::protobuf::uint32 value);

  // optional uint32 exp = 4;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 4;
  inline ::google::protobuf::uint32 exp() const;
  inline void set_exp(::google::protobuf::uint32 value);

  // optional uint32 memNum = 5;
  inline bool has_memnum() const;
  inline void clear_memnum();
  static const int kMemNumFieldNumber = 5;
  inline ::google::protobuf::uint32 memnum() const;
  inline void set_memnum(::google::protobuf::uint32 value);

  // optional uint32 maxNum = 7;
  inline bool has_maxnum() const;
  inline void clear_maxnum();
  static const int kMaxNumFieldNumber = 7;
  inline ::google::protobuf::uint32 maxnum() const;
  inline void set_maxnum(::google::protobuf::uint32 value);

  // optional string sign = 8;
  inline bool has_sign() const;
  inline void clear_sign();
  static const int kSignFieldNumber = 8;
  inline const ::std::string& sign() const;
  inline void set_sign(const ::std::string& value);
  inline void set_sign(const char* value);
  inline void set_sign(const char* value, size_t size);
  inline ::std::string* mutable_sign();
  inline ::std::string* release_sign();
  inline void set_allocated_sign(::std::string* sign);

  // repeated .GuildProto.stSynGuildMemInfo memInfo = 9;
  inline int meminfo_size() const;
  inline void clear_meminfo();
  static const int kMemInfoFieldNumber = 9;
  inline const ::GuildProto::stSynGuildMemInfo& meminfo(int index) const;
  inline ::GuildProto::stSynGuildMemInfo* mutable_meminfo(int index);
  inline ::GuildProto::stSynGuildMemInfo* add_meminfo();
  inline const ::google::protobuf::RepeatedPtrField< ::GuildProto::stSynGuildMemInfo >&
      meminfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::GuildProto::stSynGuildMemInfo >*
      mutable_meminfo();

  // optional uint32 badge = 10;
  inline bool has_badge() const;
  inline void clear_badge();
  static const int kBadgeFieldNumber = 10;
  inline ::google::protobuf::uint32 badge() const;
  inline void set_badge(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GuildProto.stRetGuildDetailInfo)
 private:
  inline void set_has_guildid();
  inline void clear_has_guildid();
  inline void set_has_guildname();
  inline void clear_has_guildname();
  inline void set_has_halllv();
  inline void clear_has_halllv();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_memnum();
  inline void clear_has_memnum();
  inline void set_has_maxnum();
  inline void clear_has_maxnum();
  inline void set_has_sign();
  inline void clear_has_sign();
  inline void set_has_badge();
  inline void clear_has_badge();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* guildname_;
  ::google::protobuf::uint32 guildid_;
  ::google::protobuf::uint32 halllv_;
  ::google::protobuf::uint32 exp_;
  ::google::protobuf::uint32 memnum_;
  ::std::string* sign_;
  ::google::protobuf::uint32 maxnum_;
  ::google::protobuf::uint32 badge_;
  ::google::protobuf::RepeatedPtrField< ::GuildProto::stSynGuildMemInfo > meminfo_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_GuildProto_2eproto();
  friend void protobuf_AssignDesc_GuildProto_2eproto();
  friend void protobuf_ShutdownFile_GuildProto_2eproto();

  void InitAsDefaultInstance();
  static stRetGuildDetailInfo* default_instance_;
};
// -------------------------------------------------------------------

class stReqCreateGuild : public ::google::protobuf::Message {
 public:
  stReqCreateGuild();
  virtual ~stReqCreateGuild();

  stReqCreateGuild(const stReqCreateGuild& from);

  inline stReqCreateGuild& operator=(const stReqCreateGuild& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqCreateGuild& default_instance();

  void Swap(stReqCreateGuild* other);

  // implements Message ----------------------------------------------

  stReqCreateGuild* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqCreateGuild& from);
  void MergeFrom(const stReqCreateGuild& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqCreateGuild_eUseResType eUseResType;
  static const eUseResType eDiamond = stReqCreateGuild_eUseResType_eDiamond;
  static const eUseResType eGoldCoin = stReqCreateGuild_eUseResType_eGoldCoin;
  static inline bool eUseResType_IsValid(int value) {
    return stReqCreateGuild_eUseResType_IsValid(value);
  }
  static const eUseResType eUseResType_MIN =
    stReqCreateGuild_eUseResType_eUseResType_MIN;
  static const eUseResType eUseResType_MAX =
    stReqCreateGuild_eUseResType_eUseResType_MAX;
  static const int eUseResType_ARRAYSIZE =
    stReqCreateGuild_eUseResType_eUseResType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eUseResType_descriptor() {
    return stReqCreateGuild_eUseResType_descriptor();
  }
  static inline const ::std::string& eUseResType_Name(eUseResType value) {
    return stReqCreateGuild_eUseResType_Name(value);
  }
  static inline bool eUseResType_Parse(const ::std::string& name,
      eUseResType* value) {
    return stReqCreateGuild_eUseResType_Parse(name, value);
  }

  typedef stReqCreateGuild_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqCreateGuild_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqCreateGuild_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqCreateGuild_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqCreateGuild_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqCreateGuild_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqCreateGuild_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqCreateGuild_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqCreateGuild_ProtoModID_Parse(name, value);
  }

  typedef stReqCreateGuild_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqCreateGuild_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqCreateGuild_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqCreateGuild_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqCreateGuild_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqCreateGuild_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqCreateGuild_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqCreateGuild_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqCreateGuild_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string guildName = 1;
  inline bool has_guildname() const;
  inline void clear_guildname();
  static const int kGuildNameFieldNumber = 1;
  inline const ::std::string& guildname() const;
  inline void set_guildname(const ::std::string& value);
  inline void set_guildname(const char* value);
  inline void set_guildname(const char* value, size_t size);
  inline ::std::string* mutable_guildname();
  inline ::std::string* release_guildname();
  inline void set_allocated_guildname(::std::string* guildname);

  // optional .GuildProto.stReqCreateGuild.eUseResType eType = 2;
  inline bool has_etype() const;
  inline void clear_etype();
  static const int kETypeFieldNumber = 2;
  inline ::GuildProto::stReqCreateGuild_eUseResType etype() const;
  inline void set_etype(::GuildProto::stReqCreateGuild_eUseResType value);

  // optional uint32 badge = 3;
  inline bool has_badge() const;
  inline void clear_badge();
  static const int kBadgeFieldNumber = 3;
  inline ::google::protobuf::uint32 badge() const;
  inline void set_badge(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GuildProto.stReqCreateGuild)
 private:
  inline void set_has_guildname();
  inline void clear_has_guildname();
  inline void set_has_etype();
  inline void clear_has_etype();
  inline void set_has_badge();
  inline void clear_has_badge();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* guildname_;
  int etype_;
  ::google::protobuf::uint32 badge_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_GuildProto_2eproto();
  friend void protobuf_AssignDesc_GuildProto_2eproto();
  friend void protobuf_ShutdownFile_GuildProto_2eproto();

  void InitAsDefaultInstance();
  static stReqCreateGuild* default_instance_;
};
// -------------------------------------------------------------------

class stCreateGuildError : public ::google::protobuf::Message {
 public:
  stCreateGuildError();
  virtual ~stCreateGuildError();

  stCreateGuildError(const stCreateGuildError& from);

  inline stCreateGuildError& operator=(const stCreateGuildError& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stCreateGuildError& default_instance();

  void Swap(stCreateGuildError* other);

  // implements Message ----------------------------------------------

  stCreateGuildError* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stCreateGuildError& from);
  void MergeFrom(const stCreateGuildError& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stCreateGuildError_ProtoModID ProtoModID;
  static const ProtoModID ModID = stCreateGuildError_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stCreateGuildError_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stCreateGuildError_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stCreateGuildError_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stCreateGuildError_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stCreateGuildError_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stCreateGuildError_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stCreateGuildError_ProtoModID_Parse(name, value);
  }

  typedef stCreateGuildError_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stCreateGuildError_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stCreateGuildError_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stCreateGuildError_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stCreateGuildError_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stCreateGuildError_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stCreateGuildError_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stCreateGuildError_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stCreateGuildError_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .GuildProto.eCreateGuildError result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::GuildProto::eCreateGuildError result() const;
  inline void set_result(::GuildProto::eCreateGuildError value);

  // @@protoc_insertion_point(class_scope:GuildProto.stCreateGuildError)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_GuildProto_2eproto();
  friend void protobuf_AssignDesc_GuildProto_2eproto();
  friend void protobuf_ShutdownFile_GuildProto_2eproto();

  void InitAsDefaultInstance();
  static stCreateGuildError* default_instance_;
};
// -------------------------------------------------------------------

class stSendMyGuild : public ::google::protobuf::Message {
 public:
  stSendMyGuild();
  virtual ~stSendMyGuild();

  stSendMyGuild(const stSendMyGuild& from);

  inline stSendMyGuild& operator=(const stSendMyGuild& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSendMyGuild& default_instance();

  void Swap(stSendMyGuild* other);

  // implements Message ----------------------------------------------

  stSendMyGuild* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSendMyGuild& from);
  void MergeFrom(const stSendMyGuild& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stSendMyGuild_ProtoModID ProtoModID;
  static const ProtoModID ModID = stSendMyGuild_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stSendMyGuild_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stSendMyGuild_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stSendMyGuild_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stSendMyGuild_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stSendMyGuild_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stSendMyGuild_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stSendMyGuild_ProtoModID_Parse(name, value);
  }

  typedef stSendMyGuild_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stSendMyGuild_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stSendMyGuild_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stSendMyGuild_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stSendMyGuild_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stSendMyGuild_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stSendMyGuild_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stSendMyGuild_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stSendMyGuild_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 guildID = 1;
  inline bool has_guildid() const;
  inline void clear_guildid();
  static const int kGuildIDFieldNumber = 1;
  inline ::google::protobuf::uint32 guildid() const;
  inline void set_guildid(::google::protobuf::uint32 value);

  // optional string guildName = 2;
  inline bool has_guildname() const;
  inline void clear_guildname();
  static const int kGuildNameFieldNumber = 2;
  inline const ::std::string& guildname() const;
  inline void set_guildname(const ::std::string& value);
  inline void set_guildname(const char* value);
  inline void set_guildname(const char* value, size_t size);
  inline ::std::string* mutable_guildname();
  inline ::std::string* release_guildname();
  inline void set_allocated_guildname(::std::string* guildname);

  // optional uint32 exp = 3;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 3;
  inline ::google::protobuf::uint32 exp() const;
  inline void set_exp(::google::protobuf::uint32 value);

  // optional uint32 leaderID = 4;
  inline bool has_leaderid() const;
  inline void clear_leaderid();
  static const int kLeaderIDFieldNumber = 4;
  inline ::google::protobuf::uint32 leaderid() const;
  inline void set_leaderid(::google::protobuf::uint32 value);

  // optional uint32 contribute = 5;
  inline bool has_contribute() const;
  inline void clear_contribute();
  static const int kContributeFieldNumber = 5;
  inline ::google::protobuf::uint32 contribute() const;
  inline void set_contribute(::google::protobuf::uint32 value);

  // optional uint32 fireRemainTime = 6;
  inline bool has_fireremaintime() const;
  inline void clear_fireremaintime();
  static const int kFireRemainTimeFieldNumber = 6;
  inline ::google::protobuf::uint32 fireremaintime() const;
  inline void set_fireremaintime(::google::protobuf::uint32 value);

  // optional string sign = 7;
  inline bool has_sign() const;
  inline void clear_sign();
  static const int kSignFieldNumber = 7;
  inline const ::std::string& sign() const;
  inline void set_sign(const ::std::string& value);
  inline void set_sign(const char* value);
  inline void set_sign(const char* value, size_t size);
  inline ::std::string* mutable_sign();
  inline ::std::string* release_sign();
  inline void set_allocated_sign(::std::string* sign);

  // optional uint32 maxNum = 8;
  inline bool has_maxnum() const;
  inline void clear_maxnum();
  static const int kMaxNumFieldNumber = 8;
  inline ::google::protobuf::uint32 maxnum() const;
  inline void set_maxnum(::google::protobuf::uint32 value);

  // optional string notice = 9;
  inline bool has_notice() const;
  inline void clear_notice();
  static const int kNoticeFieldNumber = 9;
  inline const ::std::string& notice() const;
  inline void set_notice(const ::std::string& value);
  inline void set_notice(const char* value);
  inline void set_notice(const char* value, size_t size);
  inline ::std::string* mutable_notice();
  inline ::std::string* release_notice();
  inline void set_allocated_notice(::std::string* notice);

  // optional uint32 hallLv = 10;
  inline bool has_halllv() const;
  inline void clear_halllv();
  static const int kHallLvFieldNumber = 10;
  inline ::google::protobuf::uint32 halllv() const;
  inline void set_halllv(::google::protobuf::uint32 value);

  // optional uint32 shopLv = 11;
  inline bool has_shoplv() const;
  inline void clear_shoplv();
  static const int kShopLvFieldNumber = 11;
  inline ::google::protobuf::uint32 shoplv() const;
  inline void set_shoplv(::google::protobuf::uint32 value);

  // optional uint32 prayBuildingLv = 12;
  inline bool has_praybuildinglv() const;
  inline void clear_praybuildinglv();
  static const int kPrayBuildingLvFieldNumber = 12;
  inline ::google::protobuf::uint32 praybuildinglv() const;
  inline void set_praybuildinglv(::google::protobuf::uint32 value);

  // repeated .GuildProto.stSynGuildMemInfo data = 13;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 13;
  inline const ::GuildProto::stSynGuildMemInfo& data(int index) const;
  inline ::GuildProto::stSynGuildMemInfo* mutable_data(int index);
  inline ::GuildProto::stSynGuildMemInfo* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::GuildProto::stSynGuildMemInfo >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::GuildProto::stSynGuildMemInfo >*
      mutable_data();

  // optional uint32 badge = 14;
  inline bool has_badge() const;
  inline void clear_badge();
  static const int kBadgeFieldNumber = 14;
  inline ::google::protobuf::uint32 badge() const;
  inline void set_badge(::google::protobuf::uint32 value);

  // optional uint32 rank = 15;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 15;
  inline ::google::protobuf::uint32 rank() const;
  inline void set_rank(::google::protobuf::uint32 value);

  // optional uint32 activityDegree = 16;
  inline bool has_activitydegree() const;
  inline void clear_activitydegree();
  static const int kActivityDegreeFieldNumber = 16;
  inline ::google::protobuf::uint32 activitydegree() const;
  inline void set_activitydegree(::google::protobuf::uint32 value);

  // optional uint32 blackMarket = 17;
  inline bool has_blackmarket() const;
  inline void clear_blackmarket();
  static const int kBlackMarketFieldNumber = 17;
  inline ::google::protobuf::uint32 blackmarket() const;
  inline void set_blackmarket(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GuildProto.stSendMyGuild)
 private:
  inline void set_has_guildid();
  inline void clear_has_guildid();
  inline void set_has_guildname();
  inline void clear_has_guildname();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_leaderid();
  inline void clear_has_leaderid();
  inline void set_has_contribute();
  inline void clear_has_contribute();
  inline void set_has_fireremaintime();
  inline void clear_has_fireremaintime();
  inline void set_has_sign();
  inline void clear_has_sign();
  inline void set_has_maxnum();
  inline void clear_has_maxnum();
  inline void set_has_notice();
  inline void clear_has_notice();
  inline void set_has_halllv();
  inline void clear_has_halllv();
  inline void set_has_shoplv();
  inline void clear_has_shoplv();
  inline void set_has_praybuildinglv();
  inline void clear_has_praybuildinglv();
  inline void set_has_badge();
  inline void clear_has_badge();
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_activitydegree();
  inline void clear_has_activitydegree();
  inline void set_has_blackmarket();
  inline void clear_has_blackmarket();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* guildname_;
  ::google::protobuf::uint32 guildid_;
  ::google::protobuf::uint32 exp_;
  ::google::protobuf::uint32 leaderid_;
  ::google::protobuf::uint32 contribute_;
  ::std::string* sign_;
  ::google::protobuf::uint32 fireremaintime_;
  ::google::protobuf::uint32 maxnum_;
  ::std::string* notice_;
  ::google::protobuf::uint32 halllv_;
  ::google::protobuf::uint32 shoplv_;
  ::google::protobuf::RepeatedPtrField< ::GuildProto::stSynGuildMemInfo > data_;
  ::google::protobuf::uint32 praybuildinglv_;
  ::google::protobuf::uint32 badge_;
  ::google::protobuf::uint32 rank_;
  ::google::protobuf::uint32 activitydegree_;
  ::google::protobuf::uint32 blackmarket_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(17 + 31) / 32];

  friend void  protobuf_AddDesc_GuildProto_2eproto();
  friend void protobuf_AssignDesc_GuildProto_2eproto();
  friend void protobuf_ShutdownFile_GuildProto_2eproto();

  void InitAsDefaultInstance();
  static stSendMyGuild* default_instance_;
};
// -------------------------------------------------------------------

class stReqJoinInGuild : public ::google::protobuf::Message {
 public:
  stReqJoinInGuild();
  virtual ~stReqJoinInGuild();

  stReqJoinInGuild(const stReqJoinInGuild& from);

  inline stReqJoinInGuild& operator=(const stReqJoinInGuild& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqJoinInGuild& default_instance();

  void Swap(stReqJoinInGuild* other);

  // implements Message ----------------------------------------------

  stReqJoinInGuild* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqJoinInGuild& from);
  void MergeFrom(const stReqJoinInGuild& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqJoinInGuild_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqJoinInGuild_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqJoinInGuild_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqJoinInGuild_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqJoinInGuild_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqJoinInGuild_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqJoinInGuild_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqJoinInGuild_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqJoinInGuild_ProtoModID_Parse(name, value);
  }

  typedef stReqJoinInGuild_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqJoinInGuild_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqJoinInGuild_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqJoinInGuild_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqJoinInGuild_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqJoinInGuild_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqJoinInGuild_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqJoinInGuild_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqJoinInGuild_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 guildID = 1;
  inline bool has_guildid() const;
  inline void clear_guildid();
  static const int kGuildIDFieldNumber = 1;
  inline ::google::protobuf::uint32 guildid() const;
  inline void set_guildid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GuildProto.stReqJoinInGuild)
 private:
  inline void set_has_guildid();
  inline void clear_has_guildid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 guildid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_GuildProto_2eproto();
  friend void protobuf_AssignDesc_GuildProto_2eproto();
  friend void protobuf_ShutdownFile_GuildProto_2eproto();

  void InitAsDefaultInstance();
  static stReqJoinInGuild* default_instance_;
};
// -------------------------------------------------------------------

class stJoinInGuildResult : public ::google::protobuf::Message {
 public:
  stJoinInGuildResult();
  virtual ~stJoinInGuildResult();

  stJoinInGuildResult(const stJoinInGuildResult& from);

  inline stJoinInGuildResult& operator=(const stJoinInGuildResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stJoinInGuildResult& default_instance();

  void Swap(stJoinInGuildResult* other);

  // implements Message ----------------------------------------------

  stJoinInGuildResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stJoinInGuildResult& from);
  void MergeFrom(const stJoinInGuildResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stJoinInGuildResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stJoinInGuildResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stJoinInGuildResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stJoinInGuildResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stJoinInGuildResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stJoinInGuildResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stJoinInGuildResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stJoinInGuildResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stJoinInGuildResult_ProtoModID_Parse(name, value);
  }

  typedef stJoinInGuildResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stJoinInGuildResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stJoinInGuildResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stJoinInGuildResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stJoinInGuildResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stJoinInGuildResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stJoinInGuildResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stJoinInGuildResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stJoinInGuildResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .GuildProto.JoinGuildResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::GuildProto::JoinGuildResult result() const;
  inline void set_result(::GuildProto::JoinGuildResult value);

  // optional uint32 guildID = 2;
  inline bool has_guildid() const;
  inline void clear_guildid();
  static const int kGuildIDFieldNumber = 2;
  inline ::google::protobuf::uint32 guildid() const;
  inline void set_guildid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GuildProto.stJoinInGuildResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_guildid();
  inline void clear_has_guildid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;
  ::google::protobuf::uint32 guildid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_GuildProto_2eproto();
  friend void protobuf_AssignDesc_GuildProto_2eproto();
  friend void protobuf_ShutdownFile_GuildProto_2eproto();

  void InitAsDefaultInstance();
  static stJoinInGuildResult* default_instance_;
};
// -------------------------------------------------------------------

class stReqApplyJoinInList : public ::google::protobuf::Message {
 public:
  stReqApplyJoinInList();
  virtual ~stReqApplyJoinInList();

  stReqApplyJoinInList(const stReqApplyJoinInList& from);

  inline stReqApplyJoinInList& operator=(const stReqApplyJoinInList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqApplyJoinInList& default_instance();

  void Swap(stReqApplyJoinInList* other);

  // implements Message ----------------------------------------------

  stReqApplyJoinInList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqApplyJoinInList& from);
  void MergeFrom(const stReqApplyJoinInList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqApplyJoinInList_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqApplyJoinInList_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqApplyJoinInList_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqApplyJoinInList_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqApplyJoinInList_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqApplyJoinInList_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqApplyJoinInList_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqApplyJoinInList_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqApplyJoinInList_ProtoModID_Parse(name, value);
  }

  typedef stReqApplyJoinInList_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqApplyJoinInList_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqApplyJoinInList_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqApplyJoinInList_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqApplyJoinInList_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqApplyJoinInList_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqApplyJoinInList_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqApplyJoinInList_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqApplyJoinInList_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GuildProto.stReqApplyJoinInList)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_GuildProto_2eproto();
  friend void protobuf_AssignDesc_GuildProto_2eproto();
  friend void protobuf_ShutdownFile_GuildProto_2eproto();

  void InitAsDefaultInstance();
  static stReqApplyJoinInList* default_instance_;
};
// -------------------------------------------------------------------

class stSynApplierInfo : public ::google::protobuf::Message {
 public:
  stSynApplierInfo();
  virtual ~stSynApplierInfo();

  stSynApplierInfo(const stSynApplierInfo& from);

  inline stSynApplierInfo& operator=(const stSynApplierInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSynApplierInfo& default_instance();

  void Swap(stSynApplierInfo* other);

  // implements Message ----------------------------------------------

  stSynApplierInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSynApplierInfo& from);
  void MergeFrom(const stSynApplierInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint32 job = 4;
  inline bool has_job() const;
  inline void clear_job();
  static const int kJobFieldNumber = 4;
  inline ::google::protobuf::uint32 job() const;
  inline void set_job(::google::protobuf::uint32 value);

  // optional uint32 sex = 5;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 5;
  inline ::google::protobuf::uint32 sex() const;
  inline void set_sex(::google::protobuf::uint32 value);

  // optional uint32 passTime = 6;
  inline bool has_passtime() const;
  inline void clear_passtime();
  static const int kPassTimeFieldNumber = 6;
  inline ::google::protobuf::uint32 passtime() const;
  inline void set_passtime(::google::protobuf::uint32 value);

  // optional uint32 battlePower = 7;
  inline bool has_battlepower() const;
  inline void clear_battlepower();
  static const int kBattlePowerFieldNumber = 7;
  inline ::google::protobuf::uint32 battlepower() const;
  inline void set_battlepower(::google::protobuf::uint32 value);

  // optional uint32 photoID = 8;
  inline bool has_photoid() const;
  inline void clear_photoid();
  static const int kPhotoIDFieldNumber = 8;
  inline ::google::protobuf::uint32 photoid() const;
  inline void set_photoid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GuildProto.stSynApplierInfo)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_job();
  inline void clear_has_job();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_passtime();
  inline void clear_has_passtime();
  inline void set_has_battlepower();
  inline void clear_has_battlepower();
  inline void set_has_photoid();
  inline void clear_has_photoid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 job_;
  ::google::protobuf::uint32 sex_;
  ::google::protobuf::uint32 passtime_;
  ::google::protobuf::uint32 battlepower_;
  ::google::protobuf::uint32 photoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_GuildProto_2eproto();
  friend void protobuf_AssignDesc_GuildProto_2eproto();
  friend void protobuf_ShutdownFile_GuildProto_2eproto();

  void InitAsDefaultInstance();
  static stSynApplierInfo* default_instance_;
};
// -------------------------------------------------------------------

class stRetApplyJoinInList : public ::google::protobuf::Message {
 public:
  stRetApplyJoinInList();
  virtual ~stRetApplyJoinInList();

  stRetApplyJoinInList(const stRetApplyJoinInList& from);

  inline stRetApplyJoinInList& operator=(const stRetApplyJoinInList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRetApplyJoinInList& default_instance();

  void Swap(stRetApplyJoinInList* other);

  // implements Message ----------------------------------------------

  stRetApplyJoinInList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRetApplyJoinInList& from);
  void MergeFrom(const stRetApplyJoinInList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRetApplyJoinInList_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRetApplyJoinInList_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRetApplyJoinInList_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRetApplyJoinInList_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRetApplyJoinInList_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRetApplyJoinInList_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRetApplyJoinInList_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRetApplyJoinInList_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRetApplyJoinInList_ProtoModID_Parse(name, value);
  }

  typedef stRetApplyJoinInList_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRetApplyJoinInList_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRetApplyJoinInList_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRetApplyJoinInList_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRetApplyJoinInList_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRetApplyJoinInList_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRetApplyJoinInList_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRetApplyJoinInList_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRetApplyJoinInList_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .GuildProto.stSynApplierInfo data = 1;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::GuildProto::stSynApplierInfo& data(int index) const;
  inline ::GuildProto::stSynApplierInfo* mutable_data(int index);
  inline ::GuildProto::stSynApplierInfo* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::GuildProto::stSynApplierInfo >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::GuildProto::stSynApplierInfo >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:GuildProto.stRetApplyJoinInList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::GuildProto::stSynApplierInfo > data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_GuildProto_2eproto();
  friend void protobuf_AssignDesc_GuildProto_2eproto();
  friend void protobuf_ShutdownFile_GuildProto_2eproto();

  void InitAsDefaultInstance();
  static stRetApplyJoinInList* default_instance_;
};
// -------------------------------------------------------------------

class stReplyApplier : public ::google::protobuf::Message {
 public:
  stReplyApplier();
  virtual ~stReplyApplier();

  stReplyApplier(const stReplyApplier& from);

  inline stReplyApplier& operator=(const stReplyApplier& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReplyApplier& default_instance();

  void Swap(stReplyApplier* other);

  // implements Message ----------------------------------------------

  stReplyApplier* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReplyApplier& from);
  void MergeFrom(const stReplyApplier& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReplyApplier_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReplyApplier_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReplyApplier_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReplyApplier_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReplyApplier_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReplyApplier_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReplyApplier_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReplyApplier_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReplyApplier_ProtoModID_Parse(name, value);
  }

  typedef stReplyApplier_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReplyApplier_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReplyApplier_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReplyApplier_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReplyApplier_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReplyApplier_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReplyApplier_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReplyApplier_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReplyApplier_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional bool agree = 2;
  inline bool has_agree() const;
  inline void clear_agree();
  static const int kAgreeFieldNumber = 2;
  inline bool agree() const;
  inline void set_agree(bool value);

  // @@protoc_insertion_point(class_scope:GuildProto.stReplyApplier)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_agree();
  inline void clear_has_agree();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  bool agree_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_GuildProto_2eproto();
  friend void protobuf_AssignDesc_GuildProto_2eproto();
  friend void protobuf_ShutdownFile_GuildProto_2eproto();

  void InitAsDefaultInstance();
  static stReplyApplier* default_instance_;
};
// -------------------------------------------------------------------

class stReplyApplerError : public ::google::protobuf::Message {
 public:
  stReplyApplerError();
  virtual ~stReplyApplerError();

  stReplyApplerError(const stReplyApplerError& from);

  inline stReplyApplerError& operator=(const stReplyApplerError& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReplyApplerError& default_instance();

  void Swap(stReplyApplerError* other);

  // implements Message ----------------------------------------------

  stReplyApplerError* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReplyApplerError& from);
  void MergeFrom(const stReplyApplerError& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReplyApplerError_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReplyApplerError_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReplyApplerError_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReplyApplerError_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReplyApplerError_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReplyApplerError_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReplyApplerError_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReplyApplerError_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReplyApplerError_ProtoModID_Parse(name, value);
  }

  typedef stReplyApplerError_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReplyApplerError_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReplyApplerError_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReplyApplerError_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReplyApplerError_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReplyApplerError_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReplyApplerError_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReplyApplerError_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReplyApplerError_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .GuildProto.ReplyError result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::GuildProto::ReplyError result() const;
  inline void set_result(::GuildProto::ReplyError value);

  // @@protoc_insertion_point(class_scope:GuildProto.stReplyApplerError)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_GuildProto_2eproto();
  friend void protobuf_AssignDesc_GuildProto_2eproto();
  friend void protobuf_ShutdownFile_GuildProto_2eproto();

  void InitAsDefaultInstance();
  static stReplyApplerError* default_instance_;
};
// -------------------------------------------------------------------

class stJoinInGuildTip : public ::google::protobuf::Message {
 public:
  stJoinInGuildTip();
  virtual ~stJoinInGuildTip();

  stJoinInGuildTip(const stJoinInGuildTip& from);

  inline stJoinInGuildTip& operator=(const stJoinInGuildTip& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stJoinInGuildTip& default_instance();

  void Swap(stJoinInGuildTip* other);

  // implements Message ----------------------------------------------

  stJoinInGuildTip* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stJoinInGuildTip& from);
  void MergeFrom(const stJoinInGuildTip& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stJoinInGuildTip_ProtoModID ProtoModID;
  static const ProtoModID ModID = stJoinInGuildTip_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stJoinInGuildTip_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stJoinInGuildTip_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stJoinInGuildTip_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stJoinInGuildTip_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stJoinInGuildTip_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stJoinInGuildTip_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stJoinInGuildTip_ProtoModID_Parse(name, value);
  }

  typedef stJoinInGuildTip_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stJoinInGuildTip_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stJoinInGuildTip_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stJoinInGuildTip_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stJoinInGuildTip_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stJoinInGuildTip_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stJoinInGuildTip_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stJoinInGuildTip_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stJoinInGuildTip_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional bool accept = 1;
  inline bool has_accept() const;
  inline void clear_accept();
  static const int kAcceptFieldNumber = 1;
  inline bool accept() const;
  inline void set_accept(bool value);

  // optional string otherName = 2;
  inline bool has_othername() const;
  inline void clear_othername();
  static const int kOtherNameFieldNumber = 2;
  inline const ::std::string& othername() const;
  inline void set_othername(const ::std::string& value);
  inline void set_othername(const char* value);
  inline void set_othername(const char* value, size_t size);
  inline ::std::string* mutable_othername();
  inline ::std::string* release_othername();
  inline void set_allocated_othername(::std::string* othername);

  // @@protoc_insertion_point(class_scope:GuildProto.stJoinInGuildTip)
 private:
  inline void set_has_accept();
  inline void clear_has_accept();
  inline void set_has_othername();
  inline void clear_has_othername();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* othername_;
  bool accept_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_GuildProto_2eproto();
  friend void protobuf_AssignDesc_GuildProto_2eproto();
  friend void protobuf_ShutdownFile_GuildProto_2eproto();

  void InitAsDefaultInstance();
  static stJoinInGuildTip* default_instance_;
};
// -------------------------------------------------------------------

class stMemJoinInGuild : public ::google::protobuf::Message {
 public:
  stMemJoinInGuild();
  virtual ~stMemJoinInGuild();

  stMemJoinInGuild(const stMemJoinInGuild& from);

  inline stMemJoinInGuild& operator=(const stMemJoinInGuild& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stMemJoinInGuild& default_instance();

  void Swap(stMemJoinInGuild* other);

  // implements Message ----------------------------------------------

  stMemJoinInGuild* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stMemJoinInGuild& from);
  void MergeFrom(const stMemJoinInGuild& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stMemJoinInGuild_ProtoModID ProtoModID;
  static const ProtoModID ModID = stMemJoinInGuild_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stMemJoinInGuild_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stMemJoinInGuild_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stMemJoinInGuild_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stMemJoinInGuild_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stMemJoinInGuild_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stMemJoinInGuild_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stMemJoinInGuild_ProtoModID_Parse(name, value);
  }

  typedef stMemJoinInGuild_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stMemJoinInGuild_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stMemJoinInGuild_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stMemJoinInGuild_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stMemJoinInGuild_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stMemJoinInGuild_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stMemJoinInGuild_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stMemJoinInGuild_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stMemJoinInGuild_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .GuildProto.stSynGuildMemInfo data = 1;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::GuildProto::stSynGuildMemInfo& data() const;
  inline ::GuildProto::stSynGuildMemInfo* mutable_data();
  inline ::GuildProto::stSynGuildMemInfo* release_data();
  inline void set_allocated_data(::GuildProto::stSynGuildMemInfo* data);

  // @@protoc_insertion_point(class_scope:GuildProto.stMemJoinInGuild)
 private:
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::GuildProto::stSynGuildMemInfo* data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_GuildProto_2eproto();
  friend void protobuf_AssignDesc_GuildProto_2eproto();
  friend void protobuf_ShutdownFile_GuildProto_2eproto();

  void InitAsDefaultInstance();
  static stMemJoinInGuild* default_instance_;
};
// -------------------------------------------------------------------

class stReqLeaveGuild : public ::google::protobuf::Message {
 public:
  stReqLeaveGuild();
  virtual ~stReqLeaveGuild();

  stReqLeaveGuild(const stReqLeaveGuild& from);

  inline stReqLeaveGuild& operator=(const stReqLeaveGuild& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqLeaveGuild& default_instance();

  void Swap(stReqLeaveGuild* other);

  // implements Message ----------------------------------------------

  stReqLeaveGuild* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqLeaveGuild& from);
  void MergeFrom(const stReqLeaveGuild& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqLeaveGuild_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqLeaveGuild_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqLeaveGuild_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqLeaveGuild_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqLeaveGuild_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqLeaveGuild_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqLeaveGuild_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqLeaveGuild_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqLeaveGuild_ProtoModID_Parse(name, value);
  }

  typedef stReqLeaveGuild_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqLeaveGuild_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqLeaveGuild_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqLeaveGuild_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqLeaveGuild_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqLeaveGuild_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqLeaveGuild_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqLeaveGuild_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqLeaveGuild_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 guildID = 1;
  inline bool has_guildid() const;
  inline void clear_guildid();
  static const int kGuildIDFieldNumber = 1;
  inline ::google::protobuf::uint32 guildid() const;
  inline void set_guildid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GuildProto.stReqLeaveGuild)
 private:
  inline void set_has_guildid();
  inline void clear_has_guildid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 guildid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_GuildProto_2eproto();
  friend void protobuf_AssignDesc_GuildProto_2eproto();
  friend void protobuf_ShutdownFile_GuildProto_2eproto();

  void InitAsDefaultInstance();
  static stReqLeaveGuild* default_instance_;
};
// -------------------------------------------------------------------

class stMemLeaveGuild : public ::google::protobuf::Message {
 public:
  stMemLeaveGuild();
  virtual ~stMemLeaveGuild();

  stMemLeaveGuild(const stMemLeaveGuild& from);

  inline stMemLeaveGuild& operator=(const stMemLeaveGuild& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stMemLeaveGuild& default_instance();

  void Swap(stMemLeaveGuild* other);

  // implements Message ----------------------------------------------

  stMemLeaveGuild* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stMemLeaveGuild& from);
  void MergeFrom(const stMemLeaveGuild& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stMemLeaveGuild_ProtoModID ProtoModID;
  static const ProtoModID ModID = stMemLeaveGuild_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stMemLeaveGuild_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stMemLeaveGuild_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stMemLeaveGuild_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stMemLeaveGuild_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stMemLeaveGuild_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stMemLeaveGuild_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stMemLeaveGuild_ProtoModID_Parse(name, value);
  }

  typedef stMemLeaveGuild_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stMemLeaveGuild_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stMemLeaveGuild_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stMemLeaveGuild_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stMemLeaveGuild_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stMemLeaveGuild_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stMemLeaveGuild_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stMemLeaveGuild_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stMemLeaveGuild_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GuildProto.stMemLeaveGuild)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_GuildProto_2eproto();
  friend void protobuf_AssignDesc_GuildProto_2eproto();
  friend void protobuf_ShutdownFile_GuildProto_2eproto();

  void InitAsDefaultInstance();
  static stMemLeaveGuild* default_instance_;
};
// -------------------------------------------------------------------

class stAssignGuildTitle : public ::google::protobuf::Message {
 public:
  stAssignGuildTitle();
  virtual ~stAssignGuildTitle();

  stAssignGuildTitle(const stAssignGuildTitle& from);

  inline stAssignGuildTitle& operator=(const stAssignGuildTitle& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stAssignGuildTitle& default_instance();

  void Swap(stAssignGuildTitle* other);

  // implements Message ----------------------------------------------

  stAssignGuildTitle* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stAssignGuildTitle& from);
  void MergeFrom(const stAssignGuildTitle& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stAssignGuildTitle_ProtoModID ProtoModID;
  static const ProtoModID ModID = stAssignGuildTitle_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stAssignGuildTitle_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stAssignGuildTitle_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stAssignGuildTitle_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stAssignGuildTitle_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stAssignGuildTitle_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stAssignGuildTitle_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stAssignGuildTitle_ProtoModID_Parse(name, value);
  }

  typedef stAssignGuildTitle_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stAssignGuildTitle_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stAssignGuildTitle_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stAssignGuildTitle_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stAssignGuildTitle_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stAssignGuildTitle_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stAssignGuildTitle_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stAssignGuildTitle_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stAssignGuildTitle_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional .GuildProto.eGuildTile eTitle = 2;
  inline bool has_etitle() const;
  inline void clear_etitle();
  static const int kETitleFieldNumber = 2;
  inline ::GuildProto::eGuildTile etitle() const;
  inline void set_etitle(::GuildProto::eGuildTile value);

  // @@protoc_insertion_point(class_scope:GuildProto.stAssignGuildTitle)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_etitle();
  inline void clear_has_etitle();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  int etitle_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_GuildProto_2eproto();
  friend void protobuf_AssignDesc_GuildProto_2eproto();
  friend void protobuf_ShutdownFile_GuildProto_2eproto();

  void InitAsDefaultInstance();
  static stAssignGuildTitle* default_instance_;
};
// -------------------------------------------------------------------

class stAssignTitleError : public ::google::protobuf::Message {
 public:
  stAssignTitleError();
  virtual ~stAssignTitleError();

  stAssignTitleError(const stAssignTitleError& from);

  inline stAssignTitleError& operator=(const stAssignTitleError& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stAssignTitleError& default_instance();

  void Swap(stAssignTitleError* other);

  // implements Message ----------------------------------------------

  stAssignTitleError* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stAssignTitleError& from);
  void MergeFrom(const stAssignTitleError& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stAssignTitleError_ProtoModID ProtoModID;
  static const ProtoModID ModID = stAssignTitleError_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stAssignTitleError_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stAssignTitleError_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stAssignTitleError_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stAssignTitleError_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stAssignTitleError_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stAssignTitleError_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stAssignTitleError_ProtoModID_Parse(name, value);
  }

  typedef stAssignTitleError_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stAssignTitleError_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stAssignTitleError_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stAssignTitleError_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stAssignTitleError_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stAssignTitleError_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stAssignTitleError_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stAssignTitleError_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stAssignTitleError_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .GuildProto.eAssignTitleError result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::GuildProto::eAssignTitleError result() const;
  inline void set_result(::GuildProto::eAssignTitleError value);

  // @@protoc_insertion_point(class_scope:GuildProto.stAssignTitleError)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_GuildProto_2eproto();
  friend void protobuf_AssignDesc_GuildProto_2eproto();
  friend void protobuf_ShutdownFile_GuildProto_2eproto();

  void InitAsDefaultInstance();
  static stAssignTitleError* default_instance_;
};
// -------------------------------------------------------------------

class stCancelTitle : public ::google::protobuf::Message {
 public:
  stCancelTitle();
  virtual ~stCancelTitle();

  stCancelTitle(const stCancelTitle& from);

  inline stCancelTitle& operator=(const stCancelTitle& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stCancelTitle& default_instance();

  void Swap(stCancelTitle* other);

  // implements Message ----------------------------------------------

  stCancelTitle* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stCancelTitle& from);
  void MergeFrom(const stCancelTitle& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stCancelTitle_ProtoModID ProtoModID;
  static const ProtoModID ModID = stCancelTitle_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stCancelTitle_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stCancelTitle_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stCancelTitle_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stCancelTitle_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stCancelTitle_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stCancelTitle_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stCancelTitle_ProtoModID_Parse(name, value);
  }

  typedef stCancelTitle_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stCancelTitle_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stCancelTitle_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stCancelTitle_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stCancelTitle_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stCancelTitle_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stCancelTitle_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stCancelTitle_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stCancelTitle_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GuildProto.stCancelTitle)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_GuildProto_2eproto();
  friend void protobuf_AssignDesc_GuildProto_2eproto();
  friend void protobuf_ShutdownFile_GuildProto_2eproto();

  void InitAsDefaultInstance();
  static stCancelTitle* default_instance_;
};
// -------------------------------------------------------------------

class stCancelTitleError : public ::google::protobuf::Message {
 public:
  stCancelTitleError();
  virtual ~stCancelTitleError();

  stCancelTitleError(const stCancelTitleError& from);

  inline stCancelTitleError& operator=(const stCancelTitleError& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stCancelTitleError& default_instance();

  void Swap(stCancelTitleError* other);

  // implements Message ----------------------------------------------

  stCancelTitleError* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stCancelTitleError& from);
  void MergeFrom(const stCancelTitleError& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stCancelTitleError_ProtoModID ProtoModID;
  static const ProtoModID ModID = stCancelTitleError_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stCancelTitleError_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stCancelTitleError_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stCancelTitleError_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stCancelTitleError_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stCancelTitleError_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stCancelTitleError_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stCancelTitleError_ProtoModID_Parse(name, value);
  }

  typedef stCancelTitleError_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stCancelTitleError_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stCancelTitleError_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stCancelTitleError_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stCancelTitleError_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stCancelTitleError_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stCancelTitleError_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stCancelTitleError_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stCancelTitleError_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .GuildProto.eCancelTitleError result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::GuildProto::eCancelTitleError result() const;
  inline void set_result(::GuildProto::eCancelTitleError value);

  // @@protoc_insertion_point(class_scope:GuildProto.stCancelTitleError)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_GuildProto_2eproto();
  friend void protobuf_AssignDesc_GuildProto_2eproto();
  friend void protobuf_ShutdownFile_GuildProto_2eproto();

  void InitAsDefaultInstance();
  static stCancelTitleError* default_instance_;
};
// -------------------------------------------------------------------

class stGiveLeader2Other : public ::google::protobuf::Message {
 public:
  stGiveLeader2Other();
  virtual ~stGiveLeader2Other();

  stGiveLeader2Other(const stGiveLeader2Other& from);

  inline stGiveLeader2Other& operator=(const stGiveLeader2Other& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stGiveLeader2Other& default_instance();

  void Swap(stGiveLeader2Other* other);

  // implements Message ----------------------------------------------

  stGiveLeader2Other* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stGiveLeader2Other& from);
  void MergeFrom(const stGiveLeader2Other& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stGiveLeader2Other_ProtoModID ProtoModID;
  static const ProtoModID ModID = stGiveLeader2Other_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stGiveLeader2Other_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stGiveLeader2Other_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stGiveLeader2Other_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stGiveLeader2Other_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stGiveLeader2Other_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stGiveLeader2Other_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stGiveLeader2Other_ProtoModID_Parse(name, value);
  }

  typedef stGiveLeader2Other_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stGiveLeader2Other_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stGiveLeader2Other_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stGiveLeader2Other_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stGiveLeader2Other_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stGiveLeader2Other_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stGiveLeader2Other_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stGiveLeader2Other_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stGiveLeader2Other_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GuildProto.stGiveLeader2Other)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_GuildProto_2eproto();
  friend void protobuf_AssignDesc_GuildProto_2eproto();
  friend void protobuf_ShutdownFile_GuildProto_2eproto();

  void InitAsDefaultInstance();
  static stGiveLeader2Other* default_instance_;
};
// -------------------------------------------------------------------

class stGiveLeaderError : public ::google::protobuf::Message {
 public:
  stGiveLeaderError();
  virtual ~stGiveLeaderError();

  stGiveLeaderError(const stGiveLeaderError& from);

  inline stGiveLeaderError& operator=(const stGiveLeaderError& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stGiveLeaderError& default_instance();

  void Swap(stGiveLeaderError* other);

  // implements Message ----------------------------------------------

  stGiveLeaderError* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stGiveLeaderError& from);
  void MergeFrom(const stGiveLeaderError& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stGiveLeaderError_ProtoModID ProtoModID;
  static const ProtoModID ModID = stGiveLeaderError_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stGiveLeaderError_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stGiveLeaderError_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stGiveLeaderError_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stGiveLeaderError_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stGiveLeaderError_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stGiveLeaderError_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stGiveLeaderError_ProtoModID_Parse(name, value);
  }

  typedef stGiveLeaderError_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stGiveLeaderError_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stGiveLeaderError_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stGiveLeaderError_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stGiveLeaderError_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stGiveLeaderError_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stGiveLeaderError_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stGiveLeaderError_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stGiveLeaderError_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .GuildProto.eGiveLeaderErrorNo result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::GuildProto::eGiveLeaderErrorNo result() const;
  inline void set_result(::GuildProto::eGiveLeaderErrorNo value);

  // @@protoc_insertion_point(class_scope:GuildProto.stGiveLeaderError)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_GuildProto_2eproto();
  friend void protobuf_AssignDesc_GuildProto_2eproto();
  friend void protobuf_ShutdownFile_GuildProto_2eproto();

  void InitAsDefaultInstance();
  static stGiveLeaderError* default_instance_;
};
// -------------------------------------------------------------------

class stFireGuild : public ::google::protobuf::Message {
 public:
  stFireGuild();
  virtual ~stFireGuild();

  stFireGuild(const stFireGuild& from);

  inline stFireGuild& operator=(const stFireGuild& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stFireGuild& default_instance();

  void Swap(stFireGuild* other);

  // implements Message ----------------------------------------------

  stFireGuild* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stFireGuild& from);
  void MergeFrom(const stFireGuild& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stFireGuild_ProtoModID ProtoModID;
  static const ProtoModID ModID = stFireGuild_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stFireGuild_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stFireGuild_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stFireGuild_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stFireGuild_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stFireGuild_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stFireGuild_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stFireGuild_ProtoModID_Parse(name, value);
  }

  typedef stFireGuild_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stFireGuild_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stFireGuild_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stFireGuild_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stFireGuild_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stFireGuild_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stFireGuild_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stFireGuild_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stFireGuild_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 guildID = 1;
  inline bool has_guildid() const;
  inline void clear_guildid();
  static const int kGuildIDFieldNumber = 1;
  inline ::google::protobuf::uint32 guildid() const;
  inline void set_guildid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GuildProto.stFireGuild)
 private:
  inline void set_has_guildid();
  inline void clear_has_guildid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 guildid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_GuildProto_2eproto();
  friend void protobuf_AssignDesc_GuildProto_2eproto();
  friend void protobuf_ShutdownFile_GuildProto_2eproto();

  void InitAsDefaultInstance();
  static stFireGuild* default_instance_;
};
// -------------------------------------------------------------------

class stFireGuildError : public ::google::protobuf::Message {
 public:
  stFireGuildError();
  virtual ~stFireGuildError();

  stFireGuildError(const stFireGuildError& from);

  inline stFireGuildError& operator=(const stFireGuildError& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stFireGuildError& default_instance();

  void Swap(stFireGuildError* other);

  // implements Message ----------------------------------------------

  stFireGuildError* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stFireGuildError& from);
  void MergeFrom(const stFireGuildError& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stFireGuildError_ProtoModID ProtoModID;
  static const ProtoModID ModID = stFireGuildError_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stFireGuildError_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stFireGuildError_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stFireGuildError_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stFireGuildError_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stFireGuildError_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stFireGuildError_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stFireGuildError_ProtoModID_Parse(name, value);
  }

  typedef stFireGuildError_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stFireGuildError_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stFireGuildError_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stFireGuildError_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stFireGuildError_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stFireGuildError_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stFireGuildError_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stFireGuildError_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stFireGuildError_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .GuildProto.eFireMemberErrorNo result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::GuildProto::eFireMemberErrorNo result() const;
  inline void set_result(::GuildProto::eFireMemberErrorNo value);

  // @@protoc_insertion_point(class_scope:GuildProto.stFireGuildError)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_GuildProto_2eproto();
  friend void protobuf_AssignDesc_GuildProto_2eproto();
  friend void protobuf_ShutdownFile_GuildProto_2eproto();

  void InitAsDefaultInstance();
  static stFireGuildError* default_instance_;
};
// -------------------------------------------------------------------

class stGuildMemOnOffLine : public ::google::protobuf::Message {
 public:
  stGuildMemOnOffLine();
  virtual ~stGuildMemOnOffLine();

  stGuildMemOnOffLine(const stGuildMemOnOffLine& from);

  inline stGuildMemOnOffLine& operator=(const stGuildMemOnOffLine& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stGuildMemOnOffLine& default_instance();

  void Swap(stGuildMemOnOffLine* other);

  // implements Message ----------------------------------------------

  stGuildMemOnOffLine* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stGuildMemOnOffLine& from);
  void MergeFrom(const stGuildMemOnOffLine& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stGuildMemOnOffLine_ProtoModID ProtoModID;
  static const ProtoModID ModID = stGuildMemOnOffLine_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stGuildMemOnOffLine_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stGuildMemOnOffLine_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stGuildMemOnOffLine_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stGuildMemOnOffLine_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stGuildMemOnOffLine_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stGuildMemOnOffLine_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stGuildMemOnOffLine_ProtoModID_Parse(name, value);
  }

  typedef stGuildMemOnOffLine_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stGuildMemOnOffLine_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stGuildMemOnOffLine_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stGuildMemOnOffLine_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stGuildMemOnOffLine_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stGuildMemOnOffLine_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stGuildMemOnOffLine_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stGuildMemOnOffLine_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stGuildMemOnOffLine_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional bool online = 2;
  inline bool has_online() const;
  inline void clear_online();
  static const int kOnlineFieldNumber = 2;
  inline bool online() const;
  inline void set_online(bool value);

  // @@protoc_insertion_point(class_scope:GuildProto.stGuildMemOnOffLine)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_online();
  inline void clear_has_online();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  bool online_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_GuildProto_2eproto();
  friend void protobuf_AssignDesc_GuildProto_2eproto();
  friend void protobuf_ShutdownFile_GuildProto_2eproto();

  void InitAsDefaultInstance();
  static stGuildMemOnOffLine* default_instance_;
};
// -------------------------------------------------------------------

class stKillOutGroupMember : public ::google::protobuf::Message {
 public:
  stKillOutGroupMember();
  virtual ~stKillOutGroupMember();

  stKillOutGroupMember(const stKillOutGroupMember& from);

  inline stKillOutGroupMember& operator=(const stKillOutGroupMember& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stKillOutGroupMember& default_instance();

  void Swap(stKillOutGroupMember* other);

  // implements Message ----------------------------------------------

  stKillOutGroupMember* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stKillOutGroupMember& from);
  void MergeFrom(const stKillOutGroupMember& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stKillOutGroupMember_ProtoModID ProtoModID;
  static const ProtoModID ModID = stKillOutGroupMember_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stKillOutGroupMember_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stKillOutGroupMember_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stKillOutGroupMember_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stKillOutGroupMember_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stKillOutGroupMember_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stKillOutGroupMember_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stKillOutGroupMember_ProtoModID_Parse(name, value);
  }

  typedef stKillOutGroupMember_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stKillOutGroupMember_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stKillOutGroupMember_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stKillOutGroupMember_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stKillOutGroupMember_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stKillOutGroupMember_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stKillOutGroupMember_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stKillOutGroupMember_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stKillOutGroupMember_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GuildProto.stKillOutGroupMember)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_GuildProto_2eproto();
  friend void protobuf_AssignDesc_GuildProto_2eproto();
  friend void protobuf_ShutdownFile_GuildProto_2eproto();

  void InitAsDefaultInstance();
  static stKillOutGroupMember* default_instance_;
};
// -------------------------------------------------------------------

class stKillOutTip : public ::google::protobuf::Message {
 public:
  stKillOutTip();
  virtual ~stKillOutTip();

  stKillOutTip(const stKillOutTip& from);

  inline stKillOutTip& operator=(const stKillOutTip& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stKillOutTip& default_instance();

  void Swap(stKillOutTip* other);

  // implements Message ----------------------------------------------

  stKillOutTip* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stKillOutTip& from);
  void MergeFrom(const stKillOutTip& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stKillOutTip_ProtoModID ProtoModID;
  static const ProtoModID ModID = stKillOutTip_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stKillOutTip_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stKillOutTip_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stKillOutTip_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stKillOutTip_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stKillOutTip_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stKillOutTip_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stKillOutTip_ProtoModID_Parse(name, value);
  }

  typedef stKillOutTip_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stKillOutTip_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stKillOutTip_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stKillOutTip_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stKillOutTip_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stKillOutTip_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stKillOutTip_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stKillOutTip_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stKillOutTip_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:GuildProto.stKillOutTip)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_GuildProto_2eproto();
  friend void protobuf_AssignDesc_GuildProto_2eproto();
  friend void protobuf_ShutdownFile_GuildProto_2eproto();

  void InitAsDefaultInstance();
  static stKillOutTip* default_instance_;
};
// -------------------------------------------------------------------

class stKillOutGroupMemberError : public ::google::protobuf::Message {
 public:
  stKillOutGroupMemberError();
  virtual ~stKillOutGroupMemberError();

  stKillOutGroupMemberError(const stKillOutGroupMemberError& from);

  inline stKillOutGroupMemberError& operator=(const stKillOutGroupMemberError& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stKillOutGroupMemberError& default_instance();

  void Swap(stKillOutGroupMemberError* other);

  // implements Message ----------------------------------------------

  stKillOutGroupMemberError* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stKillOutGroupMemberError& from);
  void MergeFrom(const stKillOutGroupMemberError& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stKillOutGroupMemberError_ProtoModID ProtoModID;
  static const ProtoModID ModID = stKillOutGroupMemberError_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stKillOutGroupMemberError_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stKillOutGroupMemberError_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stKillOutGroupMemberError_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stKillOutGroupMemberError_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stKillOutGroupMemberError_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stKillOutGroupMemberError_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stKillOutGroupMemberError_ProtoModID_Parse(name, value);
  }

  typedef stKillOutGroupMemberError_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stKillOutGroupMemberError_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stKillOutGroupMemberError_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stKillOutGroupMemberError_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stKillOutGroupMemberError_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stKillOutGroupMemberError_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stKillOutGroupMemberError_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stKillOutGroupMemberError_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stKillOutGroupMemberError_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .GuildProto.eKillOutErrorNo result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::GuildProto::eKillOutErrorNo result() const;
  inline void set_result(::GuildProto::eKillOutErrorNo value);

  // @@protoc_insertion_point(class_scope:GuildProto.stKillOutGroupMemberError)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_GuildProto_2eproto();
  friend void protobuf_AssignDesc_GuildProto_2eproto();
  friend void protobuf_ShutdownFile_GuildProto_2eproto();

  void InitAsDefaultInstance();
  static stKillOutGroupMemberError* default_instance_;
};
// -------------------------------------------------------------------

class stRetGuildMemInfo : public ::google::protobuf::Message {
 public:
  stRetGuildMemInfo();
  virtual ~stRetGuildMemInfo();

  stRetGuildMemInfo(const stRetGuildMemInfo& from);

  inline stRetGuildMemInfo& operator=(const stRetGuildMemInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRetGuildMemInfo& default_instance();

  void Swap(stRetGuildMemInfo* other);

  // implements Message ----------------------------------------------

  stRetGuildMemInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRetGuildMemInfo& from);
  void MergeFrom(const stRetGuildMemInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRetGuildMemInfo_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRetGuildMemInfo_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRetGuildMemInfo_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRetGuildMemInfo_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRetGuildMemInfo_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRetGuildMemInfo_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRetGuildMemInfo_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRetGuildMemInfo_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRetGuildMemInfo_ProtoModID_Parse(name, value);
  }

  typedef stRetGuildMemInfo_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRetGuildMemInfo_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRetGuildMemInfo_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRetGuildMemInfo_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRetGuildMemInfo_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRetGuildMemInfo_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRetGuildMemInfo_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRetGuildMemInfo_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRetGuildMemInfo_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 joinInTime = 2;
  inline bool has_joinintime() const;
  inline void clear_joinintime();
  static const int kJoinInTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 joinintime() const;
  inline void set_joinintime(::google::protobuf::uint32 value);

  // optional uint32 contributeTime = 3;
  inline bool has_contributetime() const;
  inline void clear_contributetime();
  static const int kContributeTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 contributetime() const;
  inline void set_contributetime(::google::protobuf::uint32 value);

  // optional uint32 todayContribute = 4;
  inline bool has_todaycontribute() const;
  inline void clear_todaycontribute();
  static const int kTodayContributeFieldNumber = 4;
  inline ::google::protobuf::uint32 todaycontribute() const;
  inline void set_todaycontribute(::google::protobuf::uint32 value);

  // optional uint32 allContribute = 5;
  inline bool has_allcontribute() const;
  inline void clear_allcontribute();
  static const int kAllContributeFieldNumber = 5;
  inline ::google::protobuf::uint32 allcontribute() const;
  inline void set_allcontribute(::google::protobuf::uint32 value);

  // optional uint32 lastLoginTime = 6;
  inline bool has_lastlogintime() const;
  inline void clear_lastlogintime();
  static const int kLastLoginTimeFieldNumber = 6;
  inline ::google::protobuf::uint32 lastlogintime() const;
  inline void set_lastlogintime(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GuildProto.stRetGuildMemInfo)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_joinintime();
  inline void clear_has_joinintime();
  inline void set_has_contributetime();
  inline void clear_has_contributetime();
  inline void set_has_todaycontribute();
  inline void clear_has_todaycontribute();
  inline void set_has_allcontribute();
  inline void clear_has_allcontribute();
  inline void set_has_lastlogintime();
  inline void clear_has_lastlogintime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 joinintime_;
  ::google::protobuf::uint32 contributetime_;
  ::google::protobuf::uint32 todaycontribute_;
  ::google::protobuf::uint32 allcontribute_;
  ::google::protobuf::uint32 lastlogintime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_GuildProto_2eproto();
  friend void protobuf_AssignDesc_GuildProto_2eproto();
  friend void protobuf_ShutdownFile_GuildProto_2eproto();

  void InitAsDefaultInstance();
  static stRetGuildMemInfo* default_instance_;
};
// -------------------------------------------------------------------

class stSynGuildContribute : public ::google::protobuf::Message {
 public:
  stSynGuildContribute();
  virtual ~stSynGuildContribute();

  stSynGuildContribute(const stSynGuildContribute& from);

  inline stSynGuildContribute& operator=(const stSynGuildContribute& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSynGuildContribute& default_instance();

  void Swap(stSynGuildContribute* other);

  // implements Message ----------------------------------------------

  stSynGuildContribute* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSynGuildContribute& from);
  void MergeFrom(const stSynGuildContribute& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stSynGuildContribute_ProtoModID ProtoModID;
  static const ProtoModID ModID = stSynGuildContribute_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stSynGuildContribute_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stSynGuildContribute_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stSynGuildContribute_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stSynGuildContribute_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stSynGuildContribute_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stSynGuildContribute_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stSynGuildContribute_ProtoModID_Parse(name, value);
  }

  typedef stSynGuildContribute_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stSynGuildContribute_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stSynGuildContribute_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stSynGuildContribute_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stSynGuildContribute_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stSynGuildContribute_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stSynGuildContribute_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stSynGuildContribute_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stSynGuildContribute_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 num = 1;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 1;
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GuildProto.stSynGuildContribute)
 private:
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_GuildProto_2eproto();
  friend void protobuf_AssignDesc_GuildProto_2eproto();
  friend void protobuf_ShutdownFile_GuildProto_2eproto();

  void InitAsDefaultInstance();
  static stSynGuildContribute* default_instance_;
};
// -------------------------------------------------------------------

class stChgGuildSign : public ::google::protobuf::Message {
 public:
  stChgGuildSign();
  virtual ~stChgGuildSign();

  stChgGuildSign(const stChgGuildSign& from);

  inline stChgGuildSign& operator=(const stChgGuildSign& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stChgGuildSign& default_instance();

  void Swap(stChgGuildSign* other);

  // implements Message ----------------------------------------------

  stChgGuildSign* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stChgGuildSign& from);
  void MergeFrom(const stChgGuildSign& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stChgGuildSign_ProtoModID ProtoModID;
  static const ProtoModID ModID = stChgGuildSign_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stChgGuildSign_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stChgGuildSign_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stChgGuildSign_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stChgGuildSign_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stChgGuildSign_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stChgGuildSign_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stChgGuildSign_ProtoModID_Parse(name, value);
  }

  typedef stChgGuildSign_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stChgGuildSign_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stChgGuildSign_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stChgGuildSign_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stChgGuildSign_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stChgGuildSign_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stChgGuildSign_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stChgGuildSign_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stChgGuildSign_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string sign = 1;
  inline bool has_sign() const;
  inline void clear_sign();
  static const int kSignFieldNumber = 1;
  inline const ::std::string& sign() const;
  inline void set_sign(const ::std::string& value);
  inline void set_sign(const char* value);
  inline void set_sign(const char* value, size_t size);
  inline ::std::string* mutable_sign();
  inline ::std::string* release_sign();
  inline void set_allocated_sign(::std::string* sign);

  // @@protoc_insertion_point(class_scope:GuildProto.stChgGuildSign)
 private:
  inline void set_has_sign();
  inline void clear_has_sign();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* sign_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_GuildProto_2eproto();
  friend void protobuf_AssignDesc_GuildProto_2eproto();
  friend void protobuf_ShutdownFile_GuildProto_2eproto();

  void InitAsDefaultInstance();
  static stChgGuildSign* default_instance_;
};
// -------------------------------------------------------------------

class stNotifyFireRemainTime : public ::google::protobuf::Message {
 public:
  stNotifyFireRemainTime();
  virtual ~stNotifyFireRemainTime();

  stNotifyFireRemainTime(const stNotifyFireRemainTime& from);

  inline stNotifyFireRemainTime& operator=(const stNotifyFireRemainTime& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stNotifyFireRemainTime& default_instance();

  void Swap(stNotifyFireRemainTime* other);

  // implements Message ----------------------------------------------

  stNotifyFireRemainTime* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stNotifyFireRemainTime& from);
  void MergeFrom(const stNotifyFireRemainTime& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stNotifyFireRemainTime_ProtoModID ProtoModID;
  static const ProtoModID ModID = stNotifyFireRemainTime_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stNotifyFireRemainTime_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stNotifyFireRemainTime_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stNotifyFireRemainTime_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stNotifyFireRemainTime_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stNotifyFireRemainTime_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stNotifyFireRemainTime_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stNotifyFireRemainTime_ProtoModID_Parse(name, value);
  }

  typedef stNotifyFireRemainTime_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stNotifyFireRemainTime_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stNotifyFireRemainTime_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stNotifyFireRemainTime_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stNotifyFireRemainTime_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stNotifyFireRemainTime_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stNotifyFireRemainTime_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stNotifyFireRemainTime_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stNotifyFireRemainTime_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 remainTime = 1;
  inline bool has_remaintime() const;
  inline void clear_remaintime();
  static const int kRemainTimeFieldNumber = 1;
  inline ::google::protobuf::uint32 remaintime() const;
  inline void set_remaintime(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GuildProto.stNotifyFireRemainTime)
 private:
  inline void set_has_remaintime();
  inline void clear_has_remaintime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 remaintime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_GuildProto_2eproto();
  friend void protobuf_AssignDesc_GuildProto_2eproto();
  friend void protobuf_ShutdownFile_GuildProto_2eproto();

  void InitAsDefaultInstance();
  static stNotifyFireRemainTime* default_instance_;
};
// -------------------------------------------------------------------

class stReqGuildMemInfo : public ::google::protobuf::Message {
 public:
  stReqGuildMemInfo();
  virtual ~stReqGuildMemInfo();

  stReqGuildMemInfo(const stReqGuildMemInfo& from);

  inline stReqGuildMemInfo& operator=(const stReqGuildMemInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqGuildMemInfo& default_instance();

  void Swap(stReqGuildMemInfo* other);

  // implements Message ----------------------------------------------

  stReqGuildMemInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqGuildMemInfo& from);
  void MergeFrom(const stReqGuildMemInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqGuildMemInfo_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqGuildMemInfo_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqGuildMemInfo_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqGuildMemInfo_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqGuildMemInfo_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqGuildMemInfo_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqGuildMemInfo_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqGuildMemInfo_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqGuildMemInfo_ProtoModID_Parse(name, value);
  }

  typedef stReqGuildMemInfo_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqGuildMemInfo_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqGuildMemInfo_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqGuildMemInfo_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqGuildMemInfo_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqGuildMemInfo_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqGuildMemInfo_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqGuildMemInfo_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqGuildMemInfo_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GuildProto.stReqGuildMemInfo)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_GuildProto_2eproto();
  friend void protobuf_AssignDesc_GuildProto_2eproto();
  friend void protobuf_ShutdownFile_GuildProto_2eproto();

  void InitAsDefaultInstance();
  static stReqGuildMemInfo* default_instance_;
};
// -------------------------------------------------------------------

class stCancelFireGuild : public ::google::protobuf::Message {
 public:
  stCancelFireGuild();
  virtual ~stCancelFireGuild();

  stCancelFireGuild(const stCancelFireGuild& from);

  inline stCancelFireGuild& operator=(const stCancelFireGuild& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stCancelFireGuild& default_instance();

  void Swap(stCancelFireGuild* other);

  // implements Message ----------------------------------------------

  stCancelFireGuild* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stCancelFireGuild& from);
  void MergeFrom(const stCancelFireGuild& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stCancelFireGuild_ProtoModID ProtoModID;
  static const ProtoModID ModID = stCancelFireGuild_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stCancelFireGuild_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stCancelFireGuild_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stCancelFireGuild_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stCancelFireGuild_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stCancelFireGuild_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stCancelFireGuild_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stCancelFireGuild_ProtoModID_Parse(name, value);
  }

  typedef stCancelFireGuild_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stCancelFireGuild_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stCancelFireGuild_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stCancelFireGuild_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stCancelFireGuild_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stCancelFireGuild_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stCancelFireGuild_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stCancelFireGuild_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stCancelFireGuild_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 guildID = 1;
  inline bool has_guildid() const;
  inline void clear_guildid();
  static const int kGuildIDFieldNumber = 1;
  inline ::google::protobuf::uint32 guildid() const;
  inline void set_guildid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GuildProto.stCancelFireGuild)
 private:
  inline void set_has_guildid();
  inline void clear_has_guildid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 guildid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_GuildProto_2eproto();
  friend void protobuf_AssignDesc_GuildProto_2eproto();
  friend void protobuf_ShutdownFile_GuildProto_2eproto();

  void InitAsDefaultInstance();
  static stCancelFireGuild* default_instance_;
};
// -------------------------------------------------------------------

class stCancelFireGuildResult : public ::google::protobuf::Message {
 public:
  stCancelFireGuildResult();
  virtual ~stCancelFireGuildResult();

  stCancelFireGuildResult(const stCancelFireGuildResult& from);

  inline stCancelFireGuildResult& operator=(const stCancelFireGuildResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stCancelFireGuildResult& default_instance();

  void Swap(stCancelFireGuildResult* other);

  // implements Message ----------------------------------------------

  stCancelFireGuildResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stCancelFireGuildResult& from);
  void MergeFrom(const stCancelFireGuildResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stCancelFireGuildResult_eResult eResult;
  static const eResult eSUCCESS = stCancelFireGuildResult_eResult_eSUCCESS;
  static const eResult eHAS_NOT_POWER = stCancelFireGuildResult_eResult_eHAS_NOT_POWER;
  static inline bool eResult_IsValid(int value) {
    return stCancelFireGuildResult_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stCancelFireGuildResult_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stCancelFireGuildResult_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stCancelFireGuildResult_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stCancelFireGuildResult_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stCancelFireGuildResult_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stCancelFireGuildResult_eResult_Parse(name, value);
  }

  typedef stCancelFireGuildResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stCancelFireGuildResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stCancelFireGuildResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stCancelFireGuildResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stCancelFireGuildResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stCancelFireGuildResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stCancelFireGuildResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stCancelFireGuildResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stCancelFireGuildResult_ProtoModID_Parse(name, value);
  }

  typedef stCancelFireGuildResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stCancelFireGuildResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stCancelFireGuildResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stCancelFireGuildResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stCancelFireGuildResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stCancelFireGuildResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stCancelFireGuildResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stCancelFireGuildResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stCancelFireGuildResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .GuildProto.stCancelFireGuildResult.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::GuildProto::stCancelFireGuildResult_eResult result() const;
  inline void set_result(::GuildProto::stCancelFireGuildResult_eResult value);

  // @@protoc_insertion_point(class_scope:GuildProto.stCancelFireGuildResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_GuildProto_2eproto();
  friend void protobuf_AssignDesc_GuildProto_2eproto();
  friend void protobuf_ShutdownFile_GuildProto_2eproto();

  void InitAsDefaultInstance();
  static stCancelFireGuildResult* default_instance_;
};
// -------------------------------------------------------------------

class stCancelJoinInGuild : public ::google::protobuf::Message {
 public:
  stCancelJoinInGuild();
  virtual ~stCancelJoinInGuild();

  stCancelJoinInGuild(const stCancelJoinInGuild& from);

  inline stCancelJoinInGuild& operator=(const stCancelJoinInGuild& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stCancelJoinInGuild& default_instance();

  void Swap(stCancelJoinInGuild* other);

  // implements Message ----------------------------------------------

  stCancelJoinInGuild* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stCancelJoinInGuild& from);
  void MergeFrom(const stCancelJoinInGuild& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stCancelJoinInGuild_ProtoModID ProtoModID;
  static const ProtoModID ModID = stCancelJoinInGuild_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stCancelJoinInGuild_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stCancelJoinInGuild_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stCancelJoinInGuild_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stCancelJoinInGuild_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stCancelJoinInGuild_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stCancelJoinInGuild_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stCancelJoinInGuild_ProtoModID_Parse(name, value);
  }

  typedef stCancelJoinInGuild_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stCancelJoinInGuild_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stCancelJoinInGuild_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stCancelJoinInGuild_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stCancelJoinInGuild_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stCancelJoinInGuild_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stCancelJoinInGuild_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stCancelJoinInGuild_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stCancelJoinInGuild_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 guildID = 1;
  inline bool has_guildid() const;
  inline void clear_guildid();
  static const int kGuildIDFieldNumber = 1;
  inline ::google::protobuf::uint32 guildid() const;
  inline void set_guildid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GuildProto.stCancelJoinInGuild)
 private:
  inline void set_has_guildid();
  inline void clear_has_guildid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 guildid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_GuildProto_2eproto();
  friend void protobuf_AssignDesc_GuildProto_2eproto();
  friend void protobuf_ShutdownFile_GuildProto_2eproto();

  void InitAsDefaultInstance();
  static stCancelJoinInGuild* default_instance_;
};
// -------------------------------------------------------------------

class stCancelJoinInGuildResult : public ::google::protobuf::Message {
 public:
  stCancelJoinInGuildResult();
  virtual ~stCancelJoinInGuildResult();

  stCancelJoinInGuildResult(const stCancelJoinInGuildResult& from);

  inline stCancelJoinInGuildResult& operator=(const stCancelJoinInGuildResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stCancelJoinInGuildResult& default_instance();

  void Swap(stCancelJoinInGuildResult* other);

  // implements Message ----------------------------------------------

  stCancelJoinInGuildResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stCancelJoinInGuildResult& from);
  void MergeFrom(const stCancelJoinInGuildResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stCancelJoinInGuildResult_eResult eResult;
  static const eResult eSUCCESS = stCancelJoinInGuildResult_eResult_eSUCCESS;
  static const eResult eFAIL = stCancelJoinInGuildResult_eResult_eFAIL;
  static inline bool eResult_IsValid(int value) {
    return stCancelJoinInGuildResult_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stCancelJoinInGuildResult_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stCancelJoinInGuildResult_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stCancelJoinInGuildResult_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stCancelJoinInGuildResult_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stCancelJoinInGuildResult_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stCancelJoinInGuildResult_eResult_Parse(name, value);
  }

  typedef stCancelJoinInGuildResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stCancelJoinInGuildResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stCancelJoinInGuildResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stCancelJoinInGuildResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stCancelJoinInGuildResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stCancelJoinInGuildResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stCancelJoinInGuildResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stCancelJoinInGuildResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stCancelJoinInGuildResult_ProtoModID_Parse(name, value);
  }

  typedef stCancelJoinInGuildResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stCancelJoinInGuildResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stCancelJoinInGuildResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stCancelJoinInGuildResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stCancelJoinInGuildResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stCancelJoinInGuildResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stCancelJoinInGuildResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stCancelJoinInGuildResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stCancelJoinInGuildResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 guildID = 1;
  inline bool has_guildid() const;
  inline void clear_guildid();
  static const int kGuildIDFieldNumber = 1;
  inline ::google::protobuf::uint32 guildid() const;
  inline void set_guildid(::google::protobuf::uint32 value);

  // optional .GuildProto.stCancelJoinInGuildResult.eResult result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::GuildProto::stCancelJoinInGuildResult_eResult result() const;
  inline void set_result(::GuildProto::stCancelJoinInGuildResult_eResult value);

  // @@protoc_insertion_point(class_scope:GuildProto.stCancelJoinInGuildResult)
 private:
  inline void set_has_guildid();
  inline void clear_has_guildid();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 guildid_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_GuildProto_2eproto();
  friend void protobuf_AssignDesc_GuildProto_2eproto();
  friend void protobuf_ShutdownFile_GuildProto_2eproto();

  void InitAsDefaultInstance();
  static stCancelJoinInGuildResult* default_instance_;
};
// -------------------------------------------------------------------

class stReqDonate : public ::google::protobuf::Message {
 public:
  stReqDonate();
  virtual ~stReqDonate();

  stReqDonate(const stReqDonate& from);

  inline stReqDonate& operator=(const stReqDonate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqDonate& default_instance();

  void Swap(stReqDonate* other);

  // implements Message ----------------------------------------------

  stReqDonate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqDonate& from);
  void MergeFrom(const stReqDonate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqDonate_eType eType;
  static const eType eType1 = stReqDonate_eType_eType1;
  static const eType eType2 = stReqDonate_eType_eType2;
  static const eType eType3 = stReqDonate_eType_eType3;
  static inline bool eType_IsValid(int value) {
    return stReqDonate_eType_IsValid(value);
  }
  static const eType eType_MIN =
    stReqDonate_eType_eType_MIN;
  static const eType eType_MAX =
    stReqDonate_eType_eType_MAX;
  static const int eType_ARRAYSIZE =
    stReqDonate_eType_eType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eType_descriptor() {
    return stReqDonate_eType_descriptor();
  }
  static inline const ::std::string& eType_Name(eType value) {
    return stReqDonate_eType_Name(value);
  }
  static inline bool eType_Parse(const ::std::string& name,
      eType* value) {
    return stReqDonate_eType_Parse(name, value);
  }

  typedef stReqDonate_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqDonate_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqDonate_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqDonate_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqDonate_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqDonate_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqDonate_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqDonate_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqDonate_ProtoModID_Parse(name, value);
  }

  typedef stReqDonate_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqDonate_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqDonate_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqDonate_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqDonate_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqDonate_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqDonate_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqDonate_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqDonate_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .GuildProto.stReqDonate.eType type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::GuildProto::stReqDonate_eType type() const;
  inline void set_type(::GuildProto::stReqDonate_eType value);

  // @@protoc_insertion_point(class_scope:GuildProto.stReqDonate)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_GuildProto_2eproto();
  friend void protobuf_AssignDesc_GuildProto_2eproto();
  friend void protobuf_ShutdownFile_GuildProto_2eproto();

  void InitAsDefaultInstance();
  static stReqDonate* default_instance_;
};
// -------------------------------------------------------------------

class stDonateResult : public ::google::protobuf::Message {
 public:
  stDonateResult();
  virtual ~stDonateResult();

  stDonateResult(const stDonateResult& from);

  inline stDonateResult& operator=(const stDonateResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stDonateResult& default_instance();

  void Swap(stDonateResult* other);

  // implements Message ----------------------------------------------

  stDonateResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stDonateResult& from);
  void MergeFrom(const stDonateResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stDonateResult_eResult eResult;
  static const eResult eSUCCESS = stDonateResult_eResult_eSUCCESS;
  static const eResult eMONEY_NOT_ENOUGH = stDonateResult_eResult_eMONEY_NOT_ENOUGH;
  static const eResult eINNER_ERROR = stDonateResult_eResult_eINNER_ERROR;
  static const eResult eHAS_NO_GUILD = stDonateResult_eResult_eHAS_NO_GUILD;
  static const eResult eHAS_DONATE = stDonateResult_eResult_eHAS_DONATE;
  static const eResult eHAS_NO_VIPRIGHT = stDonateResult_eResult_eHAS_NO_VIPRIGHT;
  static inline bool eResult_IsValid(int value) {
    return stDonateResult_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stDonateResult_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stDonateResult_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stDonateResult_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stDonateResult_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stDonateResult_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stDonateResult_eResult_Parse(name, value);
  }

  typedef stDonateResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stDonateResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stDonateResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stDonateResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stDonateResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stDonateResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stDonateResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stDonateResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stDonateResult_ProtoModID_Parse(name, value);
  }

  typedef stDonateResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stDonateResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stDonateResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stDonateResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stDonateResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stDonateResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stDonateResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stDonateResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stDonateResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .GuildProto.stDonateResult.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::GuildProto::stDonateResult_eResult result() const;
  inline void set_result(::GuildProto::stDonateResult_eResult value);

  // @@protoc_insertion_point(class_scope:GuildProto.stDonateResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_GuildProto_2eproto();
  friend void protobuf_AssignDesc_GuildProto_2eproto();
  friend void protobuf_ShutdownFile_GuildProto_2eproto();

  void InitAsDefaultInstance();
  static stDonateResult* default_instance_;
};
// -------------------------------------------------------------------

class stReqLevelUpHallLv : public ::google::protobuf::Message {
 public:
  stReqLevelUpHallLv();
  virtual ~stReqLevelUpHallLv();

  stReqLevelUpHallLv(const stReqLevelUpHallLv& from);

  inline stReqLevelUpHallLv& operator=(const stReqLevelUpHallLv& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqLevelUpHallLv& default_instance();

  void Swap(stReqLevelUpHallLv* other);

  // implements Message ----------------------------------------------

  stReqLevelUpHallLv* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqLevelUpHallLv& from);
  void MergeFrom(const stReqLevelUpHallLv& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqLevelUpHallLv_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqLevelUpHallLv_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqLevelUpHallLv_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqLevelUpHallLv_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqLevelUpHallLv_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqLevelUpHallLv_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqLevelUpHallLv_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqLevelUpHallLv_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqLevelUpHallLv_ProtoModID_Parse(name, value);
  }

  typedef stReqLevelUpHallLv_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqLevelUpHallLv_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqLevelUpHallLv_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqLevelUpHallLv_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqLevelUpHallLv_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqLevelUpHallLv_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqLevelUpHallLv_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqLevelUpHallLv_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqLevelUpHallLv_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 guildID = 1;
  inline bool has_guildid() const;
  inline void clear_guildid();
  static const int kGuildIDFieldNumber = 1;
  inline ::google::protobuf::uint32 guildid() const;
  inline void set_guildid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GuildProto.stReqLevelUpHallLv)
 private:
  inline void set_has_guildid();
  inline void clear_has_guildid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 guildid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_GuildProto_2eproto();
  friend void protobuf_AssignDesc_GuildProto_2eproto();
  friend void protobuf_ShutdownFile_GuildProto_2eproto();

  void InitAsDefaultInstance();
  static stReqLevelUpHallLv* default_instance_;
};
// -------------------------------------------------------------------

class stLevelUpHallLvResult : public ::google::protobuf::Message {
 public:
  stLevelUpHallLvResult();
  virtual ~stLevelUpHallLvResult();

  stLevelUpHallLvResult(const stLevelUpHallLvResult& from);

  inline stLevelUpHallLvResult& operator=(const stLevelUpHallLvResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stLevelUpHallLvResult& default_instance();

  void Swap(stLevelUpHallLvResult* other);

  // implements Message ----------------------------------------------

  stLevelUpHallLvResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stLevelUpHallLvResult& from);
  void MergeFrom(const stLevelUpHallLvResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stLevelUpHallLvResult_eResult eResult;
  static const eResult eSUCCESS = stLevelUpHallLvResult_eResult_eSUCCESS;
  static const eResult eCONTRIBUTE_NOT_ENOGUH = stLevelUpHallLvResult_eResult_eCONTRIBUTE_NOT_ENOGUH;
  static const eResult eHAS_NOT_RIGHT = stLevelUpHallLvResult_eResult_eHAS_NOT_RIGHT;
  static const eResult eINNER_ERROR = stLevelUpHallLvResult_eResult_eINNER_ERROR;
  static inline bool eResult_IsValid(int value) {
    return stLevelUpHallLvResult_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stLevelUpHallLvResult_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stLevelUpHallLvResult_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stLevelUpHallLvResult_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stLevelUpHallLvResult_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stLevelUpHallLvResult_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stLevelUpHallLvResult_eResult_Parse(name, value);
  }

  typedef stLevelUpHallLvResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stLevelUpHallLvResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stLevelUpHallLvResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stLevelUpHallLvResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stLevelUpHallLvResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stLevelUpHallLvResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stLevelUpHallLvResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stLevelUpHallLvResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stLevelUpHallLvResult_ProtoModID_Parse(name, value);
  }

  typedef stLevelUpHallLvResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stLevelUpHallLvResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stLevelUpHallLvResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stLevelUpHallLvResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stLevelUpHallLvResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stLevelUpHallLvResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stLevelUpHallLvResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stLevelUpHallLvResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stLevelUpHallLvResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .GuildProto.stLevelUpHallLvResult.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::GuildProto::stLevelUpHallLvResult_eResult result() const;
  inline void set_result(::GuildProto::stLevelUpHallLvResult_eResult value);

  // @@protoc_insertion_point(class_scope:GuildProto.stLevelUpHallLvResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_GuildProto_2eproto();
  friend void protobuf_AssignDesc_GuildProto_2eproto();
  friend void protobuf_ShutdownFile_GuildProto_2eproto();

  void InitAsDefaultInstance();
  static stLevelUpHallLvResult* default_instance_;
};
// -------------------------------------------------------------------

class stSynHallLv : public ::google::protobuf::Message {
 public:
  stSynHallLv();
  virtual ~stSynHallLv();

  stSynHallLv(const stSynHallLv& from);

  inline stSynHallLv& operator=(const stSynHallLv& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSynHallLv& default_instance();

  void Swap(stSynHallLv* other);

  // implements Message ----------------------------------------------

  stSynHallLv* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSynHallLv& from);
  void MergeFrom(const stSynHallLv& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stSynHallLv_ProtoModID ProtoModID;
  static const ProtoModID ModID = stSynHallLv_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stSynHallLv_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stSynHallLv_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stSynHallLv_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stSynHallLv_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stSynHallLv_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stSynHallLv_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stSynHallLv_ProtoModID_Parse(name, value);
  }

  typedef stSynHallLv_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stSynHallLv_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stSynHallLv_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stSynHallLv_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stSynHallLv_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stSynHallLv_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stSynHallLv_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stSynHallLv_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stSynHallLv_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 lv = 1;
  inline bool has_lv() const;
  inline void clear_lv();
  static const int kLvFieldNumber = 1;
  inline ::google::protobuf::uint32 lv() const;
  inline void set_lv(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GuildProto.stSynHallLv)
 private:
  inline void set_has_lv();
  inline void clear_has_lv();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 lv_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_GuildProto_2eproto();
  friend void protobuf_AssignDesc_GuildProto_2eproto();
  friend void protobuf_ShutdownFile_GuildProto_2eproto();

  void InitAsDefaultInstance();
  static stSynHallLv* default_instance_;
};
// -------------------------------------------------------------------

class stReqPrayBuildingLv : public ::google::protobuf::Message {
 public:
  stReqPrayBuildingLv();
  virtual ~stReqPrayBuildingLv();

  stReqPrayBuildingLv(const stReqPrayBuildingLv& from);

  inline stReqPrayBuildingLv& operator=(const stReqPrayBuildingLv& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqPrayBuildingLv& default_instance();

  void Swap(stReqPrayBuildingLv* other);

  // implements Message ----------------------------------------------

  stReqPrayBuildingLv* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqPrayBuildingLv& from);
  void MergeFrom(const stReqPrayBuildingLv& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqPrayBuildingLv_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqPrayBuildingLv_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqPrayBuildingLv_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqPrayBuildingLv_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqPrayBuildingLv_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqPrayBuildingLv_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqPrayBuildingLv_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqPrayBuildingLv_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqPrayBuildingLv_ProtoModID_Parse(name, value);
  }

  typedef stReqPrayBuildingLv_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqPrayBuildingLv_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqPrayBuildingLv_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqPrayBuildingLv_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqPrayBuildingLv_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqPrayBuildingLv_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqPrayBuildingLv_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqPrayBuildingLv_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqPrayBuildingLv_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 guildID = 1;
  inline bool has_guildid() const;
  inline void clear_guildid();
  static const int kGuildIDFieldNumber = 1;
  inline ::google::protobuf::uint32 guildid() const;
  inline void set_guildid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GuildProto.stReqPrayBuildingLv)
 private:
  inline void set_has_guildid();
  inline void clear_has_guildid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 guildid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_GuildProto_2eproto();
  friend void protobuf_AssignDesc_GuildProto_2eproto();
  friend void protobuf_ShutdownFile_GuildProto_2eproto();

  void InitAsDefaultInstance();
  static stReqPrayBuildingLv* default_instance_;
};
// -------------------------------------------------------------------

class stPrayBuildingLvResult : public ::google::protobuf::Message {
 public:
  stPrayBuildingLvResult();
  virtual ~stPrayBuildingLvResult();

  stPrayBuildingLvResult(const stPrayBuildingLvResult& from);

  inline stPrayBuildingLvResult& operator=(const stPrayBuildingLvResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stPrayBuildingLvResult& default_instance();

  void Swap(stPrayBuildingLvResult* other);

  // implements Message ----------------------------------------------

  stPrayBuildingLvResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stPrayBuildingLvResult& from);
  void MergeFrom(const stPrayBuildingLvResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stPrayBuildingLvResult_eResult eResult;
  static const eResult eSUCCESS = stPrayBuildingLvResult_eResult_eSUCCESS;
  static const eResult eCONTRIBUTE_NOT_ENOGUH = stPrayBuildingLvResult_eResult_eCONTRIBUTE_NOT_ENOGUH;
  static const eResult eHAS_NOT_RIGHT = stPrayBuildingLvResult_eResult_eHAS_NOT_RIGHT;
  static const eResult eINNER_ERROR = stPrayBuildingLvResult_eResult_eINNER_ERROR;
  static const eResult eHALL_LV_TOO_LOW = stPrayBuildingLvResult_eResult_eHALL_LV_TOO_LOW;
  static inline bool eResult_IsValid(int value) {
    return stPrayBuildingLvResult_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stPrayBuildingLvResult_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stPrayBuildingLvResult_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stPrayBuildingLvResult_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stPrayBuildingLvResult_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stPrayBuildingLvResult_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stPrayBuildingLvResult_eResult_Parse(name, value);
  }

  typedef stPrayBuildingLvResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stPrayBuildingLvResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stPrayBuildingLvResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stPrayBuildingLvResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stPrayBuildingLvResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stPrayBuildingLvResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stPrayBuildingLvResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stPrayBuildingLvResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stPrayBuildingLvResult_ProtoModID_Parse(name, value);
  }

  typedef stPrayBuildingLvResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stPrayBuildingLvResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stPrayBuildingLvResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stPrayBuildingLvResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stPrayBuildingLvResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stPrayBuildingLvResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stPrayBuildingLvResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stPrayBuildingLvResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stPrayBuildingLvResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .GuildProto.stPrayBuildingLvResult.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::GuildProto::stPrayBuildingLvResult_eResult result() const;
  inline void set_result(::GuildProto::stPrayBuildingLvResult_eResult value);

  // @@protoc_insertion_point(class_scope:GuildProto.stPrayBuildingLvResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_GuildProto_2eproto();
  friend void protobuf_AssignDesc_GuildProto_2eproto();
  friend void protobuf_ShutdownFile_GuildProto_2eproto();

  void InitAsDefaultInstance();
  static stPrayBuildingLvResult* default_instance_;
};
// -------------------------------------------------------------------

class stSynPrayBuildingLv : public ::google::protobuf::Message {
 public:
  stSynPrayBuildingLv();
  virtual ~stSynPrayBuildingLv();

  stSynPrayBuildingLv(const stSynPrayBuildingLv& from);

  inline stSynPrayBuildingLv& operator=(const stSynPrayBuildingLv& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSynPrayBuildingLv& default_instance();

  void Swap(stSynPrayBuildingLv* other);

  // implements Message ----------------------------------------------

  stSynPrayBuildingLv* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSynPrayBuildingLv& from);
  void MergeFrom(const stSynPrayBuildingLv& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stSynPrayBuildingLv_ProtoModID ProtoModID;
  static const ProtoModID ModID = stSynPrayBuildingLv_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stSynPrayBuildingLv_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stSynPrayBuildingLv_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stSynPrayBuildingLv_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stSynPrayBuildingLv_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stSynPrayBuildingLv_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stSynPrayBuildingLv_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stSynPrayBuildingLv_ProtoModID_Parse(name, value);
  }

  typedef stSynPrayBuildingLv_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stSynPrayBuildingLv_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stSynPrayBuildingLv_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stSynPrayBuildingLv_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stSynPrayBuildingLv_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stSynPrayBuildingLv_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stSynPrayBuildingLv_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stSynPrayBuildingLv_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stSynPrayBuildingLv_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 lv = 1;
  inline bool has_lv() const;
  inline void clear_lv();
  static const int kLvFieldNumber = 1;
  inline ::google::protobuf::uint32 lv() const;
  inline void set_lv(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GuildProto.stSynPrayBuildingLv)
 private:
  inline void set_has_lv();
  inline void clear_has_lv();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 lv_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_GuildProto_2eproto();
  friend void protobuf_AssignDesc_GuildProto_2eproto();
  friend void protobuf_ShutdownFile_GuildProto_2eproto();

  void InitAsDefaultInstance();
  static stSynPrayBuildingLv* default_instance_;
};
// -------------------------------------------------------------------

class stReqPray : public ::google::protobuf::Message {
 public:
  stReqPray();
  virtual ~stReqPray();

  stReqPray(const stReqPray& from);

  inline stReqPray& operator=(const stReqPray& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqPray& default_instance();

  void Swap(stReqPray* other);

  // implements Message ----------------------------------------------

  stReqPray* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqPray& from);
  void MergeFrom(const stReqPray& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqPray_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqPray_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqPray_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqPray_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqPray_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqPray_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqPray_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqPray_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqPray_ProtoModID_Parse(name, value);
  }

  typedef stReqPray_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqPray_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqPray_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqPray_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqPray_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqPray_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqPray_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqPray_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqPray_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 guildID = 1;
  inline bool has_guildid() const;
  inline void clear_guildid();
  static const int kGuildIDFieldNumber = 1;
  inline ::google::protobuf::uint32 guildid() const;
  inline void set_guildid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GuildProto.stReqPray)
 private:
  inline void set_has_guildid();
  inline void clear_has_guildid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 guildid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_GuildProto_2eproto();
  friend void protobuf_AssignDesc_GuildProto_2eproto();
  friend void protobuf_ShutdownFile_GuildProto_2eproto();

  void InitAsDefaultInstance();
  static stReqPray* default_instance_;
};
// -------------------------------------------------------------------

class stPrayResult : public ::google::protobuf::Message {
 public:
  stPrayResult();
  virtual ~stPrayResult();

  stPrayResult(const stPrayResult& from);

  inline stPrayResult& operator=(const stPrayResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stPrayResult& default_instance();

  void Swap(stPrayResult* other);

  // implements Message ----------------------------------------------

  stPrayResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stPrayResult& from);
  void MergeFrom(const stPrayResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stPrayResult_eResult eResult;
  static const eResult eSUCCESS = stPrayResult_eResult_eSUCCESS;
  static const eResult eHAS_PRAY = stPrayResult_eResult_eHAS_PRAY;
  static const eResult ePRAY_NUM_OUT = stPrayResult_eResult_ePRAY_NUM_OUT;
  static const eResult eCANNT_PRAY = stPrayResult_eResult_eCANNT_PRAY;
  static inline bool eResult_IsValid(int value) {
    return stPrayResult_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stPrayResult_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stPrayResult_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stPrayResult_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stPrayResult_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stPrayResult_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stPrayResult_eResult_Parse(name, value);
  }

  typedef stPrayResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stPrayResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stPrayResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stPrayResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stPrayResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stPrayResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stPrayResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stPrayResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stPrayResult_ProtoModID_Parse(name, value);
  }

  typedef stPrayResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stPrayResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stPrayResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stPrayResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stPrayResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stPrayResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stPrayResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stPrayResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stPrayResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .GuildProto.stPrayResult.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::GuildProto::stPrayResult_eResult result() const;
  inline void set_result(::GuildProto::stPrayResult_eResult value);

  // @@protoc_insertion_point(class_scope:GuildProto.stPrayResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_GuildProto_2eproto();
  friend void protobuf_AssignDesc_GuildProto_2eproto();
  friend void protobuf_ShutdownFile_GuildProto_2eproto();

  void InitAsDefaultInstance();
  static stPrayResult* default_instance_;
};
// -------------------------------------------------------------------

class stReqLevelUpShopBuildingLv : public ::google::protobuf::Message {
 public:
  stReqLevelUpShopBuildingLv();
  virtual ~stReqLevelUpShopBuildingLv();

  stReqLevelUpShopBuildingLv(const stReqLevelUpShopBuildingLv& from);

  inline stReqLevelUpShopBuildingLv& operator=(const stReqLevelUpShopBuildingLv& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqLevelUpShopBuildingLv& default_instance();

  void Swap(stReqLevelUpShopBuildingLv* other);

  // implements Message ----------------------------------------------

  stReqLevelUpShopBuildingLv* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqLevelUpShopBuildingLv& from);
  void MergeFrom(const stReqLevelUpShopBuildingLv& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqLevelUpShopBuildingLv_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqLevelUpShopBuildingLv_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqLevelUpShopBuildingLv_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqLevelUpShopBuildingLv_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqLevelUpShopBuildingLv_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqLevelUpShopBuildingLv_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqLevelUpShopBuildingLv_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqLevelUpShopBuildingLv_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqLevelUpShopBuildingLv_ProtoModID_Parse(name, value);
  }

  typedef stReqLevelUpShopBuildingLv_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqLevelUpShopBuildingLv_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqLevelUpShopBuildingLv_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqLevelUpShopBuildingLv_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqLevelUpShopBuildingLv_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqLevelUpShopBuildingLv_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqLevelUpShopBuildingLv_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqLevelUpShopBuildingLv_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqLevelUpShopBuildingLv_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 guildID = 1;
  inline bool has_guildid() const;
  inline void clear_guildid();
  static const int kGuildIDFieldNumber = 1;
  inline ::google::protobuf::uint32 guildid() const;
  inline void set_guildid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GuildProto.stReqLevelUpShopBuildingLv)
 private:
  inline void set_has_guildid();
  inline void clear_has_guildid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 guildid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_GuildProto_2eproto();
  friend void protobuf_AssignDesc_GuildProto_2eproto();
  friend void protobuf_ShutdownFile_GuildProto_2eproto();

  void InitAsDefaultInstance();
  static stReqLevelUpShopBuildingLv* default_instance_;
};
// -------------------------------------------------------------------

class stLevelUpShopBuildingLvResult : public ::google::protobuf::Message {
 public:
  stLevelUpShopBuildingLvResult();
  virtual ~stLevelUpShopBuildingLvResult();

  stLevelUpShopBuildingLvResult(const stLevelUpShopBuildingLvResult& from);

  inline stLevelUpShopBuildingLvResult& operator=(const stLevelUpShopBuildingLvResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stLevelUpShopBuildingLvResult& default_instance();

  void Swap(stLevelUpShopBuildingLvResult* other);

  // implements Message ----------------------------------------------

  stLevelUpShopBuildingLvResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stLevelUpShopBuildingLvResult& from);
  void MergeFrom(const stLevelUpShopBuildingLvResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stLevelUpShopBuildingLvResult_eResult eResult;
  static const eResult eSUCCESS = stLevelUpShopBuildingLvResult_eResult_eSUCCESS;
  static const eResult eHAS_NO_RIGHT = stLevelUpShopBuildingLvResult_eResult_eHAS_NO_RIGHT;
  static const eResult eCONTRIBUTE_NOT_ENOUGH = stLevelUpShopBuildingLvResult_eResult_eCONTRIBUTE_NOT_ENOUGH;
  static const eResult eINNER_ERROR = stLevelUpShopBuildingLvResult_eResult_eINNER_ERROR;
  static const eResult eHALL_LV_TOO_LOW = stLevelUpShopBuildingLvResult_eResult_eHALL_LV_TOO_LOW;
  static inline bool eResult_IsValid(int value) {
    return stLevelUpShopBuildingLvResult_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stLevelUpShopBuildingLvResult_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stLevelUpShopBuildingLvResult_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stLevelUpShopBuildingLvResult_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stLevelUpShopBuildingLvResult_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stLevelUpShopBuildingLvResult_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stLevelUpShopBuildingLvResult_eResult_Parse(name, value);
  }

  typedef stLevelUpShopBuildingLvResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stLevelUpShopBuildingLvResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stLevelUpShopBuildingLvResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stLevelUpShopBuildingLvResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stLevelUpShopBuildingLvResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stLevelUpShopBuildingLvResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stLevelUpShopBuildingLvResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stLevelUpShopBuildingLvResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stLevelUpShopBuildingLvResult_ProtoModID_Parse(name, value);
  }

  typedef stLevelUpShopBuildingLvResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stLevelUpShopBuildingLvResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stLevelUpShopBuildingLvResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stLevelUpShopBuildingLvResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stLevelUpShopBuildingLvResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stLevelUpShopBuildingLvResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stLevelUpShopBuildingLvResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stLevelUpShopBuildingLvResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stLevelUpShopBuildingLvResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .GuildProto.stLevelUpShopBuildingLvResult.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::GuildProto::stLevelUpShopBuildingLvResult_eResult result() const;
  inline void set_result(::GuildProto::stLevelUpShopBuildingLvResult_eResult value);

  // @@protoc_insertion_point(class_scope:GuildProto.stLevelUpShopBuildingLvResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_GuildProto_2eproto();
  friend void protobuf_AssignDesc_GuildProto_2eproto();
  friend void protobuf_ShutdownFile_GuildProto_2eproto();

  void InitAsDefaultInstance();
  static stLevelUpShopBuildingLvResult* default_instance_;
};
// -------------------------------------------------------------------

class stSynShopBuilding : public ::google::protobuf::Message {
 public:
  stSynShopBuilding();
  virtual ~stSynShopBuilding();

  stSynShopBuilding(const stSynShopBuilding& from);

  inline stSynShopBuilding& operator=(const stSynShopBuilding& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSynShopBuilding& default_instance();

  void Swap(stSynShopBuilding* other);

  // implements Message ----------------------------------------------

  stSynShopBuilding* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSynShopBuilding& from);
  void MergeFrom(const stSynShopBuilding& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stSynShopBuilding_ProtoModID ProtoModID;
  static const ProtoModID ModID = stSynShopBuilding_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stSynShopBuilding_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stSynShopBuilding_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stSynShopBuilding_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stSynShopBuilding_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stSynShopBuilding_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stSynShopBuilding_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stSynShopBuilding_ProtoModID_Parse(name, value);
  }

  typedef stSynShopBuilding_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stSynShopBuilding_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stSynShopBuilding_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stSynShopBuilding_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stSynShopBuilding_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stSynShopBuilding_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stSynShopBuilding_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stSynShopBuilding_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stSynShopBuilding_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 lv = 1;
  inline bool has_lv() const;
  inline void clear_lv();
  static const int kLvFieldNumber = 1;
  inline ::google::protobuf::uint32 lv() const;
  inline void set_lv(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GuildProto.stSynShopBuilding)
 private:
  inline void set_has_lv();
  inline void clear_has_lv();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 lv_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_GuildProto_2eproto();
  friend void protobuf_AssignDesc_GuildProto_2eproto();
  friend void protobuf_ShutdownFile_GuildProto_2eproto();

  void InitAsDefaultInstance();
  static stSynShopBuilding* default_instance_;
};
// -------------------------------------------------------------------

class stReqGuildTrace : public ::google::protobuf::Message {
 public:
  stReqGuildTrace();
  virtual ~stReqGuildTrace();

  stReqGuildTrace(const stReqGuildTrace& from);

  inline stReqGuildTrace& operator=(const stReqGuildTrace& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqGuildTrace& default_instance();

  void Swap(stReqGuildTrace* other);

  // implements Message ----------------------------------------------

  stReqGuildTrace* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqGuildTrace& from);
  void MergeFrom(const stReqGuildTrace& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqGuildTrace_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqGuildTrace_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqGuildTrace_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqGuildTrace_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqGuildTrace_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqGuildTrace_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqGuildTrace_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqGuildTrace_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqGuildTrace_ProtoModID_Parse(name, value);
  }

  typedef stReqGuildTrace_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqGuildTrace_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqGuildTrace_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqGuildTrace_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqGuildTrace_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqGuildTrace_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqGuildTrace_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqGuildTrace_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqGuildTrace_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 guildID = 1;
  inline bool has_guildid() const;
  inline void clear_guildid();
  static const int kGuildIDFieldNumber = 1;
  inline ::google::protobuf::uint32 guildid() const;
  inline void set_guildid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GuildProto.stReqGuildTrace)
 private:
  inline void set_has_guildid();
  inline void clear_has_guildid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 guildid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_GuildProto_2eproto();
  friend void protobuf_AssignDesc_GuildProto_2eproto();
  friend void protobuf_ShutdownFile_GuildProto_2eproto();

  void InitAsDefaultInstance();
  static stReqGuildTrace* default_instance_;
};
// -------------------------------------------------------------------

class stGuildTraceInfo : public ::google::protobuf::Message {
 public:
  stGuildTraceInfo();
  virtual ~stGuildTraceInfo();

  stGuildTraceInfo(const stGuildTraceInfo& from);

  inline stGuildTraceInfo& operator=(const stGuildTraceInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stGuildTraceInfo& default_instance();

  void Swap(stGuildTraceInfo* other);

  // implements Message ----------------------------------------------

  stGuildTraceInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stGuildTraceInfo& from);
  void MergeFrom(const stGuildTraceInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .GuildProto.eTraceID eTraceID = 1;
  inline bool has_etraceid() const;
  inline void clear_etraceid();
  static const int kETraceIDFieldNumber = 1;
  inline ::GuildProto::eTraceID etraceid() const;
  inline void set_etraceid(::GuildProto::eTraceID value);

  // optional uint32 charID = 2;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 2;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 doTime = 4;
  inline bool has_dotime() const;
  inline void clear_dotime();
  static const int kDoTimeFieldNumber = 4;
  inline ::google::protobuf::uint32 dotime() const;
  inline void set_dotime(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GuildProto.stGuildTraceInfo)
 private:
  inline void set_has_etraceid();
  inline void clear_has_etraceid();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_dotime();
  inline void clear_has_dotime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int etraceid_;
  ::google::protobuf::uint32 charid_;
  ::std::string* name_;
  ::google::protobuf::uint32 dotime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_GuildProto_2eproto();
  friend void protobuf_AssignDesc_GuildProto_2eproto();
  friend void protobuf_ShutdownFile_GuildProto_2eproto();

  void InitAsDefaultInstance();
  static stGuildTraceInfo* default_instance_;
};
// -------------------------------------------------------------------

class stRetGuildTrace : public ::google::protobuf::Message {
 public:
  stRetGuildTrace();
  virtual ~stRetGuildTrace();

  stRetGuildTrace(const stRetGuildTrace& from);

  inline stRetGuildTrace& operator=(const stRetGuildTrace& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRetGuildTrace& default_instance();

  void Swap(stRetGuildTrace* other);

  // implements Message ----------------------------------------------

  stRetGuildTrace* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRetGuildTrace& from);
  void MergeFrom(const stRetGuildTrace& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRetGuildTrace_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRetGuildTrace_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRetGuildTrace_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRetGuildTrace_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRetGuildTrace_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRetGuildTrace_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRetGuildTrace_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRetGuildTrace_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRetGuildTrace_ProtoModID_Parse(name, value);
  }

  typedef stRetGuildTrace_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRetGuildTrace_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRetGuildTrace_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRetGuildTrace_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRetGuildTrace_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRetGuildTrace_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRetGuildTrace_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRetGuildTrace_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRetGuildTrace_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .GuildProto.stGuildTraceInfo traces = 1;
  inline int traces_size() const;
  inline void clear_traces();
  static const int kTracesFieldNumber = 1;
  inline const ::GuildProto::stGuildTraceInfo& traces(int index) const;
  inline ::GuildProto::stGuildTraceInfo* mutable_traces(int index);
  inline ::GuildProto::stGuildTraceInfo* add_traces();
  inline const ::google::protobuf::RepeatedPtrField< ::GuildProto::stGuildTraceInfo >&
      traces() const;
  inline ::google::protobuf::RepeatedPtrField< ::GuildProto::stGuildTraceInfo >*
      mutable_traces();

  // @@protoc_insertion_point(class_scope:GuildProto.stRetGuildTrace)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::GuildProto::stGuildTraceInfo > traces_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_GuildProto_2eproto();
  friend void protobuf_AssignDesc_GuildProto_2eproto();
  friend void protobuf_ShutdownFile_GuildProto_2eproto();

  void InitAsDefaultInstance();
  static stRetGuildTrace* default_instance_;
};
// -------------------------------------------------------------------

class stAddNewGuildTrace : public ::google::protobuf::Message {
 public:
  stAddNewGuildTrace();
  virtual ~stAddNewGuildTrace();

  stAddNewGuildTrace(const stAddNewGuildTrace& from);

  inline stAddNewGuildTrace& operator=(const stAddNewGuildTrace& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stAddNewGuildTrace& default_instance();

  void Swap(stAddNewGuildTrace* other);

  // implements Message ----------------------------------------------

  stAddNewGuildTrace* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stAddNewGuildTrace& from);
  void MergeFrom(const stAddNewGuildTrace& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stAddNewGuildTrace_ProtoModID ProtoModID;
  static const ProtoModID ModID = stAddNewGuildTrace_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stAddNewGuildTrace_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stAddNewGuildTrace_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stAddNewGuildTrace_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stAddNewGuildTrace_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stAddNewGuildTrace_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stAddNewGuildTrace_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stAddNewGuildTrace_ProtoModID_Parse(name, value);
  }

  typedef stAddNewGuildTrace_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stAddNewGuildTrace_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stAddNewGuildTrace_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stAddNewGuildTrace_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stAddNewGuildTrace_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stAddNewGuildTrace_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stAddNewGuildTrace_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stAddNewGuildTrace_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stAddNewGuildTrace_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .GuildProto.stGuildTraceInfo traceInfo = 1;
  inline bool has_traceinfo() const;
  inline void clear_traceinfo();
  static const int kTraceInfoFieldNumber = 1;
  inline const ::GuildProto::stGuildTraceInfo& traceinfo() const;
  inline ::GuildProto::stGuildTraceInfo* mutable_traceinfo();
  inline ::GuildProto::stGuildTraceInfo* release_traceinfo();
  inline void set_allocated_traceinfo(::GuildProto::stGuildTraceInfo* traceinfo);

  // @@protoc_insertion_point(class_scope:GuildProto.stAddNewGuildTrace)
 private:
  inline void set_has_traceinfo();
  inline void clear_has_traceinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::GuildProto::stGuildTraceInfo* traceinfo_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_GuildProto_2eproto();
  friend void protobuf_AssignDesc_GuildProto_2eproto();
  friend void protobuf_ShutdownFile_GuildProto_2eproto();

  void InitAsDefaultInstance();
  static stAddNewGuildTrace* default_instance_;
};
// -------------------------------------------------------------------

class stChgNotice : public ::google::protobuf::Message {
 public:
  stChgNotice();
  virtual ~stChgNotice();

  stChgNotice(const stChgNotice& from);

  inline stChgNotice& operator=(const stChgNotice& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stChgNotice& default_instance();

  void Swap(stChgNotice* other);

  // implements Message ----------------------------------------------

  stChgNotice* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stChgNotice& from);
  void MergeFrom(const stChgNotice& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stChgNotice_ProtoModID ProtoModID;
  static const ProtoModID ModID = stChgNotice_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stChgNotice_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stChgNotice_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stChgNotice_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stChgNotice_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stChgNotice_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stChgNotice_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stChgNotice_ProtoModID_Parse(name, value);
  }

  typedef stChgNotice_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stChgNotice_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stChgNotice_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stChgNotice_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stChgNotice_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stChgNotice_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stChgNotice_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stChgNotice_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stChgNotice_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string notice = 1;
  inline bool has_notice() const;
  inline void clear_notice();
  static const int kNoticeFieldNumber = 1;
  inline const ::std::string& notice() const;
  inline void set_notice(const ::std::string& value);
  inline void set_notice(const char* value);
  inline void set_notice(const char* value, size_t size);
  inline ::std::string* mutable_notice();
  inline ::std::string* release_notice();
  inline void set_allocated_notice(::std::string* notice);

  // @@protoc_insertion_point(class_scope:GuildProto.stChgNotice)
 private:
  inline void set_has_notice();
  inline void clear_has_notice();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* notice_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_GuildProto_2eproto();
  friend void protobuf_AssignDesc_GuildProto_2eproto();
  friend void protobuf_ShutdownFile_GuildProto_2eproto();

  void InitAsDefaultInstance();
  static stChgNotice* default_instance_;
};
// -------------------------------------------------------------------

class stGuildDonateState : public ::google::protobuf::Message {
 public:
  stGuildDonateState();
  virtual ~stGuildDonateState();

  stGuildDonateState(const stGuildDonateState& from);

  inline stGuildDonateState& operator=(const stGuildDonateState& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stGuildDonateState& default_instance();

  void Swap(stGuildDonateState* other);

  // implements Message ----------------------------------------------

  stGuildDonateState* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stGuildDonateState& from);
  void MergeFrom(const stGuildDonateState& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stGuildDonateState_ProtoModID ProtoModID;
  static const ProtoModID ModID = stGuildDonateState_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stGuildDonateState_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stGuildDonateState_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stGuildDonateState_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stGuildDonateState_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stGuildDonateState_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stGuildDonateState_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stGuildDonateState_ProtoModID_Parse(name, value);
  }

  typedef stGuildDonateState_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stGuildDonateState_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stGuildDonateState_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stGuildDonateState_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stGuildDonateState_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stGuildDonateState_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stGuildDonateState_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stGuildDonateState_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stGuildDonateState_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional bool hasDonate = 1;
  inline bool has_hasdonate() const;
  inline void clear_hasdonate();
  static const int kHasDonateFieldNumber = 1;
  inline bool hasdonate() const;
  inline void set_hasdonate(bool value);

  // @@protoc_insertion_point(class_scope:GuildProto.stGuildDonateState)
 private:
  inline void set_has_hasdonate();
  inline void clear_has_hasdonate();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool hasdonate_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_GuildProto_2eproto();
  friend void protobuf_AssignDesc_GuildProto_2eproto();
  friend void protobuf_ShutdownFile_GuildProto_2eproto();

  void InitAsDefaultInstance();
  static stGuildDonateState* default_instance_;
};
// -------------------------------------------------------------------

class stGuildPrayState : public ::google::protobuf::Message {
 public:
  stGuildPrayState();
  virtual ~stGuildPrayState();

  stGuildPrayState(const stGuildPrayState& from);

  inline stGuildPrayState& operator=(const stGuildPrayState& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stGuildPrayState& default_instance();

  void Swap(stGuildPrayState* other);

  // implements Message ----------------------------------------------

  stGuildPrayState* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stGuildPrayState& from);
  void MergeFrom(const stGuildPrayState& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stGuildPrayState_ProtoModID ProtoModID;
  static const ProtoModID ModID = stGuildPrayState_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stGuildPrayState_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stGuildPrayState_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stGuildPrayState_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stGuildPrayState_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stGuildPrayState_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stGuildPrayState_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stGuildPrayState_ProtoModID_Parse(name, value);
  }

  typedef stGuildPrayState_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stGuildPrayState_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stGuildPrayState_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stGuildPrayState_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stGuildPrayState_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stGuildPrayState_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stGuildPrayState_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stGuildPrayState_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stGuildPrayState_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional bool hasPray = 1;
  inline bool has_haspray() const;
  inline void clear_haspray();
  static const int kHasPrayFieldNumber = 1;
  inline bool haspray() const;
  inline void set_haspray(bool value);

  // @@protoc_insertion_point(class_scope:GuildProto.stGuildPrayState)
 private:
  inline void set_has_haspray();
  inline void clear_has_haspray();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool haspray_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_GuildProto_2eproto();
  friend void protobuf_AssignDesc_GuildProto_2eproto();
  friend void protobuf_ShutdownFile_GuildProto_2eproto();

  void InitAsDefaultInstance();
  static stGuildPrayState* default_instance_;
};
// -------------------------------------------------------------------

class stReqChangeBadge : public ::google::protobuf::Message {
 public:
  stReqChangeBadge();
  virtual ~stReqChangeBadge();

  stReqChangeBadge(const stReqChangeBadge& from);

  inline stReqChangeBadge& operator=(const stReqChangeBadge& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqChangeBadge& default_instance();

  void Swap(stReqChangeBadge* other);

  // implements Message ----------------------------------------------

  stReqChangeBadge* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqChangeBadge& from);
  void MergeFrom(const stReqChangeBadge& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqChangeBadge_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqChangeBadge_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqChangeBadge_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqChangeBadge_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqChangeBadge_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqChangeBadge_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqChangeBadge_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqChangeBadge_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqChangeBadge_ProtoModID_Parse(name, value);
  }

  typedef stReqChangeBadge_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqChangeBadge_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqChangeBadge_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqChangeBadge_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqChangeBadge_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqChangeBadge_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqChangeBadge_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqChangeBadge_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqChangeBadge_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 badgeID = 1;
  inline bool has_badgeid() const;
  inline void clear_badgeid();
  static const int kBadgeIDFieldNumber = 1;
  inline ::google::protobuf::uint32 badgeid() const;
  inline void set_badgeid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GuildProto.stReqChangeBadge)
 private:
  inline void set_has_badgeid();
  inline void clear_has_badgeid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 badgeid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_GuildProto_2eproto();
  friend void protobuf_AssignDesc_GuildProto_2eproto();
  friend void protobuf_ShutdownFile_GuildProto_2eproto();

  void InitAsDefaultInstance();
  static stReqChangeBadge* default_instance_;
};
// -------------------------------------------------------------------

class stChangeBadge : public ::google::protobuf::Message {
 public:
  stChangeBadge();
  virtual ~stChangeBadge();

  stChangeBadge(const stChangeBadge& from);

  inline stChangeBadge& operator=(const stChangeBadge& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stChangeBadge& default_instance();

  void Swap(stChangeBadge* other);

  // implements Message ----------------------------------------------

  stChangeBadge* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stChangeBadge& from);
  void MergeFrom(const stChangeBadge& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stChangeBadge_eResult eResult;
  static const eResult eSuccess = stChangeBadge_eResult_eSuccess;
  static const eResult eNot_Enough_Diamond = stChangeBadge_eResult_eNot_Enough_Diamond;
  static inline bool eResult_IsValid(int value) {
    return stChangeBadge_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stChangeBadge_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stChangeBadge_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stChangeBadge_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stChangeBadge_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stChangeBadge_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stChangeBadge_eResult_Parse(name, value);
  }

  typedef stChangeBadge_ProtoModID ProtoModID;
  static const ProtoModID ModID = stChangeBadge_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stChangeBadge_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stChangeBadge_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stChangeBadge_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stChangeBadge_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stChangeBadge_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stChangeBadge_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stChangeBadge_ProtoModID_Parse(name, value);
  }

  typedef stChangeBadge_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stChangeBadge_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stChangeBadge_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stChangeBadge_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stChangeBadge_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stChangeBadge_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stChangeBadge_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stChangeBadge_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stChangeBadge_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 badgeID = 1;
  inline bool has_badgeid() const;
  inline void clear_badgeid();
  static const int kBadgeIDFieldNumber = 1;
  inline ::google::protobuf::uint32 badgeid() const;
  inline void set_badgeid(::google::protobuf::uint32 value);

  // optional .GuildProto.stChangeBadge.eResult result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::GuildProto::stChangeBadge_eResult result() const;
  inline void set_result(::GuildProto::stChangeBadge_eResult value);

  // @@protoc_insertion_point(class_scope:GuildProto.stChangeBadge)
 private:
  inline void set_has_badgeid();
  inline void clear_has_badgeid();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 badgeid_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_GuildProto_2eproto();
  friend void protobuf_AssignDesc_GuildProto_2eproto();
  friend void protobuf_ShutdownFile_GuildProto_2eproto();

  void InitAsDefaultInstance();
  static stChangeBadge* default_instance_;
};
// -------------------------------------------------------------------

class stIntoGuildCopymap : public ::google::protobuf::Message {
 public:
  stIntoGuildCopymap();
  virtual ~stIntoGuildCopymap();

  stIntoGuildCopymap(const stIntoGuildCopymap& from);

  inline stIntoGuildCopymap& operator=(const stIntoGuildCopymap& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stIntoGuildCopymap& default_instance();

  void Swap(stIntoGuildCopymap* other);

  // implements Message ----------------------------------------------

  stIntoGuildCopymap* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stIntoGuildCopymap& from);
  void MergeFrom(const stIntoGuildCopymap& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stIntoGuildCopymap_ProtoModID ProtoModID;
  static const ProtoModID ModID = stIntoGuildCopymap_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stIntoGuildCopymap_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stIntoGuildCopymap_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stIntoGuildCopymap_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stIntoGuildCopymap_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stIntoGuildCopymap_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stIntoGuildCopymap_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stIntoGuildCopymap_ProtoModID_Parse(name, value);
  }

  typedef stIntoGuildCopymap_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stIntoGuildCopymap_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stIntoGuildCopymap_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stIntoGuildCopymap_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stIntoGuildCopymap_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stIntoGuildCopymap_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stIntoGuildCopymap_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stIntoGuildCopymap_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stIntoGuildCopymap_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GuildProto.stIntoGuildCopymap)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_GuildProto_2eproto();
  friend void protobuf_AssignDesc_GuildProto_2eproto();
  friend void protobuf_ShutdownFile_GuildProto_2eproto();

  void InitAsDefaultInstance();
  static stIntoGuildCopymap* default_instance_;
};
// -------------------------------------------------------------------

class stIntoGuildCopymapError : public ::google::protobuf::Message {
 public:
  stIntoGuildCopymapError();
  virtual ~stIntoGuildCopymapError();

  stIntoGuildCopymapError(const stIntoGuildCopymapError& from);

  inline stIntoGuildCopymapError& operator=(const stIntoGuildCopymapError& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stIntoGuildCopymapError& default_instance();

  void Swap(stIntoGuildCopymapError* other);

  // implements Message ----------------------------------------------

  stIntoGuildCopymapError* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stIntoGuildCopymapError& from);
  void MergeFrom(const stIntoGuildCopymapError& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stIntoGuildCopymapError_eResult eResult;
  static const eResult eHAS_NOT_GUILD = stIntoGuildCopymapError_eResult_eHAS_NOT_GUILD;
  static inline bool eResult_IsValid(int value) {
    return stIntoGuildCopymapError_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stIntoGuildCopymapError_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stIntoGuildCopymapError_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stIntoGuildCopymapError_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stIntoGuildCopymapError_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stIntoGuildCopymapError_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stIntoGuildCopymapError_eResult_Parse(name, value);
  }

  typedef stIntoGuildCopymapError_ProtoModID ProtoModID;
  static const ProtoModID ModID = stIntoGuildCopymapError_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stIntoGuildCopymapError_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stIntoGuildCopymapError_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stIntoGuildCopymapError_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stIntoGuildCopymapError_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stIntoGuildCopymapError_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stIntoGuildCopymapError_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stIntoGuildCopymapError_ProtoModID_Parse(name, value);
  }

  typedef stIntoGuildCopymapError_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stIntoGuildCopymapError_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stIntoGuildCopymapError_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stIntoGuildCopymapError_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stIntoGuildCopymapError_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stIntoGuildCopymapError_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stIntoGuildCopymapError_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stIntoGuildCopymapError_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stIntoGuildCopymapError_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .GuildProto.stIntoGuildCopymapError.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::GuildProto::stIntoGuildCopymapError_eResult result() const;
  inline void set_result(::GuildProto::stIntoGuildCopymapError_eResult value);

  // @@protoc_insertion_point(class_scope:GuildProto.stIntoGuildCopymapError)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_GuildProto_2eproto();
  friend void protobuf_AssignDesc_GuildProto_2eproto();
  friend void protobuf_ShutdownFile_GuildProto_2eproto();

  void InitAsDefaultInstance();
  static stIntoGuildCopymapError* default_instance_;
};
// -------------------------------------------------------------------

class stSearchGuild : public ::google::protobuf::Message {
 public:
  stSearchGuild();
  virtual ~stSearchGuild();

  stSearchGuild(const stSearchGuild& from);

  inline stSearchGuild& operator=(const stSearchGuild& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSearchGuild& default_instance();

  void Swap(stSearchGuild* other);

  // implements Message ----------------------------------------------

  stSearchGuild* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSearchGuild& from);
  void MergeFrom(const stSearchGuild& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stSearchGuild_ProtoModID ProtoModID;
  static const ProtoModID ModID = stSearchGuild_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stSearchGuild_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stSearchGuild_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stSearchGuild_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stSearchGuild_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stSearchGuild_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stSearchGuild_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stSearchGuild_ProtoModID_Parse(name, value);
  }

  typedef stSearchGuild_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stSearchGuild_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stSearchGuild_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stSearchGuild_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stSearchGuild_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stSearchGuild_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stSearchGuild_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stSearchGuild_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stSearchGuild_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string guildName = 1;
  inline bool has_guildname() const;
  inline void clear_guildname();
  static const int kGuildNameFieldNumber = 1;
  inline const ::std::string& guildname() const;
  inline void set_guildname(const ::std::string& value);
  inline void set_guildname(const char* value);
  inline void set_guildname(const char* value, size_t size);
  inline ::std::string* mutable_guildname();
  inline ::std::string* release_guildname();
  inline void set_allocated_guildname(::std::string* guildname);

  // @@protoc_insertion_point(class_scope:GuildProto.stSearchGuild)
 private:
  inline void set_has_guildname();
  inline void clear_has_guildname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* guildname_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_GuildProto_2eproto();
  friend void protobuf_AssignDesc_GuildProto_2eproto();
  friend void protobuf_ShutdownFile_GuildProto_2eproto();

  void InitAsDefaultInstance();
  static stSearchGuild* default_instance_;
};
// -------------------------------------------------------------------

class stRetSearchGuildResult : public ::google::protobuf::Message {
 public:
  stRetSearchGuildResult();
  virtual ~stRetSearchGuildResult();

  stRetSearchGuildResult(const stRetSearchGuildResult& from);

  inline stRetSearchGuildResult& operator=(const stRetSearchGuildResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRetSearchGuildResult& default_instance();

  void Swap(stRetSearchGuildResult* other);

  // implements Message ----------------------------------------------

  stRetSearchGuildResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRetSearchGuildResult& from);
  void MergeFrom(const stRetSearchGuildResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRetSearchGuildResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRetSearchGuildResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRetSearchGuildResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRetSearchGuildResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRetSearchGuildResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRetSearchGuildResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRetSearchGuildResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRetSearchGuildResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRetSearchGuildResult_ProtoModID_Parse(name, value);
  }

  typedef stRetSearchGuildResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRetSearchGuildResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRetSearchGuildResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRetSearchGuildResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRetSearchGuildResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRetSearchGuildResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRetSearchGuildResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRetSearchGuildResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRetSearchGuildResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .GuildProto.stGuildListInfo listInfo = 1;
  inline int listinfo_size() const;
  inline void clear_listinfo();
  static const int kListInfoFieldNumber = 1;
  inline const ::GuildProto::stGuildListInfo& listinfo(int index) const;
  inline ::GuildProto::stGuildListInfo* mutable_listinfo(int index);
  inline ::GuildProto::stGuildListInfo* add_listinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::GuildProto::stGuildListInfo >&
      listinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::GuildProto::stGuildListInfo >*
      mutable_listinfo();

  // @@protoc_insertion_point(class_scope:GuildProto.stRetSearchGuildResult)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::GuildProto::stGuildListInfo > listinfo_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_GuildProto_2eproto();
  friend void protobuf_AssignDesc_GuildProto_2eproto();
  friend void protobuf_ShutdownFile_GuildProto_2eproto();

  void InitAsDefaultInstance();
  static stRetSearchGuildResult* default_instance_;
};
// -------------------------------------------------------------------

class stSynMemberContribute : public ::google::protobuf::Message {
 public:
  stSynMemberContribute();
  virtual ~stSynMemberContribute();

  stSynMemberContribute(const stSynMemberContribute& from);

  inline stSynMemberContribute& operator=(const stSynMemberContribute& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSynMemberContribute& default_instance();

  void Swap(stSynMemberContribute* other);

  // implements Message ----------------------------------------------

  stSynMemberContribute* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSynMemberContribute& from);
  void MergeFrom(const stSynMemberContribute& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stSynMemberContribute_ProtoModID ProtoModID;
  static const ProtoModID ModID = stSynMemberContribute_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stSynMemberContribute_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stSynMemberContribute_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stSynMemberContribute_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stSynMemberContribute_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stSynMemberContribute_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stSynMemberContribute_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stSynMemberContribute_ProtoModID_Parse(name, value);
  }

  typedef stSynMemberContribute_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stSynMemberContribute_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stSynMemberContribute_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stSynMemberContribute_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stSynMemberContribute_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stSynMemberContribute_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stSynMemberContribute_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stSynMemberContribute_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stSynMemberContribute_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GuildProto.stSynMemberContribute)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_GuildProto_2eproto();
  friend void protobuf_AssignDesc_GuildProto_2eproto();
  friend void protobuf_ShutdownFile_GuildProto_2eproto();

  void InitAsDefaultInstance();
  static stSynMemberContribute* default_instance_;
};
// -------------------------------------------------------------------

class stReqOpenGuildCopymapWin : public ::google::protobuf::Message {
 public:
  stReqOpenGuildCopymapWin();
  virtual ~stReqOpenGuildCopymapWin();

  stReqOpenGuildCopymapWin(const stReqOpenGuildCopymapWin& from);

  inline stReqOpenGuildCopymapWin& operator=(const stReqOpenGuildCopymapWin& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqOpenGuildCopymapWin& default_instance();

  void Swap(stReqOpenGuildCopymapWin* other);

  // implements Message ----------------------------------------------

  stReqOpenGuildCopymapWin* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqOpenGuildCopymapWin& from);
  void MergeFrom(const stReqOpenGuildCopymapWin& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqOpenGuildCopymapWin_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqOpenGuildCopymapWin_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqOpenGuildCopymapWin_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqOpenGuildCopymapWin_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqOpenGuildCopymapWin_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqOpenGuildCopymapWin_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqOpenGuildCopymapWin_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqOpenGuildCopymapWin_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqOpenGuildCopymapWin_ProtoModID_Parse(name, value);
  }

  typedef stReqOpenGuildCopymapWin_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqOpenGuildCopymapWin_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqOpenGuildCopymapWin_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqOpenGuildCopymapWin_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqOpenGuildCopymapWin_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqOpenGuildCopymapWin_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqOpenGuildCopymapWin_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqOpenGuildCopymapWin_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqOpenGuildCopymapWin_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GuildProto.stReqOpenGuildCopymapWin)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_GuildProto_2eproto();
  friend void protobuf_AssignDesc_GuildProto_2eproto();
  friend void protobuf_ShutdownFile_GuildProto_2eproto();

  void InitAsDefaultInstance();
  static stReqOpenGuildCopymapWin* default_instance_;
};
// -------------------------------------------------------------------

class stCopymapOpenInfo : public ::google::protobuf::Message {
 public:
  stCopymapOpenInfo();
  virtual ~stCopymapOpenInfo();

  stCopymapOpenInfo(const stCopymapOpenInfo& from);

  inline stCopymapOpenInfo& operator=(const stCopymapOpenInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stCopymapOpenInfo& default_instance();

  void Swap(stCopymapOpenInfo* other);

  // implements Message ----------------------------------------------

  stCopymapOpenInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stCopymapOpenInfo& from);
  void MergeFrom(const stCopymapOpenInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 copymapID = 1;
  inline bool has_copymapid() const;
  inline void clear_copymapid();
  static const int kCopymapIDFieldNumber = 1;
  inline ::google::protobuf::uint32 copymapid() const;
  inline void set_copymapid(::google::protobuf::uint32 value);

  // optional uint32 openTime = 2;
  inline bool has_opentime() const;
  inline void clear_opentime();
  static const int kOpenTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 opentime() const;
  inline void set_opentime(::google::protobuf::uint32 value);

  // optional uint32 stepID = 3;
  inline bool has_stepid() const;
  inline void clear_stepid();
  static const int kStepIDFieldNumber = 3;
  inline ::google::protobuf::uint32 stepid() const;
  inline void set_stepid(::google::protobuf::uint32 value);

  // optional bool isStarted = 4;
  inline bool has_isstarted() const;
  inline void clear_isstarted();
  static const int kIsStartedFieldNumber = 4;
  inline bool isstarted() const;
  inline void set_isstarted(bool value);

  // optional uint32 killerID = 5;
  inline bool has_killerid() const;
  inline void clear_killerid();
  static const int kKillerIDFieldNumber = 5;
  inline ::google::protobuf::uint32 killerid() const;
  inline void set_killerid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GuildProto.stCopymapOpenInfo)
 private:
  inline void set_has_copymapid();
  inline void clear_has_copymapid();
  inline void set_has_opentime();
  inline void clear_has_opentime();
  inline void set_has_stepid();
  inline void clear_has_stepid();
  inline void set_has_isstarted();
  inline void clear_has_isstarted();
  inline void set_has_killerid();
  inline void clear_has_killerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 copymapid_;
  ::google::protobuf::uint32 opentime_;
  ::google::protobuf::uint32 stepid_;
  bool isstarted_;
  ::google::protobuf::uint32 killerid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_GuildProto_2eproto();
  friend void protobuf_AssignDesc_GuildProto_2eproto();
  friend void protobuf_ShutdownFile_GuildProto_2eproto();

  void InitAsDefaultInstance();
  static stCopymapOpenInfo* default_instance_;
};
// -------------------------------------------------------------------

class stRetGuildCopymapInfo : public ::google::protobuf::Message {
 public:
  stRetGuildCopymapInfo();
  virtual ~stRetGuildCopymapInfo();

  stRetGuildCopymapInfo(const stRetGuildCopymapInfo& from);

  inline stRetGuildCopymapInfo& operator=(const stRetGuildCopymapInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRetGuildCopymapInfo& default_instance();

  void Swap(stRetGuildCopymapInfo* other);

  // implements Message ----------------------------------------------

  stRetGuildCopymapInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRetGuildCopymapInfo& from);
  void MergeFrom(const stRetGuildCopymapInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRetGuildCopymapInfo_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRetGuildCopymapInfo_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRetGuildCopymapInfo_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRetGuildCopymapInfo_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRetGuildCopymapInfo_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRetGuildCopymapInfo_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRetGuildCopymapInfo_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRetGuildCopymapInfo_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRetGuildCopymapInfo_ProtoModID_Parse(name, value);
  }

  typedef stRetGuildCopymapInfo_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRetGuildCopymapInfo_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRetGuildCopymapInfo_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRetGuildCopymapInfo_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRetGuildCopymapInfo_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRetGuildCopymapInfo_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRetGuildCopymapInfo_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRetGuildCopymapInfo_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRetGuildCopymapInfo_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .GuildProto.stCopymapOpenInfo openInfo = 1;
  inline int openinfo_size() const;
  inline void clear_openinfo();
  static const int kOpenInfoFieldNumber = 1;
  inline const ::GuildProto::stCopymapOpenInfo& openinfo(int index) const;
  inline ::GuildProto::stCopymapOpenInfo* mutable_openinfo(int index);
  inline ::GuildProto::stCopymapOpenInfo* add_openinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::GuildProto::stCopymapOpenInfo >&
      openinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::GuildProto::stCopymapOpenInfo >*
      mutable_openinfo();

  // optional uint32 challengeNum = 2;
  inline bool has_challengenum() const;
  inline void clear_challengenum();
  static const int kChallengeNumFieldNumber = 2;
  inline ::google::protobuf::uint32 challengenum() const;
  inline void set_challengenum(::google::protobuf::uint32 value);

  // optional uint32 assistNum = 3;
  inline bool has_assistnum() const;
  inline void clear_assistnum();
  static const int kAssistNumFieldNumber = 3;
  inline ::google::protobuf::uint32 assistnum() const;
  inline void set_assistnum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GuildProto.stRetGuildCopymapInfo)
 private:
  inline void set_has_challengenum();
  inline void clear_has_challengenum();
  inline void set_has_assistnum();
  inline void clear_has_assistnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::GuildProto::stCopymapOpenInfo > openinfo_;
  ::google::protobuf::uint32 challengenum_;
  ::google::protobuf::uint32 assistnum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_GuildProto_2eproto();
  friend void protobuf_AssignDesc_GuildProto_2eproto();
  friend void protobuf_ShutdownFile_GuildProto_2eproto();

  void InitAsDefaultInstance();
  static stRetGuildCopymapInfo* default_instance_;
};
// -------------------------------------------------------------------

class stReqDamageSortlist : public ::google::protobuf::Message {
 public:
  stReqDamageSortlist();
  virtual ~stReqDamageSortlist();

  stReqDamageSortlist(const stReqDamageSortlist& from);

  inline stReqDamageSortlist& operator=(const stReqDamageSortlist& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqDamageSortlist& default_instance();

  void Swap(stReqDamageSortlist* other);

  // implements Message ----------------------------------------------

  stReqDamageSortlist* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqDamageSortlist& from);
  void MergeFrom(const stReqDamageSortlist& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqDamageSortlist_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqDamageSortlist_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqDamageSortlist_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqDamageSortlist_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqDamageSortlist_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqDamageSortlist_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqDamageSortlist_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqDamageSortlist_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqDamageSortlist_ProtoModID_Parse(name, value);
  }

  typedef stReqDamageSortlist_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqDamageSortlist_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqDamageSortlist_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqDamageSortlist_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqDamageSortlist_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqDamageSortlist_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqDamageSortlist_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqDamageSortlist_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqDamageSortlist_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 beginRank = 1;
  inline bool has_beginrank() const;
  inline void clear_beginrank();
  static const int kBeginRankFieldNumber = 1;
  inline ::google::protobuf::uint32 beginrank() const;
  inline void set_beginrank(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GuildProto.stReqDamageSortlist)
 private:
  inline void set_has_beginrank();
  inline void clear_has_beginrank();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 beginrank_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_GuildProto_2eproto();
  friend void protobuf_AssignDesc_GuildProto_2eproto();
  friend void protobuf_ShutdownFile_GuildProto_2eproto();

  void InitAsDefaultInstance();
  static stReqDamageSortlist* default_instance_;
};
// -------------------------------------------------------------------

class stDamageSortItemInfo : public ::google::protobuf::Message {
 public:
  stDamageSortItemInfo();
  virtual ~stDamageSortItemInfo();

  stDamageSortItemInfo(const stDamageSortItemInfo& from);

  inline stDamageSortItemInfo& operator=(const stDamageSortItemInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stDamageSortItemInfo& default_instance();

  void Swap(stDamageSortItemInfo* other);

  // implements Message ----------------------------------------------

  stDamageSortItemInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stDamageSortItemInfo& from);
  void MergeFrom(const stDamageSortItemInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 damage = 2;
  inline bool has_damage() const;
  inline void clear_damage();
  static const int kDamageFieldNumber = 2;
  inline ::google::protobuf::uint32 damage() const;
  inline void set_damage(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GuildProto.stDamageSortItemInfo)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_damage();
  inline void clear_has_damage();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 damage_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_GuildProto_2eproto();
  friend void protobuf_AssignDesc_GuildProto_2eproto();
  friend void protobuf_ShutdownFile_GuildProto_2eproto();

  void InitAsDefaultInstance();
  static stDamageSortItemInfo* default_instance_;
};
// -------------------------------------------------------------------

class stRetDamageSortlist : public ::google::protobuf::Message {
 public:
  stRetDamageSortlist();
  virtual ~stRetDamageSortlist();

  stRetDamageSortlist(const stRetDamageSortlist& from);

  inline stRetDamageSortlist& operator=(const stRetDamageSortlist& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRetDamageSortlist& default_instance();

  void Swap(stRetDamageSortlist* other);

  // implements Message ----------------------------------------------

  stRetDamageSortlist* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRetDamageSortlist& from);
  void MergeFrom(const stRetDamageSortlist& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRetDamageSortlist_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRetDamageSortlist_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRetDamageSortlist_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRetDamageSortlist_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRetDamageSortlist_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRetDamageSortlist_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRetDamageSortlist_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRetDamageSortlist_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRetDamageSortlist_ProtoModID_Parse(name, value);
  }

  typedef stRetDamageSortlist_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRetDamageSortlist_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRetDamageSortlist_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRetDamageSortlist_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRetDamageSortlist_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRetDamageSortlist_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRetDamageSortlist_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRetDamageSortlist_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRetDamageSortlist_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 beginRank = 1;
  inline bool has_beginrank() const;
  inline void clear_beginrank();
  static const int kBeginRankFieldNumber = 1;
  inline ::google::protobuf::uint32 beginrank() const;
  inline void set_beginrank(::google::protobuf::uint32 value);

  // repeated .GuildProto.stDamageSortItemInfo sortItem = 2;
  inline int sortitem_size() const;
  inline void clear_sortitem();
  static const int kSortItemFieldNumber = 2;
  inline const ::GuildProto::stDamageSortItemInfo& sortitem(int index) const;
  inline ::GuildProto::stDamageSortItemInfo* mutable_sortitem(int index);
  inline ::GuildProto::stDamageSortItemInfo* add_sortitem();
  inline const ::google::protobuf::RepeatedPtrField< ::GuildProto::stDamageSortItemInfo >&
      sortitem() const;
  inline ::google::protobuf::RepeatedPtrField< ::GuildProto::stDamageSortItemInfo >*
      mutable_sortitem();

  // optional uint32 myRank = 3;
  inline bool has_myrank() const;
  inline void clear_myrank();
  static const int kMyRankFieldNumber = 3;
  inline ::google::protobuf::uint32 myrank() const;
  inline void set_myrank(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GuildProto.stRetDamageSortlist)
 private:
  inline void set_has_beginrank();
  inline void clear_has_beginrank();
  inline void set_has_myrank();
  inline void clear_has_myrank();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::GuildProto::stDamageSortItemInfo > sortitem_;
  ::google::protobuf::uint32 beginrank_;
  ::google::protobuf::uint32 myrank_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_GuildProto_2eproto();
  friend void protobuf_AssignDesc_GuildProto_2eproto();
  friend void protobuf_ShutdownFile_GuildProto_2eproto();

  void InitAsDefaultInstance();
  static stRetDamageSortlist* default_instance_;
};
// -------------------------------------------------------------------

class stCopymapScoreSortItem : public ::google::protobuf::Message {
 public:
  stCopymapScoreSortItem();
  virtual ~stCopymapScoreSortItem();

  stCopymapScoreSortItem(const stCopymapScoreSortItem& from);

  inline stCopymapScoreSortItem& operator=(const stCopymapScoreSortItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stCopymapScoreSortItem& default_instance();

  void Swap(stCopymapScoreSortItem* other);

  // implements Message ----------------------------------------------

  stCopymapScoreSortItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stCopymapScoreSortItem& from);
  void MergeFrom(const stCopymapScoreSortItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 guildID = 1;
  inline bool has_guildid() const;
  inline void clear_guildid();
  static const int kGuildIDFieldNumber = 1;
  inline ::google::protobuf::uint32 guildid() const;
  inline void set_guildid(::google::protobuf::uint32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 score = 3;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 3;
  inline ::google::protobuf::uint32 score() const;
  inline void set_score(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GuildProto.stCopymapScoreSortItem)
 private:
  inline void set_has_guildid();
  inline void clear_has_guildid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_score();
  inline void clear_has_score();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 guildid_;
  ::google::protobuf::uint32 score_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_GuildProto_2eproto();
  friend void protobuf_AssignDesc_GuildProto_2eproto();
  friend void protobuf_ShutdownFile_GuildProto_2eproto();

  void InitAsDefaultInstance();
  static stCopymapScoreSortItem* default_instance_;
};
// -------------------------------------------------------------------

class stReqGuildCopymapScoreSortlist : public ::google::protobuf::Message {
 public:
  stReqGuildCopymapScoreSortlist();
  virtual ~stReqGuildCopymapScoreSortlist();

  stReqGuildCopymapScoreSortlist(const stReqGuildCopymapScoreSortlist& from);

  inline stReqGuildCopymapScoreSortlist& operator=(const stReqGuildCopymapScoreSortlist& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqGuildCopymapScoreSortlist& default_instance();

  void Swap(stReqGuildCopymapScoreSortlist* other);

  // implements Message ----------------------------------------------

  stReqGuildCopymapScoreSortlist* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqGuildCopymapScoreSortlist& from);
  void MergeFrom(const stReqGuildCopymapScoreSortlist& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqGuildCopymapScoreSortlist_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqGuildCopymapScoreSortlist_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqGuildCopymapScoreSortlist_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqGuildCopymapScoreSortlist_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqGuildCopymapScoreSortlist_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqGuildCopymapScoreSortlist_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqGuildCopymapScoreSortlist_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqGuildCopymapScoreSortlist_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqGuildCopymapScoreSortlist_ProtoModID_Parse(name, value);
  }

  typedef stReqGuildCopymapScoreSortlist_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqGuildCopymapScoreSortlist_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqGuildCopymapScoreSortlist_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqGuildCopymapScoreSortlist_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqGuildCopymapScoreSortlist_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqGuildCopymapScoreSortlist_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqGuildCopymapScoreSortlist_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqGuildCopymapScoreSortlist_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqGuildCopymapScoreSortlist_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 beginRank = 1;
  inline bool has_beginrank() const;
  inline void clear_beginrank();
  static const int kBeginRankFieldNumber = 1;
  inline ::google::protobuf::uint32 beginrank() const;
  inline void set_beginrank(::google::protobuf::uint32 value);

  // optional uint32 copymapID = 2;
  inline bool has_copymapid() const;
  inline void clear_copymapid();
  static const int kCopymapIDFieldNumber = 2;
  inline ::google::protobuf::uint32 copymapid() const;
  inline void set_copymapid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GuildProto.stReqGuildCopymapScoreSortlist)
 private:
  inline void set_has_beginrank();
  inline void clear_has_beginrank();
  inline void set_has_copymapid();
  inline void clear_has_copymapid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 beginrank_;
  ::google::protobuf::uint32 copymapid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_GuildProto_2eproto();
  friend void protobuf_AssignDesc_GuildProto_2eproto();
  friend void protobuf_ShutdownFile_GuildProto_2eproto();

  void InitAsDefaultInstance();
  static stReqGuildCopymapScoreSortlist* default_instance_;
};
// -------------------------------------------------------------------

class stRetGuildCopymapScoreSortlist : public ::google::protobuf::Message {
 public:
  stRetGuildCopymapScoreSortlist();
  virtual ~stRetGuildCopymapScoreSortlist();

  stRetGuildCopymapScoreSortlist(const stRetGuildCopymapScoreSortlist& from);

  inline stRetGuildCopymapScoreSortlist& operator=(const stRetGuildCopymapScoreSortlist& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRetGuildCopymapScoreSortlist& default_instance();

  void Swap(stRetGuildCopymapScoreSortlist* other);

  // implements Message ----------------------------------------------

  stRetGuildCopymapScoreSortlist* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRetGuildCopymapScoreSortlist& from);
  void MergeFrom(const stRetGuildCopymapScoreSortlist& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRetGuildCopymapScoreSortlist_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRetGuildCopymapScoreSortlist_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRetGuildCopymapScoreSortlist_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRetGuildCopymapScoreSortlist_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRetGuildCopymapScoreSortlist_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRetGuildCopymapScoreSortlist_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRetGuildCopymapScoreSortlist_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRetGuildCopymapScoreSortlist_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRetGuildCopymapScoreSortlist_ProtoModID_Parse(name, value);
  }

  typedef stRetGuildCopymapScoreSortlist_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRetGuildCopymapScoreSortlist_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRetGuildCopymapScoreSortlist_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRetGuildCopymapScoreSortlist_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRetGuildCopymapScoreSortlist_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRetGuildCopymapScoreSortlist_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRetGuildCopymapScoreSortlist_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRetGuildCopymapScoreSortlist_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRetGuildCopymapScoreSortlist_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 beginRank = 1;
  inline bool has_beginrank() const;
  inline void clear_beginrank();
  static const int kBeginRankFieldNumber = 1;
  inline ::google::protobuf::uint32 beginrank() const;
  inline void set_beginrank(::google::protobuf::uint32 value);

  // optional uint32 copymapID = 2;
  inline bool has_copymapid() const;
  inline void clear_copymapid();
  static const int kCopymapIDFieldNumber = 2;
  inline ::google::protobuf::uint32 copymapid() const;
  inline void set_copymapid(::google::protobuf::uint32 value);

  // repeated .GuildProto.stCopymapScoreSortItem sortItem = 3;
  inline int sortitem_size() const;
  inline void clear_sortitem();
  static const int kSortItemFieldNumber = 3;
  inline const ::GuildProto::stCopymapScoreSortItem& sortitem(int index) const;
  inline ::GuildProto::stCopymapScoreSortItem* mutable_sortitem(int index);
  inline ::GuildProto::stCopymapScoreSortItem* add_sortitem();
  inline const ::google::protobuf::RepeatedPtrField< ::GuildProto::stCopymapScoreSortItem >&
      sortitem() const;
  inline ::google::protobuf::RepeatedPtrField< ::GuildProto::stCopymapScoreSortItem >*
      mutable_sortitem();

  // optional uint32 myRank = 4;
  inline bool has_myrank() const;
  inline void clear_myrank();
  static const int kMyRankFieldNumber = 4;
  inline ::google::protobuf::uint32 myrank() const;
  inline void set_myrank(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GuildProto.stRetGuildCopymapScoreSortlist)
 private:
  inline void set_has_beginrank();
  inline void clear_has_beginrank();
  inline void set_has_copymapid();
  inline void clear_has_copymapid();
  inline void set_has_myrank();
  inline void clear_has_myrank();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 beginrank_;
  ::google::protobuf::uint32 copymapid_;
  ::google::protobuf::RepeatedPtrField< ::GuildProto::stCopymapScoreSortItem > sortitem_;
  ::google::protobuf::uint32 myrank_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_GuildProto_2eproto();
  friend void protobuf_AssignDesc_GuildProto_2eproto();
  friend void protobuf_ShutdownFile_GuildProto_2eproto();

  void InitAsDefaultInstance();
  static stRetGuildCopymapScoreSortlist* default_instance_;
};
// -------------------------------------------------------------------

class stSynGuildActivityDegree : public ::google::protobuf::Message {
 public:
  stSynGuildActivityDegree();
  virtual ~stSynGuildActivityDegree();

  stSynGuildActivityDegree(const stSynGuildActivityDegree& from);

  inline stSynGuildActivityDegree& operator=(const stSynGuildActivityDegree& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSynGuildActivityDegree& default_instance();

  void Swap(stSynGuildActivityDegree* other);

  // implements Message ----------------------------------------------

  stSynGuildActivityDegree* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSynGuildActivityDegree& from);
  void MergeFrom(const stSynGuildActivityDegree& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stSynGuildActivityDegree_ProtoModID ProtoModID;
  static const ProtoModID ModID = stSynGuildActivityDegree_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stSynGuildActivityDegree_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stSynGuildActivityDegree_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stSynGuildActivityDegree_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stSynGuildActivityDegree_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stSynGuildActivityDegree_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stSynGuildActivityDegree_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stSynGuildActivityDegree_ProtoModID_Parse(name, value);
  }

  typedef stSynGuildActivityDegree_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stSynGuildActivityDegree_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stSynGuildActivityDegree_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stSynGuildActivityDegree_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stSynGuildActivityDegree_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stSynGuildActivityDegree_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stSynGuildActivityDegree_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stSynGuildActivityDegree_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stSynGuildActivityDegree_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 value = 1;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 1;
  inline ::google::protobuf::uint32 value() const;
  inline void set_value(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GuildProto.stSynGuildActivityDegree)
 private:
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_GuildProto_2eproto();
  friend void protobuf_AssignDesc_GuildProto_2eproto();
  friend void protobuf_ShutdownFile_GuildProto_2eproto();

  void InitAsDefaultInstance();
  static stSynGuildActivityDegree* default_instance_;
};
// -------------------------------------------------------------------

class stSynMemberChallengeNum : public ::google::protobuf::Message {
 public:
  stSynMemberChallengeNum();
  virtual ~stSynMemberChallengeNum();

  stSynMemberChallengeNum(const stSynMemberChallengeNum& from);

  inline stSynMemberChallengeNum& operator=(const stSynMemberChallengeNum& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSynMemberChallengeNum& default_instance();

  void Swap(stSynMemberChallengeNum* other);

  // implements Message ----------------------------------------------

  stSynMemberChallengeNum* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSynMemberChallengeNum& from);
  void MergeFrom(const stSynMemberChallengeNum& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stSynMemberChallengeNum_ProtoModID ProtoModID;
  static const ProtoModID ModID = stSynMemberChallengeNum_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stSynMemberChallengeNum_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stSynMemberChallengeNum_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stSynMemberChallengeNum_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stSynMemberChallengeNum_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stSynMemberChallengeNum_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stSynMemberChallengeNum_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stSynMemberChallengeNum_ProtoModID_Parse(name, value);
  }

  typedef stSynMemberChallengeNum_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stSynMemberChallengeNum_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stSynMemberChallengeNum_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stSynMemberChallengeNum_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stSynMemberChallengeNum_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stSynMemberChallengeNum_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stSynMemberChallengeNum_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stSynMemberChallengeNum_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stSynMemberChallengeNum_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 challengeNum = 2;
  inline bool has_challengenum() const;
  inline void clear_challengenum();
  static const int kChallengeNumFieldNumber = 2;
  inline ::google::protobuf::uint32 challengenum() const;
  inline void set_challengenum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GuildProto.stSynMemberChallengeNum)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_challengenum();
  inline void clear_has_challengenum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 challengenum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_GuildProto_2eproto();
  friend void protobuf_AssignDesc_GuildProto_2eproto();
  friend void protobuf_ShutdownFile_GuildProto_2eproto();

  void InitAsDefaultInstance();
  static stSynMemberChallengeNum* default_instance_;
};
// -------------------------------------------------------------------

class stSynMemberAssistNum : public ::google::protobuf::Message {
 public:
  stSynMemberAssistNum();
  virtual ~stSynMemberAssistNum();

  stSynMemberAssistNum(const stSynMemberAssistNum& from);

  inline stSynMemberAssistNum& operator=(const stSynMemberAssistNum& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSynMemberAssistNum& default_instance();

  void Swap(stSynMemberAssistNum* other);

  // implements Message ----------------------------------------------

  stSynMemberAssistNum* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSynMemberAssistNum& from);
  void MergeFrom(const stSynMemberAssistNum& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stSynMemberAssistNum_ProtoModID ProtoModID;
  static const ProtoModID ModID = stSynMemberAssistNum_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stSynMemberAssistNum_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stSynMemberAssistNum_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stSynMemberAssistNum_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stSynMemberAssistNum_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stSynMemberAssistNum_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stSynMemberAssistNum_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stSynMemberAssistNum_ProtoModID_Parse(name, value);
  }

  typedef stSynMemberAssistNum_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stSynMemberAssistNum_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stSynMemberAssistNum_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stSynMemberAssistNum_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stSynMemberAssistNum_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stSynMemberAssistNum_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stSynMemberAssistNum_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stSynMemberAssistNum_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stSynMemberAssistNum_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 assistNum = 2;
  inline bool has_assistnum() const;
  inline void clear_assistnum();
  static const int kAssistNumFieldNumber = 2;
  inline ::google::protobuf::uint32 assistnum() const;
  inline void set_assistnum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GuildProto.stSynMemberAssistNum)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_assistnum();
  inline void clear_has_assistnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 assistnum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_GuildProto_2eproto();
  friend void protobuf_AssignDesc_GuildProto_2eproto();
  friend void protobuf_ShutdownFile_GuildProto_2eproto();

  void InitAsDefaultInstance();
  static stSynMemberAssistNum* default_instance_;
};
// -------------------------------------------------------------------

class stReqEnterGuildCopymap : public ::google::protobuf::Message {
 public:
  stReqEnterGuildCopymap();
  virtual ~stReqEnterGuildCopymap();

  stReqEnterGuildCopymap(const stReqEnterGuildCopymap& from);

  inline stReqEnterGuildCopymap& operator=(const stReqEnterGuildCopymap& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqEnterGuildCopymap& default_instance();

  void Swap(stReqEnterGuildCopymap* other);

  // implements Message ----------------------------------------------

  stReqEnterGuildCopymap* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqEnterGuildCopymap& from);
  void MergeFrom(const stReqEnterGuildCopymap& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqEnterGuildCopymap_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqEnterGuildCopymap_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqEnterGuildCopymap_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqEnterGuildCopymap_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqEnterGuildCopymap_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqEnterGuildCopymap_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqEnterGuildCopymap_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqEnterGuildCopymap_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqEnterGuildCopymap_ProtoModID_Parse(name, value);
  }

  typedef stReqEnterGuildCopymap_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqEnterGuildCopymap_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqEnterGuildCopymap_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqEnterGuildCopymap_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqEnterGuildCopymap_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqEnterGuildCopymap_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqEnterGuildCopymap_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqEnterGuildCopymap_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqEnterGuildCopymap_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 copymapID = 1;
  inline bool has_copymapid() const;
  inline void clear_copymapid();
  static const int kCopymapIDFieldNumber = 1;
  inline ::google::protobuf::uint32 copymapid() const;
  inline void set_copymapid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GuildProto.stReqEnterGuildCopymap)
 private:
  inline void set_has_copymapid();
  inline void clear_has_copymapid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 copymapid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_GuildProto_2eproto();
  friend void protobuf_AssignDesc_GuildProto_2eproto();
  friend void protobuf_ShutdownFile_GuildProto_2eproto();

  void InitAsDefaultInstance();
  static stReqEnterGuildCopymap* default_instance_;
};
// -------------------------------------------------------------------

class stRetEnterGuildCopymapResult : public ::google::protobuf::Message {
 public:
  stRetEnterGuildCopymapResult();
  virtual ~stRetEnterGuildCopymapResult();

  stRetEnterGuildCopymapResult(const stRetEnterGuildCopymapResult& from);

  inline stRetEnterGuildCopymapResult& operator=(const stRetEnterGuildCopymapResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRetEnterGuildCopymapResult& default_instance();

  void Swap(stRetEnterGuildCopymapResult* other);

  // implements Message ----------------------------------------------

  stRetEnterGuildCopymapResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRetEnterGuildCopymapResult& from);
  void MergeFrom(const stRetEnterGuildCopymapResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRetEnterGuildCopymapResult_eResult eResult;
  static const eResult eHas_Member_timeout = stRetEnterGuildCopymapResult_eResult_eHas_Member_timeout;
  static const eResult eHas_Not_Start = stRetEnterGuildCopymapResult_eResult_eHas_Not_Start;
  static const eResult eHas_No_Team = stRetEnterGuildCopymapResult_eResult_eHas_No_Team;
  static const eResult eNot_Leader = stRetEnterGuildCopymapResult_eResult_eNot_Leader;
  static inline bool eResult_IsValid(int value) {
    return stRetEnterGuildCopymapResult_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stRetEnterGuildCopymapResult_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stRetEnterGuildCopymapResult_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stRetEnterGuildCopymapResult_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stRetEnterGuildCopymapResult_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stRetEnterGuildCopymapResult_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stRetEnterGuildCopymapResult_eResult_Parse(name, value);
  }

  typedef stRetEnterGuildCopymapResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRetEnterGuildCopymapResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRetEnterGuildCopymapResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRetEnterGuildCopymapResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRetEnterGuildCopymapResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRetEnterGuildCopymapResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRetEnterGuildCopymapResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRetEnterGuildCopymapResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRetEnterGuildCopymapResult_ProtoModID_Parse(name, value);
  }

  typedef stRetEnterGuildCopymapResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRetEnterGuildCopymapResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRetEnterGuildCopymapResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRetEnterGuildCopymapResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRetEnterGuildCopymapResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRetEnterGuildCopymapResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRetEnterGuildCopymapResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRetEnterGuildCopymapResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRetEnterGuildCopymapResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .GuildProto.stRetEnterGuildCopymapResult.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::GuildProto::stRetEnterGuildCopymapResult_eResult result() const;
  inline void set_result(::GuildProto::stRetEnterGuildCopymapResult_eResult value);

  // @@protoc_insertion_point(class_scope:GuildProto.stRetEnterGuildCopymapResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_GuildProto_2eproto();
  friend void protobuf_AssignDesc_GuildProto_2eproto();
  friend void protobuf_ShutdownFile_GuildProto_2eproto();

  void InitAsDefaultInstance();
  static stRetEnterGuildCopymapResult* default_instance_;
};
// -------------------------------------------------------------------

class stStartGuildCopymap : public ::google::protobuf::Message {
 public:
  stStartGuildCopymap();
  virtual ~stStartGuildCopymap();

  stStartGuildCopymap(const stStartGuildCopymap& from);

  inline stStartGuildCopymap& operator=(const stStartGuildCopymap& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stStartGuildCopymap& default_instance();

  void Swap(stStartGuildCopymap* other);

  // implements Message ----------------------------------------------

  stStartGuildCopymap* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stStartGuildCopymap& from);
  void MergeFrom(const stStartGuildCopymap& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stStartGuildCopymap_ProtoModID ProtoModID;
  static const ProtoModID ModID = stStartGuildCopymap_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stStartGuildCopymap_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stStartGuildCopymap_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stStartGuildCopymap_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stStartGuildCopymap_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stStartGuildCopymap_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stStartGuildCopymap_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stStartGuildCopymap_ProtoModID_Parse(name, value);
  }

  typedef stStartGuildCopymap_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stStartGuildCopymap_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stStartGuildCopymap_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stStartGuildCopymap_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stStartGuildCopymap_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stStartGuildCopymap_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stStartGuildCopymap_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stStartGuildCopymap_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stStartGuildCopymap_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 copymapID = 1;
  inline bool has_copymapid() const;
  inline void clear_copymapid();
  static const int kCopymapIDFieldNumber = 1;
  inline ::google::protobuf::uint32 copymapid() const;
  inline void set_copymapid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GuildProto.stStartGuildCopymap)
 private:
  inline void set_has_copymapid();
  inline void clear_has_copymapid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 copymapid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_GuildProto_2eproto();
  friend void protobuf_AssignDesc_GuildProto_2eproto();
  friend void protobuf_ShutdownFile_GuildProto_2eproto();

  void InitAsDefaultInstance();
  static stStartGuildCopymap* default_instance_;
};
// -------------------------------------------------------------------

class stStartGuildCopymapResult : public ::google::protobuf::Message {
 public:
  stStartGuildCopymapResult();
  virtual ~stStartGuildCopymapResult();

  stStartGuildCopymapResult(const stStartGuildCopymapResult& from);

  inline stStartGuildCopymapResult& operator=(const stStartGuildCopymapResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stStartGuildCopymapResult& default_instance();

  void Swap(stStartGuildCopymapResult* other);

  // implements Message ----------------------------------------------

  stStartGuildCopymapResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stStartGuildCopymapResult& from);
  void MergeFrom(const stStartGuildCopymapResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stStartGuildCopymapResult_eResult eResult;
  static const eResult eSuccess = stStartGuildCopymapResult_eResult_eSuccess;
  static const eResult eNot_Enough_Activity = stStartGuildCopymapResult_eResult_eNot_Enough_Activity;
  static const eResult eHas_Open = stStartGuildCopymapResult_eResult_eHas_Open;
  static const eResult eHas_No_Right = stStartGuildCopymapResult_eResult_eHas_No_Right;
  static const eResult eLevel_Not_Meet = stStartGuildCopymapResult_eResult_eLevel_Not_Meet;
  static inline bool eResult_IsValid(int value) {
    return stStartGuildCopymapResult_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stStartGuildCopymapResult_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stStartGuildCopymapResult_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stStartGuildCopymapResult_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stStartGuildCopymapResult_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stStartGuildCopymapResult_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stStartGuildCopymapResult_eResult_Parse(name, value);
  }

  typedef stStartGuildCopymapResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stStartGuildCopymapResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stStartGuildCopymapResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stStartGuildCopymapResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stStartGuildCopymapResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stStartGuildCopymapResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stStartGuildCopymapResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stStartGuildCopymapResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stStartGuildCopymapResult_ProtoModID_Parse(name, value);
  }

  typedef stStartGuildCopymapResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stStartGuildCopymapResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stStartGuildCopymapResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stStartGuildCopymapResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stStartGuildCopymapResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stStartGuildCopymapResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stStartGuildCopymapResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stStartGuildCopymapResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stStartGuildCopymapResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .GuildProto.stStartGuildCopymapResult.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::GuildProto::stStartGuildCopymapResult_eResult result() const;
  inline void set_result(::GuildProto::stStartGuildCopymapResult_eResult value);

  // optional uint32 startTime = 2;
  inline bool has_starttime() const;
  inline void clear_starttime();
  static const int kStartTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 starttime() const;
  inline void set_starttime(::google::protobuf::uint32 value);

  // optional uint32 copymapID = 3;
  inline bool has_copymapid() const;
  inline void clear_copymapid();
  static const int kCopymapIDFieldNumber = 3;
  inline ::google::protobuf::uint32 copymapid() const;
  inline void set_copymapid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GuildProto.stStartGuildCopymapResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_starttime();
  inline void clear_has_starttime();
  inline void set_has_copymapid();
  inline void clear_has_copymapid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;
  ::google::protobuf::uint32 starttime_;
  ::google::protobuf::uint32 copymapid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_GuildProto_2eproto();
  friend void protobuf_AssignDesc_GuildProto_2eproto();
  friend void protobuf_ShutdownFile_GuildProto_2eproto();

  void InitAsDefaultInstance();
  static stStartGuildCopymapResult* default_instance_;
};
// -------------------------------------------------------------------

class stInviteTeamInGuildChannel : public ::google::protobuf::Message {
 public:
  stInviteTeamInGuildChannel();
  virtual ~stInviteTeamInGuildChannel();

  stInviteTeamInGuildChannel(const stInviteTeamInGuildChannel& from);

  inline stInviteTeamInGuildChannel& operator=(const stInviteTeamInGuildChannel& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stInviteTeamInGuildChannel& default_instance();

  void Swap(stInviteTeamInGuildChannel* other);

  // implements Message ----------------------------------------------

  stInviteTeamInGuildChannel* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stInviteTeamInGuildChannel& from);
  void MergeFrom(const stInviteTeamInGuildChannel& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stInviteTeamInGuildChannel_ProtoModID ProtoModID;
  static const ProtoModID ModID = stInviteTeamInGuildChannel_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stInviteTeamInGuildChannel_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stInviteTeamInGuildChannel_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stInviteTeamInGuildChannel_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stInviteTeamInGuildChannel_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stInviteTeamInGuildChannel_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stInviteTeamInGuildChannel_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stInviteTeamInGuildChannel_ProtoModID_Parse(name, value);
  }

  typedef stInviteTeamInGuildChannel_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stInviteTeamInGuildChannel_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stInviteTeamInGuildChannel_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stInviteTeamInGuildChannel_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stInviteTeamInGuildChannel_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stInviteTeamInGuildChannel_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stInviteTeamInGuildChannel_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stInviteTeamInGuildChannel_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stInviteTeamInGuildChannel_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GuildProto.stInviteTeamInGuildChannel)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_GuildProto_2eproto();
  friend void protobuf_AssignDesc_GuildProto_2eproto();
  friend void protobuf_ShutdownFile_GuildProto_2eproto();

  void InitAsDefaultInstance();
  static stInviteTeamInGuildChannel* default_instance_;
};
// -------------------------------------------------------------------

class stNotifyGuildMemContribute : public ::google::protobuf::Message {
 public:
  stNotifyGuildMemContribute();
  virtual ~stNotifyGuildMemContribute();

  stNotifyGuildMemContribute(const stNotifyGuildMemContribute& from);

  inline stNotifyGuildMemContribute& operator=(const stNotifyGuildMemContribute& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stNotifyGuildMemContribute& default_instance();

  void Swap(stNotifyGuildMemContribute* other);

  // implements Message ----------------------------------------------

  stNotifyGuildMemContribute* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stNotifyGuildMemContribute& from);
  void MergeFrom(const stNotifyGuildMemContribute& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stNotifyGuildMemContribute_ProtoModID ProtoModID;
  static const ProtoModID ModID = stNotifyGuildMemContribute_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stNotifyGuildMemContribute_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stNotifyGuildMemContribute_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stNotifyGuildMemContribute_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stNotifyGuildMemContribute_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stNotifyGuildMemContribute_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stNotifyGuildMemContribute_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stNotifyGuildMemContribute_ProtoModID_Parse(name, value);
  }

  typedef stNotifyGuildMemContribute_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stNotifyGuildMemContribute_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stNotifyGuildMemContribute_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stNotifyGuildMemContribute_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stNotifyGuildMemContribute_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stNotifyGuildMemContribute_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stNotifyGuildMemContribute_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stNotifyGuildMemContribute_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stNotifyGuildMemContribute_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 curVal = 2;
  inline bool has_curval() const;
  inline void clear_curval();
  static const int kCurValFieldNumber = 2;
  inline ::google::protobuf::uint32 curval() const;
  inline void set_curval(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GuildProto.stNotifyGuildMemContribute)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_curval();
  inline void clear_has_curval();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 curval_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_GuildProto_2eproto();
  friend void protobuf_AssignDesc_GuildProto_2eproto();
  friend void protobuf_ShutdownFile_GuildProto_2eproto();

  void InitAsDefaultInstance();
  static stNotifyGuildMemContribute* default_instance_;
};
// -------------------------------------------------------------------

class stNotifyGuildMemActivityDegree : public ::google::protobuf::Message {
 public:
  stNotifyGuildMemActivityDegree();
  virtual ~stNotifyGuildMemActivityDegree();

  stNotifyGuildMemActivityDegree(const stNotifyGuildMemActivityDegree& from);

  inline stNotifyGuildMemActivityDegree& operator=(const stNotifyGuildMemActivityDegree& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stNotifyGuildMemActivityDegree& default_instance();

  void Swap(stNotifyGuildMemActivityDegree* other);

  // implements Message ----------------------------------------------

  stNotifyGuildMemActivityDegree* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stNotifyGuildMemActivityDegree& from);
  void MergeFrom(const stNotifyGuildMemActivityDegree& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stNotifyGuildMemActivityDegree_ProtoModID ProtoModID;
  static const ProtoModID ModID = stNotifyGuildMemActivityDegree_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stNotifyGuildMemActivityDegree_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stNotifyGuildMemActivityDegree_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stNotifyGuildMemActivityDegree_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stNotifyGuildMemActivityDegree_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stNotifyGuildMemActivityDegree_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stNotifyGuildMemActivityDegree_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stNotifyGuildMemActivityDegree_ProtoModID_Parse(name, value);
  }

  typedef stNotifyGuildMemActivityDegree_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stNotifyGuildMemActivityDegree_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stNotifyGuildMemActivityDegree_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stNotifyGuildMemActivityDegree_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stNotifyGuildMemActivityDegree_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stNotifyGuildMemActivityDegree_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stNotifyGuildMemActivityDegree_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stNotifyGuildMemActivityDegree_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stNotifyGuildMemActivityDegree_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 curVal = 2;
  inline bool has_curval() const;
  inline void clear_curval();
  static const int kCurValFieldNumber = 2;
  inline ::google::protobuf::uint32 curval() const;
  inline void set_curval(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GuildProto.stNotifyGuildMemActivityDegree)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_curval();
  inline void clear_has_curval();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 curval_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_GuildProto_2eproto();
  friend void protobuf_AssignDesc_GuildProto_2eproto();
  friend void protobuf_ShutdownFile_GuildProto_2eproto();

  void InitAsDefaultInstance();
  static stNotifyGuildMemActivityDegree* default_instance_;
};
// -------------------------------------------------------------------

class stReqGuildManorFightWin : public ::google::protobuf::Message {
 public:
  stReqGuildManorFightWin();
  virtual ~stReqGuildManorFightWin();

  stReqGuildManorFightWin(const stReqGuildManorFightWin& from);

  inline stReqGuildManorFightWin& operator=(const stReqGuildManorFightWin& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqGuildManorFightWin& default_instance();

  void Swap(stReqGuildManorFightWin* other);

  // implements Message ----------------------------------------------

  stReqGuildManorFightWin* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqGuildManorFightWin& from);
  void MergeFrom(const stReqGuildManorFightWin& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqGuildManorFightWin_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqGuildManorFightWin_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqGuildManorFightWin_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqGuildManorFightWin_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqGuildManorFightWin_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqGuildManorFightWin_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqGuildManorFightWin_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqGuildManorFightWin_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqGuildManorFightWin_ProtoModID_Parse(name, value);
  }

  typedef stReqGuildManorFightWin_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqGuildManorFightWin_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqGuildManorFightWin_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqGuildManorFightWin_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqGuildManorFightWin_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqGuildManorFightWin_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqGuildManorFightWin_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqGuildManorFightWin_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqGuildManorFightWin_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GuildProto.stReqGuildManorFightWin)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_GuildProto_2eproto();
  friend void protobuf_AssignDesc_GuildProto_2eproto();
  friend void protobuf_ShutdownFile_GuildProto_2eproto();

  void InitAsDefaultInstance();
  static stReqGuildManorFightWin* default_instance_;
};
// -------------------------------------------------------------------

class stSynManorInfo : public ::google::protobuf::Message {
 public:
  stSynManorInfo();
  virtual ~stSynManorInfo();

  stSynManorInfo(const stSynManorInfo& from);

  inline stSynManorInfo& operator=(const stSynManorInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSynManorInfo& default_instance();

  void Swap(stSynManorInfo* other);

  // implements Message ----------------------------------------------

  stSynManorInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSynManorInfo& from);
  void MergeFrom(const stSynManorInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 manorID = 1;
  inline bool has_manorid() const;
  inline void clear_manorid();
  static const int kManorIDFieldNumber = 1;
  inline ::google::protobuf::uint32 manorid() const;
  inline void set_manorid(::google::protobuf::uint32 value);

  // optional uint32 ownerGuildID = 2;
  inline bool has_ownerguildid() const;
  inline void clear_ownerguildid();
  static const int kOwnerGuildIDFieldNumber = 2;
  inline ::google::protobuf::uint32 ownerguildid() const;
  inline void set_ownerguildid(::google::protobuf::uint32 value);

  // optional string ownerGuildName = 3;
  inline bool has_ownerguildname() const;
  inline void clear_ownerguildname();
  static const int kOwnerGuildNameFieldNumber = 3;
  inline const ::std::string& ownerguildname() const;
  inline void set_ownerguildname(const ::std::string& value);
  inline void set_ownerguildname(const char* value);
  inline void set_ownerguildname(const char* value, size_t size);
  inline ::std::string* mutable_ownerguildname();
  inline ::std::string* release_ownerguildname();
  inline void set_allocated_ownerguildname(::std::string* ownerguildname);

  // optional uint32 sideAGuildID = 4;
  inline bool has_sideaguildid() const;
  inline void clear_sideaguildid();
  static const int kSideAGuildIDFieldNumber = 4;
  inline ::google::protobuf::uint32 sideaguildid() const;
  inline void set_sideaguildid(::google::protobuf::uint32 value);

  // optional uint32 sideBGuildID = 5;
  inline bool has_sidebguildid() const;
  inline void clear_sidebguildid();
  static const int kSideBGuildIDFieldNumber = 5;
  inline ::google::protobuf::uint32 sidebguildid() const;
  inline void set_sidebguildid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GuildProto.stSynManorInfo)
 private:
  inline void set_has_manorid();
  inline void clear_has_manorid();
  inline void set_has_ownerguildid();
  inline void clear_has_ownerguildid();
  inline void set_has_ownerguildname();
  inline void clear_has_ownerguildname();
  inline void set_has_sideaguildid();
  inline void clear_has_sideaguildid();
  inline void set_has_sidebguildid();
  inline void clear_has_sidebguildid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 manorid_;
  ::google::protobuf::uint32 ownerguildid_;
  ::std::string* ownerguildname_;
  ::google::protobuf::uint32 sideaguildid_;
  ::google::protobuf::uint32 sidebguildid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_GuildProto_2eproto();
  friend void protobuf_AssignDesc_GuildProto_2eproto();
  friend void protobuf_ShutdownFile_GuildProto_2eproto();

  void InitAsDefaultInstance();
  static stSynManorInfo* default_instance_;
};
// -------------------------------------------------------------------

class stRetGuildManorFightInfo : public ::google::protobuf::Message {
 public:
  stRetGuildManorFightInfo();
  virtual ~stRetGuildManorFightInfo();

  stRetGuildManorFightInfo(const stRetGuildManorFightInfo& from);

  inline stRetGuildManorFightInfo& operator=(const stRetGuildManorFightInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRetGuildManorFightInfo& default_instance();

  void Swap(stRetGuildManorFightInfo* other);

  // implements Message ----------------------------------------------

  stRetGuildManorFightInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRetGuildManorFightInfo& from);
  void MergeFrom(const stRetGuildManorFightInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRetGuildManorFightInfo_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRetGuildManorFightInfo_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRetGuildManorFightInfo_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRetGuildManorFightInfo_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRetGuildManorFightInfo_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRetGuildManorFightInfo_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRetGuildManorFightInfo_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRetGuildManorFightInfo_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRetGuildManorFightInfo_ProtoModID_Parse(name, value);
  }

  typedef stRetGuildManorFightInfo_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRetGuildManorFightInfo_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRetGuildManorFightInfo_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRetGuildManorFightInfo_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRetGuildManorFightInfo_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRetGuildManorFightInfo_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRetGuildManorFightInfo_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRetGuildManorFightInfo_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRetGuildManorFightInfo_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .GuildProto.stSynManorInfo manorInfos = 1;
  inline int manorinfos_size() const;
  inline void clear_manorinfos();
  static const int kManorInfosFieldNumber = 1;
  inline const ::GuildProto::stSynManorInfo& manorinfos(int index) const;
  inline ::GuildProto::stSynManorInfo* mutable_manorinfos(int index);
  inline ::GuildProto::stSynManorInfo* add_manorinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::GuildProto::stSynManorInfo >&
      manorinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::GuildProto::stSynManorInfo >*
      mutable_manorinfos();

  // optional uint32 applyManorID = 2;
  inline bool has_applymanorid() const;
  inline void clear_applymanorid();
  static const int kApplyManorIDFieldNumber = 2;
  inline ::google::protobuf::uint32 applymanorid() const;
  inline void set_applymanorid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GuildProto.stRetGuildManorFightInfo)
 private:
  inline void set_has_applymanorid();
  inline void clear_has_applymanorid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::GuildProto::stSynManorInfo > manorinfos_;
  ::google::protobuf::uint32 applymanorid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_GuildProto_2eproto();
  friend void protobuf_AssignDesc_GuildProto_2eproto();
  friend void protobuf_ShutdownFile_GuildProto_2eproto();

  void InitAsDefaultInstance();
  static stRetGuildManorFightInfo* default_instance_;
};
// -------------------------------------------------------------------

class stReqOpenApplyManorFightWin : public ::google::protobuf::Message {
 public:
  stReqOpenApplyManorFightWin();
  virtual ~stReqOpenApplyManorFightWin();

  stReqOpenApplyManorFightWin(const stReqOpenApplyManorFightWin& from);

  inline stReqOpenApplyManorFightWin& operator=(const stReqOpenApplyManorFightWin& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqOpenApplyManorFightWin& default_instance();

  void Swap(stReqOpenApplyManorFightWin* other);

  // implements Message ----------------------------------------------

  stReqOpenApplyManorFightWin* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqOpenApplyManorFightWin& from);
  void MergeFrom(const stReqOpenApplyManorFightWin& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqOpenApplyManorFightWin_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqOpenApplyManorFightWin_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqOpenApplyManorFightWin_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqOpenApplyManorFightWin_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqOpenApplyManorFightWin_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqOpenApplyManorFightWin_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqOpenApplyManorFightWin_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqOpenApplyManorFightWin_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqOpenApplyManorFightWin_ProtoModID_Parse(name, value);
  }

  typedef stReqOpenApplyManorFightWin_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqOpenApplyManorFightWin_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqOpenApplyManorFightWin_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqOpenApplyManorFightWin_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqOpenApplyManorFightWin_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqOpenApplyManorFightWin_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqOpenApplyManorFightWin_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqOpenApplyManorFightWin_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqOpenApplyManorFightWin_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 manorID = 1;
  inline bool has_manorid() const;
  inline void clear_manorid();
  static const int kManorIDFieldNumber = 1;
  inline ::google::protobuf::uint32 manorid() const;
  inline void set_manorid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GuildProto.stReqOpenApplyManorFightWin)
 private:
  inline void set_has_manorid();
  inline void clear_has_manorid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 manorid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_GuildProto_2eproto();
  friend void protobuf_AssignDesc_GuildProto_2eproto();
  friend void protobuf_ShutdownFile_GuildProto_2eproto();

  void InitAsDefaultInstance();
  static stReqOpenApplyManorFightWin* default_instance_;
};
// -------------------------------------------------------------------

class stSynManoryApplyInfo : public ::google::protobuf::Message {
 public:
  stSynManoryApplyInfo();
  virtual ~stSynManoryApplyInfo();

  stSynManoryApplyInfo(const stSynManoryApplyInfo& from);

  inline stSynManoryApplyInfo& operator=(const stSynManoryApplyInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSynManoryApplyInfo& default_instance();

  void Swap(stSynManoryApplyInfo* other);

  // implements Message ----------------------------------------------

  stSynManoryApplyInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSynManoryApplyInfo& from);
  void MergeFrom(const stSynManoryApplyInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 guildID = 1;
  inline bool has_guildid() const;
  inline void clear_guildid();
  static const int kGuildIDFieldNumber = 1;
  inline ::google::protobuf::uint32 guildid() const;
  inline void set_guildid(::google::protobuf::uint32 value);

  // optional string guildName = 2;
  inline bool has_guildname() const;
  inline void clear_guildname();
  static const int kGuildNameFieldNumber = 2;
  inline const ::std::string& guildname() const;
  inline void set_guildname(const ::std::string& value);
  inline void set_guildname(const char* value);
  inline void set_guildname(const char* value, size_t size);
  inline ::std::string* mutable_guildname();
  inline ::std::string* release_guildname();
  inline void set_allocated_guildname(::std::string* guildname);

  // optional uint32 contribute = 3;
  inline bool has_contribute() const;
  inline void clear_contribute();
  static const int kContributeFieldNumber = 3;
  inline ::google::protobuf::uint32 contribute() const;
  inline void set_contribute(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GuildProto.stSynManoryApplyInfo)
 private:
  inline void set_has_guildid();
  inline void clear_has_guildid();
  inline void set_has_guildname();
  inline void clear_has_guildname();
  inline void set_has_contribute();
  inline void clear_has_contribute();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* guildname_;
  ::google::protobuf::uint32 guildid_;
  ::google::protobuf::uint32 contribute_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_GuildProto_2eproto();
  friend void protobuf_AssignDesc_GuildProto_2eproto();
  friend void protobuf_ShutdownFile_GuildProto_2eproto();

  void InitAsDefaultInstance();
  static stSynManoryApplyInfo* default_instance_;
};
// -------------------------------------------------------------------

class stApplyManorWinInfo : public ::google::protobuf::Message {
 public:
  stApplyManorWinInfo();
  virtual ~stApplyManorWinInfo();

  stApplyManorWinInfo(const stApplyManorWinInfo& from);

  inline stApplyManorWinInfo& operator=(const stApplyManorWinInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stApplyManorWinInfo& default_instance();

  void Swap(stApplyManorWinInfo* other);

  // implements Message ----------------------------------------------

  stApplyManorWinInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stApplyManorWinInfo& from);
  void MergeFrom(const stApplyManorWinInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stApplyManorWinInfo_ProtoModID ProtoModID;
  static const ProtoModID ModID = stApplyManorWinInfo_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stApplyManorWinInfo_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stApplyManorWinInfo_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stApplyManorWinInfo_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stApplyManorWinInfo_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stApplyManorWinInfo_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stApplyManorWinInfo_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stApplyManorWinInfo_ProtoModID_Parse(name, value);
  }

  typedef stApplyManorWinInfo_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stApplyManorWinInfo_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stApplyManorWinInfo_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stApplyManorWinInfo_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stApplyManorWinInfo_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stApplyManorWinInfo_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stApplyManorWinInfo_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stApplyManorWinInfo_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stApplyManorWinInfo_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 manorID = 1;
  inline bool has_manorid() const;
  inline void clear_manorid();
  static const int kManorIDFieldNumber = 1;
  inline ::google::protobuf::uint32 manorid() const;
  inline void set_manorid(::google::protobuf::uint32 value);

  // repeated .GuildProto.stSynManoryApplyInfo applyInfo = 2;
  inline int applyinfo_size() const;
  inline void clear_applyinfo();
  static const int kApplyInfoFieldNumber = 2;
  inline const ::GuildProto::stSynManoryApplyInfo& applyinfo(int index) const;
  inline ::GuildProto::stSynManoryApplyInfo* mutable_applyinfo(int index);
  inline ::GuildProto::stSynManoryApplyInfo* add_applyinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::GuildProto::stSynManoryApplyInfo >&
      applyinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::GuildProto::stSynManoryApplyInfo >*
      mutable_applyinfo();

  // @@protoc_insertion_point(class_scope:GuildProto.stApplyManorWinInfo)
 private:
  inline void set_has_manorid();
  inline void clear_has_manorid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::GuildProto::stSynManoryApplyInfo > applyinfo_;
  ::google::protobuf::uint32 manorid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_GuildProto_2eproto();
  friend void protobuf_AssignDesc_GuildProto_2eproto();
  friend void protobuf_ShutdownFile_GuildProto_2eproto();

  void InitAsDefaultInstance();
  static stApplyManorWinInfo* default_instance_;
};
// -------------------------------------------------------------------

class stRefreshManorApplyInfo : public ::google::protobuf::Message {
 public:
  stRefreshManorApplyInfo();
  virtual ~stRefreshManorApplyInfo();

  stRefreshManorApplyInfo(const stRefreshManorApplyInfo& from);

  inline stRefreshManorApplyInfo& operator=(const stRefreshManorApplyInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRefreshManorApplyInfo& default_instance();

  void Swap(stRefreshManorApplyInfo* other);

  // implements Message ----------------------------------------------

  stRefreshManorApplyInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRefreshManorApplyInfo& from);
  void MergeFrom(const stRefreshManorApplyInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRefreshManorApplyInfo_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRefreshManorApplyInfo_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRefreshManorApplyInfo_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRefreshManorApplyInfo_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRefreshManorApplyInfo_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRefreshManorApplyInfo_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRefreshManorApplyInfo_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRefreshManorApplyInfo_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRefreshManorApplyInfo_ProtoModID_Parse(name, value);
  }

  typedef stRefreshManorApplyInfo_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRefreshManorApplyInfo_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRefreshManorApplyInfo_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRefreshManorApplyInfo_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRefreshManorApplyInfo_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRefreshManorApplyInfo_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRefreshManorApplyInfo_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRefreshManorApplyInfo_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRefreshManorApplyInfo_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 manorID = 1;
  inline bool has_manorid() const;
  inline void clear_manorid();
  static const int kManorIDFieldNumber = 1;
  inline ::google::protobuf::uint32 manorid() const;
  inline void set_manorid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GuildProto.stRefreshManorApplyInfo)
 private:
  inline void set_has_manorid();
  inline void clear_has_manorid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 manorid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_GuildProto_2eproto();
  friend void protobuf_AssignDesc_GuildProto_2eproto();
  friend void protobuf_ShutdownFile_GuildProto_2eproto();

  void InitAsDefaultInstance();
  static stRefreshManorApplyInfo* default_instance_;
};
// -------------------------------------------------------------------

class stRetManorApplyInfo : public ::google::protobuf::Message {
 public:
  stRetManorApplyInfo();
  virtual ~stRetManorApplyInfo();

  stRetManorApplyInfo(const stRetManorApplyInfo& from);

  inline stRetManorApplyInfo& operator=(const stRetManorApplyInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRetManorApplyInfo& default_instance();

  void Swap(stRetManorApplyInfo* other);

  // implements Message ----------------------------------------------

  stRetManorApplyInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRetManorApplyInfo& from);
  void MergeFrom(const stRetManorApplyInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRetManorApplyInfo_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRetManorApplyInfo_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRetManorApplyInfo_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRetManorApplyInfo_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRetManorApplyInfo_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRetManorApplyInfo_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRetManorApplyInfo_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRetManorApplyInfo_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRetManorApplyInfo_ProtoModID_Parse(name, value);
  }

  typedef stRetManorApplyInfo_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRetManorApplyInfo_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRetManorApplyInfo_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRetManorApplyInfo_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRetManorApplyInfo_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRetManorApplyInfo_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRetManorApplyInfo_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRetManorApplyInfo_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRetManorApplyInfo_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 manorID = 1;
  inline bool has_manorid() const;
  inline void clear_manorid();
  static const int kManorIDFieldNumber = 1;
  inline ::google::protobuf::uint32 manorid() const;
  inline void set_manorid(::google::protobuf::uint32 value);

  // repeated .GuildProto.stSynManoryApplyInfo applyInfo = 2;
  inline int applyinfo_size() const;
  inline void clear_applyinfo();
  static const int kApplyInfoFieldNumber = 2;
  inline const ::GuildProto::stSynManoryApplyInfo& applyinfo(int index) const;
  inline ::GuildProto::stSynManoryApplyInfo* mutable_applyinfo(int index);
  inline ::GuildProto::stSynManoryApplyInfo* add_applyinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::GuildProto::stSynManoryApplyInfo >&
      applyinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::GuildProto::stSynManoryApplyInfo >*
      mutable_applyinfo();

  // @@protoc_insertion_point(class_scope:GuildProto.stRetManorApplyInfo)
 private:
  inline void set_has_manorid();
  inline void clear_has_manorid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::GuildProto::stSynManoryApplyInfo > applyinfo_;
  ::google::protobuf::uint32 manorid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_GuildProto_2eproto();
  friend void protobuf_AssignDesc_GuildProto_2eproto();
  friend void protobuf_ShutdownFile_GuildProto_2eproto();

  void InitAsDefaultInstance();
  static stRetManorApplyInfo* default_instance_;
};
// -------------------------------------------------------------------

class stApplyManorFight : public ::google::protobuf::Message {
 public:
  stApplyManorFight();
  virtual ~stApplyManorFight();

  stApplyManorFight(const stApplyManorFight& from);

  inline stApplyManorFight& operator=(const stApplyManorFight& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stApplyManorFight& default_instance();

  void Swap(stApplyManorFight* other);

  // implements Message ----------------------------------------------

  stApplyManorFight* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stApplyManorFight& from);
  void MergeFrom(const stApplyManorFight& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stApplyManorFight_ProtoModID ProtoModID;
  static const ProtoModID ModID = stApplyManorFight_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stApplyManorFight_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stApplyManorFight_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stApplyManorFight_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stApplyManorFight_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stApplyManorFight_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stApplyManorFight_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stApplyManorFight_ProtoModID_Parse(name, value);
  }

  typedef stApplyManorFight_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stApplyManorFight_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stApplyManorFight_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stApplyManorFight_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stApplyManorFight_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stApplyManorFight_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stApplyManorFight_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stApplyManorFight_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stApplyManorFight_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 manorID = 1;
  inline bool has_manorid() const;
  inline void clear_manorid();
  static const int kManorIDFieldNumber = 1;
  inline ::google::protobuf::uint32 manorid() const;
  inline void set_manorid(::google::protobuf::uint32 value);

  // optional uint32 contribute = 2;
  inline bool has_contribute() const;
  inline void clear_contribute();
  static const int kContributeFieldNumber = 2;
  inline ::google::protobuf::uint32 contribute() const;
  inline void set_contribute(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GuildProto.stApplyManorFight)
 private:
  inline void set_has_manorid();
  inline void clear_has_manorid();
  inline void set_has_contribute();
  inline void clear_has_contribute();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 manorid_;
  ::google::protobuf::uint32 contribute_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_GuildProto_2eproto();
  friend void protobuf_AssignDesc_GuildProto_2eproto();
  friend void protobuf_ShutdownFile_GuildProto_2eproto();

  void InitAsDefaultInstance();
  static stApplyManorFight* default_instance_;
};
// -------------------------------------------------------------------

class stApplyManorFightRet : public ::google::protobuf::Message {
 public:
  stApplyManorFightRet();
  virtual ~stApplyManorFightRet();

  stApplyManorFightRet(const stApplyManorFightRet& from);

  inline stApplyManorFightRet& operator=(const stApplyManorFightRet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stApplyManorFightRet& default_instance();

  void Swap(stApplyManorFightRet* other);

  // implements Message ----------------------------------------------

  stApplyManorFightRet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stApplyManorFightRet& from);
  void MergeFrom(const stApplyManorFightRet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stApplyManorFightRet_eResult eResult;
  static const eResult eSuccess = stApplyManorFightRet_eResult_eSuccess;
  static const eResult eRes_Not_Enough = stApplyManorFightRet_eResult_eRes_Not_Enough;
  static const eResult eOut_Time = stApplyManorFightRet_eResult_eOut_Time;
  static const eResult eHas_No_Right = stApplyManorFightRet_eResult_eHas_No_Right;
  static const eResult eManor_ID_Error = stApplyManorFightRet_eResult_eManor_ID_Error;
  static const eResult eManor_Has_Apply = stApplyManorFightRet_eResult_eManor_Has_Apply;
  static inline bool eResult_IsValid(int value) {
    return stApplyManorFightRet_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stApplyManorFightRet_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stApplyManorFightRet_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stApplyManorFightRet_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stApplyManorFightRet_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stApplyManorFightRet_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stApplyManorFightRet_eResult_Parse(name, value);
  }

  typedef stApplyManorFightRet_ProtoModID ProtoModID;
  static const ProtoModID ModID = stApplyManorFightRet_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stApplyManorFightRet_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stApplyManorFightRet_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stApplyManorFightRet_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stApplyManorFightRet_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stApplyManorFightRet_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stApplyManorFightRet_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stApplyManorFightRet_ProtoModID_Parse(name, value);
  }

  typedef stApplyManorFightRet_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stApplyManorFightRet_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stApplyManorFightRet_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stApplyManorFightRet_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stApplyManorFightRet_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stApplyManorFightRet_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stApplyManorFightRet_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stApplyManorFightRet_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stApplyManorFightRet_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .GuildProto.stApplyManorFightRet.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::GuildProto::stApplyManorFightRet_eResult result() const;
  inline void set_result(::GuildProto::stApplyManorFightRet_eResult value);

  // optional uint32 manorID = 2;
  inline bool has_manorid() const;
  inline void clear_manorid();
  static const int kManorIDFieldNumber = 2;
  inline ::google::protobuf::uint32 manorid() const;
  inline void set_manorid(::google::protobuf::uint32 value);

  // optional uint32 contribute = 3;
  inline bool has_contribute() const;
  inline void clear_contribute();
  static const int kContributeFieldNumber = 3;
  inline ::google::protobuf::uint32 contribute() const;
  inline void set_contribute(::google::protobuf::uint32 value);

  // optional uint32 guildID = 4;
  inline bool has_guildid() const;
  inline void clear_guildid();
  static const int kGuildIDFieldNumber = 4;
  inline ::google::protobuf::uint32 guildid() const;
  inline void set_guildid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GuildProto.stApplyManorFightRet)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_manorid();
  inline void clear_has_manorid();
  inline void set_has_contribute();
  inline void clear_has_contribute();
  inline void set_has_guildid();
  inline void clear_has_guildid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;
  ::google::protobuf::uint32 manorid_;
  ::google::protobuf::uint32 contribute_;
  ::google::protobuf::uint32 guildid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_GuildProto_2eproto();
  friend void protobuf_AssignDesc_GuildProto_2eproto();
  friend void protobuf_ShutdownFile_GuildProto_2eproto();

  void InitAsDefaultInstance();
  static stApplyManorFightRet* default_instance_;
};
// -------------------------------------------------------------------

class stReqManorFightWin : public ::google::protobuf::Message {
 public:
  stReqManorFightWin();
  virtual ~stReqManorFightWin();

  stReqManorFightWin(const stReqManorFightWin& from);

  inline stReqManorFightWin& operator=(const stReqManorFightWin& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqManorFightWin& default_instance();

  void Swap(stReqManorFightWin* other);

  // implements Message ----------------------------------------------

  stReqManorFightWin* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqManorFightWin& from);
  void MergeFrom(const stReqManorFightWin& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqManorFightWin_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqManorFightWin_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqManorFightWin_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqManorFightWin_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqManorFightWin_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqManorFightWin_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqManorFightWin_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqManorFightWin_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqManorFightWin_ProtoModID_Parse(name, value);
  }

  typedef stReqManorFightWin_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqManorFightWin_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqManorFightWin_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqManorFightWin_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqManorFightWin_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqManorFightWin_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqManorFightWin_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqManorFightWin_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqManorFightWin_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 manorID = 1;
  inline bool has_manorid() const;
  inline void clear_manorid();
  static const int kManorIDFieldNumber = 1;
  inline ::google::protobuf::uint32 manorid() const;
  inline void set_manorid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GuildProto.stReqManorFightWin)
 private:
  inline void set_has_manorid();
  inline void clear_has_manorid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 manorid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_GuildProto_2eproto();
  friend void protobuf_AssignDesc_GuildProto_2eproto();
  friend void protobuf_ShutdownFile_GuildProto_2eproto();

  void InitAsDefaultInstance();
  static stReqManorFightWin* default_instance_;
};
// -------------------------------------------------------------------

class stSynFormationTeamInfo : public ::google::protobuf::Message {
 public:
  stSynFormationTeamInfo();
  virtual ~stSynFormationTeamInfo();

  stSynFormationTeamInfo(const stSynFormationTeamInfo& from);

  inline stSynFormationTeamInfo& operator=(const stSynFormationTeamInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSynFormationTeamInfo& default_instance();

  void Swap(stSynFormationTeamInfo* other);

  // implements Message ----------------------------------------------

  stSynFormationTeamInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSynFormationTeamInfo& from);
  void MergeFrom(const stSynFormationTeamInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 teamID = 1;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamIDFieldNumber = 1;
  inline ::google::protobuf::uint32 teamid() const;
  inline void set_teamid(::google::protobuf::uint32 value);

  // optional uint32 num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GuildProto.stSynFormationTeamInfo)
 private:
  inline void set_has_teamid();
  inline void clear_has_teamid();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 teamid_;
  ::google::protobuf::uint32 num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_GuildProto_2eproto();
  friend void protobuf_AssignDesc_GuildProto_2eproto();
  friend void protobuf_ShutdownFile_GuildProto_2eproto();

  void InitAsDefaultInstance();
  static stSynFormationTeamInfo* default_instance_;
};
// -------------------------------------------------------------------

class stRetManorFightWinInfo : public ::google::protobuf::Message {
 public:
  stRetManorFightWinInfo();
  virtual ~stRetManorFightWinInfo();

  stRetManorFightWinInfo(const stRetManorFightWinInfo& from);

  inline stRetManorFightWinInfo& operator=(const stRetManorFightWinInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRetManorFightWinInfo& default_instance();

  void Swap(stRetManorFightWinInfo* other);

  // implements Message ----------------------------------------------

  stRetManorFightWinInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRetManorFightWinInfo& from);
  void MergeFrom(const stRetManorFightWinInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRetManorFightWinInfo_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRetManorFightWinInfo_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRetManorFightWinInfo_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRetManorFightWinInfo_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRetManorFightWinInfo_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRetManorFightWinInfo_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRetManorFightWinInfo_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRetManorFightWinInfo_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRetManorFightWinInfo_ProtoModID_Parse(name, value);
  }

  typedef stRetManorFightWinInfo_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRetManorFightWinInfo_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRetManorFightWinInfo_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRetManorFightWinInfo_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRetManorFightWinInfo_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRetManorFightWinInfo_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRetManorFightWinInfo_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRetManorFightWinInfo_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRetManorFightWinInfo_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .GuildProto.stSynFormationTeamInfo mainJoinInNum = 1;
  inline int mainjoininnum_size() const;
  inline void clear_mainjoininnum();
  static const int kMainJoinInNumFieldNumber = 1;
  inline const ::GuildProto::stSynFormationTeamInfo& mainjoininnum(int index) const;
  inline ::GuildProto::stSynFormationTeamInfo* mutable_mainjoininnum(int index);
  inline ::GuildProto::stSynFormationTeamInfo* add_mainjoininnum();
  inline const ::google::protobuf::RepeatedPtrField< ::GuildProto::stSynFormationTeamInfo >&
      mainjoininnum() const;
  inline ::google::protobuf::RepeatedPtrField< ::GuildProto::stSynFormationTeamInfo >*
      mutable_mainjoininnum();

  // repeated .GuildProto.stSynFormationTeamInfo leftJoinInNum = 2;
  inline int leftjoininnum_size() const;
  inline void clear_leftjoininnum();
  static const int kLeftJoinInNumFieldNumber = 2;
  inline const ::GuildProto::stSynFormationTeamInfo& leftjoininnum(int index) const;
  inline ::GuildProto::stSynFormationTeamInfo* mutable_leftjoininnum(int index);
  inline ::GuildProto::stSynFormationTeamInfo* add_leftjoininnum();
  inline const ::google::protobuf::RepeatedPtrField< ::GuildProto::stSynFormationTeamInfo >&
      leftjoininnum() const;
  inline ::google::protobuf::RepeatedPtrField< ::GuildProto::stSynFormationTeamInfo >*
      mutable_leftjoininnum();

  // repeated .GuildProto.stSynFormationTeamInfo rightJoinInNum = 3;
  inline int rightjoininnum_size() const;
  inline void clear_rightjoininnum();
  static const int kRightJoinInNumFieldNumber = 3;
  inline const ::GuildProto::stSynFormationTeamInfo& rightjoininnum(int index) const;
  inline ::GuildProto::stSynFormationTeamInfo* mutable_rightjoininnum(int index);
  inline ::GuildProto::stSynFormationTeamInfo* add_rightjoininnum();
  inline const ::google::protobuf::RepeatedPtrField< ::GuildProto::stSynFormationTeamInfo >&
      rightjoininnum() const;
  inline ::google::protobuf::RepeatedPtrField< ::GuildProto::stSynFormationTeamInfo >*
      mutable_rightjoininnum();

  // optional uint32 manorID = 4;
  inline bool has_manorid() const;
  inline void clear_manorid();
  static const int kManorIDFieldNumber = 4;
  inline ::google::protobuf::uint32 manorid() const;
  inline void set_manorid(::google::protobuf::uint32 value);

  // optional string guildAName = 5;
  inline bool has_guildaname() const;
  inline void clear_guildaname();
  static const int kGuildANameFieldNumber = 5;
  inline const ::std::string& guildaname() const;
  inline void set_guildaname(const ::std::string& value);
  inline void set_guildaname(const char* value);
  inline void set_guildaname(const char* value, size_t size);
  inline ::std::string* mutable_guildaname();
  inline ::std::string* release_guildaname();
  inline void set_allocated_guildaname(::std::string* guildaname);

  // optional string guildBName = 6;
  inline bool has_guildbname() const;
  inline void clear_guildbname();
  static const int kGuildBNameFieldNumber = 6;
  inline const ::std::string& guildbname() const;
  inline void set_guildbname(const ::std::string& value);
  inline void set_guildbname(const char* value);
  inline void set_guildbname(const char* value, size_t size);
  inline ::std::string* mutable_guildbname();
  inline ::std::string* release_guildbname();
  inline void set_allocated_guildbname(::std::string* guildbname);

  // optional uint32 mainWinGuildID = 7;
  inline bool has_mainwinguildid() const;
  inline void clear_mainwinguildid();
  static const int kMainWinGuildIDFieldNumber = 7;
  inline ::google::protobuf::uint32 mainwinguildid() const;
  inline void set_mainwinguildid(::google::protobuf::uint32 value);

  // optional uint32 leftWinGuildID = 8;
  inline bool has_leftwinguildid() const;
  inline void clear_leftwinguildid();
  static const int kLeftWinGuildIDFieldNumber = 8;
  inline ::google::protobuf::uint32 leftwinguildid() const;
  inline void set_leftwinguildid(::google::protobuf::uint32 value);

  // optional uint32 rightWinGuildID = 9;
  inline bool has_rightwinguildid() const;
  inline void clear_rightwinguildid();
  static const int kRightWinGuildIDFieldNumber = 9;
  inline ::google::protobuf::uint32 rightwinguildid() const;
  inline void set_rightwinguildid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GuildProto.stRetManorFightWinInfo)
 private:
  inline void set_has_manorid();
  inline void clear_has_manorid();
  inline void set_has_guildaname();
  inline void clear_has_guildaname();
  inline void set_has_guildbname();
  inline void clear_has_guildbname();
  inline void set_has_mainwinguildid();
  inline void clear_has_mainwinguildid();
  inline void set_has_leftwinguildid();
  inline void clear_has_leftwinguildid();
  inline void set_has_rightwinguildid();
  inline void clear_has_rightwinguildid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::GuildProto::stSynFormationTeamInfo > mainjoininnum_;
  ::google::protobuf::RepeatedPtrField< ::GuildProto::stSynFormationTeamInfo > leftjoininnum_;
  ::google::protobuf::RepeatedPtrField< ::GuildProto::stSynFormationTeamInfo > rightjoininnum_;
  ::std::string* guildaname_;
  ::google::protobuf::uint32 manorid_;
  ::google::protobuf::uint32 mainwinguildid_;
  ::std::string* guildbname_;
  ::google::protobuf::uint32 leftwinguildid_;
  ::google::protobuf::uint32 rightwinguildid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_GuildProto_2eproto();
  friend void protobuf_AssignDesc_GuildProto_2eproto();
  friend void protobuf_ShutdownFile_GuildProto_2eproto();

  void InitAsDefaultInstance();
  static stRetManorFightWinInfo* default_instance_;
};
// -------------------------------------------------------------------

class stReqManorFightFormation : public ::google::protobuf::Message {
 public:
  stReqManorFightFormation();
  virtual ~stReqManorFightFormation();

  stReqManorFightFormation(const stReqManorFightFormation& from);

  inline stReqManorFightFormation& operator=(const stReqManorFightFormation& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqManorFightFormation& default_instance();

  void Swap(stReqManorFightFormation* other);

  // implements Message ----------------------------------------------

  stReqManorFightFormation* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqManorFightFormation& from);
  void MergeFrom(const stReqManorFightFormation& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqManorFightFormation_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqManorFightFormation_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqManorFightFormation_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqManorFightFormation_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqManorFightFormation_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqManorFightFormation_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqManorFightFormation_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqManorFightFormation_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqManorFightFormation_ProtoModID_Parse(name, value);
  }

  typedef stReqManorFightFormation_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqManorFightFormation_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqManorFightFormation_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqManorFightFormation_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqManorFightFormation_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqManorFightFormation_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqManorFightFormation_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqManorFightFormation_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqManorFightFormation_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 manorID = 1;
  inline bool has_manorid() const;
  inline void clear_manorid();
  static const int kManorIDFieldNumber = 1;
  inline ::google::protobuf::uint32 manorid() const;
  inline void set_manorid(::google::protobuf::uint32 value);

  // optional .GuildProto.eFormation formation = 2;
  inline bool has_formation() const;
  inline void clear_formation();
  static const int kFormationFieldNumber = 2;
  inline ::GuildProto::eFormation formation() const;
  inline void set_formation(::GuildProto::eFormation value);

  // @@protoc_insertion_point(class_scope:GuildProto.stReqManorFightFormation)
 private:
  inline void set_has_manorid();
  inline void clear_has_manorid();
  inline void set_has_formation();
  inline void clear_has_formation();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 manorid_;
  int formation_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_GuildProto_2eproto();
  friend void protobuf_AssignDesc_GuildProto_2eproto();
  friend void protobuf_ShutdownFile_GuildProto_2eproto();

  void InitAsDefaultInstance();
  static stReqManorFightFormation* default_instance_;
};
// -------------------------------------------------------------------

class stSynManorBattleMem : public ::google::protobuf::Message {
 public:
  stSynManorBattleMem();
  virtual ~stSynManorBattleMem();

  stSynManorBattleMem(const stSynManorBattleMem& from);

  inline stSynManorBattleMem& operator=(const stSynManorBattleMem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSynManorBattleMem& default_instance();

  void Swap(stSynManorBattleMem* other);

  // implements Message ----------------------------------------------

  stSynManorBattleMem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSynManorBattleMem& from);
  void MergeFrom(const stSynManorBattleMem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 job = 3;
  inline bool has_job() const;
  inline void clear_job();
  static const int kJobFieldNumber = 3;
  inline ::google::protobuf::uint32 job() const;
  inline void set_job(::google::protobuf::uint32 value);

  // optional uint32 sex = 4;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 4;
  inline ::google::protobuf::uint32 sex() const;
  inline void set_sex(::google::protobuf::uint32 value);

  // optional uint32 level = 5;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 5;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint32 battlePower = 6;
  inline bool has_battlepower() const;
  inline void clear_battlepower();
  static const int kBattlePowerFieldNumber = 6;
  inline ::google::protobuf::uint32 battlepower() const;
  inline void set_battlepower(::google::protobuf::uint32 value);

  // optional uint32 curHP = 7;
  inline bool has_curhp() const;
  inline void clear_curhp();
  static const int kCurHPFieldNumber = 7;
  inline ::google::protobuf::uint32 curhp() const;
  inline void set_curhp(::google::protobuf::uint32 value);

  // optional uint32 maxHP = 8;
  inline bool has_maxhp() const;
  inline void clear_maxhp();
  static const int kMaxHPFieldNumber = 8;
  inline ::google::protobuf::uint32 maxhp() const;
  inline void set_maxhp(::google::protobuf::uint32 value);

  // optional uint32 pos = 9;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 9;
  inline ::google::protobuf::uint32 pos() const;
  inline void set_pos(::google::protobuf::uint32 value);

  // optional uint32 teamID = 10;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamIDFieldNumber = 10;
  inline ::google::protobuf::uint32 teamid() const;
  inline void set_teamid(::google::protobuf::uint32 value);

  // optional uint32 photoID = 11;
  inline bool has_photoid() const;
  inline void clear_photoid();
  static const int kPhotoIDFieldNumber = 11;
  inline ::google::protobuf::uint32 photoid() const;
  inline void set_photoid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GuildProto.stSynManorBattleMem)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_job();
  inline void clear_has_job();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_battlepower();
  inline void clear_has_battlepower();
  inline void set_has_curhp();
  inline void clear_has_curhp();
  inline void set_has_maxhp();
  inline void clear_has_maxhp();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_teamid();
  inline void clear_has_teamid();
  inline void set_has_photoid();
  inline void clear_has_photoid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 job_;
  ::google::protobuf::uint32 sex_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 battlepower_;
  ::google::protobuf::uint32 curhp_;
  ::google::protobuf::uint32 maxhp_;
  ::google::protobuf::uint32 pos_;
  ::google::protobuf::uint32 teamid_;
  ::google::protobuf::uint32 photoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_GuildProto_2eproto();
  friend void protobuf_AssignDesc_GuildProto_2eproto();
  friend void protobuf_ShutdownFile_GuildProto_2eproto();

  void InitAsDefaultInstance();
  static stSynManorBattleMem* default_instance_;
};
// -------------------------------------------------------------------

class stRetManorFightFormation : public ::google::protobuf::Message {
 public:
  stRetManorFightFormation();
  virtual ~stRetManorFightFormation();

  stRetManorFightFormation(const stRetManorFightFormation& from);

  inline stRetManorFightFormation& operator=(const stRetManorFightFormation& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRetManorFightFormation& default_instance();

  void Swap(stRetManorFightFormation* other);

  // implements Message ----------------------------------------------

  stRetManorFightFormation* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRetManorFightFormation& from);
  void MergeFrom(const stRetManorFightFormation& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRetManorFightFormation_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRetManorFightFormation_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRetManorFightFormation_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRetManorFightFormation_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRetManorFightFormation_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRetManorFightFormation_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRetManorFightFormation_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRetManorFightFormation_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRetManorFightFormation_ProtoModID_Parse(name, value);
  }

  typedef stRetManorFightFormation_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRetManorFightFormation_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRetManorFightFormation_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRetManorFightFormation_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRetManorFightFormation_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRetManorFightFormation_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRetManorFightFormation_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRetManorFightFormation_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRetManorFightFormation_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 manorID = 1;
  inline bool has_manorid() const;
  inline void clear_manorid();
  static const int kManorIDFieldNumber = 1;
  inline ::google::protobuf::uint32 manorid() const;
  inline void set_manorid(::google::protobuf::uint32 value);

  // optional .GuildProto.eFormation formation = 2;
  inline bool has_formation() const;
  inline void clear_formation();
  static const int kFormationFieldNumber = 2;
  inline ::GuildProto::eFormation formation() const;
  inline void set_formation(::GuildProto::eFormation value);

  // repeated .GuildProto.stSynManorBattleMem sideATeam = 3;
  inline int sideateam_size() const;
  inline void clear_sideateam();
  static const int kSideATeamFieldNumber = 3;
  inline const ::GuildProto::stSynManorBattleMem& sideateam(int index) const;
  inline ::GuildProto::stSynManorBattleMem* mutable_sideateam(int index);
  inline ::GuildProto::stSynManorBattleMem* add_sideateam();
  inline const ::google::protobuf::RepeatedPtrField< ::GuildProto::stSynManorBattleMem >&
      sideateam() const;
  inline ::google::protobuf::RepeatedPtrField< ::GuildProto::stSynManorBattleMem >*
      mutable_sideateam();

  // repeated .GuildProto.stSynManorBattleMem sideBTeam = 4;
  inline int sidebteam_size() const;
  inline void clear_sidebteam();
  static const int kSideBTeamFieldNumber = 4;
  inline const ::GuildProto::stSynManorBattleMem& sidebteam(int index) const;
  inline ::GuildProto::stSynManorBattleMem* mutable_sidebteam(int index);
  inline ::GuildProto::stSynManorBattleMem* add_sidebteam();
  inline const ::google::protobuf::RepeatedPtrField< ::GuildProto::stSynManorBattleMem >&
      sidebteam() const;
  inline ::google::protobuf::RepeatedPtrField< ::GuildProto::stSynManorBattleMem >*
      mutable_sidebteam();

  // optional uint32 sideAGuildID = 5;
  inline bool has_sideaguildid() const;
  inline void clear_sideaguildid();
  static const int kSideAGuildIDFieldNumber = 5;
  inline ::google::protobuf::uint32 sideaguildid() const;
  inline void set_sideaguildid(::google::protobuf::uint32 value);

  // optional uint32 sideBGuildID = 6;
  inline bool has_sidebguildid() const;
  inline void clear_sidebguildid();
  static const int kSideBGuildIDFieldNumber = 6;
  inline ::google::protobuf::uint32 sidebguildid() const;
  inline void set_sidebguildid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GuildProto.stRetManorFightFormation)
 private:
  inline void set_has_manorid();
  inline void clear_has_manorid();
  inline void set_has_formation();
  inline void clear_has_formation();
  inline void set_has_sideaguildid();
  inline void clear_has_sideaguildid();
  inline void set_has_sidebguildid();
  inline void clear_has_sidebguildid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 manorid_;
  int formation_;
  ::google::protobuf::RepeatedPtrField< ::GuildProto::stSynManorBattleMem > sideateam_;
  ::google::protobuf::RepeatedPtrField< ::GuildProto::stSynManorBattleMem > sidebteam_;
  ::google::protobuf::uint32 sideaguildid_;
  ::google::protobuf::uint32 sidebguildid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_GuildProto_2eproto();
  friend void protobuf_AssignDesc_GuildProto_2eproto();
  friend void protobuf_ShutdownFile_GuildProto_2eproto();

  void InitAsDefaultInstance();
  static stRetManorFightFormation* default_instance_;
};
// -------------------------------------------------------------------

class stEnterManorFightTeam : public ::google::protobuf::Message {
 public:
  stEnterManorFightTeam();
  virtual ~stEnterManorFightTeam();

  stEnterManorFightTeam(const stEnterManorFightTeam& from);

  inline stEnterManorFightTeam& operator=(const stEnterManorFightTeam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stEnterManorFightTeam& default_instance();

  void Swap(stEnterManorFightTeam* other);

  // implements Message ----------------------------------------------

  stEnterManorFightTeam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stEnterManorFightTeam& from);
  void MergeFrom(const stEnterManorFightTeam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stEnterManorFightTeam_ProtoModID ProtoModID;
  static const ProtoModID ModID = stEnterManorFightTeam_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stEnterManorFightTeam_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stEnterManorFightTeam_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stEnterManorFightTeam_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stEnterManorFightTeam_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stEnterManorFightTeam_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stEnterManorFightTeam_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stEnterManorFightTeam_ProtoModID_Parse(name, value);
  }

  typedef stEnterManorFightTeam_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stEnterManorFightTeam_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stEnterManorFightTeam_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stEnterManorFightTeam_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stEnterManorFightTeam_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stEnterManorFightTeam_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stEnterManorFightTeam_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stEnterManorFightTeam_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stEnterManorFightTeam_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 manorID = 1;
  inline bool has_manorid() const;
  inline void clear_manorid();
  static const int kManorIDFieldNumber = 1;
  inline ::google::protobuf::uint32 manorid() const;
  inline void set_manorid(::google::protobuf::uint32 value);

  // optional .GuildProto.eFormation formation = 2;
  inline bool has_formation() const;
  inline void clear_formation();
  static const int kFormationFieldNumber = 2;
  inline ::GuildProto::eFormation formation() const;
  inline void set_formation(::GuildProto::eFormation value);

  // optional uint32 teamID = 3;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamIDFieldNumber = 3;
  inline ::google::protobuf::uint32 teamid() const;
  inline void set_teamid(::google::protobuf::uint32 value);

  // optional uint32 pos = 4;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 4;
  inline ::google::protobuf::uint32 pos() const;
  inline void set_pos(::google::protobuf::uint32 value);

  // optional uint32 sideAGuildID = 5;
  inline bool has_sideaguildid() const;
  inline void clear_sideaguildid();
  static const int kSideAGuildIDFieldNumber = 5;
  inline ::google::protobuf::uint32 sideaguildid() const;
  inline void set_sideaguildid(::google::protobuf::uint32 value);

  // optional uint32 sideBGuildID = 6;
  inline bool has_sidebguildid() const;
  inline void clear_sidebguildid();
  static const int kSideBGuildIDFieldNumber = 6;
  inline ::google::protobuf::uint32 sidebguildid() const;
  inline void set_sidebguildid(::google::protobuf::uint32 value);

  // optional uint32 charID = 7;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 7;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional string name = 8;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 8;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 guildID = 9;
  inline bool has_guildid() const;
  inline void clear_guildid();
  static const int kGuildIDFieldNumber = 9;
  inline ::google::protobuf::uint32 guildid() const;
  inline void set_guildid(::google::protobuf::uint32 value);

  // optional uint32 sex = 10;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 10;
  inline ::google::protobuf::uint32 sex() const;
  inline void set_sex(::google::protobuf::uint32 value);

  // optional uint32 job = 11;
  inline bool has_job() const;
  inline void clear_job();
  static const int kJobFieldNumber = 11;
  inline ::google::protobuf::uint32 job() const;
  inline void set_job(::google::protobuf::uint32 value);

  // optional uint32 level = 12;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 12;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint32 battlePower = 13;
  inline bool has_battlepower() const;
  inline void clear_battlepower();
  static const int kBattlePowerFieldNumber = 13;
  inline ::google::protobuf::uint32 battlepower() const;
  inline void set_battlepower(::google::protobuf::uint32 value);

  // optional uint32 maxHP = 14;
  inline bool has_maxhp() const;
  inline void clear_maxhp();
  static const int kMaxHPFieldNumber = 14;
  inline ::google::protobuf::uint32 maxhp() const;
  inline void set_maxhp(::google::protobuf::uint32 value);

  // optional uint32 photoID = 15;
  inline bool has_photoid() const;
  inline void clear_photoid();
  static const int kPhotoIDFieldNumber = 15;
  inline ::google::protobuf::uint32 photoid() const;
  inline void set_photoid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GuildProto.stEnterManorFightTeam)
 private:
  inline void set_has_manorid();
  inline void clear_has_manorid();
  inline void set_has_formation();
  inline void clear_has_formation();
  inline void set_has_teamid();
  inline void clear_has_teamid();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_sideaguildid();
  inline void clear_has_sideaguildid();
  inline void set_has_sidebguildid();
  inline void clear_has_sidebguildid();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_guildid();
  inline void clear_has_guildid();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_job();
  inline void clear_has_job();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_battlepower();
  inline void clear_has_battlepower();
  inline void set_has_maxhp();
  inline void clear_has_maxhp();
  inline void set_has_photoid();
  inline void clear_has_photoid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 manorid_;
  int formation_;
  ::google::protobuf::uint32 teamid_;
  ::google::protobuf::uint32 pos_;
  ::google::protobuf::uint32 sideaguildid_;
  ::google::protobuf::uint32 sidebguildid_;
  ::std::string* name_;
  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 guildid_;
  ::google::protobuf::uint32 sex_;
  ::google::protobuf::uint32 job_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 battlepower_;
  ::google::protobuf::uint32 maxhp_;
  ::google::protobuf::uint32 photoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(15 + 31) / 32];

  friend void  protobuf_AddDesc_GuildProto_2eproto();
  friend void protobuf_AssignDesc_GuildProto_2eproto();
  friend void protobuf_ShutdownFile_GuildProto_2eproto();

  void InitAsDefaultInstance();
  static stEnterManorFightTeam* default_instance_;
};
// -------------------------------------------------------------------

class stEnterManorFightTeamResult : public ::google::protobuf::Message {
 public:
  stEnterManorFightTeamResult();
  virtual ~stEnterManorFightTeamResult();

  stEnterManorFightTeamResult(const stEnterManorFightTeamResult& from);

  inline stEnterManorFightTeamResult& operator=(const stEnterManorFightTeamResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stEnterManorFightTeamResult& default_instance();

  void Swap(stEnterManorFightTeamResult* other);

  // implements Message ----------------------------------------------

  stEnterManorFightTeamResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stEnterManorFightTeamResult& from);
  void MergeFrom(const stEnterManorFightTeamResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stEnterManorFightTeamResult_eResult eResult;
  static const eResult eSuccess = stEnterManorFightTeamResult_eResult_eSuccess;
  static const eResult eNot_ChallengeGuildID = stEnterManorFightTeamResult_eResult_eNot_ChallengeGuildID;
  static const eResult ePos_Not_Empty = stEnterManorFightTeamResult_eResult_ePos_Not_Empty;
  static const eResult eNot_In_Time = stEnterManorFightTeamResult_eResult_eNot_In_Time;
  static inline bool eResult_IsValid(int value) {
    return stEnterManorFightTeamResult_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stEnterManorFightTeamResult_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stEnterManorFightTeamResult_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stEnterManorFightTeamResult_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stEnterManorFightTeamResult_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stEnterManorFightTeamResult_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stEnterManorFightTeamResult_eResult_Parse(name, value);
  }

  typedef stEnterManorFightTeamResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stEnterManorFightTeamResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stEnterManorFightTeamResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stEnterManorFightTeamResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stEnterManorFightTeamResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stEnterManorFightTeamResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stEnterManorFightTeamResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stEnterManorFightTeamResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stEnterManorFightTeamResult_ProtoModID_Parse(name, value);
  }

  typedef stEnterManorFightTeamResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stEnterManorFightTeamResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stEnterManorFightTeamResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stEnterManorFightTeamResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stEnterManorFightTeamResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stEnterManorFightTeamResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stEnterManorFightTeamResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stEnterManorFightTeamResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stEnterManorFightTeamResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .GuildProto.stEnterManorFightTeamResult.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::GuildProto::stEnterManorFightTeamResult_eResult result() const;
  inline void set_result(::GuildProto::stEnterManorFightTeamResult_eResult value);

  // optional uint32 manorID = 2;
  inline bool has_manorid() const;
  inline void clear_manorid();
  static const int kManorIDFieldNumber = 2;
  inline ::google::protobuf::uint32 manorid() const;
  inline void set_manorid(::google::protobuf::uint32 value);

  // optional .GuildProto.eFormation formation = 3;
  inline bool has_formation() const;
  inline void clear_formation();
  static const int kFormationFieldNumber = 3;
  inline ::GuildProto::eFormation formation() const;
  inline void set_formation(::GuildProto::eFormation value);

  // optional uint32 teamID = 4;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamIDFieldNumber = 4;
  inline ::google::protobuf::uint32 teamid() const;
  inline void set_teamid(::google::protobuf::uint32 value);

  // optional uint32 pos = 5;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 5;
  inline ::google::protobuf::uint32 pos() const;
  inline void set_pos(::google::protobuf::uint32 value);

  // optional uint32 sideAGuildID = 6;
  inline bool has_sideaguildid() const;
  inline void clear_sideaguildid();
  static const int kSideAGuildIDFieldNumber = 6;
  inline ::google::protobuf::uint32 sideaguildid() const;
  inline void set_sideaguildid(::google::protobuf::uint32 value);

  // optional uint32 sideBGuildID = 7;
  inline bool has_sidebguildid() const;
  inline void clear_sidebguildid();
  static const int kSideBGuildIDFieldNumber = 7;
  inline ::google::protobuf::uint32 sidebguildid() const;
  inline void set_sidebguildid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GuildProto.stEnterManorFightTeamResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_manorid();
  inline void clear_has_manorid();
  inline void set_has_formation();
  inline void clear_has_formation();
  inline void set_has_teamid();
  inline void clear_has_teamid();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_sideaguildid();
  inline void clear_has_sideaguildid();
  inline void set_has_sidebguildid();
  inline void clear_has_sidebguildid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;
  ::google::protobuf::uint32 manorid_;
  int formation_;
  ::google::protobuf::uint32 teamid_;
  ::google::protobuf::uint32 pos_;
  ::google::protobuf::uint32 sideaguildid_;
  ::google::protobuf::uint32 sidebguildid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_GuildProto_2eproto();
  friend void protobuf_AssignDesc_GuildProto_2eproto();
  friend void protobuf_ShutdownFile_GuildProto_2eproto();

  void InitAsDefaultInstance();
  static stEnterManorFightTeamResult* default_instance_;
};
// -------------------------------------------------------------------

class stNotifyLeaveManorFightWin : public ::google::protobuf::Message {
 public:
  stNotifyLeaveManorFightWin();
  virtual ~stNotifyLeaveManorFightWin();

  stNotifyLeaveManorFightWin(const stNotifyLeaveManorFightWin& from);

  inline stNotifyLeaveManorFightWin& operator=(const stNotifyLeaveManorFightWin& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stNotifyLeaveManorFightWin& default_instance();

  void Swap(stNotifyLeaveManorFightWin* other);

  // implements Message ----------------------------------------------

  stNotifyLeaveManorFightWin* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stNotifyLeaveManorFightWin& from);
  void MergeFrom(const stNotifyLeaveManorFightWin& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stNotifyLeaveManorFightWin_ProtoModID ProtoModID;
  static const ProtoModID ModID = stNotifyLeaveManorFightWin_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stNotifyLeaveManorFightWin_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stNotifyLeaveManorFightWin_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stNotifyLeaveManorFightWin_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stNotifyLeaveManorFightWin_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stNotifyLeaveManorFightWin_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stNotifyLeaveManorFightWin_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stNotifyLeaveManorFightWin_ProtoModID_Parse(name, value);
  }

  typedef stNotifyLeaveManorFightWin_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stNotifyLeaveManorFightWin_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stNotifyLeaveManorFightWin_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stNotifyLeaveManorFightWin_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stNotifyLeaveManorFightWin_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stNotifyLeaveManorFightWin_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stNotifyLeaveManorFightWin_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stNotifyLeaveManorFightWin_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stNotifyLeaveManorFightWin_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 guildID = 2;
  inline bool has_guildid() const;
  inline void clear_guildid();
  static const int kGuildIDFieldNumber = 2;
  inline ::google::protobuf::uint32 guildid() const;
  inline void set_guildid(::google::protobuf::uint32 value);

  // optional uint32 formation = 3;
  inline bool has_formation() const;
  inline void clear_formation();
  static const int kFormationFieldNumber = 3;
  inline ::google::protobuf::uint32 formation() const;
  inline void set_formation(::google::protobuf::uint32 value);

  // optional uint32 teamID = 4;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamIDFieldNumber = 4;
  inline ::google::protobuf::uint32 teamid() const;
  inline void set_teamid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GuildProto.stNotifyLeaveManorFightWin)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_guildid();
  inline void clear_has_guildid();
  inline void set_has_formation();
  inline void clear_has_formation();
  inline void set_has_teamid();
  inline void clear_has_teamid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 guildid_;
  ::google::protobuf::uint32 formation_;
  ::google::protobuf::uint32 teamid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_GuildProto_2eproto();
  friend void protobuf_AssignDesc_GuildProto_2eproto();
  friend void protobuf_ShutdownFile_GuildProto_2eproto();

  void InitAsDefaultInstance();
  static stNotifyLeaveManorFightWin* default_instance_;
};
// -------------------------------------------------------------------

class stSynManorFightItem : public ::google::protobuf::Message {
 public:
  stSynManorFightItem();
  virtual ~stSynManorFightItem();

  stSynManorFightItem(const stSynManorFightItem& from);

  inline stSynManorFightItem& operator=(const stSynManorFightItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSynManorFightItem& default_instance();

  void Swap(stSynManorFightItem* other);

  // implements Message ----------------------------------------------

  stSynManorFightItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSynManorFightItem& from);
  void MergeFrom(const stSynManorFightItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string roleName = 1;
  inline bool has_rolename() const;
  inline void clear_rolename();
  static const int kRoleNameFieldNumber = 1;
  inline const ::std::string& rolename() const;
  inline void set_rolename(const ::std::string& value);
  inline void set_rolename(const char* value);
  inline void set_rolename(const char* value, size_t size);
  inline ::std::string* mutable_rolename();
  inline ::std::string* release_rolename();
  inline void set_allocated_rolename(::std::string* rolename);

  // optional uint32 level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint32 battlePower = 3;
  inline bool has_battlepower() const;
  inline void clear_battlepower();
  static const int kBattlePowerFieldNumber = 3;
  inline ::google::protobuf::uint32 battlepower() const;
  inline void set_battlepower(::google::protobuf::uint32 value);

  // optional uint32 killNum = 4;
  inline bool has_killnum() const;
  inline void clear_killnum();
  static const int kKillNumFieldNumber = 4;
  inline ::google::protobuf::uint32 killnum() const;
  inline void set_killnum(::google::protobuf::uint32 value);

  // optional bool isDie = 5;
  inline bool has_isdie() const;
  inline void clear_isdie();
  static const int kIsDieFieldNumber = 5;
  inline bool isdie() const;
  inline void set_isdie(bool value);

  // @@protoc_insertion_point(class_scope:GuildProto.stSynManorFightItem)
 private:
  inline void set_has_rolename();
  inline void clear_has_rolename();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_battlepower();
  inline void clear_has_battlepower();
  inline void set_has_killnum();
  inline void clear_has_killnum();
  inline void set_has_isdie();
  inline void clear_has_isdie();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* rolename_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 battlepower_;
  ::google::protobuf::uint32 killnum_;
  bool isdie_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_GuildProto_2eproto();
  friend void protobuf_AssignDesc_GuildProto_2eproto();
  friend void protobuf_ShutdownFile_GuildProto_2eproto();

  void InitAsDefaultInstance();
  static stSynManorFightItem* default_instance_;
};
// -------------------------------------------------------------------

class stManorFightPKResult : public ::google::protobuf::Message {
 public:
  stManorFightPKResult();
  virtual ~stManorFightPKResult();

  stManorFightPKResult(const stManorFightPKResult& from);

  inline stManorFightPKResult& operator=(const stManorFightPKResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stManorFightPKResult& default_instance();

  void Swap(stManorFightPKResult* other);

  // implements Message ----------------------------------------------

  stManorFightPKResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stManorFightPKResult& from);
  void MergeFrom(const stManorFightPKResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stManorFightPKResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stManorFightPKResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stManorFightPKResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stManorFightPKResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stManorFightPKResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stManorFightPKResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stManorFightPKResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stManorFightPKResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stManorFightPKResult_ProtoModID_Parse(name, value);
  }

  typedef stManorFightPKResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stManorFightPKResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stManorFightPKResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stManorFightPKResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stManorFightPKResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stManorFightPKResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stManorFightPKResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stManorFightPKResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stManorFightPKResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .GuildProto.stSynManorFightItem sideA = 1;
  inline int sidea_size() const;
  inline void clear_sidea();
  static const int kSideAFieldNumber = 1;
  inline const ::GuildProto::stSynManorFightItem& sidea(int index) const;
  inline ::GuildProto::stSynManorFightItem* mutable_sidea(int index);
  inline ::GuildProto::stSynManorFightItem* add_sidea();
  inline const ::google::protobuf::RepeatedPtrField< ::GuildProto::stSynManorFightItem >&
      sidea() const;
  inline ::google::protobuf::RepeatedPtrField< ::GuildProto::stSynManorFightItem >*
      mutable_sidea();

  // repeated .GuildProto.stSynManorFightItem sideB = 2;
  inline int sideb_size() const;
  inline void clear_sideb();
  static const int kSideBFieldNumber = 2;
  inline const ::GuildProto::stSynManorFightItem& sideb(int index) const;
  inline ::GuildProto::stSynManorFightItem* mutable_sideb(int index);
  inline ::GuildProto::stSynManorFightItem* add_sideb();
  inline const ::google::protobuf::RepeatedPtrField< ::GuildProto::stSynManorFightItem >&
      sideb() const;
  inline ::google::protobuf::RepeatedPtrField< ::GuildProto::stSynManorFightItem >*
      mutable_sideb();

  // @@protoc_insertion_point(class_scope:GuildProto.stManorFightPKResult)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::GuildProto::stSynManorFightItem > sidea_;
  ::google::protobuf::RepeatedPtrField< ::GuildProto::stSynManorFightItem > sideb_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_GuildProto_2eproto();
  friend void protobuf_AssignDesc_GuildProto_2eproto();
  friend void protobuf_ShutdownFile_GuildProto_2eproto();

  void InitAsDefaultInstance();
  static stManorFightPKResult* default_instance_;
};
// -------------------------------------------------------------------

class stManorFightPKFail : public ::google::protobuf::Message {
 public:
  stManorFightPKFail();
  virtual ~stManorFightPKFail();

  stManorFightPKFail(const stManorFightPKFail& from);

  inline stManorFightPKFail& operator=(const stManorFightPKFail& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stManorFightPKFail& default_instance();

  void Swap(stManorFightPKFail* other);

  // implements Message ----------------------------------------------

  stManorFightPKFail* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stManorFightPKFail& from);
  void MergeFrom(const stManorFightPKFail& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stManorFightPKFail_ProtoModID ProtoModID;
  static const ProtoModID ModID = stManorFightPKFail_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stManorFightPKFail_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stManorFightPKFail_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stManorFightPKFail_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stManorFightPKFail_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stManorFightPKFail_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stManorFightPKFail_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stManorFightPKFail_ProtoModID_Parse(name, value);
  }

  typedef stManorFightPKFail_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stManorFightPKFail_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stManorFightPKFail_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stManorFightPKFail_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stManorFightPKFail_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stManorFightPKFail_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stManorFightPKFail_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stManorFightPKFail_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stManorFightPKFail_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .GuildProto.stSynManorFightItem sideA = 1;
  inline int sidea_size() const;
  inline void clear_sidea();
  static const int kSideAFieldNumber = 1;
  inline const ::GuildProto::stSynManorFightItem& sidea(int index) const;
  inline ::GuildProto::stSynManorFightItem* mutable_sidea(int index);
  inline ::GuildProto::stSynManorFightItem* add_sidea();
  inline const ::google::protobuf::RepeatedPtrField< ::GuildProto::stSynManorFightItem >&
      sidea() const;
  inline ::google::protobuf::RepeatedPtrField< ::GuildProto::stSynManorFightItem >*
      mutable_sidea();

  // repeated .GuildProto.stSynManorFightItem sideB = 2;
  inline int sideb_size() const;
  inline void clear_sideb();
  static const int kSideBFieldNumber = 2;
  inline const ::GuildProto::stSynManorFightItem& sideb(int index) const;
  inline ::GuildProto::stSynManorFightItem* mutable_sideb(int index);
  inline ::GuildProto::stSynManorFightItem* add_sideb();
  inline const ::google::protobuf::RepeatedPtrField< ::GuildProto::stSynManorFightItem >&
      sideb() const;
  inline ::google::protobuf::RepeatedPtrField< ::GuildProto::stSynManorFightItem >*
      mutable_sideb();

  // @@protoc_insertion_point(class_scope:GuildProto.stManorFightPKFail)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::GuildProto::stSynManorFightItem > sidea_;
  ::google::protobuf::RepeatedPtrField< ::GuildProto::stSynManorFightItem > sideb_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_GuildProto_2eproto();
  friend void protobuf_AssignDesc_GuildProto_2eproto();
  friend void protobuf_ShutdownFile_GuildProto_2eproto();

  void InitAsDefaultInstance();
  static stManorFightPKFail* default_instance_;
};
// -------------------------------------------------------------------

class stNotifyWinerAfterApplyEnd : public ::google::protobuf::Message {
 public:
  stNotifyWinerAfterApplyEnd();
  virtual ~stNotifyWinerAfterApplyEnd();

  stNotifyWinerAfterApplyEnd(const stNotifyWinerAfterApplyEnd& from);

  inline stNotifyWinerAfterApplyEnd& operator=(const stNotifyWinerAfterApplyEnd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stNotifyWinerAfterApplyEnd& default_instance();

  void Swap(stNotifyWinerAfterApplyEnd* other);

  // implements Message ----------------------------------------------

  stNotifyWinerAfterApplyEnd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stNotifyWinerAfterApplyEnd& from);
  void MergeFrom(const stNotifyWinerAfterApplyEnd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stNotifyWinerAfterApplyEnd_ProtoModID ProtoModID;
  static const ProtoModID ModID = stNotifyWinerAfterApplyEnd_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stNotifyWinerAfterApplyEnd_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stNotifyWinerAfterApplyEnd_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stNotifyWinerAfterApplyEnd_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stNotifyWinerAfterApplyEnd_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stNotifyWinerAfterApplyEnd_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stNotifyWinerAfterApplyEnd_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stNotifyWinerAfterApplyEnd_ProtoModID_Parse(name, value);
  }

  typedef stNotifyWinerAfterApplyEnd_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stNotifyWinerAfterApplyEnd_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stNotifyWinerAfterApplyEnd_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stNotifyWinerAfterApplyEnd_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stNotifyWinerAfterApplyEnd_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stNotifyWinerAfterApplyEnd_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stNotifyWinerAfterApplyEnd_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stNotifyWinerAfterApplyEnd_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stNotifyWinerAfterApplyEnd_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 guildID = 1;
  inline bool has_guildid() const;
  inline void clear_guildid();
  static const int kGuildIDFieldNumber = 1;
  inline ::google::protobuf::uint32 guildid() const;
  inline void set_guildid(::google::protobuf::uint32 value);

  // optional uint32 manorID = 2;
  inline bool has_manorid() const;
  inline void clear_manorid();
  static const int kManorIDFieldNumber = 2;
  inline ::google::protobuf::uint32 manorid() const;
  inline void set_manorid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GuildProto.stNotifyWinerAfterApplyEnd)
 private:
  inline void set_has_guildid();
  inline void clear_has_guildid();
  inline void set_has_manorid();
  inline void clear_has_manorid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 guildid_;
  ::google::protobuf::uint32 manorid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_GuildProto_2eproto();
  friend void protobuf_AssignDesc_GuildProto_2eproto();
  friend void protobuf_ShutdownFile_GuildProto_2eproto();

  void InitAsDefaultInstance();
  static stNotifyWinerAfterApplyEnd* default_instance_;
};
// -------------------------------------------------------------------

class stReqChgManorFightTeamPos : public ::google::protobuf::Message {
 public:
  stReqChgManorFightTeamPos();
  virtual ~stReqChgManorFightTeamPos();

  stReqChgManorFightTeamPos(const stReqChgManorFightTeamPos& from);

  inline stReqChgManorFightTeamPos& operator=(const stReqChgManorFightTeamPos& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqChgManorFightTeamPos& default_instance();

  void Swap(stReqChgManorFightTeamPos* other);

  // implements Message ----------------------------------------------

  stReqChgManorFightTeamPos* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqChgManorFightTeamPos& from);
  void MergeFrom(const stReqChgManorFightTeamPos& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqChgManorFightTeamPos_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqChgManorFightTeamPos_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqChgManorFightTeamPos_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqChgManorFightTeamPos_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqChgManorFightTeamPos_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqChgManorFightTeamPos_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqChgManorFightTeamPos_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqChgManorFightTeamPos_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqChgManorFightTeamPos_ProtoModID_Parse(name, value);
  }

  typedef stReqChgManorFightTeamPos_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqChgManorFightTeamPos_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqChgManorFightTeamPos_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqChgManorFightTeamPos_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqChgManorFightTeamPos_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqChgManorFightTeamPos_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqChgManorFightTeamPos_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqChgManorFightTeamPos_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqChgManorFightTeamPos_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 destTeamID = 2;
  inline bool has_destteamid() const;
  inline void clear_destteamid();
  static const int kDestTeamIDFieldNumber = 2;
  inline ::google::protobuf::uint32 destteamid() const;
  inline void set_destteamid(::google::protobuf::uint32 value);

  // optional uint32 destPos = 3;
  inline bool has_destpos() const;
  inline void clear_destpos();
  static const int kDestPosFieldNumber = 3;
  inline ::google::protobuf::uint32 destpos() const;
  inline void set_destpos(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GuildProto.stReqChgManorFightTeamPos)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_destteamid();
  inline void clear_has_destteamid();
  inline void set_has_destpos();
  inline void clear_has_destpos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 destteamid_;
  ::google::protobuf::uint32 destpos_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_GuildProto_2eproto();
  friend void protobuf_AssignDesc_GuildProto_2eproto();
  friend void protobuf_ShutdownFile_GuildProto_2eproto();

  void InitAsDefaultInstance();
  static stReqChgManorFightTeamPos* default_instance_;
};
// -------------------------------------------------------------------

class stNotifyChgManorFightTeamPos : public ::google::protobuf::Message {
 public:
  stNotifyChgManorFightTeamPos();
  virtual ~stNotifyChgManorFightTeamPos();

  stNotifyChgManorFightTeamPos(const stNotifyChgManorFightTeamPos& from);

  inline stNotifyChgManorFightTeamPos& operator=(const stNotifyChgManorFightTeamPos& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stNotifyChgManorFightTeamPos& default_instance();

  void Swap(stNotifyChgManorFightTeamPos* other);

  // implements Message ----------------------------------------------

  stNotifyChgManorFightTeamPos* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stNotifyChgManorFightTeamPos& from);
  void MergeFrom(const stNotifyChgManorFightTeamPos& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stNotifyChgManorFightTeamPos_ProtoModID ProtoModID;
  static const ProtoModID ModID = stNotifyChgManorFightTeamPos_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stNotifyChgManorFightTeamPos_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stNotifyChgManorFightTeamPos_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stNotifyChgManorFightTeamPos_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stNotifyChgManorFightTeamPos_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stNotifyChgManorFightTeamPos_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stNotifyChgManorFightTeamPos_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stNotifyChgManorFightTeamPos_ProtoModID_Parse(name, value);
  }

  typedef stNotifyChgManorFightTeamPos_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stNotifyChgManorFightTeamPos_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stNotifyChgManorFightTeamPos_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stNotifyChgManorFightTeamPos_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stNotifyChgManorFightTeamPos_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stNotifyChgManorFightTeamPos_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stNotifyChgManorFightTeamPos_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stNotifyChgManorFightTeamPos_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stNotifyChgManorFightTeamPos_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 srcTeamID = 2;
  inline bool has_srcteamid() const;
  inline void clear_srcteamid();
  static const int kSrcTeamIDFieldNumber = 2;
  inline ::google::protobuf::uint32 srcteamid() const;
  inline void set_srcteamid(::google::protobuf::uint32 value);

  // optional uint32 srcPos = 3;
  inline bool has_srcpos() const;
  inline void clear_srcpos();
  static const int kSrcPosFieldNumber = 3;
  inline ::google::protobuf::uint32 srcpos() const;
  inline void set_srcpos(::google::protobuf::uint32 value);

  // optional uint32 dstTeamID = 4;
  inline bool has_dstteamid() const;
  inline void clear_dstteamid();
  static const int kDstTeamIDFieldNumber = 4;
  inline ::google::protobuf::uint32 dstteamid() const;
  inline void set_dstteamid(::google::protobuf::uint32 value);

  // optional uint32 dstPos = 5;
  inline bool has_dstpos() const;
  inline void clear_dstpos();
  static const int kDstPosFieldNumber = 5;
  inline ::google::protobuf::uint32 dstpos() const;
  inline void set_dstpos(::google::protobuf::uint32 value);

  // optional uint32 formation = 6;
  inline bool has_formation() const;
  inline void clear_formation();
  static const int kFormationFieldNumber = 6;
  inline ::google::protobuf::uint32 formation() const;
  inline void set_formation(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GuildProto.stNotifyChgManorFightTeamPos)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_srcteamid();
  inline void clear_has_srcteamid();
  inline void set_has_srcpos();
  inline void clear_has_srcpos();
  inline void set_has_dstteamid();
  inline void clear_has_dstteamid();
  inline void set_has_dstpos();
  inline void clear_has_dstpos();
  inline void set_has_formation();
  inline void clear_has_formation();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 srcteamid_;
  ::google::protobuf::uint32 srcpos_;
  ::google::protobuf::uint32 dstteamid_;
  ::google::protobuf::uint32 dstpos_;
  ::google::protobuf::uint32 formation_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_GuildProto_2eproto();
  friend void protobuf_AssignDesc_GuildProto_2eproto();
  friend void protobuf_ShutdownFile_GuildProto_2eproto();

  void InitAsDefaultInstance();
  static stNotifyChgManorFightTeamPos* default_instance_;
};
// -------------------------------------------------------------------

class stChgManorFightTeamPosResult : public ::google::protobuf::Message {
 public:
  stChgManorFightTeamPosResult();
  virtual ~stChgManorFightTeamPosResult();

  stChgManorFightTeamPosResult(const stChgManorFightTeamPosResult& from);

  inline stChgManorFightTeamPosResult& operator=(const stChgManorFightTeamPosResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stChgManorFightTeamPosResult& default_instance();

  void Swap(stChgManorFightTeamPosResult* other);

  // implements Message ----------------------------------------------

  stChgManorFightTeamPosResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stChgManorFightTeamPosResult& from);
  void MergeFrom(const stChgManorFightTeamPosResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stChgManorFightTeamPosResult_eResult eResult;
  static const eResult eSuccess = stChgManorFightTeamPosResult_eResult_eSuccess;
  static const eResult eHas_Not_Enter = stChgManorFightTeamPosResult_eResult_eHas_Not_Enter;
  static const eResult eDest_Pos_Was_Occupied = stChgManorFightTeamPosResult_eResult_eDest_Pos_Was_Occupied;
  static inline bool eResult_IsValid(int value) {
    return stChgManorFightTeamPosResult_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stChgManorFightTeamPosResult_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stChgManorFightTeamPosResult_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stChgManorFightTeamPosResult_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stChgManorFightTeamPosResult_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stChgManorFightTeamPosResult_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stChgManorFightTeamPosResult_eResult_Parse(name, value);
  }

  typedef stChgManorFightTeamPosResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stChgManorFightTeamPosResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stChgManorFightTeamPosResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stChgManorFightTeamPosResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stChgManorFightTeamPosResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stChgManorFightTeamPosResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stChgManorFightTeamPosResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stChgManorFightTeamPosResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stChgManorFightTeamPosResult_ProtoModID_Parse(name, value);
  }

  typedef stChgManorFightTeamPosResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stChgManorFightTeamPosResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stChgManorFightTeamPosResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stChgManorFightTeamPosResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stChgManorFightTeamPosResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stChgManorFightTeamPosResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stChgManorFightTeamPosResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stChgManorFightTeamPosResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stChgManorFightTeamPosResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .GuildProto.stChgManorFightTeamPosResult.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::GuildProto::stChgManorFightTeamPosResult_eResult result() const;
  inline void set_result(::GuildProto::stChgManorFightTeamPosResult_eResult value);

  // optional uint32 teamID = 2;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamIDFieldNumber = 2;
  inline ::google::protobuf::uint32 teamid() const;
  inline void set_teamid(::google::protobuf::uint32 value);

  // optional uint32 pos = 3;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 3;
  inline ::google::protobuf::uint32 pos() const;
  inline void set_pos(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GuildProto.stChgManorFightTeamPosResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_teamid();
  inline void clear_has_teamid();
  inline void set_has_pos();
  inline void clear_has_pos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;
  ::google::protobuf::uint32 teamid_;
  ::google::protobuf::uint32 pos_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_GuildProto_2eproto();
  friend void protobuf_AssignDesc_GuildProto_2eproto();
  friend void protobuf_ShutdownFile_GuildProto_2eproto();

  void InitAsDefaultInstance();
  static stChgManorFightTeamPosResult* default_instance_;
};
// -------------------------------------------------------------------

class stNotifyManorFightFail : public ::google::protobuf::Message {
 public:
  stNotifyManorFightFail();
  virtual ~stNotifyManorFightFail();

  stNotifyManorFightFail(const stNotifyManorFightFail& from);

  inline stNotifyManorFightFail& operator=(const stNotifyManorFightFail& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stNotifyManorFightFail& default_instance();

  void Swap(stNotifyManorFightFail* other);

  // implements Message ----------------------------------------------

  stNotifyManorFightFail* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stNotifyManorFightFail& from);
  void MergeFrom(const stNotifyManorFightFail& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stNotifyManorFightFail_ProtoModID ProtoModID;
  static const ProtoModID ModID = stNotifyManorFightFail_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stNotifyManorFightFail_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stNotifyManorFightFail_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stNotifyManorFightFail_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stNotifyManorFightFail_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stNotifyManorFightFail_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stNotifyManorFightFail_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stNotifyManorFightFail_ProtoModID_Parse(name, value);
  }

  typedef stNotifyManorFightFail_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stNotifyManorFightFail_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stNotifyManorFightFail_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stNotifyManorFightFail_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stNotifyManorFightFail_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stNotifyManorFightFail_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stNotifyManorFightFail_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stNotifyManorFightFail_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stNotifyManorFightFail_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 manorID = 1;
  inline bool has_manorid() const;
  inline void clear_manorid();
  static const int kManorIDFieldNumber = 1;
  inline ::google::protobuf::uint32 manorid() const;
  inline void set_manorid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GuildProto.stNotifyManorFightFail)
 private:
  inline void set_has_manorid();
  inline void clear_has_manorid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 manorid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_GuildProto_2eproto();
  friend void protobuf_AssignDesc_GuildProto_2eproto();
  friend void protobuf_ShutdownFile_GuildProto_2eproto();

  void InitAsDefaultInstance();
  static stNotifyManorFightFail* default_instance_;
};
// -------------------------------------------------------------------

class stManorFightHasNotMatch : public ::google::protobuf::Message {
 public:
  stManorFightHasNotMatch();
  virtual ~stManorFightHasNotMatch();

  stManorFightHasNotMatch(const stManorFightHasNotMatch& from);

  inline stManorFightHasNotMatch& operator=(const stManorFightHasNotMatch& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stManorFightHasNotMatch& default_instance();

  void Swap(stManorFightHasNotMatch* other);

  // implements Message ----------------------------------------------

  stManorFightHasNotMatch* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stManorFightHasNotMatch& from);
  void MergeFrom(const stManorFightHasNotMatch& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stManorFightHasNotMatch_ProtoModID ProtoModID;
  static const ProtoModID ModID = stManorFightHasNotMatch_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stManorFightHasNotMatch_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stManorFightHasNotMatch_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stManorFightHasNotMatch_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stManorFightHasNotMatch_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stManorFightHasNotMatch_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stManorFightHasNotMatch_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stManorFightHasNotMatch_ProtoModID_Parse(name, value);
  }

  typedef stManorFightHasNotMatch_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stManorFightHasNotMatch_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stManorFightHasNotMatch_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stManorFightHasNotMatch_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stManorFightHasNotMatch_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stManorFightHasNotMatch_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stManorFightHasNotMatch_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stManorFightHasNotMatch_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stManorFightHasNotMatch_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 manorID = 1;
  inline bool has_manorid() const;
  inline void clear_manorid();
  static const int kManorIDFieldNumber = 1;
  inline ::google::protobuf::uint32 manorid() const;
  inline void set_manorid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GuildProto.stManorFightHasNotMatch)
 private:
  inline void set_has_manorid();
  inline void clear_has_manorid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 manorid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_GuildProto_2eproto();
  friend void protobuf_AssignDesc_GuildProto_2eproto();
  friend void protobuf_ShutdownFile_GuildProto_2eproto();

  void InitAsDefaultInstance();
  static stManorFightHasNotMatch* default_instance_;
};
// -------------------------------------------------------------------

class stManorFightFormationResult : public ::google::protobuf::Message {
 public:
  stManorFightFormationResult();
  virtual ~stManorFightFormationResult();

  stManorFightFormationResult(const stManorFightFormationResult& from);

  inline stManorFightFormationResult& operator=(const stManorFightFormationResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stManorFightFormationResult& default_instance();

  void Swap(stManorFightFormationResult* other);

  // implements Message ----------------------------------------------

  stManorFightFormationResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stManorFightFormationResult& from);
  void MergeFrom(const stManorFightFormationResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stManorFightFormationResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stManorFightFormationResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stManorFightFormationResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stManorFightFormationResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stManorFightFormationResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stManorFightFormationResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stManorFightFormationResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stManorFightFormationResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stManorFightFormationResult_ProtoModID_Parse(name, value);
  }

  typedef stManorFightFormationResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stManorFightFormationResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stManorFightFormationResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stManorFightFormationResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stManorFightFormationResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stManorFightFormationResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stManorFightFormationResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stManorFightFormationResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stManorFightFormationResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 manorID = 1;
  inline bool has_manorid() const;
  inline void clear_manorid();
  static const int kManorIDFieldNumber = 1;
  inline ::google::protobuf::uint32 manorid() const;
  inline void set_manorid(::google::protobuf::uint32 value);

  // optional uint32 winGuildID = 2;
  inline bool has_winguildid() const;
  inline void clear_winguildid();
  static const int kWinGuildIDFieldNumber = 2;
  inline ::google::protobuf::uint32 winguildid() const;
  inline void set_winguildid(::google::protobuf::uint32 value);

  // optional uint32 formation = 3;
  inline bool has_formation() const;
  inline void clear_formation();
  static const int kFormationFieldNumber = 3;
  inline ::google::protobuf::uint32 formation() const;
  inline void set_formation(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GuildProto.stManorFightFormationResult)
 private:
  inline void set_has_manorid();
  inline void clear_has_manorid();
  inline void set_has_winguildid();
  inline void clear_has_winguildid();
  inline void set_has_formation();
  inline void clear_has_formation();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 manorid_;
  ::google::protobuf::uint32 winguildid_;
  ::google::protobuf::uint32 formation_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_GuildProto_2eproto();
  friend void protobuf_AssignDesc_GuildProto_2eproto();
  friend void protobuf_ShutdownFile_GuildProto_2eproto();

  void InitAsDefaultInstance();
  static stManorFightFormationResult* default_instance_;
};
// -------------------------------------------------------------------

class stManorFightFinish : public ::google::protobuf::Message {
 public:
  stManorFightFinish();
  virtual ~stManorFightFinish();

  stManorFightFinish(const stManorFightFinish& from);

  inline stManorFightFinish& operator=(const stManorFightFinish& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stManorFightFinish& default_instance();

  void Swap(stManorFightFinish* other);

  // implements Message ----------------------------------------------

  stManorFightFinish* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stManorFightFinish& from);
  void MergeFrom(const stManorFightFinish& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stManorFightFinish_ProtoModID ProtoModID;
  static const ProtoModID ModID = stManorFightFinish_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stManorFightFinish_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stManorFightFinish_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stManorFightFinish_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stManorFightFinish_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stManorFightFinish_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stManorFightFinish_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stManorFightFinish_ProtoModID_Parse(name, value);
  }

  typedef stManorFightFinish_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stManorFightFinish_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stManorFightFinish_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stManorFightFinish_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stManorFightFinish_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stManorFightFinish_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stManorFightFinish_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stManorFightFinish_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stManorFightFinish_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 manorID = 1;
  inline bool has_manorid() const;
  inline void clear_manorid();
  static const int kManorIDFieldNumber = 1;
  inline ::google::protobuf::uint32 manorid() const;
  inline void set_manorid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GuildProto.stManorFightFinish)
 private:
  inline void set_has_manorid();
  inline void clear_has_manorid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 manorid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_GuildProto_2eproto();
  friend void protobuf_AssignDesc_GuildProto_2eproto();
  friend void protobuf_ShutdownFile_GuildProto_2eproto();

  void InitAsDefaultInstance();
  static stManorFightFinish* default_instance_;
};
// -------------------------------------------------------------------

class stReqLevelUpBlackMarketLv : public ::google::protobuf::Message {
 public:
  stReqLevelUpBlackMarketLv();
  virtual ~stReqLevelUpBlackMarketLv();

  stReqLevelUpBlackMarketLv(const stReqLevelUpBlackMarketLv& from);

  inline stReqLevelUpBlackMarketLv& operator=(const stReqLevelUpBlackMarketLv& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqLevelUpBlackMarketLv& default_instance();

  void Swap(stReqLevelUpBlackMarketLv* other);

  // implements Message ----------------------------------------------

  stReqLevelUpBlackMarketLv* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqLevelUpBlackMarketLv& from);
  void MergeFrom(const stReqLevelUpBlackMarketLv& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqLevelUpBlackMarketLv_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqLevelUpBlackMarketLv_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqLevelUpBlackMarketLv_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqLevelUpBlackMarketLv_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqLevelUpBlackMarketLv_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqLevelUpBlackMarketLv_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqLevelUpBlackMarketLv_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqLevelUpBlackMarketLv_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqLevelUpBlackMarketLv_ProtoModID_Parse(name, value);
  }

  typedef stReqLevelUpBlackMarketLv_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqLevelUpBlackMarketLv_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqLevelUpBlackMarketLv_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqLevelUpBlackMarketLv_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqLevelUpBlackMarketLv_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqLevelUpBlackMarketLv_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqLevelUpBlackMarketLv_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqLevelUpBlackMarketLv_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqLevelUpBlackMarketLv_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 guildID = 1;
  inline bool has_guildid() const;
  inline void clear_guildid();
  static const int kGuildIDFieldNumber = 1;
  inline ::google::protobuf::uint32 guildid() const;
  inline void set_guildid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GuildProto.stReqLevelUpBlackMarketLv)
 private:
  inline void set_has_guildid();
  inline void clear_has_guildid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 guildid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_GuildProto_2eproto();
  friend void protobuf_AssignDesc_GuildProto_2eproto();
  friend void protobuf_ShutdownFile_GuildProto_2eproto();

  void InitAsDefaultInstance();
  static stReqLevelUpBlackMarketLv* default_instance_;
};
// -------------------------------------------------------------------

class stLevelUpBlackMarketLvResult : public ::google::protobuf::Message {
 public:
  stLevelUpBlackMarketLvResult();
  virtual ~stLevelUpBlackMarketLvResult();

  stLevelUpBlackMarketLvResult(const stLevelUpBlackMarketLvResult& from);

  inline stLevelUpBlackMarketLvResult& operator=(const stLevelUpBlackMarketLvResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stLevelUpBlackMarketLvResult& default_instance();

  void Swap(stLevelUpBlackMarketLvResult* other);

  // implements Message ----------------------------------------------

  stLevelUpBlackMarketLvResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stLevelUpBlackMarketLvResult& from);
  void MergeFrom(const stLevelUpBlackMarketLvResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stLevelUpBlackMarketLvResult_eResult eResult;
  static const eResult eSUCCESS = stLevelUpBlackMarketLvResult_eResult_eSUCCESS;
  static const eResult eHAS_NO_RIGHT = stLevelUpBlackMarketLvResult_eResult_eHAS_NO_RIGHT;
  static const eResult eCONTRIBUTE_NOT_ENOUGH = stLevelUpBlackMarketLvResult_eResult_eCONTRIBUTE_NOT_ENOUGH;
  static const eResult eINNER_ERROR = stLevelUpBlackMarketLvResult_eResult_eINNER_ERROR;
  static const eResult eHALL_LV_TOO_LOW = stLevelUpBlackMarketLvResult_eResult_eHALL_LV_TOO_LOW;
  static inline bool eResult_IsValid(int value) {
    return stLevelUpBlackMarketLvResult_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stLevelUpBlackMarketLvResult_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stLevelUpBlackMarketLvResult_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stLevelUpBlackMarketLvResult_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stLevelUpBlackMarketLvResult_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stLevelUpBlackMarketLvResult_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stLevelUpBlackMarketLvResult_eResult_Parse(name, value);
  }

  typedef stLevelUpBlackMarketLvResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stLevelUpBlackMarketLvResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stLevelUpBlackMarketLvResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stLevelUpBlackMarketLvResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stLevelUpBlackMarketLvResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stLevelUpBlackMarketLvResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stLevelUpBlackMarketLvResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stLevelUpBlackMarketLvResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stLevelUpBlackMarketLvResult_ProtoModID_Parse(name, value);
  }

  typedef stLevelUpBlackMarketLvResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stLevelUpBlackMarketLvResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stLevelUpBlackMarketLvResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stLevelUpBlackMarketLvResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stLevelUpBlackMarketLvResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stLevelUpBlackMarketLvResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stLevelUpBlackMarketLvResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stLevelUpBlackMarketLvResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stLevelUpBlackMarketLvResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .GuildProto.stLevelUpBlackMarketLvResult.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::GuildProto::stLevelUpBlackMarketLvResult_eResult result() const;
  inline void set_result(::GuildProto::stLevelUpBlackMarketLvResult_eResult value);

  // @@protoc_insertion_point(class_scope:GuildProto.stLevelUpBlackMarketLvResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_GuildProto_2eproto();
  friend void protobuf_AssignDesc_GuildProto_2eproto();
  friend void protobuf_ShutdownFile_GuildProto_2eproto();

  void InitAsDefaultInstance();
  static stLevelUpBlackMarketLvResult* default_instance_;
};
// -------------------------------------------------------------------

class stSynBlackMarketBuildingLv : public ::google::protobuf::Message {
 public:
  stSynBlackMarketBuildingLv();
  virtual ~stSynBlackMarketBuildingLv();

  stSynBlackMarketBuildingLv(const stSynBlackMarketBuildingLv& from);

  inline stSynBlackMarketBuildingLv& operator=(const stSynBlackMarketBuildingLv& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSynBlackMarketBuildingLv& default_instance();

  void Swap(stSynBlackMarketBuildingLv* other);

  // implements Message ----------------------------------------------

  stSynBlackMarketBuildingLv* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSynBlackMarketBuildingLv& from);
  void MergeFrom(const stSynBlackMarketBuildingLv& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stSynBlackMarketBuildingLv_ProtoModID ProtoModID;
  static const ProtoModID ModID = stSynBlackMarketBuildingLv_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stSynBlackMarketBuildingLv_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stSynBlackMarketBuildingLv_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stSynBlackMarketBuildingLv_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stSynBlackMarketBuildingLv_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stSynBlackMarketBuildingLv_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stSynBlackMarketBuildingLv_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stSynBlackMarketBuildingLv_ProtoModID_Parse(name, value);
  }

  typedef stSynBlackMarketBuildingLv_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stSynBlackMarketBuildingLv_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stSynBlackMarketBuildingLv_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stSynBlackMarketBuildingLv_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stSynBlackMarketBuildingLv_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stSynBlackMarketBuildingLv_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stSynBlackMarketBuildingLv_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stSynBlackMarketBuildingLv_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stSynBlackMarketBuildingLv_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 lv = 1;
  inline bool has_lv() const;
  inline void clear_lv();
  static const int kLvFieldNumber = 1;
  inline ::google::protobuf::uint32 lv() const;
  inline void set_lv(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GuildProto.stSynBlackMarketBuildingLv)
 private:
  inline void set_has_lv();
  inline void clear_has_lv();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 lv_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_GuildProto_2eproto();
  friend void protobuf_AssignDesc_GuildProto_2eproto();
  friend void protobuf_ShutdownFile_GuildProto_2eproto();

  void InitAsDefaultInstance();
  static stSynBlackMarketBuildingLv* default_instance_;
};
// ===================================================================


// ===================================================================

// stSynGuildMemInfo

// optional uint32 charID = 1;
inline bool stSynGuildMemInfo::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSynGuildMemInfo::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSynGuildMemInfo::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSynGuildMemInfo::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stSynGuildMemInfo::charid() const {
  return charid_;
}
inline void stSynGuildMemInfo::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional string name = 2;
inline bool stSynGuildMemInfo::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stSynGuildMemInfo::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stSynGuildMemInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stSynGuildMemInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& stSynGuildMemInfo::name() const {
  return *name_;
}
inline void stSynGuildMemInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stSynGuildMemInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stSynGuildMemInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stSynGuildMemInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* stSynGuildMemInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stSynGuildMemInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 level = 3;
inline bool stSynGuildMemInfo::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stSynGuildMemInfo::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stSynGuildMemInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stSynGuildMemInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 stSynGuildMemInfo::level() const {
  return level_;
}
inline void stSynGuildMemInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// optional uint32 job = 4;
inline bool stSynGuildMemInfo::has_job() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stSynGuildMemInfo::set_has_job() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stSynGuildMemInfo::clear_has_job() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stSynGuildMemInfo::clear_job() {
  job_ = 0u;
  clear_has_job();
}
inline ::google::protobuf::uint32 stSynGuildMemInfo::job() const {
  return job_;
}
inline void stSynGuildMemInfo::set_job(::google::protobuf::uint32 value) {
  set_has_job();
  job_ = value;
}

// optional uint32 sex = 5;
inline bool stSynGuildMemInfo::has_sex() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stSynGuildMemInfo::set_has_sex() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stSynGuildMemInfo::clear_has_sex() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stSynGuildMemInfo::clear_sex() {
  sex_ = 0u;
  clear_has_sex();
}
inline ::google::protobuf::uint32 stSynGuildMemInfo::sex() const {
  return sex_;
}
inline void stSynGuildMemInfo::set_sex(::google::protobuf::uint32 value) {
  set_has_sex();
  sex_ = value;
}

// optional uint32 title = 6;
inline bool stSynGuildMemInfo::has_title() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stSynGuildMemInfo::set_has_title() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stSynGuildMemInfo::clear_has_title() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stSynGuildMemInfo::clear_title() {
  title_ = 0u;
  clear_has_title();
}
inline ::google::protobuf::uint32 stSynGuildMemInfo::title() const {
  return title_;
}
inline void stSynGuildMemInfo::set_title(::google::protobuf::uint32 value) {
  set_has_title();
  title_ = value;
}

// optional uint32 todayContribute = 7;
inline bool stSynGuildMemInfo::has_todaycontribute() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void stSynGuildMemInfo::set_has_todaycontribute() {
  _has_bits_[0] |= 0x00000040u;
}
inline void stSynGuildMemInfo::clear_has_todaycontribute() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void stSynGuildMemInfo::clear_todaycontribute() {
  todaycontribute_ = 0u;
  clear_has_todaycontribute();
}
inline ::google::protobuf::uint32 stSynGuildMemInfo::todaycontribute() const {
  return todaycontribute_;
}
inline void stSynGuildMemInfo::set_todaycontribute(::google::protobuf::uint32 value) {
  set_has_todaycontribute();
  todaycontribute_ = value;
}

// optional uint32 contribute = 8;
inline bool stSynGuildMemInfo::has_contribute() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void stSynGuildMemInfo::set_has_contribute() {
  _has_bits_[0] |= 0x00000080u;
}
inline void stSynGuildMemInfo::clear_has_contribute() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void stSynGuildMemInfo::clear_contribute() {
  contribute_ = 0u;
  clear_has_contribute();
}
inline ::google::protobuf::uint32 stSynGuildMemInfo::contribute() const {
  return contribute_;
}
inline void stSynGuildMemInfo::set_contribute(::google::protobuf::uint32 value) {
  set_has_contribute();
  contribute_ = value;
}

// optional bool online = 9;
inline bool stSynGuildMemInfo::has_online() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void stSynGuildMemInfo::set_has_online() {
  _has_bits_[0] |= 0x00000100u;
}
inline void stSynGuildMemInfo::clear_has_online() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void stSynGuildMemInfo::clear_online() {
  online_ = false;
  clear_has_online();
}
inline bool stSynGuildMemInfo::online() const {
  return online_;
}
inline void stSynGuildMemInfo::set_online(bool value) {
  set_has_online();
  online_ = value;
}

// optional uint32 battlePower = 10;
inline bool stSynGuildMemInfo::has_battlepower() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void stSynGuildMemInfo::set_has_battlepower() {
  _has_bits_[0] |= 0x00000200u;
}
inline void stSynGuildMemInfo::clear_has_battlepower() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void stSynGuildMemInfo::clear_battlepower() {
  battlepower_ = 0u;
  clear_has_battlepower();
}
inline ::google::protobuf::uint32 stSynGuildMemInfo::battlepower() const {
  return battlepower_;
}
inline void stSynGuildMemInfo::set_battlepower(::google::protobuf::uint32 value) {
  set_has_battlepower();
  battlepower_ = value;
}

// optional uint32 challengeNum = 11;
inline bool stSynGuildMemInfo::has_challengenum() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void stSynGuildMemInfo::set_has_challengenum() {
  _has_bits_[0] |= 0x00000400u;
}
inline void stSynGuildMemInfo::clear_has_challengenum() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void stSynGuildMemInfo::clear_challengenum() {
  challengenum_ = 0u;
  clear_has_challengenum();
}
inline ::google::protobuf::uint32 stSynGuildMemInfo::challengenum() const {
  return challengenum_;
}
inline void stSynGuildMemInfo::set_challengenum(::google::protobuf::uint32 value) {
  set_has_challengenum();
  challengenum_ = value;
}

// optional uint32 assistNum = 12;
inline bool stSynGuildMemInfo::has_assistnum() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void stSynGuildMemInfo::set_has_assistnum() {
  _has_bits_[0] |= 0x00000800u;
}
inline void stSynGuildMemInfo::clear_has_assistnum() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void stSynGuildMemInfo::clear_assistnum() {
  assistnum_ = 0u;
  clear_has_assistnum();
}
inline ::google::protobuf::uint32 stSynGuildMemInfo::assistnum() const {
  return assistnum_;
}
inline void stSynGuildMemInfo::set_assistnum(::google::protobuf::uint32 value) {
  set_has_assistnum();
  assistnum_ = value;
}

// optional uint32 activityVal = 13;
inline bool stSynGuildMemInfo::has_activityval() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void stSynGuildMemInfo::set_has_activityval() {
  _has_bits_[0] |= 0x00001000u;
}
inline void stSynGuildMemInfo::clear_has_activityval() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void stSynGuildMemInfo::clear_activityval() {
  activityval_ = 0u;
  clear_has_activityval();
}
inline ::google::protobuf::uint32 stSynGuildMemInfo::activityval() const {
  return activityval_;
}
inline void stSynGuildMemInfo::set_activityval(::google::protobuf::uint32 value) {
  set_has_activityval();
  activityval_ = value;
}

// optional uint32 lastLoginTime = 14;
inline bool stSynGuildMemInfo::has_lastlogintime() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void stSynGuildMemInfo::set_has_lastlogintime() {
  _has_bits_[0] |= 0x00002000u;
}
inline void stSynGuildMemInfo::clear_has_lastlogintime() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void stSynGuildMemInfo::clear_lastlogintime() {
  lastlogintime_ = 0u;
  clear_has_lastlogintime();
}
inline ::google::protobuf::uint32 stSynGuildMemInfo::lastlogintime() const {
  return lastlogintime_;
}
inline void stSynGuildMemInfo::set_lastlogintime(::google::protobuf::uint32 value) {
  set_has_lastlogintime();
  lastlogintime_ = value;
}

// optional uint32 photoID = 15;
inline bool stSynGuildMemInfo::has_photoid() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void stSynGuildMemInfo::set_has_photoid() {
  _has_bits_[0] |= 0x00004000u;
}
inline void stSynGuildMemInfo::clear_has_photoid() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void stSynGuildMemInfo::clear_photoid() {
  photoid_ = 0u;
  clear_has_photoid();
}
inline ::google::protobuf::uint32 stSynGuildMemInfo::photoid() const {
  return photoid_;
}
inline void stSynGuildMemInfo::set_photoid(::google::protobuf::uint32 value) {
  set_has_photoid();
  photoid_ = value;
}

// -------------------------------------------------------------------

// stGuildListInfo

// optional uint32 rank = 1;
inline bool stGuildListInfo::has_rank() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stGuildListInfo::set_has_rank() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stGuildListInfo::clear_has_rank() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stGuildListInfo::clear_rank() {
  rank_ = 0u;
  clear_has_rank();
}
inline ::google::protobuf::uint32 stGuildListInfo::rank() const {
  return rank_;
}
inline void stGuildListInfo::set_rank(::google::protobuf::uint32 value) {
  set_has_rank();
  rank_ = value;
}

// optional uint32 guildID = 2;
inline bool stGuildListInfo::has_guildid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stGuildListInfo::set_has_guildid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stGuildListInfo::clear_has_guildid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stGuildListInfo::clear_guildid() {
  guildid_ = 0u;
  clear_has_guildid();
}
inline ::google::protobuf::uint32 stGuildListInfo::guildid() const {
  return guildid_;
}
inline void stGuildListInfo::set_guildid(::google::protobuf::uint32 value) {
  set_has_guildid();
  guildid_ = value;
}

// optional string guildName = 3;
inline bool stGuildListInfo::has_guildname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stGuildListInfo::set_has_guildname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stGuildListInfo::clear_has_guildname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stGuildListInfo::clear_guildname() {
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    guildname_->clear();
  }
  clear_has_guildname();
}
inline const ::std::string& stGuildListInfo::guildname() const {
  return *guildname_;
}
inline void stGuildListInfo::set_guildname(const ::std::string& value) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
}
inline void stGuildListInfo::set_guildname(const char* value) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
}
inline void stGuildListInfo::set_guildname(const char* value, size_t size) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stGuildListInfo::mutable_guildname() {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  return guildname_;
}
inline ::std::string* stGuildListInfo::release_guildname() {
  clear_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = guildname_;
    guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stGuildListInfo::set_allocated_guildname(::std::string* guildname) {
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    delete guildname_;
  }
  if (guildname) {
    set_has_guildname();
    guildname_ = guildname;
  } else {
    clear_has_guildname();
    guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 hallLv = 4;
inline bool stGuildListInfo::has_halllv() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stGuildListInfo::set_has_halllv() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stGuildListInfo::clear_has_halllv() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stGuildListInfo::clear_halllv() {
  halllv_ = 0u;
  clear_has_halllv();
}
inline ::google::protobuf::uint32 stGuildListInfo::halllv() const {
  return halllv_;
}
inline void stGuildListInfo::set_halllv(::google::protobuf::uint32 value) {
  set_has_halllv();
  halllv_ = value;
}

// optional string leaderName = 5;
inline bool stGuildListInfo::has_leadername() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stGuildListInfo::set_has_leadername() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stGuildListInfo::clear_has_leadername() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stGuildListInfo::clear_leadername() {
  if (leadername_ != &::google::protobuf::internal::kEmptyString) {
    leadername_->clear();
  }
  clear_has_leadername();
}
inline const ::std::string& stGuildListInfo::leadername() const {
  return *leadername_;
}
inline void stGuildListInfo::set_leadername(const ::std::string& value) {
  set_has_leadername();
  if (leadername_ == &::google::protobuf::internal::kEmptyString) {
    leadername_ = new ::std::string;
  }
  leadername_->assign(value);
}
inline void stGuildListInfo::set_leadername(const char* value) {
  set_has_leadername();
  if (leadername_ == &::google::protobuf::internal::kEmptyString) {
    leadername_ = new ::std::string;
  }
  leadername_->assign(value);
}
inline void stGuildListInfo::set_leadername(const char* value, size_t size) {
  set_has_leadername();
  if (leadername_ == &::google::protobuf::internal::kEmptyString) {
    leadername_ = new ::std::string;
  }
  leadername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stGuildListInfo::mutable_leadername() {
  set_has_leadername();
  if (leadername_ == &::google::protobuf::internal::kEmptyString) {
    leadername_ = new ::std::string;
  }
  return leadername_;
}
inline ::std::string* stGuildListInfo::release_leadername() {
  clear_has_leadername();
  if (leadername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = leadername_;
    leadername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stGuildListInfo::set_allocated_leadername(::std::string* leadername) {
  if (leadername_ != &::google::protobuf::internal::kEmptyString) {
    delete leadername_;
  }
  if (leadername) {
    set_has_leadername();
    leadername_ = leadername;
  } else {
    clear_has_leadername();
    leadername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 leaderLv = 6;
inline bool stGuildListInfo::has_leaderlv() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stGuildListInfo::set_has_leaderlv() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stGuildListInfo::clear_has_leaderlv() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stGuildListInfo::clear_leaderlv() {
  leaderlv_ = 0u;
  clear_has_leaderlv();
}
inline ::google::protobuf::uint32 stGuildListInfo::leaderlv() const {
  return leaderlv_;
}
inline void stGuildListInfo::set_leaderlv(::google::protobuf::uint32 value) {
  set_has_leaderlv();
  leaderlv_ = value;
}

// optional uint32 memNum = 7;
inline bool stGuildListInfo::has_memnum() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void stGuildListInfo::set_has_memnum() {
  _has_bits_[0] |= 0x00000040u;
}
inline void stGuildListInfo::clear_has_memnum() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void stGuildListInfo::clear_memnum() {
  memnum_ = 0u;
  clear_has_memnum();
}
inline ::google::protobuf::uint32 stGuildListInfo::memnum() const {
  return memnum_;
}
inline void stGuildListInfo::set_memnum(::google::protobuf::uint32 value) {
  set_has_memnum();
  memnum_ = value;
}

// optional uint32 maxNum = 8;
inline bool stGuildListInfo::has_maxnum() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void stGuildListInfo::set_has_maxnum() {
  _has_bits_[0] |= 0x00000080u;
}
inline void stGuildListInfo::clear_has_maxnum() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void stGuildListInfo::clear_maxnum() {
  maxnum_ = 0u;
  clear_has_maxnum();
}
inline ::google::protobuf::uint32 stGuildListInfo::maxnum() const {
  return maxnum_;
}
inline void stGuildListInfo::set_maxnum(::google::protobuf::uint32 value) {
  set_has_maxnum();
  maxnum_ = value;
}

// optional string sign = 9;
inline bool stGuildListInfo::has_sign() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void stGuildListInfo::set_has_sign() {
  _has_bits_[0] |= 0x00000100u;
}
inline void stGuildListInfo::clear_has_sign() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void stGuildListInfo::clear_sign() {
  if (sign_ != &::google::protobuf::internal::kEmptyString) {
    sign_->clear();
  }
  clear_has_sign();
}
inline const ::std::string& stGuildListInfo::sign() const {
  return *sign_;
}
inline void stGuildListInfo::set_sign(const ::std::string& value) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    sign_ = new ::std::string;
  }
  sign_->assign(value);
}
inline void stGuildListInfo::set_sign(const char* value) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    sign_ = new ::std::string;
  }
  sign_->assign(value);
}
inline void stGuildListInfo::set_sign(const char* value, size_t size) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    sign_ = new ::std::string;
  }
  sign_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stGuildListInfo::mutable_sign() {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    sign_ = new ::std::string;
  }
  return sign_;
}
inline ::std::string* stGuildListInfo::release_sign() {
  clear_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sign_;
    sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stGuildListInfo::set_allocated_sign(::std::string* sign) {
  if (sign_ != &::google::protobuf::internal::kEmptyString) {
    delete sign_;
  }
  if (sign) {
    set_has_sign();
    sign_ = sign;
  } else {
    clear_has_sign();
    sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool hasApplied = 10;
inline bool stGuildListInfo::has_hasapplied() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void stGuildListInfo::set_has_hasapplied() {
  _has_bits_[0] |= 0x00000200u;
}
inline void stGuildListInfo::clear_has_hasapplied() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void stGuildListInfo::clear_hasapplied() {
  hasapplied_ = false;
  clear_has_hasapplied();
}
inline bool stGuildListInfo::hasapplied() const {
  return hasapplied_;
}
inline void stGuildListInfo::set_hasapplied(bool value) {
  set_has_hasapplied();
  hasapplied_ = value;
}

// optional uint32 badge = 11;
inline bool stGuildListInfo::has_badge() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void stGuildListInfo::set_has_badge() {
  _has_bits_[0] |= 0x00000400u;
}
inline void stGuildListInfo::clear_has_badge() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void stGuildListInfo::clear_badge() {
  badge_ = 0u;
  clear_has_badge();
}
inline ::google::protobuf::uint32 stGuildListInfo::badge() const {
  return badge_;
}
inline void stGuildListInfo::set_badge(::google::protobuf::uint32 value) {
  set_has_badge();
  badge_ = value;
}

// -------------------------------------------------------------------

// stReqGuild

// optional uint32 rank = 1;
inline bool stReqGuild::has_rank() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqGuild::set_has_rank() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqGuild::clear_has_rank() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqGuild::clear_rank() {
  rank_ = 0u;
  clear_has_rank();
}
inline ::google::protobuf::uint32 stReqGuild::rank() const {
  return rank_;
}
inline void stReqGuild::set_rank(::google::protobuf::uint32 value) {
  set_has_rank();
  rank_ = value;
}

// -------------------------------------------------------------------

// stRetGuild

// optional uint32 maxNum = 1;
inline bool stRetGuild::has_maxnum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRetGuild::set_has_maxnum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRetGuild::clear_has_maxnum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRetGuild::clear_maxnum() {
  maxnum_ = 0u;
  clear_has_maxnum();
}
inline ::google::protobuf::uint32 stRetGuild::maxnum() const {
  return maxnum_;
}
inline void stRetGuild::set_maxnum(::google::protobuf::uint32 value) {
  set_has_maxnum();
  maxnum_ = value;
}

// repeated .GuildProto.stGuildListInfo data = 2;
inline int stRetGuild::data_size() const {
  return data_.size();
}
inline void stRetGuild::clear_data() {
  data_.Clear();
}
inline const ::GuildProto::stGuildListInfo& stRetGuild::data(int index) const {
  return data_.Get(index);
}
inline ::GuildProto::stGuildListInfo* stRetGuild::mutable_data(int index) {
  return data_.Mutable(index);
}
inline ::GuildProto::stGuildListInfo* stRetGuild::add_data() {
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GuildProto::stGuildListInfo >&
stRetGuild::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::GuildProto::stGuildListInfo >*
stRetGuild::mutable_data() {
  return &data_;
}

// -------------------------------------------------------------------

// stReqGuildDetailInfo

// optional uint32 guildID = 1;
inline bool stReqGuildDetailInfo::has_guildid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqGuildDetailInfo::set_has_guildid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqGuildDetailInfo::clear_has_guildid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqGuildDetailInfo::clear_guildid() {
  guildid_ = 0u;
  clear_has_guildid();
}
inline ::google::protobuf::uint32 stReqGuildDetailInfo::guildid() const {
  return guildid_;
}
inline void stReqGuildDetailInfo::set_guildid(::google::protobuf::uint32 value) {
  set_has_guildid();
  guildid_ = value;
}

// -------------------------------------------------------------------

// stRetGuildDetailInfo

// optional uint32 guildID = 1;
inline bool stRetGuildDetailInfo::has_guildid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRetGuildDetailInfo::set_has_guildid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRetGuildDetailInfo::clear_has_guildid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRetGuildDetailInfo::clear_guildid() {
  guildid_ = 0u;
  clear_has_guildid();
}
inline ::google::protobuf::uint32 stRetGuildDetailInfo::guildid() const {
  return guildid_;
}
inline void stRetGuildDetailInfo::set_guildid(::google::protobuf::uint32 value) {
  set_has_guildid();
  guildid_ = value;
}

// optional string guildName = 2;
inline bool stRetGuildDetailInfo::has_guildname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stRetGuildDetailInfo::set_has_guildname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stRetGuildDetailInfo::clear_has_guildname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stRetGuildDetailInfo::clear_guildname() {
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    guildname_->clear();
  }
  clear_has_guildname();
}
inline const ::std::string& stRetGuildDetailInfo::guildname() const {
  return *guildname_;
}
inline void stRetGuildDetailInfo::set_guildname(const ::std::string& value) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
}
inline void stRetGuildDetailInfo::set_guildname(const char* value) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
}
inline void stRetGuildDetailInfo::set_guildname(const char* value, size_t size) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stRetGuildDetailInfo::mutable_guildname() {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  return guildname_;
}
inline ::std::string* stRetGuildDetailInfo::release_guildname() {
  clear_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = guildname_;
    guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stRetGuildDetailInfo::set_allocated_guildname(::std::string* guildname) {
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    delete guildname_;
  }
  if (guildname) {
    set_has_guildname();
    guildname_ = guildname;
  } else {
    clear_has_guildname();
    guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 hallLv = 3;
inline bool stRetGuildDetailInfo::has_halllv() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stRetGuildDetailInfo::set_has_halllv() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stRetGuildDetailInfo::clear_has_halllv() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stRetGuildDetailInfo::clear_halllv() {
  halllv_ = 0u;
  clear_has_halllv();
}
inline ::google::protobuf::uint32 stRetGuildDetailInfo::halllv() const {
  return halllv_;
}
inline void stRetGuildDetailInfo::set_halllv(::google::protobuf::uint32 value) {
  set_has_halllv();
  halllv_ = value;
}

// optional uint32 exp = 4;
inline bool stRetGuildDetailInfo::has_exp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stRetGuildDetailInfo::set_has_exp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stRetGuildDetailInfo::clear_has_exp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stRetGuildDetailInfo::clear_exp() {
  exp_ = 0u;
  clear_has_exp();
}
inline ::google::protobuf::uint32 stRetGuildDetailInfo::exp() const {
  return exp_;
}
inline void stRetGuildDetailInfo::set_exp(::google::protobuf::uint32 value) {
  set_has_exp();
  exp_ = value;
}

// optional uint32 memNum = 5;
inline bool stRetGuildDetailInfo::has_memnum() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stRetGuildDetailInfo::set_has_memnum() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stRetGuildDetailInfo::clear_has_memnum() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stRetGuildDetailInfo::clear_memnum() {
  memnum_ = 0u;
  clear_has_memnum();
}
inline ::google::protobuf::uint32 stRetGuildDetailInfo::memnum() const {
  return memnum_;
}
inline void stRetGuildDetailInfo::set_memnum(::google::protobuf::uint32 value) {
  set_has_memnum();
  memnum_ = value;
}

// optional uint32 maxNum = 7;
inline bool stRetGuildDetailInfo::has_maxnum() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stRetGuildDetailInfo::set_has_maxnum() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stRetGuildDetailInfo::clear_has_maxnum() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stRetGuildDetailInfo::clear_maxnum() {
  maxnum_ = 0u;
  clear_has_maxnum();
}
inline ::google::protobuf::uint32 stRetGuildDetailInfo::maxnum() const {
  return maxnum_;
}
inline void stRetGuildDetailInfo::set_maxnum(::google::protobuf::uint32 value) {
  set_has_maxnum();
  maxnum_ = value;
}

// optional string sign = 8;
inline bool stRetGuildDetailInfo::has_sign() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void stRetGuildDetailInfo::set_has_sign() {
  _has_bits_[0] |= 0x00000040u;
}
inline void stRetGuildDetailInfo::clear_has_sign() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void stRetGuildDetailInfo::clear_sign() {
  if (sign_ != &::google::protobuf::internal::kEmptyString) {
    sign_->clear();
  }
  clear_has_sign();
}
inline const ::std::string& stRetGuildDetailInfo::sign() const {
  return *sign_;
}
inline void stRetGuildDetailInfo::set_sign(const ::std::string& value) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    sign_ = new ::std::string;
  }
  sign_->assign(value);
}
inline void stRetGuildDetailInfo::set_sign(const char* value) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    sign_ = new ::std::string;
  }
  sign_->assign(value);
}
inline void stRetGuildDetailInfo::set_sign(const char* value, size_t size) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    sign_ = new ::std::string;
  }
  sign_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stRetGuildDetailInfo::mutable_sign() {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    sign_ = new ::std::string;
  }
  return sign_;
}
inline ::std::string* stRetGuildDetailInfo::release_sign() {
  clear_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sign_;
    sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stRetGuildDetailInfo::set_allocated_sign(::std::string* sign) {
  if (sign_ != &::google::protobuf::internal::kEmptyString) {
    delete sign_;
  }
  if (sign) {
    set_has_sign();
    sign_ = sign;
  } else {
    clear_has_sign();
    sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .GuildProto.stSynGuildMemInfo memInfo = 9;
inline int stRetGuildDetailInfo::meminfo_size() const {
  return meminfo_.size();
}
inline void stRetGuildDetailInfo::clear_meminfo() {
  meminfo_.Clear();
}
inline const ::GuildProto::stSynGuildMemInfo& stRetGuildDetailInfo::meminfo(int index) const {
  return meminfo_.Get(index);
}
inline ::GuildProto::stSynGuildMemInfo* stRetGuildDetailInfo::mutable_meminfo(int index) {
  return meminfo_.Mutable(index);
}
inline ::GuildProto::stSynGuildMemInfo* stRetGuildDetailInfo::add_meminfo() {
  return meminfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GuildProto::stSynGuildMemInfo >&
stRetGuildDetailInfo::meminfo() const {
  return meminfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::GuildProto::stSynGuildMemInfo >*
stRetGuildDetailInfo::mutable_meminfo() {
  return &meminfo_;
}

// optional uint32 badge = 10;
inline bool stRetGuildDetailInfo::has_badge() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void stRetGuildDetailInfo::set_has_badge() {
  _has_bits_[0] |= 0x00000100u;
}
inline void stRetGuildDetailInfo::clear_has_badge() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void stRetGuildDetailInfo::clear_badge() {
  badge_ = 0u;
  clear_has_badge();
}
inline ::google::protobuf::uint32 stRetGuildDetailInfo::badge() const {
  return badge_;
}
inline void stRetGuildDetailInfo::set_badge(::google::protobuf::uint32 value) {
  set_has_badge();
  badge_ = value;
}

// -------------------------------------------------------------------

// stReqCreateGuild

// optional string guildName = 1;
inline bool stReqCreateGuild::has_guildname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqCreateGuild::set_has_guildname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqCreateGuild::clear_has_guildname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqCreateGuild::clear_guildname() {
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    guildname_->clear();
  }
  clear_has_guildname();
}
inline const ::std::string& stReqCreateGuild::guildname() const {
  return *guildname_;
}
inline void stReqCreateGuild::set_guildname(const ::std::string& value) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
}
inline void stReqCreateGuild::set_guildname(const char* value) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
}
inline void stReqCreateGuild::set_guildname(const char* value, size_t size) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stReqCreateGuild::mutable_guildname() {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  return guildname_;
}
inline ::std::string* stReqCreateGuild::release_guildname() {
  clear_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = guildname_;
    guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stReqCreateGuild::set_allocated_guildname(::std::string* guildname) {
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    delete guildname_;
  }
  if (guildname) {
    set_has_guildname();
    guildname_ = guildname;
  } else {
    clear_has_guildname();
    guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .GuildProto.stReqCreateGuild.eUseResType eType = 2;
inline bool stReqCreateGuild::has_etype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stReqCreateGuild::set_has_etype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stReqCreateGuild::clear_has_etype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stReqCreateGuild::clear_etype() {
  etype_ = 1;
  clear_has_etype();
}
inline ::GuildProto::stReqCreateGuild_eUseResType stReqCreateGuild::etype() const {
  return static_cast< ::GuildProto::stReqCreateGuild_eUseResType >(etype_);
}
inline void stReqCreateGuild::set_etype(::GuildProto::stReqCreateGuild_eUseResType value) {
  assert(::GuildProto::stReqCreateGuild_eUseResType_IsValid(value));
  set_has_etype();
  etype_ = value;
}

// optional uint32 badge = 3;
inline bool stReqCreateGuild::has_badge() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stReqCreateGuild::set_has_badge() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stReqCreateGuild::clear_has_badge() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stReqCreateGuild::clear_badge() {
  badge_ = 0u;
  clear_has_badge();
}
inline ::google::protobuf::uint32 stReqCreateGuild::badge() const {
  return badge_;
}
inline void stReqCreateGuild::set_badge(::google::protobuf::uint32 value) {
  set_has_badge();
  badge_ = value;
}

// -------------------------------------------------------------------

// stCreateGuildError

// optional .GuildProto.eCreateGuildError result = 1;
inline bool stCreateGuildError::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stCreateGuildError::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stCreateGuildError::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stCreateGuildError::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::GuildProto::eCreateGuildError stCreateGuildError::result() const {
  return static_cast< ::GuildProto::eCreateGuildError >(result_);
}
inline void stCreateGuildError::set_result(::GuildProto::eCreateGuildError value) {
  assert(::GuildProto::eCreateGuildError_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stSendMyGuild

// optional uint32 guildID = 1;
inline bool stSendMyGuild::has_guildid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSendMyGuild::set_has_guildid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSendMyGuild::clear_has_guildid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSendMyGuild::clear_guildid() {
  guildid_ = 0u;
  clear_has_guildid();
}
inline ::google::protobuf::uint32 stSendMyGuild::guildid() const {
  return guildid_;
}
inline void stSendMyGuild::set_guildid(::google::protobuf::uint32 value) {
  set_has_guildid();
  guildid_ = value;
}

// optional string guildName = 2;
inline bool stSendMyGuild::has_guildname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stSendMyGuild::set_has_guildname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stSendMyGuild::clear_has_guildname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stSendMyGuild::clear_guildname() {
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    guildname_->clear();
  }
  clear_has_guildname();
}
inline const ::std::string& stSendMyGuild::guildname() const {
  return *guildname_;
}
inline void stSendMyGuild::set_guildname(const ::std::string& value) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
}
inline void stSendMyGuild::set_guildname(const char* value) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
}
inline void stSendMyGuild::set_guildname(const char* value, size_t size) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stSendMyGuild::mutable_guildname() {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  return guildname_;
}
inline ::std::string* stSendMyGuild::release_guildname() {
  clear_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = guildname_;
    guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stSendMyGuild::set_allocated_guildname(::std::string* guildname) {
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    delete guildname_;
  }
  if (guildname) {
    set_has_guildname();
    guildname_ = guildname;
  } else {
    clear_has_guildname();
    guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 exp = 3;
inline bool stSendMyGuild::has_exp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stSendMyGuild::set_has_exp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stSendMyGuild::clear_has_exp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stSendMyGuild::clear_exp() {
  exp_ = 0u;
  clear_has_exp();
}
inline ::google::protobuf::uint32 stSendMyGuild::exp() const {
  return exp_;
}
inline void stSendMyGuild::set_exp(::google::protobuf::uint32 value) {
  set_has_exp();
  exp_ = value;
}

// optional uint32 leaderID = 4;
inline bool stSendMyGuild::has_leaderid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stSendMyGuild::set_has_leaderid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stSendMyGuild::clear_has_leaderid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stSendMyGuild::clear_leaderid() {
  leaderid_ = 0u;
  clear_has_leaderid();
}
inline ::google::protobuf::uint32 stSendMyGuild::leaderid() const {
  return leaderid_;
}
inline void stSendMyGuild::set_leaderid(::google::protobuf::uint32 value) {
  set_has_leaderid();
  leaderid_ = value;
}

// optional uint32 contribute = 5;
inline bool stSendMyGuild::has_contribute() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stSendMyGuild::set_has_contribute() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stSendMyGuild::clear_has_contribute() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stSendMyGuild::clear_contribute() {
  contribute_ = 0u;
  clear_has_contribute();
}
inline ::google::protobuf::uint32 stSendMyGuild::contribute() const {
  return contribute_;
}
inline void stSendMyGuild::set_contribute(::google::protobuf::uint32 value) {
  set_has_contribute();
  contribute_ = value;
}

// optional uint32 fireRemainTime = 6;
inline bool stSendMyGuild::has_fireremaintime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stSendMyGuild::set_has_fireremaintime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stSendMyGuild::clear_has_fireremaintime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stSendMyGuild::clear_fireremaintime() {
  fireremaintime_ = 0u;
  clear_has_fireremaintime();
}
inline ::google::protobuf::uint32 stSendMyGuild::fireremaintime() const {
  return fireremaintime_;
}
inline void stSendMyGuild::set_fireremaintime(::google::protobuf::uint32 value) {
  set_has_fireremaintime();
  fireremaintime_ = value;
}

// optional string sign = 7;
inline bool stSendMyGuild::has_sign() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void stSendMyGuild::set_has_sign() {
  _has_bits_[0] |= 0x00000040u;
}
inline void stSendMyGuild::clear_has_sign() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void stSendMyGuild::clear_sign() {
  if (sign_ != &::google::protobuf::internal::kEmptyString) {
    sign_->clear();
  }
  clear_has_sign();
}
inline const ::std::string& stSendMyGuild::sign() const {
  return *sign_;
}
inline void stSendMyGuild::set_sign(const ::std::string& value) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    sign_ = new ::std::string;
  }
  sign_->assign(value);
}
inline void stSendMyGuild::set_sign(const char* value) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    sign_ = new ::std::string;
  }
  sign_->assign(value);
}
inline void stSendMyGuild::set_sign(const char* value, size_t size) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    sign_ = new ::std::string;
  }
  sign_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stSendMyGuild::mutable_sign() {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    sign_ = new ::std::string;
  }
  return sign_;
}
inline ::std::string* stSendMyGuild::release_sign() {
  clear_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sign_;
    sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stSendMyGuild::set_allocated_sign(::std::string* sign) {
  if (sign_ != &::google::protobuf::internal::kEmptyString) {
    delete sign_;
  }
  if (sign) {
    set_has_sign();
    sign_ = sign;
  } else {
    clear_has_sign();
    sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 maxNum = 8;
inline bool stSendMyGuild::has_maxnum() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void stSendMyGuild::set_has_maxnum() {
  _has_bits_[0] |= 0x00000080u;
}
inline void stSendMyGuild::clear_has_maxnum() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void stSendMyGuild::clear_maxnum() {
  maxnum_ = 0u;
  clear_has_maxnum();
}
inline ::google::protobuf::uint32 stSendMyGuild::maxnum() const {
  return maxnum_;
}
inline void stSendMyGuild::set_maxnum(::google::protobuf::uint32 value) {
  set_has_maxnum();
  maxnum_ = value;
}

// optional string notice = 9;
inline bool stSendMyGuild::has_notice() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void stSendMyGuild::set_has_notice() {
  _has_bits_[0] |= 0x00000100u;
}
inline void stSendMyGuild::clear_has_notice() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void stSendMyGuild::clear_notice() {
  if (notice_ != &::google::protobuf::internal::kEmptyString) {
    notice_->clear();
  }
  clear_has_notice();
}
inline const ::std::string& stSendMyGuild::notice() const {
  return *notice_;
}
inline void stSendMyGuild::set_notice(const ::std::string& value) {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  notice_->assign(value);
}
inline void stSendMyGuild::set_notice(const char* value) {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  notice_->assign(value);
}
inline void stSendMyGuild::set_notice(const char* value, size_t size) {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  notice_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stSendMyGuild::mutable_notice() {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  return notice_;
}
inline ::std::string* stSendMyGuild::release_notice() {
  clear_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = notice_;
    notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stSendMyGuild::set_allocated_notice(::std::string* notice) {
  if (notice_ != &::google::protobuf::internal::kEmptyString) {
    delete notice_;
  }
  if (notice) {
    set_has_notice();
    notice_ = notice;
  } else {
    clear_has_notice();
    notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 hallLv = 10;
inline bool stSendMyGuild::has_halllv() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void stSendMyGuild::set_has_halllv() {
  _has_bits_[0] |= 0x00000200u;
}
inline void stSendMyGuild::clear_has_halllv() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void stSendMyGuild::clear_halllv() {
  halllv_ = 0u;
  clear_has_halllv();
}
inline ::google::protobuf::uint32 stSendMyGuild::halllv() const {
  return halllv_;
}
inline void stSendMyGuild::set_halllv(::google::protobuf::uint32 value) {
  set_has_halllv();
  halllv_ = value;
}

// optional uint32 shopLv = 11;
inline bool stSendMyGuild::has_shoplv() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void stSendMyGuild::set_has_shoplv() {
  _has_bits_[0] |= 0x00000400u;
}
inline void stSendMyGuild::clear_has_shoplv() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void stSendMyGuild::clear_shoplv() {
  shoplv_ = 0u;
  clear_has_shoplv();
}
inline ::google::protobuf::uint32 stSendMyGuild::shoplv() const {
  return shoplv_;
}
inline void stSendMyGuild::set_shoplv(::google::protobuf::uint32 value) {
  set_has_shoplv();
  shoplv_ = value;
}

// optional uint32 prayBuildingLv = 12;
inline bool stSendMyGuild::has_praybuildinglv() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void stSendMyGuild::set_has_praybuildinglv() {
  _has_bits_[0] |= 0x00000800u;
}
inline void stSendMyGuild::clear_has_praybuildinglv() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void stSendMyGuild::clear_praybuildinglv() {
  praybuildinglv_ = 0u;
  clear_has_praybuildinglv();
}
inline ::google::protobuf::uint32 stSendMyGuild::praybuildinglv() const {
  return praybuildinglv_;
}
inline void stSendMyGuild::set_praybuildinglv(::google::protobuf::uint32 value) {
  set_has_praybuildinglv();
  praybuildinglv_ = value;
}

// repeated .GuildProto.stSynGuildMemInfo data = 13;
inline int stSendMyGuild::data_size() const {
  return data_.size();
}
inline void stSendMyGuild::clear_data() {
  data_.Clear();
}
inline const ::GuildProto::stSynGuildMemInfo& stSendMyGuild::data(int index) const {
  return data_.Get(index);
}
inline ::GuildProto::stSynGuildMemInfo* stSendMyGuild::mutable_data(int index) {
  return data_.Mutable(index);
}
inline ::GuildProto::stSynGuildMemInfo* stSendMyGuild::add_data() {
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GuildProto::stSynGuildMemInfo >&
stSendMyGuild::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::GuildProto::stSynGuildMemInfo >*
stSendMyGuild::mutable_data() {
  return &data_;
}

// optional uint32 badge = 14;
inline bool stSendMyGuild::has_badge() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void stSendMyGuild::set_has_badge() {
  _has_bits_[0] |= 0x00002000u;
}
inline void stSendMyGuild::clear_has_badge() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void stSendMyGuild::clear_badge() {
  badge_ = 0u;
  clear_has_badge();
}
inline ::google::protobuf::uint32 stSendMyGuild::badge() const {
  return badge_;
}
inline void stSendMyGuild::set_badge(::google::protobuf::uint32 value) {
  set_has_badge();
  badge_ = value;
}

// optional uint32 rank = 15;
inline bool stSendMyGuild::has_rank() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void stSendMyGuild::set_has_rank() {
  _has_bits_[0] |= 0x00004000u;
}
inline void stSendMyGuild::clear_has_rank() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void stSendMyGuild::clear_rank() {
  rank_ = 0u;
  clear_has_rank();
}
inline ::google::protobuf::uint32 stSendMyGuild::rank() const {
  return rank_;
}
inline void stSendMyGuild::set_rank(::google::protobuf::uint32 value) {
  set_has_rank();
  rank_ = value;
}

// optional uint32 activityDegree = 16;
inline bool stSendMyGuild::has_activitydegree() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void stSendMyGuild::set_has_activitydegree() {
  _has_bits_[0] |= 0x00008000u;
}
inline void stSendMyGuild::clear_has_activitydegree() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void stSendMyGuild::clear_activitydegree() {
  activitydegree_ = 0u;
  clear_has_activitydegree();
}
inline ::google::protobuf::uint32 stSendMyGuild::activitydegree() const {
  return activitydegree_;
}
inline void stSendMyGuild::set_activitydegree(::google::protobuf::uint32 value) {
  set_has_activitydegree();
  activitydegree_ = value;
}

// optional uint32 blackMarket = 17;
inline bool stSendMyGuild::has_blackmarket() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void stSendMyGuild::set_has_blackmarket() {
  _has_bits_[0] |= 0x00010000u;
}
inline void stSendMyGuild::clear_has_blackmarket() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void stSendMyGuild::clear_blackmarket() {
  blackmarket_ = 0u;
  clear_has_blackmarket();
}
inline ::google::protobuf::uint32 stSendMyGuild::blackmarket() const {
  return blackmarket_;
}
inline void stSendMyGuild::set_blackmarket(::google::protobuf::uint32 value) {
  set_has_blackmarket();
  blackmarket_ = value;
}

// -------------------------------------------------------------------

// stReqJoinInGuild

// optional uint32 guildID = 1;
inline bool stReqJoinInGuild::has_guildid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqJoinInGuild::set_has_guildid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqJoinInGuild::clear_has_guildid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqJoinInGuild::clear_guildid() {
  guildid_ = 0u;
  clear_has_guildid();
}
inline ::google::protobuf::uint32 stReqJoinInGuild::guildid() const {
  return guildid_;
}
inline void stReqJoinInGuild::set_guildid(::google::protobuf::uint32 value) {
  set_has_guildid();
  guildid_ = value;
}

// -------------------------------------------------------------------

// stJoinInGuildResult

// optional .GuildProto.JoinGuildResult result = 1;
inline bool stJoinInGuildResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stJoinInGuildResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stJoinInGuildResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stJoinInGuildResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::GuildProto::JoinGuildResult stJoinInGuildResult::result() const {
  return static_cast< ::GuildProto::JoinGuildResult >(result_);
}
inline void stJoinInGuildResult::set_result(::GuildProto::JoinGuildResult value) {
  assert(::GuildProto::JoinGuildResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional uint32 guildID = 2;
inline bool stJoinInGuildResult::has_guildid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stJoinInGuildResult::set_has_guildid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stJoinInGuildResult::clear_has_guildid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stJoinInGuildResult::clear_guildid() {
  guildid_ = 0u;
  clear_has_guildid();
}
inline ::google::protobuf::uint32 stJoinInGuildResult::guildid() const {
  return guildid_;
}
inline void stJoinInGuildResult::set_guildid(::google::protobuf::uint32 value) {
  set_has_guildid();
  guildid_ = value;
}

// -------------------------------------------------------------------

// stReqApplyJoinInList

// optional uint32 charID = 1;
inline bool stReqApplyJoinInList::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqApplyJoinInList::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqApplyJoinInList::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqApplyJoinInList::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqApplyJoinInList::charid() const {
  return charid_;
}
inline void stReqApplyJoinInList::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stSynApplierInfo

// optional uint32 charID = 1;
inline bool stSynApplierInfo::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSynApplierInfo::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSynApplierInfo::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSynApplierInfo::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stSynApplierInfo::charid() const {
  return charid_;
}
inline void stSynApplierInfo::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional string name = 2;
inline bool stSynApplierInfo::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stSynApplierInfo::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stSynApplierInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stSynApplierInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& stSynApplierInfo::name() const {
  return *name_;
}
inline void stSynApplierInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stSynApplierInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stSynApplierInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stSynApplierInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* stSynApplierInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stSynApplierInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 level = 3;
inline bool stSynApplierInfo::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stSynApplierInfo::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stSynApplierInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stSynApplierInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 stSynApplierInfo::level() const {
  return level_;
}
inline void stSynApplierInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// optional uint32 job = 4;
inline bool stSynApplierInfo::has_job() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stSynApplierInfo::set_has_job() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stSynApplierInfo::clear_has_job() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stSynApplierInfo::clear_job() {
  job_ = 0u;
  clear_has_job();
}
inline ::google::protobuf::uint32 stSynApplierInfo::job() const {
  return job_;
}
inline void stSynApplierInfo::set_job(::google::protobuf::uint32 value) {
  set_has_job();
  job_ = value;
}

// optional uint32 sex = 5;
inline bool stSynApplierInfo::has_sex() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stSynApplierInfo::set_has_sex() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stSynApplierInfo::clear_has_sex() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stSynApplierInfo::clear_sex() {
  sex_ = 0u;
  clear_has_sex();
}
inline ::google::protobuf::uint32 stSynApplierInfo::sex() const {
  return sex_;
}
inline void stSynApplierInfo::set_sex(::google::protobuf::uint32 value) {
  set_has_sex();
  sex_ = value;
}

// optional uint32 passTime = 6;
inline bool stSynApplierInfo::has_passtime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stSynApplierInfo::set_has_passtime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stSynApplierInfo::clear_has_passtime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stSynApplierInfo::clear_passtime() {
  passtime_ = 0u;
  clear_has_passtime();
}
inline ::google::protobuf::uint32 stSynApplierInfo::passtime() const {
  return passtime_;
}
inline void stSynApplierInfo::set_passtime(::google::protobuf::uint32 value) {
  set_has_passtime();
  passtime_ = value;
}

// optional uint32 battlePower = 7;
inline bool stSynApplierInfo::has_battlepower() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void stSynApplierInfo::set_has_battlepower() {
  _has_bits_[0] |= 0x00000040u;
}
inline void stSynApplierInfo::clear_has_battlepower() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void stSynApplierInfo::clear_battlepower() {
  battlepower_ = 0u;
  clear_has_battlepower();
}
inline ::google::protobuf::uint32 stSynApplierInfo::battlepower() const {
  return battlepower_;
}
inline void stSynApplierInfo::set_battlepower(::google::protobuf::uint32 value) {
  set_has_battlepower();
  battlepower_ = value;
}

// optional uint32 photoID = 8;
inline bool stSynApplierInfo::has_photoid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void stSynApplierInfo::set_has_photoid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void stSynApplierInfo::clear_has_photoid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void stSynApplierInfo::clear_photoid() {
  photoid_ = 0u;
  clear_has_photoid();
}
inline ::google::protobuf::uint32 stSynApplierInfo::photoid() const {
  return photoid_;
}
inline void stSynApplierInfo::set_photoid(::google::protobuf::uint32 value) {
  set_has_photoid();
  photoid_ = value;
}

// -------------------------------------------------------------------

// stRetApplyJoinInList

// repeated .GuildProto.stSynApplierInfo data = 1;
inline int stRetApplyJoinInList::data_size() const {
  return data_.size();
}
inline void stRetApplyJoinInList::clear_data() {
  data_.Clear();
}
inline const ::GuildProto::stSynApplierInfo& stRetApplyJoinInList::data(int index) const {
  return data_.Get(index);
}
inline ::GuildProto::stSynApplierInfo* stRetApplyJoinInList::mutable_data(int index) {
  return data_.Mutable(index);
}
inline ::GuildProto::stSynApplierInfo* stRetApplyJoinInList::add_data() {
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GuildProto::stSynApplierInfo >&
stRetApplyJoinInList::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::GuildProto::stSynApplierInfo >*
stRetApplyJoinInList::mutable_data() {
  return &data_;
}

// -------------------------------------------------------------------

// stReplyApplier

// optional uint32 charID = 1;
inline bool stReplyApplier::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReplyApplier::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReplyApplier::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReplyApplier::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReplyApplier::charid() const {
  return charid_;
}
inline void stReplyApplier::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional bool agree = 2;
inline bool stReplyApplier::has_agree() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stReplyApplier::set_has_agree() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stReplyApplier::clear_has_agree() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stReplyApplier::clear_agree() {
  agree_ = false;
  clear_has_agree();
}
inline bool stReplyApplier::agree() const {
  return agree_;
}
inline void stReplyApplier::set_agree(bool value) {
  set_has_agree();
  agree_ = value;
}

// -------------------------------------------------------------------

// stReplyApplerError

// optional .GuildProto.ReplyError result = 1;
inline bool stReplyApplerError::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReplyApplerError::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReplyApplerError::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReplyApplerError::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::GuildProto::ReplyError stReplyApplerError::result() const {
  return static_cast< ::GuildProto::ReplyError >(result_);
}
inline void stReplyApplerError::set_result(::GuildProto::ReplyError value) {
  assert(::GuildProto::ReplyError_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stJoinInGuildTip

// optional bool accept = 1;
inline bool stJoinInGuildTip::has_accept() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stJoinInGuildTip::set_has_accept() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stJoinInGuildTip::clear_has_accept() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stJoinInGuildTip::clear_accept() {
  accept_ = false;
  clear_has_accept();
}
inline bool stJoinInGuildTip::accept() const {
  return accept_;
}
inline void stJoinInGuildTip::set_accept(bool value) {
  set_has_accept();
  accept_ = value;
}

// optional string otherName = 2;
inline bool stJoinInGuildTip::has_othername() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stJoinInGuildTip::set_has_othername() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stJoinInGuildTip::clear_has_othername() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stJoinInGuildTip::clear_othername() {
  if (othername_ != &::google::protobuf::internal::kEmptyString) {
    othername_->clear();
  }
  clear_has_othername();
}
inline const ::std::string& stJoinInGuildTip::othername() const {
  return *othername_;
}
inline void stJoinInGuildTip::set_othername(const ::std::string& value) {
  set_has_othername();
  if (othername_ == &::google::protobuf::internal::kEmptyString) {
    othername_ = new ::std::string;
  }
  othername_->assign(value);
}
inline void stJoinInGuildTip::set_othername(const char* value) {
  set_has_othername();
  if (othername_ == &::google::protobuf::internal::kEmptyString) {
    othername_ = new ::std::string;
  }
  othername_->assign(value);
}
inline void stJoinInGuildTip::set_othername(const char* value, size_t size) {
  set_has_othername();
  if (othername_ == &::google::protobuf::internal::kEmptyString) {
    othername_ = new ::std::string;
  }
  othername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stJoinInGuildTip::mutable_othername() {
  set_has_othername();
  if (othername_ == &::google::protobuf::internal::kEmptyString) {
    othername_ = new ::std::string;
  }
  return othername_;
}
inline ::std::string* stJoinInGuildTip::release_othername() {
  clear_has_othername();
  if (othername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = othername_;
    othername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stJoinInGuildTip::set_allocated_othername(::std::string* othername) {
  if (othername_ != &::google::protobuf::internal::kEmptyString) {
    delete othername_;
  }
  if (othername) {
    set_has_othername();
    othername_ = othername;
  } else {
    clear_has_othername();
    othername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// stMemJoinInGuild

// optional .GuildProto.stSynGuildMemInfo data = 1;
inline bool stMemJoinInGuild::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stMemJoinInGuild::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stMemJoinInGuild::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stMemJoinInGuild::clear_data() {
  if (data_ != NULL) data_->::GuildProto::stSynGuildMemInfo::Clear();
  clear_has_data();
}
inline const ::GuildProto::stSynGuildMemInfo& stMemJoinInGuild::data() const {
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::GuildProto::stSynGuildMemInfo* stMemJoinInGuild::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::GuildProto::stSynGuildMemInfo;
  return data_;
}
inline ::GuildProto::stSynGuildMemInfo* stMemJoinInGuild::release_data() {
  clear_has_data();
  ::GuildProto::stSynGuildMemInfo* temp = data_;
  data_ = NULL;
  return temp;
}
inline void stMemJoinInGuild::set_allocated_data(::GuildProto::stSynGuildMemInfo* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
}

// -------------------------------------------------------------------

// stReqLeaveGuild

// optional uint32 guildID = 1;
inline bool stReqLeaveGuild::has_guildid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqLeaveGuild::set_has_guildid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqLeaveGuild::clear_has_guildid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqLeaveGuild::clear_guildid() {
  guildid_ = 0u;
  clear_has_guildid();
}
inline ::google::protobuf::uint32 stReqLeaveGuild::guildid() const {
  return guildid_;
}
inline void stReqLeaveGuild::set_guildid(::google::protobuf::uint32 value) {
  set_has_guildid();
  guildid_ = value;
}

// -------------------------------------------------------------------

// stMemLeaveGuild

// optional uint32 charID = 1;
inline bool stMemLeaveGuild::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stMemLeaveGuild::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stMemLeaveGuild::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stMemLeaveGuild::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stMemLeaveGuild::charid() const {
  return charid_;
}
inline void stMemLeaveGuild::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stAssignGuildTitle

// optional uint32 charID = 1;
inline bool stAssignGuildTitle::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stAssignGuildTitle::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stAssignGuildTitle::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stAssignGuildTitle::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stAssignGuildTitle::charid() const {
  return charid_;
}
inline void stAssignGuildTitle::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional .GuildProto.eGuildTile eTitle = 2;
inline bool stAssignGuildTitle::has_etitle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stAssignGuildTitle::set_has_etitle() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stAssignGuildTitle::clear_has_etitle() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stAssignGuildTitle::clear_etitle() {
  etitle_ = 0;
  clear_has_etitle();
}
inline ::GuildProto::eGuildTile stAssignGuildTitle::etitle() const {
  return static_cast< ::GuildProto::eGuildTile >(etitle_);
}
inline void stAssignGuildTitle::set_etitle(::GuildProto::eGuildTile value) {
  assert(::GuildProto::eGuildTile_IsValid(value));
  set_has_etitle();
  etitle_ = value;
}

// -------------------------------------------------------------------

// stAssignTitleError

// optional .GuildProto.eAssignTitleError result = 1;
inline bool stAssignTitleError::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stAssignTitleError::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stAssignTitleError::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stAssignTitleError::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::GuildProto::eAssignTitleError stAssignTitleError::result() const {
  return static_cast< ::GuildProto::eAssignTitleError >(result_);
}
inline void stAssignTitleError::set_result(::GuildProto::eAssignTitleError value) {
  assert(::GuildProto::eAssignTitleError_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stCancelTitle

// optional uint32 charID = 1;
inline bool stCancelTitle::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stCancelTitle::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stCancelTitle::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stCancelTitle::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stCancelTitle::charid() const {
  return charid_;
}
inline void stCancelTitle::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stCancelTitleError

// optional .GuildProto.eCancelTitleError result = 1;
inline bool stCancelTitleError::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stCancelTitleError::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stCancelTitleError::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stCancelTitleError::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::GuildProto::eCancelTitleError stCancelTitleError::result() const {
  return static_cast< ::GuildProto::eCancelTitleError >(result_);
}
inline void stCancelTitleError::set_result(::GuildProto::eCancelTitleError value) {
  assert(::GuildProto::eCancelTitleError_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stGiveLeader2Other

// optional uint32 charID = 1;
inline bool stGiveLeader2Other::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stGiveLeader2Other::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stGiveLeader2Other::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stGiveLeader2Other::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stGiveLeader2Other::charid() const {
  return charid_;
}
inline void stGiveLeader2Other::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stGiveLeaderError

// optional .GuildProto.eGiveLeaderErrorNo result = 1;
inline bool stGiveLeaderError::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stGiveLeaderError::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stGiveLeaderError::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stGiveLeaderError::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::GuildProto::eGiveLeaderErrorNo stGiveLeaderError::result() const {
  return static_cast< ::GuildProto::eGiveLeaderErrorNo >(result_);
}
inline void stGiveLeaderError::set_result(::GuildProto::eGiveLeaderErrorNo value) {
  assert(::GuildProto::eGiveLeaderErrorNo_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stFireGuild

// optional uint32 guildID = 1;
inline bool stFireGuild::has_guildid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stFireGuild::set_has_guildid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stFireGuild::clear_has_guildid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stFireGuild::clear_guildid() {
  guildid_ = 0u;
  clear_has_guildid();
}
inline ::google::protobuf::uint32 stFireGuild::guildid() const {
  return guildid_;
}
inline void stFireGuild::set_guildid(::google::protobuf::uint32 value) {
  set_has_guildid();
  guildid_ = value;
}

// -------------------------------------------------------------------

// stFireGuildError

// optional .GuildProto.eFireMemberErrorNo result = 1;
inline bool stFireGuildError::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stFireGuildError::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stFireGuildError::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stFireGuildError::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::GuildProto::eFireMemberErrorNo stFireGuildError::result() const {
  return static_cast< ::GuildProto::eFireMemberErrorNo >(result_);
}
inline void stFireGuildError::set_result(::GuildProto::eFireMemberErrorNo value) {
  assert(::GuildProto::eFireMemberErrorNo_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stGuildMemOnOffLine

// optional uint32 charID = 1;
inline bool stGuildMemOnOffLine::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stGuildMemOnOffLine::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stGuildMemOnOffLine::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stGuildMemOnOffLine::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stGuildMemOnOffLine::charid() const {
  return charid_;
}
inline void stGuildMemOnOffLine::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional bool online = 2;
inline bool stGuildMemOnOffLine::has_online() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stGuildMemOnOffLine::set_has_online() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stGuildMemOnOffLine::clear_has_online() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stGuildMemOnOffLine::clear_online() {
  online_ = false;
  clear_has_online();
}
inline bool stGuildMemOnOffLine::online() const {
  return online_;
}
inline void stGuildMemOnOffLine::set_online(bool value) {
  set_has_online();
  online_ = value;
}

// -------------------------------------------------------------------

// stKillOutGroupMember

// optional uint32 charID = 1;
inline bool stKillOutGroupMember::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stKillOutGroupMember::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stKillOutGroupMember::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stKillOutGroupMember::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stKillOutGroupMember::charid() const {
  return charid_;
}
inline void stKillOutGroupMember::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stKillOutTip

// -------------------------------------------------------------------

// stKillOutGroupMemberError

// optional .GuildProto.eKillOutErrorNo result = 1;
inline bool stKillOutGroupMemberError::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stKillOutGroupMemberError::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stKillOutGroupMemberError::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stKillOutGroupMemberError::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::GuildProto::eKillOutErrorNo stKillOutGroupMemberError::result() const {
  return static_cast< ::GuildProto::eKillOutErrorNo >(result_);
}
inline void stKillOutGroupMemberError::set_result(::GuildProto::eKillOutErrorNo value) {
  assert(::GuildProto::eKillOutErrorNo_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stRetGuildMemInfo

// optional uint32 charID = 1;
inline bool stRetGuildMemInfo::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRetGuildMemInfo::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRetGuildMemInfo::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRetGuildMemInfo::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stRetGuildMemInfo::charid() const {
  return charid_;
}
inline void stRetGuildMemInfo::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 joinInTime = 2;
inline bool stRetGuildMemInfo::has_joinintime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stRetGuildMemInfo::set_has_joinintime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stRetGuildMemInfo::clear_has_joinintime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stRetGuildMemInfo::clear_joinintime() {
  joinintime_ = 0u;
  clear_has_joinintime();
}
inline ::google::protobuf::uint32 stRetGuildMemInfo::joinintime() const {
  return joinintime_;
}
inline void stRetGuildMemInfo::set_joinintime(::google::protobuf::uint32 value) {
  set_has_joinintime();
  joinintime_ = value;
}

// optional uint32 contributeTime = 3;
inline bool stRetGuildMemInfo::has_contributetime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stRetGuildMemInfo::set_has_contributetime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stRetGuildMemInfo::clear_has_contributetime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stRetGuildMemInfo::clear_contributetime() {
  contributetime_ = 0u;
  clear_has_contributetime();
}
inline ::google::protobuf::uint32 stRetGuildMemInfo::contributetime() const {
  return contributetime_;
}
inline void stRetGuildMemInfo::set_contributetime(::google::protobuf::uint32 value) {
  set_has_contributetime();
  contributetime_ = value;
}

// optional uint32 todayContribute = 4;
inline bool stRetGuildMemInfo::has_todaycontribute() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stRetGuildMemInfo::set_has_todaycontribute() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stRetGuildMemInfo::clear_has_todaycontribute() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stRetGuildMemInfo::clear_todaycontribute() {
  todaycontribute_ = 0u;
  clear_has_todaycontribute();
}
inline ::google::protobuf::uint32 stRetGuildMemInfo::todaycontribute() const {
  return todaycontribute_;
}
inline void stRetGuildMemInfo::set_todaycontribute(::google::protobuf::uint32 value) {
  set_has_todaycontribute();
  todaycontribute_ = value;
}

// optional uint32 allContribute = 5;
inline bool stRetGuildMemInfo::has_allcontribute() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stRetGuildMemInfo::set_has_allcontribute() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stRetGuildMemInfo::clear_has_allcontribute() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stRetGuildMemInfo::clear_allcontribute() {
  allcontribute_ = 0u;
  clear_has_allcontribute();
}
inline ::google::protobuf::uint32 stRetGuildMemInfo::allcontribute() const {
  return allcontribute_;
}
inline void stRetGuildMemInfo::set_allcontribute(::google::protobuf::uint32 value) {
  set_has_allcontribute();
  allcontribute_ = value;
}

// optional uint32 lastLoginTime = 6;
inline bool stRetGuildMemInfo::has_lastlogintime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stRetGuildMemInfo::set_has_lastlogintime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stRetGuildMemInfo::clear_has_lastlogintime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stRetGuildMemInfo::clear_lastlogintime() {
  lastlogintime_ = 0u;
  clear_has_lastlogintime();
}
inline ::google::protobuf::uint32 stRetGuildMemInfo::lastlogintime() const {
  return lastlogintime_;
}
inline void stRetGuildMemInfo::set_lastlogintime(::google::protobuf::uint32 value) {
  set_has_lastlogintime();
  lastlogintime_ = value;
}

// -------------------------------------------------------------------

// stSynGuildContribute

// optional uint32 num = 1;
inline bool stSynGuildContribute::has_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSynGuildContribute::set_has_num() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSynGuildContribute::clear_has_num() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSynGuildContribute::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 stSynGuildContribute::num() const {
  return num_;
}
inline void stSynGuildContribute::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
}

// -------------------------------------------------------------------

// stChgGuildSign

// optional string sign = 1;
inline bool stChgGuildSign::has_sign() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stChgGuildSign::set_has_sign() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stChgGuildSign::clear_has_sign() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stChgGuildSign::clear_sign() {
  if (sign_ != &::google::protobuf::internal::kEmptyString) {
    sign_->clear();
  }
  clear_has_sign();
}
inline const ::std::string& stChgGuildSign::sign() const {
  return *sign_;
}
inline void stChgGuildSign::set_sign(const ::std::string& value) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    sign_ = new ::std::string;
  }
  sign_->assign(value);
}
inline void stChgGuildSign::set_sign(const char* value) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    sign_ = new ::std::string;
  }
  sign_->assign(value);
}
inline void stChgGuildSign::set_sign(const char* value, size_t size) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    sign_ = new ::std::string;
  }
  sign_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stChgGuildSign::mutable_sign() {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    sign_ = new ::std::string;
  }
  return sign_;
}
inline ::std::string* stChgGuildSign::release_sign() {
  clear_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sign_;
    sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stChgGuildSign::set_allocated_sign(::std::string* sign) {
  if (sign_ != &::google::protobuf::internal::kEmptyString) {
    delete sign_;
  }
  if (sign) {
    set_has_sign();
    sign_ = sign;
  } else {
    clear_has_sign();
    sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// stNotifyFireRemainTime

// optional uint32 remainTime = 1;
inline bool stNotifyFireRemainTime::has_remaintime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stNotifyFireRemainTime::set_has_remaintime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stNotifyFireRemainTime::clear_has_remaintime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stNotifyFireRemainTime::clear_remaintime() {
  remaintime_ = 0u;
  clear_has_remaintime();
}
inline ::google::protobuf::uint32 stNotifyFireRemainTime::remaintime() const {
  return remaintime_;
}
inline void stNotifyFireRemainTime::set_remaintime(::google::protobuf::uint32 value) {
  set_has_remaintime();
  remaintime_ = value;
}

// -------------------------------------------------------------------

// stReqGuildMemInfo

// optional uint32 charID = 1;
inline bool stReqGuildMemInfo::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqGuildMemInfo::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqGuildMemInfo::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqGuildMemInfo::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqGuildMemInfo::charid() const {
  return charid_;
}
inline void stReqGuildMemInfo::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stCancelFireGuild

// optional uint32 guildID = 1;
inline bool stCancelFireGuild::has_guildid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stCancelFireGuild::set_has_guildid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stCancelFireGuild::clear_has_guildid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stCancelFireGuild::clear_guildid() {
  guildid_ = 0u;
  clear_has_guildid();
}
inline ::google::protobuf::uint32 stCancelFireGuild::guildid() const {
  return guildid_;
}
inline void stCancelFireGuild::set_guildid(::google::protobuf::uint32 value) {
  set_has_guildid();
  guildid_ = value;
}

// -------------------------------------------------------------------

// stCancelFireGuildResult

// optional .GuildProto.stCancelFireGuildResult.eResult result = 1;
inline bool stCancelFireGuildResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stCancelFireGuildResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stCancelFireGuildResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stCancelFireGuildResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::GuildProto::stCancelFireGuildResult_eResult stCancelFireGuildResult::result() const {
  return static_cast< ::GuildProto::stCancelFireGuildResult_eResult >(result_);
}
inline void stCancelFireGuildResult::set_result(::GuildProto::stCancelFireGuildResult_eResult value) {
  assert(::GuildProto::stCancelFireGuildResult_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stCancelJoinInGuild

// optional uint32 guildID = 1;
inline bool stCancelJoinInGuild::has_guildid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stCancelJoinInGuild::set_has_guildid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stCancelJoinInGuild::clear_has_guildid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stCancelJoinInGuild::clear_guildid() {
  guildid_ = 0u;
  clear_has_guildid();
}
inline ::google::protobuf::uint32 stCancelJoinInGuild::guildid() const {
  return guildid_;
}
inline void stCancelJoinInGuild::set_guildid(::google::protobuf::uint32 value) {
  set_has_guildid();
  guildid_ = value;
}

// -------------------------------------------------------------------

// stCancelJoinInGuildResult

// optional uint32 guildID = 1;
inline bool stCancelJoinInGuildResult::has_guildid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stCancelJoinInGuildResult::set_has_guildid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stCancelJoinInGuildResult::clear_has_guildid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stCancelJoinInGuildResult::clear_guildid() {
  guildid_ = 0u;
  clear_has_guildid();
}
inline ::google::protobuf::uint32 stCancelJoinInGuildResult::guildid() const {
  return guildid_;
}
inline void stCancelJoinInGuildResult::set_guildid(::google::protobuf::uint32 value) {
  set_has_guildid();
  guildid_ = value;
}

// optional .GuildProto.stCancelJoinInGuildResult.eResult result = 2;
inline bool stCancelJoinInGuildResult::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stCancelJoinInGuildResult::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stCancelJoinInGuildResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stCancelJoinInGuildResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::GuildProto::stCancelJoinInGuildResult_eResult stCancelJoinInGuildResult::result() const {
  return static_cast< ::GuildProto::stCancelJoinInGuildResult_eResult >(result_);
}
inline void stCancelJoinInGuildResult::set_result(::GuildProto::stCancelJoinInGuildResult_eResult value) {
  assert(::GuildProto::stCancelJoinInGuildResult_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stReqDonate

// optional .GuildProto.stReqDonate.eType type = 1;
inline bool stReqDonate::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqDonate::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqDonate::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqDonate::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::GuildProto::stReqDonate_eType stReqDonate::type() const {
  return static_cast< ::GuildProto::stReqDonate_eType >(type_);
}
inline void stReqDonate::set_type(::GuildProto::stReqDonate_eType value) {
  assert(::GuildProto::stReqDonate_eType_IsValid(value));
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// stDonateResult

// optional .GuildProto.stDonateResult.eResult result = 1;
inline bool stDonateResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stDonateResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stDonateResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stDonateResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::GuildProto::stDonateResult_eResult stDonateResult::result() const {
  return static_cast< ::GuildProto::stDonateResult_eResult >(result_);
}
inline void stDonateResult::set_result(::GuildProto::stDonateResult_eResult value) {
  assert(::GuildProto::stDonateResult_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stReqLevelUpHallLv

// optional uint32 guildID = 1;
inline bool stReqLevelUpHallLv::has_guildid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqLevelUpHallLv::set_has_guildid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqLevelUpHallLv::clear_has_guildid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqLevelUpHallLv::clear_guildid() {
  guildid_ = 0u;
  clear_has_guildid();
}
inline ::google::protobuf::uint32 stReqLevelUpHallLv::guildid() const {
  return guildid_;
}
inline void stReqLevelUpHallLv::set_guildid(::google::protobuf::uint32 value) {
  set_has_guildid();
  guildid_ = value;
}

// -------------------------------------------------------------------

// stLevelUpHallLvResult

// optional .GuildProto.stLevelUpHallLvResult.eResult result = 1;
inline bool stLevelUpHallLvResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stLevelUpHallLvResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stLevelUpHallLvResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stLevelUpHallLvResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::GuildProto::stLevelUpHallLvResult_eResult stLevelUpHallLvResult::result() const {
  return static_cast< ::GuildProto::stLevelUpHallLvResult_eResult >(result_);
}
inline void stLevelUpHallLvResult::set_result(::GuildProto::stLevelUpHallLvResult_eResult value) {
  assert(::GuildProto::stLevelUpHallLvResult_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stSynHallLv

// optional uint32 lv = 1;
inline bool stSynHallLv::has_lv() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSynHallLv::set_has_lv() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSynHallLv::clear_has_lv() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSynHallLv::clear_lv() {
  lv_ = 0u;
  clear_has_lv();
}
inline ::google::protobuf::uint32 stSynHallLv::lv() const {
  return lv_;
}
inline void stSynHallLv::set_lv(::google::protobuf::uint32 value) {
  set_has_lv();
  lv_ = value;
}

// -------------------------------------------------------------------

// stReqPrayBuildingLv

// optional uint32 guildID = 1;
inline bool stReqPrayBuildingLv::has_guildid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqPrayBuildingLv::set_has_guildid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqPrayBuildingLv::clear_has_guildid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqPrayBuildingLv::clear_guildid() {
  guildid_ = 0u;
  clear_has_guildid();
}
inline ::google::protobuf::uint32 stReqPrayBuildingLv::guildid() const {
  return guildid_;
}
inline void stReqPrayBuildingLv::set_guildid(::google::protobuf::uint32 value) {
  set_has_guildid();
  guildid_ = value;
}

// -------------------------------------------------------------------

// stPrayBuildingLvResult

// optional .GuildProto.stPrayBuildingLvResult.eResult result = 1;
inline bool stPrayBuildingLvResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stPrayBuildingLvResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stPrayBuildingLvResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stPrayBuildingLvResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::GuildProto::stPrayBuildingLvResult_eResult stPrayBuildingLvResult::result() const {
  return static_cast< ::GuildProto::stPrayBuildingLvResult_eResult >(result_);
}
inline void stPrayBuildingLvResult::set_result(::GuildProto::stPrayBuildingLvResult_eResult value) {
  assert(::GuildProto::stPrayBuildingLvResult_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stSynPrayBuildingLv

// optional uint32 lv = 1;
inline bool stSynPrayBuildingLv::has_lv() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSynPrayBuildingLv::set_has_lv() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSynPrayBuildingLv::clear_has_lv() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSynPrayBuildingLv::clear_lv() {
  lv_ = 0u;
  clear_has_lv();
}
inline ::google::protobuf::uint32 stSynPrayBuildingLv::lv() const {
  return lv_;
}
inline void stSynPrayBuildingLv::set_lv(::google::protobuf::uint32 value) {
  set_has_lv();
  lv_ = value;
}

// -------------------------------------------------------------------

// stReqPray

// optional uint32 guildID = 1;
inline bool stReqPray::has_guildid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqPray::set_has_guildid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqPray::clear_has_guildid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqPray::clear_guildid() {
  guildid_ = 0u;
  clear_has_guildid();
}
inline ::google::protobuf::uint32 stReqPray::guildid() const {
  return guildid_;
}
inline void stReqPray::set_guildid(::google::protobuf::uint32 value) {
  set_has_guildid();
  guildid_ = value;
}

// -------------------------------------------------------------------

// stPrayResult

// optional .GuildProto.stPrayResult.eResult result = 1;
inline bool stPrayResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stPrayResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stPrayResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stPrayResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::GuildProto::stPrayResult_eResult stPrayResult::result() const {
  return static_cast< ::GuildProto::stPrayResult_eResult >(result_);
}
inline void stPrayResult::set_result(::GuildProto::stPrayResult_eResult value) {
  assert(::GuildProto::stPrayResult_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stReqLevelUpShopBuildingLv

// optional uint32 guildID = 1;
inline bool stReqLevelUpShopBuildingLv::has_guildid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqLevelUpShopBuildingLv::set_has_guildid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqLevelUpShopBuildingLv::clear_has_guildid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqLevelUpShopBuildingLv::clear_guildid() {
  guildid_ = 0u;
  clear_has_guildid();
}
inline ::google::protobuf::uint32 stReqLevelUpShopBuildingLv::guildid() const {
  return guildid_;
}
inline void stReqLevelUpShopBuildingLv::set_guildid(::google::protobuf::uint32 value) {
  set_has_guildid();
  guildid_ = value;
}

// -------------------------------------------------------------------

// stLevelUpShopBuildingLvResult

// optional .GuildProto.stLevelUpShopBuildingLvResult.eResult result = 1;
inline bool stLevelUpShopBuildingLvResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stLevelUpShopBuildingLvResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stLevelUpShopBuildingLvResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stLevelUpShopBuildingLvResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::GuildProto::stLevelUpShopBuildingLvResult_eResult stLevelUpShopBuildingLvResult::result() const {
  return static_cast< ::GuildProto::stLevelUpShopBuildingLvResult_eResult >(result_);
}
inline void stLevelUpShopBuildingLvResult::set_result(::GuildProto::stLevelUpShopBuildingLvResult_eResult value) {
  assert(::GuildProto::stLevelUpShopBuildingLvResult_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stSynShopBuilding

// optional uint32 lv = 1;
inline bool stSynShopBuilding::has_lv() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSynShopBuilding::set_has_lv() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSynShopBuilding::clear_has_lv() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSynShopBuilding::clear_lv() {
  lv_ = 0u;
  clear_has_lv();
}
inline ::google::protobuf::uint32 stSynShopBuilding::lv() const {
  return lv_;
}
inline void stSynShopBuilding::set_lv(::google::protobuf::uint32 value) {
  set_has_lv();
  lv_ = value;
}

// -------------------------------------------------------------------

// stReqGuildTrace

// optional uint32 guildID = 1;
inline bool stReqGuildTrace::has_guildid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqGuildTrace::set_has_guildid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqGuildTrace::clear_has_guildid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqGuildTrace::clear_guildid() {
  guildid_ = 0u;
  clear_has_guildid();
}
inline ::google::protobuf::uint32 stReqGuildTrace::guildid() const {
  return guildid_;
}
inline void stReqGuildTrace::set_guildid(::google::protobuf::uint32 value) {
  set_has_guildid();
  guildid_ = value;
}

// -------------------------------------------------------------------

// stGuildTraceInfo

// optional .GuildProto.eTraceID eTraceID = 1;
inline bool stGuildTraceInfo::has_etraceid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stGuildTraceInfo::set_has_etraceid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stGuildTraceInfo::clear_has_etraceid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stGuildTraceInfo::clear_etraceid() {
  etraceid_ = 0;
  clear_has_etraceid();
}
inline ::GuildProto::eTraceID stGuildTraceInfo::etraceid() const {
  return static_cast< ::GuildProto::eTraceID >(etraceid_);
}
inline void stGuildTraceInfo::set_etraceid(::GuildProto::eTraceID value) {
  assert(::GuildProto::eTraceID_IsValid(value));
  set_has_etraceid();
  etraceid_ = value;
}

// optional uint32 charID = 2;
inline bool stGuildTraceInfo::has_charid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stGuildTraceInfo::set_has_charid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stGuildTraceInfo::clear_has_charid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stGuildTraceInfo::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stGuildTraceInfo::charid() const {
  return charid_;
}
inline void stGuildTraceInfo::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional string name = 3;
inline bool stGuildTraceInfo::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stGuildTraceInfo::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stGuildTraceInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stGuildTraceInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& stGuildTraceInfo::name() const {
  return *name_;
}
inline void stGuildTraceInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stGuildTraceInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stGuildTraceInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stGuildTraceInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* stGuildTraceInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stGuildTraceInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 doTime = 4;
inline bool stGuildTraceInfo::has_dotime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stGuildTraceInfo::set_has_dotime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stGuildTraceInfo::clear_has_dotime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stGuildTraceInfo::clear_dotime() {
  dotime_ = 0u;
  clear_has_dotime();
}
inline ::google::protobuf::uint32 stGuildTraceInfo::dotime() const {
  return dotime_;
}
inline void stGuildTraceInfo::set_dotime(::google::protobuf::uint32 value) {
  set_has_dotime();
  dotime_ = value;
}

// -------------------------------------------------------------------

// stRetGuildTrace

// repeated .GuildProto.stGuildTraceInfo traces = 1;
inline int stRetGuildTrace::traces_size() const {
  return traces_.size();
}
inline void stRetGuildTrace::clear_traces() {
  traces_.Clear();
}
inline const ::GuildProto::stGuildTraceInfo& stRetGuildTrace::traces(int index) const {
  return traces_.Get(index);
}
inline ::GuildProto::stGuildTraceInfo* stRetGuildTrace::mutable_traces(int index) {
  return traces_.Mutable(index);
}
inline ::GuildProto::stGuildTraceInfo* stRetGuildTrace::add_traces() {
  return traces_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GuildProto::stGuildTraceInfo >&
stRetGuildTrace::traces() const {
  return traces_;
}
inline ::google::protobuf::RepeatedPtrField< ::GuildProto::stGuildTraceInfo >*
stRetGuildTrace::mutable_traces() {
  return &traces_;
}

// -------------------------------------------------------------------

// stAddNewGuildTrace

// optional .GuildProto.stGuildTraceInfo traceInfo = 1;
inline bool stAddNewGuildTrace::has_traceinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stAddNewGuildTrace::set_has_traceinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stAddNewGuildTrace::clear_has_traceinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stAddNewGuildTrace::clear_traceinfo() {
  if (traceinfo_ != NULL) traceinfo_->::GuildProto::stGuildTraceInfo::Clear();
  clear_has_traceinfo();
}
inline const ::GuildProto::stGuildTraceInfo& stAddNewGuildTrace::traceinfo() const {
  return traceinfo_ != NULL ? *traceinfo_ : *default_instance_->traceinfo_;
}
inline ::GuildProto::stGuildTraceInfo* stAddNewGuildTrace::mutable_traceinfo() {
  set_has_traceinfo();
  if (traceinfo_ == NULL) traceinfo_ = new ::GuildProto::stGuildTraceInfo;
  return traceinfo_;
}
inline ::GuildProto::stGuildTraceInfo* stAddNewGuildTrace::release_traceinfo() {
  clear_has_traceinfo();
  ::GuildProto::stGuildTraceInfo* temp = traceinfo_;
  traceinfo_ = NULL;
  return temp;
}
inline void stAddNewGuildTrace::set_allocated_traceinfo(::GuildProto::stGuildTraceInfo* traceinfo) {
  delete traceinfo_;
  traceinfo_ = traceinfo;
  if (traceinfo) {
    set_has_traceinfo();
  } else {
    clear_has_traceinfo();
  }
}

// -------------------------------------------------------------------

// stChgNotice

// optional string notice = 1;
inline bool stChgNotice::has_notice() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stChgNotice::set_has_notice() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stChgNotice::clear_has_notice() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stChgNotice::clear_notice() {
  if (notice_ != &::google::protobuf::internal::kEmptyString) {
    notice_->clear();
  }
  clear_has_notice();
}
inline const ::std::string& stChgNotice::notice() const {
  return *notice_;
}
inline void stChgNotice::set_notice(const ::std::string& value) {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  notice_->assign(value);
}
inline void stChgNotice::set_notice(const char* value) {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  notice_->assign(value);
}
inline void stChgNotice::set_notice(const char* value, size_t size) {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  notice_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stChgNotice::mutable_notice() {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  return notice_;
}
inline ::std::string* stChgNotice::release_notice() {
  clear_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = notice_;
    notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stChgNotice::set_allocated_notice(::std::string* notice) {
  if (notice_ != &::google::protobuf::internal::kEmptyString) {
    delete notice_;
  }
  if (notice) {
    set_has_notice();
    notice_ = notice;
  } else {
    clear_has_notice();
    notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// stGuildDonateState

// optional bool hasDonate = 1;
inline bool stGuildDonateState::has_hasdonate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stGuildDonateState::set_has_hasdonate() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stGuildDonateState::clear_has_hasdonate() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stGuildDonateState::clear_hasdonate() {
  hasdonate_ = false;
  clear_has_hasdonate();
}
inline bool stGuildDonateState::hasdonate() const {
  return hasdonate_;
}
inline void stGuildDonateState::set_hasdonate(bool value) {
  set_has_hasdonate();
  hasdonate_ = value;
}

// -------------------------------------------------------------------

// stGuildPrayState

// optional bool hasPray = 1;
inline bool stGuildPrayState::has_haspray() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stGuildPrayState::set_has_haspray() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stGuildPrayState::clear_has_haspray() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stGuildPrayState::clear_haspray() {
  haspray_ = false;
  clear_has_haspray();
}
inline bool stGuildPrayState::haspray() const {
  return haspray_;
}
inline void stGuildPrayState::set_haspray(bool value) {
  set_has_haspray();
  haspray_ = value;
}

// -------------------------------------------------------------------

// stReqChangeBadge

// optional uint32 badgeID = 1;
inline bool stReqChangeBadge::has_badgeid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqChangeBadge::set_has_badgeid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqChangeBadge::clear_has_badgeid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqChangeBadge::clear_badgeid() {
  badgeid_ = 0u;
  clear_has_badgeid();
}
inline ::google::protobuf::uint32 stReqChangeBadge::badgeid() const {
  return badgeid_;
}
inline void stReqChangeBadge::set_badgeid(::google::protobuf::uint32 value) {
  set_has_badgeid();
  badgeid_ = value;
}

// -------------------------------------------------------------------

// stChangeBadge

// optional uint32 badgeID = 1;
inline bool stChangeBadge::has_badgeid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stChangeBadge::set_has_badgeid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stChangeBadge::clear_has_badgeid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stChangeBadge::clear_badgeid() {
  badgeid_ = 0u;
  clear_has_badgeid();
}
inline ::google::protobuf::uint32 stChangeBadge::badgeid() const {
  return badgeid_;
}
inline void stChangeBadge::set_badgeid(::google::protobuf::uint32 value) {
  set_has_badgeid();
  badgeid_ = value;
}

// optional .GuildProto.stChangeBadge.eResult result = 2;
inline bool stChangeBadge::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stChangeBadge::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stChangeBadge::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stChangeBadge::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::GuildProto::stChangeBadge_eResult stChangeBadge::result() const {
  return static_cast< ::GuildProto::stChangeBadge_eResult >(result_);
}
inline void stChangeBadge::set_result(::GuildProto::stChangeBadge_eResult value) {
  assert(::GuildProto::stChangeBadge_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stIntoGuildCopymap

// optional uint32 charID = 1;
inline bool stIntoGuildCopymap::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stIntoGuildCopymap::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stIntoGuildCopymap::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stIntoGuildCopymap::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stIntoGuildCopymap::charid() const {
  return charid_;
}
inline void stIntoGuildCopymap::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stIntoGuildCopymapError

// optional .GuildProto.stIntoGuildCopymapError.eResult result = 1;
inline bool stIntoGuildCopymapError::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stIntoGuildCopymapError::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stIntoGuildCopymapError::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stIntoGuildCopymapError::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::GuildProto::stIntoGuildCopymapError_eResult stIntoGuildCopymapError::result() const {
  return static_cast< ::GuildProto::stIntoGuildCopymapError_eResult >(result_);
}
inline void stIntoGuildCopymapError::set_result(::GuildProto::stIntoGuildCopymapError_eResult value) {
  assert(::GuildProto::stIntoGuildCopymapError_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stSearchGuild

// optional string guildName = 1;
inline bool stSearchGuild::has_guildname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSearchGuild::set_has_guildname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSearchGuild::clear_has_guildname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSearchGuild::clear_guildname() {
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    guildname_->clear();
  }
  clear_has_guildname();
}
inline const ::std::string& stSearchGuild::guildname() const {
  return *guildname_;
}
inline void stSearchGuild::set_guildname(const ::std::string& value) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
}
inline void stSearchGuild::set_guildname(const char* value) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
}
inline void stSearchGuild::set_guildname(const char* value, size_t size) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stSearchGuild::mutable_guildname() {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  return guildname_;
}
inline ::std::string* stSearchGuild::release_guildname() {
  clear_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = guildname_;
    guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stSearchGuild::set_allocated_guildname(::std::string* guildname) {
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    delete guildname_;
  }
  if (guildname) {
    set_has_guildname();
    guildname_ = guildname;
  } else {
    clear_has_guildname();
    guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// stRetSearchGuildResult

// repeated .GuildProto.stGuildListInfo listInfo = 1;
inline int stRetSearchGuildResult::listinfo_size() const {
  return listinfo_.size();
}
inline void stRetSearchGuildResult::clear_listinfo() {
  listinfo_.Clear();
}
inline const ::GuildProto::stGuildListInfo& stRetSearchGuildResult::listinfo(int index) const {
  return listinfo_.Get(index);
}
inline ::GuildProto::stGuildListInfo* stRetSearchGuildResult::mutable_listinfo(int index) {
  return listinfo_.Mutable(index);
}
inline ::GuildProto::stGuildListInfo* stRetSearchGuildResult::add_listinfo() {
  return listinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GuildProto::stGuildListInfo >&
stRetSearchGuildResult::listinfo() const {
  return listinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::GuildProto::stGuildListInfo >*
stRetSearchGuildResult::mutable_listinfo() {
  return &listinfo_;
}

// -------------------------------------------------------------------

// stSynMemberContribute

// optional uint32 charID = 1;
inline bool stSynMemberContribute::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSynMemberContribute::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSynMemberContribute::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSynMemberContribute::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stSynMemberContribute::charid() const {
  return charid_;
}
inline void stSynMemberContribute::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 num = 2;
inline bool stSynMemberContribute::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stSynMemberContribute::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stSynMemberContribute::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stSynMemberContribute::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 stSynMemberContribute::num() const {
  return num_;
}
inline void stSynMemberContribute::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
}

// -------------------------------------------------------------------

// stReqOpenGuildCopymapWin

// optional uint32 charID = 1;
inline bool stReqOpenGuildCopymapWin::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqOpenGuildCopymapWin::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqOpenGuildCopymapWin::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqOpenGuildCopymapWin::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqOpenGuildCopymapWin::charid() const {
  return charid_;
}
inline void stReqOpenGuildCopymapWin::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stCopymapOpenInfo

// optional uint32 copymapID = 1;
inline bool stCopymapOpenInfo::has_copymapid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stCopymapOpenInfo::set_has_copymapid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stCopymapOpenInfo::clear_has_copymapid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stCopymapOpenInfo::clear_copymapid() {
  copymapid_ = 0u;
  clear_has_copymapid();
}
inline ::google::protobuf::uint32 stCopymapOpenInfo::copymapid() const {
  return copymapid_;
}
inline void stCopymapOpenInfo::set_copymapid(::google::protobuf::uint32 value) {
  set_has_copymapid();
  copymapid_ = value;
}

// optional uint32 openTime = 2;
inline bool stCopymapOpenInfo::has_opentime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stCopymapOpenInfo::set_has_opentime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stCopymapOpenInfo::clear_has_opentime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stCopymapOpenInfo::clear_opentime() {
  opentime_ = 0u;
  clear_has_opentime();
}
inline ::google::protobuf::uint32 stCopymapOpenInfo::opentime() const {
  return opentime_;
}
inline void stCopymapOpenInfo::set_opentime(::google::protobuf::uint32 value) {
  set_has_opentime();
  opentime_ = value;
}

// optional uint32 stepID = 3;
inline bool stCopymapOpenInfo::has_stepid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stCopymapOpenInfo::set_has_stepid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stCopymapOpenInfo::clear_has_stepid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stCopymapOpenInfo::clear_stepid() {
  stepid_ = 0u;
  clear_has_stepid();
}
inline ::google::protobuf::uint32 stCopymapOpenInfo::stepid() const {
  return stepid_;
}
inline void stCopymapOpenInfo::set_stepid(::google::protobuf::uint32 value) {
  set_has_stepid();
  stepid_ = value;
}

// optional bool isStarted = 4;
inline bool stCopymapOpenInfo::has_isstarted() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stCopymapOpenInfo::set_has_isstarted() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stCopymapOpenInfo::clear_has_isstarted() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stCopymapOpenInfo::clear_isstarted() {
  isstarted_ = false;
  clear_has_isstarted();
}
inline bool stCopymapOpenInfo::isstarted() const {
  return isstarted_;
}
inline void stCopymapOpenInfo::set_isstarted(bool value) {
  set_has_isstarted();
  isstarted_ = value;
}

// optional uint32 killerID = 5;
inline bool stCopymapOpenInfo::has_killerid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stCopymapOpenInfo::set_has_killerid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stCopymapOpenInfo::clear_has_killerid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stCopymapOpenInfo::clear_killerid() {
  killerid_ = 0u;
  clear_has_killerid();
}
inline ::google::protobuf::uint32 stCopymapOpenInfo::killerid() const {
  return killerid_;
}
inline void stCopymapOpenInfo::set_killerid(::google::protobuf::uint32 value) {
  set_has_killerid();
  killerid_ = value;
}

// -------------------------------------------------------------------

// stRetGuildCopymapInfo

// repeated .GuildProto.stCopymapOpenInfo openInfo = 1;
inline int stRetGuildCopymapInfo::openinfo_size() const {
  return openinfo_.size();
}
inline void stRetGuildCopymapInfo::clear_openinfo() {
  openinfo_.Clear();
}
inline const ::GuildProto::stCopymapOpenInfo& stRetGuildCopymapInfo::openinfo(int index) const {
  return openinfo_.Get(index);
}
inline ::GuildProto::stCopymapOpenInfo* stRetGuildCopymapInfo::mutable_openinfo(int index) {
  return openinfo_.Mutable(index);
}
inline ::GuildProto::stCopymapOpenInfo* stRetGuildCopymapInfo::add_openinfo() {
  return openinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GuildProto::stCopymapOpenInfo >&
stRetGuildCopymapInfo::openinfo() const {
  return openinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::GuildProto::stCopymapOpenInfo >*
stRetGuildCopymapInfo::mutable_openinfo() {
  return &openinfo_;
}

// optional uint32 challengeNum = 2;
inline bool stRetGuildCopymapInfo::has_challengenum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stRetGuildCopymapInfo::set_has_challengenum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stRetGuildCopymapInfo::clear_has_challengenum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stRetGuildCopymapInfo::clear_challengenum() {
  challengenum_ = 0u;
  clear_has_challengenum();
}
inline ::google::protobuf::uint32 stRetGuildCopymapInfo::challengenum() const {
  return challengenum_;
}
inline void stRetGuildCopymapInfo::set_challengenum(::google::protobuf::uint32 value) {
  set_has_challengenum();
  challengenum_ = value;
}

// optional uint32 assistNum = 3;
inline bool stRetGuildCopymapInfo::has_assistnum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stRetGuildCopymapInfo::set_has_assistnum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stRetGuildCopymapInfo::clear_has_assistnum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stRetGuildCopymapInfo::clear_assistnum() {
  assistnum_ = 0u;
  clear_has_assistnum();
}
inline ::google::protobuf::uint32 stRetGuildCopymapInfo::assistnum() const {
  return assistnum_;
}
inline void stRetGuildCopymapInfo::set_assistnum(::google::protobuf::uint32 value) {
  set_has_assistnum();
  assistnum_ = value;
}

// -------------------------------------------------------------------

// stReqDamageSortlist

// optional uint32 beginRank = 1;
inline bool stReqDamageSortlist::has_beginrank() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqDamageSortlist::set_has_beginrank() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqDamageSortlist::clear_has_beginrank() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqDamageSortlist::clear_beginrank() {
  beginrank_ = 0u;
  clear_has_beginrank();
}
inline ::google::protobuf::uint32 stReqDamageSortlist::beginrank() const {
  return beginrank_;
}
inline void stReqDamageSortlist::set_beginrank(::google::protobuf::uint32 value) {
  set_has_beginrank();
  beginrank_ = value;
}

// -------------------------------------------------------------------

// stDamageSortItemInfo

// optional uint32 charID = 1;
inline bool stDamageSortItemInfo::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stDamageSortItemInfo::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stDamageSortItemInfo::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stDamageSortItemInfo::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stDamageSortItemInfo::charid() const {
  return charid_;
}
inline void stDamageSortItemInfo::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 damage = 2;
inline bool stDamageSortItemInfo::has_damage() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stDamageSortItemInfo::set_has_damage() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stDamageSortItemInfo::clear_has_damage() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stDamageSortItemInfo::clear_damage() {
  damage_ = 0u;
  clear_has_damage();
}
inline ::google::protobuf::uint32 stDamageSortItemInfo::damage() const {
  return damage_;
}
inline void stDamageSortItemInfo::set_damage(::google::protobuf::uint32 value) {
  set_has_damage();
  damage_ = value;
}

// -------------------------------------------------------------------

// stRetDamageSortlist

// optional uint32 beginRank = 1;
inline bool stRetDamageSortlist::has_beginrank() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRetDamageSortlist::set_has_beginrank() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRetDamageSortlist::clear_has_beginrank() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRetDamageSortlist::clear_beginrank() {
  beginrank_ = 0u;
  clear_has_beginrank();
}
inline ::google::protobuf::uint32 stRetDamageSortlist::beginrank() const {
  return beginrank_;
}
inline void stRetDamageSortlist::set_beginrank(::google::protobuf::uint32 value) {
  set_has_beginrank();
  beginrank_ = value;
}

// repeated .GuildProto.stDamageSortItemInfo sortItem = 2;
inline int stRetDamageSortlist::sortitem_size() const {
  return sortitem_.size();
}
inline void stRetDamageSortlist::clear_sortitem() {
  sortitem_.Clear();
}
inline const ::GuildProto::stDamageSortItemInfo& stRetDamageSortlist::sortitem(int index) const {
  return sortitem_.Get(index);
}
inline ::GuildProto::stDamageSortItemInfo* stRetDamageSortlist::mutable_sortitem(int index) {
  return sortitem_.Mutable(index);
}
inline ::GuildProto::stDamageSortItemInfo* stRetDamageSortlist::add_sortitem() {
  return sortitem_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GuildProto::stDamageSortItemInfo >&
stRetDamageSortlist::sortitem() const {
  return sortitem_;
}
inline ::google::protobuf::RepeatedPtrField< ::GuildProto::stDamageSortItemInfo >*
stRetDamageSortlist::mutable_sortitem() {
  return &sortitem_;
}

// optional uint32 myRank = 3;
inline bool stRetDamageSortlist::has_myrank() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stRetDamageSortlist::set_has_myrank() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stRetDamageSortlist::clear_has_myrank() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stRetDamageSortlist::clear_myrank() {
  myrank_ = 0u;
  clear_has_myrank();
}
inline ::google::protobuf::uint32 stRetDamageSortlist::myrank() const {
  return myrank_;
}
inline void stRetDamageSortlist::set_myrank(::google::protobuf::uint32 value) {
  set_has_myrank();
  myrank_ = value;
}

// -------------------------------------------------------------------

// stCopymapScoreSortItem

// optional uint32 guildID = 1;
inline bool stCopymapScoreSortItem::has_guildid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stCopymapScoreSortItem::set_has_guildid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stCopymapScoreSortItem::clear_has_guildid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stCopymapScoreSortItem::clear_guildid() {
  guildid_ = 0u;
  clear_has_guildid();
}
inline ::google::protobuf::uint32 stCopymapScoreSortItem::guildid() const {
  return guildid_;
}
inline void stCopymapScoreSortItem::set_guildid(::google::protobuf::uint32 value) {
  set_has_guildid();
  guildid_ = value;
}

// optional string name = 2;
inline bool stCopymapScoreSortItem::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stCopymapScoreSortItem::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stCopymapScoreSortItem::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stCopymapScoreSortItem::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& stCopymapScoreSortItem::name() const {
  return *name_;
}
inline void stCopymapScoreSortItem::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stCopymapScoreSortItem::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stCopymapScoreSortItem::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stCopymapScoreSortItem::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* stCopymapScoreSortItem::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stCopymapScoreSortItem::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 score = 3;
inline bool stCopymapScoreSortItem::has_score() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stCopymapScoreSortItem::set_has_score() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stCopymapScoreSortItem::clear_has_score() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stCopymapScoreSortItem::clear_score() {
  score_ = 0u;
  clear_has_score();
}
inline ::google::protobuf::uint32 stCopymapScoreSortItem::score() const {
  return score_;
}
inline void stCopymapScoreSortItem::set_score(::google::protobuf::uint32 value) {
  set_has_score();
  score_ = value;
}

// -------------------------------------------------------------------

// stReqGuildCopymapScoreSortlist

// optional uint32 beginRank = 1;
inline bool stReqGuildCopymapScoreSortlist::has_beginrank() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqGuildCopymapScoreSortlist::set_has_beginrank() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqGuildCopymapScoreSortlist::clear_has_beginrank() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqGuildCopymapScoreSortlist::clear_beginrank() {
  beginrank_ = 0u;
  clear_has_beginrank();
}
inline ::google::protobuf::uint32 stReqGuildCopymapScoreSortlist::beginrank() const {
  return beginrank_;
}
inline void stReqGuildCopymapScoreSortlist::set_beginrank(::google::protobuf::uint32 value) {
  set_has_beginrank();
  beginrank_ = value;
}

// optional uint32 copymapID = 2;
inline bool stReqGuildCopymapScoreSortlist::has_copymapid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stReqGuildCopymapScoreSortlist::set_has_copymapid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stReqGuildCopymapScoreSortlist::clear_has_copymapid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stReqGuildCopymapScoreSortlist::clear_copymapid() {
  copymapid_ = 0u;
  clear_has_copymapid();
}
inline ::google::protobuf::uint32 stReqGuildCopymapScoreSortlist::copymapid() const {
  return copymapid_;
}
inline void stReqGuildCopymapScoreSortlist::set_copymapid(::google::protobuf::uint32 value) {
  set_has_copymapid();
  copymapid_ = value;
}

// -------------------------------------------------------------------

// stRetGuildCopymapScoreSortlist

// optional uint32 beginRank = 1;
inline bool stRetGuildCopymapScoreSortlist::has_beginrank() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRetGuildCopymapScoreSortlist::set_has_beginrank() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRetGuildCopymapScoreSortlist::clear_has_beginrank() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRetGuildCopymapScoreSortlist::clear_beginrank() {
  beginrank_ = 0u;
  clear_has_beginrank();
}
inline ::google::protobuf::uint32 stRetGuildCopymapScoreSortlist::beginrank() const {
  return beginrank_;
}
inline void stRetGuildCopymapScoreSortlist::set_beginrank(::google::protobuf::uint32 value) {
  set_has_beginrank();
  beginrank_ = value;
}

// optional uint32 copymapID = 2;
inline bool stRetGuildCopymapScoreSortlist::has_copymapid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stRetGuildCopymapScoreSortlist::set_has_copymapid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stRetGuildCopymapScoreSortlist::clear_has_copymapid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stRetGuildCopymapScoreSortlist::clear_copymapid() {
  copymapid_ = 0u;
  clear_has_copymapid();
}
inline ::google::protobuf::uint32 stRetGuildCopymapScoreSortlist::copymapid() const {
  return copymapid_;
}
inline void stRetGuildCopymapScoreSortlist::set_copymapid(::google::protobuf::uint32 value) {
  set_has_copymapid();
  copymapid_ = value;
}

// repeated .GuildProto.stCopymapScoreSortItem sortItem = 3;
inline int stRetGuildCopymapScoreSortlist::sortitem_size() const {
  return sortitem_.size();
}
inline void stRetGuildCopymapScoreSortlist::clear_sortitem() {
  sortitem_.Clear();
}
inline const ::GuildProto::stCopymapScoreSortItem& stRetGuildCopymapScoreSortlist::sortitem(int index) const {
  return sortitem_.Get(index);
}
inline ::GuildProto::stCopymapScoreSortItem* stRetGuildCopymapScoreSortlist::mutable_sortitem(int index) {
  return sortitem_.Mutable(index);
}
inline ::GuildProto::stCopymapScoreSortItem* stRetGuildCopymapScoreSortlist::add_sortitem() {
  return sortitem_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GuildProto::stCopymapScoreSortItem >&
stRetGuildCopymapScoreSortlist::sortitem() const {
  return sortitem_;
}
inline ::google::protobuf::RepeatedPtrField< ::GuildProto::stCopymapScoreSortItem >*
stRetGuildCopymapScoreSortlist::mutable_sortitem() {
  return &sortitem_;
}

// optional uint32 myRank = 4;
inline bool stRetGuildCopymapScoreSortlist::has_myrank() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stRetGuildCopymapScoreSortlist::set_has_myrank() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stRetGuildCopymapScoreSortlist::clear_has_myrank() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stRetGuildCopymapScoreSortlist::clear_myrank() {
  myrank_ = 0u;
  clear_has_myrank();
}
inline ::google::protobuf::uint32 stRetGuildCopymapScoreSortlist::myrank() const {
  return myrank_;
}
inline void stRetGuildCopymapScoreSortlist::set_myrank(::google::protobuf::uint32 value) {
  set_has_myrank();
  myrank_ = value;
}

// -------------------------------------------------------------------

// stSynGuildActivityDegree

// optional uint32 value = 1;
inline bool stSynGuildActivityDegree::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSynGuildActivityDegree::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSynGuildActivityDegree::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSynGuildActivityDegree::clear_value() {
  value_ = 0u;
  clear_has_value();
}
inline ::google::protobuf::uint32 stSynGuildActivityDegree::value() const {
  return value_;
}
inline void stSynGuildActivityDegree::set_value(::google::protobuf::uint32 value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// stSynMemberChallengeNum

// optional uint32 charID = 1;
inline bool stSynMemberChallengeNum::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSynMemberChallengeNum::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSynMemberChallengeNum::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSynMemberChallengeNum::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stSynMemberChallengeNum::charid() const {
  return charid_;
}
inline void stSynMemberChallengeNum::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 challengeNum = 2;
inline bool stSynMemberChallengeNum::has_challengenum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stSynMemberChallengeNum::set_has_challengenum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stSynMemberChallengeNum::clear_has_challengenum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stSynMemberChallengeNum::clear_challengenum() {
  challengenum_ = 0u;
  clear_has_challengenum();
}
inline ::google::protobuf::uint32 stSynMemberChallengeNum::challengenum() const {
  return challengenum_;
}
inline void stSynMemberChallengeNum::set_challengenum(::google::protobuf::uint32 value) {
  set_has_challengenum();
  challengenum_ = value;
}

// -------------------------------------------------------------------

// stSynMemberAssistNum

// optional uint32 charID = 1;
inline bool stSynMemberAssistNum::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSynMemberAssistNum::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSynMemberAssistNum::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSynMemberAssistNum::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stSynMemberAssistNum::charid() const {
  return charid_;
}
inline void stSynMemberAssistNum::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 assistNum = 2;
inline bool stSynMemberAssistNum::has_assistnum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stSynMemberAssistNum::set_has_assistnum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stSynMemberAssistNum::clear_has_assistnum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stSynMemberAssistNum::clear_assistnum() {
  assistnum_ = 0u;
  clear_has_assistnum();
}
inline ::google::protobuf::uint32 stSynMemberAssistNum::assistnum() const {
  return assistnum_;
}
inline void stSynMemberAssistNum::set_assistnum(::google::protobuf::uint32 value) {
  set_has_assistnum();
  assistnum_ = value;
}

// -------------------------------------------------------------------

// stReqEnterGuildCopymap

// optional uint32 copymapID = 1;
inline bool stReqEnterGuildCopymap::has_copymapid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqEnterGuildCopymap::set_has_copymapid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqEnterGuildCopymap::clear_has_copymapid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqEnterGuildCopymap::clear_copymapid() {
  copymapid_ = 0u;
  clear_has_copymapid();
}
inline ::google::protobuf::uint32 stReqEnterGuildCopymap::copymapid() const {
  return copymapid_;
}
inline void stReqEnterGuildCopymap::set_copymapid(::google::protobuf::uint32 value) {
  set_has_copymapid();
  copymapid_ = value;
}

// -------------------------------------------------------------------

// stRetEnterGuildCopymapResult

// optional .GuildProto.stRetEnterGuildCopymapResult.eResult result = 1;
inline bool stRetEnterGuildCopymapResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRetEnterGuildCopymapResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRetEnterGuildCopymapResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRetEnterGuildCopymapResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::GuildProto::stRetEnterGuildCopymapResult_eResult stRetEnterGuildCopymapResult::result() const {
  return static_cast< ::GuildProto::stRetEnterGuildCopymapResult_eResult >(result_);
}
inline void stRetEnterGuildCopymapResult::set_result(::GuildProto::stRetEnterGuildCopymapResult_eResult value) {
  assert(::GuildProto::stRetEnterGuildCopymapResult_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stStartGuildCopymap

// optional uint32 copymapID = 1;
inline bool stStartGuildCopymap::has_copymapid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stStartGuildCopymap::set_has_copymapid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stStartGuildCopymap::clear_has_copymapid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stStartGuildCopymap::clear_copymapid() {
  copymapid_ = 0u;
  clear_has_copymapid();
}
inline ::google::protobuf::uint32 stStartGuildCopymap::copymapid() const {
  return copymapid_;
}
inline void stStartGuildCopymap::set_copymapid(::google::protobuf::uint32 value) {
  set_has_copymapid();
  copymapid_ = value;
}

// -------------------------------------------------------------------

// stStartGuildCopymapResult

// optional .GuildProto.stStartGuildCopymapResult.eResult result = 1;
inline bool stStartGuildCopymapResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stStartGuildCopymapResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stStartGuildCopymapResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stStartGuildCopymapResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::GuildProto::stStartGuildCopymapResult_eResult stStartGuildCopymapResult::result() const {
  return static_cast< ::GuildProto::stStartGuildCopymapResult_eResult >(result_);
}
inline void stStartGuildCopymapResult::set_result(::GuildProto::stStartGuildCopymapResult_eResult value) {
  assert(::GuildProto::stStartGuildCopymapResult_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional uint32 startTime = 2;
inline bool stStartGuildCopymapResult::has_starttime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stStartGuildCopymapResult::set_has_starttime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stStartGuildCopymapResult::clear_has_starttime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stStartGuildCopymapResult::clear_starttime() {
  starttime_ = 0u;
  clear_has_starttime();
}
inline ::google::protobuf::uint32 stStartGuildCopymapResult::starttime() const {
  return starttime_;
}
inline void stStartGuildCopymapResult::set_starttime(::google::protobuf::uint32 value) {
  set_has_starttime();
  starttime_ = value;
}

// optional uint32 copymapID = 3;
inline bool stStartGuildCopymapResult::has_copymapid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stStartGuildCopymapResult::set_has_copymapid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stStartGuildCopymapResult::clear_has_copymapid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stStartGuildCopymapResult::clear_copymapid() {
  copymapid_ = 0u;
  clear_has_copymapid();
}
inline ::google::protobuf::uint32 stStartGuildCopymapResult::copymapid() const {
  return copymapid_;
}
inline void stStartGuildCopymapResult::set_copymapid(::google::protobuf::uint32 value) {
  set_has_copymapid();
  copymapid_ = value;
}

// -------------------------------------------------------------------

// stInviteTeamInGuildChannel

// optional uint32 charID = 1;
inline bool stInviteTeamInGuildChannel::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stInviteTeamInGuildChannel::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stInviteTeamInGuildChannel::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stInviteTeamInGuildChannel::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stInviteTeamInGuildChannel::charid() const {
  return charid_;
}
inline void stInviteTeamInGuildChannel::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stNotifyGuildMemContribute

// optional uint32 charID = 1;
inline bool stNotifyGuildMemContribute::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stNotifyGuildMemContribute::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stNotifyGuildMemContribute::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stNotifyGuildMemContribute::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stNotifyGuildMemContribute::charid() const {
  return charid_;
}
inline void stNotifyGuildMemContribute::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 curVal = 2;
inline bool stNotifyGuildMemContribute::has_curval() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stNotifyGuildMemContribute::set_has_curval() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stNotifyGuildMemContribute::clear_has_curval() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stNotifyGuildMemContribute::clear_curval() {
  curval_ = 0u;
  clear_has_curval();
}
inline ::google::protobuf::uint32 stNotifyGuildMemContribute::curval() const {
  return curval_;
}
inline void stNotifyGuildMemContribute::set_curval(::google::protobuf::uint32 value) {
  set_has_curval();
  curval_ = value;
}

// -------------------------------------------------------------------

// stNotifyGuildMemActivityDegree

// optional uint32 charID = 1;
inline bool stNotifyGuildMemActivityDegree::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stNotifyGuildMemActivityDegree::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stNotifyGuildMemActivityDegree::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stNotifyGuildMemActivityDegree::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stNotifyGuildMemActivityDegree::charid() const {
  return charid_;
}
inline void stNotifyGuildMemActivityDegree::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 curVal = 2;
inline bool stNotifyGuildMemActivityDegree::has_curval() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stNotifyGuildMemActivityDegree::set_has_curval() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stNotifyGuildMemActivityDegree::clear_has_curval() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stNotifyGuildMemActivityDegree::clear_curval() {
  curval_ = 0u;
  clear_has_curval();
}
inline ::google::protobuf::uint32 stNotifyGuildMemActivityDegree::curval() const {
  return curval_;
}
inline void stNotifyGuildMemActivityDegree::set_curval(::google::protobuf::uint32 value) {
  set_has_curval();
  curval_ = value;
}

// -------------------------------------------------------------------

// stReqGuildManorFightWin

// optional uint32 charID = 1;
inline bool stReqGuildManorFightWin::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqGuildManorFightWin::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqGuildManorFightWin::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqGuildManorFightWin::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqGuildManorFightWin::charid() const {
  return charid_;
}
inline void stReqGuildManorFightWin::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stSynManorInfo

// optional uint32 manorID = 1;
inline bool stSynManorInfo::has_manorid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSynManorInfo::set_has_manorid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSynManorInfo::clear_has_manorid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSynManorInfo::clear_manorid() {
  manorid_ = 0u;
  clear_has_manorid();
}
inline ::google::protobuf::uint32 stSynManorInfo::manorid() const {
  return manorid_;
}
inline void stSynManorInfo::set_manorid(::google::protobuf::uint32 value) {
  set_has_manorid();
  manorid_ = value;
}

// optional uint32 ownerGuildID = 2;
inline bool stSynManorInfo::has_ownerguildid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stSynManorInfo::set_has_ownerguildid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stSynManorInfo::clear_has_ownerguildid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stSynManorInfo::clear_ownerguildid() {
  ownerguildid_ = 0u;
  clear_has_ownerguildid();
}
inline ::google::protobuf::uint32 stSynManorInfo::ownerguildid() const {
  return ownerguildid_;
}
inline void stSynManorInfo::set_ownerguildid(::google::protobuf::uint32 value) {
  set_has_ownerguildid();
  ownerguildid_ = value;
}

// optional string ownerGuildName = 3;
inline bool stSynManorInfo::has_ownerguildname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stSynManorInfo::set_has_ownerguildname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stSynManorInfo::clear_has_ownerguildname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stSynManorInfo::clear_ownerguildname() {
  if (ownerguildname_ != &::google::protobuf::internal::kEmptyString) {
    ownerguildname_->clear();
  }
  clear_has_ownerguildname();
}
inline const ::std::string& stSynManorInfo::ownerguildname() const {
  return *ownerguildname_;
}
inline void stSynManorInfo::set_ownerguildname(const ::std::string& value) {
  set_has_ownerguildname();
  if (ownerguildname_ == &::google::protobuf::internal::kEmptyString) {
    ownerguildname_ = new ::std::string;
  }
  ownerguildname_->assign(value);
}
inline void stSynManorInfo::set_ownerguildname(const char* value) {
  set_has_ownerguildname();
  if (ownerguildname_ == &::google::protobuf::internal::kEmptyString) {
    ownerguildname_ = new ::std::string;
  }
  ownerguildname_->assign(value);
}
inline void stSynManorInfo::set_ownerguildname(const char* value, size_t size) {
  set_has_ownerguildname();
  if (ownerguildname_ == &::google::protobuf::internal::kEmptyString) {
    ownerguildname_ = new ::std::string;
  }
  ownerguildname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stSynManorInfo::mutable_ownerguildname() {
  set_has_ownerguildname();
  if (ownerguildname_ == &::google::protobuf::internal::kEmptyString) {
    ownerguildname_ = new ::std::string;
  }
  return ownerguildname_;
}
inline ::std::string* stSynManorInfo::release_ownerguildname() {
  clear_has_ownerguildname();
  if (ownerguildname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ownerguildname_;
    ownerguildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stSynManorInfo::set_allocated_ownerguildname(::std::string* ownerguildname) {
  if (ownerguildname_ != &::google::protobuf::internal::kEmptyString) {
    delete ownerguildname_;
  }
  if (ownerguildname) {
    set_has_ownerguildname();
    ownerguildname_ = ownerguildname;
  } else {
    clear_has_ownerguildname();
    ownerguildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 sideAGuildID = 4;
inline bool stSynManorInfo::has_sideaguildid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stSynManorInfo::set_has_sideaguildid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stSynManorInfo::clear_has_sideaguildid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stSynManorInfo::clear_sideaguildid() {
  sideaguildid_ = 0u;
  clear_has_sideaguildid();
}
inline ::google::protobuf::uint32 stSynManorInfo::sideaguildid() const {
  return sideaguildid_;
}
inline void stSynManorInfo::set_sideaguildid(::google::protobuf::uint32 value) {
  set_has_sideaguildid();
  sideaguildid_ = value;
}

// optional uint32 sideBGuildID = 5;
inline bool stSynManorInfo::has_sidebguildid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stSynManorInfo::set_has_sidebguildid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stSynManorInfo::clear_has_sidebguildid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stSynManorInfo::clear_sidebguildid() {
  sidebguildid_ = 0u;
  clear_has_sidebguildid();
}
inline ::google::protobuf::uint32 stSynManorInfo::sidebguildid() const {
  return sidebguildid_;
}
inline void stSynManorInfo::set_sidebguildid(::google::protobuf::uint32 value) {
  set_has_sidebguildid();
  sidebguildid_ = value;
}

// -------------------------------------------------------------------

// stRetGuildManorFightInfo

// repeated .GuildProto.stSynManorInfo manorInfos = 1;
inline int stRetGuildManorFightInfo::manorinfos_size() const {
  return manorinfos_.size();
}
inline void stRetGuildManorFightInfo::clear_manorinfos() {
  manorinfos_.Clear();
}
inline const ::GuildProto::stSynManorInfo& stRetGuildManorFightInfo::manorinfos(int index) const {
  return manorinfos_.Get(index);
}
inline ::GuildProto::stSynManorInfo* stRetGuildManorFightInfo::mutable_manorinfos(int index) {
  return manorinfos_.Mutable(index);
}
inline ::GuildProto::stSynManorInfo* stRetGuildManorFightInfo::add_manorinfos() {
  return manorinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GuildProto::stSynManorInfo >&
stRetGuildManorFightInfo::manorinfos() const {
  return manorinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::GuildProto::stSynManorInfo >*
stRetGuildManorFightInfo::mutable_manorinfos() {
  return &manorinfos_;
}

// optional uint32 applyManorID = 2;
inline bool stRetGuildManorFightInfo::has_applymanorid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stRetGuildManorFightInfo::set_has_applymanorid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stRetGuildManorFightInfo::clear_has_applymanorid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stRetGuildManorFightInfo::clear_applymanorid() {
  applymanorid_ = 0u;
  clear_has_applymanorid();
}
inline ::google::protobuf::uint32 stRetGuildManorFightInfo::applymanorid() const {
  return applymanorid_;
}
inline void stRetGuildManorFightInfo::set_applymanorid(::google::protobuf::uint32 value) {
  set_has_applymanorid();
  applymanorid_ = value;
}

// -------------------------------------------------------------------

// stReqOpenApplyManorFightWin

// optional uint32 manorID = 1;
inline bool stReqOpenApplyManorFightWin::has_manorid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqOpenApplyManorFightWin::set_has_manorid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqOpenApplyManorFightWin::clear_has_manorid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqOpenApplyManorFightWin::clear_manorid() {
  manorid_ = 0u;
  clear_has_manorid();
}
inline ::google::protobuf::uint32 stReqOpenApplyManorFightWin::manorid() const {
  return manorid_;
}
inline void stReqOpenApplyManorFightWin::set_manorid(::google::protobuf::uint32 value) {
  set_has_manorid();
  manorid_ = value;
}

// -------------------------------------------------------------------

// stSynManoryApplyInfo

// optional uint32 guildID = 1;
inline bool stSynManoryApplyInfo::has_guildid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSynManoryApplyInfo::set_has_guildid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSynManoryApplyInfo::clear_has_guildid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSynManoryApplyInfo::clear_guildid() {
  guildid_ = 0u;
  clear_has_guildid();
}
inline ::google::protobuf::uint32 stSynManoryApplyInfo::guildid() const {
  return guildid_;
}
inline void stSynManoryApplyInfo::set_guildid(::google::protobuf::uint32 value) {
  set_has_guildid();
  guildid_ = value;
}

// optional string guildName = 2;
inline bool stSynManoryApplyInfo::has_guildname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stSynManoryApplyInfo::set_has_guildname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stSynManoryApplyInfo::clear_has_guildname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stSynManoryApplyInfo::clear_guildname() {
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    guildname_->clear();
  }
  clear_has_guildname();
}
inline const ::std::string& stSynManoryApplyInfo::guildname() const {
  return *guildname_;
}
inline void stSynManoryApplyInfo::set_guildname(const ::std::string& value) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
}
inline void stSynManoryApplyInfo::set_guildname(const char* value) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
}
inline void stSynManoryApplyInfo::set_guildname(const char* value, size_t size) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stSynManoryApplyInfo::mutable_guildname() {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  return guildname_;
}
inline ::std::string* stSynManoryApplyInfo::release_guildname() {
  clear_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = guildname_;
    guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stSynManoryApplyInfo::set_allocated_guildname(::std::string* guildname) {
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    delete guildname_;
  }
  if (guildname) {
    set_has_guildname();
    guildname_ = guildname;
  } else {
    clear_has_guildname();
    guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 contribute = 3;
inline bool stSynManoryApplyInfo::has_contribute() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stSynManoryApplyInfo::set_has_contribute() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stSynManoryApplyInfo::clear_has_contribute() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stSynManoryApplyInfo::clear_contribute() {
  contribute_ = 0u;
  clear_has_contribute();
}
inline ::google::protobuf::uint32 stSynManoryApplyInfo::contribute() const {
  return contribute_;
}
inline void stSynManoryApplyInfo::set_contribute(::google::protobuf::uint32 value) {
  set_has_contribute();
  contribute_ = value;
}

// -------------------------------------------------------------------

// stApplyManorWinInfo

// optional uint32 manorID = 1;
inline bool stApplyManorWinInfo::has_manorid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stApplyManorWinInfo::set_has_manorid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stApplyManorWinInfo::clear_has_manorid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stApplyManorWinInfo::clear_manorid() {
  manorid_ = 0u;
  clear_has_manorid();
}
inline ::google::protobuf::uint32 stApplyManorWinInfo::manorid() const {
  return manorid_;
}
inline void stApplyManorWinInfo::set_manorid(::google::protobuf::uint32 value) {
  set_has_manorid();
  manorid_ = value;
}

// repeated .GuildProto.stSynManoryApplyInfo applyInfo = 2;
inline int stApplyManorWinInfo::applyinfo_size() const {
  return applyinfo_.size();
}
inline void stApplyManorWinInfo::clear_applyinfo() {
  applyinfo_.Clear();
}
inline const ::GuildProto::stSynManoryApplyInfo& stApplyManorWinInfo::applyinfo(int index) const {
  return applyinfo_.Get(index);
}
inline ::GuildProto::stSynManoryApplyInfo* stApplyManorWinInfo::mutable_applyinfo(int index) {
  return applyinfo_.Mutable(index);
}
inline ::GuildProto::stSynManoryApplyInfo* stApplyManorWinInfo::add_applyinfo() {
  return applyinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GuildProto::stSynManoryApplyInfo >&
stApplyManorWinInfo::applyinfo() const {
  return applyinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::GuildProto::stSynManoryApplyInfo >*
stApplyManorWinInfo::mutable_applyinfo() {
  return &applyinfo_;
}

// -------------------------------------------------------------------

// stRefreshManorApplyInfo

// optional uint32 manorID = 1;
inline bool stRefreshManorApplyInfo::has_manorid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRefreshManorApplyInfo::set_has_manorid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRefreshManorApplyInfo::clear_has_manorid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRefreshManorApplyInfo::clear_manorid() {
  manorid_ = 0u;
  clear_has_manorid();
}
inline ::google::protobuf::uint32 stRefreshManorApplyInfo::manorid() const {
  return manorid_;
}
inline void stRefreshManorApplyInfo::set_manorid(::google::protobuf::uint32 value) {
  set_has_manorid();
  manorid_ = value;
}

// -------------------------------------------------------------------

// stRetManorApplyInfo

// optional uint32 manorID = 1;
inline bool stRetManorApplyInfo::has_manorid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRetManorApplyInfo::set_has_manorid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRetManorApplyInfo::clear_has_manorid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRetManorApplyInfo::clear_manorid() {
  manorid_ = 0u;
  clear_has_manorid();
}
inline ::google::protobuf::uint32 stRetManorApplyInfo::manorid() const {
  return manorid_;
}
inline void stRetManorApplyInfo::set_manorid(::google::protobuf::uint32 value) {
  set_has_manorid();
  manorid_ = value;
}

// repeated .GuildProto.stSynManoryApplyInfo applyInfo = 2;
inline int stRetManorApplyInfo::applyinfo_size() const {
  return applyinfo_.size();
}
inline void stRetManorApplyInfo::clear_applyinfo() {
  applyinfo_.Clear();
}
inline const ::GuildProto::stSynManoryApplyInfo& stRetManorApplyInfo::applyinfo(int index) const {
  return applyinfo_.Get(index);
}
inline ::GuildProto::stSynManoryApplyInfo* stRetManorApplyInfo::mutable_applyinfo(int index) {
  return applyinfo_.Mutable(index);
}
inline ::GuildProto::stSynManoryApplyInfo* stRetManorApplyInfo::add_applyinfo() {
  return applyinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GuildProto::stSynManoryApplyInfo >&
stRetManorApplyInfo::applyinfo() const {
  return applyinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::GuildProto::stSynManoryApplyInfo >*
stRetManorApplyInfo::mutable_applyinfo() {
  return &applyinfo_;
}

// -------------------------------------------------------------------

// stApplyManorFight

// optional uint32 manorID = 1;
inline bool stApplyManorFight::has_manorid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stApplyManorFight::set_has_manorid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stApplyManorFight::clear_has_manorid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stApplyManorFight::clear_manorid() {
  manorid_ = 0u;
  clear_has_manorid();
}
inline ::google::protobuf::uint32 stApplyManorFight::manorid() const {
  return manorid_;
}
inline void stApplyManorFight::set_manorid(::google::protobuf::uint32 value) {
  set_has_manorid();
  manorid_ = value;
}

// optional uint32 contribute = 2;
inline bool stApplyManorFight::has_contribute() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stApplyManorFight::set_has_contribute() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stApplyManorFight::clear_has_contribute() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stApplyManorFight::clear_contribute() {
  contribute_ = 0u;
  clear_has_contribute();
}
inline ::google::protobuf::uint32 stApplyManorFight::contribute() const {
  return contribute_;
}
inline void stApplyManorFight::set_contribute(::google::protobuf::uint32 value) {
  set_has_contribute();
  contribute_ = value;
}

// -------------------------------------------------------------------

// stApplyManorFightRet

// optional .GuildProto.stApplyManorFightRet.eResult result = 1;
inline bool stApplyManorFightRet::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stApplyManorFightRet::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stApplyManorFightRet::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stApplyManorFightRet::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::GuildProto::stApplyManorFightRet_eResult stApplyManorFightRet::result() const {
  return static_cast< ::GuildProto::stApplyManorFightRet_eResult >(result_);
}
inline void stApplyManorFightRet::set_result(::GuildProto::stApplyManorFightRet_eResult value) {
  assert(::GuildProto::stApplyManorFightRet_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional uint32 manorID = 2;
inline bool stApplyManorFightRet::has_manorid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stApplyManorFightRet::set_has_manorid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stApplyManorFightRet::clear_has_manorid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stApplyManorFightRet::clear_manorid() {
  manorid_ = 0u;
  clear_has_manorid();
}
inline ::google::protobuf::uint32 stApplyManorFightRet::manorid() const {
  return manorid_;
}
inline void stApplyManorFightRet::set_manorid(::google::protobuf::uint32 value) {
  set_has_manorid();
  manorid_ = value;
}

// optional uint32 contribute = 3;
inline bool stApplyManorFightRet::has_contribute() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stApplyManorFightRet::set_has_contribute() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stApplyManorFightRet::clear_has_contribute() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stApplyManorFightRet::clear_contribute() {
  contribute_ = 0u;
  clear_has_contribute();
}
inline ::google::protobuf::uint32 stApplyManorFightRet::contribute() const {
  return contribute_;
}
inline void stApplyManorFightRet::set_contribute(::google::protobuf::uint32 value) {
  set_has_contribute();
  contribute_ = value;
}

// optional uint32 guildID = 4;
inline bool stApplyManorFightRet::has_guildid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stApplyManorFightRet::set_has_guildid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stApplyManorFightRet::clear_has_guildid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stApplyManorFightRet::clear_guildid() {
  guildid_ = 0u;
  clear_has_guildid();
}
inline ::google::protobuf::uint32 stApplyManorFightRet::guildid() const {
  return guildid_;
}
inline void stApplyManorFightRet::set_guildid(::google::protobuf::uint32 value) {
  set_has_guildid();
  guildid_ = value;
}

// -------------------------------------------------------------------

// stReqManorFightWin

// optional uint32 manorID = 1;
inline bool stReqManorFightWin::has_manorid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqManorFightWin::set_has_manorid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqManorFightWin::clear_has_manorid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqManorFightWin::clear_manorid() {
  manorid_ = 0u;
  clear_has_manorid();
}
inline ::google::protobuf::uint32 stReqManorFightWin::manorid() const {
  return manorid_;
}
inline void stReqManorFightWin::set_manorid(::google::protobuf::uint32 value) {
  set_has_manorid();
  manorid_ = value;
}

// -------------------------------------------------------------------

// stSynFormationTeamInfo

// optional uint32 teamID = 1;
inline bool stSynFormationTeamInfo::has_teamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSynFormationTeamInfo::set_has_teamid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSynFormationTeamInfo::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSynFormationTeamInfo::clear_teamid() {
  teamid_ = 0u;
  clear_has_teamid();
}
inline ::google::protobuf::uint32 stSynFormationTeamInfo::teamid() const {
  return teamid_;
}
inline void stSynFormationTeamInfo::set_teamid(::google::protobuf::uint32 value) {
  set_has_teamid();
  teamid_ = value;
}

// optional uint32 num = 2;
inline bool stSynFormationTeamInfo::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stSynFormationTeamInfo::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stSynFormationTeamInfo::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stSynFormationTeamInfo::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 stSynFormationTeamInfo::num() const {
  return num_;
}
inline void stSynFormationTeamInfo::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
}

// -------------------------------------------------------------------

// stRetManorFightWinInfo

// repeated .GuildProto.stSynFormationTeamInfo mainJoinInNum = 1;
inline int stRetManorFightWinInfo::mainjoininnum_size() const {
  return mainjoininnum_.size();
}
inline void stRetManorFightWinInfo::clear_mainjoininnum() {
  mainjoininnum_.Clear();
}
inline const ::GuildProto::stSynFormationTeamInfo& stRetManorFightWinInfo::mainjoininnum(int index) const {
  return mainjoininnum_.Get(index);
}
inline ::GuildProto::stSynFormationTeamInfo* stRetManorFightWinInfo::mutable_mainjoininnum(int index) {
  return mainjoininnum_.Mutable(index);
}
inline ::GuildProto::stSynFormationTeamInfo* stRetManorFightWinInfo::add_mainjoininnum() {
  return mainjoininnum_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GuildProto::stSynFormationTeamInfo >&
stRetManorFightWinInfo::mainjoininnum() const {
  return mainjoininnum_;
}
inline ::google::protobuf::RepeatedPtrField< ::GuildProto::stSynFormationTeamInfo >*
stRetManorFightWinInfo::mutable_mainjoininnum() {
  return &mainjoininnum_;
}

// repeated .GuildProto.stSynFormationTeamInfo leftJoinInNum = 2;
inline int stRetManorFightWinInfo::leftjoininnum_size() const {
  return leftjoininnum_.size();
}
inline void stRetManorFightWinInfo::clear_leftjoininnum() {
  leftjoininnum_.Clear();
}
inline const ::GuildProto::stSynFormationTeamInfo& stRetManorFightWinInfo::leftjoininnum(int index) const {
  return leftjoininnum_.Get(index);
}
inline ::GuildProto::stSynFormationTeamInfo* stRetManorFightWinInfo::mutable_leftjoininnum(int index) {
  return leftjoininnum_.Mutable(index);
}
inline ::GuildProto::stSynFormationTeamInfo* stRetManorFightWinInfo::add_leftjoininnum() {
  return leftjoininnum_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GuildProto::stSynFormationTeamInfo >&
stRetManorFightWinInfo::leftjoininnum() const {
  return leftjoininnum_;
}
inline ::google::protobuf::RepeatedPtrField< ::GuildProto::stSynFormationTeamInfo >*
stRetManorFightWinInfo::mutable_leftjoininnum() {
  return &leftjoininnum_;
}

// repeated .GuildProto.stSynFormationTeamInfo rightJoinInNum = 3;
inline int stRetManorFightWinInfo::rightjoininnum_size() const {
  return rightjoininnum_.size();
}
inline void stRetManorFightWinInfo::clear_rightjoininnum() {
  rightjoininnum_.Clear();
}
inline const ::GuildProto::stSynFormationTeamInfo& stRetManorFightWinInfo::rightjoininnum(int index) const {
  return rightjoininnum_.Get(index);
}
inline ::GuildProto::stSynFormationTeamInfo* stRetManorFightWinInfo::mutable_rightjoininnum(int index) {
  return rightjoininnum_.Mutable(index);
}
inline ::GuildProto::stSynFormationTeamInfo* stRetManorFightWinInfo::add_rightjoininnum() {
  return rightjoininnum_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GuildProto::stSynFormationTeamInfo >&
stRetManorFightWinInfo::rightjoininnum() const {
  return rightjoininnum_;
}
inline ::google::protobuf::RepeatedPtrField< ::GuildProto::stSynFormationTeamInfo >*
stRetManorFightWinInfo::mutable_rightjoininnum() {
  return &rightjoininnum_;
}

// optional uint32 manorID = 4;
inline bool stRetManorFightWinInfo::has_manorid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stRetManorFightWinInfo::set_has_manorid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stRetManorFightWinInfo::clear_has_manorid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stRetManorFightWinInfo::clear_manorid() {
  manorid_ = 0u;
  clear_has_manorid();
}
inline ::google::protobuf::uint32 stRetManorFightWinInfo::manorid() const {
  return manorid_;
}
inline void stRetManorFightWinInfo::set_manorid(::google::protobuf::uint32 value) {
  set_has_manorid();
  manorid_ = value;
}

// optional string guildAName = 5;
inline bool stRetManorFightWinInfo::has_guildaname() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stRetManorFightWinInfo::set_has_guildaname() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stRetManorFightWinInfo::clear_has_guildaname() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stRetManorFightWinInfo::clear_guildaname() {
  if (guildaname_ != &::google::protobuf::internal::kEmptyString) {
    guildaname_->clear();
  }
  clear_has_guildaname();
}
inline const ::std::string& stRetManorFightWinInfo::guildaname() const {
  return *guildaname_;
}
inline void stRetManorFightWinInfo::set_guildaname(const ::std::string& value) {
  set_has_guildaname();
  if (guildaname_ == &::google::protobuf::internal::kEmptyString) {
    guildaname_ = new ::std::string;
  }
  guildaname_->assign(value);
}
inline void stRetManorFightWinInfo::set_guildaname(const char* value) {
  set_has_guildaname();
  if (guildaname_ == &::google::protobuf::internal::kEmptyString) {
    guildaname_ = new ::std::string;
  }
  guildaname_->assign(value);
}
inline void stRetManorFightWinInfo::set_guildaname(const char* value, size_t size) {
  set_has_guildaname();
  if (guildaname_ == &::google::protobuf::internal::kEmptyString) {
    guildaname_ = new ::std::string;
  }
  guildaname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stRetManorFightWinInfo::mutable_guildaname() {
  set_has_guildaname();
  if (guildaname_ == &::google::protobuf::internal::kEmptyString) {
    guildaname_ = new ::std::string;
  }
  return guildaname_;
}
inline ::std::string* stRetManorFightWinInfo::release_guildaname() {
  clear_has_guildaname();
  if (guildaname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = guildaname_;
    guildaname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stRetManorFightWinInfo::set_allocated_guildaname(::std::string* guildaname) {
  if (guildaname_ != &::google::protobuf::internal::kEmptyString) {
    delete guildaname_;
  }
  if (guildaname) {
    set_has_guildaname();
    guildaname_ = guildaname;
  } else {
    clear_has_guildaname();
    guildaname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string guildBName = 6;
inline bool stRetManorFightWinInfo::has_guildbname() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stRetManorFightWinInfo::set_has_guildbname() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stRetManorFightWinInfo::clear_has_guildbname() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stRetManorFightWinInfo::clear_guildbname() {
  if (guildbname_ != &::google::protobuf::internal::kEmptyString) {
    guildbname_->clear();
  }
  clear_has_guildbname();
}
inline const ::std::string& stRetManorFightWinInfo::guildbname() const {
  return *guildbname_;
}
inline void stRetManorFightWinInfo::set_guildbname(const ::std::string& value) {
  set_has_guildbname();
  if (guildbname_ == &::google::protobuf::internal::kEmptyString) {
    guildbname_ = new ::std::string;
  }
  guildbname_->assign(value);
}
inline void stRetManorFightWinInfo::set_guildbname(const char* value) {
  set_has_guildbname();
  if (guildbname_ == &::google::protobuf::internal::kEmptyString) {
    guildbname_ = new ::std::string;
  }
  guildbname_->assign(value);
}
inline void stRetManorFightWinInfo::set_guildbname(const char* value, size_t size) {
  set_has_guildbname();
  if (guildbname_ == &::google::protobuf::internal::kEmptyString) {
    guildbname_ = new ::std::string;
  }
  guildbname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stRetManorFightWinInfo::mutable_guildbname() {
  set_has_guildbname();
  if (guildbname_ == &::google::protobuf::internal::kEmptyString) {
    guildbname_ = new ::std::string;
  }
  return guildbname_;
}
inline ::std::string* stRetManorFightWinInfo::release_guildbname() {
  clear_has_guildbname();
  if (guildbname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = guildbname_;
    guildbname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stRetManorFightWinInfo::set_allocated_guildbname(::std::string* guildbname) {
  if (guildbname_ != &::google::protobuf::internal::kEmptyString) {
    delete guildbname_;
  }
  if (guildbname) {
    set_has_guildbname();
    guildbname_ = guildbname;
  } else {
    clear_has_guildbname();
    guildbname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 mainWinGuildID = 7;
inline bool stRetManorFightWinInfo::has_mainwinguildid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void stRetManorFightWinInfo::set_has_mainwinguildid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void stRetManorFightWinInfo::clear_has_mainwinguildid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void stRetManorFightWinInfo::clear_mainwinguildid() {
  mainwinguildid_ = 0u;
  clear_has_mainwinguildid();
}
inline ::google::protobuf::uint32 stRetManorFightWinInfo::mainwinguildid() const {
  return mainwinguildid_;
}
inline void stRetManorFightWinInfo::set_mainwinguildid(::google::protobuf::uint32 value) {
  set_has_mainwinguildid();
  mainwinguildid_ = value;
}

// optional uint32 leftWinGuildID = 8;
inline bool stRetManorFightWinInfo::has_leftwinguildid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void stRetManorFightWinInfo::set_has_leftwinguildid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void stRetManorFightWinInfo::clear_has_leftwinguildid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void stRetManorFightWinInfo::clear_leftwinguildid() {
  leftwinguildid_ = 0u;
  clear_has_leftwinguildid();
}
inline ::google::protobuf::uint32 stRetManorFightWinInfo::leftwinguildid() const {
  return leftwinguildid_;
}
inline void stRetManorFightWinInfo::set_leftwinguildid(::google::protobuf::uint32 value) {
  set_has_leftwinguildid();
  leftwinguildid_ = value;
}

// optional uint32 rightWinGuildID = 9;
inline bool stRetManorFightWinInfo::has_rightwinguildid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void stRetManorFightWinInfo::set_has_rightwinguildid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void stRetManorFightWinInfo::clear_has_rightwinguildid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void stRetManorFightWinInfo::clear_rightwinguildid() {
  rightwinguildid_ = 0u;
  clear_has_rightwinguildid();
}
inline ::google::protobuf::uint32 stRetManorFightWinInfo::rightwinguildid() const {
  return rightwinguildid_;
}
inline void stRetManorFightWinInfo::set_rightwinguildid(::google::protobuf::uint32 value) {
  set_has_rightwinguildid();
  rightwinguildid_ = value;
}

// -------------------------------------------------------------------

// stReqManorFightFormation

// optional uint32 manorID = 1;
inline bool stReqManorFightFormation::has_manorid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqManorFightFormation::set_has_manorid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqManorFightFormation::clear_has_manorid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqManorFightFormation::clear_manorid() {
  manorid_ = 0u;
  clear_has_manorid();
}
inline ::google::protobuf::uint32 stReqManorFightFormation::manorid() const {
  return manorid_;
}
inline void stReqManorFightFormation::set_manorid(::google::protobuf::uint32 value) {
  set_has_manorid();
  manorid_ = value;
}

// optional .GuildProto.eFormation formation = 2;
inline bool stReqManorFightFormation::has_formation() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stReqManorFightFormation::set_has_formation() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stReqManorFightFormation::clear_has_formation() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stReqManorFightFormation::clear_formation() {
  formation_ = 1;
  clear_has_formation();
}
inline ::GuildProto::eFormation stReqManorFightFormation::formation() const {
  return static_cast< ::GuildProto::eFormation >(formation_);
}
inline void stReqManorFightFormation::set_formation(::GuildProto::eFormation value) {
  assert(::GuildProto::eFormation_IsValid(value));
  set_has_formation();
  formation_ = value;
}

// -------------------------------------------------------------------

// stSynManorBattleMem

// optional uint32 charID = 1;
inline bool stSynManorBattleMem::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSynManorBattleMem::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSynManorBattleMem::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSynManorBattleMem::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stSynManorBattleMem::charid() const {
  return charid_;
}
inline void stSynManorBattleMem::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional string name = 2;
inline bool stSynManorBattleMem::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stSynManorBattleMem::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stSynManorBattleMem::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stSynManorBattleMem::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& stSynManorBattleMem::name() const {
  return *name_;
}
inline void stSynManorBattleMem::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stSynManorBattleMem::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stSynManorBattleMem::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stSynManorBattleMem::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* stSynManorBattleMem::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stSynManorBattleMem::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 job = 3;
inline bool stSynManorBattleMem::has_job() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stSynManorBattleMem::set_has_job() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stSynManorBattleMem::clear_has_job() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stSynManorBattleMem::clear_job() {
  job_ = 0u;
  clear_has_job();
}
inline ::google::protobuf::uint32 stSynManorBattleMem::job() const {
  return job_;
}
inline void stSynManorBattleMem::set_job(::google::protobuf::uint32 value) {
  set_has_job();
  job_ = value;
}

// optional uint32 sex = 4;
inline bool stSynManorBattleMem::has_sex() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stSynManorBattleMem::set_has_sex() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stSynManorBattleMem::clear_has_sex() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stSynManorBattleMem::clear_sex() {
  sex_ = 0u;
  clear_has_sex();
}
inline ::google::protobuf::uint32 stSynManorBattleMem::sex() const {
  return sex_;
}
inline void stSynManorBattleMem::set_sex(::google::protobuf::uint32 value) {
  set_has_sex();
  sex_ = value;
}

// optional uint32 level = 5;
inline bool stSynManorBattleMem::has_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stSynManorBattleMem::set_has_level() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stSynManorBattleMem::clear_has_level() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stSynManorBattleMem::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 stSynManorBattleMem::level() const {
  return level_;
}
inline void stSynManorBattleMem::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// optional uint32 battlePower = 6;
inline bool stSynManorBattleMem::has_battlepower() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stSynManorBattleMem::set_has_battlepower() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stSynManorBattleMem::clear_has_battlepower() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stSynManorBattleMem::clear_battlepower() {
  battlepower_ = 0u;
  clear_has_battlepower();
}
inline ::google::protobuf::uint32 stSynManorBattleMem::battlepower() const {
  return battlepower_;
}
inline void stSynManorBattleMem::set_battlepower(::google::protobuf::uint32 value) {
  set_has_battlepower();
  battlepower_ = value;
}

// optional uint32 curHP = 7;
inline bool stSynManorBattleMem::has_curhp() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void stSynManorBattleMem::set_has_curhp() {
  _has_bits_[0] |= 0x00000040u;
}
inline void stSynManorBattleMem::clear_has_curhp() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void stSynManorBattleMem::clear_curhp() {
  curhp_ = 0u;
  clear_has_curhp();
}
inline ::google::protobuf::uint32 stSynManorBattleMem::curhp() const {
  return curhp_;
}
inline void stSynManorBattleMem::set_curhp(::google::protobuf::uint32 value) {
  set_has_curhp();
  curhp_ = value;
}

// optional uint32 maxHP = 8;
inline bool stSynManorBattleMem::has_maxhp() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void stSynManorBattleMem::set_has_maxhp() {
  _has_bits_[0] |= 0x00000080u;
}
inline void stSynManorBattleMem::clear_has_maxhp() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void stSynManorBattleMem::clear_maxhp() {
  maxhp_ = 0u;
  clear_has_maxhp();
}
inline ::google::protobuf::uint32 stSynManorBattleMem::maxhp() const {
  return maxhp_;
}
inline void stSynManorBattleMem::set_maxhp(::google::protobuf::uint32 value) {
  set_has_maxhp();
  maxhp_ = value;
}

// optional uint32 pos = 9;
inline bool stSynManorBattleMem::has_pos() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void stSynManorBattleMem::set_has_pos() {
  _has_bits_[0] |= 0x00000100u;
}
inline void stSynManorBattleMem::clear_has_pos() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void stSynManorBattleMem::clear_pos() {
  pos_ = 0u;
  clear_has_pos();
}
inline ::google::protobuf::uint32 stSynManorBattleMem::pos() const {
  return pos_;
}
inline void stSynManorBattleMem::set_pos(::google::protobuf::uint32 value) {
  set_has_pos();
  pos_ = value;
}

// optional uint32 teamID = 10;
inline bool stSynManorBattleMem::has_teamid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void stSynManorBattleMem::set_has_teamid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void stSynManorBattleMem::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void stSynManorBattleMem::clear_teamid() {
  teamid_ = 0u;
  clear_has_teamid();
}
inline ::google::protobuf::uint32 stSynManorBattleMem::teamid() const {
  return teamid_;
}
inline void stSynManorBattleMem::set_teamid(::google::protobuf::uint32 value) {
  set_has_teamid();
  teamid_ = value;
}

// optional uint32 photoID = 11;
inline bool stSynManorBattleMem::has_photoid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void stSynManorBattleMem::set_has_photoid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void stSynManorBattleMem::clear_has_photoid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void stSynManorBattleMem::clear_photoid() {
  photoid_ = 0u;
  clear_has_photoid();
}
inline ::google::protobuf::uint32 stSynManorBattleMem::photoid() const {
  return photoid_;
}
inline void stSynManorBattleMem::set_photoid(::google::protobuf::uint32 value) {
  set_has_photoid();
  photoid_ = value;
}

// -------------------------------------------------------------------

// stRetManorFightFormation

// optional uint32 manorID = 1;
inline bool stRetManorFightFormation::has_manorid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRetManorFightFormation::set_has_manorid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRetManorFightFormation::clear_has_manorid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRetManorFightFormation::clear_manorid() {
  manorid_ = 0u;
  clear_has_manorid();
}
inline ::google::protobuf::uint32 stRetManorFightFormation::manorid() const {
  return manorid_;
}
inline void stRetManorFightFormation::set_manorid(::google::protobuf::uint32 value) {
  set_has_manorid();
  manorid_ = value;
}

// optional .GuildProto.eFormation formation = 2;
inline bool stRetManorFightFormation::has_formation() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stRetManorFightFormation::set_has_formation() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stRetManorFightFormation::clear_has_formation() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stRetManorFightFormation::clear_formation() {
  formation_ = 1;
  clear_has_formation();
}
inline ::GuildProto::eFormation stRetManorFightFormation::formation() const {
  return static_cast< ::GuildProto::eFormation >(formation_);
}
inline void stRetManorFightFormation::set_formation(::GuildProto::eFormation value) {
  assert(::GuildProto::eFormation_IsValid(value));
  set_has_formation();
  formation_ = value;
}

// repeated .GuildProto.stSynManorBattleMem sideATeam = 3;
inline int stRetManorFightFormation::sideateam_size() const {
  return sideateam_.size();
}
inline void stRetManorFightFormation::clear_sideateam() {
  sideateam_.Clear();
}
inline const ::GuildProto::stSynManorBattleMem& stRetManorFightFormation::sideateam(int index) const {
  return sideateam_.Get(index);
}
inline ::GuildProto::stSynManorBattleMem* stRetManorFightFormation::mutable_sideateam(int index) {
  return sideateam_.Mutable(index);
}
inline ::GuildProto::stSynManorBattleMem* stRetManorFightFormation::add_sideateam() {
  return sideateam_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GuildProto::stSynManorBattleMem >&
stRetManorFightFormation::sideateam() const {
  return sideateam_;
}
inline ::google::protobuf::RepeatedPtrField< ::GuildProto::stSynManorBattleMem >*
stRetManorFightFormation::mutable_sideateam() {
  return &sideateam_;
}

// repeated .GuildProto.stSynManorBattleMem sideBTeam = 4;
inline int stRetManorFightFormation::sidebteam_size() const {
  return sidebteam_.size();
}
inline void stRetManorFightFormation::clear_sidebteam() {
  sidebteam_.Clear();
}
inline const ::GuildProto::stSynManorBattleMem& stRetManorFightFormation::sidebteam(int index) const {
  return sidebteam_.Get(index);
}
inline ::GuildProto::stSynManorBattleMem* stRetManorFightFormation::mutable_sidebteam(int index) {
  return sidebteam_.Mutable(index);
}
inline ::GuildProto::stSynManorBattleMem* stRetManorFightFormation::add_sidebteam() {
  return sidebteam_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GuildProto::stSynManorBattleMem >&
stRetManorFightFormation::sidebteam() const {
  return sidebteam_;
}
inline ::google::protobuf::RepeatedPtrField< ::GuildProto::stSynManorBattleMem >*
stRetManorFightFormation::mutable_sidebteam() {
  return &sidebteam_;
}

// optional uint32 sideAGuildID = 5;
inline bool stRetManorFightFormation::has_sideaguildid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stRetManorFightFormation::set_has_sideaguildid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stRetManorFightFormation::clear_has_sideaguildid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stRetManorFightFormation::clear_sideaguildid() {
  sideaguildid_ = 0u;
  clear_has_sideaguildid();
}
inline ::google::protobuf::uint32 stRetManorFightFormation::sideaguildid() const {
  return sideaguildid_;
}
inline void stRetManorFightFormation::set_sideaguildid(::google::protobuf::uint32 value) {
  set_has_sideaguildid();
  sideaguildid_ = value;
}

// optional uint32 sideBGuildID = 6;
inline bool stRetManorFightFormation::has_sidebguildid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stRetManorFightFormation::set_has_sidebguildid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stRetManorFightFormation::clear_has_sidebguildid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stRetManorFightFormation::clear_sidebguildid() {
  sidebguildid_ = 0u;
  clear_has_sidebguildid();
}
inline ::google::protobuf::uint32 stRetManorFightFormation::sidebguildid() const {
  return sidebguildid_;
}
inline void stRetManorFightFormation::set_sidebguildid(::google::protobuf::uint32 value) {
  set_has_sidebguildid();
  sidebguildid_ = value;
}

// -------------------------------------------------------------------

// stEnterManorFightTeam

// optional uint32 manorID = 1;
inline bool stEnterManorFightTeam::has_manorid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stEnterManorFightTeam::set_has_manorid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stEnterManorFightTeam::clear_has_manorid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stEnterManorFightTeam::clear_manorid() {
  manorid_ = 0u;
  clear_has_manorid();
}
inline ::google::protobuf::uint32 stEnterManorFightTeam::manorid() const {
  return manorid_;
}
inline void stEnterManorFightTeam::set_manorid(::google::protobuf::uint32 value) {
  set_has_manorid();
  manorid_ = value;
}

// optional .GuildProto.eFormation formation = 2;
inline bool stEnterManorFightTeam::has_formation() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stEnterManorFightTeam::set_has_formation() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stEnterManorFightTeam::clear_has_formation() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stEnterManorFightTeam::clear_formation() {
  formation_ = 1;
  clear_has_formation();
}
inline ::GuildProto::eFormation stEnterManorFightTeam::formation() const {
  return static_cast< ::GuildProto::eFormation >(formation_);
}
inline void stEnterManorFightTeam::set_formation(::GuildProto::eFormation value) {
  assert(::GuildProto::eFormation_IsValid(value));
  set_has_formation();
  formation_ = value;
}

// optional uint32 teamID = 3;
inline bool stEnterManorFightTeam::has_teamid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stEnterManorFightTeam::set_has_teamid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stEnterManorFightTeam::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stEnterManorFightTeam::clear_teamid() {
  teamid_ = 0u;
  clear_has_teamid();
}
inline ::google::protobuf::uint32 stEnterManorFightTeam::teamid() const {
  return teamid_;
}
inline void stEnterManorFightTeam::set_teamid(::google::protobuf::uint32 value) {
  set_has_teamid();
  teamid_ = value;
}

// optional uint32 pos = 4;
inline bool stEnterManorFightTeam::has_pos() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stEnterManorFightTeam::set_has_pos() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stEnterManorFightTeam::clear_has_pos() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stEnterManorFightTeam::clear_pos() {
  pos_ = 0u;
  clear_has_pos();
}
inline ::google::protobuf::uint32 stEnterManorFightTeam::pos() const {
  return pos_;
}
inline void stEnterManorFightTeam::set_pos(::google::protobuf::uint32 value) {
  set_has_pos();
  pos_ = value;
}

// optional uint32 sideAGuildID = 5;
inline bool stEnterManorFightTeam::has_sideaguildid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stEnterManorFightTeam::set_has_sideaguildid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stEnterManorFightTeam::clear_has_sideaguildid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stEnterManorFightTeam::clear_sideaguildid() {
  sideaguildid_ = 0u;
  clear_has_sideaguildid();
}
inline ::google::protobuf::uint32 stEnterManorFightTeam::sideaguildid() const {
  return sideaguildid_;
}
inline void stEnterManorFightTeam::set_sideaguildid(::google::protobuf::uint32 value) {
  set_has_sideaguildid();
  sideaguildid_ = value;
}

// optional uint32 sideBGuildID = 6;
inline bool stEnterManorFightTeam::has_sidebguildid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stEnterManorFightTeam::set_has_sidebguildid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stEnterManorFightTeam::clear_has_sidebguildid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stEnterManorFightTeam::clear_sidebguildid() {
  sidebguildid_ = 0u;
  clear_has_sidebguildid();
}
inline ::google::protobuf::uint32 stEnterManorFightTeam::sidebguildid() const {
  return sidebguildid_;
}
inline void stEnterManorFightTeam::set_sidebguildid(::google::protobuf::uint32 value) {
  set_has_sidebguildid();
  sidebguildid_ = value;
}

// optional uint32 charID = 7;
inline bool stEnterManorFightTeam::has_charid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void stEnterManorFightTeam::set_has_charid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void stEnterManorFightTeam::clear_has_charid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void stEnterManorFightTeam::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stEnterManorFightTeam::charid() const {
  return charid_;
}
inline void stEnterManorFightTeam::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional string name = 8;
inline bool stEnterManorFightTeam::has_name() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void stEnterManorFightTeam::set_has_name() {
  _has_bits_[0] |= 0x00000080u;
}
inline void stEnterManorFightTeam::clear_has_name() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void stEnterManorFightTeam::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& stEnterManorFightTeam::name() const {
  return *name_;
}
inline void stEnterManorFightTeam::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stEnterManorFightTeam::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stEnterManorFightTeam::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stEnterManorFightTeam::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* stEnterManorFightTeam::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stEnterManorFightTeam::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 guildID = 9;
inline bool stEnterManorFightTeam::has_guildid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void stEnterManorFightTeam::set_has_guildid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void stEnterManorFightTeam::clear_has_guildid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void stEnterManorFightTeam::clear_guildid() {
  guildid_ = 0u;
  clear_has_guildid();
}
inline ::google::protobuf::uint32 stEnterManorFightTeam::guildid() const {
  return guildid_;
}
inline void stEnterManorFightTeam::set_guildid(::google::protobuf::uint32 value) {
  set_has_guildid();
  guildid_ = value;
}

// optional uint32 sex = 10;
inline bool stEnterManorFightTeam::has_sex() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void stEnterManorFightTeam::set_has_sex() {
  _has_bits_[0] |= 0x00000200u;
}
inline void stEnterManorFightTeam::clear_has_sex() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void stEnterManorFightTeam::clear_sex() {
  sex_ = 0u;
  clear_has_sex();
}
inline ::google::protobuf::uint32 stEnterManorFightTeam::sex() const {
  return sex_;
}
inline void stEnterManorFightTeam::set_sex(::google::protobuf::uint32 value) {
  set_has_sex();
  sex_ = value;
}

// optional uint32 job = 11;
inline bool stEnterManorFightTeam::has_job() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void stEnterManorFightTeam::set_has_job() {
  _has_bits_[0] |= 0x00000400u;
}
inline void stEnterManorFightTeam::clear_has_job() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void stEnterManorFightTeam::clear_job() {
  job_ = 0u;
  clear_has_job();
}
inline ::google::protobuf::uint32 stEnterManorFightTeam::job() const {
  return job_;
}
inline void stEnterManorFightTeam::set_job(::google::protobuf::uint32 value) {
  set_has_job();
  job_ = value;
}

// optional uint32 level = 12;
inline bool stEnterManorFightTeam::has_level() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void stEnterManorFightTeam::set_has_level() {
  _has_bits_[0] |= 0x00000800u;
}
inline void stEnterManorFightTeam::clear_has_level() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void stEnterManorFightTeam::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 stEnterManorFightTeam::level() const {
  return level_;
}
inline void stEnterManorFightTeam::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// optional uint32 battlePower = 13;
inline bool stEnterManorFightTeam::has_battlepower() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void stEnterManorFightTeam::set_has_battlepower() {
  _has_bits_[0] |= 0x00001000u;
}
inline void stEnterManorFightTeam::clear_has_battlepower() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void stEnterManorFightTeam::clear_battlepower() {
  battlepower_ = 0u;
  clear_has_battlepower();
}
inline ::google::protobuf::uint32 stEnterManorFightTeam::battlepower() const {
  return battlepower_;
}
inline void stEnterManorFightTeam::set_battlepower(::google::protobuf::uint32 value) {
  set_has_battlepower();
  battlepower_ = value;
}

// optional uint32 maxHP = 14;
inline bool stEnterManorFightTeam::has_maxhp() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void stEnterManorFightTeam::set_has_maxhp() {
  _has_bits_[0] |= 0x00002000u;
}
inline void stEnterManorFightTeam::clear_has_maxhp() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void stEnterManorFightTeam::clear_maxhp() {
  maxhp_ = 0u;
  clear_has_maxhp();
}
inline ::google::protobuf::uint32 stEnterManorFightTeam::maxhp() const {
  return maxhp_;
}
inline void stEnterManorFightTeam::set_maxhp(::google::protobuf::uint32 value) {
  set_has_maxhp();
  maxhp_ = value;
}

// optional uint32 photoID = 15;
inline bool stEnterManorFightTeam::has_photoid() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void stEnterManorFightTeam::set_has_photoid() {
  _has_bits_[0] |= 0x00004000u;
}
inline void stEnterManorFightTeam::clear_has_photoid() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void stEnterManorFightTeam::clear_photoid() {
  photoid_ = 0u;
  clear_has_photoid();
}
inline ::google::protobuf::uint32 stEnterManorFightTeam::photoid() const {
  return photoid_;
}
inline void stEnterManorFightTeam::set_photoid(::google::protobuf::uint32 value) {
  set_has_photoid();
  photoid_ = value;
}

// -------------------------------------------------------------------

// stEnterManorFightTeamResult

// optional .GuildProto.stEnterManorFightTeamResult.eResult result = 1;
inline bool stEnterManorFightTeamResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stEnterManorFightTeamResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stEnterManorFightTeamResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stEnterManorFightTeamResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::GuildProto::stEnterManorFightTeamResult_eResult stEnterManorFightTeamResult::result() const {
  return static_cast< ::GuildProto::stEnterManorFightTeamResult_eResult >(result_);
}
inline void stEnterManorFightTeamResult::set_result(::GuildProto::stEnterManorFightTeamResult_eResult value) {
  assert(::GuildProto::stEnterManorFightTeamResult_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional uint32 manorID = 2;
inline bool stEnterManorFightTeamResult::has_manorid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stEnterManorFightTeamResult::set_has_manorid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stEnterManorFightTeamResult::clear_has_manorid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stEnterManorFightTeamResult::clear_manorid() {
  manorid_ = 0u;
  clear_has_manorid();
}
inline ::google::protobuf::uint32 stEnterManorFightTeamResult::manorid() const {
  return manorid_;
}
inline void stEnterManorFightTeamResult::set_manorid(::google::protobuf::uint32 value) {
  set_has_manorid();
  manorid_ = value;
}

// optional .GuildProto.eFormation formation = 3;
inline bool stEnterManorFightTeamResult::has_formation() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stEnterManorFightTeamResult::set_has_formation() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stEnterManorFightTeamResult::clear_has_formation() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stEnterManorFightTeamResult::clear_formation() {
  formation_ = 1;
  clear_has_formation();
}
inline ::GuildProto::eFormation stEnterManorFightTeamResult::formation() const {
  return static_cast< ::GuildProto::eFormation >(formation_);
}
inline void stEnterManorFightTeamResult::set_formation(::GuildProto::eFormation value) {
  assert(::GuildProto::eFormation_IsValid(value));
  set_has_formation();
  formation_ = value;
}

// optional uint32 teamID = 4;
inline bool stEnterManorFightTeamResult::has_teamid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stEnterManorFightTeamResult::set_has_teamid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stEnterManorFightTeamResult::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stEnterManorFightTeamResult::clear_teamid() {
  teamid_ = 0u;
  clear_has_teamid();
}
inline ::google::protobuf::uint32 stEnterManorFightTeamResult::teamid() const {
  return teamid_;
}
inline void stEnterManorFightTeamResult::set_teamid(::google::protobuf::uint32 value) {
  set_has_teamid();
  teamid_ = value;
}

// optional uint32 pos = 5;
inline bool stEnterManorFightTeamResult::has_pos() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stEnterManorFightTeamResult::set_has_pos() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stEnterManorFightTeamResult::clear_has_pos() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stEnterManorFightTeamResult::clear_pos() {
  pos_ = 0u;
  clear_has_pos();
}
inline ::google::protobuf::uint32 stEnterManorFightTeamResult::pos() const {
  return pos_;
}
inline void stEnterManorFightTeamResult::set_pos(::google::protobuf::uint32 value) {
  set_has_pos();
  pos_ = value;
}

// optional uint32 sideAGuildID = 6;
inline bool stEnterManorFightTeamResult::has_sideaguildid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stEnterManorFightTeamResult::set_has_sideaguildid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stEnterManorFightTeamResult::clear_has_sideaguildid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stEnterManorFightTeamResult::clear_sideaguildid() {
  sideaguildid_ = 0u;
  clear_has_sideaguildid();
}
inline ::google::protobuf::uint32 stEnterManorFightTeamResult::sideaguildid() const {
  return sideaguildid_;
}
inline void stEnterManorFightTeamResult::set_sideaguildid(::google::protobuf::uint32 value) {
  set_has_sideaguildid();
  sideaguildid_ = value;
}

// optional uint32 sideBGuildID = 7;
inline bool stEnterManorFightTeamResult::has_sidebguildid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void stEnterManorFightTeamResult::set_has_sidebguildid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void stEnterManorFightTeamResult::clear_has_sidebguildid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void stEnterManorFightTeamResult::clear_sidebguildid() {
  sidebguildid_ = 0u;
  clear_has_sidebguildid();
}
inline ::google::protobuf::uint32 stEnterManorFightTeamResult::sidebguildid() const {
  return sidebguildid_;
}
inline void stEnterManorFightTeamResult::set_sidebguildid(::google::protobuf::uint32 value) {
  set_has_sidebguildid();
  sidebguildid_ = value;
}

// -------------------------------------------------------------------

// stNotifyLeaveManorFightWin

// optional uint32 charID = 1;
inline bool stNotifyLeaveManorFightWin::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stNotifyLeaveManorFightWin::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stNotifyLeaveManorFightWin::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stNotifyLeaveManorFightWin::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stNotifyLeaveManorFightWin::charid() const {
  return charid_;
}
inline void stNotifyLeaveManorFightWin::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 guildID = 2;
inline bool stNotifyLeaveManorFightWin::has_guildid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stNotifyLeaveManorFightWin::set_has_guildid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stNotifyLeaveManorFightWin::clear_has_guildid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stNotifyLeaveManorFightWin::clear_guildid() {
  guildid_ = 0u;
  clear_has_guildid();
}
inline ::google::protobuf::uint32 stNotifyLeaveManorFightWin::guildid() const {
  return guildid_;
}
inline void stNotifyLeaveManorFightWin::set_guildid(::google::protobuf::uint32 value) {
  set_has_guildid();
  guildid_ = value;
}

// optional uint32 formation = 3;
inline bool stNotifyLeaveManorFightWin::has_formation() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stNotifyLeaveManorFightWin::set_has_formation() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stNotifyLeaveManorFightWin::clear_has_formation() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stNotifyLeaveManorFightWin::clear_formation() {
  formation_ = 0u;
  clear_has_formation();
}
inline ::google::protobuf::uint32 stNotifyLeaveManorFightWin::formation() const {
  return formation_;
}
inline void stNotifyLeaveManorFightWin::set_formation(::google::protobuf::uint32 value) {
  set_has_formation();
  formation_ = value;
}

// optional uint32 teamID = 4;
inline bool stNotifyLeaveManorFightWin::has_teamid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stNotifyLeaveManorFightWin::set_has_teamid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stNotifyLeaveManorFightWin::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stNotifyLeaveManorFightWin::clear_teamid() {
  teamid_ = 0u;
  clear_has_teamid();
}
inline ::google::protobuf::uint32 stNotifyLeaveManorFightWin::teamid() const {
  return teamid_;
}
inline void stNotifyLeaveManorFightWin::set_teamid(::google::protobuf::uint32 value) {
  set_has_teamid();
  teamid_ = value;
}

// -------------------------------------------------------------------

// stSynManorFightItem

// optional string roleName = 1;
inline bool stSynManorFightItem::has_rolename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSynManorFightItem::set_has_rolename() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSynManorFightItem::clear_has_rolename() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSynManorFightItem::clear_rolename() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    rolename_->clear();
  }
  clear_has_rolename();
}
inline const ::std::string& stSynManorFightItem::rolename() const {
  return *rolename_;
}
inline void stSynManorFightItem::set_rolename(const ::std::string& value) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void stSynManorFightItem::set_rolename(const char* value) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void stSynManorFightItem::set_rolename(const char* value, size_t size) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stSynManorFightItem::mutable_rolename() {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  return rolename_;
}
inline ::std::string* stSynManorFightItem::release_rolename() {
  clear_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = rolename_;
    rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stSynManorFightItem::set_allocated_rolename(::std::string* rolename) {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  if (rolename) {
    set_has_rolename();
    rolename_ = rolename;
  } else {
    clear_has_rolename();
    rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 level = 2;
inline bool stSynManorFightItem::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stSynManorFightItem::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stSynManorFightItem::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stSynManorFightItem::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 stSynManorFightItem::level() const {
  return level_;
}
inline void stSynManorFightItem::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// optional uint32 battlePower = 3;
inline bool stSynManorFightItem::has_battlepower() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stSynManorFightItem::set_has_battlepower() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stSynManorFightItem::clear_has_battlepower() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stSynManorFightItem::clear_battlepower() {
  battlepower_ = 0u;
  clear_has_battlepower();
}
inline ::google::protobuf::uint32 stSynManorFightItem::battlepower() const {
  return battlepower_;
}
inline void stSynManorFightItem::set_battlepower(::google::protobuf::uint32 value) {
  set_has_battlepower();
  battlepower_ = value;
}

// optional uint32 killNum = 4;
inline bool stSynManorFightItem::has_killnum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stSynManorFightItem::set_has_killnum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stSynManorFightItem::clear_has_killnum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stSynManorFightItem::clear_killnum() {
  killnum_ = 0u;
  clear_has_killnum();
}
inline ::google::protobuf::uint32 stSynManorFightItem::killnum() const {
  return killnum_;
}
inline void stSynManorFightItem::set_killnum(::google::protobuf::uint32 value) {
  set_has_killnum();
  killnum_ = value;
}

// optional bool isDie = 5;
inline bool stSynManorFightItem::has_isdie() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stSynManorFightItem::set_has_isdie() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stSynManorFightItem::clear_has_isdie() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stSynManorFightItem::clear_isdie() {
  isdie_ = false;
  clear_has_isdie();
}
inline bool stSynManorFightItem::isdie() const {
  return isdie_;
}
inline void stSynManorFightItem::set_isdie(bool value) {
  set_has_isdie();
  isdie_ = value;
}

// -------------------------------------------------------------------

// stManorFightPKResult

// repeated .GuildProto.stSynManorFightItem sideA = 1;
inline int stManorFightPKResult::sidea_size() const {
  return sidea_.size();
}
inline void stManorFightPKResult::clear_sidea() {
  sidea_.Clear();
}
inline const ::GuildProto::stSynManorFightItem& stManorFightPKResult::sidea(int index) const {
  return sidea_.Get(index);
}
inline ::GuildProto::stSynManorFightItem* stManorFightPKResult::mutable_sidea(int index) {
  return sidea_.Mutable(index);
}
inline ::GuildProto::stSynManorFightItem* stManorFightPKResult::add_sidea() {
  return sidea_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GuildProto::stSynManorFightItem >&
stManorFightPKResult::sidea() const {
  return sidea_;
}
inline ::google::protobuf::RepeatedPtrField< ::GuildProto::stSynManorFightItem >*
stManorFightPKResult::mutable_sidea() {
  return &sidea_;
}

// repeated .GuildProto.stSynManorFightItem sideB = 2;
inline int stManorFightPKResult::sideb_size() const {
  return sideb_.size();
}
inline void stManorFightPKResult::clear_sideb() {
  sideb_.Clear();
}
inline const ::GuildProto::stSynManorFightItem& stManorFightPKResult::sideb(int index) const {
  return sideb_.Get(index);
}
inline ::GuildProto::stSynManorFightItem* stManorFightPKResult::mutable_sideb(int index) {
  return sideb_.Mutable(index);
}
inline ::GuildProto::stSynManorFightItem* stManorFightPKResult::add_sideb() {
  return sideb_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GuildProto::stSynManorFightItem >&
stManorFightPKResult::sideb() const {
  return sideb_;
}
inline ::google::protobuf::RepeatedPtrField< ::GuildProto::stSynManorFightItem >*
stManorFightPKResult::mutable_sideb() {
  return &sideb_;
}

// -------------------------------------------------------------------

// stManorFightPKFail

// repeated .GuildProto.stSynManorFightItem sideA = 1;
inline int stManorFightPKFail::sidea_size() const {
  return sidea_.size();
}
inline void stManorFightPKFail::clear_sidea() {
  sidea_.Clear();
}
inline const ::GuildProto::stSynManorFightItem& stManorFightPKFail::sidea(int index) const {
  return sidea_.Get(index);
}
inline ::GuildProto::stSynManorFightItem* stManorFightPKFail::mutable_sidea(int index) {
  return sidea_.Mutable(index);
}
inline ::GuildProto::stSynManorFightItem* stManorFightPKFail::add_sidea() {
  return sidea_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GuildProto::stSynManorFightItem >&
stManorFightPKFail::sidea() const {
  return sidea_;
}
inline ::google::protobuf::RepeatedPtrField< ::GuildProto::stSynManorFightItem >*
stManorFightPKFail::mutable_sidea() {
  return &sidea_;
}

// repeated .GuildProto.stSynManorFightItem sideB = 2;
inline int stManorFightPKFail::sideb_size() const {
  return sideb_.size();
}
inline void stManorFightPKFail::clear_sideb() {
  sideb_.Clear();
}
inline const ::GuildProto::stSynManorFightItem& stManorFightPKFail::sideb(int index) const {
  return sideb_.Get(index);
}
inline ::GuildProto::stSynManorFightItem* stManorFightPKFail::mutable_sideb(int index) {
  return sideb_.Mutable(index);
}
inline ::GuildProto::stSynManorFightItem* stManorFightPKFail::add_sideb() {
  return sideb_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GuildProto::stSynManorFightItem >&
stManorFightPKFail::sideb() const {
  return sideb_;
}
inline ::google::protobuf::RepeatedPtrField< ::GuildProto::stSynManorFightItem >*
stManorFightPKFail::mutable_sideb() {
  return &sideb_;
}

// -------------------------------------------------------------------

// stNotifyWinerAfterApplyEnd

// optional uint32 guildID = 1;
inline bool stNotifyWinerAfterApplyEnd::has_guildid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stNotifyWinerAfterApplyEnd::set_has_guildid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stNotifyWinerAfterApplyEnd::clear_has_guildid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stNotifyWinerAfterApplyEnd::clear_guildid() {
  guildid_ = 0u;
  clear_has_guildid();
}
inline ::google::protobuf::uint32 stNotifyWinerAfterApplyEnd::guildid() const {
  return guildid_;
}
inline void stNotifyWinerAfterApplyEnd::set_guildid(::google::protobuf::uint32 value) {
  set_has_guildid();
  guildid_ = value;
}

// optional uint32 manorID = 2;
inline bool stNotifyWinerAfterApplyEnd::has_manorid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stNotifyWinerAfterApplyEnd::set_has_manorid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stNotifyWinerAfterApplyEnd::clear_has_manorid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stNotifyWinerAfterApplyEnd::clear_manorid() {
  manorid_ = 0u;
  clear_has_manorid();
}
inline ::google::protobuf::uint32 stNotifyWinerAfterApplyEnd::manorid() const {
  return manorid_;
}
inline void stNotifyWinerAfterApplyEnd::set_manorid(::google::protobuf::uint32 value) {
  set_has_manorid();
  manorid_ = value;
}

// -------------------------------------------------------------------

// stReqChgManorFightTeamPos

// optional uint32 charID = 1;
inline bool stReqChgManorFightTeamPos::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqChgManorFightTeamPos::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqChgManorFightTeamPos::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqChgManorFightTeamPos::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqChgManorFightTeamPos::charid() const {
  return charid_;
}
inline void stReqChgManorFightTeamPos::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 destTeamID = 2;
inline bool stReqChgManorFightTeamPos::has_destteamid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stReqChgManorFightTeamPos::set_has_destteamid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stReqChgManorFightTeamPos::clear_has_destteamid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stReqChgManorFightTeamPos::clear_destteamid() {
  destteamid_ = 0u;
  clear_has_destteamid();
}
inline ::google::protobuf::uint32 stReqChgManorFightTeamPos::destteamid() const {
  return destteamid_;
}
inline void stReqChgManorFightTeamPos::set_destteamid(::google::protobuf::uint32 value) {
  set_has_destteamid();
  destteamid_ = value;
}

// optional uint32 destPos = 3;
inline bool stReqChgManorFightTeamPos::has_destpos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stReqChgManorFightTeamPos::set_has_destpos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stReqChgManorFightTeamPos::clear_has_destpos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stReqChgManorFightTeamPos::clear_destpos() {
  destpos_ = 0u;
  clear_has_destpos();
}
inline ::google::protobuf::uint32 stReqChgManorFightTeamPos::destpos() const {
  return destpos_;
}
inline void stReqChgManorFightTeamPos::set_destpos(::google::protobuf::uint32 value) {
  set_has_destpos();
  destpos_ = value;
}

// -------------------------------------------------------------------

// stNotifyChgManorFightTeamPos

// optional uint32 charID = 1;
inline bool stNotifyChgManorFightTeamPos::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stNotifyChgManorFightTeamPos::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stNotifyChgManorFightTeamPos::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stNotifyChgManorFightTeamPos::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stNotifyChgManorFightTeamPos::charid() const {
  return charid_;
}
inline void stNotifyChgManorFightTeamPos::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 srcTeamID = 2;
inline bool stNotifyChgManorFightTeamPos::has_srcteamid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stNotifyChgManorFightTeamPos::set_has_srcteamid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stNotifyChgManorFightTeamPos::clear_has_srcteamid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stNotifyChgManorFightTeamPos::clear_srcteamid() {
  srcteamid_ = 0u;
  clear_has_srcteamid();
}
inline ::google::protobuf::uint32 stNotifyChgManorFightTeamPos::srcteamid() const {
  return srcteamid_;
}
inline void stNotifyChgManorFightTeamPos::set_srcteamid(::google::protobuf::uint32 value) {
  set_has_srcteamid();
  srcteamid_ = value;
}

// optional uint32 srcPos = 3;
inline bool stNotifyChgManorFightTeamPos::has_srcpos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stNotifyChgManorFightTeamPos::set_has_srcpos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stNotifyChgManorFightTeamPos::clear_has_srcpos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stNotifyChgManorFightTeamPos::clear_srcpos() {
  srcpos_ = 0u;
  clear_has_srcpos();
}
inline ::google::protobuf::uint32 stNotifyChgManorFightTeamPos::srcpos() const {
  return srcpos_;
}
inline void stNotifyChgManorFightTeamPos::set_srcpos(::google::protobuf::uint32 value) {
  set_has_srcpos();
  srcpos_ = value;
}

// optional uint32 dstTeamID = 4;
inline bool stNotifyChgManorFightTeamPos::has_dstteamid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stNotifyChgManorFightTeamPos::set_has_dstteamid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stNotifyChgManorFightTeamPos::clear_has_dstteamid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stNotifyChgManorFightTeamPos::clear_dstteamid() {
  dstteamid_ = 0u;
  clear_has_dstteamid();
}
inline ::google::protobuf::uint32 stNotifyChgManorFightTeamPos::dstteamid() const {
  return dstteamid_;
}
inline void stNotifyChgManorFightTeamPos::set_dstteamid(::google::protobuf::uint32 value) {
  set_has_dstteamid();
  dstteamid_ = value;
}

// optional uint32 dstPos = 5;
inline bool stNotifyChgManorFightTeamPos::has_dstpos() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stNotifyChgManorFightTeamPos::set_has_dstpos() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stNotifyChgManorFightTeamPos::clear_has_dstpos() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stNotifyChgManorFightTeamPos::clear_dstpos() {
  dstpos_ = 0u;
  clear_has_dstpos();
}
inline ::google::protobuf::uint32 stNotifyChgManorFightTeamPos::dstpos() const {
  return dstpos_;
}
inline void stNotifyChgManorFightTeamPos::set_dstpos(::google::protobuf::uint32 value) {
  set_has_dstpos();
  dstpos_ = value;
}

// optional uint32 formation = 6;
inline bool stNotifyChgManorFightTeamPos::has_formation() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stNotifyChgManorFightTeamPos::set_has_formation() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stNotifyChgManorFightTeamPos::clear_has_formation() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stNotifyChgManorFightTeamPos::clear_formation() {
  formation_ = 0u;
  clear_has_formation();
}
inline ::google::protobuf::uint32 stNotifyChgManorFightTeamPos::formation() const {
  return formation_;
}
inline void stNotifyChgManorFightTeamPos::set_formation(::google::protobuf::uint32 value) {
  set_has_formation();
  formation_ = value;
}

// -------------------------------------------------------------------

// stChgManorFightTeamPosResult

// optional .GuildProto.stChgManorFightTeamPosResult.eResult result = 1;
inline bool stChgManorFightTeamPosResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stChgManorFightTeamPosResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stChgManorFightTeamPosResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stChgManorFightTeamPosResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::GuildProto::stChgManorFightTeamPosResult_eResult stChgManorFightTeamPosResult::result() const {
  return static_cast< ::GuildProto::stChgManorFightTeamPosResult_eResult >(result_);
}
inline void stChgManorFightTeamPosResult::set_result(::GuildProto::stChgManorFightTeamPosResult_eResult value) {
  assert(::GuildProto::stChgManorFightTeamPosResult_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional uint32 teamID = 2;
inline bool stChgManorFightTeamPosResult::has_teamid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stChgManorFightTeamPosResult::set_has_teamid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stChgManorFightTeamPosResult::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stChgManorFightTeamPosResult::clear_teamid() {
  teamid_ = 0u;
  clear_has_teamid();
}
inline ::google::protobuf::uint32 stChgManorFightTeamPosResult::teamid() const {
  return teamid_;
}
inline void stChgManorFightTeamPosResult::set_teamid(::google::protobuf::uint32 value) {
  set_has_teamid();
  teamid_ = value;
}

// optional uint32 pos = 3;
inline bool stChgManorFightTeamPosResult::has_pos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stChgManorFightTeamPosResult::set_has_pos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stChgManorFightTeamPosResult::clear_has_pos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stChgManorFightTeamPosResult::clear_pos() {
  pos_ = 0u;
  clear_has_pos();
}
inline ::google::protobuf::uint32 stChgManorFightTeamPosResult::pos() const {
  return pos_;
}
inline void stChgManorFightTeamPosResult::set_pos(::google::protobuf::uint32 value) {
  set_has_pos();
  pos_ = value;
}

// -------------------------------------------------------------------

// stNotifyManorFightFail

// optional uint32 manorID = 1;
inline bool stNotifyManorFightFail::has_manorid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stNotifyManorFightFail::set_has_manorid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stNotifyManorFightFail::clear_has_manorid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stNotifyManorFightFail::clear_manorid() {
  manorid_ = 0u;
  clear_has_manorid();
}
inline ::google::protobuf::uint32 stNotifyManorFightFail::manorid() const {
  return manorid_;
}
inline void stNotifyManorFightFail::set_manorid(::google::protobuf::uint32 value) {
  set_has_manorid();
  manorid_ = value;
}

// -------------------------------------------------------------------

// stManorFightHasNotMatch

// optional uint32 manorID = 1;
inline bool stManorFightHasNotMatch::has_manorid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stManorFightHasNotMatch::set_has_manorid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stManorFightHasNotMatch::clear_has_manorid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stManorFightHasNotMatch::clear_manorid() {
  manorid_ = 0u;
  clear_has_manorid();
}
inline ::google::protobuf::uint32 stManorFightHasNotMatch::manorid() const {
  return manorid_;
}
inline void stManorFightHasNotMatch::set_manorid(::google::protobuf::uint32 value) {
  set_has_manorid();
  manorid_ = value;
}

// -------------------------------------------------------------------

// stManorFightFormationResult

// optional uint32 manorID = 1;
inline bool stManorFightFormationResult::has_manorid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stManorFightFormationResult::set_has_manorid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stManorFightFormationResult::clear_has_manorid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stManorFightFormationResult::clear_manorid() {
  manorid_ = 0u;
  clear_has_manorid();
}
inline ::google::protobuf::uint32 stManorFightFormationResult::manorid() const {
  return manorid_;
}
inline void stManorFightFormationResult::set_manorid(::google::protobuf::uint32 value) {
  set_has_manorid();
  manorid_ = value;
}

// optional uint32 winGuildID = 2;
inline bool stManorFightFormationResult::has_winguildid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stManorFightFormationResult::set_has_winguildid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stManorFightFormationResult::clear_has_winguildid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stManorFightFormationResult::clear_winguildid() {
  winguildid_ = 0u;
  clear_has_winguildid();
}
inline ::google::protobuf::uint32 stManorFightFormationResult::winguildid() const {
  return winguildid_;
}
inline void stManorFightFormationResult::set_winguildid(::google::protobuf::uint32 value) {
  set_has_winguildid();
  winguildid_ = value;
}

// optional uint32 formation = 3;
inline bool stManorFightFormationResult::has_formation() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stManorFightFormationResult::set_has_formation() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stManorFightFormationResult::clear_has_formation() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stManorFightFormationResult::clear_formation() {
  formation_ = 0u;
  clear_has_formation();
}
inline ::google::protobuf::uint32 stManorFightFormationResult::formation() const {
  return formation_;
}
inline void stManorFightFormationResult::set_formation(::google::protobuf::uint32 value) {
  set_has_formation();
  formation_ = value;
}

// -------------------------------------------------------------------

// stManorFightFinish

// optional uint32 manorID = 1;
inline bool stManorFightFinish::has_manorid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stManorFightFinish::set_has_manorid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stManorFightFinish::clear_has_manorid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stManorFightFinish::clear_manorid() {
  manorid_ = 0u;
  clear_has_manorid();
}
inline ::google::protobuf::uint32 stManorFightFinish::manorid() const {
  return manorid_;
}
inline void stManorFightFinish::set_manorid(::google::protobuf::uint32 value) {
  set_has_manorid();
  manorid_ = value;
}

// -------------------------------------------------------------------

// stReqLevelUpBlackMarketLv

// optional uint32 guildID = 1;
inline bool stReqLevelUpBlackMarketLv::has_guildid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqLevelUpBlackMarketLv::set_has_guildid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqLevelUpBlackMarketLv::clear_has_guildid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqLevelUpBlackMarketLv::clear_guildid() {
  guildid_ = 0u;
  clear_has_guildid();
}
inline ::google::protobuf::uint32 stReqLevelUpBlackMarketLv::guildid() const {
  return guildid_;
}
inline void stReqLevelUpBlackMarketLv::set_guildid(::google::protobuf::uint32 value) {
  set_has_guildid();
  guildid_ = value;
}

// -------------------------------------------------------------------

// stLevelUpBlackMarketLvResult

// optional .GuildProto.stLevelUpBlackMarketLvResult.eResult result = 1;
inline bool stLevelUpBlackMarketLvResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stLevelUpBlackMarketLvResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stLevelUpBlackMarketLvResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stLevelUpBlackMarketLvResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::GuildProto::stLevelUpBlackMarketLvResult_eResult stLevelUpBlackMarketLvResult::result() const {
  return static_cast< ::GuildProto::stLevelUpBlackMarketLvResult_eResult >(result_);
}
inline void stLevelUpBlackMarketLvResult::set_result(::GuildProto::stLevelUpBlackMarketLvResult_eResult value) {
  assert(::GuildProto::stLevelUpBlackMarketLvResult_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stSynBlackMarketBuildingLv

// optional uint32 lv = 1;
inline bool stSynBlackMarketBuildingLv::has_lv() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSynBlackMarketBuildingLv::set_has_lv() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSynBlackMarketBuildingLv::clear_has_lv() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSynBlackMarketBuildingLv::clear_lv() {
  lv_ = 0u;
  clear_has_lv();
}
inline ::google::protobuf::uint32 stSynBlackMarketBuildingLv::lv() const {
  return lv_;
}
inline void stSynBlackMarketBuildingLv::set_lv(::google::protobuf::uint32 value) {
  set_has_lv();
  lv_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace GuildProto

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stReqGuild_ProtoModID>() {
  return ::GuildProto::stReqGuild_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stReqGuild_ProtoFunID>() {
  return ::GuildProto::stReqGuild_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stRetGuild_ProtoModID>() {
  return ::GuildProto::stRetGuild_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stRetGuild_ProtoFunID>() {
  return ::GuildProto::stRetGuild_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stReqGuildDetailInfo_ProtoModID>() {
  return ::GuildProto::stReqGuildDetailInfo_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stReqGuildDetailInfo_ProtoFunID>() {
  return ::GuildProto::stReqGuildDetailInfo_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stRetGuildDetailInfo_ProtoModID>() {
  return ::GuildProto::stRetGuildDetailInfo_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stRetGuildDetailInfo_ProtoFunID>() {
  return ::GuildProto::stRetGuildDetailInfo_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stReqCreateGuild_eUseResType>() {
  return ::GuildProto::stReqCreateGuild_eUseResType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stReqCreateGuild_ProtoModID>() {
  return ::GuildProto::stReqCreateGuild_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stReqCreateGuild_ProtoFunID>() {
  return ::GuildProto::stReqCreateGuild_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stCreateGuildError_ProtoModID>() {
  return ::GuildProto::stCreateGuildError_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stCreateGuildError_ProtoFunID>() {
  return ::GuildProto::stCreateGuildError_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stSendMyGuild_ProtoModID>() {
  return ::GuildProto::stSendMyGuild_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stSendMyGuild_ProtoFunID>() {
  return ::GuildProto::stSendMyGuild_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stReqJoinInGuild_ProtoModID>() {
  return ::GuildProto::stReqJoinInGuild_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stReqJoinInGuild_ProtoFunID>() {
  return ::GuildProto::stReqJoinInGuild_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stJoinInGuildResult_ProtoModID>() {
  return ::GuildProto::stJoinInGuildResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stJoinInGuildResult_ProtoFunID>() {
  return ::GuildProto::stJoinInGuildResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stReqApplyJoinInList_ProtoModID>() {
  return ::GuildProto::stReqApplyJoinInList_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stReqApplyJoinInList_ProtoFunID>() {
  return ::GuildProto::stReqApplyJoinInList_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stRetApplyJoinInList_ProtoModID>() {
  return ::GuildProto::stRetApplyJoinInList_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stRetApplyJoinInList_ProtoFunID>() {
  return ::GuildProto::stRetApplyJoinInList_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stReplyApplier_ProtoModID>() {
  return ::GuildProto::stReplyApplier_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stReplyApplier_ProtoFunID>() {
  return ::GuildProto::stReplyApplier_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stReplyApplerError_ProtoModID>() {
  return ::GuildProto::stReplyApplerError_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stReplyApplerError_ProtoFunID>() {
  return ::GuildProto::stReplyApplerError_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stJoinInGuildTip_ProtoModID>() {
  return ::GuildProto::stJoinInGuildTip_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stJoinInGuildTip_ProtoFunID>() {
  return ::GuildProto::stJoinInGuildTip_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stMemJoinInGuild_ProtoModID>() {
  return ::GuildProto::stMemJoinInGuild_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stMemJoinInGuild_ProtoFunID>() {
  return ::GuildProto::stMemJoinInGuild_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stReqLeaveGuild_ProtoModID>() {
  return ::GuildProto::stReqLeaveGuild_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stReqLeaveGuild_ProtoFunID>() {
  return ::GuildProto::stReqLeaveGuild_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stMemLeaveGuild_ProtoModID>() {
  return ::GuildProto::stMemLeaveGuild_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stMemLeaveGuild_ProtoFunID>() {
  return ::GuildProto::stMemLeaveGuild_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stAssignGuildTitle_ProtoModID>() {
  return ::GuildProto::stAssignGuildTitle_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stAssignGuildTitle_ProtoFunID>() {
  return ::GuildProto::stAssignGuildTitle_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stAssignTitleError_ProtoModID>() {
  return ::GuildProto::stAssignTitleError_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stAssignTitleError_ProtoFunID>() {
  return ::GuildProto::stAssignTitleError_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stCancelTitle_ProtoModID>() {
  return ::GuildProto::stCancelTitle_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stCancelTitle_ProtoFunID>() {
  return ::GuildProto::stCancelTitle_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stCancelTitleError_ProtoModID>() {
  return ::GuildProto::stCancelTitleError_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stCancelTitleError_ProtoFunID>() {
  return ::GuildProto::stCancelTitleError_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stGiveLeader2Other_ProtoModID>() {
  return ::GuildProto::stGiveLeader2Other_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stGiveLeader2Other_ProtoFunID>() {
  return ::GuildProto::stGiveLeader2Other_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stGiveLeaderError_ProtoModID>() {
  return ::GuildProto::stGiveLeaderError_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stGiveLeaderError_ProtoFunID>() {
  return ::GuildProto::stGiveLeaderError_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stFireGuild_ProtoModID>() {
  return ::GuildProto::stFireGuild_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stFireGuild_ProtoFunID>() {
  return ::GuildProto::stFireGuild_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stFireGuildError_ProtoModID>() {
  return ::GuildProto::stFireGuildError_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stFireGuildError_ProtoFunID>() {
  return ::GuildProto::stFireGuildError_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stGuildMemOnOffLine_ProtoModID>() {
  return ::GuildProto::stGuildMemOnOffLine_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stGuildMemOnOffLine_ProtoFunID>() {
  return ::GuildProto::stGuildMemOnOffLine_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stKillOutGroupMember_ProtoModID>() {
  return ::GuildProto::stKillOutGroupMember_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stKillOutGroupMember_ProtoFunID>() {
  return ::GuildProto::stKillOutGroupMember_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stKillOutTip_ProtoModID>() {
  return ::GuildProto::stKillOutTip_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stKillOutTip_ProtoFunID>() {
  return ::GuildProto::stKillOutTip_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stKillOutGroupMemberError_ProtoModID>() {
  return ::GuildProto::stKillOutGroupMemberError_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stKillOutGroupMemberError_ProtoFunID>() {
  return ::GuildProto::stKillOutGroupMemberError_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stRetGuildMemInfo_ProtoModID>() {
  return ::GuildProto::stRetGuildMemInfo_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stRetGuildMemInfo_ProtoFunID>() {
  return ::GuildProto::stRetGuildMemInfo_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stSynGuildContribute_ProtoModID>() {
  return ::GuildProto::stSynGuildContribute_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stSynGuildContribute_ProtoFunID>() {
  return ::GuildProto::stSynGuildContribute_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stChgGuildSign_ProtoModID>() {
  return ::GuildProto::stChgGuildSign_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stChgGuildSign_ProtoFunID>() {
  return ::GuildProto::stChgGuildSign_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stNotifyFireRemainTime_ProtoModID>() {
  return ::GuildProto::stNotifyFireRemainTime_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stNotifyFireRemainTime_ProtoFunID>() {
  return ::GuildProto::stNotifyFireRemainTime_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stReqGuildMemInfo_ProtoModID>() {
  return ::GuildProto::stReqGuildMemInfo_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stReqGuildMemInfo_ProtoFunID>() {
  return ::GuildProto::stReqGuildMemInfo_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stCancelFireGuild_ProtoModID>() {
  return ::GuildProto::stCancelFireGuild_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stCancelFireGuild_ProtoFunID>() {
  return ::GuildProto::stCancelFireGuild_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stCancelFireGuildResult_eResult>() {
  return ::GuildProto::stCancelFireGuildResult_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stCancelFireGuildResult_ProtoModID>() {
  return ::GuildProto::stCancelFireGuildResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stCancelFireGuildResult_ProtoFunID>() {
  return ::GuildProto::stCancelFireGuildResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stCancelJoinInGuild_ProtoModID>() {
  return ::GuildProto::stCancelJoinInGuild_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stCancelJoinInGuild_ProtoFunID>() {
  return ::GuildProto::stCancelJoinInGuild_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stCancelJoinInGuildResult_eResult>() {
  return ::GuildProto::stCancelJoinInGuildResult_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stCancelJoinInGuildResult_ProtoModID>() {
  return ::GuildProto::stCancelJoinInGuildResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stCancelJoinInGuildResult_ProtoFunID>() {
  return ::GuildProto::stCancelJoinInGuildResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stReqDonate_eType>() {
  return ::GuildProto::stReqDonate_eType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stReqDonate_ProtoModID>() {
  return ::GuildProto::stReqDonate_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stReqDonate_ProtoFunID>() {
  return ::GuildProto::stReqDonate_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stDonateResult_eResult>() {
  return ::GuildProto::stDonateResult_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stDonateResult_ProtoModID>() {
  return ::GuildProto::stDonateResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stDonateResult_ProtoFunID>() {
  return ::GuildProto::stDonateResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stReqLevelUpHallLv_ProtoModID>() {
  return ::GuildProto::stReqLevelUpHallLv_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stReqLevelUpHallLv_ProtoFunID>() {
  return ::GuildProto::stReqLevelUpHallLv_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stLevelUpHallLvResult_eResult>() {
  return ::GuildProto::stLevelUpHallLvResult_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stLevelUpHallLvResult_ProtoModID>() {
  return ::GuildProto::stLevelUpHallLvResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stLevelUpHallLvResult_ProtoFunID>() {
  return ::GuildProto::stLevelUpHallLvResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stSynHallLv_ProtoModID>() {
  return ::GuildProto::stSynHallLv_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stSynHallLv_ProtoFunID>() {
  return ::GuildProto::stSynHallLv_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stReqPrayBuildingLv_ProtoModID>() {
  return ::GuildProto::stReqPrayBuildingLv_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stReqPrayBuildingLv_ProtoFunID>() {
  return ::GuildProto::stReqPrayBuildingLv_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stPrayBuildingLvResult_eResult>() {
  return ::GuildProto::stPrayBuildingLvResult_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stPrayBuildingLvResult_ProtoModID>() {
  return ::GuildProto::stPrayBuildingLvResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stPrayBuildingLvResult_ProtoFunID>() {
  return ::GuildProto::stPrayBuildingLvResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stSynPrayBuildingLv_ProtoModID>() {
  return ::GuildProto::stSynPrayBuildingLv_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stSynPrayBuildingLv_ProtoFunID>() {
  return ::GuildProto::stSynPrayBuildingLv_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stReqPray_ProtoModID>() {
  return ::GuildProto::stReqPray_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stReqPray_ProtoFunID>() {
  return ::GuildProto::stReqPray_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stPrayResult_eResult>() {
  return ::GuildProto::stPrayResult_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stPrayResult_ProtoModID>() {
  return ::GuildProto::stPrayResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stPrayResult_ProtoFunID>() {
  return ::GuildProto::stPrayResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stReqLevelUpShopBuildingLv_ProtoModID>() {
  return ::GuildProto::stReqLevelUpShopBuildingLv_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stReqLevelUpShopBuildingLv_ProtoFunID>() {
  return ::GuildProto::stReqLevelUpShopBuildingLv_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stLevelUpShopBuildingLvResult_eResult>() {
  return ::GuildProto::stLevelUpShopBuildingLvResult_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stLevelUpShopBuildingLvResult_ProtoModID>() {
  return ::GuildProto::stLevelUpShopBuildingLvResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stLevelUpShopBuildingLvResult_ProtoFunID>() {
  return ::GuildProto::stLevelUpShopBuildingLvResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stSynShopBuilding_ProtoModID>() {
  return ::GuildProto::stSynShopBuilding_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stSynShopBuilding_ProtoFunID>() {
  return ::GuildProto::stSynShopBuilding_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stReqGuildTrace_ProtoModID>() {
  return ::GuildProto::stReqGuildTrace_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stReqGuildTrace_ProtoFunID>() {
  return ::GuildProto::stReqGuildTrace_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stRetGuildTrace_ProtoModID>() {
  return ::GuildProto::stRetGuildTrace_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stRetGuildTrace_ProtoFunID>() {
  return ::GuildProto::stRetGuildTrace_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stAddNewGuildTrace_ProtoModID>() {
  return ::GuildProto::stAddNewGuildTrace_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stAddNewGuildTrace_ProtoFunID>() {
  return ::GuildProto::stAddNewGuildTrace_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stChgNotice_ProtoModID>() {
  return ::GuildProto::stChgNotice_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stChgNotice_ProtoFunID>() {
  return ::GuildProto::stChgNotice_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stGuildDonateState_ProtoModID>() {
  return ::GuildProto::stGuildDonateState_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stGuildDonateState_ProtoFunID>() {
  return ::GuildProto::stGuildDonateState_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stGuildPrayState_ProtoModID>() {
  return ::GuildProto::stGuildPrayState_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stGuildPrayState_ProtoFunID>() {
  return ::GuildProto::stGuildPrayState_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stReqChangeBadge_ProtoModID>() {
  return ::GuildProto::stReqChangeBadge_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stReqChangeBadge_ProtoFunID>() {
  return ::GuildProto::stReqChangeBadge_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stChangeBadge_eResult>() {
  return ::GuildProto::stChangeBadge_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stChangeBadge_ProtoModID>() {
  return ::GuildProto::stChangeBadge_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stChangeBadge_ProtoFunID>() {
  return ::GuildProto::stChangeBadge_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stIntoGuildCopymap_ProtoModID>() {
  return ::GuildProto::stIntoGuildCopymap_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stIntoGuildCopymap_ProtoFunID>() {
  return ::GuildProto::stIntoGuildCopymap_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stIntoGuildCopymapError_eResult>() {
  return ::GuildProto::stIntoGuildCopymapError_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stIntoGuildCopymapError_ProtoModID>() {
  return ::GuildProto::stIntoGuildCopymapError_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stIntoGuildCopymapError_ProtoFunID>() {
  return ::GuildProto::stIntoGuildCopymapError_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stSearchGuild_ProtoModID>() {
  return ::GuildProto::stSearchGuild_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stSearchGuild_ProtoFunID>() {
  return ::GuildProto::stSearchGuild_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stRetSearchGuildResult_ProtoModID>() {
  return ::GuildProto::stRetSearchGuildResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stRetSearchGuildResult_ProtoFunID>() {
  return ::GuildProto::stRetSearchGuildResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stSynMemberContribute_ProtoModID>() {
  return ::GuildProto::stSynMemberContribute_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stSynMemberContribute_ProtoFunID>() {
  return ::GuildProto::stSynMemberContribute_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stReqOpenGuildCopymapWin_ProtoModID>() {
  return ::GuildProto::stReqOpenGuildCopymapWin_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stReqOpenGuildCopymapWin_ProtoFunID>() {
  return ::GuildProto::stReqOpenGuildCopymapWin_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stRetGuildCopymapInfo_ProtoModID>() {
  return ::GuildProto::stRetGuildCopymapInfo_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stRetGuildCopymapInfo_ProtoFunID>() {
  return ::GuildProto::stRetGuildCopymapInfo_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stReqDamageSortlist_ProtoModID>() {
  return ::GuildProto::stReqDamageSortlist_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stReqDamageSortlist_ProtoFunID>() {
  return ::GuildProto::stReqDamageSortlist_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stRetDamageSortlist_ProtoModID>() {
  return ::GuildProto::stRetDamageSortlist_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stRetDamageSortlist_ProtoFunID>() {
  return ::GuildProto::stRetDamageSortlist_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stReqGuildCopymapScoreSortlist_ProtoModID>() {
  return ::GuildProto::stReqGuildCopymapScoreSortlist_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stReqGuildCopymapScoreSortlist_ProtoFunID>() {
  return ::GuildProto::stReqGuildCopymapScoreSortlist_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stRetGuildCopymapScoreSortlist_ProtoModID>() {
  return ::GuildProto::stRetGuildCopymapScoreSortlist_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stRetGuildCopymapScoreSortlist_ProtoFunID>() {
  return ::GuildProto::stRetGuildCopymapScoreSortlist_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stSynGuildActivityDegree_ProtoModID>() {
  return ::GuildProto::stSynGuildActivityDegree_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stSynGuildActivityDegree_ProtoFunID>() {
  return ::GuildProto::stSynGuildActivityDegree_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stSynMemberChallengeNum_ProtoModID>() {
  return ::GuildProto::stSynMemberChallengeNum_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stSynMemberChallengeNum_ProtoFunID>() {
  return ::GuildProto::stSynMemberChallengeNum_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stSynMemberAssistNum_ProtoModID>() {
  return ::GuildProto::stSynMemberAssistNum_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stSynMemberAssistNum_ProtoFunID>() {
  return ::GuildProto::stSynMemberAssistNum_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stReqEnterGuildCopymap_ProtoModID>() {
  return ::GuildProto::stReqEnterGuildCopymap_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stReqEnterGuildCopymap_ProtoFunID>() {
  return ::GuildProto::stReqEnterGuildCopymap_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stRetEnterGuildCopymapResult_eResult>() {
  return ::GuildProto::stRetEnterGuildCopymapResult_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stRetEnterGuildCopymapResult_ProtoModID>() {
  return ::GuildProto::stRetEnterGuildCopymapResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stRetEnterGuildCopymapResult_ProtoFunID>() {
  return ::GuildProto::stRetEnterGuildCopymapResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stStartGuildCopymap_ProtoModID>() {
  return ::GuildProto::stStartGuildCopymap_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stStartGuildCopymap_ProtoFunID>() {
  return ::GuildProto::stStartGuildCopymap_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stStartGuildCopymapResult_eResult>() {
  return ::GuildProto::stStartGuildCopymapResult_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stStartGuildCopymapResult_ProtoModID>() {
  return ::GuildProto::stStartGuildCopymapResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stStartGuildCopymapResult_ProtoFunID>() {
  return ::GuildProto::stStartGuildCopymapResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stInviteTeamInGuildChannel_ProtoModID>() {
  return ::GuildProto::stInviteTeamInGuildChannel_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stInviteTeamInGuildChannel_ProtoFunID>() {
  return ::GuildProto::stInviteTeamInGuildChannel_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stNotifyGuildMemContribute_ProtoModID>() {
  return ::GuildProto::stNotifyGuildMemContribute_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stNotifyGuildMemContribute_ProtoFunID>() {
  return ::GuildProto::stNotifyGuildMemContribute_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stNotifyGuildMemActivityDegree_ProtoModID>() {
  return ::GuildProto::stNotifyGuildMemActivityDegree_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stNotifyGuildMemActivityDegree_ProtoFunID>() {
  return ::GuildProto::stNotifyGuildMemActivityDegree_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stReqGuildManorFightWin_ProtoModID>() {
  return ::GuildProto::stReqGuildManorFightWin_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stReqGuildManorFightWin_ProtoFunID>() {
  return ::GuildProto::stReqGuildManorFightWin_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stRetGuildManorFightInfo_ProtoModID>() {
  return ::GuildProto::stRetGuildManorFightInfo_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stRetGuildManorFightInfo_ProtoFunID>() {
  return ::GuildProto::stRetGuildManorFightInfo_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stReqOpenApplyManorFightWin_ProtoModID>() {
  return ::GuildProto::stReqOpenApplyManorFightWin_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stReqOpenApplyManorFightWin_ProtoFunID>() {
  return ::GuildProto::stReqOpenApplyManorFightWin_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stApplyManorWinInfo_ProtoModID>() {
  return ::GuildProto::stApplyManorWinInfo_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stApplyManorWinInfo_ProtoFunID>() {
  return ::GuildProto::stApplyManorWinInfo_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stRefreshManorApplyInfo_ProtoModID>() {
  return ::GuildProto::stRefreshManorApplyInfo_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stRefreshManorApplyInfo_ProtoFunID>() {
  return ::GuildProto::stRefreshManorApplyInfo_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stRetManorApplyInfo_ProtoModID>() {
  return ::GuildProto::stRetManorApplyInfo_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stRetManorApplyInfo_ProtoFunID>() {
  return ::GuildProto::stRetManorApplyInfo_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stApplyManorFight_ProtoModID>() {
  return ::GuildProto::stApplyManorFight_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stApplyManorFight_ProtoFunID>() {
  return ::GuildProto::stApplyManorFight_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stApplyManorFightRet_eResult>() {
  return ::GuildProto::stApplyManorFightRet_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stApplyManorFightRet_ProtoModID>() {
  return ::GuildProto::stApplyManorFightRet_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stApplyManorFightRet_ProtoFunID>() {
  return ::GuildProto::stApplyManorFightRet_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stReqManorFightWin_ProtoModID>() {
  return ::GuildProto::stReqManorFightWin_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stReqManorFightWin_ProtoFunID>() {
  return ::GuildProto::stReqManorFightWin_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stRetManorFightWinInfo_ProtoModID>() {
  return ::GuildProto::stRetManorFightWinInfo_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stRetManorFightWinInfo_ProtoFunID>() {
  return ::GuildProto::stRetManorFightWinInfo_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stReqManorFightFormation_ProtoModID>() {
  return ::GuildProto::stReqManorFightFormation_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stReqManorFightFormation_ProtoFunID>() {
  return ::GuildProto::stReqManorFightFormation_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stRetManorFightFormation_ProtoModID>() {
  return ::GuildProto::stRetManorFightFormation_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stRetManorFightFormation_ProtoFunID>() {
  return ::GuildProto::stRetManorFightFormation_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stEnterManorFightTeam_ProtoModID>() {
  return ::GuildProto::stEnterManorFightTeam_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stEnterManorFightTeam_ProtoFunID>() {
  return ::GuildProto::stEnterManorFightTeam_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stEnterManorFightTeamResult_eResult>() {
  return ::GuildProto::stEnterManorFightTeamResult_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stEnterManorFightTeamResult_ProtoModID>() {
  return ::GuildProto::stEnterManorFightTeamResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stEnterManorFightTeamResult_ProtoFunID>() {
  return ::GuildProto::stEnterManorFightTeamResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stNotifyLeaveManorFightWin_ProtoModID>() {
  return ::GuildProto::stNotifyLeaveManorFightWin_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stNotifyLeaveManorFightWin_ProtoFunID>() {
  return ::GuildProto::stNotifyLeaveManorFightWin_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stManorFightPKResult_ProtoModID>() {
  return ::GuildProto::stManorFightPKResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stManorFightPKResult_ProtoFunID>() {
  return ::GuildProto::stManorFightPKResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stManorFightPKFail_ProtoModID>() {
  return ::GuildProto::stManorFightPKFail_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stManorFightPKFail_ProtoFunID>() {
  return ::GuildProto::stManorFightPKFail_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stNotifyWinerAfterApplyEnd_ProtoModID>() {
  return ::GuildProto::stNotifyWinerAfterApplyEnd_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stNotifyWinerAfterApplyEnd_ProtoFunID>() {
  return ::GuildProto::stNotifyWinerAfterApplyEnd_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stReqChgManorFightTeamPos_ProtoModID>() {
  return ::GuildProto::stReqChgManorFightTeamPos_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stReqChgManorFightTeamPos_ProtoFunID>() {
  return ::GuildProto::stReqChgManorFightTeamPos_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stNotifyChgManorFightTeamPos_ProtoModID>() {
  return ::GuildProto::stNotifyChgManorFightTeamPos_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stNotifyChgManorFightTeamPos_ProtoFunID>() {
  return ::GuildProto::stNotifyChgManorFightTeamPos_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stChgManorFightTeamPosResult_eResult>() {
  return ::GuildProto::stChgManorFightTeamPosResult_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stChgManorFightTeamPosResult_ProtoModID>() {
  return ::GuildProto::stChgManorFightTeamPosResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stChgManorFightTeamPosResult_ProtoFunID>() {
  return ::GuildProto::stChgManorFightTeamPosResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stNotifyManorFightFail_ProtoModID>() {
  return ::GuildProto::stNotifyManorFightFail_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stNotifyManorFightFail_ProtoFunID>() {
  return ::GuildProto::stNotifyManorFightFail_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stManorFightHasNotMatch_ProtoModID>() {
  return ::GuildProto::stManorFightHasNotMatch_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stManorFightHasNotMatch_ProtoFunID>() {
  return ::GuildProto::stManorFightHasNotMatch_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stManorFightFormationResult_ProtoModID>() {
  return ::GuildProto::stManorFightFormationResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stManorFightFormationResult_ProtoFunID>() {
  return ::GuildProto::stManorFightFormationResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stManorFightFinish_ProtoModID>() {
  return ::GuildProto::stManorFightFinish_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stManorFightFinish_ProtoFunID>() {
  return ::GuildProto::stManorFightFinish_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stReqLevelUpBlackMarketLv_ProtoModID>() {
  return ::GuildProto::stReqLevelUpBlackMarketLv_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stReqLevelUpBlackMarketLv_ProtoFunID>() {
  return ::GuildProto::stReqLevelUpBlackMarketLv_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stLevelUpBlackMarketLvResult_eResult>() {
  return ::GuildProto::stLevelUpBlackMarketLvResult_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stLevelUpBlackMarketLvResult_ProtoModID>() {
  return ::GuildProto::stLevelUpBlackMarketLvResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stLevelUpBlackMarketLvResult_ProtoFunID>() {
  return ::GuildProto::stLevelUpBlackMarketLvResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stSynBlackMarketBuildingLv_ProtoModID>() {
  return ::GuildProto::stSynBlackMarketBuildingLv_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::stSynBlackMarketBuildingLv_ProtoFunID>() {
  return ::GuildProto::stSynBlackMarketBuildingLv_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::eGuildTile>() {
  return ::GuildProto::eGuildTile_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::eCreateGuildError>() {
  return ::GuildProto::eCreateGuildError_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::JoinGuildResult>() {
  return ::GuildProto::JoinGuildResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::ReplyError>() {
  return ::GuildProto::ReplyError_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::eAssignTitleError>() {
  return ::GuildProto::eAssignTitleError_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::eCancelTitleError>() {
  return ::GuildProto::eCancelTitleError_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::eGiveLeaderErrorNo>() {
  return ::GuildProto::eGiveLeaderErrorNo_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::eFireMemberErrorNo>() {
  return ::GuildProto::eFireMemberErrorNo_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::eKillOutErrorNo>() {
  return ::GuildProto::eKillOutErrorNo_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::eTraceID>() {
  return ::GuildProto::eTraceID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GuildProto::eFormation>() {
  return ::GuildProto::eFormation_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_GuildProto_2eproto__INCLUDED
