// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Game.proto

#ifndef PROTOBUF_Game_2eproto__INCLUDED
#define PROTOBUF_Game_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace Game {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Game_2eproto();
void protobuf_AssignDesc_Game_2eproto();
void protobuf_ShutdownFile_Game_2eproto();

class stLoginGame;
class stGateForwardGame;
class stGameForwardGate;
class stKillOutUser;
class stBroadbastProto2World;
class stUserLoginGameResult;
class stBroadcastProto2UserList;
class stNotifyLevelUp;
class stUserLevelupLog;
class stUserLoginLog;
class stVipLevelupLog;
class stHonourChgLog;
class stItemChgLog;
class stResourceChgLog;
class stDailyTaskLog;
class stRechargeLog;
class stPublishActivity;
class stPublishActivityResult;
class stUnloadActivity;
class stUnloadActivityResult;
class stMallBuyLog;
class stHeroPropChgLog;
class stSendGuildLog;
class sstSendGuildResLog;
class stSendModuleLog;
class stSkillChgLog;
class stSpriteLog;
class stCopymapLog;
class stEquipChgLog;
class stActivityLog;
class stUserCancel;
class stUserCancelRes;
class stReqPayType;
class stReqPayTypeCb;
class stUpdateSvrOpenTime;
class stAcitivityLimitPetItem;
class stSendLimitPetActivityData;

enum stLoginGame_ProtoModID {
  stLoginGame_ProtoModID_ModID = 1
};
bool stLoginGame_ProtoModID_IsValid(int value);
const stLoginGame_ProtoModID stLoginGame_ProtoModID_ProtoModID_MIN = stLoginGame_ProtoModID_ModID;
const stLoginGame_ProtoModID stLoginGame_ProtoModID_ProtoModID_MAX = stLoginGame_ProtoModID_ModID;
const int stLoginGame_ProtoModID_ProtoModID_ARRAYSIZE = stLoginGame_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stLoginGame_ProtoModID_descriptor();
inline const ::std::string& stLoginGame_ProtoModID_Name(stLoginGame_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stLoginGame_ProtoModID_descriptor(), value);
}
inline bool stLoginGame_ProtoModID_Parse(
    const ::std::string& name, stLoginGame_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stLoginGame_ProtoModID>(
    stLoginGame_ProtoModID_descriptor(), name, value);
}
enum stLoginGame_ProtoFunID {
  stLoginGame_ProtoFunID_FunID = 1
};
bool stLoginGame_ProtoFunID_IsValid(int value);
const stLoginGame_ProtoFunID stLoginGame_ProtoFunID_ProtoFunID_MIN = stLoginGame_ProtoFunID_FunID;
const stLoginGame_ProtoFunID stLoginGame_ProtoFunID_ProtoFunID_MAX = stLoginGame_ProtoFunID_FunID;
const int stLoginGame_ProtoFunID_ProtoFunID_ARRAYSIZE = stLoginGame_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stLoginGame_ProtoFunID_descriptor();
inline const ::std::string& stLoginGame_ProtoFunID_Name(stLoginGame_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stLoginGame_ProtoFunID_descriptor(), value);
}
inline bool stLoginGame_ProtoFunID_Parse(
    const ::std::string& name, stLoginGame_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stLoginGame_ProtoFunID>(
    stLoginGame_ProtoFunID_descriptor(), name, value);
}
enum stGateForwardGame_ProtoModID {
  stGateForwardGame_ProtoModID_ModID = 2
};
bool stGateForwardGame_ProtoModID_IsValid(int value);
const stGateForwardGame_ProtoModID stGateForwardGame_ProtoModID_ProtoModID_MIN = stGateForwardGame_ProtoModID_ModID;
const stGateForwardGame_ProtoModID stGateForwardGame_ProtoModID_ProtoModID_MAX = stGateForwardGame_ProtoModID_ModID;
const int stGateForwardGame_ProtoModID_ProtoModID_ARRAYSIZE = stGateForwardGame_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stGateForwardGame_ProtoModID_descriptor();
inline const ::std::string& stGateForwardGame_ProtoModID_Name(stGateForwardGame_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stGateForwardGame_ProtoModID_descriptor(), value);
}
inline bool stGateForwardGame_ProtoModID_Parse(
    const ::std::string& name, stGateForwardGame_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stGateForwardGame_ProtoModID>(
    stGateForwardGame_ProtoModID_descriptor(), name, value);
}
enum stGateForwardGame_ProtoFunID {
  stGateForwardGame_ProtoFunID_FunID = 1
};
bool stGateForwardGame_ProtoFunID_IsValid(int value);
const stGateForwardGame_ProtoFunID stGateForwardGame_ProtoFunID_ProtoFunID_MIN = stGateForwardGame_ProtoFunID_FunID;
const stGateForwardGame_ProtoFunID stGateForwardGame_ProtoFunID_ProtoFunID_MAX = stGateForwardGame_ProtoFunID_FunID;
const int stGateForwardGame_ProtoFunID_ProtoFunID_ARRAYSIZE = stGateForwardGame_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stGateForwardGame_ProtoFunID_descriptor();
inline const ::std::string& stGateForwardGame_ProtoFunID_Name(stGateForwardGame_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stGateForwardGame_ProtoFunID_descriptor(), value);
}
inline bool stGateForwardGame_ProtoFunID_Parse(
    const ::std::string& name, stGateForwardGame_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stGateForwardGame_ProtoFunID>(
    stGateForwardGame_ProtoFunID_descriptor(), name, value);
}
enum stGameForwardGate_ProtoModID {
  stGameForwardGate_ProtoModID_ModID = 2
};
bool stGameForwardGate_ProtoModID_IsValid(int value);
const stGameForwardGate_ProtoModID stGameForwardGate_ProtoModID_ProtoModID_MIN = stGameForwardGate_ProtoModID_ModID;
const stGameForwardGate_ProtoModID stGameForwardGate_ProtoModID_ProtoModID_MAX = stGameForwardGate_ProtoModID_ModID;
const int stGameForwardGate_ProtoModID_ProtoModID_ARRAYSIZE = stGameForwardGate_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stGameForwardGate_ProtoModID_descriptor();
inline const ::std::string& stGameForwardGate_ProtoModID_Name(stGameForwardGate_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stGameForwardGate_ProtoModID_descriptor(), value);
}
inline bool stGameForwardGate_ProtoModID_Parse(
    const ::std::string& name, stGameForwardGate_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stGameForwardGate_ProtoModID>(
    stGameForwardGate_ProtoModID_descriptor(), name, value);
}
enum stGameForwardGate_ProtoFunID {
  stGameForwardGate_ProtoFunID_FunID = 2
};
bool stGameForwardGate_ProtoFunID_IsValid(int value);
const stGameForwardGate_ProtoFunID stGameForwardGate_ProtoFunID_ProtoFunID_MIN = stGameForwardGate_ProtoFunID_FunID;
const stGameForwardGate_ProtoFunID stGameForwardGate_ProtoFunID_ProtoFunID_MAX = stGameForwardGate_ProtoFunID_FunID;
const int stGameForwardGate_ProtoFunID_ProtoFunID_ARRAYSIZE = stGameForwardGate_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stGameForwardGate_ProtoFunID_descriptor();
inline const ::std::string& stGameForwardGate_ProtoFunID_Name(stGameForwardGate_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stGameForwardGate_ProtoFunID_descriptor(), value);
}
inline bool stGameForwardGate_ProtoFunID_Parse(
    const ::std::string& name, stGameForwardGate_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stGameForwardGate_ProtoFunID>(
    stGameForwardGate_ProtoFunID_descriptor(), name, value);
}
enum stKillOutUser_ProtoModID {
  stKillOutUser_ProtoModID_ModID = 2
};
bool stKillOutUser_ProtoModID_IsValid(int value);
const stKillOutUser_ProtoModID stKillOutUser_ProtoModID_ProtoModID_MIN = stKillOutUser_ProtoModID_ModID;
const stKillOutUser_ProtoModID stKillOutUser_ProtoModID_ProtoModID_MAX = stKillOutUser_ProtoModID_ModID;
const int stKillOutUser_ProtoModID_ProtoModID_ARRAYSIZE = stKillOutUser_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stKillOutUser_ProtoModID_descriptor();
inline const ::std::string& stKillOutUser_ProtoModID_Name(stKillOutUser_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stKillOutUser_ProtoModID_descriptor(), value);
}
inline bool stKillOutUser_ProtoModID_Parse(
    const ::std::string& name, stKillOutUser_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stKillOutUser_ProtoModID>(
    stKillOutUser_ProtoModID_descriptor(), name, value);
}
enum stKillOutUser_ProtoFunID {
  stKillOutUser_ProtoFunID_FunID = 3
};
bool stKillOutUser_ProtoFunID_IsValid(int value);
const stKillOutUser_ProtoFunID stKillOutUser_ProtoFunID_ProtoFunID_MIN = stKillOutUser_ProtoFunID_FunID;
const stKillOutUser_ProtoFunID stKillOutUser_ProtoFunID_ProtoFunID_MAX = stKillOutUser_ProtoFunID_FunID;
const int stKillOutUser_ProtoFunID_ProtoFunID_ARRAYSIZE = stKillOutUser_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stKillOutUser_ProtoFunID_descriptor();
inline const ::std::string& stKillOutUser_ProtoFunID_Name(stKillOutUser_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stKillOutUser_ProtoFunID_descriptor(), value);
}
inline bool stKillOutUser_ProtoFunID_Parse(
    const ::std::string& name, stKillOutUser_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stKillOutUser_ProtoFunID>(
    stKillOutUser_ProtoFunID_descriptor(), name, value);
}
enum stBroadbastProto2World_ProtoModID {
  stBroadbastProto2World_ProtoModID_ModID = 2
};
bool stBroadbastProto2World_ProtoModID_IsValid(int value);
const stBroadbastProto2World_ProtoModID stBroadbastProto2World_ProtoModID_ProtoModID_MIN = stBroadbastProto2World_ProtoModID_ModID;
const stBroadbastProto2World_ProtoModID stBroadbastProto2World_ProtoModID_ProtoModID_MAX = stBroadbastProto2World_ProtoModID_ModID;
const int stBroadbastProto2World_ProtoModID_ProtoModID_ARRAYSIZE = stBroadbastProto2World_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stBroadbastProto2World_ProtoModID_descriptor();
inline const ::std::string& stBroadbastProto2World_ProtoModID_Name(stBroadbastProto2World_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stBroadbastProto2World_ProtoModID_descriptor(), value);
}
inline bool stBroadbastProto2World_ProtoModID_Parse(
    const ::std::string& name, stBroadbastProto2World_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stBroadbastProto2World_ProtoModID>(
    stBroadbastProto2World_ProtoModID_descriptor(), name, value);
}
enum stBroadbastProto2World_ProtoFunID {
  stBroadbastProto2World_ProtoFunID_FunID = 4
};
bool stBroadbastProto2World_ProtoFunID_IsValid(int value);
const stBroadbastProto2World_ProtoFunID stBroadbastProto2World_ProtoFunID_ProtoFunID_MIN = stBroadbastProto2World_ProtoFunID_FunID;
const stBroadbastProto2World_ProtoFunID stBroadbastProto2World_ProtoFunID_ProtoFunID_MAX = stBroadbastProto2World_ProtoFunID_FunID;
const int stBroadbastProto2World_ProtoFunID_ProtoFunID_ARRAYSIZE = stBroadbastProto2World_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stBroadbastProto2World_ProtoFunID_descriptor();
inline const ::std::string& stBroadbastProto2World_ProtoFunID_Name(stBroadbastProto2World_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stBroadbastProto2World_ProtoFunID_descriptor(), value);
}
inline bool stBroadbastProto2World_ProtoFunID_Parse(
    const ::std::string& name, stBroadbastProto2World_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stBroadbastProto2World_ProtoFunID>(
    stBroadbastProto2World_ProtoFunID_descriptor(), name, value);
}
enum stUserLoginGameResult_ProtoModID {
  stUserLoginGameResult_ProtoModID_ModID = 2
};
bool stUserLoginGameResult_ProtoModID_IsValid(int value);
const stUserLoginGameResult_ProtoModID stUserLoginGameResult_ProtoModID_ProtoModID_MIN = stUserLoginGameResult_ProtoModID_ModID;
const stUserLoginGameResult_ProtoModID stUserLoginGameResult_ProtoModID_ProtoModID_MAX = stUserLoginGameResult_ProtoModID_ModID;
const int stUserLoginGameResult_ProtoModID_ProtoModID_ARRAYSIZE = stUserLoginGameResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stUserLoginGameResult_ProtoModID_descriptor();
inline const ::std::string& stUserLoginGameResult_ProtoModID_Name(stUserLoginGameResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stUserLoginGameResult_ProtoModID_descriptor(), value);
}
inline bool stUserLoginGameResult_ProtoModID_Parse(
    const ::std::string& name, stUserLoginGameResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stUserLoginGameResult_ProtoModID>(
    stUserLoginGameResult_ProtoModID_descriptor(), name, value);
}
enum stUserLoginGameResult_ProtoFunID {
  stUserLoginGameResult_ProtoFunID_FunID = 5
};
bool stUserLoginGameResult_ProtoFunID_IsValid(int value);
const stUserLoginGameResult_ProtoFunID stUserLoginGameResult_ProtoFunID_ProtoFunID_MIN = stUserLoginGameResult_ProtoFunID_FunID;
const stUserLoginGameResult_ProtoFunID stUserLoginGameResult_ProtoFunID_ProtoFunID_MAX = stUserLoginGameResult_ProtoFunID_FunID;
const int stUserLoginGameResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stUserLoginGameResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stUserLoginGameResult_ProtoFunID_descriptor();
inline const ::std::string& stUserLoginGameResult_ProtoFunID_Name(stUserLoginGameResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stUserLoginGameResult_ProtoFunID_descriptor(), value);
}
inline bool stUserLoginGameResult_ProtoFunID_Parse(
    const ::std::string& name, stUserLoginGameResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stUserLoginGameResult_ProtoFunID>(
    stUserLoginGameResult_ProtoFunID_descriptor(), name, value);
}
enum stBroadcastProto2UserList_ProtoModID {
  stBroadcastProto2UserList_ProtoModID_ModID = 2
};
bool stBroadcastProto2UserList_ProtoModID_IsValid(int value);
const stBroadcastProto2UserList_ProtoModID stBroadcastProto2UserList_ProtoModID_ProtoModID_MIN = stBroadcastProto2UserList_ProtoModID_ModID;
const stBroadcastProto2UserList_ProtoModID stBroadcastProto2UserList_ProtoModID_ProtoModID_MAX = stBroadcastProto2UserList_ProtoModID_ModID;
const int stBroadcastProto2UserList_ProtoModID_ProtoModID_ARRAYSIZE = stBroadcastProto2UserList_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stBroadcastProto2UserList_ProtoModID_descriptor();
inline const ::std::string& stBroadcastProto2UserList_ProtoModID_Name(stBroadcastProto2UserList_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stBroadcastProto2UserList_ProtoModID_descriptor(), value);
}
inline bool stBroadcastProto2UserList_ProtoModID_Parse(
    const ::std::string& name, stBroadcastProto2UserList_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stBroadcastProto2UserList_ProtoModID>(
    stBroadcastProto2UserList_ProtoModID_descriptor(), name, value);
}
enum stBroadcastProto2UserList_ProtoFunID {
  stBroadcastProto2UserList_ProtoFunID_FunID = 6
};
bool stBroadcastProto2UserList_ProtoFunID_IsValid(int value);
const stBroadcastProto2UserList_ProtoFunID stBroadcastProto2UserList_ProtoFunID_ProtoFunID_MIN = stBroadcastProto2UserList_ProtoFunID_FunID;
const stBroadcastProto2UserList_ProtoFunID stBroadcastProto2UserList_ProtoFunID_ProtoFunID_MAX = stBroadcastProto2UserList_ProtoFunID_FunID;
const int stBroadcastProto2UserList_ProtoFunID_ProtoFunID_ARRAYSIZE = stBroadcastProto2UserList_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stBroadcastProto2UserList_ProtoFunID_descriptor();
inline const ::std::string& stBroadcastProto2UserList_ProtoFunID_Name(stBroadcastProto2UserList_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stBroadcastProto2UserList_ProtoFunID_descriptor(), value);
}
inline bool stBroadcastProto2UserList_ProtoFunID_Parse(
    const ::std::string& name, stBroadcastProto2UserList_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stBroadcastProto2UserList_ProtoFunID>(
    stBroadcastProto2UserList_ProtoFunID_descriptor(), name, value);
}
enum stNotifyLevelUp_ProtoModID {
  stNotifyLevelUp_ProtoModID_ModID = 2
};
bool stNotifyLevelUp_ProtoModID_IsValid(int value);
const stNotifyLevelUp_ProtoModID stNotifyLevelUp_ProtoModID_ProtoModID_MIN = stNotifyLevelUp_ProtoModID_ModID;
const stNotifyLevelUp_ProtoModID stNotifyLevelUp_ProtoModID_ProtoModID_MAX = stNotifyLevelUp_ProtoModID_ModID;
const int stNotifyLevelUp_ProtoModID_ProtoModID_ARRAYSIZE = stNotifyLevelUp_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyLevelUp_ProtoModID_descriptor();
inline const ::std::string& stNotifyLevelUp_ProtoModID_Name(stNotifyLevelUp_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyLevelUp_ProtoModID_descriptor(), value);
}
inline bool stNotifyLevelUp_ProtoModID_Parse(
    const ::std::string& name, stNotifyLevelUp_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyLevelUp_ProtoModID>(
    stNotifyLevelUp_ProtoModID_descriptor(), name, value);
}
enum stNotifyLevelUp_ProtoFunID {
  stNotifyLevelUp_ProtoFunID_FunID = 7
};
bool stNotifyLevelUp_ProtoFunID_IsValid(int value);
const stNotifyLevelUp_ProtoFunID stNotifyLevelUp_ProtoFunID_ProtoFunID_MIN = stNotifyLevelUp_ProtoFunID_FunID;
const stNotifyLevelUp_ProtoFunID stNotifyLevelUp_ProtoFunID_ProtoFunID_MAX = stNotifyLevelUp_ProtoFunID_FunID;
const int stNotifyLevelUp_ProtoFunID_ProtoFunID_ARRAYSIZE = stNotifyLevelUp_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyLevelUp_ProtoFunID_descriptor();
inline const ::std::string& stNotifyLevelUp_ProtoFunID_Name(stNotifyLevelUp_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyLevelUp_ProtoFunID_descriptor(), value);
}
inline bool stNotifyLevelUp_ProtoFunID_Parse(
    const ::std::string& name, stNotifyLevelUp_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyLevelUp_ProtoFunID>(
    stNotifyLevelUp_ProtoFunID_descriptor(), name, value);
}
enum stUserLevelupLog_ProtoModID {
  stUserLevelupLog_ProtoModID_ModID = 3
};
bool stUserLevelupLog_ProtoModID_IsValid(int value);
const stUserLevelupLog_ProtoModID stUserLevelupLog_ProtoModID_ProtoModID_MIN = stUserLevelupLog_ProtoModID_ModID;
const stUserLevelupLog_ProtoModID stUserLevelupLog_ProtoModID_ProtoModID_MAX = stUserLevelupLog_ProtoModID_ModID;
const int stUserLevelupLog_ProtoModID_ProtoModID_ARRAYSIZE = stUserLevelupLog_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stUserLevelupLog_ProtoModID_descriptor();
inline const ::std::string& stUserLevelupLog_ProtoModID_Name(stUserLevelupLog_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stUserLevelupLog_ProtoModID_descriptor(), value);
}
inline bool stUserLevelupLog_ProtoModID_Parse(
    const ::std::string& name, stUserLevelupLog_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stUserLevelupLog_ProtoModID>(
    stUserLevelupLog_ProtoModID_descriptor(), name, value);
}
enum stUserLevelupLog_ProtoFunID {
  stUserLevelupLog_ProtoFunID_FunID = 1
};
bool stUserLevelupLog_ProtoFunID_IsValid(int value);
const stUserLevelupLog_ProtoFunID stUserLevelupLog_ProtoFunID_ProtoFunID_MIN = stUserLevelupLog_ProtoFunID_FunID;
const stUserLevelupLog_ProtoFunID stUserLevelupLog_ProtoFunID_ProtoFunID_MAX = stUserLevelupLog_ProtoFunID_FunID;
const int stUserLevelupLog_ProtoFunID_ProtoFunID_ARRAYSIZE = stUserLevelupLog_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stUserLevelupLog_ProtoFunID_descriptor();
inline const ::std::string& stUserLevelupLog_ProtoFunID_Name(stUserLevelupLog_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stUserLevelupLog_ProtoFunID_descriptor(), value);
}
inline bool stUserLevelupLog_ProtoFunID_Parse(
    const ::std::string& name, stUserLevelupLog_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stUserLevelupLog_ProtoFunID>(
    stUserLevelupLog_ProtoFunID_descriptor(), name, value);
}
enum stUserLoginLog_ProtoModID {
  stUserLoginLog_ProtoModID_ModID = 3
};
bool stUserLoginLog_ProtoModID_IsValid(int value);
const stUserLoginLog_ProtoModID stUserLoginLog_ProtoModID_ProtoModID_MIN = stUserLoginLog_ProtoModID_ModID;
const stUserLoginLog_ProtoModID stUserLoginLog_ProtoModID_ProtoModID_MAX = stUserLoginLog_ProtoModID_ModID;
const int stUserLoginLog_ProtoModID_ProtoModID_ARRAYSIZE = stUserLoginLog_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stUserLoginLog_ProtoModID_descriptor();
inline const ::std::string& stUserLoginLog_ProtoModID_Name(stUserLoginLog_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stUserLoginLog_ProtoModID_descriptor(), value);
}
inline bool stUserLoginLog_ProtoModID_Parse(
    const ::std::string& name, stUserLoginLog_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stUserLoginLog_ProtoModID>(
    stUserLoginLog_ProtoModID_descriptor(), name, value);
}
enum stUserLoginLog_ProtoFunID {
  stUserLoginLog_ProtoFunID_FunID = 2
};
bool stUserLoginLog_ProtoFunID_IsValid(int value);
const stUserLoginLog_ProtoFunID stUserLoginLog_ProtoFunID_ProtoFunID_MIN = stUserLoginLog_ProtoFunID_FunID;
const stUserLoginLog_ProtoFunID stUserLoginLog_ProtoFunID_ProtoFunID_MAX = stUserLoginLog_ProtoFunID_FunID;
const int stUserLoginLog_ProtoFunID_ProtoFunID_ARRAYSIZE = stUserLoginLog_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stUserLoginLog_ProtoFunID_descriptor();
inline const ::std::string& stUserLoginLog_ProtoFunID_Name(stUserLoginLog_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stUserLoginLog_ProtoFunID_descriptor(), value);
}
inline bool stUserLoginLog_ProtoFunID_Parse(
    const ::std::string& name, stUserLoginLog_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stUserLoginLog_ProtoFunID>(
    stUserLoginLog_ProtoFunID_descriptor(), name, value);
}
enum stVipLevelupLog_ProtoModID {
  stVipLevelupLog_ProtoModID_ModID = 3
};
bool stVipLevelupLog_ProtoModID_IsValid(int value);
const stVipLevelupLog_ProtoModID stVipLevelupLog_ProtoModID_ProtoModID_MIN = stVipLevelupLog_ProtoModID_ModID;
const stVipLevelupLog_ProtoModID stVipLevelupLog_ProtoModID_ProtoModID_MAX = stVipLevelupLog_ProtoModID_ModID;
const int stVipLevelupLog_ProtoModID_ProtoModID_ARRAYSIZE = stVipLevelupLog_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stVipLevelupLog_ProtoModID_descriptor();
inline const ::std::string& stVipLevelupLog_ProtoModID_Name(stVipLevelupLog_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stVipLevelupLog_ProtoModID_descriptor(), value);
}
inline bool stVipLevelupLog_ProtoModID_Parse(
    const ::std::string& name, stVipLevelupLog_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stVipLevelupLog_ProtoModID>(
    stVipLevelupLog_ProtoModID_descriptor(), name, value);
}
enum stVipLevelupLog_ProtoFunID {
  stVipLevelupLog_ProtoFunID_FunID = 3
};
bool stVipLevelupLog_ProtoFunID_IsValid(int value);
const stVipLevelupLog_ProtoFunID stVipLevelupLog_ProtoFunID_ProtoFunID_MIN = stVipLevelupLog_ProtoFunID_FunID;
const stVipLevelupLog_ProtoFunID stVipLevelupLog_ProtoFunID_ProtoFunID_MAX = stVipLevelupLog_ProtoFunID_FunID;
const int stVipLevelupLog_ProtoFunID_ProtoFunID_ARRAYSIZE = stVipLevelupLog_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stVipLevelupLog_ProtoFunID_descriptor();
inline const ::std::string& stVipLevelupLog_ProtoFunID_Name(stVipLevelupLog_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stVipLevelupLog_ProtoFunID_descriptor(), value);
}
inline bool stVipLevelupLog_ProtoFunID_Parse(
    const ::std::string& name, stVipLevelupLog_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stVipLevelupLog_ProtoFunID>(
    stVipLevelupLog_ProtoFunID_descriptor(), name, value);
}
enum stHonourChgLog_ProtoModID {
  stHonourChgLog_ProtoModID_ModID = 3
};
bool stHonourChgLog_ProtoModID_IsValid(int value);
const stHonourChgLog_ProtoModID stHonourChgLog_ProtoModID_ProtoModID_MIN = stHonourChgLog_ProtoModID_ModID;
const stHonourChgLog_ProtoModID stHonourChgLog_ProtoModID_ProtoModID_MAX = stHonourChgLog_ProtoModID_ModID;
const int stHonourChgLog_ProtoModID_ProtoModID_ARRAYSIZE = stHonourChgLog_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stHonourChgLog_ProtoModID_descriptor();
inline const ::std::string& stHonourChgLog_ProtoModID_Name(stHonourChgLog_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stHonourChgLog_ProtoModID_descriptor(), value);
}
inline bool stHonourChgLog_ProtoModID_Parse(
    const ::std::string& name, stHonourChgLog_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stHonourChgLog_ProtoModID>(
    stHonourChgLog_ProtoModID_descriptor(), name, value);
}
enum stHonourChgLog_ProtoFunID {
  stHonourChgLog_ProtoFunID_FunID = 4
};
bool stHonourChgLog_ProtoFunID_IsValid(int value);
const stHonourChgLog_ProtoFunID stHonourChgLog_ProtoFunID_ProtoFunID_MIN = stHonourChgLog_ProtoFunID_FunID;
const stHonourChgLog_ProtoFunID stHonourChgLog_ProtoFunID_ProtoFunID_MAX = stHonourChgLog_ProtoFunID_FunID;
const int stHonourChgLog_ProtoFunID_ProtoFunID_ARRAYSIZE = stHonourChgLog_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stHonourChgLog_ProtoFunID_descriptor();
inline const ::std::string& stHonourChgLog_ProtoFunID_Name(stHonourChgLog_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stHonourChgLog_ProtoFunID_descriptor(), value);
}
inline bool stHonourChgLog_ProtoFunID_Parse(
    const ::std::string& name, stHonourChgLog_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stHonourChgLog_ProtoFunID>(
    stHonourChgLog_ProtoFunID_descriptor(), name, value);
}
enum stItemChgLog_ProtoModID {
  stItemChgLog_ProtoModID_ModID = 3
};
bool stItemChgLog_ProtoModID_IsValid(int value);
const stItemChgLog_ProtoModID stItemChgLog_ProtoModID_ProtoModID_MIN = stItemChgLog_ProtoModID_ModID;
const stItemChgLog_ProtoModID stItemChgLog_ProtoModID_ProtoModID_MAX = stItemChgLog_ProtoModID_ModID;
const int stItemChgLog_ProtoModID_ProtoModID_ARRAYSIZE = stItemChgLog_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stItemChgLog_ProtoModID_descriptor();
inline const ::std::string& stItemChgLog_ProtoModID_Name(stItemChgLog_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stItemChgLog_ProtoModID_descriptor(), value);
}
inline bool stItemChgLog_ProtoModID_Parse(
    const ::std::string& name, stItemChgLog_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stItemChgLog_ProtoModID>(
    stItemChgLog_ProtoModID_descriptor(), name, value);
}
enum stItemChgLog_ProtoFunID {
  stItemChgLog_ProtoFunID_FunID = 5
};
bool stItemChgLog_ProtoFunID_IsValid(int value);
const stItemChgLog_ProtoFunID stItemChgLog_ProtoFunID_ProtoFunID_MIN = stItemChgLog_ProtoFunID_FunID;
const stItemChgLog_ProtoFunID stItemChgLog_ProtoFunID_ProtoFunID_MAX = stItemChgLog_ProtoFunID_FunID;
const int stItemChgLog_ProtoFunID_ProtoFunID_ARRAYSIZE = stItemChgLog_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stItemChgLog_ProtoFunID_descriptor();
inline const ::std::string& stItemChgLog_ProtoFunID_Name(stItemChgLog_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stItemChgLog_ProtoFunID_descriptor(), value);
}
inline bool stItemChgLog_ProtoFunID_Parse(
    const ::std::string& name, stItemChgLog_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stItemChgLog_ProtoFunID>(
    stItemChgLog_ProtoFunID_descriptor(), name, value);
}
enum stResourceChgLog_ProtoModID {
  stResourceChgLog_ProtoModID_ModID = 3
};
bool stResourceChgLog_ProtoModID_IsValid(int value);
const stResourceChgLog_ProtoModID stResourceChgLog_ProtoModID_ProtoModID_MIN = stResourceChgLog_ProtoModID_ModID;
const stResourceChgLog_ProtoModID stResourceChgLog_ProtoModID_ProtoModID_MAX = stResourceChgLog_ProtoModID_ModID;
const int stResourceChgLog_ProtoModID_ProtoModID_ARRAYSIZE = stResourceChgLog_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stResourceChgLog_ProtoModID_descriptor();
inline const ::std::string& stResourceChgLog_ProtoModID_Name(stResourceChgLog_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stResourceChgLog_ProtoModID_descriptor(), value);
}
inline bool stResourceChgLog_ProtoModID_Parse(
    const ::std::string& name, stResourceChgLog_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stResourceChgLog_ProtoModID>(
    stResourceChgLog_ProtoModID_descriptor(), name, value);
}
enum stResourceChgLog_ProtoFunID {
  stResourceChgLog_ProtoFunID_FunID = 6
};
bool stResourceChgLog_ProtoFunID_IsValid(int value);
const stResourceChgLog_ProtoFunID stResourceChgLog_ProtoFunID_ProtoFunID_MIN = stResourceChgLog_ProtoFunID_FunID;
const stResourceChgLog_ProtoFunID stResourceChgLog_ProtoFunID_ProtoFunID_MAX = stResourceChgLog_ProtoFunID_FunID;
const int stResourceChgLog_ProtoFunID_ProtoFunID_ARRAYSIZE = stResourceChgLog_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stResourceChgLog_ProtoFunID_descriptor();
inline const ::std::string& stResourceChgLog_ProtoFunID_Name(stResourceChgLog_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stResourceChgLog_ProtoFunID_descriptor(), value);
}
inline bool stResourceChgLog_ProtoFunID_Parse(
    const ::std::string& name, stResourceChgLog_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stResourceChgLog_ProtoFunID>(
    stResourceChgLog_ProtoFunID_descriptor(), name, value);
}
enum stDailyTaskLog_ProtoModID {
  stDailyTaskLog_ProtoModID_ModID = 3
};
bool stDailyTaskLog_ProtoModID_IsValid(int value);
const stDailyTaskLog_ProtoModID stDailyTaskLog_ProtoModID_ProtoModID_MIN = stDailyTaskLog_ProtoModID_ModID;
const stDailyTaskLog_ProtoModID stDailyTaskLog_ProtoModID_ProtoModID_MAX = stDailyTaskLog_ProtoModID_ModID;
const int stDailyTaskLog_ProtoModID_ProtoModID_ARRAYSIZE = stDailyTaskLog_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stDailyTaskLog_ProtoModID_descriptor();
inline const ::std::string& stDailyTaskLog_ProtoModID_Name(stDailyTaskLog_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stDailyTaskLog_ProtoModID_descriptor(), value);
}
inline bool stDailyTaskLog_ProtoModID_Parse(
    const ::std::string& name, stDailyTaskLog_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stDailyTaskLog_ProtoModID>(
    stDailyTaskLog_ProtoModID_descriptor(), name, value);
}
enum stDailyTaskLog_ProtoFunID {
  stDailyTaskLog_ProtoFunID_FunID = 7
};
bool stDailyTaskLog_ProtoFunID_IsValid(int value);
const stDailyTaskLog_ProtoFunID stDailyTaskLog_ProtoFunID_ProtoFunID_MIN = stDailyTaskLog_ProtoFunID_FunID;
const stDailyTaskLog_ProtoFunID stDailyTaskLog_ProtoFunID_ProtoFunID_MAX = stDailyTaskLog_ProtoFunID_FunID;
const int stDailyTaskLog_ProtoFunID_ProtoFunID_ARRAYSIZE = stDailyTaskLog_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stDailyTaskLog_ProtoFunID_descriptor();
inline const ::std::string& stDailyTaskLog_ProtoFunID_Name(stDailyTaskLog_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stDailyTaskLog_ProtoFunID_descriptor(), value);
}
inline bool stDailyTaskLog_ProtoFunID_Parse(
    const ::std::string& name, stDailyTaskLog_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stDailyTaskLog_ProtoFunID>(
    stDailyTaskLog_ProtoFunID_descriptor(), name, value);
}
enum stRechargeLog_ProtoModID {
  stRechargeLog_ProtoModID_ModID = 3
};
bool stRechargeLog_ProtoModID_IsValid(int value);
const stRechargeLog_ProtoModID stRechargeLog_ProtoModID_ProtoModID_MIN = stRechargeLog_ProtoModID_ModID;
const stRechargeLog_ProtoModID stRechargeLog_ProtoModID_ProtoModID_MAX = stRechargeLog_ProtoModID_ModID;
const int stRechargeLog_ProtoModID_ProtoModID_ARRAYSIZE = stRechargeLog_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRechargeLog_ProtoModID_descriptor();
inline const ::std::string& stRechargeLog_ProtoModID_Name(stRechargeLog_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRechargeLog_ProtoModID_descriptor(), value);
}
inline bool stRechargeLog_ProtoModID_Parse(
    const ::std::string& name, stRechargeLog_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRechargeLog_ProtoModID>(
    stRechargeLog_ProtoModID_descriptor(), name, value);
}
enum stRechargeLog_ProtoFunID {
  stRechargeLog_ProtoFunID_FunID = 8
};
bool stRechargeLog_ProtoFunID_IsValid(int value);
const stRechargeLog_ProtoFunID stRechargeLog_ProtoFunID_ProtoFunID_MIN = stRechargeLog_ProtoFunID_FunID;
const stRechargeLog_ProtoFunID stRechargeLog_ProtoFunID_ProtoFunID_MAX = stRechargeLog_ProtoFunID_FunID;
const int stRechargeLog_ProtoFunID_ProtoFunID_ARRAYSIZE = stRechargeLog_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRechargeLog_ProtoFunID_descriptor();
inline const ::std::string& stRechargeLog_ProtoFunID_Name(stRechargeLog_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRechargeLog_ProtoFunID_descriptor(), value);
}
inline bool stRechargeLog_ProtoFunID_Parse(
    const ::std::string& name, stRechargeLog_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRechargeLog_ProtoFunID>(
    stRechargeLog_ProtoFunID_descriptor(), name, value);
}
enum stPublishActivity_ProtoModID {
  stPublishActivity_ProtoModID_ModID = 3
};
bool stPublishActivity_ProtoModID_IsValid(int value);
const stPublishActivity_ProtoModID stPublishActivity_ProtoModID_ProtoModID_MIN = stPublishActivity_ProtoModID_ModID;
const stPublishActivity_ProtoModID stPublishActivity_ProtoModID_ProtoModID_MAX = stPublishActivity_ProtoModID_ModID;
const int stPublishActivity_ProtoModID_ProtoModID_ARRAYSIZE = stPublishActivity_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stPublishActivity_ProtoModID_descriptor();
inline const ::std::string& stPublishActivity_ProtoModID_Name(stPublishActivity_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stPublishActivity_ProtoModID_descriptor(), value);
}
inline bool stPublishActivity_ProtoModID_Parse(
    const ::std::string& name, stPublishActivity_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stPublishActivity_ProtoModID>(
    stPublishActivity_ProtoModID_descriptor(), name, value);
}
enum stPublishActivity_ProtoFunID {
  stPublishActivity_ProtoFunID_FunID = 9
};
bool stPublishActivity_ProtoFunID_IsValid(int value);
const stPublishActivity_ProtoFunID stPublishActivity_ProtoFunID_ProtoFunID_MIN = stPublishActivity_ProtoFunID_FunID;
const stPublishActivity_ProtoFunID stPublishActivity_ProtoFunID_ProtoFunID_MAX = stPublishActivity_ProtoFunID_FunID;
const int stPublishActivity_ProtoFunID_ProtoFunID_ARRAYSIZE = stPublishActivity_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stPublishActivity_ProtoFunID_descriptor();
inline const ::std::string& stPublishActivity_ProtoFunID_Name(stPublishActivity_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stPublishActivity_ProtoFunID_descriptor(), value);
}
inline bool stPublishActivity_ProtoFunID_Parse(
    const ::std::string& name, stPublishActivity_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stPublishActivity_ProtoFunID>(
    stPublishActivity_ProtoFunID_descriptor(), name, value);
}
enum stPublishActivityResult_ProtoModID {
  stPublishActivityResult_ProtoModID_ModID = 3
};
bool stPublishActivityResult_ProtoModID_IsValid(int value);
const stPublishActivityResult_ProtoModID stPublishActivityResult_ProtoModID_ProtoModID_MIN = stPublishActivityResult_ProtoModID_ModID;
const stPublishActivityResult_ProtoModID stPublishActivityResult_ProtoModID_ProtoModID_MAX = stPublishActivityResult_ProtoModID_ModID;
const int stPublishActivityResult_ProtoModID_ProtoModID_ARRAYSIZE = stPublishActivityResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stPublishActivityResult_ProtoModID_descriptor();
inline const ::std::string& stPublishActivityResult_ProtoModID_Name(stPublishActivityResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stPublishActivityResult_ProtoModID_descriptor(), value);
}
inline bool stPublishActivityResult_ProtoModID_Parse(
    const ::std::string& name, stPublishActivityResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stPublishActivityResult_ProtoModID>(
    stPublishActivityResult_ProtoModID_descriptor(), name, value);
}
enum stPublishActivityResult_ProtoFunID {
  stPublishActivityResult_ProtoFunID_FunID = 10
};
bool stPublishActivityResult_ProtoFunID_IsValid(int value);
const stPublishActivityResult_ProtoFunID stPublishActivityResult_ProtoFunID_ProtoFunID_MIN = stPublishActivityResult_ProtoFunID_FunID;
const stPublishActivityResult_ProtoFunID stPublishActivityResult_ProtoFunID_ProtoFunID_MAX = stPublishActivityResult_ProtoFunID_FunID;
const int stPublishActivityResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stPublishActivityResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stPublishActivityResult_ProtoFunID_descriptor();
inline const ::std::string& stPublishActivityResult_ProtoFunID_Name(stPublishActivityResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stPublishActivityResult_ProtoFunID_descriptor(), value);
}
inline bool stPublishActivityResult_ProtoFunID_Parse(
    const ::std::string& name, stPublishActivityResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stPublishActivityResult_ProtoFunID>(
    stPublishActivityResult_ProtoFunID_descriptor(), name, value);
}
enum stUnloadActivity_ProtoModID {
  stUnloadActivity_ProtoModID_ModID = 3
};
bool stUnloadActivity_ProtoModID_IsValid(int value);
const stUnloadActivity_ProtoModID stUnloadActivity_ProtoModID_ProtoModID_MIN = stUnloadActivity_ProtoModID_ModID;
const stUnloadActivity_ProtoModID stUnloadActivity_ProtoModID_ProtoModID_MAX = stUnloadActivity_ProtoModID_ModID;
const int stUnloadActivity_ProtoModID_ProtoModID_ARRAYSIZE = stUnloadActivity_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stUnloadActivity_ProtoModID_descriptor();
inline const ::std::string& stUnloadActivity_ProtoModID_Name(stUnloadActivity_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stUnloadActivity_ProtoModID_descriptor(), value);
}
inline bool stUnloadActivity_ProtoModID_Parse(
    const ::std::string& name, stUnloadActivity_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stUnloadActivity_ProtoModID>(
    stUnloadActivity_ProtoModID_descriptor(), name, value);
}
enum stUnloadActivity_ProtoFunID {
  stUnloadActivity_ProtoFunID_FunID = 11
};
bool stUnloadActivity_ProtoFunID_IsValid(int value);
const stUnloadActivity_ProtoFunID stUnloadActivity_ProtoFunID_ProtoFunID_MIN = stUnloadActivity_ProtoFunID_FunID;
const stUnloadActivity_ProtoFunID stUnloadActivity_ProtoFunID_ProtoFunID_MAX = stUnloadActivity_ProtoFunID_FunID;
const int stUnloadActivity_ProtoFunID_ProtoFunID_ARRAYSIZE = stUnloadActivity_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stUnloadActivity_ProtoFunID_descriptor();
inline const ::std::string& stUnloadActivity_ProtoFunID_Name(stUnloadActivity_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stUnloadActivity_ProtoFunID_descriptor(), value);
}
inline bool stUnloadActivity_ProtoFunID_Parse(
    const ::std::string& name, stUnloadActivity_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stUnloadActivity_ProtoFunID>(
    stUnloadActivity_ProtoFunID_descriptor(), name, value);
}
enum stUnloadActivityResult_ProtoModID {
  stUnloadActivityResult_ProtoModID_ModID = 3
};
bool stUnloadActivityResult_ProtoModID_IsValid(int value);
const stUnloadActivityResult_ProtoModID stUnloadActivityResult_ProtoModID_ProtoModID_MIN = stUnloadActivityResult_ProtoModID_ModID;
const stUnloadActivityResult_ProtoModID stUnloadActivityResult_ProtoModID_ProtoModID_MAX = stUnloadActivityResult_ProtoModID_ModID;
const int stUnloadActivityResult_ProtoModID_ProtoModID_ARRAYSIZE = stUnloadActivityResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stUnloadActivityResult_ProtoModID_descriptor();
inline const ::std::string& stUnloadActivityResult_ProtoModID_Name(stUnloadActivityResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stUnloadActivityResult_ProtoModID_descriptor(), value);
}
inline bool stUnloadActivityResult_ProtoModID_Parse(
    const ::std::string& name, stUnloadActivityResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stUnloadActivityResult_ProtoModID>(
    stUnloadActivityResult_ProtoModID_descriptor(), name, value);
}
enum stUnloadActivityResult_ProtoFunID {
  stUnloadActivityResult_ProtoFunID_FunID = 12
};
bool stUnloadActivityResult_ProtoFunID_IsValid(int value);
const stUnloadActivityResult_ProtoFunID stUnloadActivityResult_ProtoFunID_ProtoFunID_MIN = stUnloadActivityResult_ProtoFunID_FunID;
const stUnloadActivityResult_ProtoFunID stUnloadActivityResult_ProtoFunID_ProtoFunID_MAX = stUnloadActivityResult_ProtoFunID_FunID;
const int stUnloadActivityResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stUnloadActivityResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stUnloadActivityResult_ProtoFunID_descriptor();
inline const ::std::string& stUnloadActivityResult_ProtoFunID_Name(stUnloadActivityResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stUnloadActivityResult_ProtoFunID_descriptor(), value);
}
inline bool stUnloadActivityResult_ProtoFunID_Parse(
    const ::std::string& name, stUnloadActivityResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stUnloadActivityResult_ProtoFunID>(
    stUnloadActivityResult_ProtoFunID_descriptor(), name, value);
}
enum stMallBuyLog_ProtoModID {
  stMallBuyLog_ProtoModID_ModID = 3
};
bool stMallBuyLog_ProtoModID_IsValid(int value);
const stMallBuyLog_ProtoModID stMallBuyLog_ProtoModID_ProtoModID_MIN = stMallBuyLog_ProtoModID_ModID;
const stMallBuyLog_ProtoModID stMallBuyLog_ProtoModID_ProtoModID_MAX = stMallBuyLog_ProtoModID_ModID;
const int stMallBuyLog_ProtoModID_ProtoModID_ARRAYSIZE = stMallBuyLog_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stMallBuyLog_ProtoModID_descriptor();
inline const ::std::string& stMallBuyLog_ProtoModID_Name(stMallBuyLog_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stMallBuyLog_ProtoModID_descriptor(), value);
}
inline bool stMallBuyLog_ProtoModID_Parse(
    const ::std::string& name, stMallBuyLog_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stMallBuyLog_ProtoModID>(
    stMallBuyLog_ProtoModID_descriptor(), name, value);
}
enum stMallBuyLog_ProtoFunID {
  stMallBuyLog_ProtoFunID_FunID = 13
};
bool stMallBuyLog_ProtoFunID_IsValid(int value);
const stMallBuyLog_ProtoFunID stMallBuyLog_ProtoFunID_ProtoFunID_MIN = stMallBuyLog_ProtoFunID_FunID;
const stMallBuyLog_ProtoFunID stMallBuyLog_ProtoFunID_ProtoFunID_MAX = stMallBuyLog_ProtoFunID_FunID;
const int stMallBuyLog_ProtoFunID_ProtoFunID_ARRAYSIZE = stMallBuyLog_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stMallBuyLog_ProtoFunID_descriptor();
inline const ::std::string& stMallBuyLog_ProtoFunID_Name(stMallBuyLog_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stMallBuyLog_ProtoFunID_descriptor(), value);
}
inline bool stMallBuyLog_ProtoFunID_Parse(
    const ::std::string& name, stMallBuyLog_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stMallBuyLog_ProtoFunID>(
    stMallBuyLog_ProtoFunID_descriptor(), name, value);
}
enum stHeroPropChgLog_ProtoModID {
  stHeroPropChgLog_ProtoModID_ModID = 3
};
bool stHeroPropChgLog_ProtoModID_IsValid(int value);
const stHeroPropChgLog_ProtoModID stHeroPropChgLog_ProtoModID_ProtoModID_MIN = stHeroPropChgLog_ProtoModID_ModID;
const stHeroPropChgLog_ProtoModID stHeroPropChgLog_ProtoModID_ProtoModID_MAX = stHeroPropChgLog_ProtoModID_ModID;
const int stHeroPropChgLog_ProtoModID_ProtoModID_ARRAYSIZE = stHeroPropChgLog_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stHeroPropChgLog_ProtoModID_descriptor();
inline const ::std::string& stHeroPropChgLog_ProtoModID_Name(stHeroPropChgLog_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stHeroPropChgLog_ProtoModID_descriptor(), value);
}
inline bool stHeroPropChgLog_ProtoModID_Parse(
    const ::std::string& name, stHeroPropChgLog_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stHeroPropChgLog_ProtoModID>(
    stHeroPropChgLog_ProtoModID_descriptor(), name, value);
}
enum stHeroPropChgLog_ProtoFunID {
  stHeroPropChgLog_ProtoFunID_FunID = 14
};
bool stHeroPropChgLog_ProtoFunID_IsValid(int value);
const stHeroPropChgLog_ProtoFunID stHeroPropChgLog_ProtoFunID_ProtoFunID_MIN = stHeroPropChgLog_ProtoFunID_FunID;
const stHeroPropChgLog_ProtoFunID stHeroPropChgLog_ProtoFunID_ProtoFunID_MAX = stHeroPropChgLog_ProtoFunID_FunID;
const int stHeroPropChgLog_ProtoFunID_ProtoFunID_ARRAYSIZE = stHeroPropChgLog_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stHeroPropChgLog_ProtoFunID_descriptor();
inline const ::std::string& stHeroPropChgLog_ProtoFunID_Name(stHeroPropChgLog_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stHeroPropChgLog_ProtoFunID_descriptor(), value);
}
inline bool stHeroPropChgLog_ProtoFunID_Parse(
    const ::std::string& name, stHeroPropChgLog_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stHeroPropChgLog_ProtoFunID>(
    stHeroPropChgLog_ProtoFunID_descriptor(), name, value);
}
enum stSendGuildLog_ProtoModID {
  stSendGuildLog_ProtoModID_ModID = 3
};
bool stSendGuildLog_ProtoModID_IsValid(int value);
const stSendGuildLog_ProtoModID stSendGuildLog_ProtoModID_ProtoModID_MIN = stSendGuildLog_ProtoModID_ModID;
const stSendGuildLog_ProtoModID stSendGuildLog_ProtoModID_ProtoModID_MAX = stSendGuildLog_ProtoModID_ModID;
const int stSendGuildLog_ProtoModID_ProtoModID_ARRAYSIZE = stSendGuildLog_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSendGuildLog_ProtoModID_descriptor();
inline const ::std::string& stSendGuildLog_ProtoModID_Name(stSendGuildLog_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSendGuildLog_ProtoModID_descriptor(), value);
}
inline bool stSendGuildLog_ProtoModID_Parse(
    const ::std::string& name, stSendGuildLog_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSendGuildLog_ProtoModID>(
    stSendGuildLog_ProtoModID_descriptor(), name, value);
}
enum stSendGuildLog_ProtoFunID {
  stSendGuildLog_ProtoFunID_FunID = 15
};
bool stSendGuildLog_ProtoFunID_IsValid(int value);
const stSendGuildLog_ProtoFunID stSendGuildLog_ProtoFunID_ProtoFunID_MIN = stSendGuildLog_ProtoFunID_FunID;
const stSendGuildLog_ProtoFunID stSendGuildLog_ProtoFunID_ProtoFunID_MAX = stSendGuildLog_ProtoFunID_FunID;
const int stSendGuildLog_ProtoFunID_ProtoFunID_ARRAYSIZE = stSendGuildLog_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSendGuildLog_ProtoFunID_descriptor();
inline const ::std::string& stSendGuildLog_ProtoFunID_Name(stSendGuildLog_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSendGuildLog_ProtoFunID_descriptor(), value);
}
inline bool stSendGuildLog_ProtoFunID_Parse(
    const ::std::string& name, stSendGuildLog_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSendGuildLog_ProtoFunID>(
    stSendGuildLog_ProtoFunID_descriptor(), name, value);
}
enum sstSendGuildResLog_ProtoModID {
  sstSendGuildResLog_ProtoModID_ModID = 3
};
bool sstSendGuildResLog_ProtoModID_IsValid(int value);
const sstSendGuildResLog_ProtoModID sstSendGuildResLog_ProtoModID_ProtoModID_MIN = sstSendGuildResLog_ProtoModID_ModID;
const sstSendGuildResLog_ProtoModID sstSendGuildResLog_ProtoModID_ProtoModID_MAX = sstSendGuildResLog_ProtoModID_ModID;
const int sstSendGuildResLog_ProtoModID_ProtoModID_ARRAYSIZE = sstSendGuildResLog_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* sstSendGuildResLog_ProtoModID_descriptor();
inline const ::std::string& sstSendGuildResLog_ProtoModID_Name(sstSendGuildResLog_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    sstSendGuildResLog_ProtoModID_descriptor(), value);
}
inline bool sstSendGuildResLog_ProtoModID_Parse(
    const ::std::string& name, sstSendGuildResLog_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<sstSendGuildResLog_ProtoModID>(
    sstSendGuildResLog_ProtoModID_descriptor(), name, value);
}
enum sstSendGuildResLog_ProtoFunID {
  sstSendGuildResLog_ProtoFunID_FunID = 16
};
bool sstSendGuildResLog_ProtoFunID_IsValid(int value);
const sstSendGuildResLog_ProtoFunID sstSendGuildResLog_ProtoFunID_ProtoFunID_MIN = sstSendGuildResLog_ProtoFunID_FunID;
const sstSendGuildResLog_ProtoFunID sstSendGuildResLog_ProtoFunID_ProtoFunID_MAX = sstSendGuildResLog_ProtoFunID_FunID;
const int sstSendGuildResLog_ProtoFunID_ProtoFunID_ARRAYSIZE = sstSendGuildResLog_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* sstSendGuildResLog_ProtoFunID_descriptor();
inline const ::std::string& sstSendGuildResLog_ProtoFunID_Name(sstSendGuildResLog_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    sstSendGuildResLog_ProtoFunID_descriptor(), value);
}
inline bool sstSendGuildResLog_ProtoFunID_Parse(
    const ::std::string& name, sstSendGuildResLog_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<sstSendGuildResLog_ProtoFunID>(
    sstSendGuildResLog_ProtoFunID_descriptor(), name, value);
}
enum stSendModuleLog_ProtoModID {
  stSendModuleLog_ProtoModID_ModID = 3
};
bool stSendModuleLog_ProtoModID_IsValid(int value);
const stSendModuleLog_ProtoModID stSendModuleLog_ProtoModID_ProtoModID_MIN = stSendModuleLog_ProtoModID_ModID;
const stSendModuleLog_ProtoModID stSendModuleLog_ProtoModID_ProtoModID_MAX = stSendModuleLog_ProtoModID_ModID;
const int stSendModuleLog_ProtoModID_ProtoModID_ARRAYSIZE = stSendModuleLog_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSendModuleLog_ProtoModID_descriptor();
inline const ::std::string& stSendModuleLog_ProtoModID_Name(stSendModuleLog_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSendModuleLog_ProtoModID_descriptor(), value);
}
inline bool stSendModuleLog_ProtoModID_Parse(
    const ::std::string& name, stSendModuleLog_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSendModuleLog_ProtoModID>(
    stSendModuleLog_ProtoModID_descriptor(), name, value);
}
enum stSendModuleLog_ProtoFunID {
  stSendModuleLog_ProtoFunID_FunID = 17
};
bool stSendModuleLog_ProtoFunID_IsValid(int value);
const stSendModuleLog_ProtoFunID stSendModuleLog_ProtoFunID_ProtoFunID_MIN = stSendModuleLog_ProtoFunID_FunID;
const stSendModuleLog_ProtoFunID stSendModuleLog_ProtoFunID_ProtoFunID_MAX = stSendModuleLog_ProtoFunID_FunID;
const int stSendModuleLog_ProtoFunID_ProtoFunID_ARRAYSIZE = stSendModuleLog_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSendModuleLog_ProtoFunID_descriptor();
inline const ::std::string& stSendModuleLog_ProtoFunID_Name(stSendModuleLog_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSendModuleLog_ProtoFunID_descriptor(), value);
}
inline bool stSendModuleLog_ProtoFunID_Parse(
    const ::std::string& name, stSendModuleLog_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSendModuleLog_ProtoFunID>(
    stSendModuleLog_ProtoFunID_descriptor(), name, value);
}
enum stSkillChgLog_ProtoModID {
  stSkillChgLog_ProtoModID_ModID = 3
};
bool stSkillChgLog_ProtoModID_IsValid(int value);
const stSkillChgLog_ProtoModID stSkillChgLog_ProtoModID_ProtoModID_MIN = stSkillChgLog_ProtoModID_ModID;
const stSkillChgLog_ProtoModID stSkillChgLog_ProtoModID_ProtoModID_MAX = stSkillChgLog_ProtoModID_ModID;
const int stSkillChgLog_ProtoModID_ProtoModID_ARRAYSIZE = stSkillChgLog_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSkillChgLog_ProtoModID_descriptor();
inline const ::std::string& stSkillChgLog_ProtoModID_Name(stSkillChgLog_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSkillChgLog_ProtoModID_descriptor(), value);
}
inline bool stSkillChgLog_ProtoModID_Parse(
    const ::std::string& name, stSkillChgLog_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSkillChgLog_ProtoModID>(
    stSkillChgLog_ProtoModID_descriptor(), name, value);
}
enum stSkillChgLog_ProtoFunID {
  stSkillChgLog_ProtoFunID_FunID = 18
};
bool stSkillChgLog_ProtoFunID_IsValid(int value);
const stSkillChgLog_ProtoFunID stSkillChgLog_ProtoFunID_ProtoFunID_MIN = stSkillChgLog_ProtoFunID_FunID;
const stSkillChgLog_ProtoFunID stSkillChgLog_ProtoFunID_ProtoFunID_MAX = stSkillChgLog_ProtoFunID_FunID;
const int stSkillChgLog_ProtoFunID_ProtoFunID_ARRAYSIZE = stSkillChgLog_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSkillChgLog_ProtoFunID_descriptor();
inline const ::std::string& stSkillChgLog_ProtoFunID_Name(stSkillChgLog_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSkillChgLog_ProtoFunID_descriptor(), value);
}
inline bool stSkillChgLog_ProtoFunID_Parse(
    const ::std::string& name, stSkillChgLog_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSkillChgLog_ProtoFunID>(
    stSkillChgLog_ProtoFunID_descriptor(), name, value);
}
enum stSpriteLog_ProtoModID {
  stSpriteLog_ProtoModID_ModID = 3
};
bool stSpriteLog_ProtoModID_IsValid(int value);
const stSpriteLog_ProtoModID stSpriteLog_ProtoModID_ProtoModID_MIN = stSpriteLog_ProtoModID_ModID;
const stSpriteLog_ProtoModID stSpriteLog_ProtoModID_ProtoModID_MAX = stSpriteLog_ProtoModID_ModID;
const int stSpriteLog_ProtoModID_ProtoModID_ARRAYSIZE = stSpriteLog_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSpriteLog_ProtoModID_descriptor();
inline const ::std::string& stSpriteLog_ProtoModID_Name(stSpriteLog_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSpriteLog_ProtoModID_descriptor(), value);
}
inline bool stSpriteLog_ProtoModID_Parse(
    const ::std::string& name, stSpriteLog_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSpriteLog_ProtoModID>(
    stSpriteLog_ProtoModID_descriptor(), name, value);
}
enum stSpriteLog_ProtoFunID {
  stSpriteLog_ProtoFunID_FunID = 19
};
bool stSpriteLog_ProtoFunID_IsValid(int value);
const stSpriteLog_ProtoFunID stSpriteLog_ProtoFunID_ProtoFunID_MIN = stSpriteLog_ProtoFunID_FunID;
const stSpriteLog_ProtoFunID stSpriteLog_ProtoFunID_ProtoFunID_MAX = stSpriteLog_ProtoFunID_FunID;
const int stSpriteLog_ProtoFunID_ProtoFunID_ARRAYSIZE = stSpriteLog_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSpriteLog_ProtoFunID_descriptor();
inline const ::std::string& stSpriteLog_ProtoFunID_Name(stSpriteLog_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSpriteLog_ProtoFunID_descriptor(), value);
}
inline bool stSpriteLog_ProtoFunID_Parse(
    const ::std::string& name, stSpriteLog_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSpriteLog_ProtoFunID>(
    stSpriteLog_ProtoFunID_descriptor(), name, value);
}
enum stCopymapLog_ProtoModID {
  stCopymapLog_ProtoModID_ModID = 3
};
bool stCopymapLog_ProtoModID_IsValid(int value);
const stCopymapLog_ProtoModID stCopymapLog_ProtoModID_ProtoModID_MIN = stCopymapLog_ProtoModID_ModID;
const stCopymapLog_ProtoModID stCopymapLog_ProtoModID_ProtoModID_MAX = stCopymapLog_ProtoModID_ModID;
const int stCopymapLog_ProtoModID_ProtoModID_ARRAYSIZE = stCopymapLog_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stCopymapLog_ProtoModID_descriptor();
inline const ::std::string& stCopymapLog_ProtoModID_Name(stCopymapLog_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stCopymapLog_ProtoModID_descriptor(), value);
}
inline bool stCopymapLog_ProtoModID_Parse(
    const ::std::string& name, stCopymapLog_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stCopymapLog_ProtoModID>(
    stCopymapLog_ProtoModID_descriptor(), name, value);
}
enum stCopymapLog_ProtoFunID {
  stCopymapLog_ProtoFunID_FunID = 20
};
bool stCopymapLog_ProtoFunID_IsValid(int value);
const stCopymapLog_ProtoFunID stCopymapLog_ProtoFunID_ProtoFunID_MIN = stCopymapLog_ProtoFunID_FunID;
const stCopymapLog_ProtoFunID stCopymapLog_ProtoFunID_ProtoFunID_MAX = stCopymapLog_ProtoFunID_FunID;
const int stCopymapLog_ProtoFunID_ProtoFunID_ARRAYSIZE = stCopymapLog_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stCopymapLog_ProtoFunID_descriptor();
inline const ::std::string& stCopymapLog_ProtoFunID_Name(stCopymapLog_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stCopymapLog_ProtoFunID_descriptor(), value);
}
inline bool stCopymapLog_ProtoFunID_Parse(
    const ::std::string& name, stCopymapLog_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stCopymapLog_ProtoFunID>(
    stCopymapLog_ProtoFunID_descriptor(), name, value);
}
enum stEquipChgLog_ProtoModID {
  stEquipChgLog_ProtoModID_ModID = 3
};
bool stEquipChgLog_ProtoModID_IsValid(int value);
const stEquipChgLog_ProtoModID stEquipChgLog_ProtoModID_ProtoModID_MIN = stEquipChgLog_ProtoModID_ModID;
const stEquipChgLog_ProtoModID stEquipChgLog_ProtoModID_ProtoModID_MAX = stEquipChgLog_ProtoModID_ModID;
const int stEquipChgLog_ProtoModID_ProtoModID_ARRAYSIZE = stEquipChgLog_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stEquipChgLog_ProtoModID_descriptor();
inline const ::std::string& stEquipChgLog_ProtoModID_Name(stEquipChgLog_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stEquipChgLog_ProtoModID_descriptor(), value);
}
inline bool stEquipChgLog_ProtoModID_Parse(
    const ::std::string& name, stEquipChgLog_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stEquipChgLog_ProtoModID>(
    stEquipChgLog_ProtoModID_descriptor(), name, value);
}
enum stEquipChgLog_ProtoFunID {
  stEquipChgLog_ProtoFunID_FunID = 21
};
bool stEquipChgLog_ProtoFunID_IsValid(int value);
const stEquipChgLog_ProtoFunID stEquipChgLog_ProtoFunID_ProtoFunID_MIN = stEquipChgLog_ProtoFunID_FunID;
const stEquipChgLog_ProtoFunID stEquipChgLog_ProtoFunID_ProtoFunID_MAX = stEquipChgLog_ProtoFunID_FunID;
const int stEquipChgLog_ProtoFunID_ProtoFunID_ARRAYSIZE = stEquipChgLog_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stEquipChgLog_ProtoFunID_descriptor();
inline const ::std::string& stEquipChgLog_ProtoFunID_Name(stEquipChgLog_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stEquipChgLog_ProtoFunID_descriptor(), value);
}
inline bool stEquipChgLog_ProtoFunID_Parse(
    const ::std::string& name, stEquipChgLog_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stEquipChgLog_ProtoFunID>(
    stEquipChgLog_ProtoFunID_descriptor(), name, value);
}
enum stActivityLog_ProtoModID {
  stActivityLog_ProtoModID_ModID = 3
};
bool stActivityLog_ProtoModID_IsValid(int value);
const stActivityLog_ProtoModID stActivityLog_ProtoModID_ProtoModID_MIN = stActivityLog_ProtoModID_ModID;
const stActivityLog_ProtoModID stActivityLog_ProtoModID_ProtoModID_MAX = stActivityLog_ProtoModID_ModID;
const int stActivityLog_ProtoModID_ProtoModID_ARRAYSIZE = stActivityLog_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stActivityLog_ProtoModID_descriptor();
inline const ::std::string& stActivityLog_ProtoModID_Name(stActivityLog_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stActivityLog_ProtoModID_descriptor(), value);
}
inline bool stActivityLog_ProtoModID_Parse(
    const ::std::string& name, stActivityLog_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stActivityLog_ProtoModID>(
    stActivityLog_ProtoModID_descriptor(), name, value);
}
enum stActivityLog_ProtoFunID {
  stActivityLog_ProtoFunID_FunID = 22
};
bool stActivityLog_ProtoFunID_IsValid(int value);
const stActivityLog_ProtoFunID stActivityLog_ProtoFunID_ProtoFunID_MIN = stActivityLog_ProtoFunID_FunID;
const stActivityLog_ProtoFunID stActivityLog_ProtoFunID_ProtoFunID_MAX = stActivityLog_ProtoFunID_FunID;
const int stActivityLog_ProtoFunID_ProtoFunID_ARRAYSIZE = stActivityLog_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stActivityLog_ProtoFunID_descriptor();
inline const ::std::string& stActivityLog_ProtoFunID_Name(stActivityLog_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stActivityLog_ProtoFunID_descriptor(), value);
}
inline bool stActivityLog_ProtoFunID_Parse(
    const ::std::string& name, stActivityLog_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stActivityLog_ProtoFunID>(
    stActivityLog_ProtoFunID_descriptor(), name, value);
}
enum stUserCancel_CancelType {
  stUserCancel_CancelType_Month_Card = 1,
  stUserCancel_CancelType_Forever_Card = 2,
  stUserCancel_CancelType_Grown_Card = 3
};
bool stUserCancel_CancelType_IsValid(int value);
const stUserCancel_CancelType stUserCancel_CancelType_CancelType_MIN = stUserCancel_CancelType_Month_Card;
const stUserCancel_CancelType stUserCancel_CancelType_CancelType_MAX = stUserCancel_CancelType_Grown_Card;
const int stUserCancel_CancelType_CancelType_ARRAYSIZE = stUserCancel_CancelType_CancelType_MAX + 1;

const ::google::protobuf::EnumDescriptor* stUserCancel_CancelType_descriptor();
inline const ::std::string& stUserCancel_CancelType_Name(stUserCancel_CancelType value) {
  return ::google::protobuf::internal::NameOfEnum(
    stUserCancel_CancelType_descriptor(), value);
}
inline bool stUserCancel_CancelType_Parse(
    const ::std::string& name, stUserCancel_CancelType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stUserCancel_CancelType>(
    stUserCancel_CancelType_descriptor(), name, value);
}
enum stUserCancel_ProtoModID {
  stUserCancel_ProtoModID_ModID = 3
};
bool stUserCancel_ProtoModID_IsValid(int value);
const stUserCancel_ProtoModID stUserCancel_ProtoModID_ProtoModID_MIN = stUserCancel_ProtoModID_ModID;
const stUserCancel_ProtoModID stUserCancel_ProtoModID_ProtoModID_MAX = stUserCancel_ProtoModID_ModID;
const int stUserCancel_ProtoModID_ProtoModID_ARRAYSIZE = stUserCancel_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stUserCancel_ProtoModID_descriptor();
inline const ::std::string& stUserCancel_ProtoModID_Name(stUserCancel_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stUserCancel_ProtoModID_descriptor(), value);
}
inline bool stUserCancel_ProtoModID_Parse(
    const ::std::string& name, stUserCancel_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stUserCancel_ProtoModID>(
    stUserCancel_ProtoModID_descriptor(), name, value);
}
enum stUserCancel_ProtoFunID {
  stUserCancel_ProtoFunID_FunID = 23
};
bool stUserCancel_ProtoFunID_IsValid(int value);
const stUserCancel_ProtoFunID stUserCancel_ProtoFunID_ProtoFunID_MIN = stUserCancel_ProtoFunID_FunID;
const stUserCancel_ProtoFunID stUserCancel_ProtoFunID_ProtoFunID_MAX = stUserCancel_ProtoFunID_FunID;
const int stUserCancel_ProtoFunID_ProtoFunID_ARRAYSIZE = stUserCancel_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stUserCancel_ProtoFunID_descriptor();
inline const ::std::string& stUserCancel_ProtoFunID_Name(stUserCancel_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stUserCancel_ProtoFunID_descriptor(), value);
}
inline bool stUserCancel_ProtoFunID_Parse(
    const ::std::string& name, stUserCancel_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stUserCancel_ProtoFunID>(
    stUserCancel_ProtoFunID_descriptor(), name, value);
}
enum stUserCancelRes_ProtoModID {
  stUserCancelRes_ProtoModID_ModID = 3
};
bool stUserCancelRes_ProtoModID_IsValid(int value);
const stUserCancelRes_ProtoModID stUserCancelRes_ProtoModID_ProtoModID_MIN = stUserCancelRes_ProtoModID_ModID;
const stUserCancelRes_ProtoModID stUserCancelRes_ProtoModID_ProtoModID_MAX = stUserCancelRes_ProtoModID_ModID;
const int stUserCancelRes_ProtoModID_ProtoModID_ARRAYSIZE = stUserCancelRes_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stUserCancelRes_ProtoModID_descriptor();
inline const ::std::string& stUserCancelRes_ProtoModID_Name(stUserCancelRes_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stUserCancelRes_ProtoModID_descriptor(), value);
}
inline bool stUserCancelRes_ProtoModID_Parse(
    const ::std::string& name, stUserCancelRes_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stUserCancelRes_ProtoModID>(
    stUserCancelRes_ProtoModID_descriptor(), name, value);
}
enum stUserCancelRes_ProtoFunID {
  stUserCancelRes_ProtoFunID_FunID = 24
};
bool stUserCancelRes_ProtoFunID_IsValid(int value);
const stUserCancelRes_ProtoFunID stUserCancelRes_ProtoFunID_ProtoFunID_MIN = stUserCancelRes_ProtoFunID_FunID;
const stUserCancelRes_ProtoFunID stUserCancelRes_ProtoFunID_ProtoFunID_MAX = stUserCancelRes_ProtoFunID_FunID;
const int stUserCancelRes_ProtoFunID_ProtoFunID_ARRAYSIZE = stUserCancelRes_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stUserCancelRes_ProtoFunID_descriptor();
inline const ::std::string& stUserCancelRes_ProtoFunID_Name(stUserCancelRes_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stUserCancelRes_ProtoFunID_descriptor(), value);
}
inline bool stUserCancelRes_ProtoFunID_Parse(
    const ::std::string& name, stUserCancelRes_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stUserCancelRes_ProtoFunID>(
    stUserCancelRes_ProtoFunID_descriptor(), name, value);
}
enum stReqPayType_ProtoModID {
  stReqPayType_ProtoModID_ModID = 3
};
bool stReqPayType_ProtoModID_IsValid(int value);
const stReqPayType_ProtoModID stReqPayType_ProtoModID_ProtoModID_MIN = stReqPayType_ProtoModID_ModID;
const stReqPayType_ProtoModID stReqPayType_ProtoModID_ProtoModID_MAX = stReqPayType_ProtoModID_ModID;
const int stReqPayType_ProtoModID_ProtoModID_ARRAYSIZE = stReqPayType_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqPayType_ProtoModID_descriptor();
inline const ::std::string& stReqPayType_ProtoModID_Name(stReqPayType_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqPayType_ProtoModID_descriptor(), value);
}
inline bool stReqPayType_ProtoModID_Parse(
    const ::std::string& name, stReqPayType_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqPayType_ProtoModID>(
    stReqPayType_ProtoModID_descriptor(), name, value);
}
enum stReqPayType_ProtoFunID {
  stReqPayType_ProtoFunID_FunID = 25
};
bool stReqPayType_ProtoFunID_IsValid(int value);
const stReqPayType_ProtoFunID stReqPayType_ProtoFunID_ProtoFunID_MIN = stReqPayType_ProtoFunID_FunID;
const stReqPayType_ProtoFunID stReqPayType_ProtoFunID_ProtoFunID_MAX = stReqPayType_ProtoFunID_FunID;
const int stReqPayType_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqPayType_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqPayType_ProtoFunID_descriptor();
inline const ::std::string& stReqPayType_ProtoFunID_Name(stReqPayType_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqPayType_ProtoFunID_descriptor(), value);
}
inline bool stReqPayType_ProtoFunID_Parse(
    const ::std::string& name, stReqPayType_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqPayType_ProtoFunID>(
    stReqPayType_ProtoFunID_descriptor(), name, value);
}
enum stReqPayTypeCb_ProtoModID {
  stReqPayTypeCb_ProtoModID_ModID = 3
};
bool stReqPayTypeCb_ProtoModID_IsValid(int value);
const stReqPayTypeCb_ProtoModID stReqPayTypeCb_ProtoModID_ProtoModID_MIN = stReqPayTypeCb_ProtoModID_ModID;
const stReqPayTypeCb_ProtoModID stReqPayTypeCb_ProtoModID_ProtoModID_MAX = stReqPayTypeCb_ProtoModID_ModID;
const int stReqPayTypeCb_ProtoModID_ProtoModID_ARRAYSIZE = stReqPayTypeCb_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqPayTypeCb_ProtoModID_descriptor();
inline const ::std::string& stReqPayTypeCb_ProtoModID_Name(stReqPayTypeCb_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqPayTypeCb_ProtoModID_descriptor(), value);
}
inline bool stReqPayTypeCb_ProtoModID_Parse(
    const ::std::string& name, stReqPayTypeCb_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqPayTypeCb_ProtoModID>(
    stReqPayTypeCb_ProtoModID_descriptor(), name, value);
}
enum stReqPayTypeCb_ProtoFunID {
  stReqPayTypeCb_ProtoFunID_FunID = 26
};
bool stReqPayTypeCb_ProtoFunID_IsValid(int value);
const stReqPayTypeCb_ProtoFunID stReqPayTypeCb_ProtoFunID_ProtoFunID_MIN = stReqPayTypeCb_ProtoFunID_FunID;
const stReqPayTypeCb_ProtoFunID stReqPayTypeCb_ProtoFunID_ProtoFunID_MAX = stReqPayTypeCb_ProtoFunID_FunID;
const int stReqPayTypeCb_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqPayTypeCb_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqPayTypeCb_ProtoFunID_descriptor();
inline const ::std::string& stReqPayTypeCb_ProtoFunID_Name(stReqPayTypeCb_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqPayTypeCb_ProtoFunID_descriptor(), value);
}
inline bool stReqPayTypeCb_ProtoFunID_Parse(
    const ::std::string& name, stReqPayTypeCb_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqPayTypeCb_ProtoFunID>(
    stReqPayTypeCb_ProtoFunID_descriptor(), name, value);
}
enum stUpdateSvrOpenTime_ProtoModID {
  stUpdateSvrOpenTime_ProtoModID_ModID = 3
};
bool stUpdateSvrOpenTime_ProtoModID_IsValid(int value);
const stUpdateSvrOpenTime_ProtoModID stUpdateSvrOpenTime_ProtoModID_ProtoModID_MIN = stUpdateSvrOpenTime_ProtoModID_ModID;
const stUpdateSvrOpenTime_ProtoModID stUpdateSvrOpenTime_ProtoModID_ProtoModID_MAX = stUpdateSvrOpenTime_ProtoModID_ModID;
const int stUpdateSvrOpenTime_ProtoModID_ProtoModID_ARRAYSIZE = stUpdateSvrOpenTime_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stUpdateSvrOpenTime_ProtoModID_descriptor();
inline const ::std::string& stUpdateSvrOpenTime_ProtoModID_Name(stUpdateSvrOpenTime_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stUpdateSvrOpenTime_ProtoModID_descriptor(), value);
}
inline bool stUpdateSvrOpenTime_ProtoModID_Parse(
    const ::std::string& name, stUpdateSvrOpenTime_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stUpdateSvrOpenTime_ProtoModID>(
    stUpdateSvrOpenTime_ProtoModID_descriptor(), name, value);
}
enum stUpdateSvrOpenTime_ProtoFunID {
  stUpdateSvrOpenTime_ProtoFunID_FunID = 27
};
bool stUpdateSvrOpenTime_ProtoFunID_IsValid(int value);
const stUpdateSvrOpenTime_ProtoFunID stUpdateSvrOpenTime_ProtoFunID_ProtoFunID_MIN = stUpdateSvrOpenTime_ProtoFunID_FunID;
const stUpdateSvrOpenTime_ProtoFunID stUpdateSvrOpenTime_ProtoFunID_ProtoFunID_MAX = stUpdateSvrOpenTime_ProtoFunID_FunID;
const int stUpdateSvrOpenTime_ProtoFunID_ProtoFunID_ARRAYSIZE = stUpdateSvrOpenTime_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stUpdateSvrOpenTime_ProtoFunID_descriptor();
inline const ::std::string& stUpdateSvrOpenTime_ProtoFunID_Name(stUpdateSvrOpenTime_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stUpdateSvrOpenTime_ProtoFunID_descriptor(), value);
}
inline bool stUpdateSvrOpenTime_ProtoFunID_Parse(
    const ::std::string& name, stUpdateSvrOpenTime_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stUpdateSvrOpenTime_ProtoFunID>(
    stUpdateSvrOpenTime_ProtoFunID_descriptor(), name, value);
}
enum stSendLimitPetActivityData_ProtoModID {
  stSendLimitPetActivityData_ProtoModID_ModID = 3
};
bool stSendLimitPetActivityData_ProtoModID_IsValid(int value);
const stSendLimitPetActivityData_ProtoModID stSendLimitPetActivityData_ProtoModID_ProtoModID_MIN = stSendLimitPetActivityData_ProtoModID_ModID;
const stSendLimitPetActivityData_ProtoModID stSendLimitPetActivityData_ProtoModID_ProtoModID_MAX = stSendLimitPetActivityData_ProtoModID_ModID;
const int stSendLimitPetActivityData_ProtoModID_ProtoModID_ARRAYSIZE = stSendLimitPetActivityData_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSendLimitPetActivityData_ProtoModID_descriptor();
inline const ::std::string& stSendLimitPetActivityData_ProtoModID_Name(stSendLimitPetActivityData_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSendLimitPetActivityData_ProtoModID_descriptor(), value);
}
inline bool stSendLimitPetActivityData_ProtoModID_Parse(
    const ::std::string& name, stSendLimitPetActivityData_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSendLimitPetActivityData_ProtoModID>(
    stSendLimitPetActivityData_ProtoModID_descriptor(), name, value);
}
enum stSendLimitPetActivityData_ProtoFunID {
  stSendLimitPetActivityData_ProtoFunID_FunID = 28
};
bool stSendLimitPetActivityData_ProtoFunID_IsValid(int value);
const stSendLimitPetActivityData_ProtoFunID stSendLimitPetActivityData_ProtoFunID_ProtoFunID_MIN = stSendLimitPetActivityData_ProtoFunID_FunID;
const stSendLimitPetActivityData_ProtoFunID stSendLimitPetActivityData_ProtoFunID_ProtoFunID_MAX = stSendLimitPetActivityData_ProtoFunID_FunID;
const int stSendLimitPetActivityData_ProtoFunID_ProtoFunID_ARRAYSIZE = stSendLimitPetActivityData_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSendLimitPetActivityData_ProtoFunID_descriptor();
inline const ::std::string& stSendLimitPetActivityData_ProtoFunID_Name(stSendLimitPetActivityData_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSendLimitPetActivityData_ProtoFunID_descriptor(), value);
}
inline bool stSendLimitPetActivityData_ProtoFunID_Parse(
    const ::std::string& name, stSendLimitPetActivityData_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSendLimitPetActivityData_ProtoFunID>(
    stSendLimitPetActivityData_ProtoFunID_descriptor(), name, value);
}
enum GameModID {
  LOGIN_MOD = 1,
  GATE2GAME_MOD = 2,
  WEBGAME_MOD = 3
};
bool GameModID_IsValid(int value);
const GameModID GameModID_MIN = LOGIN_MOD;
const GameModID GameModID_MAX = WEBGAME_MOD;
const int GameModID_ARRAYSIZE = GameModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* GameModID_descriptor();
inline const ::std::string& GameModID_Name(GameModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    GameModID_descriptor(), value);
}
inline bool GameModID_Parse(
    const ::std::string& name, GameModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GameModID>(
    GameModID_descriptor(), name, value);
}
enum eLoginGameResultType {
  eLoginResult_Login = 1,
  eLoginResult_ChgSvr = 2
};
bool eLoginGameResultType_IsValid(int value);
const eLoginGameResultType eLoginGameResultType_MIN = eLoginResult_Login;
const eLoginGameResultType eLoginGameResultType_MAX = eLoginResult_ChgSvr;
const int eLoginGameResultType_ARRAYSIZE = eLoginGameResultType_MAX + 1;

const ::google::protobuf::EnumDescriptor* eLoginGameResultType_descriptor();
inline const ::std::string& eLoginGameResultType_Name(eLoginGameResultType value) {
  return ::google::protobuf::internal::NameOfEnum(
    eLoginGameResultType_descriptor(), value);
}
inline bool eLoginGameResultType_Parse(
    const ::std::string& name, eLoginGameResultType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<eLoginGameResultType>(
    eLoginGameResultType_descriptor(), name, value);
}
// ===================================================================

class stLoginGame : public ::google::protobuf::Message {
 public:
  stLoginGame();
  virtual ~stLoginGame();

  stLoginGame(const stLoginGame& from);

  inline stLoginGame& operator=(const stLoginGame& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stLoginGame& default_instance();

  void Swap(stLoginGame* other);

  // implements Message ----------------------------------------------

  stLoginGame* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stLoginGame& from);
  void MergeFrom(const stLoginGame& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stLoginGame_ProtoModID ProtoModID;
  static const ProtoModID ModID = stLoginGame_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stLoginGame_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stLoginGame_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stLoginGame_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stLoginGame_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stLoginGame_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stLoginGame_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stLoginGame_ProtoModID_Parse(name, value);
  }

  typedef stLoginGame_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stLoginGame_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stLoginGame_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stLoginGame_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stLoginGame_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stLoginGame_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stLoginGame_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stLoginGame_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stLoginGame_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 svrType = 1;
  inline bool has_svrtype() const;
  inline void clear_svrtype();
  static const int kSvrTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 svrtype() const;
  inline void set_svrtype(::google::protobuf::uint32 value);

  // optional uint32 svrID = 2;
  inline bool has_svrid() const;
  inline void clear_svrid();
  static const int kSvrIDFieldNumber = 2;
  inline ::google::protobuf::uint32 svrid() const;
  inline void set_svrid(::google::protobuf::uint32 value);

  // optional string ip = 3;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 3;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional uint32 port = 4;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 4;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Game.stLoginGame)
 private:
  inline void set_has_svrtype();
  inline void clear_has_svrtype();
  inline void set_has_svrid();
  inline void clear_has_svrid();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 svrtype_;
  ::google::protobuf::uint32 svrid_;
  ::std::string* ip_;
  ::google::protobuf::uint32 port_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Game_2eproto();
  friend void protobuf_AssignDesc_Game_2eproto();
  friend void protobuf_ShutdownFile_Game_2eproto();

  void InitAsDefaultInstance();
  static stLoginGame* default_instance_;
};
// -------------------------------------------------------------------

class stGateForwardGame : public ::google::protobuf::Message {
 public:
  stGateForwardGame();
  virtual ~stGateForwardGame();

  stGateForwardGame(const stGateForwardGame& from);

  inline stGateForwardGame& operator=(const stGateForwardGame& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stGateForwardGame& default_instance();

  void Swap(stGateForwardGame* other);

  // implements Message ----------------------------------------------

  stGateForwardGame* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stGateForwardGame& from);
  void MergeFrom(const stGateForwardGame& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stGateForwardGame_ProtoModID ProtoModID;
  static const ProtoModID ModID = stGateForwardGame_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stGateForwardGame_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stGateForwardGame_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stGateForwardGame_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stGateForwardGame_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stGateForwardGame_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stGateForwardGame_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stGateForwardGame_ProtoModID_Parse(name, value);
  }

  typedef stGateForwardGame_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stGateForwardGame_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stGateForwardGame_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stGateForwardGame_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stGateForwardGame_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stGateForwardGame_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stGateForwardGame_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stGateForwardGame_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stGateForwardGame_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 modID = 2;
  inline bool has_modid() const;
  inline void clear_modid();
  static const int kModIDFieldNumber = 2;
  inline ::google::protobuf::uint32 modid() const;
  inline void set_modid(::google::protobuf::uint32 value);

  // optional uint32 funID = 3;
  inline bool has_funid() const;
  inline void clear_funid();
  static const int kFunIDFieldNumber = 3;
  inline ::google::protobuf::uint32 funid() const;
  inline void set_funid(::google::protobuf::uint32 value);

  // optional uint32 cmdLen = 4;
  inline bool has_cmdlen() const;
  inline void clear_cmdlen();
  static const int kCmdLenFieldNumber = 4;
  inline ::google::protobuf::uint32 cmdlen() const;
  inline void set_cmdlen(::google::protobuf::uint32 value);

  // optional bytes data = 5;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 5;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:Game.stGateForwardGame)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_modid();
  inline void clear_has_modid();
  inline void set_has_funid();
  inline void clear_has_funid();
  inline void set_has_cmdlen();
  inline void clear_has_cmdlen();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 modid_;
  ::google::protobuf::uint32 funid_;
  ::google::protobuf::uint32 cmdlen_;
  ::std::string* data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Game_2eproto();
  friend void protobuf_AssignDesc_Game_2eproto();
  friend void protobuf_ShutdownFile_Game_2eproto();

  void InitAsDefaultInstance();
  static stGateForwardGame* default_instance_;
};
// -------------------------------------------------------------------

class stGameForwardGate : public ::google::protobuf::Message {
 public:
  stGameForwardGate();
  virtual ~stGameForwardGate();

  stGameForwardGate(const stGameForwardGate& from);

  inline stGameForwardGate& operator=(const stGameForwardGate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stGameForwardGate& default_instance();

  void Swap(stGameForwardGate* other);

  // implements Message ----------------------------------------------

  stGameForwardGate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stGameForwardGate& from);
  void MergeFrom(const stGameForwardGate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stGameForwardGate_ProtoModID ProtoModID;
  static const ProtoModID ModID = stGameForwardGate_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stGameForwardGate_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stGameForwardGate_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stGameForwardGate_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stGameForwardGate_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stGameForwardGate_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stGameForwardGate_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stGameForwardGate_ProtoModID_Parse(name, value);
  }

  typedef stGameForwardGate_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stGameForwardGate_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stGameForwardGate_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stGameForwardGate_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stGameForwardGate_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stGameForwardGate_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stGameForwardGate_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stGameForwardGate_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stGameForwardGate_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 modID = 2;
  inline bool has_modid() const;
  inline void clear_modid();
  static const int kModIDFieldNumber = 2;
  inline ::google::protobuf::uint32 modid() const;
  inline void set_modid(::google::protobuf::uint32 value);

  // optional uint32 funID = 3;
  inline bool has_funid() const;
  inline void clear_funid();
  static const int kFunIDFieldNumber = 3;
  inline ::google::protobuf::uint32 funid() const;
  inline void set_funid(::google::protobuf::uint32 value);

  // optional uint32 cmdLen = 4;
  inline bool has_cmdlen() const;
  inline void clear_cmdlen();
  static const int kCmdLenFieldNumber = 4;
  inline ::google::protobuf::uint32 cmdlen() const;
  inline void set_cmdlen(::google::protobuf::uint32 value);

  // optional bytes data = 5;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 5;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:Game.stGameForwardGate)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_modid();
  inline void clear_has_modid();
  inline void set_has_funid();
  inline void clear_has_funid();
  inline void set_has_cmdlen();
  inline void clear_has_cmdlen();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 modid_;
  ::google::protobuf::uint32 funid_;
  ::google::protobuf::uint32 cmdlen_;
  ::std::string* data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Game_2eproto();
  friend void protobuf_AssignDesc_Game_2eproto();
  friend void protobuf_ShutdownFile_Game_2eproto();

  void InitAsDefaultInstance();
  static stGameForwardGate* default_instance_;
};
// -------------------------------------------------------------------

class stKillOutUser : public ::google::protobuf::Message {
 public:
  stKillOutUser();
  virtual ~stKillOutUser();

  stKillOutUser(const stKillOutUser& from);

  inline stKillOutUser& operator=(const stKillOutUser& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stKillOutUser& default_instance();

  void Swap(stKillOutUser* other);

  // implements Message ----------------------------------------------

  stKillOutUser* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stKillOutUser& from);
  void MergeFrom(const stKillOutUser& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stKillOutUser_ProtoModID ProtoModID;
  static const ProtoModID ModID = stKillOutUser_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stKillOutUser_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stKillOutUser_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stKillOutUser_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stKillOutUser_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stKillOutUser_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stKillOutUser_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stKillOutUser_ProtoModID_Parse(name, value);
  }

  typedef stKillOutUser_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stKillOutUser_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stKillOutUser_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stKillOutUser_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stKillOutUser_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stKillOutUser_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stKillOutUser_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stKillOutUser_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stKillOutUser_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Game.stKillOutUser)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Game_2eproto();
  friend void protobuf_AssignDesc_Game_2eproto();
  friend void protobuf_ShutdownFile_Game_2eproto();

  void InitAsDefaultInstance();
  static stKillOutUser* default_instance_;
};
// -------------------------------------------------------------------

class stBroadbastProto2World : public ::google::protobuf::Message {
 public:
  stBroadbastProto2World();
  virtual ~stBroadbastProto2World();

  stBroadbastProto2World(const stBroadbastProto2World& from);

  inline stBroadbastProto2World& operator=(const stBroadbastProto2World& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stBroadbastProto2World& default_instance();

  void Swap(stBroadbastProto2World* other);

  // implements Message ----------------------------------------------

  stBroadbastProto2World* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stBroadbastProto2World& from);
  void MergeFrom(const stBroadbastProto2World& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stBroadbastProto2World_ProtoModID ProtoModID;
  static const ProtoModID ModID = stBroadbastProto2World_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stBroadbastProto2World_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stBroadbastProto2World_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stBroadbastProto2World_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stBroadbastProto2World_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stBroadbastProto2World_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stBroadbastProto2World_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stBroadbastProto2World_ProtoModID_Parse(name, value);
  }

  typedef stBroadbastProto2World_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stBroadbastProto2World_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stBroadbastProto2World_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stBroadbastProto2World_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stBroadbastProto2World_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stBroadbastProto2World_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stBroadbastProto2World_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stBroadbastProto2World_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stBroadbastProto2World_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 modID = 1;
  inline bool has_modid() const;
  inline void clear_modid();
  static const int kModIDFieldNumber = 1;
  inline ::google::protobuf::uint32 modid() const;
  inline void set_modid(::google::protobuf::uint32 value);

  // optional uint32 funID = 2;
  inline bool has_funid() const;
  inline void clear_funid();
  static const int kFunIDFieldNumber = 2;
  inline ::google::protobuf::uint32 funid() const;
  inline void set_funid(::google::protobuf::uint32 value);

  // optional uint32 cmdLen = 3;
  inline bool has_cmdlen() const;
  inline void clear_cmdlen();
  static const int kCmdLenFieldNumber = 3;
  inline ::google::protobuf::uint32 cmdlen() const;
  inline void set_cmdlen(::google::protobuf::uint32 value);

  // optional bytes data = 4;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 4;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:Game.stBroadbastProto2World)
 private:
  inline void set_has_modid();
  inline void clear_has_modid();
  inline void set_has_funid();
  inline void clear_has_funid();
  inline void set_has_cmdlen();
  inline void clear_has_cmdlen();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 modid_;
  ::google::protobuf::uint32 funid_;
  ::std::string* data_;
  ::google::protobuf::uint32 cmdlen_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Game_2eproto();
  friend void protobuf_AssignDesc_Game_2eproto();
  friend void protobuf_ShutdownFile_Game_2eproto();

  void InitAsDefaultInstance();
  static stBroadbastProto2World* default_instance_;
};
// -------------------------------------------------------------------

class stUserLoginGameResult : public ::google::protobuf::Message {
 public:
  stUserLoginGameResult();
  virtual ~stUserLoginGameResult();

  stUserLoginGameResult(const stUserLoginGameResult& from);

  inline stUserLoginGameResult& operator=(const stUserLoginGameResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stUserLoginGameResult& default_instance();

  void Swap(stUserLoginGameResult* other);

  // implements Message ----------------------------------------------

  stUserLoginGameResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stUserLoginGameResult& from);
  void MergeFrom(const stUserLoginGameResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stUserLoginGameResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stUserLoginGameResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stUserLoginGameResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stUserLoginGameResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stUserLoginGameResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stUserLoginGameResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stUserLoginGameResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stUserLoginGameResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stUserLoginGameResult_ProtoModID_Parse(name, value);
  }

  typedef stUserLoginGameResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stUserLoginGameResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stUserLoginGameResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stUserLoginGameResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stUserLoginGameResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stUserLoginGameResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stUserLoginGameResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stUserLoginGameResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stUserLoginGameResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string account = 1;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 1;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // optional uint32 accountID = 2;
  inline bool has_accountid() const;
  inline void clear_accountid();
  static const int kAccountIDFieldNumber = 2;
  inline ::google::protobuf::uint32 accountid() const;
  inline void set_accountid(::google::protobuf::uint32 value);

  // optional uint32 charID = 3;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 3;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 gameID = 4;
  inline bool has_gameid() const;
  inline void clear_gameid();
  static const int kGameIDFieldNumber = 4;
  inline ::google::protobuf::uint32 gameid() const;
  inline void set_gameid(::google::protobuf::uint32 value);

  // optional uint32 ret = 5;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 5;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // optional .Game.eLoginGameResultType type = 6;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 6;
  inline ::Game::eLoginGameResultType type() const;
  inline void set_type(::Game::eLoginGameResultType value);

  // @@protoc_insertion_point(class_scope:Game.stUserLoginGameResult)
 private:
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_accountid();
  inline void clear_has_accountid();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_gameid();
  inline void clear_has_gameid();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* account_;
  ::google::protobuf::uint32 accountid_;
  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 gameid_;
  ::google::protobuf::uint32 ret_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_Game_2eproto();
  friend void protobuf_AssignDesc_Game_2eproto();
  friend void protobuf_ShutdownFile_Game_2eproto();

  void InitAsDefaultInstance();
  static stUserLoginGameResult* default_instance_;
};
// -------------------------------------------------------------------

class stBroadcastProto2UserList : public ::google::protobuf::Message {
 public:
  stBroadcastProto2UserList();
  virtual ~stBroadcastProto2UserList();

  stBroadcastProto2UserList(const stBroadcastProto2UserList& from);

  inline stBroadcastProto2UserList& operator=(const stBroadcastProto2UserList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stBroadcastProto2UserList& default_instance();

  void Swap(stBroadcastProto2UserList* other);

  // implements Message ----------------------------------------------

  stBroadcastProto2UserList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stBroadcastProto2UserList& from);
  void MergeFrom(const stBroadcastProto2UserList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stBroadcastProto2UserList_ProtoModID ProtoModID;
  static const ProtoModID ModID = stBroadcastProto2UserList_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stBroadcastProto2UserList_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stBroadcastProto2UserList_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stBroadcastProto2UserList_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stBroadcastProto2UserList_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stBroadcastProto2UserList_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stBroadcastProto2UserList_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stBroadcastProto2UserList_ProtoModID_Parse(name, value);
  }

  typedef stBroadcastProto2UserList_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stBroadcastProto2UserList_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stBroadcastProto2UserList_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stBroadcastProto2UserList_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stBroadcastProto2UserList_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stBroadcastProto2UserList_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stBroadcastProto2UserList_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stBroadcastProto2UserList_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stBroadcastProto2UserList_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated uint32 userList = 1;
  inline int userlist_size() const;
  inline void clear_userlist();
  static const int kUserListFieldNumber = 1;
  inline ::google::protobuf::uint32 userlist(int index) const;
  inline void set_userlist(int index, ::google::protobuf::uint32 value);
  inline void add_userlist(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      userlist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_userlist();

  // optional uint32 modID = 2;
  inline bool has_modid() const;
  inline void clear_modid();
  static const int kModIDFieldNumber = 2;
  inline ::google::protobuf::uint32 modid() const;
  inline void set_modid(::google::protobuf::uint32 value);

  // optional uint32 funID = 3;
  inline bool has_funid() const;
  inline void clear_funid();
  static const int kFunIDFieldNumber = 3;
  inline ::google::protobuf::uint32 funid() const;
  inline void set_funid(::google::protobuf::uint32 value);

  // optional uint32 cmdLen = 4;
  inline bool has_cmdlen() const;
  inline void clear_cmdlen();
  static const int kCmdLenFieldNumber = 4;
  inline ::google::protobuf::uint32 cmdlen() const;
  inline void set_cmdlen(::google::protobuf::uint32 value);

  // optional bytes data = 5;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 5;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:Game.stBroadcastProto2UserList)
 private:
  inline void set_has_modid();
  inline void clear_has_modid();
  inline void set_has_funid();
  inline void clear_has_funid();
  inline void set_has_cmdlen();
  inline void clear_has_cmdlen();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > userlist_;
  ::google::protobuf::uint32 modid_;
  ::google::protobuf::uint32 funid_;
  ::std::string* data_;
  ::google::protobuf::uint32 cmdlen_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Game_2eproto();
  friend void protobuf_AssignDesc_Game_2eproto();
  friend void protobuf_ShutdownFile_Game_2eproto();

  void InitAsDefaultInstance();
  static stBroadcastProto2UserList* default_instance_;
};
// -------------------------------------------------------------------

class stNotifyLevelUp : public ::google::protobuf::Message {
 public:
  stNotifyLevelUp();
  virtual ~stNotifyLevelUp();

  stNotifyLevelUp(const stNotifyLevelUp& from);

  inline stNotifyLevelUp& operator=(const stNotifyLevelUp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stNotifyLevelUp& default_instance();

  void Swap(stNotifyLevelUp* other);

  // implements Message ----------------------------------------------

  stNotifyLevelUp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stNotifyLevelUp& from);
  void MergeFrom(const stNotifyLevelUp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stNotifyLevelUp_ProtoModID ProtoModID;
  static const ProtoModID ModID = stNotifyLevelUp_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stNotifyLevelUp_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stNotifyLevelUp_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stNotifyLevelUp_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stNotifyLevelUp_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stNotifyLevelUp_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stNotifyLevelUp_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stNotifyLevelUp_ProtoModID_Parse(name, value);
  }

  typedef stNotifyLevelUp_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stNotifyLevelUp_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stNotifyLevelUp_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stNotifyLevelUp_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stNotifyLevelUp_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stNotifyLevelUp_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stNotifyLevelUp_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stNotifyLevelUp_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stNotifyLevelUp_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Game.stNotifyLevelUp)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 level_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Game_2eproto();
  friend void protobuf_AssignDesc_Game_2eproto();
  friend void protobuf_ShutdownFile_Game_2eproto();

  void InitAsDefaultInstance();
  static stNotifyLevelUp* default_instance_;
};
// -------------------------------------------------------------------

class stUserLevelupLog : public ::google::protobuf::Message {
 public:
  stUserLevelupLog();
  virtual ~stUserLevelupLog();

  stUserLevelupLog(const stUserLevelupLog& from);

  inline stUserLevelupLog& operator=(const stUserLevelupLog& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stUserLevelupLog& default_instance();

  void Swap(stUserLevelupLog* other);

  // implements Message ----------------------------------------------

  stUserLevelupLog* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stUserLevelupLog& from);
  void MergeFrom(const stUserLevelupLog& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stUserLevelupLog_ProtoModID ProtoModID;
  static const ProtoModID ModID = stUserLevelupLog_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stUserLevelupLog_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stUserLevelupLog_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stUserLevelupLog_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stUserLevelupLog_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stUserLevelupLog_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stUserLevelupLog_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stUserLevelupLog_ProtoModID_Parse(name, value);
  }

  typedef stUserLevelupLog_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stUserLevelupLog_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stUserLevelupLog_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stUserLevelupLog_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stUserLevelupLog_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stUserLevelupLog_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stUserLevelupLog_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stUserLevelupLog_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stUserLevelupLog_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional string account = 2;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 2;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // optional string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 oldExp = 4;
  inline bool has_oldexp() const;
  inline void clear_oldexp();
  static const int kOldExpFieldNumber = 4;
  inline ::google::protobuf::uint32 oldexp() const;
  inline void set_oldexp(::google::protobuf::uint32 value);

  // optional uint32 newExp = 5;
  inline bool has_newexp() const;
  inline void clear_newexp();
  static const int kNewExpFieldNumber = 5;
  inline ::google::protobuf::uint32 newexp() const;
  inline void set_newexp(::google::protobuf::uint32 value);

  // optional uint32 oldLv = 6;
  inline bool has_oldlv() const;
  inline void clear_oldlv();
  static const int kOldLvFieldNumber = 6;
  inline ::google::protobuf::uint32 oldlv() const;
  inline void set_oldlv(::google::protobuf::uint32 value);

  // optional uint32 newLv = 7;
  inline bool has_newlv() const;
  inline void clear_newlv();
  static const int kNewLvFieldNumber = 7;
  inline ::google::protobuf::uint32 newlv() const;
  inline void set_newlv(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Game.stUserLevelupLog)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_oldexp();
  inline void clear_has_oldexp();
  inline void set_has_newexp();
  inline void clear_has_newexp();
  inline void set_has_oldlv();
  inline void clear_has_oldlv();
  inline void set_has_newlv();
  inline void clear_has_newlv();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* account_;
  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 oldexp_;
  ::std::string* name_;
  ::google::protobuf::uint32 newexp_;
  ::google::protobuf::uint32 oldlv_;
  ::google::protobuf::uint32 newlv_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_Game_2eproto();
  friend void protobuf_AssignDesc_Game_2eproto();
  friend void protobuf_ShutdownFile_Game_2eproto();

  void InitAsDefaultInstance();
  static stUserLevelupLog* default_instance_;
};
// -------------------------------------------------------------------

class stUserLoginLog : public ::google::protobuf::Message {
 public:
  stUserLoginLog();
  virtual ~stUserLoginLog();

  stUserLoginLog(const stUserLoginLog& from);

  inline stUserLoginLog& operator=(const stUserLoginLog& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stUserLoginLog& default_instance();

  void Swap(stUserLoginLog* other);

  // implements Message ----------------------------------------------

  stUserLoginLog* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stUserLoginLog& from);
  void MergeFrom(const stUserLoginLog& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stUserLoginLog_ProtoModID ProtoModID;
  static const ProtoModID ModID = stUserLoginLog_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stUserLoginLog_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stUserLoginLog_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stUserLoginLog_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stUserLoginLog_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stUserLoginLog_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stUserLoginLog_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stUserLoginLog_ProtoModID_Parse(name, value);
  }

  typedef stUserLoginLog_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stUserLoginLog_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stUserLoginLog_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stUserLoginLog_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stUserLoginLog_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stUserLoginLog_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stUserLoginLog_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stUserLoginLog_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stUserLoginLog_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional string account = 2;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 2;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // optional string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string ip = 4;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 4;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional uint32 isAdvUser = 5;
  inline bool has_isadvuser() const;
  inline void clear_isadvuser();
  static const int kIsAdvUserFieldNumber = 5;
  inline ::google::protobuf::uint32 isadvuser() const;
  inline void set_isadvuser(::google::protobuf::uint32 value);

  // optional uint32 opID = 6;
  inline bool has_opid() const;
  inline void clear_opid();
  static const int kOpIDFieldNumber = 6;
  inline ::google::protobuf::uint32 opid() const;
  inline void set_opid(::google::protobuf::uint32 value);

  // optional string createTime = 7;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreateTimeFieldNumber = 7;
  inline const ::std::string& createtime() const;
  inline void set_createtime(const ::std::string& value);
  inline void set_createtime(const char* value);
  inline void set_createtime(const char* value, size_t size);
  inline ::std::string* mutable_createtime();
  inline ::std::string* release_createtime();
  inline void set_allocated_createtime(::std::string* createtime);

  // optional string deviceID = 8;
  inline bool has_deviceid() const;
  inline void clear_deviceid();
  static const int kDeviceIDFieldNumber = 8;
  inline const ::std::string& deviceid() const;
  inline void set_deviceid(const ::std::string& value);
  inline void set_deviceid(const char* value);
  inline void set_deviceid(const char* value, size_t size);
  inline ::std::string* mutable_deviceid();
  inline ::std::string* release_deviceid();
  inline void set_allocated_deviceid(::std::string* deviceid);

  // optional bool isEnterSelectLog = 9;
  inline bool has_isenterselectlog() const;
  inline void clear_isenterselectlog();
  static const int kIsEnterSelectLogFieldNumber = 9;
  inline bool isenterselectlog() const;
  inline void set_isenterselectlog(bool value);

  // @@protoc_insertion_point(class_scope:Game.stUserLoginLog)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_isadvuser();
  inline void clear_has_isadvuser();
  inline void set_has_opid();
  inline void clear_has_opid();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_deviceid();
  inline void clear_has_deviceid();
  inline void set_has_isenterselectlog();
  inline void clear_has_isenterselectlog();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* account_;
  ::std::string* name_;
  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 isadvuser_;
  ::std::string* ip_;
  ::std::string* createtime_;
  ::google::protobuf::uint32 opid_;
  bool isenterselectlog_;
  ::std::string* deviceid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_Game_2eproto();
  friend void protobuf_AssignDesc_Game_2eproto();
  friend void protobuf_ShutdownFile_Game_2eproto();

  void InitAsDefaultInstance();
  static stUserLoginLog* default_instance_;
};
// -------------------------------------------------------------------

class stVipLevelupLog : public ::google::protobuf::Message {
 public:
  stVipLevelupLog();
  virtual ~stVipLevelupLog();

  stVipLevelupLog(const stVipLevelupLog& from);

  inline stVipLevelupLog& operator=(const stVipLevelupLog& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stVipLevelupLog& default_instance();

  void Swap(stVipLevelupLog* other);

  // implements Message ----------------------------------------------

  stVipLevelupLog* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stVipLevelupLog& from);
  void MergeFrom(const stVipLevelupLog& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stVipLevelupLog_ProtoModID ProtoModID;
  static const ProtoModID ModID = stVipLevelupLog_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stVipLevelupLog_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stVipLevelupLog_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stVipLevelupLog_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stVipLevelupLog_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stVipLevelupLog_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stVipLevelupLog_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stVipLevelupLog_ProtoModID_Parse(name, value);
  }

  typedef stVipLevelupLog_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stVipLevelupLog_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stVipLevelupLog_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stVipLevelupLog_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stVipLevelupLog_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stVipLevelupLog_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stVipLevelupLog_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stVipLevelupLog_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stVipLevelupLog_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional string account = 2;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 2;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // optional string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 oldExp = 4;
  inline bool has_oldexp() const;
  inline void clear_oldexp();
  static const int kOldExpFieldNumber = 4;
  inline ::google::protobuf::uint32 oldexp() const;
  inline void set_oldexp(::google::protobuf::uint32 value);

  // optional uint32 newExp = 5;
  inline bool has_newexp() const;
  inline void clear_newexp();
  static const int kNewExpFieldNumber = 5;
  inline ::google::protobuf::uint32 newexp() const;
  inline void set_newexp(::google::protobuf::uint32 value);

  // optional uint32 addDiamond = 6;
  inline bool has_adddiamond() const;
  inline void clear_adddiamond();
  static const int kAddDiamondFieldNumber = 6;
  inline ::google::protobuf::uint32 adddiamond() const;
  inline void set_adddiamond(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Game.stVipLevelupLog)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_oldexp();
  inline void clear_has_oldexp();
  inline void set_has_newexp();
  inline void clear_has_newexp();
  inline void set_has_adddiamond();
  inline void clear_has_adddiamond();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* account_;
  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 oldexp_;
  ::std::string* name_;
  ::google::protobuf::uint32 newexp_;
  ::google::protobuf::uint32 adddiamond_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_Game_2eproto();
  friend void protobuf_AssignDesc_Game_2eproto();
  friend void protobuf_ShutdownFile_Game_2eproto();

  void InitAsDefaultInstance();
  static stVipLevelupLog* default_instance_;
};
// -------------------------------------------------------------------

class stHonourChgLog : public ::google::protobuf::Message {
 public:
  stHonourChgLog();
  virtual ~stHonourChgLog();

  stHonourChgLog(const stHonourChgLog& from);

  inline stHonourChgLog& operator=(const stHonourChgLog& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stHonourChgLog& default_instance();

  void Swap(stHonourChgLog* other);

  // implements Message ----------------------------------------------

  stHonourChgLog* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stHonourChgLog& from);
  void MergeFrom(const stHonourChgLog& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stHonourChgLog_ProtoModID ProtoModID;
  static const ProtoModID ModID = stHonourChgLog_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stHonourChgLog_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stHonourChgLog_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stHonourChgLog_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stHonourChgLog_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stHonourChgLog_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stHonourChgLog_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stHonourChgLog_ProtoModID_Parse(name, value);
  }

  typedef stHonourChgLog_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stHonourChgLog_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stHonourChgLog_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stHonourChgLog_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stHonourChgLog_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stHonourChgLog_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stHonourChgLog_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stHonourChgLog_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stHonourChgLog_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional string account = 2;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 2;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // optional string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 oldHonour = 4;
  inline bool has_oldhonour() const;
  inline void clear_oldhonour();
  static const int kOldHonourFieldNumber = 4;
  inline ::google::protobuf::uint32 oldhonour() const;
  inline void set_oldhonour(::google::protobuf::uint32 value);

  // optional uint32 newHonour = 5;
  inline bool has_newhonour() const;
  inline void clear_newhonour();
  static const int kNewHonourFieldNumber = 5;
  inline ::google::protobuf::uint32 newhonour() const;
  inline void set_newhonour(::google::protobuf::uint32 value);

  // optional string reason = 6;
  inline bool has_reason() const;
  inline void clear_reason();
  static const int kReasonFieldNumber = 6;
  inline const ::std::string& reason() const;
  inline void set_reason(const ::std::string& value);
  inline void set_reason(const char* value);
  inline void set_reason(const char* value, size_t size);
  inline ::std::string* mutable_reason();
  inline ::std::string* release_reason();
  inline void set_allocated_reason(::std::string* reason);

  // @@protoc_insertion_point(class_scope:Game.stHonourChgLog)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_oldhonour();
  inline void clear_has_oldhonour();
  inline void set_has_newhonour();
  inline void clear_has_newhonour();
  inline void set_has_reason();
  inline void clear_has_reason();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* account_;
  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 oldhonour_;
  ::std::string* name_;
  ::std::string* reason_;
  ::google::protobuf::uint32 newhonour_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_Game_2eproto();
  friend void protobuf_AssignDesc_Game_2eproto();
  friend void protobuf_ShutdownFile_Game_2eproto();

  void InitAsDefaultInstance();
  static stHonourChgLog* default_instance_;
};
// -------------------------------------------------------------------

class stItemChgLog : public ::google::protobuf::Message {
 public:
  stItemChgLog();
  virtual ~stItemChgLog();

  stItemChgLog(const stItemChgLog& from);

  inline stItemChgLog& operator=(const stItemChgLog& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stItemChgLog& default_instance();

  void Swap(stItemChgLog* other);

  // implements Message ----------------------------------------------

  stItemChgLog* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stItemChgLog& from);
  void MergeFrom(const stItemChgLog& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stItemChgLog_ProtoModID ProtoModID;
  static const ProtoModID ModID = stItemChgLog_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stItemChgLog_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stItemChgLog_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stItemChgLog_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stItemChgLog_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stItemChgLog_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stItemChgLog_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stItemChgLog_ProtoModID_Parse(name, value);
  }

  typedef stItemChgLog_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stItemChgLog_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stItemChgLog_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stItemChgLog_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stItemChgLog_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stItemChgLog_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stItemChgLog_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stItemChgLog_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stItemChgLog_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional string account = 2;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 2;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // optional string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 itemID = 4;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIDFieldNumber = 4;
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // optional uint32 num = 5;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 5;
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // optional string reason = 6;
  inline bool has_reason() const;
  inline void clear_reason();
  static const int kReasonFieldNumber = 6;
  inline const ::std::string& reason() const;
  inline void set_reason(const ::std::string& value);
  inline void set_reason(const char* value);
  inline void set_reason(const char* value, size_t size);
  inline ::std::string* mutable_reason();
  inline ::std::string* release_reason();
  inline void set_allocated_reason(::std::string* reason);

  // optional uint32 userLv = 7;
  inline bool has_userlv() const;
  inline void clear_userlv();
  static const int kUserLvFieldNumber = 7;
  inline ::google::protobuf::uint32 userlv() const;
  inline void set_userlv(::google::protobuf::uint32 value);

  // optional uint32 vipLv = 8;
  inline bool has_viplv() const;
  inline void clear_viplv();
  static const int kVipLvFieldNumber = 8;
  inline ::google::protobuf::uint32 viplv() const;
  inline void set_viplv(::google::protobuf::uint32 value);

  // optional bool isAdd = 9;
  inline bool has_isadd() const;
  inline void clear_isadd();
  static const int kIsAddFieldNumber = 9;
  inline bool isadd() const;
  inline void set_isadd(bool value);

  // optional uint32 raiseLv = 10;
  inline bool has_raiselv() const;
  inline void clear_raiselv();
  static const int kRaiseLvFieldNumber = 10;
  inline ::google::protobuf::uint32 raiselv() const;
  inline void set_raiselv(::google::protobuf::uint32 value);

  // optional uint32 refineLv = 11;
  inline bool has_refinelv() const;
  inline void clear_refinelv();
  static const int kRefineLvFieldNumber = 11;
  inline ::google::protobuf::uint32 refinelv() const;
  inline void set_refinelv(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Game.stItemChgLog)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_reason();
  inline void clear_has_reason();
  inline void set_has_userlv();
  inline void clear_has_userlv();
  inline void set_has_viplv();
  inline void clear_has_viplv();
  inline void set_has_isadd();
  inline void clear_has_isadd();
  inline void set_has_raiselv();
  inline void clear_has_raiselv();
  inline void set_has_refinelv();
  inline void clear_has_refinelv();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* account_;
  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 itemid_;
  ::std::string* name_;
  ::std::string* reason_;
  ::google::protobuf::uint32 num_;
  ::google::protobuf::uint32 userlv_;
  ::google::protobuf::uint32 viplv_;
  bool isadd_;
  ::google::protobuf::uint32 raiselv_;
  ::google::protobuf::uint32 refinelv_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_Game_2eproto();
  friend void protobuf_AssignDesc_Game_2eproto();
  friend void protobuf_ShutdownFile_Game_2eproto();

  void InitAsDefaultInstance();
  static stItemChgLog* default_instance_;
};
// -------------------------------------------------------------------

class stResourceChgLog : public ::google::protobuf::Message {
 public:
  stResourceChgLog();
  virtual ~stResourceChgLog();

  stResourceChgLog(const stResourceChgLog& from);

  inline stResourceChgLog& operator=(const stResourceChgLog& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stResourceChgLog& default_instance();

  void Swap(stResourceChgLog* other);

  // implements Message ----------------------------------------------

  stResourceChgLog* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stResourceChgLog& from);
  void MergeFrom(const stResourceChgLog& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stResourceChgLog_ProtoModID ProtoModID;
  static const ProtoModID ModID = stResourceChgLog_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stResourceChgLog_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stResourceChgLog_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stResourceChgLog_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stResourceChgLog_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stResourceChgLog_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stResourceChgLog_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stResourceChgLog_ProtoModID_Parse(name, value);
  }

  typedef stResourceChgLog_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stResourceChgLog_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stResourceChgLog_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stResourceChgLog_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stResourceChgLog_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stResourceChgLog_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stResourceChgLog_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stResourceChgLog_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stResourceChgLog_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional string account = 2;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 2;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // optional string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 resID = 4;
  inline bool has_resid() const;
  inline void clear_resid();
  static const int kResIDFieldNumber = 4;
  inline ::google::protobuf::uint32 resid() const;
  inline void set_resid(::google::protobuf::uint32 value);

  // optional uint32 addNum = 5;
  inline bool has_addnum() const;
  inline void clear_addnum();
  static const int kAddNumFieldNumber = 5;
  inline ::google::protobuf::uint32 addnum() const;
  inline void set_addnum(::google::protobuf::uint32 value);

  // optional uint32 oldValue = 6;
  inline bool has_oldvalue() const;
  inline void clear_oldvalue();
  static const int kOldValueFieldNumber = 6;
  inline ::google::protobuf::uint32 oldvalue() const;
  inline void set_oldvalue(::google::protobuf::uint32 value);

  // optional uint32 newValue = 7;
  inline bool has_newvalue() const;
  inline void clear_newvalue();
  static const int kNewValueFieldNumber = 7;
  inline ::google::protobuf::uint32 newvalue() const;
  inline void set_newvalue(::google::protobuf::uint32 value);

  // optional string reason = 8;
  inline bool has_reason() const;
  inline void clear_reason();
  static const int kReasonFieldNumber = 8;
  inline const ::std::string& reason() const;
  inline void set_reason(const ::std::string& value);
  inline void set_reason(const char* value);
  inline void set_reason(const char* value, size_t size);
  inline ::std::string* mutable_reason();
  inline ::std::string* release_reason();
  inline void set_allocated_reason(::std::string* reason);

  // @@protoc_insertion_point(class_scope:Game.stResourceChgLog)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_resid();
  inline void clear_has_resid();
  inline void set_has_addnum();
  inline void clear_has_addnum();
  inline void set_has_oldvalue();
  inline void clear_has_oldvalue();
  inline void set_has_newvalue();
  inline void clear_has_newvalue();
  inline void set_has_reason();
  inline void clear_has_reason();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* account_;
  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 resid_;
  ::std::string* name_;
  ::google::protobuf::uint32 addnum_;
  ::google::protobuf::uint32 oldvalue_;
  ::std::string* reason_;
  ::google::protobuf::uint32 newvalue_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_Game_2eproto();
  friend void protobuf_AssignDesc_Game_2eproto();
  friend void protobuf_ShutdownFile_Game_2eproto();

  void InitAsDefaultInstance();
  static stResourceChgLog* default_instance_;
};
// -------------------------------------------------------------------

class stDailyTaskLog : public ::google::protobuf::Message {
 public:
  stDailyTaskLog();
  virtual ~stDailyTaskLog();

  stDailyTaskLog(const stDailyTaskLog& from);

  inline stDailyTaskLog& operator=(const stDailyTaskLog& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stDailyTaskLog& default_instance();

  void Swap(stDailyTaskLog* other);

  // implements Message ----------------------------------------------

  stDailyTaskLog* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stDailyTaskLog& from);
  void MergeFrom(const stDailyTaskLog& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stDailyTaskLog_ProtoModID ProtoModID;
  static const ProtoModID ModID = stDailyTaskLog_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stDailyTaskLog_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stDailyTaskLog_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stDailyTaskLog_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stDailyTaskLog_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stDailyTaskLog_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stDailyTaskLog_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stDailyTaskLog_ProtoModID_Parse(name, value);
  }

  typedef stDailyTaskLog_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stDailyTaskLog_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stDailyTaskLog_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stDailyTaskLog_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stDailyTaskLog_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stDailyTaskLog_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stDailyTaskLog_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stDailyTaskLog_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stDailyTaskLog_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional string account = 2;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 2;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // optional string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 taskID = 4;
  inline bool has_taskid() const;
  inline void clear_taskid();
  static const int kTaskIDFieldNumber = 4;
  inline ::google::protobuf::uint32 taskid() const;
  inline void set_taskid(::google::protobuf::uint32 value);

  // optional string taskName = 5;
  inline bool has_taskname() const;
  inline void clear_taskname();
  static const int kTaskNameFieldNumber = 5;
  inline const ::std::string& taskname() const;
  inline void set_taskname(const ::std::string& value);
  inline void set_taskname(const char* value);
  inline void set_taskname(const char* value, size_t size);
  inline ::std::string* mutable_taskname();
  inline ::std::string* release_taskname();
  inline void set_allocated_taskname(::std::string* taskname);

  // @@protoc_insertion_point(class_scope:Game.stDailyTaskLog)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_taskid();
  inline void clear_has_taskid();
  inline void set_has_taskname();
  inline void clear_has_taskname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* account_;
  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 taskid_;
  ::std::string* name_;
  ::std::string* taskname_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Game_2eproto();
  friend void protobuf_AssignDesc_Game_2eproto();
  friend void protobuf_ShutdownFile_Game_2eproto();

  void InitAsDefaultInstance();
  static stDailyTaskLog* default_instance_;
};
// -------------------------------------------------------------------

class stRechargeLog : public ::google::protobuf::Message {
 public:
  stRechargeLog();
  virtual ~stRechargeLog();

  stRechargeLog(const stRechargeLog& from);

  inline stRechargeLog& operator=(const stRechargeLog& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRechargeLog& default_instance();

  void Swap(stRechargeLog* other);

  // implements Message ----------------------------------------------

  stRechargeLog* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRechargeLog& from);
  void MergeFrom(const stRechargeLog& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRechargeLog_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRechargeLog_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRechargeLog_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRechargeLog_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRechargeLog_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRechargeLog_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRechargeLog_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRechargeLog_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRechargeLog_ProtoModID_Parse(name, value);
  }

  typedef stRechargeLog_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRechargeLog_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRechargeLog_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRechargeLog_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRechargeLog_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRechargeLog_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRechargeLog_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRechargeLog_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRechargeLog_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string account = 3;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 3;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // optional string tid = 4;
  inline bool has_tid() const;
  inline void clear_tid();
  static const int kTidFieldNumber = 4;
  inline const ::std::string& tid() const;
  inline void set_tid(const ::std::string& value);
  inline void set_tid(const char* value);
  inline void set_tid(const char* value, size_t size);
  inline ::std::string* mutable_tid();
  inline ::std::string* release_tid();
  inline void set_allocated_tid(::std::string* tid);

  // optional uint32 rechargeNum = 5;
  inline bool has_rechargenum() const;
  inline void clear_rechargenum();
  static const int kRechargeNumFieldNumber = 5;
  inline ::google::protobuf::uint32 rechargenum() const;
  inline void set_rechargenum(::google::protobuf::uint32 value);

  // optional uint32 diamondNum = 6;
  inline bool has_diamondnum() const;
  inline void clear_diamondnum();
  static const int kDiamondNumFieldNumber = 6;
  inline ::google::protobuf::uint32 diamondnum() const;
  inline void set_diamondnum(::google::protobuf::uint32 value);

  // optional bool newRecharge = 7;
  inline bool has_newrecharge() const;
  inline void clear_newrecharge();
  static const int kNewRechargeFieldNumber = 7;
  inline bool newrecharge() const;
  inline void set_newrecharge(bool value);

  // optional uint32 opID = 8;
  inline bool has_opid() const;
  inline void clear_opid();
  static const int kOpIDFieldNumber = 8;
  inline ::google::protobuf::uint32 opid() const;
  inline void set_opid(::google::protobuf::uint32 value);

  // optional uint32 addDiamond = 9;
  inline bool has_adddiamond() const;
  inline void clear_adddiamond();
  static const int kAddDiamondFieldNumber = 9;
  inline ::google::protobuf::uint32 adddiamond() const;
  inline void set_adddiamond(::google::protobuf::uint32 value);

  // optional uint32 vipLv = 10;
  inline bool has_viplv() const;
  inline void clear_viplv();
  static const int kVipLvFieldNumber = 10;
  inline ::google::protobuf::uint32 viplv() const;
  inline void set_viplv(::google::protobuf::uint32 value);

  // optional uint32 itemID = 11;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIDFieldNumber = 11;
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Game.stRechargeLog)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_tid();
  inline void clear_has_tid();
  inline void set_has_rechargenum();
  inline void clear_has_rechargenum();
  inline void set_has_diamondnum();
  inline void clear_has_diamondnum();
  inline void set_has_newrecharge();
  inline void clear_has_newrecharge();
  inline void set_has_opid();
  inline void clear_has_opid();
  inline void set_has_adddiamond();
  inline void clear_has_adddiamond();
  inline void set_has_viplv();
  inline void clear_has_viplv();
  inline void set_has_itemid();
  inline void clear_has_itemid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::std::string* account_;
  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 rechargenum_;
  ::std::string* tid_;
  ::google::protobuf::uint32 diamondnum_;
  bool newrecharge_;
  ::google::protobuf::uint32 opid_;
  ::google::protobuf::uint32 adddiamond_;
  ::google::protobuf::uint32 viplv_;
  ::google::protobuf::uint32 itemid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_Game_2eproto();
  friend void protobuf_AssignDesc_Game_2eproto();
  friend void protobuf_ShutdownFile_Game_2eproto();

  void InitAsDefaultInstance();
  static stRechargeLog* default_instance_;
};
// -------------------------------------------------------------------

class stPublishActivity : public ::google::protobuf::Message {
 public:
  stPublishActivity();
  virtual ~stPublishActivity();

  stPublishActivity(const stPublishActivity& from);

  inline stPublishActivity& operator=(const stPublishActivity& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stPublishActivity& default_instance();

  void Swap(stPublishActivity* other);

  // implements Message ----------------------------------------------

  stPublishActivity* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stPublishActivity& from);
  void MergeFrom(const stPublishActivity& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stPublishActivity_ProtoModID ProtoModID;
  static const ProtoModID ModID = stPublishActivity_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stPublishActivity_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stPublishActivity_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stPublishActivity_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stPublishActivity_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stPublishActivity_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stPublishActivity_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stPublishActivity_ProtoModID_Parse(name, value);
  }

  typedef stPublishActivity_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stPublishActivity_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stPublishActivity_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stPublishActivity_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stPublishActivity_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stPublishActivity_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stPublishActivity_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stPublishActivity_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stPublishActivity_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional string config = 2;
  inline bool has_config() const;
  inline void clear_config();
  static const int kConfigFieldNumber = 2;
  inline const ::std::string& config() const;
  inline void set_config(const ::std::string& value);
  inline void set_config(const char* value);
  inline void set_config(const char* value, size_t size);
  inline ::std::string* mutable_config();
  inline ::std::string* release_config();
  inline void set_allocated_config(::std::string* config);

  // optional uint32 webConnID = 3;
  inline bool has_webconnid() const;
  inline void clear_webconnid();
  static const int kWebConnIDFieldNumber = 3;
  inline ::google::protobuf::uint32 webconnid() const;
  inline void set_webconnid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Game.stPublishActivity)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_config();
  inline void clear_has_config();
  inline void set_has_webconnid();
  inline void clear_has_webconnid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* config_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 webconnid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Game_2eproto();
  friend void protobuf_AssignDesc_Game_2eproto();
  friend void protobuf_ShutdownFile_Game_2eproto();

  void InitAsDefaultInstance();
  static stPublishActivity* default_instance_;
};
// -------------------------------------------------------------------

class stPublishActivityResult : public ::google::protobuf::Message {
 public:
  stPublishActivityResult();
  virtual ~stPublishActivityResult();

  stPublishActivityResult(const stPublishActivityResult& from);

  inline stPublishActivityResult& operator=(const stPublishActivityResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stPublishActivityResult& default_instance();

  void Swap(stPublishActivityResult* other);

  // implements Message ----------------------------------------------

  stPublishActivityResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stPublishActivityResult& from);
  void MergeFrom(const stPublishActivityResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stPublishActivityResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stPublishActivityResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stPublishActivityResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stPublishActivityResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stPublishActivityResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stPublishActivityResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stPublishActivityResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stPublishActivityResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stPublishActivityResult_ProtoModID_Parse(name, value);
  }

  typedef stPublishActivityResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stPublishActivityResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stPublishActivityResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stPublishActivityResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stPublishActivityResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stPublishActivityResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stPublishActivityResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stPublishActivityResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stPublishActivityResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional bool result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline bool result() const;
  inline void set_result(bool value);

  // optional uint32 webConnID = 2;
  inline bool has_webconnid() const;
  inline void clear_webconnid();
  static const int kWebConnIDFieldNumber = 2;
  inline ::google::protobuf::uint32 webconnid() const;
  inline void set_webconnid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Game.stPublishActivityResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_webconnid();
  inline void clear_has_webconnid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool result_;
  ::google::protobuf::uint32 webconnid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Game_2eproto();
  friend void protobuf_AssignDesc_Game_2eproto();
  friend void protobuf_ShutdownFile_Game_2eproto();

  void InitAsDefaultInstance();
  static stPublishActivityResult* default_instance_;
};
// -------------------------------------------------------------------

class stUnloadActivity : public ::google::protobuf::Message {
 public:
  stUnloadActivity();
  virtual ~stUnloadActivity();

  stUnloadActivity(const stUnloadActivity& from);

  inline stUnloadActivity& operator=(const stUnloadActivity& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stUnloadActivity& default_instance();

  void Swap(stUnloadActivity* other);

  // implements Message ----------------------------------------------

  stUnloadActivity* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stUnloadActivity& from);
  void MergeFrom(const stUnloadActivity& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stUnloadActivity_ProtoModID ProtoModID;
  static const ProtoModID ModID = stUnloadActivity_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stUnloadActivity_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stUnloadActivity_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stUnloadActivity_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stUnloadActivity_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stUnloadActivity_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stUnloadActivity_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stUnloadActivity_ProtoModID_Parse(name, value);
  }

  typedef stUnloadActivity_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stUnloadActivity_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stUnloadActivity_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stUnloadActivity_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stUnloadActivity_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stUnloadActivity_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stUnloadActivity_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stUnloadActivity_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stUnloadActivity_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 webConnID = 2;
  inline bool has_webconnid() const;
  inline void clear_webconnid();
  static const int kWebConnIDFieldNumber = 2;
  inline ::google::protobuf::uint32 webconnid() const;
  inline void set_webconnid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Game.stUnloadActivity)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_webconnid();
  inline void clear_has_webconnid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 webconnid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Game_2eproto();
  friend void protobuf_AssignDesc_Game_2eproto();
  friend void protobuf_ShutdownFile_Game_2eproto();

  void InitAsDefaultInstance();
  static stUnloadActivity* default_instance_;
};
// -------------------------------------------------------------------

class stUnloadActivityResult : public ::google::protobuf::Message {
 public:
  stUnloadActivityResult();
  virtual ~stUnloadActivityResult();

  stUnloadActivityResult(const stUnloadActivityResult& from);

  inline stUnloadActivityResult& operator=(const stUnloadActivityResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stUnloadActivityResult& default_instance();

  void Swap(stUnloadActivityResult* other);

  // implements Message ----------------------------------------------

  stUnloadActivityResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stUnloadActivityResult& from);
  void MergeFrom(const stUnloadActivityResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stUnloadActivityResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stUnloadActivityResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stUnloadActivityResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stUnloadActivityResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stUnloadActivityResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stUnloadActivityResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stUnloadActivityResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stUnloadActivityResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stUnloadActivityResult_ProtoModID_Parse(name, value);
  }

  typedef stUnloadActivityResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stUnloadActivityResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stUnloadActivityResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stUnloadActivityResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stUnloadActivityResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stUnloadActivityResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stUnloadActivityResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stUnloadActivityResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stUnloadActivityResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional bool result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline bool result() const;
  inline void set_result(bool value);

  // optional uint32 webConnID = 2;
  inline bool has_webconnid() const;
  inline void clear_webconnid();
  static const int kWebConnIDFieldNumber = 2;
  inline ::google::protobuf::uint32 webconnid() const;
  inline void set_webconnid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Game.stUnloadActivityResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_webconnid();
  inline void clear_has_webconnid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool result_;
  ::google::protobuf::uint32 webconnid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Game_2eproto();
  friend void protobuf_AssignDesc_Game_2eproto();
  friend void protobuf_ShutdownFile_Game_2eproto();

  void InitAsDefaultInstance();
  static stUnloadActivityResult* default_instance_;
};
// -------------------------------------------------------------------

class stMallBuyLog : public ::google::protobuf::Message {
 public:
  stMallBuyLog();
  virtual ~stMallBuyLog();

  stMallBuyLog(const stMallBuyLog& from);

  inline stMallBuyLog& operator=(const stMallBuyLog& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stMallBuyLog& default_instance();

  void Swap(stMallBuyLog* other);

  // implements Message ----------------------------------------------

  stMallBuyLog* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stMallBuyLog& from);
  void MergeFrom(const stMallBuyLog& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stMallBuyLog_ProtoModID ProtoModID;
  static const ProtoModID ModID = stMallBuyLog_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stMallBuyLog_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stMallBuyLog_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stMallBuyLog_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stMallBuyLog_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stMallBuyLog_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stMallBuyLog_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stMallBuyLog_ProtoModID_Parse(name, value);
  }

  typedef stMallBuyLog_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stMallBuyLog_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stMallBuyLog_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stMallBuyLog_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stMallBuyLog_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stMallBuyLog_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stMallBuyLog_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stMallBuyLog_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stMallBuyLog_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional string account = 2;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 2;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // optional string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 level = 4;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 4;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint32 vipLv = 5;
  inline bool has_viplv() const;
  inline void clear_viplv();
  static const int kVipLvFieldNumber = 5;
  inline ::google::protobuf::uint32 viplv() const;
  inline void set_viplv(::google::protobuf::uint32 value);

  // optional uint32 shopID = 6;
  inline bool has_shopid() const;
  inline void clear_shopid();
  static const int kShopIDFieldNumber = 6;
  inline ::google::protobuf::uint32 shopid() const;
  inline void set_shopid(::google::protobuf::uint32 value);

  // optional uint32 resID = 7;
  inline bool has_resid() const;
  inline void clear_resid();
  static const int kResIDFieldNumber = 7;
  inline ::google::protobuf::uint32 resid() const;
  inline void set_resid(::google::protobuf::uint32 value);

  // optional uint32 resNum = 8;
  inline bool has_resnum() const;
  inline void clear_resnum();
  static const int kResNumFieldNumber = 8;
  inline ::google::protobuf::uint32 resnum() const;
  inline void set_resnum(::google::protobuf::uint32 value);

  // optional uint32 itemID = 9;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIDFieldNumber = 9;
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // optional uint32 itemNum = 10;
  inline bool has_itemnum() const;
  inline void clear_itemnum();
  static const int kItemNumFieldNumber = 10;
  inline ::google::protobuf::uint32 itemnum() const;
  inline void set_itemnum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Game.stMallBuyLog)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_viplv();
  inline void clear_has_viplv();
  inline void set_has_shopid();
  inline void clear_has_shopid();
  inline void set_has_resid();
  inline void clear_has_resid();
  inline void set_has_resnum();
  inline void clear_has_resnum();
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_itemnum();
  inline void clear_has_itemnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* account_;
  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 level_;
  ::std::string* name_;
  ::google::protobuf::uint32 viplv_;
  ::google::protobuf::uint32 shopid_;
  ::google::protobuf::uint32 resid_;
  ::google::protobuf::uint32 resnum_;
  ::google::protobuf::uint32 itemid_;
  ::google::protobuf::uint32 itemnum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_Game_2eproto();
  friend void protobuf_AssignDesc_Game_2eproto();
  friend void protobuf_ShutdownFile_Game_2eproto();

  void InitAsDefaultInstance();
  static stMallBuyLog* default_instance_;
};
// -------------------------------------------------------------------

class stHeroPropChgLog : public ::google::protobuf::Message {
 public:
  stHeroPropChgLog();
  virtual ~stHeroPropChgLog();

  stHeroPropChgLog(const stHeroPropChgLog& from);

  inline stHeroPropChgLog& operator=(const stHeroPropChgLog& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stHeroPropChgLog& default_instance();

  void Swap(stHeroPropChgLog* other);

  // implements Message ----------------------------------------------

  stHeroPropChgLog* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stHeroPropChgLog& from);
  void MergeFrom(const stHeroPropChgLog& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stHeroPropChgLog_ProtoModID ProtoModID;
  static const ProtoModID ModID = stHeroPropChgLog_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stHeroPropChgLog_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stHeroPropChgLog_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stHeroPropChgLog_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stHeroPropChgLog_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stHeroPropChgLog_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stHeroPropChgLog_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stHeroPropChgLog_ProtoModID_Parse(name, value);
  }

  typedef stHeroPropChgLog_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stHeroPropChgLog_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stHeroPropChgLog_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stHeroPropChgLog_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stHeroPropChgLog_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stHeroPropChgLog_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stHeroPropChgLog_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stHeroPropChgLog_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stHeroPropChgLog_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional string account = 2;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 2;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // optional string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 level = 4;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 4;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint32 vipLv = 5;
  inline bool has_viplv() const;
  inline void clear_viplv();
  static const int kVipLvFieldNumber = 5;
  inline ::google::protobuf::uint32 viplv() const;
  inline void set_viplv(::google::protobuf::uint32 value);

  // optional uint32 heroID = 6;
  inline bool has_heroid() const;
  inline void clear_heroid();
  static const int kHeroIDFieldNumber = 6;
  inline ::google::protobuf::uint32 heroid() const;
  inline void set_heroid(::google::protobuf::uint32 value);

  // optional uint32 action = 7;
  inline bool has_action() const;
  inline void clear_action();
  static const int kActionFieldNumber = 7;
  inline ::google::protobuf::uint32 action() const;
  inline void set_action(::google::protobuf::uint32 value);

  // optional uint32 oldLv = 8;
  inline bool has_oldlv() const;
  inline void clear_oldlv();
  static const int kOldLvFieldNumber = 8;
  inline ::google::protobuf::uint32 oldlv() const;
  inline void set_oldlv(::google::protobuf::uint32 value);

  // optional uint32 newLv = 9;
  inline bool has_newlv() const;
  inline void clear_newlv();
  static const int kNewLvFieldNumber = 9;
  inline ::google::protobuf::uint32 newlv() const;
  inline void set_newlv(::google::protobuf::uint32 value);

  // optional uint32 oldEvoLv = 10;
  inline bool has_oldevolv() const;
  inline void clear_oldevolv();
  static const int kOldEvoLvFieldNumber = 10;
  inline ::google::protobuf::uint32 oldevolv() const;
  inline void set_oldevolv(::google::protobuf::uint32 value);

  // optional uint32 newEvoLv = 11;
  inline bool has_newevolv() const;
  inline void clear_newevolv();
  static const int kNewEvoLvFieldNumber = 11;
  inline ::google::protobuf::uint32 newevolv() const;
  inline void set_newevolv(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Game.stHeroPropChgLog)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_viplv();
  inline void clear_has_viplv();
  inline void set_has_heroid();
  inline void clear_has_heroid();
  inline void set_has_action();
  inline void clear_has_action();
  inline void set_has_oldlv();
  inline void clear_has_oldlv();
  inline void set_has_newlv();
  inline void clear_has_newlv();
  inline void set_has_oldevolv();
  inline void clear_has_oldevolv();
  inline void set_has_newevolv();
  inline void clear_has_newevolv();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* account_;
  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 level_;
  ::std::string* name_;
  ::google::protobuf::uint32 viplv_;
  ::google::protobuf::uint32 heroid_;
  ::google::protobuf::uint32 action_;
  ::google::protobuf::uint32 oldlv_;
  ::google::protobuf::uint32 newlv_;
  ::google::protobuf::uint32 oldevolv_;
  ::google::protobuf::uint32 newevolv_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_Game_2eproto();
  friend void protobuf_AssignDesc_Game_2eproto();
  friend void protobuf_ShutdownFile_Game_2eproto();

  void InitAsDefaultInstance();
  static stHeroPropChgLog* default_instance_;
};
// -------------------------------------------------------------------

class stSendGuildLog : public ::google::protobuf::Message {
 public:
  stSendGuildLog();
  virtual ~stSendGuildLog();

  stSendGuildLog(const stSendGuildLog& from);

  inline stSendGuildLog& operator=(const stSendGuildLog& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSendGuildLog& default_instance();

  void Swap(stSendGuildLog* other);

  // implements Message ----------------------------------------------

  stSendGuildLog* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSendGuildLog& from);
  void MergeFrom(const stSendGuildLog& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stSendGuildLog_ProtoModID ProtoModID;
  static const ProtoModID ModID = stSendGuildLog_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stSendGuildLog_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stSendGuildLog_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stSendGuildLog_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stSendGuildLog_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stSendGuildLog_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stSendGuildLog_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stSendGuildLog_ProtoModID_Parse(name, value);
  }

  typedef stSendGuildLog_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stSendGuildLog_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stSendGuildLog_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stSendGuildLog_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stSendGuildLog_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stSendGuildLog_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stSendGuildLog_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stSendGuildLog_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stSendGuildLog_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string account = 1;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 1;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // optional uint32 opID = 2;
  inline bool has_opid() const;
  inline void clear_opid();
  static const int kOpIDFieldNumber = 2;
  inline ::google::protobuf::uint32 opid() const;
  inline void set_opid(::google::protobuf::uint32 value);

  // optional uint32 charID = 3;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 3;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 level = 4;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 4;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint32 vipLv = 5;
  inline bool has_viplv() const;
  inline void clear_viplv();
  static const int kVipLvFieldNumber = 5;
  inline ::google::protobuf::uint32 viplv() const;
  inline void set_viplv(::google::protobuf::uint32 value);

  // optional uint32 guildID = 6;
  inline bool has_guildid() const;
  inline void clear_guildid();
  static const int kGuildIDFieldNumber = 6;
  inline ::google::protobuf::uint32 guildid() const;
  inline void set_guildid(::google::protobuf::uint32 value);

  // optional string action = 7;
  inline bool has_action() const;
  inline void clear_action();
  static const int kActionFieldNumber = 7;
  inline const ::std::string& action() const;
  inline void set_action(const ::std::string& value);
  inline void set_action(const char* value);
  inline void set_action(const char* value, size_t size);
  inline ::std::string* mutable_action();
  inline ::std::string* release_action();
  inline void set_allocated_action(::std::string* action);

  // optional string opObjID = 8;
  inline bool has_opobjid() const;
  inline void clear_opobjid();
  static const int kOpObjIDFieldNumber = 8;
  inline const ::std::string& opobjid() const;
  inline void set_opobjid(const ::std::string& value);
  inline void set_opobjid(const char* value);
  inline void set_opobjid(const char* value, size_t size);
  inline ::std::string* mutable_opobjid();
  inline ::std::string* release_opobjid();
  inline void set_allocated_opobjid(::std::string* opobjid);

  // @@protoc_insertion_point(class_scope:Game.stSendGuildLog)
 private:
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_opid();
  inline void clear_has_opid();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_viplv();
  inline void clear_has_viplv();
  inline void set_has_guildid();
  inline void clear_has_guildid();
  inline void set_has_action();
  inline void clear_has_action();
  inline void set_has_opobjid();
  inline void clear_has_opobjid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* account_;
  ::google::protobuf::uint32 opid_;
  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 viplv_;
  ::std::string* action_;
  ::std::string* opobjid_;
  ::google::protobuf::uint32 guildid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_Game_2eproto();
  friend void protobuf_AssignDesc_Game_2eproto();
  friend void protobuf_ShutdownFile_Game_2eproto();

  void InitAsDefaultInstance();
  static stSendGuildLog* default_instance_;
};
// -------------------------------------------------------------------

class sstSendGuildResLog : public ::google::protobuf::Message {
 public:
  sstSendGuildResLog();
  virtual ~sstSendGuildResLog();

  sstSendGuildResLog(const sstSendGuildResLog& from);

  inline sstSendGuildResLog& operator=(const sstSendGuildResLog& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sstSendGuildResLog& default_instance();

  void Swap(sstSendGuildResLog* other);

  // implements Message ----------------------------------------------

  sstSendGuildResLog* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sstSendGuildResLog& from);
  void MergeFrom(const sstSendGuildResLog& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef sstSendGuildResLog_ProtoModID ProtoModID;
  static const ProtoModID ModID = sstSendGuildResLog_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return sstSendGuildResLog_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    sstSendGuildResLog_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    sstSendGuildResLog_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    sstSendGuildResLog_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return sstSendGuildResLog_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return sstSendGuildResLog_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return sstSendGuildResLog_ProtoModID_Parse(name, value);
  }

  typedef sstSendGuildResLog_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = sstSendGuildResLog_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return sstSendGuildResLog_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    sstSendGuildResLog_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    sstSendGuildResLog_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    sstSendGuildResLog_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return sstSendGuildResLog_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return sstSendGuildResLog_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return sstSendGuildResLog_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 guildID = 1;
  inline bool has_guildid() const;
  inline void clear_guildid();
  static const int kGuildIDFieldNumber = 1;
  inline ::google::protobuf::uint32 guildid() const;
  inline void set_guildid(::google::protobuf::uint32 value);

  // optional string res = 2;
  inline bool has_res() const;
  inline void clear_res();
  static const int kResFieldNumber = 2;
  inline const ::std::string& res() const;
  inline void set_res(const ::std::string& value);
  inline void set_res(const char* value);
  inline void set_res(const char* value, size_t size);
  inline ::std::string* mutable_res();
  inline ::std::string* release_res();
  inline void set_allocated_res(::std::string* res);

  // optional uint32 oldVal = 3;
  inline bool has_oldval() const;
  inline void clear_oldval();
  static const int kOldValFieldNumber = 3;
  inline ::google::protobuf::uint32 oldval() const;
  inline void set_oldval(::google::protobuf::uint32 value);

  // optional uint32 newVal = 4;
  inline bool has_newval() const;
  inline void clear_newval();
  static const int kNewValFieldNumber = 4;
  inline ::google::protobuf::uint32 newval() const;
  inline void set_newval(::google::protobuf::uint32 value);

  // optional string reason = 5;
  inline bool has_reason() const;
  inline void clear_reason();
  static const int kReasonFieldNumber = 5;
  inline const ::std::string& reason() const;
  inline void set_reason(const ::std::string& value);
  inline void set_reason(const char* value);
  inline void set_reason(const char* value, size_t size);
  inline ::std::string* mutable_reason();
  inline ::std::string* release_reason();
  inline void set_allocated_reason(::std::string* reason);

  // @@protoc_insertion_point(class_scope:Game.sstSendGuildResLog)
 private:
  inline void set_has_guildid();
  inline void clear_has_guildid();
  inline void set_has_res();
  inline void clear_has_res();
  inline void set_has_oldval();
  inline void clear_has_oldval();
  inline void set_has_newval();
  inline void clear_has_newval();
  inline void set_has_reason();
  inline void clear_has_reason();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* res_;
  ::google::protobuf::uint32 guildid_;
  ::google::protobuf::uint32 oldval_;
  ::std::string* reason_;
  ::google::protobuf::uint32 newval_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Game_2eproto();
  friend void protobuf_AssignDesc_Game_2eproto();
  friend void protobuf_ShutdownFile_Game_2eproto();

  void InitAsDefaultInstance();
  static sstSendGuildResLog* default_instance_;
};
// -------------------------------------------------------------------

class stSendModuleLog : public ::google::protobuf::Message {
 public:
  stSendModuleLog();
  virtual ~stSendModuleLog();

  stSendModuleLog(const stSendModuleLog& from);

  inline stSendModuleLog& operator=(const stSendModuleLog& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSendModuleLog& default_instance();

  void Swap(stSendModuleLog* other);

  // implements Message ----------------------------------------------

  stSendModuleLog* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSendModuleLog& from);
  void MergeFrom(const stSendModuleLog& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stSendModuleLog_ProtoModID ProtoModID;
  static const ProtoModID ModID = stSendModuleLog_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stSendModuleLog_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stSendModuleLog_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stSendModuleLog_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stSendModuleLog_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stSendModuleLog_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stSendModuleLog_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stSendModuleLog_ProtoModID_Parse(name, value);
  }

  typedef stSendModuleLog_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stSendModuleLog_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stSendModuleLog_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stSendModuleLog_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stSendModuleLog_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stSendModuleLog_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stSendModuleLog_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stSendModuleLog_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stSendModuleLog_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string account = 1;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 1;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // optional uint32 opID = 2;
  inline bool has_opid() const;
  inline void clear_opid();
  static const int kOpIDFieldNumber = 2;
  inline ::google::protobuf::uint32 opid() const;
  inline void set_opid(::google::protobuf::uint32 value);

  // optional uint32 charID = 3;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 3;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 level = 4;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 4;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint32 vipLv = 5;
  inline bool has_viplv() const;
  inline void clear_viplv();
  static const int kVipLvFieldNumber = 5;
  inline ::google::protobuf::uint32 viplv() const;
  inline void set_viplv(::google::protobuf::uint32 value);

  // optional string module = 6;
  inline bool has_module() const;
  inline void clear_module();
  static const int kModuleFieldNumber = 6;
  inline const ::std::string& module() const;
  inline void set_module(const ::std::string& value);
  inline void set_module(const char* value);
  inline void set_module(const char* value, size_t size);
  inline ::std::string* mutable_module();
  inline ::std::string* release_module();
  inline void set_allocated_module(::std::string* module);

  // optional uint32 copymapID = 7;
  inline bool has_copymapid() const;
  inline void clear_copymapid();
  static const int kCopymapIDFieldNumber = 7;
  inline ::google::protobuf::uint32 copymapid() const;
  inline void set_copymapid(::google::protobuf::uint32 value);

  // optional string otherCharID = 8;
  inline bool has_othercharid() const;
  inline void clear_othercharid();
  static const int kOtherCharIDFieldNumber = 8;
  inline const ::std::string& othercharid() const;
  inline void set_othercharid(const ::std::string& value);
  inline void set_othercharid(const char* value);
  inline void set_othercharid(const char* value, size_t size);
  inline ::std::string* mutable_othercharid();
  inline ::std::string* release_othercharid();
  inline void set_allocated_othercharid(::std::string* othercharid);

  // optional bool result = 9;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 9;
  inline bool result() const;
  inline void set_result(bool value);

  // optional uint32 oldRank = 10;
  inline bool has_oldrank() const;
  inline void clear_oldrank();
  static const int kOldRankFieldNumber = 10;
  inline ::google::protobuf::uint32 oldrank() const;
  inline void set_oldrank(::google::protobuf::uint32 value);

  // optional uint32 newRank = 11;
  inline bool has_newrank() const;
  inline void clear_newrank();
  static const int kNewRankFieldNumber = 11;
  inline ::google::protobuf::uint32 newrank() const;
  inline void set_newrank(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Game.stSendModuleLog)
 private:
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_opid();
  inline void clear_has_opid();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_viplv();
  inline void clear_has_viplv();
  inline void set_has_module();
  inline void clear_has_module();
  inline void set_has_copymapid();
  inline void clear_has_copymapid();
  inline void set_has_othercharid();
  inline void clear_has_othercharid();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_oldrank();
  inline void clear_has_oldrank();
  inline void set_has_newrank();
  inline void clear_has_newrank();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* account_;
  ::google::protobuf::uint32 opid_;
  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 viplv_;
  ::std::string* module_;
  ::std::string* othercharid_;
  ::google::protobuf::uint32 copymapid_;
  bool result_;
  ::google::protobuf::uint32 oldrank_;
  ::google::protobuf::uint32 newrank_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_Game_2eproto();
  friend void protobuf_AssignDesc_Game_2eproto();
  friend void protobuf_ShutdownFile_Game_2eproto();

  void InitAsDefaultInstance();
  static stSendModuleLog* default_instance_;
};
// -------------------------------------------------------------------

class stSkillChgLog : public ::google::protobuf::Message {
 public:
  stSkillChgLog();
  virtual ~stSkillChgLog();

  stSkillChgLog(const stSkillChgLog& from);

  inline stSkillChgLog& operator=(const stSkillChgLog& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSkillChgLog& default_instance();

  void Swap(stSkillChgLog* other);

  // implements Message ----------------------------------------------

  stSkillChgLog* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSkillChgLog& from);
  void MergeFrom(const stSkillChgLog& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stSkillChgLog_ProtoModID ProtoModID;
  static const ProtoModID ModID = stSkillChgLog_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stSkillChgLog_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stSkillChgLog_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stSkillChgLog_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stSkillChgLog_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stSkillChgLog_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stSkillChgLog_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stSkillChgLog_ProtoModID_Parse(name, value);
  }

  typedef stSkillChgLog_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stSkillChgLog_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stSkillChgLog_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stSkillChgLog_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stSkillChgLog_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stSkillChgLog_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stSkillChgLog_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stSkillChgLog_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stSkillChgLog_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 skillID = 1;
  inline bool has_skillid() const;
  inline void clear_skillid();
  static const int kSkillIDFieldNumber = 1;
  inline ::google::protobuf::uint32 skillid() const;
  inline void set_skillid(::google::protobuf::uint32 value);

  // optional uint32 pos = 2;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 2;
  inline ::google::protobuf::uint32 pos() const;
  inline void set_pos(::google::protobuf::uint32 value);

  // optional uint32 oldLv = 3;
  inline bool has_oldlv() const;
  inline void clear_oldlv();
  static const int kOldLvFieldNumber = 3;
  inline ::google::protobuf::uint32 oldlv() const;
  inline void set_oldlv(::google::protobuf::uint32 value);

  // optional uint32 newLv = 4;
  inline bool has_newlv() const;
  inline void clear_newlv();
  static const int kNewLvFieldNumber = 4;
  inline ::google::protobuf::uint32 newlv() const;
  inline void set_newlv(::google::protobuf::uint32 value);

  // optional uint32 decGoldCoind = 5;
  inline bool has_decgoldcoind() const;
  inline void clear_decgoldcoind();
  static const int kDecGoldCoindFieldNumber = 5;
  inline ::google::protobuf::uint32 decgoldcoind() const;
  inline void set_decgoldcoind(::google::protobuf::uint32 value);

  // optional uint32 action = 6;
  inline bool has_action() const;
  inline void clear_action();
  static const int kActionFieldNumber = 6;
  inline ::google::protobuf::uint32 action() const;
  inline void set_action(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Game.stSkillChgLog)
 private:
  inline void set_has_skillid();
  inline void clear_has_skillid();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_oldlv();
  inline void clear_has_oldlv();
  inline void set_has_newlv();
  inline void clear_has_newlv();
  inline void set_has_decgoldcoind();
  inline void clear_has_decgoldcoind();
  inline void set_has_action();
  inline void clear_has_action();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 skillid_;
  ::google::protobuf::uint32 pos_;
  ::google::protobuf::uint32 oldlv_;
  ::google::protobuf::uint32 newlv_;
  ::google::protobuf::uint32 decgoldcoind_;
  ::google::protobuf::uint32 action_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_Game_2eproto();
  friend void protobuf_AssignDesc_Game_2eproto();
  friend void protobuf_ShutdownFile_Game_2eproto();

  void InitAsDefaultInstance();
  static stSkillChgLog* default_instance_;
};
// -------------------------------------------------------------------

class stSpriteLog : public ::google::protobuf::Message {
 public:
  stSpriteLog();
  virtual ~stSpriteLog();

  stSpriteLog(const stSpriteLog& from);

  inline stSpriteLog& operator=(const stSpriteLog& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSpriteLog& default_instance();

  void Swap(stSpriteLog* other);

  // implements Message ----------------------------------------------

  stSpriteLog* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSpriteLog& from);
  void MergeFrom(const stSpriteLog& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stSpriteLog_ProtoModID ProtoModID;
  static const ProtoModID ModID = stSpriteLog_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stSpriteLog_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stSpriteLog_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stSpriteLog_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stSpriteLog_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stSpriteLog_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stSpriteLog_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stSpriteLog_ProtoModID_Parse(name, value);
  }

  typedef stSpriteLog_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stSpriteLog_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stSpriteLog_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stSpriteLog_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stSpriteLog_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stSpriteLog_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stSpriteLog_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stSpriteLog_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stSpriteLog_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 spriteID = 1;
  inline bool has_spriteid() const;
  inline void clear_spriteid();
  static const int kSpriteIDFieldNumber = 1;
  inline ::google::protobuf::uint32 spriteid() const;
  inline void set_spriteid(::google::protobuf::uint32 value);

  // optional uint32 oldLv = 2;
  inline bool has_oldlv() const;
  inline void clear_oldlv();
  static const int kOldLvFieldNumber = 2;
  inline ::google::protobuf::uint32 oldlv() const;
  inline void set_oldlv(::google::protobuf::uint32 value);

  // optional uint32 newLv = 3;
  inline bool has_newlv() const;
  inline void clear_newlv();
  static const int kNewLvFieldNumber = 3;
  inline ::google::protobuf::uint32 newlv() const;
  inline void set_newlv(::google::protobuf::uint32 value);

  // optional uint32 consume = 4;
  inline bool has_consume() const;
  inline void clear_consume();
  static const int kConsumeFieldNumber = 4;
  inline ::google::protobuf::uint32 consume() const;
  inline void set_consume(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Game.stSpriteLog)
 private:
  inline void set_has_spriteid();
  inline void clear_has_spriteid();
  inline void set_has_oldlv();
  inline void clear_has_oldlv();
  inline void set_has_newlv();
  inline void clear_has_newlv();
  inline void set_has_consume();
  inline void clear_has_consume();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 spriteid_;
  ::google::protobuf::uint32 oldlv_;
  ::google::protobuf::uint32 newlv_;
  ::google::protobuf::uint32 consume_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Game_2eproto();
  friend void protobuf_AssignDesc_Game_2eproto();
  friend void protobuf_ShutdownFile_Game_2eproto();

  void InitAsDefaultInstance();
  static stSpriteLog* default_instance_;
};
// -------------------------------------------------------------------

class stCopymapLog : public ::google::protobuf::Message {
 public:
  stCopymapLog();
  virtual ~stCopymapLog();

  stCopymapLog(const stCopymapLog& from);

  inline stCopymapLog& operator=(const stCopymapLog& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stCopymapLog& default_instance();

  void Swap(stCopymapLog* other);

  // implements Message ----------------------------------------------

  stCopymapLog* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stCopymapLog& from);
  void MergeFrom(const stCopymapLog& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stCopymapLog_ProtoModID ProtoModID;
  static const ProtoModID ModID = stCopymapLog_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stCopymapLog_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stCopymapLog_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stCopymapLog_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stCopymapLog_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stCopymapLog_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stCopymapLog_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stCopymapLog_ProtoModID_Parse(name, value);
  }

  typedef stCopymapLog_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stCopymapLog_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stCopymapLog_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stCopymapLog_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stCopymapLog_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stCopymapLog_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stCopymapLog_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stCopymapLog_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stCopymapLog_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 copymapID = 1;
  inline bool has_copymapid() const;
  inline void clear_copymapid();
  static const int kCopymapIDFieldNumber = 1;
  inline ::google::protobuf::uint32 copymapid() const;
  inline void set_copymapid(::google::protobuf::uint32 value);

  // optional bool win = 2;
  inline bool has_win() const;
  inline void clear_win();
  static const int kWinFieldNumber = 2;
  inline bool win() const;
  inline void set_win(bool value);

  // optional string action = 3;
  inline bool has_action() const;
  inline void clear_action();
  static const int kActionFieldNumber = 3;
  inline const ::std::string& action() const;
  inline void set_action(const ::std::string& value);
  inline void set_action(const char* value);
  inline void set_action(const char* value, size_t size);
  inline ::std::string* mutable_action();
  inline ::std::string* release_action();
  inline void set_allocated_action(::std::string* action);

  // @@protoc_insertion_point(class_scope:Game.stCopymapLog)
 private:
  inline void set_has_copymapid();
  inline void clear_has_copymapid();
  inline void set_has_win();
  inline void clear_has_win();
  inline void set_has_action();
  inline void clear_has_action();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 copymapid_;
  bool win_;
  ::std::string* action_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Game_2eproto();
  friend void protobuf_AssignDesc_Game_2eproto();
  friend void protobuf_ShutdownFile_Game_2eproto();

  void InitAsDefaultInstance();
  static stCopymapLog* default_instance_;
};
// -------------------------------------------------------------------

class stEquipChgLog : public ::google::protobuf::Message {
 public:
  stEquipChgLog();
  virtual ~stEquipChgLog();

  stEquipChgLog(const stEquipChgLog& from);

  inline stEquipChgLog& operator=(const stEquipChgLog& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stEquipChgLog& default_instance();

  void Swap(stEquipChgLog* other);

  // implements Message ----------------------------------------------

  stEquipChgLog* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stEquipChgLog& from);
  void MergeFrom(const stEquipChgLog& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stEquipChgLog_ProtoModID ProtoModID;
  static const ProtoModID ModID = stEquipChgLog_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stEquipChgLog_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stEquipChgLog_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stEquipChgLog_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stEquipChgLog_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stEquipChgLog_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stEquipChgLog_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stEquipChgLog_ProtoModID_Parse(name, value);
  }

  typedef stEquipChgLog_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stEquipChgLog_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stEquipChgLog_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stEquipChgLog_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stEquipChgLog_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stEquipChgLog_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stEquipChgLog_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stEquipChgLog_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stEquipChgLog_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 itemID = 1;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIDFieldNumber = 1;
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // optional uint32 oldRaiseLv = 2;
  inline bool has_oldraiselv() const;
  inline void clear_oldraiselv();
  static const int kOldRaiseLvFieldNumber = 2;
  inline ::google::protobuf::uint32 oldraiselv() const;
  inline void set_oldraiselv(::google::protobuf::uint32 value);

  // optional uint32 newRaiseLv = 3;
  inline bool has_newraiselv() const;
  inline void clear_newraiselv();
  static const int kNewRaiseLvFieldNumber = 3;
  inline ::google::protobuf::uint32 newraiselv() const;
  inline void set_newraiselv(::google::protobuf::uint32 value);

  // optional uint32 oldRefineLv = 4;
  inline bool has_oldrefinelv() const;
  inline void clear_oldrefinelv();
  static const int kOldRefineLvFieldNumber = 4;
  inline ::google::protobuf::uint32 oldrefinelv() const;
  inline void set_oldrefinelv(::google::protobuf::uint32 value);

  // optional uint32 newRefineLv = 5;
  inline bool has_newrefinelv() const;
  inline void clear_newrefinelv();
  static const int kNewRefineLvFieldNumber = 5;
  inline ::google::protobuf::uint32 newrefinelv() const;
  inline void set_newrefinelv(::google::protobuf::uint32 value);

  // optional string action = 6;
  inline bool has_action() const;
  inline void clear_action();
  static const int kActionFieldNumber = 6;
  inline const ::std::string& action() const;
  inline void set_action(const ::std::string& value);
  inline void set_action(const char* value);
  inline void set_action(const char* value, size_t size);
  inline ::std::string* mutable_action();
  inline ::std::string* release_action();
  inline void set_allocated_action(::std::string* action);

  // optional uint32 decGoldcoin = 7;
  inline bool has_decgoldcoin() const;
  inline void clear_decgoldcoin();
  static const int kDecGoldcoinFieldNumber = 7;
  inline ::google::protobuf::uint32 decgoldcoin() const;
  inline void set_decgoldcoin(::google::protobuf::uint32 value);

  // optional uint32 decYuntie = 8;
  inline bool has_decyuntie() const;
  inline void clear_decyuntie();
  static const int kDecYuntieFieldNumber = 8;
  inline ::google::protobuf::uint32 decyuntie() const;
  inline void set_decyuntie(::google::protobuf::uint32 value);

  // optional uint32 decItemID = 9;
  inline bool has_decitemid() const;
  inline void clear_decitemid();
  static const int kDecItemIDFieldNumber = 9;
  inline ::google::protobuf::uint32 decitemid() const;
  inline void set_decitemid(::google::protobuf::uint32 value);

  // optional uint32 addGoldcoin = 10;
  inline bool has_addgoldcoin() const;
  inline void clear_addgoldcoin();
  static const int kAddGoldcoinFieldNumber = 10;
  inline ::google::protobuf::uint32 addgoldcoin() const;
  inline void set_addgoldcoin(::google::protobuf::uint32 value);

  // optional uint32 addYuntie = 11;
  inline bool has_addyuntie() const;
  inline void clear_addyuntie();
  static const int kAddYuntieFieldNumber = 11;
  inline ::google::protobuf::uint32 addyuntie() const;
  inline void set_addyuntie(::google::protobuf::uint32 value);

  // optional uint32 addItemID = 12;
  inline bool has_additemid() const;
  inline void clear_additemid();
  static const int kAddItemIDFieldNumber = 12;
  inline ::google::protobuf::uint32 additemid() const;
  inline void set_additemid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Game.stEquipChgLog)
 private:
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_oldraiselv();
  inline void clear_has_oldraiselv();
  inline void set_has_newraiselv();
  inline void clear_has_newraiselv();
  inline void set_has_oldrefinelv();
  inline void clear_has_oldrefinelv();
  inline void set_has_newrefinelv();
  inline void clear_has_newrefinelv();
  inline void set_has_action();
  inline void clear_has_action();
  inline void set_has_decgoldcoin();
  inline void clear_has_decgoldcoin();
  inline void set_has_decyuntie();
  inline void clear_has_decyuntie();
  inline void set_has_decitemid();
  inline void clear_has_decitemid();
  inline void set_has_addgoldcoin();
  inline void clear_has_addgoldcoin();
  inline void set_has_addyuntie();
  inline void clear_has_addyuntie();
  inline void set_has_additemid();
  inline void clear_has_additemid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 itemid_;
  ::google::protobuf::uint32 oldraiselv_;
  ::google::protobuf::uint32 newraiselv_;
  ::google::protobuf::uint32 oldrefinelv_;
  ::std::string* action_;
  ::google::protobuf::uint32 newrefinelv_;
  ::google::protobuf::uint32 decgoldcoin_;
  ::google::protobuf::uint32 decyuntie_;
  ::google::protobuf::uint32 decitemid_;
  ::google::protobuf::uint32 addgoldcoin_;
  ::google::protobuf::uint32 addyuntie_;
  ::google::protobuf::uint32 additemid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  friend void  protobuf_AddDesc_Game_2eproto();
  friend void protobuf_AssignDesc_Game_2eproto();
  friend void protobuf_ShutdownFile_Game_2eproto();

  void InitAsDefaultInstance();
  static stEquipChgLog* default_instance_;
};
// -------------------------------------------------------------------

class stActivityLog : public ::google::protobuf::Message {
 public:
  stActivityLog();
  virtual ~stActivityLog();

  stActivityLog(const stActivityLog& from);

  inline stActivityLog& operator=(const stActivityLog& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stActivityLog& default_instance();

  void Swap(stActivityLog* other);

  // implements Message ----------------------------------------------

  stActivityLog* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stActivityLog& from);
  void MergeFrom(const stActivityLog& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stActivityLog_ProtoModID ProtoModID;
  static const ProtoModID ModID = stActivityLog_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stActivityLog_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stActivityLog_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stActivityLog_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stActivityLog_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stActivityLog_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stActivityLog_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stActivityLog_ProtoModID_Parse(name, value);
  }

  typedef stActivityLog_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stActivityLog_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stActivityLog_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stActivityLog_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stActivityLog_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stActivityLog_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stActivityLog_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stActivityLog_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stActivityLog_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 activityID = 2;
  inline bool has_activityid() const;
  inline void clear_activityid();
  static const int kActivityIDFieldNumber = 2;
  inline ::google::protobuf::uint32 activityid() const;
  inline void set_activityid(::google::protobuf::uint32 value);

  // optional string activityName = 3;
  inline bool has_activityname() const;
  inline void clear_activityname();
  static const int kActivityNameFieldNumber = 3;
  inline const ::std::string& activityname() const;
  inline void set_activityname(const ::std::string& value);
  inline void set_activityname(const char* value);
  inline void set_activityname(const char* value, size_t size);
  inline ::std::string* mutable_activityname();
  inline ::std::string* release_activityname();
  inline void set_allocated_activityname(::std::string* activityname);

  // optional uint32 stepID = 4;
  inline bool has_stepid() const;
  inline void clear_stepid();
  static const int kStepIDFieldNumber = 4;
  inline ::google::protobuf::uint32 stepid() const;
  inline void set_stepid(::google::protobuf::uint32 value);

  // optional string desc = 5;
  inline bool has_desc() const;
  inline void clear_desc();
  static const int kDescFieldNumber = 5;
  inline const ::std::string& desc() const;
  inline void set_desc(const ::std::string& value);
  inline void set_desc(const char* value);
  inline void set_desc(const char* value, size_t size);
  inline ::std::string* mutable_desc();
  inline ::std::string* release_desc();
  inline void set_allocated_desc(::std::string* desc);

  // @@protoc_insertion_point(class_scope:Game.stActivityLog)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_activityid();
  inline void clear_has_activityid();
  inline void set_has_activityname();
  inline void clear_has_activityname();
  inline void set_has_stepid();
  inline void clear_has_stepid();
  inline void set_has_desc();
  inline void clear_has_desc();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 activityid_;
  ::std::string* activityname_;
  ::std::string* desc_;
  ::google::protobuf::uint32 stepid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Game_2eproto();
  friend void protobuf_AssignDesc_Game_2eproto();
  friend void protobuf_ShutdownFile_Game_2eproto();

  void InitAsDefaultInstance();
  static stActivityLog* default_instance_;
};
// -------------------------------------------------------------------

class stUserCancel : public ::google::protobuf::Message {
 public:
  stUserCancel();
  virtual ~stUserCancel();

  stUserCancel(const stUserCancel& from);

  inline stUserCancel& operator=(const stUserCancel& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stUserCancel& default_instance();

  void Swap(stUserCancel* other);

  // implements Message ----------------------------------------------

  stUserCancel* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stUserCancel& from);
  void MergeFrom(const stUserCancel& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stUserCancel_CancelType CancelType;
  static const CancelType Month_Card = stUserCancel_CancelType_Month_Card;
  static const CancelType Forever_Card = stUserCancel_CancelType_Forever_Card;
  static const CancelType Grown_Card = stUserCancel_CancelType_Grown_Card;
  static inline bool CancelType_IsValid(int value) {
    return stUserCancel_CancelType_IsValid(value);
  }
  static const CancelType CancelType_MIN =
    stUserCancel_CancelType_CancelType_MIN;
  static const CancelType CancelType_MAX =
    stUserCancel_CancelType_CancelType_MAX;
  static const int CancelType_ARRAYSIZE =
    stUserCancel_CancelType_CancelType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CancelType_descriptor() {
    return stUserCancel_CancelType_descriptor();
  }
  static inline const ::std::string& CancelType_Name(CancelType value) {
    return stUserCancel_CancelType_Name(value);
  }
  static inline bool CancelType_Parse(const ::std::string& name,
      CancelType* value) {
    return stUserCancel_CancelType_Parse(name, value);
  }

  typedef stUserCancel_ProtoModID ProtoModID;
  static const ProtoModID ModID = stUserCancel_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stUserCancel_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stUserCancel_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stUserCancel_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stUserCancel_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stUserCancel_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stUserCancel_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stUserCancel_ProtoModID_Parse(name, value);
  }

  typedef stUserCancel_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stUserCancel_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stUserCancel_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stUserCancel_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stUserCancel_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stUserCancel_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stUserCancel_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stUserCancel_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stUserCancel_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional uint32 webConnID = 3;
  inline bool has_webconnid() const;
  inline void clear_webconnid();
  static const int kWebConnIDFieldNumber = 3;
  inline ::google::protobuf::uint32 webconnid() const;
  inline void set_webconnid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Game.stUserCancel)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_webconnid();
  inline void clear_has_webconnid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 webconnid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Game_2eproto();
  friend void protobuf_AssignDesc_Game_2eproto();
  friend void protobuf_ShutdownFile_Game_2eproto();

  void InitAsDefaultInstance();
  static stUserCancel* default_instance_;
};
// -------------------------------------------------------------------

class stUserCancelRes : public ::google::protobuf::Message {
 public:
  stUserCancelRes();
  virtual ~stUserCancelRes();

  stUserCancelRes(const stUserCancelRes& from);

  inline stUserCancelRes& operator=(const stUserCancelRes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stUserCancelRes& default_instance();

  void Swap(stUserCancelRes* other);

  // implements Message ----------------------------------------------

  stUserCancelRes* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stUserCancelRes& from);
  void MergeFrom(const stUserCancelRes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stUserCancelRes_ProtoModID ProtoModID;
  static const ProtoModID ModID = stUserCancelRes_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stUserCancelRes_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stUserCancelRes_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stUserCancelRes_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stUserCancelRes_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stUserCancelRes_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stUserCancelRes_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stUserCancelRes_ProtoModID_Parse(name, value);
  }

  typedef stUserCancelRes_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stUserCancelRes_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stUserCancelRes_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stUserCancelRes_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stUserCancelRes_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stUserCancelRes_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stUserCancelRes_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stUserCancelRes_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stUserCancelRes_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string res = 1;
  inline bool has_res() const;
  inline void clear_res();
  static const int kResFieldNumber = 1;
  inline const ::std::string& res() const;
  inline void set_res(const ::std::string& value);
  inline void set_res(const char* value);
  inline void set_res(const char* value, size_t size);
  inline ::std::string* mutable_res();
  inline ::std::string* release_res();
  inline void set_allocated_res(::std::string* res);

  // optional uint32 webConnID = 2;
  inline bool has_webconnid() const;
  inline void clear_webconnid();
  static const int kWebConnIDFieldNumber = 2;
  inline ::google::protobuf::uint32 webconnid() const;
  inline void set_webconnid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Game.stUserCancelRes)
 private:
  inline void set_has_res();
  inline void clear_has_res();
  inline void set_has_webconnid();
  inline void clear_has_webconnid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* res_;
  ::google::protobuf::uint32 webconnid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Game_2eproto();
  friend void protobuf_AssignDesc_Game_2eproto();
  friend void protobuf_ShutdownFile_Game_2eproto();

  void InitAsDefaultInstance();
  static stUserCancelRes* default_instance_;
};
// -------------------------------------------------------------------

class stReqPayType : public ::google::protobuf::Message {
 public:
  stReqPayType();
  virtual ~stReqPayType();

  stReqPayType(const stReqPayType& from);

  inline stReqPayType& operator=(const stReqPayType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqPayType& default_instance();

  void Swap(stReqPayType* other);

  // implements Message ----------------------------------------------

  stReqPayType* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqPayType& from);
  void MergeFrom(const stReqPayType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqPayType_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqPayType_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqPayType_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqPayType_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqPayType_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqPayType_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqPayType_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqPayType_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqPayType_ProtoModID_Parse(name, value);
  }

  typedef stReqPayType_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqPayType_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqPayType_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqPayType_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqPayType_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqPayType_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqPayType_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqPayType_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqPayType_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 itemId = 2;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIdFieldNumber = 2;
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // optional string orderId = 3;
  inline bool has_orderid() const;
  inline void clear_orderid();
  static const int kOrderIdFieldNumber = 3;
  inline const ::std::string& orderid() const;
  inline void set_orderid(const ::std::string& value);
  inline void set_orderid(const char* value);
  inline void set_orderid(const char* value, size_t size);
  inline ::std::string* mutable_orderid();
  inline ::std::string* release_orderid();
  inline void set_allocated_orderid(::std::string* orderid);

  // optional string payType = 4;
  inline bool has_paytype() const;
  inline void clear_paytype();
  static const int kPayTypeFieldNumber = 4;
  inline const ::std::string& paytype() const;
  inline void set_paytype(const ::std::string& value);
  inline void set_paytype(const char* value);
  inline void set_paytype(const char* value, size_t size);
  inline ::std::string* mutable_paytype();
  inline ::std::string* release_paytype();
  inline void set_allocated_paytype(::std::string* paytype);

  // optional bool isExtend = 5;
  inline bool has_isextend() const;
  inline void clear_isextend();
  static const int kIsExtendFieldNumber = 5;
  inline bool isextend() const;
  inline void set_isextend(bool value);

  // optional string data = 6;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 6;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const char* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:Game.stReqPayType)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_orderid();
  inline void clear_has_orderid();
  inline void set_has_paytype();
  inline void clear_has_paytype();
  inline void set_has_isextend();
  inline void clear_has_isextend();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 itemid_;
  ::std::string* orderid_;
  ::std::string* paytype_;
  ::std::string* data_;
  bool isextend_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_Game_2eproto();
  friend void protobuf_AssignDesc_Game_2eproto();
  friend void protobuf_ShutdownFile_Game_2eproto();

  void InitAsDefaultInstance();
  static stReqPayType* default_instance_;
};
// -------------------------------------------------------------------

class stReqPayTypeCb : public ::google::protobuf::Message {
 public:
  stReqPayTypeCb();
  virtual ~stReqPayTypeCb();

  stReqPayTypeCb(const stReqPayTypeCb& from);

  inline stReqPayTypeCb& operator=(const stReqPayTypeCb& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqPayTypeCb& default_instance();

  void Swap(stReqPayTypeCb* other);

  // implements Message ----------------------------------------------

  stReqPayTypeCb* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqPayTypeCb& from);
  void MergeFrom(const stReqPayTypeCb& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqPayTypeCb_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqPayTypeCb_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqPayTypeCb_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqPayTypeCb_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqPayTypeCb_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqPayTypeCb_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqPayTypeCb_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqPayTypeCb_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqPayTypeCb_ProtoModID_Parse(name, value);
  }

  typedef stReqPayTypeCb_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqPayTypeCb_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqPayTypeCb_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqPayTypeCb_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqPayTypeCb_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqPayTypeCb_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqPayTypeCb_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqPayTypeCb_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqPayTypeCb_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 itemId = 2;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIdFieldNumber = 2;
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // optional string orderId = 3;
  inline bool has_orderid() const;
  inline void clear_orderid();
  static const int kOrderIdFieldNumber = 3;
  inline const ::std::string& orderid() const;
  inline void set_orderid(const ::std::string& value);
  inline void set_orderid(const char* value);
  inline void set_orderid(const char* value, size_t size);
  inline ::std::string* mutable_orderid();
  inline ::std::string* release_orderid();
  inline void set_allocated_orderid(::std::string* orderid);

  // optional string payType = 4;
  inline bool has_paytype() const;
  inline void clear_paytype();
  static const int kPayTypeFieldNumber = 4;
  inline const ::std::string& paytype() const;
  inline void set_paytype(const ::std::string& value);
  inline void set_paytype(const char* value);
  inline void set_paytype(const char* value, size_t size);
  inline ::std::string* mutable_paytype();
  inline ::std::string* release_paytype();
  inline void set_allocated_paytype(::std::string* paytype);

  // optional bool res = 5;
  inline bool has_res() const;
  inline void clear_res();
  static const int kResFieldNumber = 5;
  inline bool res() const;
  inline void set_res(bool value);

  // @@protoc_insertion_point(class_scope:Game.stReqPayTypeCb)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_orderid();
  inline void clear_has_orderid();
  inline void set_has_paytype();
  inline void clear_has_paytype();
  inline void set_has_res();
  inline void clear_has_res();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 itemid_;
  ::std::string* orderid_;
  ::std::string* paytype_;
  bool res_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Game_2eproto();
  friend void protobuf_AssignDesc_Game_2eproto();
  friend void protobuf_ShutdownFile_Game_2eproto();

  void InitAsDefaultInstance();
  static stReqPayTypeCb* default_instance_;
};
// -------------------------------------------------------------------

class stUpdateSvrOpenTime : public ::google::protobuf::Message {
 public:
  stUpdateSvrOpenTime();
  virtual ~stUpdateSvrOpenTime();

  stUpdateSvrOpenTime(const stUpdateSvrOpenTime& from);

  inline stUpdateSvrOpenTime& operator=(const stUpdateSvrOpenTime& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stUpdateSvrOpenTime& default_instance();

  void Swap(stUpdateSvrOpenTime* other);

  // implements Message ----------------------------------------------

  stUpdateSvrOpenTime* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stUpdateSvrOpenTime& from);
  void MergeFrom(const stUpdateSvrOpenTime& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stUpdateSvrOpenTime_ProtoModID ProtoModID;
  static const ProtoModID ModID = stUpdateSvrOpenTime_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stUpdateSvrOpenTime_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stUpdateSvrOpenTime_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stUpdateSvrOpenTime_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stUpdateSvrOpenTime_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stUpdateSvrOpenTime_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stUpdateSvrOpenTime_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stUpdateSvrOpenTime_ProtoModID_Parse(name, value);
  }

  typedef stUpdateSvrOpenTime_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stUpdateSvrOpenTime_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stUpdateSvrOpenTime_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stUpdateSvrOpenTime_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stUpdateSvrOpenTime_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stUpdateSvrOpenTime_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stUpdateSvrOpenTime_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stUpdateSvrOpenTime_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stUpdateSvrOpenTime_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 time = 1;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 1;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Game.stUpdateSvrOpenTime)
 private:
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Game_2eproto();
  friend void protobuf_AssignDesc_Game_2eproto();
  friend void protobuf_ShutdownFile_Game_2eproto();

  void InitAsDefaultInstance();
  static stUpdateSvrOpenTime* default_instance_;
};
// -------------------------------------------------------------------

class stAcitivityLimitPetItem : public ::google::protobuf::Message {
 public:
  stAcitivityLimitPetItem();
  virtual ~stAcitivityLimitPetItem();

  stAcitivityLimitPetItem(const stAcitivityLimitPetItem& from);

  inline stAcitivityLimitPetItem& operator=(const stAcitivityLimitPetItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stAcitivityLimitPetItem& default_instance();

  void Swap(stAcitivityLimitPetItem* other);

  // implements Message ----------------------------------------------

  stAcitivityLimitPetItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stAcitivityLimitPetItem& from);
  void MergeFrom(const stAcitivityLimitPetItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 activiyId = 2;
  inline bool has_activiyid() const;
  inline void clear_activiyid();
  static const int kActiviyIdFieldNumber = 2;
  inline ::google::protobuf::uint32 activiyid() const;
  inline void set_activiyid(::google::protobuf::uint32 value);

  // optional uint32 startTime = 3;
  inline bool has_starttime() const;
  inline void clear_starttime();
  static const int kStartTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 starttime() const;
  inline void set_starttime(::google::protobuf::uint32 value);

  // optional uint32 endTime = 4;
  inline bool has_endtime() const;
  inline void clear_endtime();
  static const int kEndTimeFieldNumber = 4;
  inline ::google::protobuf::uint32 endtime() const;
  inline void set_endtime(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Game.stAcitivityLimitPetItem)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_activiyid();
  inline void clear_has_activiyid();
  inline void set_has_starttime();
  inline void clear_has_starttime();
  inline void set_has_endtime();
  inline void clear_has_endtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 activiyid_;
  ::google::protobuf::uint32 starttime_;
  ::google::protobuf::uint32 endtime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Game_2eproto();
  friend void protobuf_AssignDesc_Game_2eproto();
  friend void protobuf_ShutdownFile_Game_2eproto();

  void InitAsDefaultInstance();
  static stAcitivityLimitPetItem* default_instance_;
};
// -------------------------------------------------------------------

class stSendLimitPetActivityData : public ::google::protobuf::Message {
 public:
  stSendLimitPetActivityData();
  virtual ~stSendLimitPetActivityData();

  stSendLimitPetActivityData(const stSendLimitPetActivityData& from);

  inline stSendLimitPetActivityData& operator=(const stSendLimitPetActivityData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSendLimitPetActivityData& default_instance();

  void Swap(stSendLimitPetActivityData* other);

  // implements Message ----------------------------------------------

  stSendLimitPetActivityData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSendLimitPetActivityData& from);
  void MergeFrom(const stSendLimitPetActivityData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stSendLimitPetActivityData_ProtoModID ProtoModID;
  static const ProtoModID ModID = stSendLimitPetActivityData_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stSendLimitPetActivityData_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stSendLimitPetActivityData_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stSendLimitPetActivityData_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stSendLimitPetActivityData_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stSendLimitPetActivityData_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stSendLimitPetActivityData_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stSendLimitPetActivityData_ProtoModID_Parse(name, value);
  }

  typedef stSendLimitPetActivityData_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stSendLimitPetActivityData_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stSendLimitPetActivityData_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stSendLimitPetActivityData_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stSendLimitPetActivityData_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stSendLimitPetActivityData_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stSendLimitPetActivityData_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stSendLimitPetActivityData_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stSendLimitPetActivityData_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string msg = 1;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 1;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  inline void set_allocated_msg(::std::string* msg);

  // repeated .Game.stAcitivityLimitPetItem item = 2;
  inline int item_size() const;
  inline void clear_item();
  static const int kItemFieldNumber = 2;
  inline const ::Game::stAcitivityLimitPetItem& item(int index) const;
  inline ::Game::stAcitivityLimitPetItem* mutable_item(int index);
  inline ::Game::stAcitivityLimitPetItem* add_item();
  inline const ::google::protobuf::RepeatedPtrField< ::Game::stAcitivityLimitPetItem >&
      item() const;
  inline ::google::protobuf::RepeatedPtrField< ::Game::stAcitivityLimitPetItem >*
      mutable_item();

  // @@protoc_insertion_point(class_scope:Game.stSendLimitPetActivityData)
 private:
  inline void set_has_msg();
  inline void clear_has_msg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msg_;
  ::google::protobuf::RepeatedPtrField< ::Game::stAcitivityLimitPetItem > item_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Game_2eproto();
  friend void protobuf_AssignDesc_Game_2eproto();
  friend void protobuf_ShutdownFile_Game_2eproto();

  void InitAsDefaultInstance();
  static stSendLimitPetActivityData* default_instance_;
};
// ===================================================================


// ===================================================================

// stLoginGame

// optional uint32 svrType = 1;
inline bool stLoginGame::has_svrtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stLoginGame::set_has_svrtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stLoginGame::clear_has_svrtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stLoginGame::clear_svrtype() {
  svrtype_ = 0u;
  clear_has_svrtype();
}
inline ::google::protobuf::uint32 stLoginGame::svrtype() const {
  return svrtype_;
}
inline void stLoginGame::set_svrtype(::google::protobuf::uint32 value) {
  set_has_svrtype();
  svrtype_ = value;
}

// optional uint32 svrID = 2;
inline bool stLoginGame::has_svrid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stLoginGame::set_has_svrid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stLoginGame::clear_has_svrid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stLoginGame::clear_svrid() {
  svrid_ = 0u;
  clear_has_svrid();
}
inline ::google::protobuf::uint32 stLoginGame::svrid() const {
  return svrid_;
}
inline void stLoginGame::set_svrid(::google::protobuf::uint32 value) {
  set_has_svrid();
  svrid_ = value;
}

// optional string ip = 3;
inline bool stLoginGame::has_ip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stLoginGame::set_has_ip() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stLoginGame::clear_has_ip() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stLoginGame::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& stLoginGame::ip() const {
  return *ip_;
}
inline void stLoginGame::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void stLoginGame::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void stLoginGame::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stLoginGame::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* stLoginGame::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stLoginGame::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 port = 4;
inline bool stLoginGame::has_port() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stLoginGame::set_has_port() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stLoginGame::clear_has_port() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stLoginGame::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 stLoginGame::port() const {
  return port_;
}
inline void stLoginGame::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
}

// -------------------------------------------------------------------

// stGateForwardGame

// optional uint32 charID = 1;
inline bool stGateForwardGame::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stGateForwardGame::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stGateForwardGame::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stGateForwardGame::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stGateForwardGame::charid() const {
  return charid_;
}
inline void stGateForwardGame::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 modID = 2;
inline bool stGateForwardGame::has_modid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stGateForwardGame::set_has_modid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stGateForwardGame::clear_has_modid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stGateForwardGame::clear_modid() {
  modid_ = 0u;
  clear_has_modid();
}
inline ::google::protobuf::uint32 stGateForwardGame::modid() const {
  return modid_;
}
inline void stGateForwardGame::set_modid(::google::protobuf::uint32 value) {
  set_has_modid();
  modid_ = value;
}

// optional uint32 funID = 3;
inline bool stGateForwardGame::has_funid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stGateForwardGame::set_has_funid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stGateForwardGame::clear_has_funid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stGateForwardGame::clear_funid() {
  funid_ = 0u;
  clear_has_funid();
}
inline ::google::protobuf::uint32 stGateForwardGame::funid() const {
  return funid_;
}
inline void stGateForwardGame::set_funid(::google::protobuf::uint32 value) {
  set_has_funid();
  funid_ = value;
}

// optional uint32 cmdLen = 4;
inline bool stGateForwardGame::has_cmdlen() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stGateForwardGame::set_has_cmdlen() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stGateForwardGame::clear_has_cmdlen() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stGateForwardGame::clear_cmdlen() {
  cmdlen_ = 0u;
  clear_has_cmdlen();
}
inline ::google::protobuf::uint32 stGateForwardGame::cmdlen() const {
  return cmdlen_;
}
inline void stGateForwardGame::set_cmdlen(::google::protobuf::uint32 value) {
  set_has_cmdlen();
  cmdlen_ = value;
}

// optional bytes data = 5;
inline bool stGateForwardGame::has_data() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stGateForwardGame::set_has_data() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stGateForwardGame::clear_has_data() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stGateForwardGame::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& stGateForwardGame::data() const {
  return *data_;
}
inline void stGateForwardGame::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void stGateForwardGame::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void stGateForwardGame::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stGateForwardGame::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* stGateForwardGame::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stGateForwardGame::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// stGameForwardGate

// optional uint32 charID = 1;
inline bool stGameForwardGate::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stGameForwardGate::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stGameForwardGate::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stGameForwardGate::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stGameForwardGate::charid() const {
  return charid_;
}
inline void stGameForwardGate::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 modID = 2;
inline bool stGameForwardGate::has_modid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stGameForwardGate::set_has_modid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stGameForwardGate::clear_has_modid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stGameForwardGate::clear_modid() {
  modid_ = 0u;
  clear_has_modid();
}
inline ::google::protobuf::uint32 stGameForwardGate::modid() const {
  return modid_;
}
inline void stGameForwardGate::set_modid(::google::protobuf::uint32 value) {
  set_has_modid();
  modid_ = value;
}

// optional uint32 funID = 3;
inline bool stGameForwardGate::has_funid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stGameForwardGate::set_has_funid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stGameForwardGate::clear_has_funid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stGameForwardGate::clear_funid() {
  funid_ = 0u;
  clear_has_funid();
}
inline ::google::protobuf::uint32 stGameForwardGate::funid() const {
  return funid_;
}
inline void stGameForwardGate::set_funid(::google::protobuf::uint32 value) {
  set_has_funid();
  funid_ = value;
}

// optional uint32 cmdLen = 4;
inline bool stGameForwardGate::has_cmdlen() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stGameForwardGate::set_has_cmdlen() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stGameForwardGate::clear_has_cmdlen() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stGameForwardGate::clear_cmdlen() {
  cmdlen_ = 0u;
  clear_has_cmdlen();
}
inline ::google::protobuf::uint32 stGameForwardGate::cmdlen() const {
  return cmdlen_;
}
inline void stGameForwardGate::set_cmdlen(::google::protobuf::uint32 value) {
  set_has_cmdlen();
  cmdlen_ = value;
}

// optional bytes data = 5;
inline bool stGameForwardGate::has_data() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stGameForwardGate::set_has_data() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stGameForwardGate::clear_has_data() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stGameForwardGate::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& stGameForwardGate::data() const {
  return *data_;
}
inline void stGameForwardGate::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void stGameForwardGate::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void stGameForwardGate::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stGameForwardGate::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* stGameForwardGate::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stGameForwardGate::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// stKillOutUser

// optional uint32 charID = 1;
inline bool stKillOutUser::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stKillOutUser::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stKillOutUser::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stKillOutUser::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stKillOutUser::charid() const {
  return charid_;
}
inline void stKillOutUser::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stBroadbastProto2World

// optional uint32 modID = 1;
inline bool stBroadbastProto2World::has_modid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stBroadbastProto2World::set_has_modid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stBroadbastProto2World::clear_has_modid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stBroadbastProto2World::clear_modid() {
  modid_ = 0u;
  clear_has_modid();
}
inline ::google::protobuf::uint32 stBroadbastProto2World::modid() const {
  return modid_;
}
inline void stBroadbastProto2World::set_modid(::google::protobuf::uint32 value) {
  set_has_modid();
  modid_ = value;
}

// optional uint32 funID = 2;
inline bool stBroadbastProto2World::has_funid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stBroadbastProto2World::set_has_funid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stBroadbastProto2World::clear_has_funid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stBroadbastProto2World::clear_funid() {
  funid_ = 0u;
  clear_has_funid();
}
inline ::google::protobuf::uint32 stBroadbastProto2World::funid() const {
  return funid_;
}
inline void stBroadbastProto2World::set_funid(::google::protobuf::uint32 value) {
  set_has_funid();
  funid_ = value;
}

// optional uint32 cmdLen = 3;
inline bool stBroadbastProto2World::has_cmdlen() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stBroadbastProto2World::set_has_cmdlen() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stBroadbastProto2World::clear_has_cmdlen() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stBroadbastProto2World::clear_cmdlen() {
  cmdlen_ = 0u;
  clear_has_cmdlen();
}
inline ::google::protobuf::uint32 stBroadbastProto2World::cmdlen() const {
  return cmdlen_;
}
inline void stBroadbastProto2World::set_cmdlen(::google::protobuf::uint32 value) {
  set_has_cmdlen();
  cmdlen_ = value;
}

// optional bytes data = 4;
inline bool stBroadbastProto2World::has_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stBroadbastProto2World::set_has_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stBroadbastProto2World::clear_has_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stBroadbastProto2World::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& stBroadbastProto2World::data() const {
  return *data_;
}
inline void stBroadbastProto2World::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void stBroadbastProto2World::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void stBroadbastProto2World::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stBroadbastProto2World::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* stBroadbastProto2World::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stBroadbastProto2World::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// stUserLoginGameResult

// optional string account = 1;
inline bool stUserLoginGameResult::has_account() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stUserLoginGameResult::set_has_account() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stUserLoginGameResult::clear_has_account() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stUserLoginGameResult::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& stUserLoginGameResult::account() const {
  return *account_;
}
inline void stUserLoginGameResult::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void stUserLoginGameResult::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void stUserLoginGameResult::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stUserLoginGameResult::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* stUserLoginGameResult::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stUserLoginGameResult::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 accountID = 2;
inline bool stUserLoginGameResult::has_accountid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stUserLoginGameResult::set_has_accountid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stUserLoginGameResult::clear_has_accountid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stUserLoginGameResult::clear_accountid() {
  accountid_ = 0u;
  clear_has_accountid();
}
inline ::google::protobuf::uint32 stUserLoginGameResult::accountid() const {
  return accountid_;
}
inline void stUserLoginGameResult::set_accountid(::google::protobuf::uint32 value) {
  set_has_accountid();
  accountid_ = value;
}

// optional uint32 charID = 3;
inline bool stUserLoginGameResult::has_charid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stUserLoginGameResult::set_has_charid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stUserLoginGameResult::clear_has_charid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stUserLoginGameResult::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stUserLoginGameResult::charid() const {
  return charid_;
}
inline void stUserLoginGameResult::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 gameID = 4;
inline bool stUserLoginGameResult::has_gameid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stUserLoginGameResult::set_has_gameid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stUserLoginGameResult::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stUserLoginGameResult::clear_gameid() {
  gameid_ = 0u;
  clear_has_gameid();
}
inline ::google::protobuf::uint32 stUserLoginGameResult::gameid() const {
  return gameid_;
}
inline void stUserLoginGameResult::set_gameid(::google::protobuf::uint32 value) {
  set_has_gameid();
  gameid_ = value;
}

// optional uint32 ret = 5;
inline bool stUserLoginGameResult::has_ret() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stUserLoginGameResult::set_has_ret() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stUserLoginGameResult::clear_has_ret() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stUserLoginGameResult::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 stUserLoginGameResult::ret() const {
  return ret_;
}
inline void stUserLoginGameResult::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// optional .Game.eLoginGameResultType type = 6;
inline bool stUserLoginGameResult::has_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stUserLoginGameResult::set_has_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stUserLoginGameResult::clear_has_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stUserLoginGameResult::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::Game::eLoginGameResultType stUserLoginGameResult::type() const {
  return static_cast< ::Game::eLoginGameResultType >(type_);
}
inline void stUserLoginGameResult::set_type(::Game::eLoginGameResultType value) {
  assert(::Game::eLoginGameResultType_IsValid(value));
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// stBroadcastProto2UserList

// repeated uint32 userList = 1;
inline int stBroadcastProto2UserList::userlist_size() const {
  return userlist_.size();
}
inline void stBroadcastProto2UserList::clear_userlist() {
  userlist_.Clear();
}
inline ::google::protobuf::uint32 stBroadcastProto2UserList::userlist(int index) const {
  return userlist_.Get(index);
}
inline void stBroadcastProto2UserList::set_userlist(int index, ::google::protobuf::uint32 value) {
  userlist_.Set(index, value);
}
inline void stBroadcastProto2UserList::add_userlist(::google::protobuf::uint32 value) {
  userlist_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
stBroadcastProto2UserList::userlist() const {
  return userlist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
stBroadcastProto2UserList::mutable_userlist() {
  return &userlist_;
}

// optional uint32 modID = 2;
inline bool stBroadcastProto2UserList::has_modid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stBroadcastProto2UserList::set_has_modid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stBroadcastProto2UserList::clear_has_modid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stBroadcastProto2UserList::clear_modid() {
  modid_ = 0u;
  clear_has_modid();
}
inline ::google::protobuf::uint32 stBroadcastProto2UserList::modid() const {
  return modid_;
}
inline void stBroadcastProto2UserList::set_modid(::google::protobuf::uint32 value) {
  set_has_modid();
  modid_ = value;
}

// optional uint32 funID = 3;
inline bool stBroadcastProto2UserList::has_funid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stBroadcastProto2UserList::set_has_funid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stBroadcastProto2UserList::clear_has_funid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stBroadcastProto2UserList::clear_funid() {
  funid_ = 0u;
  clear_has_funid();
}
inline ::google::protobuf::uint32 stBroadcastProto2UserList::funid() const {
  return funid_;
}
inline void stBroadcastProto2UserList::set_funid(::google::protobuf::uint32 value) {
  set_has_funid();
  funid_ = value;
}

// optional uint32 cmdLen = 4;
inline bool stBroadcastProto2UserList::has_cmdlen() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stBroadcastProto2UserList::set_has_cmdlen() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stBroadcastProto2UserList::clear_has_cmdlen() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stBroadcastProto2UserList::clear_cmdlen() {
  cmdlen_ = 0u;
  clear_has_cmdlen();
}
inline ::google::protobuf::uint32 stBroadcastProto2UserList::cmdlen() const {
  return cmdlen_;
}
inline void stBroadcastProto2UserList::set_cmdlen(::google::protobuf::uint32 value) {
  set_has_cmdlen();
  cmdlen_ = value;
}

// optional bytes data = 5;
inline bool stBroadcastProto2UserList::has_data() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stBroadcastProto2UserList::set_has_data() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stBroadcastProto2UserList::clear_has_data() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stBroadcastProto2UserList::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& stBroadcastProto2UserList::data() const {
  return *data_;
}
inline void stBroadcastProto2UserList::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void stBroadcastProto2UserList::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void stBroadcastProto2UserList::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stBroadcastProto2UserList::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* stBroadcastProto2UserList::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stBroadcastProto2UserList::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// stNotifyLevelUp

// optional uint32 charID = 1;
inline bool stNotifyLevelUp::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stNotifyLevelUp::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stNotifyLevelUp::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stNotifyLevelUp::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stNotifyLevelUp::charid() const {
  return charid_;
}
inline void stNotifyLevelUp::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 level = 2;
inline bool stNotifyLevelUp::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stNotifyLevelUp::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stNotifyLevelUp::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stNotifyLevelUp::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 stNotifyLevelUp::level() const {
  return level_;
}
inline void stNotifyLevelUp::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// -------------------------------------------------------------------

// stUserLevelupLog

// optional uint32 charID = 1;
inline bool stUserLevelupLog::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stUserLevelupLog::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stUserLevelupLog::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stUserLevelupLog::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stUserLevelupLog::charid() const {
  return charid_;
}
inline void stUserLevelupLog::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional string account = 2;
inline bool stUserLevelupLog::has_account() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stUserLevelupLog::set_has_account() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stUserLevelupLog::clear_has_account() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stUserLevelupLog::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& stUserLevelupLog::account() const {
  return *account_;
}
inline void stUserLevelupLog::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void stUserLevelupLog::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void stUserLevelupLog::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stUserLevelupLog::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* stUserLevelupLog::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stUserLevelupLog::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string name = 3;
inline bool stUserLevelupLog::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stUserLevelupLog::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stUserLevelupLog::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stUserLevelupLog::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& stUserLevelupLog::name() const {
  return *name_;
}
inline void stUserLevelupLog::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stUserLevelupLog::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stUserLevelupLog::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stUserLevelupLog::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* stUserLevelupLog::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stUserLevelupLog::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 oldExp = 4;
inline bool stUserLevelupLog::has_oldexp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stUserLevelupLog::set_has_oldexp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stUserLevelupLog::clear_has_oldexp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stUserLevelupLog::clear_oldexp() {
  oldexp_ = 0u;
  clear_has_oldexp();
}
inline ::google::protobuf::uint32 stUserLevelupLog::oldexp() const {
  return oldexp_;
}
inline void stUserLevelupLog::set_oldexp(::google::protobuf::uint32 value) {
  set_has_oldexp();
  oldexp_ = value;
}

// optional uint32 newExp = 5;
inline bool stUserLevelupLog::has_newexp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stUserLevelupLog::set_has_newexp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stUserLevelupLog::clear_has_newexp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stUserLevelupLog::clear_newexp() {
  newexp_ = 0u;
  clear_has_newexp();
}
inline ::google::protobuf::uint32 stUserLevelupLog::newexp() const {
  return newexp_;
}
inline void stUserLevelupLog::set_newexp(::google::protobuf::uint32 value) {
  set_has_newexp();
  newexp_ = value;
}

// optional uint32 oldLv = 6;
inline bool stUserLevelupLog::has_oldlv() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stUserLevelupLog::set_has_oldlv() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stUserLevelupLog::clear_has_oldlv() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stUserLevelupLog::clear_oldlv() {
  oldlv_ = 0u;
  clear_has_oldlv();
}
inline ::google::protobuf::uint32 stUserLevelupLog::oldlv() const {
  return oldlv_;
}
inline void stUserLevelupLog::set_oldlv(::google::protobuf::uint32 value) {
  set_has_oldlv();
  oldlv_ = value;
}

// optional uint32 newLv = 7;
inline bool stUserLevelupLog::has_newlv() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void stUserLevelupLog::set_has_newlv() {
  _has_bits_[0] |= 0x00000040u;
}
inline void stUserLevelupLog::clear_has_newlv() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void stUserLevelupLog::clear_newlv() {
  newlv_ = 0u;
  clear_has_newlv();
}
inline ::google::protobuf::uint32 stUserLevelupLog::newlv() const {
  return newlv_;
}
inline void stUserLevelupLog::set_newlv(::google::protobuf::uint32 value) {
  set_has_newlv();
  newlv_ = value;
}

// -------------------------------------------------------------------

// stUserLoginLog

// optional uint32 charID = 1;
inline bool stUserLoginLog::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stUserLoginLog::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stUserLoginLog::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stUserLoginLog::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stUserLoginLog::charid() const {
  return charid_;
}
inline void stUserLoginLog::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional string account = 2;
inline bool stUserLoginLog::has_account() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stUserLoginLog::set_has_account() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stUserLoginLog::clear_has_account() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stUserLoginLog::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& stUserLoginLog::account() const {
  return *account_;
}
inline void stUserLoginLog::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void stUserLoginLog::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void stUserLoginLog::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stUserLoginLog::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* stUserLoginLog::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stUserLoginLog::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string name = 3;
inline bool stUserLoginLog::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stUserLoginLog::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stUserLoginLog::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stUserLoginLog::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& stUserLoginLog::name() const {
  return *name_;
}
inline void stUserLoginLog::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stUserLoginLog::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stUserLoginLog::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stUserLoginLog::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* stUserLoginLog::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stUserLoginLog::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string ip = 4;
inline bool stUserLoginLog::has_ip() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stUserLoginLog::set_has_ip() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stUserLoginLog::clear_has_ip() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stUserLoginLog::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& stUserLoginLog::ip() const {
  return *ip_;
}
inline void stUserLoginLog::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void stUserLoginLog::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void stUserLoginLog::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stUserLoginLog::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* stUserLoginLog::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stUserLoginLog::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 isAdvUser = 5;
inline bool stUserLoginLog::has_isadvuser() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stUserLoginLog::set_has_isadvuser() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stUserLoginLog::clear_has_isadvuser() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stUserLoginLog::clear_isadvuser() {
  isadvuser_ = 0u;
  clear_has_isadvuser();
}
inline ::google::protobuf::uint32 stUserLoginLog::isadvuser() const {
  return isadvuser_;
}
inline void stUserLoginLog::set_isadvuser(::google::protobuf::uint32 value) {
  set_has_isadvuser();
  isadvuser_ = value;
}

// optional uint32 opID = 6;
inline bool stUserLoginLog::has_opid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stUserLoginLog::set_has_opid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stUserLoginLog::clear_has_opid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stUserLoginLog::clear_opid() {
  opid_ = 0u;
  clear_has_opid();
}
inline ::google::protobuf::uint32 stUserLoginLog::opid() const {
  return opid_;
}
inline void stUserLoginLog::set_opid(::google::protobuf::uint32 value) {
  set_has_opid();
  opid_ = value;
}

// optional string createTime = 7;
inline bool stUserLoginLog::has_createtime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void stUserLoginLog::set_has_createtime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void stUserLoginLog::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void stUserLoginLog::clear_createtime() {
  if (createtime_ != &::google::protobuf::internal::kEmptyString) {
    createtime_->clear();
  }
  clear_has_createtime();
}
inline const ::std::string& stUserLoginLog::createtime() const {
  return *createtime_;
}
inline void stUserLoginLog::set_createtime(const ::std::string& value) {
  set_has_createtime();
  if (createtime_ == &::google::protobuf::internal::kEmptyString) {
    createtime_ = new ::std::string;
  }
  createtime_->assign(value);
}
inline void stUserLoginLog::set_createtime(const char* value) {
  set_has_createtime();
  if (createtime_ == &::google::protobuf::internal::kEmptyString) {
    createtime_ = new ::std::string;
  }
  createtime_->assign(value);
}
inline void stUserLoginLog::set_createtime(const char* value, size_t size) {
  set_has_createtime();
  if (createtime_ == &::google::protobuf::internal::kEmptyString) {
    createtime_ = new ::std::string;
  }
  createtime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stUserLoginLog::mutable_createtime() {
  set_has_createtime();
  if (createtime_ == &::google::protobuf::internal::kEmptyString) {
    createtime_ = new ::std::string;
  }
  return createtime_;
}
inline ::std::string* stUserLoginLog::release_createtime() {
  clear_has_createtime();
  if (createtime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = createtime_;
    createtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stUserLoginLog::set_allocated_createtime(::std::string* createtime) {
  if (createtime_ != &::google::protobuf::internal::kEmptyString) {
    delete createtime_;
  }
  if (createtime) {
    set_has_createtime();
    createtime_ = createtime;
  } else {
    clear_has_createtime();
    createtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string deviceID = 8;
inline bool stUserLoginLog::has_deviceid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void stUserLoginLog::set_has_deviceid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void stUserLoginLog::clear_has_deviceid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void stUserLoginLog::clear_deviceid() {
  if (deviceid_ != &::google::protobuf::internal::kEmptyString) {
    deviceid_->clear();
  }
  clear_has_deviceid();
}
inline const ::std::string& stUserLoginLog::deviceid() const {
  return *deviceid_;
}
inline void stUserLoginLog::set_deviceid(const ::std::string& value) {
  set_has_deviceid();
  if (deviceid_ == &::google::protobuf::internal::kEmptyString) {
    deviceid_ = new ::std::string;
  }
  deviceid_->assign(value);
}
inline void stUserLoginLog::set_deviceid(const char* value) {
  set_has_deviceid();
  if (deviceid_ == &::google::protobuf::internal::kEmptyString) {
    deviceid_ = new ::std::string;
  }
  deviceid_->assign(value);
}
inline void stUserLoginLog::set_deviceid(const char* value, size_t size) {
  set_has_deviceid();
  if (deviceid_ == &::google::protobuf::internal::kEmptyString) {
    deviceid_ = new ::std::string;
  }
  deviceid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stUserLoginLog::mutable_deviceid() {
  set_has_deviceid();
  if (deviceid_ == &::google::protobuf::internal::kEmptyString) {
    deviceid_ = new ::std::string;
  }
  return deviceid_;
}
inline ::std::string* stUserLoginLog::release_deviceid() {
  clear_has_deviceid();
  if (deviceid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = deviceid_;
    deviceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stUserLoginLog::set_allocated_deviceid(::std::string* deviceid) {
  if (deviceid_ != &::google::protobuf::internal::kEmptyString) {
    delete deviceid_;
  }
  if (deviceid) {
    set_has_deviceid();
    deviceid_ = deviceid;
  } else {
    clear_has_deviceid();
    deviceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool isEnterSelectLog = 9;
inline bool stUserLoginLog::has_isenterselectlog() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void stUserLoginLog::set_has_isenterselectlog() {
  _has_bits_[0] |= 0x00000100u;
}
inline void stUserLoginLog::clear_has_isenterselectlog() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void stUserLoginLog::clear_isenterselectlog() {
  isenterselectlog_ = false;
  clear_has_isenterselectlog();
}
inline bool stUserLoginLog::isenterselectlog() const {
  return isenterselectlog_;
}
inline void stUserLoginLog::set_isenterselectlog(bool value) {
  set_has_isenterselectlog();
  isenterselectlog_ = value;
}

// -------------------------------------------------------------------

// stVipLevelupLog

// optional uint32 charID = 1;
inline bool stVipLevelupLog::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stVipLevelupLog::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stVipLevelupLog::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stVipLevelupLog::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stVipLevelupLog::charid() const {
  return charid_;
}
inline void stVipLevelupLog::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional string account = 2;
inline bool stVipLevelupLog::has_account() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stVipLevelupLog::set_has_account() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stVipLevelupLog::clear_has_account() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stVipLevelupLog::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& stVipLevelupLog::account() const {
  return *account_;
}
inline void stVipLevelupLog::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void stVipLevelupLog::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void stVipLevelupLog::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stVipLevelupLog::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* stVipLevelupLog::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stVipLevelupLog::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string name = 3;
inline bool stVipLevelupLog::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stVipLevelupLog::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stVipLevelupLog::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stVipLevelupLog::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& stVipLevelupLog::name() const {
  return *name_;
}
inline void stVipLevelupLog::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stVipLevelupLog::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stVipLevelupLog::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stVipLevelupLog::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* stVipLevelupLog::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stVipLevelupLog::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 oldExp = 4;
inline bool stVipLevelupLog::has_oldexp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stVipLevelupLog::set_has_oldexp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stVipLevelupLog::clear_has_oldexp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stVipLevelupLog::clear_oldexp() {
  oldexp_ = 0u;
  clear_has_oldexp();
}
inline ::google::protobuf::uint32 stVipLevelupLog::oldexp() const {
  return oldexp_;
}
inline void stVipLevelupLog::set_oldexp(::google::protobuf::uint32 value) {
  set_has_oldexp();
  oldexp_ = value;
}

// optional uint32 newExp = 5;
inline bool stVipLevelupLog::has_newexp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stVipLevelupLog::set_has_newexp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stVipLevelupLog::clear_has_newexp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stVipLevelupLog::clear_newexp() {
  newexp_ = 0u;
  clear_has_newexp();
}
inline ::google::protobuf::uint32 stVipLevelupLog::newexp() const {
  return newexp_;
}
inline void stVipLevelupLog::set_newexp(::google::protobuf::uint32 value) {
  set_has_newexp();
  newexp_ = value;
}

// optional uint32 addDiamond = 6;
inline bool stVipLevelupLog::has_adddiamond() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stVipLevelupLog::set_has_adddiamond() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stVipLevelupLog::clear_has_adddiamond() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stVipLevelupLog::clear_adddiamond() {
  adddiamond_ = 0u;
  clear_has_adddiamond();
}
inline ::google::protobuf::uint32 stVipLevelupLog::adddiamond() const {
  return adddiamond_;
}
inline void stVipLevelupLog::set_adddiamond(::google::protobuf::uint32 value) {
  set_has_adddiamond();
  adddiamond_ = value;
}

// -------------------------------------------------------------------

// stHonourChgLog

// optional uint32 charID = 1;
inline bool stHonourChgLog::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stHonourChgLog::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stHonourChgLog::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stHonourChgLog::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stHonourChgLog::charid() const {
  return charid_;
}
inline void stHonourChgLog::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional string account = 2;
inline bool stHonourChgLog::has_account() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stHonourChgLog::set_has_account() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stHonourChgLog::clear_has_account() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stHonourChgLog::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& stHonourChgLog::account() const {
  return *account_;
}
inline void stHonourChgLog::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void stHonourChgLog::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void stHonourChgLog::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stHonourChgLog::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* stHonourChgLog::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stHonourChgLog::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string name = 3;
inline bool stHonourChgLog::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stHonourChgLog::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stHonourChgLog::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stHonourChgLog::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& stHonourChgLog::name() const {
  return *name_;
}
inline void stHonourChgLog::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stHonourChgLog::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stHonourChgLog::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stHonourChgLog::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* stHonourChgLog::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stHonourChgLog::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 oldHonour = 4;
inline bool stHonourChgLog::has_oldhonour() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stHonourChgLog::set_has_oldhonour() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stHonourChgLog::clear_has_oldhonour() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stHonourChgLog::clear_oldhonour() {
  oldhonour_ = 0u;
  clear_has_oldhonour();
}
inline ::google::protobuf::uint32 stHonourChgLog::oldhonour() const {
  return oldhonour_;
}
inline void stHonourChgLog::set_oldhonour(::google::protobuf::uint32 value) {
  set_has_oldhonour();
  oldhonour_ = value;
}

// optional uint32 newHonour = 5;
inline bool stHonourChgLog::has_newhonour() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stHonourChgLog::set_has_newhonour() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stHonourChgLog::clear_has_newhonour() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stHonourChgLog::clear_newhonour() {
  newhonour_ = 0u;
  clear_has_newhonour();
}
inline ::google::protobuf::uint32 stHonourChgLog::newhonour() const {
  return newhonour_;
}
inline void stHonourChgLog::set_newhonour(::google::protobuf::uint32 value) {
  set_has_newhonour();
  newhonour_ = value;
}

// optional string reason = 6;
inline bool stHonourChgLog::has_reason() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stHonourChgLog::set_has_reason() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stHonourChgLog::clear_has_reason() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stHonourChgLog::clear_reason() {
  if (reason_ != &::google::protobuf::internal::kEmptyString) {
    reason_->clear();
  }
  clear_has_reason();
}
inline const ::std::string& stHonourChgLog::reason() const {
  return *reason_;
}
inline void stHonourChgLog::set_reason(const ::std::string& value) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    reason_ = new ::std::string;
  }
  reason_->assign(value);
}
inline void stHonourChgLog::set_reason(const char* value) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    reason_ = new ::std::string;
  }
  reason_->assign(value);
}
inline void stHonourChgLog::set_reason(const char* value, size_t size) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    reason_ = new ::std::string;
  }
  reason_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stHonourChgLog::mutable_reason() {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    reason_ = new ::std::string;
  }
  return reason_;
}
inline ::std::string* stHonourChgLog::release_reason() {
  clear_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = reason_;
    reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stHonourChgLog::set_allocated_reason(::std::string* reason) {
  if (reason_ != &::google::protobuf::internal::kEmptyString) {
    delete reason_;
  }
  if (reason) {
    set_has_reason();
    reason_ = reason;
  } else {
    clear_has_reason();
    reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// stItemChgLog

// optional uint32 charID = 1;
inline bool stItemChgLog::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stItemChgLog::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stItemChgLog::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stItemChgLog::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stItemChgLog::charid() const {
  return charid_;
}
inline void stItemChgLog::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional string account = 2;
inline bool stItemChgLog::has_account() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stItemChgLog::set_has_account() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stItemChgLog::clear_has_account() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stItemChgLog::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& stItemChgLog::account() const {
  return *account_;
}
inline void stItemChgLog::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void stItemChgLog::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void stItemChgLog::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stItemChgLog::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* stItemChgLog::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stItemChgLog::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string name = 3;
inline bool stItemChgLog::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stItemChgLog::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stItemChgLog::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stItemChgLog::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& stItemChgLog::name() const {
  return *name_;
}
inline void stItemChgLog::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stItemChgLog::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stItemChgLog::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stItemChgLog::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* stItemChgLog::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stItemChgLog::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 itemID = 4;
inline bool stItemChgLog::has_itemid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stItemChgLog::set_has_itemid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stItemChgLog::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stItemChgLog::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 stItemChgLog::itemid() const {
  return itemid_;
}
inline void stItemChgLog::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
}

// optional uint32 num = 5;
inline bool stItemChgLog::has_num() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stItemChgLog::set_has_num() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stItemChgLog::clear_has_num() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stItemChgLog::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 stItemChgLog::num() const {
  return num_;
}
inline void stItemChgLog::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
}

// optional string reason = 6;
inline bool stItemChgLog::has_reason() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stItemChgLog::set_has_reason() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stItemChgLog::clear_has_reason() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stItemChgLog::clear_reason() {
  if (reason_ != &::google::protobuf::internal::kEmptyString) {
    reason_->clear();
  }
  clear_has_reason();
}
inline const ::std::string& stItemChgLog::reason() const {
  return *reason_;
}
inline void stItemChgLog::set_reason(const ::std::string& value) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    reason_ = new ::std::string;
  }
  reason_->assign(value);
}
inline void stItemChgLog::set_reason(const char* value) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    reason_ = new ::std::string;
  }
  reason_->assign(value);
}
inline void stItemChgLog::set_reason(const char* value, size_t size) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    reason_ = new ::std::string;
  }
  reason_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stItemChgLog::mutable_reason() {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    reason_ = new ::std::string;
  }
  return reason_;
}
inline ::std::string* stItemChgLog::release_reason() {
  clear_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = reason_;
    reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stItemChgLog::set_allocated_reason(::std::string* reason) {
  if (reason_ != &::google::protobuf::internal::kEmptyString) {
    delete reason_;
  }
  if (reason) {
    set_has_reason();
    reason_ = reason;
  } else {
    clear_has_reason();
    reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 userLv = 7;
inline bool stItemChgLog::has_userlv() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void stItemChgLog::set_has_userlv() {
  _has_bits_[0] |= 0x00000040u;
}
inline void stItemChgLog::clear_has_userlv() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void stItemChgLog::clear_userlv() {
  userlv_ = 0u;
  clear_has_userlv();
}
inline ::google::protobuf::uint32 stItemChgLog::userlv() const {
  return userlv_;
}
inline void stItemChgLog::set_userlv(::google::protobuf::uint32 value) {
  set_has_userlv();
  userlv_ = value;
}

// optional uint32 vipLv = 8;
inline bool stItemChgLog::has_viplv() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void stItemChgLog::set_has_viplv() {
  _has_bits_[0] |= 0x00000080u;
}
inline void stItemChgLog::clear_has_viplv() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void stItemChgLog::clear_viplv() {
  viplv_ = 0u;
  clear_has_viplv();
}
inline ::google::protobuf::uint32 stItemChgLog::viplv() const {
  return viplv_;
}
inline void stItemChgLog::set_viplv(::google::protobuf::uint32 value) {
  set_has_viplv();
  viplv_ = value;
}

// optional bool isAdd = 9;
inline bool stItemChgLog::has_isadd() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void stItemChgLog::set_has_isadd() {
  _has_bits_[0] |= 0x00000100u;
}
inline void stItemChgLog::clear_has_isadd() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void stItemChgLog::clear_isadd() {
  isadd_ = false;
  clear_has_isadd();
}
inline bool stItemChgLog::isadd() const {
  return isadd_;
}
inline void stItemChgLog::set_isadd(bool value) {
  set_has_isadd();
  isadd_ = value;
}

// optional uint32 raiseLv = 10;
inline bool stItemChgLog::has_raiselv() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void stItemChgLog::set_has_raiselv() {
  _has_bits_[0] |= 0x00000200u;
}
inline void stItemChgLog::clear_has_raiselv() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void stItemChgLog::clear_raiselv() {
  raiselv_ = 0u;
  clear_has_raiselv();
}
inline ::google::protobuf::uint32 stItemChgLog::raiselv() const {
  return raiselv_;
}
inline void stItemChgLog::set_raiselv(::google::protobuf::uint32 value) {
  set_has_raiselv();
  raiselv_ = value;
}

// optional uint32 refineLv = 11;
inline bool stItemChgLog::has_refinelv() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void stItemChgLog::set_has_refinelv() {
  _has_bits_[0] |= 0x00000400u;
}
inline void stItemChgLog::clear_has_refinelv() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void stItemChgLog::clear_refinelv() {
  refinelv_ = 0u;
  clear_has_refinelv();
}
inline ::google::protobuf::uint32 stItemChgLog::refinelv() const {
  return refinelv_;
}
inline void stItemChgLog::set_refinelv(::google::protobuf::uint32 value) {
  set_has_refinelv();
  refinelv_ = value;
}

// -------------------------------------------------------------------

// stResourceChgLog

// optional uint32 charID = 1;
inline bool stResourceChgLog::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stResourceChgLog::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stResourceChgLog::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stResourceChgLog::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stResourceChgLog::charid() const {
  return charid_;
}
inline void stResourceChgLog::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional string account = 2;
inline bool stResourceChgLog::has_account() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stResourceChgLog::set_has_account() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stResourceChgLog::clear_has_account() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stResourceChgLog::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& stResourceChgLog::account() const {
  return *account_;
}
inline void stResourceChgLog::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void stResourceChgLog::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void stResourceChgLog::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stResourceChgLog::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* stResourceChgLog::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stResourceChgLog::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string name = 3;
inline bool stResourceChgLog::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stResourceChgLog::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stResourceChgLog::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stResourceChgLog::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& stResourceChgLog::name() const {
  return *name_;
}
inline void stResourceChgLog::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stResourceChgLog::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stResourceChgLog::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stResourceChgLog::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* stResourceChgLog::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stResourceChgLog::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 resID = 4;
inline bool stResourceChgLog::has_resid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stResourceChgLog::set_has_resid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stResourceChgLog::clear_has_resid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stResourceChgLog::clear_resid() {
  resid_ = 0u;
  clear_has_resid();
}
inline ::google::protobuf::uint32 stResourceChgLog::resid() const {
  return resid_;
}
inline void stResourceChgLog::set_resid(::google::protobuf::uint32 value) {
  set_has_resid();
  resid_ = value;
}

// optional uint32 addNum = 5;
inline bool stResourceChgLog::has_addnum() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stResourceChgLog::set_has_addnum() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stResourceChgLog::clear_has_addnum() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stResourceChgLog::clear_addnum() {
  addnum_ = 0u;
  clear_has_addnum();
}
inline ::google::protobuf::uint32 stResourceChgLog::addnum() const {
  return addnum_;
}
inline void stResourceChgLog::set_addnum(::google::protobuf::uint32 value) {
  set_has_addnum();
  addnum_ = value;
}

// optional uint32 oldValue = 6;
inline bool stResourceChgLog::has_oldvalue() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stResourceChgLog::set_has_oldvalue() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stResourceChgLog::clear_has_oldvalue() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stResourceChgLog::clear_oldvalue() {
  oldvalue_ = 0u;
  clear_has_oldvalue();
}
inline ::google::protobuf::uint32 stResourceChgLog::oldvalue() const {
  return oldvalue_;
}
inline void stResourceChgLog::set_oldvalue(::google::protobuf::uint32 value) {
  set_has_oldvalue();
  oldvalue_ = value;
}

// optional uint32 newValue = 7;
inline bool stResourceChgLog::has_newvalue() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void stResourceChgLog::set_has_newvalue() {
  _has_bits_[0] |= 0x00000040u;
}
inline void stResourceChgLog::clear_has_newvalue() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void stResourceChgLog::clear_newvalue() {
  newvalue_ = 0u;
  clear_has_newvalue();
}
inline ::google::protobuf::uint32 stResourceChgLog::newvalue() const {
  return newvalue_;
}
inline void stResourceChgLog::set_newvalue(::google::protobuf::uint32 value) {
  set_has_newvalue();
  newvalue_ = value;
}

// optional string reason = 8;
inline bool stResourceChgLog::has_reason() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void stResourceChgLog::set_has_reason() {
  _has_bits_[0] |= 0x00000080u;
}
inline void stResourceChgLog::clear_has_reason() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void stResourceChgLog::clear_reason() {
  if (reason_ != &::google::protobuf::internal::kEmptyString) {
    reason_->clear();
  }
  clear_has_reason();
}
inline const ::std::string& stResourceChgLog::reason() const {
  return *reason_;
}
inline void stResourceChgLog::set_reason(const ::std::string& value) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    reason_ = new ::std::string;
  }
  reason_->assign(value);
}
inline void stResourceChgLog::set_reason(const char* value) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    reason_ = new ::std::string;
  }
  reason_->assign(value);
}
inline void stResourceChgLog::set_reason(const char* value, size_t size) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    reason_ = new ::std::string;
  }
  reason_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stResourceChgLog::mutable_reason() {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    reason_ = new ::std::string;
  }
  return reason_;
}
inline ::std::string* stResourceChgLog::release_reason() {
  clear_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = reason_;
    reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stResourceChgLog::set_allocated_reason(::std::string* reason) {
  if (reason_ != &::google::protobuf::internal::kEmptyString) {
    delete reason_;
  }
  if (reason) {
    set_has_reason();
    reason_ = reason;
  } else {
    clear_has_reason();
    reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// stDailyTaskLog

// optional uint32 charID = 1;
inline bool stDailyTaskLog::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stDailyTaskLog::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stDailyTaskLog::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stDailyTaskLog::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stDailyTaskLog::charid() const {
  return charid_;
}
inline void stDailyTaskLog::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional string account = 2;
inline bool stDailyTaskLog::has_account() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stDailyTaskLog::set_has_account() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stDailyTaskLog::clear_has_account() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stDailyTaskLog::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& stDailyTaskLog::account() const {
  return *account_;
}
inline void stDailyTaskLog::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void stDailyTaskLog::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void stDailyTaskLog::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stDailyTaskLog::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* stDailyTaskLog::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stDailyTaskLog::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string name = 3;
inline bool stDailyTaskLog::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stDailyTaskLog::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stDailyTaskLog::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stDailyTaskLog::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& stDailyTaskLog::name() const {
  return *name_;
}
inline void stDailyTaskLog::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stDailyTaskLog::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stDailyTaskLog::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stDailyTaskLog::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* stDailyTaskLog::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stDailyTaskLog::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 taskID = 4;
inline bool stDailyTaskLog::has_taskid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stDailyTaskLog::set_has_taskid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stDailyTaskLog::clear_has_taskid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stDailyTaskLog::clear_taskid() {
  taskid_ = 0u;
  clear_has_taskid();
}
inline ::google::protobuf::uint32 stDailyTaskLog::taskid() const {
  return taskid_;
}
inline void stDailyTaskLog::set_taskid(::google::protobuf::uint32 value) {
  set_has_taskid();
  taskid_ = value;
}

// optional string taskName = 5;
inline bool stDailyTaskLog::has_taskname() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stDailyTaskLog::set_has_taskname() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stDailyTaskLog::clear_has_taskname() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stDailyTaskLog::clear_taskname() {
  if (taskname_ != &::google::protobuf::internal::kEmptyString) {
    taskname_->clear();
  }
  clear_has_taskname();
}
inline const ::std::string& stDailyTaskLog::taskname() const {
  return *taskname_;
}
inline void stDailyTaskLog::set_taskname(const ::std::string& value) {
  set_has_taskname();
  if (taskname_ == &::google::protobuf::internal::kEmptyString) {
    taskname_ = new ::std::string;
  }
  taskname_->assign(value);
}
inline void stDailyTaskLog::set_taskname(const char* value) {
  set_has_taskname();
  if (taskname_ == &::google::protobuf::internal::kEmptyString) {
    taskname_ = new ::std::string;
  }
  taskname_->assign(value);
}
inline void stDailyTaskLog::set_taskname(const char* value, size_t size) {
  set_has_taskname();
  if (taskname_ == &::google::protobuf::internal::kEmptyString) {
    taskname_ = new ::std::string;
  }
  taskname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stDailyTaskLog::mutable_taskname() {
  set_has_taskname();
  if (taskname_ == &::google::protobuf::internal::kEmptyString) {
    taskname_ = new ::std::string;
  }
  return taskname_;
}
inline ::std::string* stDailyTaskLog::release_taskname() {
  clear_has_taskname();
  if (taskname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = taskname_;
    taskname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stDailyTaskLog::set_allocated_taskname(::std::string* taskname) {
  if (taskname_ != &::google::protobuf::internal::kEmptyString) {
    delete taskname_;
  }
  if (taskname) {
    set_has_taskname();
    taskname_ = taskname;
  } else {
    clear_has_taskname();
    taskname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// stRechargeLog

// optional uint32 charID = 1;
inline bool stRechargeLog::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRechargeLog::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRechargeLog::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRechargeLog::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stRechargeLog::charid() const {
  return charid_;
}
inline void stRechargeLog::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional string name = 2;
inline bool stRechargeLog::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stRechargeLog::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stRechargeLog::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stRechargeLog::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& stRechargeLog::name() const {
  return *name_;
}
inline void stRechargeLog::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stRechargeLog::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stRechargeLog::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stRechargeLog::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* stRechargeLog::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stRechargeLog::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string account = 3;
inline bool stRechargeLog::has_account() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stRechargeLog::set_has_account() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stRechargeLog::clear_has_account() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stRechargeLog::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& stRechargeLog::account() const {
  return *account_;
}
inline void stRechargeLog::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void stRechargeLog::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void stRechargeLog::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stRechargeLog::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* stRechargeLog::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stRechargeLog::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string tid = 4;
inline bool stRechargeLog::has_tid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stRechargeLog::set_has_tid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stRechargeLog::clear_has_tid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stRechargeLog::clear_tid() {
  if (tid_ != &::google::protobuf::internal::kEmptyString) {
    tid_->clear();
  }
  clear_has_tid();
}
inline const ::std::string& stRechargeLog::tid() const {
  return *tid_;
}
inline void stRechargeLog::set_tid(const ::std::string& value) {
  set_has_tid();
  if (tid_ == &::google::protobuf::internal::kEmptyString) {
    tid_ = new ::std::string;
  }
  tid_->assign(value);
}
inline void stRechargeLog::set_tid(const char* value) {
  set_has_tid();
  if (tid_ == &::google::protobuf::internal::kEmptyString) {
    tid_ = new ::std::string;
  }
  tid_->assign(value);
}
inline void stRechargeLog::set_tid(const char* value, size_t size) {
  set_has_tid();
  if (tid_ == &::google::protobuf::internal::kEmptyString) {
    tid_ = new ::std::string;
  }
  tid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stRechargeLog::mutable_tid() {
  set_has_tid();
  if (tid_ == &::google::protobuf::internal::kEmptyString) {
    tid_ = new ::std::string;
  }
  return tid_;
}
inline ::std::string* stRechargeLog::release_tid() {
  clear_has_tid();
  if (tid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tid_;
    tid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stRechargeLog::set_allocated_tid(::std::string* tid) {
  if (tid_ != &::google::protobuf::internal::kEmptyString) {
    delete tid_;
  }
  if (tid) {
    set_has_tid();
    tid_ = tid;
  } else {
    clear_has_tid();
    tid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 rechargeNum = 5;
inline bool stRechargeLog::has_rechargenum() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stRechargeLog::set_has_rechargenum() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stRechargeLog::clear_has_rechargenum() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stRechargeLog::clear_rechargenum() {
  rechargenum_ = 0u;
  clear_has_rechargenum();
}
inline ::google::protobuf::uint32 stRechargeLog::rechargenum() const {
  return rechargenum_;
}
inline void stRechargeLog::set_rechargenum(::google::protobuf::uint32 value) {
  set_has_rechargenum();
  rechargenum_ = value;
}

// optional uint32 diamondNum = 6;
inline bool stRechargeLog::has_diamondnum() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stRechargeLog::set_has_diamondnum() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stRechargeLog::clear_has_diamondnum() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stRechargeLog::clear_diamondnum() {
  diamondnum_ = 0u;
  clear_has_diamondnum();
}
inline ::google::protobuf::uint32 stRechargeLog::diamondnum() const {
  return diamondnum_;
}
inline void stRechargeLog::set_diamondnum(::google::protobuf::uint32 value) {
  set_has_diamondnum();
  diamondnum_ = value;
}

// optional bool newRecharge = 7;
inline bool stRechargeLog::has_newrecharge() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void stRechargeLog::set_has_newrecharge() {
  _has_bits_[0] |= 0x00000040u;
}
inline void stRechargeLog::clear_has_newrecharge() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void stRechargeLog::clear_newrecharge() {
  newrecharge_ = false;
  clear_has_newrecharge();
}
inline bool stRechargeLog::newrecharge() const {
  return newrecharge_;
}
inline void stRechargeLog::set_newrecharge(bool value) {
  set_has_newrecharge();
  newrecharge_ = value;
}

// optional uint32 opID = 8;
inline bool stRechargeLog::has_opid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void stRechargeLog::set_has_opid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void stRechargeLog::clear_has_opid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void stRechargeLog::clear_opid() {
  opid_ = 0u;
  clear_has_opid();
}
inline ::google::protobuf::uint32 stRechargeLog::opid() const {
  return opid_;
}
inline void stRechargeLog::set_opid(::google::protobuf::uint32 value) {
  set_has_opid();
  opid_ = value;
}

// optional uint32 addDiamond = 9;
inline bool stRechargeLog::has_adddiamond() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void stRechargeLog::set_has_adddiamond() {
  _has_bits_[0] |= 0x00000100u;
}
inline void stRechargeLog::clear_has_adddiamond() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void stRechargeLog::clear_adddiamond() {
  adddiamond_ = 0u;
  clear_has_adddiamond();
}
inline ::google::protobuf::uint32 stRechargeLog::adddiamond() const {
  return adddiamond_;
}
inline void stRechargeLog::set_adddiamond(::google::protobuf::uint32 value) {
  set_has_adddiamond();
  adddiamond_ = value;
}

// optional uint32 vipLv = 10;
inline bool stRechargeLog::has_viplv() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void stRechargeLog::set_has_viplv() {
  _has_bits_[0] |= 0x00000200u;
}
inline void stRechargeLog::clear_has_viplv() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void stRechargeLog::clear_viplv() {
  viplv_ = 0u;
  clear_has_viplv();
}
inline ::google::protobuf::uint32 stRechargeLog::viplv() const {
  return viplv_;
}
inline void stRechargeLog::set_viplv(::google::protobuf::uint32 value) {
  set_has_viplv();
  viplv_ = value;
}

// optional uint32 itemID = 11;
inline bool stRechargeLog::has_itemid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void stRechargeLog::set_has_itemid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void stRechargeLog::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void stRechargeLog::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 stRechargeLog::itemid() const {
  return itemid_;
}
inline void stRechargeLog::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
}

// -------------------------------------------------------------------

// stPublishActivity

// optional uint32 id = 1;
inline bool stPublishActivity::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stPublishActivity::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stPublishActivity::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stPublishActivity::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 stPublishActivity::id() const {
  return id_;
}
inline void stPublishActivity::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional string config = 2;
inline bool stPublishActivity::has_config() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stPublishActivity::set_has_config() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stPublishActivity::clear_has_config() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stPublishActivity::clear_config() {
  if (config_ != &::google::protobuf::internal::kEmptyString) {
    config_->clear();
  }
  clear_has_config();
}
inline const ::std::string& stPublishActivity::config() const {
  return *config_;
}
inline void stPublishActivity::set_config(const ::std::string& value) {
  set_has_config();
  if (config_ == &::google::protobuf::internal::kEmptyString) {
    config_ = new ::std::string;
  }
  config_->assign(value);
}
inline void stPublishActivity::set_config(const char* value) {
  set_has_config();
  if (config_ == &::google::protobuf::internal::kEmptyString) {
    config_ = new ::std::string;
  }
  config_->assign(value);
}
inline void stPublishActivity::set_config(const char* value, size_t size) {
  set_has_config();
  if (config_ == &::google::protobuf::internal::kEmptyString) {
    config_ = new ::std::string;
  }
  config_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stPublishActivity::mutable_config() {
  set_has_config();
  if (config_ == &::google::protobuf::internal::kEmptyString) {
    config_ = new ::std::string;
  }
  return config_;
}
inline ::std::string* stPublishActivity::release_config() {
  clear_has_config();
  if (config_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = config_;
    config_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stPublishActivity::set_allocated_config(::std::string* config) {
  if (config_ != &::google::protobuf::internal::kEmptyString) {
    delete config_;
  }
  if (config) {
    set_has_config();
    config_ = config;
  } else {
    clear_has_config();
    config_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 webConnID = 3;
inline bool stPublishActivity::has_webconnid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stPublishActivity::set_has_webconnid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stPublishActivity::clear_has_webconnid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stPublishActivity::clear_webconnid() {
  webconnid_ = 0u;
  clear_has_webconnid();
}
inline ::google::protobuf::uint32 stPublishActivity::webconnid() const {
  return webconnid_;
}
inline void stPublishActivity::set_webconnid(::google::protobuf::uint32 value) {
  set_has_webconnid();
  webconnid_ = value;
}

// -------------------------------------------------------------------

// stPublishActivityResult

// optional bool result = 1;
inline bool stPublishActivityResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stPublishActivityResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stPublishActivityResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stPublishActivityResult::clear_result() {
  result_ = false;
  clear_has_result();
}
inline bool stPublishActivityResult::result() const {
  return result_;
}
inline void stPublishActivityResult::set_result(bool value) {
  set_has_result();
  result_ = value;
}

// optional uint32 webConnID = 2;
inline bool stPublishActivityResult::has_webconnid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stPublishActivityResult::set_has_webconnid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stPublishActivityResult::clear_has_webconnid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stPublishActivityResult::clear_webconnid() {
  webconnid_ = 0u;
  clear_has_webconnid();
}
inline ::google::protobuf::uint32 stPublishActivityResult::webconnid() const {
  return webconnid_;
}
inline void stPublishActivityResult::set_webconnid(::google::protobuf::uint32 value) {
  set_has_webconnid();
  webconnid_ = value;
}

// -------------------------------------------------------------------

// stUnloadActivity

// optional uint32 id = 1;
inline bool stUnloadActivity::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stUnloadActivity::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stUnloadActivity::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stUnloadActivity::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 stUnloadActivity::id() const {
  return id_;
}
inline void stUnloadActivity::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional uint32 webConnID = 2;
inline bool stUnloadActivity::has_webconnid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stUnloadActivity::set_has_webconnid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stUnloadActivity::clear_has_webconnid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stUnloadActivity::clear_webconnid() {
  webconnid_ = 0u;
  clear_has_webconnid();
}
inline ::google::protobuf::uint32 stUnloadActivity::webconnid() const {
  return webconnid_;
}
inline void stUnloadActivity::set_webconnid(::google::protobuf::uint32 value) {
  set_has_webconnid();
  webconnid_ = value;
}

// -------------------------------------------------------------------

// stUnloadActivityResult

// optional bool result = 1;
inline bool stUnloadActivityResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stUnloadActivityResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stUnloadActivityResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stUnloadActivityResult::clear_result() {
  result_ = false;
  clear_has_result();
}
inline bool stUnloadActivityResult::result() const {
  return result_;
}
inline void stUnloadActivityResult::set_result(bool value) {
  set_has_result();
  result_ = value;
}

// optional uint32 webConnID = 2;
inline bool stUnloadActivityResult::has_webconnid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stUnloadActivityResult::set_has_webconnid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stUnloadActivityResult::clear_has_webconnid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stUnloadActivityResult::clear_webconnid() {
  webconnid_ = 0u;
  clear_has_webconnid();
}
inline ::google::protobuf::uint32 stUnloadActivityResult::webconnid() const {
  return webconnid_;
}
inline void stUnloadActivityResult::set_webconnid(::google::protobuf::uint32 value) {
  set_has_webconnid();
  webconnid_ = value;
}

// -------------------------------------------------------------------

// stMallBuyLog

// optional uint32 charID = 1;
inline bool stMallBuyLog::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stMallBuyLog::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stMallBuyLog::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stMallBuyLog::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stMallBuyLog::charid() const {
  return charid_;
}
inline void stMallBuyLog::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional string account = 2;
inline bool stMallBuyLog::has_account() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stMallBuyLog::set_has_account() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stMallBuyLog::clear_has_account() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stMallBuyLog::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& stMallBuyLog::account() const {
  return *account_;
}
inline void stMallBuyLog::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void stMallBuyLog::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void stMallBuyLog::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stMallBuyLog::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* stMallBuyLog::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stMallBuyLog::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string name = 3;
inline bool stMallBuyLog::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stMallBuyLog::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stMallBuyLog::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stMallBuyLog::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& stMallBuyLog::name() const {
  return *name_;
}
inline void stMallBuyLog::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stMallBuyLog::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stMallBuyLog::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stMallBuyLog::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* stMallBuyLog::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stMallBuyLog::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 level = 4;
inline bool stMallBuyLog::has_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stMallBuyLog::set_has_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stMallBuyLog::clear_has_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stMallBuyLog::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 stMallBuyLog::level() const {
  return level_;
}
inline void stMallBuyLog::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// optional uint32 vipLv = 5;
inline bool stMallBuyLog::has_viplv() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stMallBuyLog::set_has_viplv() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stMallBuyLog::clear_has_viplv() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stMallBuyLog::clear_viplv() {
  viplv_ = 0u;
  clear_has_viplv();
}
inline ::google::protobuf::uint32 stMallBuyLog::viplv() const {
  return viplv_;
}
inline void stMallBuyLog::set_viplv(::google::protobuf::uint32 value) {
  set_has_viplv();
  viplv_ = value;
}

// optional uint32 shopID = 6;
inline bool stMallBuyLog::has_shopid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stMallBuyLog::set_has_shopid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stMallBuyLog::clear_has_shopid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stMallBuyLog::clear_shopid() {
  shopid_ = 0u;
  clear_has_shopid();
}
inline ::google::protobuf::uint32 stMallBuyLog::shopid() const {
  return shopid_;
}
inline void stMallBuyLog::set_shopid(::google::protobuf::uint32 value) {
  set_has_shopid();
  shopid_ = value;
}

// optional uint32 resID = 7;
inline bool stMallBuyLog::has_resid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void stMallBuyLog::set_has_resid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void stMallBuyLog::clear_has_resid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void stMallBuyLog::clear_resid() {
  resid_ = 0u;
  clear_has_resid();
}
inline ::google::protobuf::uint32 stMallBuyLog::resid() const {
  return resid_;
}
inline void stMallBuyLog::set_resid(::google::protobuf::uint32 value) {
  set_has_resid();
  resid_ = value;
}

// optional uint32 resNum = 8;
inline bool stMallBuyLog::has_resnum() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void stMallBuyLog::set_has_resnum() {
  _has_bits_[0] |= 0x00000080u;
}
inline void stMallBuyLog::clear_has_resnum() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void stMallBuyLog::clear_resnum() {
  resnum_ = 0u;
  clear_has_resnum();
}
inline ::google::protobuf::uint32 stMallBuyLog::resnum() const {
  return resnum_;
}
inline void stMallBuyLog::set_resnum(::google::protobuf::uint32 value) {
  set_has_resnum();
  resnum_ = value;
}

// optional uint32 itemID = 9;
inline bool stMallBuyLog::has_itemid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void stMallBuyLog::set_has_itemid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void stMallBuyLog::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void stMallBuyLog::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 stMallBuyLog::itemid() const {
  return itemid_;
}
inline void stMallBuyLog::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
}

// optional uint32 itemNum = 10;
inline bool stMallBuyLog::has_itemnum() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void stMallBuyLog::set_has_itemnum() {
  _has_bits_[0] |= 0x00000200u;
}
inline void stMallBuyLog::clear_has_itemnum() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void stMallBuyLog::clear_itemnum() {
  itemnum_ = 0u;
  clear_has_itemnum();
}
inline ::google::protobuf::uint32 stMallBuyLog::itemnum() const {
  return itemnum_;
}
inline void stMallBuyLog::set_itemnum(::google::protobuf::uint32 value) {
  set_has_itemnum();
  itemnum_ = value;
}

// -------------------------------------------------------------------

// stHeroPropChgLog

// optional uint32 charID = 1;
inline bool stHeroPropChgLog::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stHeroPropChgLog::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stHeroPropChgLog::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stHeroPropChgLog::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stHeroPropChgLog::charid() const {
  return charid_;
}
inline void stHeroPropChgLog::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional string account = 2;
inline bool stHeroPropChgLog::has_account() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stHeroPropChgLog::set_has_account() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stHeroPropChgLog::clear_has_account() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stHeroPropChgLog::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& stHeroPropChgLog::account() const {
  return *account_;
}
inline void stHeroPropChgLog::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void stHeroPropChgLog::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void stHeroPropChgLog::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stHeroPropChgLog::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* stHeroPropChgLog::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stHeroPropChgLog::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string name = 3;
inline bool stHeroPropChgLog::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stHeroPropChgLog::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stHeroPropChgLog::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stHeroPropChgLog::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& stHeroPropChgLog::name() const {
  return *name_;
}
inline void stHeroPropChgLog::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stHeroPropChgLog::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stHeroPropChgLog::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stHeroPropChgLog::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* stHeroPropChgLog::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stHeroPropChgLog::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 level = 4;
inline bool stHeroPropChgLog::has_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stHeroPropChgLog::set_has_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stHeroPropChgLog::clear_has_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stHeroPropChgLog::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 stHeroPropChgLog::level() const {
  return level_;
}
inline void stHeroPropChgLog::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// optional uint32 vipLv = 5;
inline bool stHeroPropChgLog::has_viplv() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stHeroPropChgLog::set_has_viplv() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stHeroPropChgLog::clear_has_viplv() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stHeroPropChgLog::clear_viplv() {
  viplv_ = 0u;
  clear_has_viplv();
}
inline ::google::protobuf::uint32 stHeroPropChgLog::viplv() const {
  return viplv_;
}
inline void stHeroPropChgLog::set_viplv(::google::protobuf::uint32 value) {
  set_has_viplv();
  viplv_ = value;
}

// optional uint32 heroID = 6;
inline bool stHeroPropChgLog::has_heroid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stHeroPropChgLog::set_has_heroid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stHeroPropChgLog::clear_has_heroid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stHeroPropChgLog::clear_heroid() {
  heroid_ = 0u;
  clear_has_heroid();
}
inline ::google::protobuf::uint32 stHeroPropChgLog::heroid() const {
  return heroid_;
}
inline void stHeroPropChgLog::set_heroid(::google::protobuf::uint32 value) {
  set_has_heroid();
  heroid_ = value;
}

// optional uint32 action = 7;
inline bool stHeroPropChgLog::has_action() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void stHeroPropChgLog::set_has_action() {
  _has_bits_[0] |= 0x00000040u;
}
inline void stHeroPropChgLog::clear_has_action() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void stHeroPropChgLog::clear_action() {
  action_ = 0u;
  clear_has_action();
}
inline ::google::protobuf::uint32 stHeroPropChgLog::action() const {
  return action_;
}
inline void stHeroPropChgLog::set_action(::google::protobuf::uint32 value) {
  set_has_action();
  action_ = value;
}

// optional uint32 oldLv = 8;
inline bool stHeroPropChgLog::has_oldlv() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void stHeroPropChgLog::set_has_oldlv() {
  _has_bits_[0] |= 0x00000080u;
}
inline void stHeroPropChgLog::clear_has_oldlv() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void stHeroPropChgLog::clear_oldlv() {
  oldlv_ = 0u;
  clear_has_oldlv();
}
inline ::google::protobuf::uint32 stHeroPropChgLog::oldlv() const {
  return oldlv_;
}
inline void stHeroPropChgLog::set_oldlv(::google::protobuf::uint32 value) {
  set_has_oldlv();
  oldlv_ = value;
}

// optional uint32 newLv = 9;
inline bool stHeroPropChgLog::has_newlv() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void stHeroPropChgLog::set_has_newlv() {
  _has_bits_[0] |= 0x00000100u;
}
inline void stHeroPropChgLog::clear_has_newlv() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void stHeroPropChgLog::clear_newlv() {
  newlv_ = 0u;
  clear_has_newlv();
}
inline ::google::protobuf::uint32 stHeroPropChgLog::newlv() const {
  return newlv_;
}
inline void stHeroPropChgLog::set_newlv(::google::protobuf::uint32 value) {
  set_has_newlv();
  newlv_ = value;
}

// optional uint32 oldEvoLv = 10;
inline bool stHeroPropChgLog::has_oldevolv() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void stHeroPropChgLog::set_has_oldevolv() {
  _has_bits_[0] |= 0x00000200u;
}
inline void stHeroPropChgLog::clear_has_oldevolv() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void stHeroPropChgLog::clear_oldevolv() {
  oldevolv_ = 0u;
  clear_has_oldevolv();
}
inline ::google::protobuf::uint32 stHeroPropChgLog::oldevolv() const {
  return oldevolv_;
}
inline void stHeroPropChgLog::set_oldevolv(::google::protobuf::uint32 value) {
  set_has_oldevolv();
  oldevolv_ = value;
}

// optional uint32 newEvoLv = 11;
inline bool stHeroPropChgLog::has_newevolv() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void stHeroPropChgLog::set_has_newevolv() {
  _has_bits_[0] |= 0x00000400u;
}
inline void stHeroPropChgLog::clear_has_newevolv() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void stHeroPropChgLog::clear_newevolv() {
  newevolv_ = 0u;
  clear_has_newevolv();
}
inline ::google::protobuf::uint32 stHeroPropChgLog::newevolv() const {
  return newevolv_;
}
inline void stHeroPropChgLog::set_newevolv(::google::protobuf::uint32 value) {
  set_has_newevolv();
  newevolv_ = value;
}

// -------------------------------------------------------------------

// stSendGuildLog

// optional string account = 1;
inline bool stSendGuildLog::has_account() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSendGuildLog::set_has_account() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSendGuildLog::clear_has_account() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSendGuildLog::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& stSendGuildLog::account() const {
  return *account_;
}
inline void stSendGuildLog::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void stSendGuildLog::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void stSendGuildLog::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stSendGuildLog::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* stSendGuildLog::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stSendGuildLog::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 opID = 2;
inline bool stSendGuildLog::has_opid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stSendGuildLog::set_has_opid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stSendGuildLog::clear_has_opid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stSendGuildLog::clear_opid() {
  opid_ = 0u;
  clear_has_opid();
}
inline ::google::protobuf::uint32 stSendGuildLog::opid() const {
  return opid_;
}
inline void stSendGuildLog::set_opid(::google::protobuf::uint32 value) {
  set_has_opid();
  opid_ = value;
}

// optional uint32 charID = 3;
inline bool stSendGuildLog::has_charid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stSendGuildLog::set_has_charid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stSendGuildLog::clear_has_charid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stSendGuildLog::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stSendGuildLog::charid() const {
  return charid_;
}
inline void stSendGuildLog::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 level = 4;
inline bool stSendGuildLog::has_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stSendGuildLog::set_has_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stSendGuildLog::clear_has_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stSendGuildLog::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 stSendGuildLog::level() const {
  return level_;
}
inline void stSendGuildLog::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// optional uint32 vipLv = 5;
inline bool stSendGuildLog::has_viplv() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stSendGuildLog::set_has_viplv() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stSendGuildLog::clear_has_viplv() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stSendGuildLog::clear_viplv() {
  viplv_ = 0u;
  clear_has_viplv();
}
inline ::google::protobuf::uint32 stSendGuildLog::viplv() const {
  return viplv_;
}
inline void stSendGuildLog::set_viplv(::google::protobuf::uint32 value) {
  set_has_viplv();
  viplv_ = value;
}

// optional uint32 guildID = 6;
inline bool stSendGuildLog::has_guildid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stSendGuildLog::set_has_guildid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stSendGuildLog::clear_has_guildid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stSendGuildLog::clear_guildid() {
  guildid_ = 0u;
  clear_has_guildid();
}
inline ::google::protobuf::uint32 stSendGuildLog::guildid() const {
  return guildid_;
}
inline void stSendGuildLog::set_guildid(::google::protobuf::uint32 value) {
  set_has_guildid();
  guildid_ = value;
}

// optional string action = 7;
inline bool stSendGuildLog::has_action() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void stSendGuildLog::set_has_action() {
  _has_bits_[0] |= 0x00000040u;
}
inline void stSendGuildLog::clear_has_action() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void stSendGuildLog::clear_action() {
  if (action_ != &::google::protobuf::internal::kEmptyString) {
    action_->clear();
  }
  clear_has_action();
}
inline const ::std::string& stSendGuildLog::action() const {
  return *action_;
}
inline void stSendGuildLog::set_action(const ::std::string& value) {
  set_has_action();
  if (action_ == &::google::protobuf::internal::kEmptyString) {
    action_ = new ::std::string;
  }
  action_->assign(value);
}
inline void stSendGuildLog::set_action(const char* value) {
  set_has_action();
  if (action_ == &::google::protobuf::internal::kEmptyString) {
    action_ = new ::std::string;
  }
  action_->assign(value);
}
inline void stSendGuildLog::set_action(const char* value, size_t size) {
  set_has_action();
  if (action_ == &::google::protobuf::internal::kEmptyString) {
    action_ = new ::std::string;
  }
  action_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stSendGuildLog::mutable_action() {
  set_has_action();
  if (action_ == &::google::protobuf::internal::kEmptyString) {
    action_ = new ::std::string;
  }
  return action_;
}
inline ::std::string* stSendGuildLog::release_action() {
  clear_has_action();
  if (action_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = action_;
    action_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stSendGuildLog::set_allocated_action(::std::string* action) {
  if (action_ != &::google::protobuf::internal::kEmptyString) {
    delete action_;
  }
  if (action) {
    set_has_action();
    action_ = action;
  } else {
    clear_has_action();
    action_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string opObjID = 8;
inline bool stSendGuildLog::has_opobjid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void stSendGuildLog::set_has_opobjid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void stSendGuildLog::clear_has_opobjid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void stSendGuildLog::clear_opobjid() {
  if (opobjid_ != &::google::protobuf::internal::kEmptyString) {
    opobjid_->clear();
  }
  clear_has_opobjid();
}
inline const ::std::string& stSendGuildLog::opobjid() const {
  return *opobjid_;
}
inline void stSendGuildLog::set_opobjid(const ::std::string& value) {
  set_has_opobjid();
  if (opobjid_ == &::google::protobuf::internal::kEmptyString) {
    opobjid_ = new ::std::string;
  }
  opobjid_->assign(value);
}
inline void stSendGuildLog::set_opobjid(const char* value) {
  set_has_opobjid();
  if (opobjid_ == &::google::protobuf::internal::kEmptyString) {
    opobjid_ = new ::std::string;
  }
  opobjid_->assign(value);
}
inline void stSendGuildLog::set_opobjid(const char* value, size_t size) {
  set_has_opobjid();
  if (opobjid_ == &::google::protobuf::internal::kEmptyString) {
    opobjid_ = new ::std::string;
  }
  opobjid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stSendGuildLog::mutable_opobjid() {
  set_has_opobjid();
  if (opobjid_ == &::google::protobuf::internal::kEmptyString) {
    opobjid_ = new ::std::string;
  }
  return opobjid_;
}
inline ::std::string* stSendGuildLog::release_opobjid() {
  clear_has_opobjid();
  if (opobjid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = opobjid_;
    opobjid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stSendGuildLog::set_allocated_opobjid(::std::string* opobjid) {
  if (opobjid_ != &::google::protobuf::internal::kEmptyString) {
    delete opobjid_;
  }
  if (opobjid) {
    set_has_opobjid();
    opobjid_ = opobjid;
  } else {
    clear_has_opobjid();
    opobjid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// sstSendGuildResLog

// optional uint32 guildID = 1;
inline bool sstSendGuildResLog::has_guildid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sstSendGuildResLog::set_has_guildid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sstSendGuildResLog::clear_has_guildid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sstSendGuildResLog::clear_guildid() {
  guildid_ = 0u;
  clear_has_guildid();
}
inline ::google::protobuf::uint32 sstSendGuildResLog::guildid() const {
  return guildid_;
}
inline void sstSendGuildResLog::set_guildid(::google::protobuf::uint32 value) {
  set_has_guildid();
  guildid_ = value;
}

// optional string res = 2;
inline bool sstSendGuildResLog::has_res() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sstSendGuildResLog::set_has_res() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sstSendGuildResLog::clear_has_res() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sstSendGuildResLog::clear_res() {
  if (res_ != &::google::protobuf::internal::kEmptyString) {
    res_->clear();
  }
  clear_has_res();
}
inline const ::std::string& sstSendGuildResLog::res() const {
  return *res_;
}
inline void sstSendGuildResLog::set_res(const ::std::string& value) {
  set_has_res();
  if (res_ == &::google::protobuf::internal::kEmptyString) {
    res_ = new ::std::string;
  }
  res_->assign(value);
}
inline void sstSendGuildResLog::set_res(const char* value) {
  set_has_res();
  if (res_ == &::google::protobuf::internal::kEmptyString) {
    res_ = new ::std::string;
  }
  res_->assign(value);
}
inline void sstSendGuildResLog::set_res(const char* value, size_t size) {
  set_has_res();
  if (res_ == &::google::protobuf::internal::kEmptyString) {
    res_ = new ::std::string;
  }
  res_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sstSendGuildResLog::mutable_res() {
  set_has_res();
  if (res_ == &::google::protobuf::internal::kEmptyString) {
    res_ = new ::std::string;
  }
  return res_;
}
inline ::std::string* sstSendGuildResLog::release_res() {
  clear_has_res();
  if (res_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = res_;
    res_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sstSendGuildResLog::set_allocated_res(::std::string* res) {
  if (res_ != &::google::protobuf::internal::kEmptyString) {
    delete res_;
  }
  if (res) {
    set_has_res();
    res_ = res;
  } else {
    clear_has_res();
    res_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 oldVal = 3;
inline bool sstSendGuildResLog::has_oldval() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sstSendGuildResLog::set_has_oldval() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sstSendGuildResLog::clear_has_oldval() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sstSendGuildResLog::clear_oldval() {
  oldval_ = 0u;
  clear_has_oldval();
}
inline ::google::protobuf::uint32 sstSendGuildResLog::oldval() const {
  return oldval_;
}
inline void sstSendGuildResLog::set_oldval(::google::protobuf::uint32 value) {
  set_has_oldval();
  oldval_ = value;
}

// optional uint32 newVal = 4;
inline bool sstSendGuildResLog::has_newval() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void sstSendGuildResLog::set_has_newval() {
  _has_bits_[0] |= 0x00000008u;
}
inline void sstSendGuildResLog::clear_has_newval() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void sstSendGuildResLog::clear_newval() {
  newval_ = 0u;
  clear_has_newval();
}
inline ::google::protobuf::uint32 sstSendGuildResLog::newval() const {
  return newval_;
}
inline void sstSendGuildResLog::set_newval(::google::protobuf::uint32 value) {
  set_has_newval();
  newval_ = value;
}

// optional string reason = 5;
inline bool sstSendGuildResLog::has_reason() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void sstSendGuildResLog::set_has_reason() {
  _has_bits_[0] |= 0x00000010u;
}
inline void sstSendGuildResLog::clear_has_reason() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void sstSendGuildResLog::clear_reason() {
  if (reason_ != &::google::protobuf::internal::kEmptyString) {
    reason_->clear();
  }
  clear_has_reason();
}
inline const ::std::string& sstSendGuildResLog::reason() const {
  return *reason_;
}
inline void sstSendGuildResLog::set_reason(const ::std::string& value) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    reason_ = new ::std::string;
  }
  reason_->assign(value);
}
inline void sstSendGuildResLog::set_reason(const char* value) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    reason_ = new ::std::string;
  }
  reason_->assign(value);
}
inline void sstSendGuildResLog::set_reason(const char* value, size_t size) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    reason_ = new ::std::string;
  }
  reason_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sstSendGuildResLog::mutable_reason() {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    reason_ = new ::std::string;
  }
  return reason_;
}
inline ::std::string* sstSendGuildResLog::release_reason() {
  clear_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = reason_;
    reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sstSendGuildResLog::set_allocated_reason(::std::string* reason) {
  if (reason_ != &::google::protobuf::internal::kEmptyString) {
    delete reason_;
  }
  if (reason) {
    set_has_reason();
    reason_ = reason;
  } else {
    clear_has_reason();
    reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// stSendModuleLog

// optional string account = 1;
inline bool stSendModuleLog::has_account() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSendModuleLog::set_has_account() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSendModuleLog::clear_has_account() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSendModuleLog::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& stSendModuleLog::account() const {
  return *account_;
}
inline void stSendModuleLog::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void stSendModuleLog::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void stSendModuleLog::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stSendModuleLog::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* stSendModuleLog::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stSendModuleLog::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 opID = 2;
inline bool stSendModuleLog::has_opid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stSendModuleLog::set_has_opid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stSendModuleLog::clear_has_opid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stSendModuleLog::clear_opid() {
  opid_ = 0u;
  clear_has_opid();
}
inline ::google::protobuf::uint32 stSendModuleLog::opid() const {
  return opid_;
}
inline void stSendModuleLog::set_opid(::google::protobuf::uint32 value) {
  set_has_opid();
  opid_ = value;
}

// optional uint32 charID = 3;
inline bool stSendModuleLog::has_charid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stSendModuleLog::set_has_charid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stSendModuleLog::clear_has_charid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stSendModuleLog::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stSendModuleLog::charid() const {
  return charid_;
}
inline void stSendModuleLog::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 level = 4;
inline bool stSendModuleLog::has_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stSendModuleLog::set_has_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stSendModuleLog::clear_has_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stSendModuleLog::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 stSendModuleLog::level() const {
  return level_;
}
inline void stSendModuleLog::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// optional uint32 vipLv = 5;
inline bool stSendModuleLog::has_viplv() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stSendModuleLog::set_has_viplv() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stSendModuleLog::clear_has_viplv() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stSendModuleLog::clear_viplv() {
  viplv_ = 0u;
  clear_has_viplv();
}
inline ::google::protobuf::uint32 stSendModuleLog::viplv() const {
  return viplv_;
}
inline void stSendModuleLog::set_viplv(::google::protobuf::uint32 value) {
  set_has_viplv();
  viplv_ = value;
}

// optional string module = 6;
inline bool stSendModuleLog::has_module() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stSendModuleLog::set_has_module() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stSendModuleLog::clear_has_module() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stSendModuleLog::clear_module() {
  if (module_ != &::google::protobuf::internal::kEmptyString) {
    module_->clear();
  }
  clear_has_module();
}
inline const ::std::string& stSendModuleLog::module() const {
  return *module_;
}
inline void stSendModuleLog::set_module(const ::std::string& value) {
  set_has_module();
  if (module_ == &::google::protobuf::internal::kEmptyString) {
    module_ = new ::std::string;
  }
  module_->assign(value);
}
inline void stSendModuleLog::set_module(const char* value) {
  set_has_module();
  if (module_ == &::google::protobuf::internal::kEmptyString) {
    module_ = new ::std::string;
  }
  module_->assign(value);
}
inline void stSendModuleLog::set_module(const char* value, size_t size) {
  set_has_module();
  if (module_ == &::google::protobuf::internal::kEmptyString) {
    module_ = new ::std::string;
  }
  module_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stSendModuleLog::mutable_module() {
  set_has_module();
  if (module_ == &::google::protobuf::internal::kEmptyString) {
    module_ = new ::std::string;
  }
  return module_;
}
inline ::std::string* stSendModuleLog::release_module() {
  clear_has_module();
  if (module_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = module_;
    module_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stSendModuleLog::set_allocated_module(::std::string* module) {
  if (module_ != &::google::protobuf::internal::kEmptyString) {
    delete module_;
  }
  if (module) {
    set_has_module();
    module_ = module;
  } else {
    clear_has_module();
    module_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 copymapID = 7;
inline bool stSendModuleLog::has_copymapid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void stSendModuleLog::set_has_copymapid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void stSendModuleLog::clear_has_copymapid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void stSendModuleLog::clear_copymapid() {
  copymapid_ = 0u;
  clear_has_copymapid();
}
inline ::google::protobuf::uint32 stSendModuleLog::copymapid() const {
  return copymapid_;
}
inline void stSendModuleLog::set_copymapid(::google::protobuf::uint32 value) {
  set_has_copymapid();
  copymapid_ = value;
}

// optional string otherCharID = 8;
inline bool stSendModuleLog::has_othercharid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void stSendModuleLog::set_has_othercharid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void stSendModuleLog::clear_has_othercharid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void stSendModuleLog::clear_othercharid() {
  if (othercharid_ != &::google::protobuf::internal::kEmptyString) {
    othercharid_->clear();
  }
  clear_has_othercharid();
}
inline const ::std::string& stSendModuleLog::othercharid() const {
  return *othercharid_;
}
inline void stSendModuleLog::set_othercharid(const ::std::string& value) {
  set_has_othercharid();
  if (othercharid_ == &::google::protobuf::internal::kEmptyString) {
    othercharid_ = new ::std::string;
  }
  othercharid_->assign(value);
}
inline void stSendModuleLog::set_othercharid(const char* value) {
  set_has_othercharid();
  if (othercharid_ == &::google::protobuf::internal::kEmptyString) {
    othercharid_ = new ::std::string;
  }
  othercharid_->assign(value);
}
inline void stSendModuleLog::set_othercharid(const char* value, size_t size) {
  set_has_othercharid();
  if (othercharid_ == &::google::protobuf::internal::kEmptyString) {
    othercharid_ = new ::std::string;
  }
  othercharid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stSendModuleLog::mutable_othercharid() {
  set_has_othercharid();
  if (othercharid_ == &::google::protobuf::internal::kEmptyString) {
    othercharid_ = new ::std::string;
  }
  return othercharid_;
}
inline ::std::string* stSendModuleLog::release_othercharid() {
  clear_has_othercharid();
  if (othercharid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = othercharid_;
    othercharid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stSendModuleLog::set_allocated_othercharid(::std::string* othercharid) {
  if (othercharid_ != &::google::protobuf::internal::kEmptyString) {
    delete othercharid_;
  }
  if (othercharid) {
    set_has_othercharid();
    othercharid_ = othercharid;
  } else {
    clear_has_othercharid();
    othercharid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool result = 9;
inline bool stSendModuleLog::has_result() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void stSendModuleLog::set_has_result() {
  _has_bits_[0] |= 0x00000100u;
}
inline void stSendModuleLog::clear_has_result() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void stSendModuleLog::clear_result() {
  result_ = false;
  clear_has_result();
}
inline bool stSendModuleLog::result() const {
  return result_;
}
inline void stSendModuleLog::set_result(bool value) {
  set_has_result();
  result_ = value;
}

// optional uint32 oldRank = 10;
inline bool stSendModuleLog::has_oldrank() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void stSendModuleLog::set_has_oldrank() {
  _has_bits_[0] |= 0x00000200u;
}
inline void stSendModuleLog::clear_has_oldrank() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void stSendModuleLog::clear_oldrank() {
  oldrank_ = 0u;
  clear_has_oldrank();
}
inline ::google::protobuf::uint32 stSendModuleLog::oldrank() const {
  return oldrank_;
}
inline void stSendModuleLog::set_oldrank(::google::protobuf::uint32 value) {
  set_has_oldrank();
  oldrank_ = value;
}

// optional uint32 newRank = 11;
inline bool stSendModuleLog::has_newrank() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void stSendModuleLog::set_has_newrank() {
  _has_bits_[0] |= 0x00000400u;
}
inline void stSendModuleLog::clear_has_newrank() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void stSendModuleLog::clear_newrank() {
  newrank_ = 0u;
  clear_has_newrank();
}
inline ::google::protobuf::uint32 stSendModuleLog::newrank() const {
  return newrank_;
}
inline void stSendModuleLog::set_newrank(::google::protobuf::uint32 value) {
  set_has_newrank();
  newrank_ = value;
}

// -------------------------------------------------------------------

// stSkillChgLog

// optional uint32 skillID = 1;
inline bool stSkillChgLog::has_skillid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSkillChgLog::set_has_skillid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSkillChgLog::clear_has_skillid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSkillChgLog::clear_skillid() {
  skillid_ = 0u;
  clear_has_skillid();
}
inline ::google::protobuf::uint32 stSkillChgLog::skillid() const {
  return skillid_;
}
inline void stSkillChgLog::set_skillid(::google::protobuf::uint32 value) {
  set_has_skillid();
  skillid_ = value;
}

// optional uint32 pos = 2;
inline bool stSkillChgLog::has_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stSkillChgLog::set_has_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stSkillChgLog::clear_has_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stSkillChgLog::clear_pos() {
  pos_ = 0u;
  clear_has_pos();
}
inline ::google::protobuf::uint32 stSkillChgLog::pos() const {
  return pos_;
}
inline void stSkillChgLog::set_pos(::google::protobuf::uint32 value) {
  set_has_pos();
  pos_ = value;
}

// optional uint32 oldLv = 3;
inline bool stSkillChgLog::has_oldlv() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stSkillChgLog::set_has_oldlv() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stSkillChgLog::clear_has_oldlv() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stSkillChgLog::clear_oldlv() {
  oldlv_ = 0u;
  clear_has_oldlv();
}
inline ::google::protobuf::uint32 stSkillChgLog::oldlv() const {
  return oldlv_;
}
inline void stSkillChgLog::set_oldlv(::google::protobuf::uint32 value) {
  set_has_oldlv();
  oldlv_ = value;
}

// optional uint32 newLv = 4;
inline bool stSkillChgLog::has_newlv() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stSkillChgLog::set_has_newlv() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stSkillChgLog::clear_has_newlv() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stSkillChgLog::clear_newlv() {
  newlv_ = 0u;
  clear_has_newlv();
}
inline ::google::protobuf::uint32 stSkillChgLog::newlv() const {
  return newlv_;
}
inline void stSkillChgLog::set_newlv(::google::protobuf::uint32 value) {
  set_has_newlv();
  newlv_ = value;
}

// optional uint32 decGoldCoind = 5;
inline bool stSkillChgLog::has_decgoldcoind() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stSkillChgLog::set_has_decgoldcoind() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stSkillChgLog::clear_has_decgoldcoind() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stSkillChgLog::clear_decgoldcoind() {
  decgoldcoind_ = 0u;
  clear_has_decgoldcoind();
}
inline ::google::protobuf::uint32 stSkillChgLog::decgoldcoind() const {
  return decgoldcoind_;
}
inline void stSkillChgLog::set_decgoldcoind(::google::protobuf::uint32 value) {
  set_has_decgoldcoind();
  decgoldcoind_ = value;
}

// optional uint32 action = 6;
inline bool stSkillChgLog::has_action() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stSkillChgLog::set_has_action() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stSkillChgLog::clear_has_action() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stSkillChgLog::clear_action() {
  action_ = 0u;
  clear_has_action();
}
inline ::google::protobuf::uint32 stSkillChgLog::action() const {
  return action_;
}
inline void stSkillChgLog::set_action(::google::protobuf::uint32 value) {
  set_has_action();
  action_ = value;
}

// -------------------------------------------------------------------

// stSpriteLog

// optional uint32 spriteID = 1;
inline bool stSpriteLog::has_spriteid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSpriteLog::set_has_spriteid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSpriteLog::clear_has_spriteid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSpriteLog::clear_spriteid() {
  spriteid_ = 0u;
  clear_has_spriteid();
}
inline ::google::protobuf::uint32 stSpriteLog::spriteid() const {
  return spriteid_;
}
inline void stSpriteLog::set_spriteid(::google::protobuf::uint32 value) {
  set_has_spriteid();
  spriteid_ = value;
}

// optional uint32 oldLv = 2;
inline bool stSpriteLog::has_oldlv() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stSpriteLog::set_has_oldlv() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stSpriteLog::clear_has_oldlv() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stSpriteLog::clear_oldlv() {
  oldlv_ = 0u;
  clear_has_oldlv();
}
inline ::google::protobuf::uint32 stSpriteLog::oldlv() const {
  return oldlv_;
}
inline void stSpriteLog::set_oldlv(::google::protobuf::uint32 value) {
  set_has_oldlv();
  oldlv_ = value;
}

// optional uint32 newLv = 3;
inline bool stSpriteLog::has_newlv() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stSpriteLog::set_has_newlv() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stSpriteLog::clear_has_newlv() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stSpriteLog::clear_newlv() {
  newlv_ = 0u;
  clear_has_newlv();
}
inline ::google::protobuf::uint32 stSpriteLog::newlv() const {
  return newlv_;
}
inline void stSpriteLog::set_newlv(::google::protobuf::uint32 value) {
  set_has_newlv();
  newlv_ = value;
}

// optional uint32 consume = 4;
inline bool stSpriteLog::has_consume() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stSpriteLog::set_has_consume() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stSpriteLog::clear_has_consume() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stSpriteLog::clear_consume() {
  consume_ = 0u;
  clear_has_consume();
}
inline ::google::protobuf::uint32 stSpriteLog::consume() const {
  return consume_;
}
inline void stSpriteLog::set_consume(::google::protobuf::uint32 value) {
  set_has_consume();
  consume_ = value;
}

// -------------------------------------------------------------------

// stCopymapLog

// optional uint32 copymapID = 1;
inline bool stCopymapLog::has_copymapid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stCopymapLog::set_has_copymapid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stCopymapLog::clear_has_copymapid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stCopymapLog::clear_copymapid() {
  copymapid_ = 0u;
  clear_has_copymapid();
}
inline ::google::protobuf::uint32 stCopymapLog::copymapid() const {
  return copymapid_;
}
inline void stCopymapLog::set_copymapid(::google::protobuf::uint32 value) {
  set_has_copymapid();
  copymapid_ = value;
}

// optional bool win = 2;
inline bool stCopymapLog::has_win() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stCopymapLog::set_has_win() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stCopymapLog::clear_has_win() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stCopymapLog::clear_win() {
  win_ = false;
  clear_has_win();
}
inline bool stCopymapLog::win() const {
  return win_;
}
inline void stCopymapLog::set_win(bool value) {
  set_has_win();
  win_ = value;
}

// optional string action = 3;
inline bool stCopymapLog::has_action() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stCopymapLog::set_has_action() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stCopymapLog::clear_has_action() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stCopymapLog::clear_action() {
  if (action_ != &::google::protobuf::internal::kEmptyString) {
    action_->clear();
  }
  clear_has_action();
}
inline const ::std::string& stCopymapLog::action() const {
  return *action_;
}
inline void stCopymapLog::set_action(const ::std::string& value) {
  set_has_action();
  if (action_ == &::google::protobuf::internal::kEmptyString) {
    action_ = new ::std::string;
  }
  action_->assign(value);
}
inline void stCopymapLog::set_action(const char* value) {
  set_has_action();
  if (action_ == &::google::protobuf::internal::kEmptyString) {
    action_ = new ::std::string;
  }
  action_->assign(value);
}
inline void stCopymapLog::set_action(const char* value, size_t size) {
  set_has_action();
  if (action_ == &::google::protobuf::internal::kEmptyString) {
    action_ = new ::std::string;
  }
  action_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stCopymapLog::mutable_action() {
  set_has_action();
  if (action_ == &::google::protobuf::internal::kEmptyString) {
    action_ = new ::std::string;
  }
  return action_;
}
inline ::std::string* stCopymapLog::release_action() {
  clear_has_action();
  if (action_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = action_;
    action_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stCopymapLog::set_allocated_action(::std::string* action) {
  if (action_ != &::google::protobuf::internal::kEmptyString) {
    delete action_;
  }
  if (action) {
    set_has_action();
    action_ = action;
  } else {
    clear_has_action();
    action_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// stEquipChgLog

// optional uint32 itemID = 1;
inline bool stEquipChgLog::has_itemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stEquipChgLog::set_has_itemid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stEquipChgLog::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stEquipChgLog::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 stEquipChgLog::itemid() const {
  return itemid_;
}
inline void stEquipChgLog::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
}

// optional uint32 oldRaiseLv = 2;
inline bool stEquipChgLog::has_oldraiselv() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stEquipChgLog::set_has_oldraiselv() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stEquipChgLog::clear_has_oldraiselv() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stEquipChgLog::clear_oldraiselv() {
  oldraiselv_ = 0u;
  clear_has_oldraiselv();
}
inline ::google::protobuf::uint32 stEquipChgLog::oldraiselv() const {
  return oldraiselv_;
}
inline void stEquipChgLog::set_oldraiselv(::google::protobuf::uint32 value) {
  set_has_oldraiselv();
  oldraiselv_ = value;
}

// optional uint32 newRaiseLv = 3;
inline bool stEquipChgLog::has_newraiselv() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stEquipChgLog::set_has_newraiselv() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stEquipChgLog::clear_has_newraiselv() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stEquipChgLog::clear_newraiselv() {
  newraiselv_ = 0u;
  clear_has_newraiselv();
}
inline ::google::protobuf::uint32 stEquipChgLog::newraiselv() const {
  return newraiselv_;
}
inline void stEquipChgLog::set_newraiselv(::google::protobuf::uint32 value) {
  set_has_newraiselv();
  newraiselv_ = value;
}

// optional uint32 oldRefineLv = 4;
inline bool stEquipChgLog::has_oldrefinelv() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stEquipChgLog::set_has_oldrefinelv() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stEquipChgLog::clear_has_oldrefinelv() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stEquipChgLog::clear_oldrefinelv() {
  oldrefinelv_ = 0u;
  clear_has_oldrefinelv();
}
inline ::google::protobuf::uint32 stEquipChgLog::oldrefinelv() const {
  return oldrefinelv_;
}
inline void stEquipChgLog::set_oldrefinelv(::google::protobuf::uint32 value) {
  set_has_oldrefinelv();
  oldrefinelv_ = value;
}

// optional uint32 newRefineLv = 5;
inline bool stEquipChgLog::has_newrefinelv() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stEquipChgLog::set_has_newrefinelv() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stEquipChgLog::clear_has_newrefinelv() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stEquipChgLog::clear_newrefinelv() {
  newrefinelv_ = 0u;
  clear_has_newrefinelv();
}
inline ::google::protobuf::uint32 stEquipChgLog::newrefinelv() const {
  return newrefinelv_;
}
inline void stEquipChgLog::set_newrefinelv(::google::protobuf::uint32 value) {
  set_has_newrefinelv();
  newrefinelv_ = value;
}

// optional string action = 6;
inline bool stEquipChgLog::has_action() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stEquipChgLog::set_has_action() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stEquipChgLog::clear_has_action() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stEquipChgLog::clear_action() {
  if (action_ != &::google::protobuf::internal::kEmptyString) {
    action_->clear();
  }
  clear_has_action();
}
inline const ::std::string& stEquipChgLog::action() const {
  return *action_;
}
inline void stEquipChgLog::set_action(const ::std::string& value) {
  set_has_action();
  if (action_ == &::google::protobuf::internal::kEmptyString) {
    action_ = new ::std::string;
  }
  action_->assign(value);
}
inline void stEquipChgLog::set_action(const char* value) {
  set_has_action();
  if (action_ == &::google::protobuf::internal::kEmptyString) {
    action_ = new ::std::string;
  }
  action_->assign(value);
}
inline void stEquipChgLog::set_action(const char* value, size_t size) {
  set_has_action();
  if (action_ == &::google::protobuf::internal::kEmptyString) {
    action_ = new ::std::string;
  }
  action_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stEquipChgLog::mutable_action() {
  set_has_action();
  if (action_ == &::google::protobuf::internal::kEmptyString) {
    action_ = new ::std::string;
  }
  return action_;
}
inline ::std::string* stEquipChgLog::release_action() {
  clear_has_action();
  if (action_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = action_;
    action_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stEquipChgLog::set_allocated_action(::std::string* action) {
  if (action_ != &::google::protobuf::internal::kEmptyString) {
    delete action_;
  }
  if (action) {
    set_has_action();
    action_ = action;
  } else {
    clear_has_action();
    action_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 decGoldcoin = 7;
inline bool stEquipChgLog::has_decgoldcoin() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void stEquipChgLog::set_has_decgoldcoin() {
  _has_bits_[0] |= 0x00000040u;
}
inline void stEquipChgLog::clear_has_decgoldcoin() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void stEquipChgLog::clear_decgoldcoin() {
  decgoldcoin_ = 0u;
  clear_has_decgoldcoin();
}
inline ::google::protobuf::uint32 stEquipChgLog::decgoldcoin() const {
  return decgoldcoin_;
}
inline void stEquipChgLog::set_decgoldcoin(::google::protobuf::uint32 value) {
  set_has_decgoldcoin();
  decgoldcoin_ = value;
}

// optional uint32 decYuntie = 8;
inline bool stEquipChgLog::has_decyuntie() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void stEquipChgLog::set_has_decyuntie() {
  _has_bits_[0] |= 0x00000080u;
}
inline void stEquipChgLog::clear_has_decyuntie() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void stEquipChgLog::clear_decyuntie() {
  decyuntie_ = 0u;
  clear_has_decyuntie();
}
inline ::google::protobuf::uint32 stEquipChgLog::decyuntie() const {
  return decyuntie_;
}
inline void stEquipChgLog::set_decyuntie(::google::protobuf::uint32 value) {
  set_has_decyuntie();
  decyuntie_ = value;
}

// optional uint32 decItemID = 9;
inline bool stEquipChgLog::has_decitemid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void stEquipChgLog::set_has_decitemid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void stEquipChgLog::clear_has_decitemid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void stEquipChgLog::clear_decitemid() {
  decitemid_ = 0u;
  clear_has_decitemid();
}
inline ::google::protobuf::uint32 stEquipChgLog::decitemid() const {
  return decitemid_;
}
inline void stEquipChgLog::set_decitemid(::google::protobuf::uint32 value) {
  set_has_decitemid();
  decitemid_ = value;
}

// optional uint32 addGoldcoin = 10;
inline bool stEquipChgLog::has_addgoldcoin() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void stEquipChgLog::set_has_addgoldcoin() {
  _has_bits_[0] |= 0x00000200u;
}
inline void stEquipChgLog::clear_has_addgoldcoin() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void stEquipChgLog::clear_addgoldcoin() {
  addgoldcoin_ = 0u;
  clear_has_addgoldcoin();
}
inline ::google::protobuf::uint32 stEquipChgLog::addgoldcoin() const {
  return addgoldcoin_;
}
inline void stEquipChgLog::set_addgoldcoin(::google::protobuf::uint32 value) {
  set_has_addgoldcoin();
  addgoldcoin_ = value;
}

// optional uint32 addYuntie = 11;
inline bool stEquipChgLog::has_addyuntie() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void stEquipChgLog::set_has_addyuntie() {
  _has_bits_[0] |= 0x00000400u;
}
inline void stEquipChgLog::clear_has_addyuntie() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void stEquipChgLog::clear_addyuntie() {
  addyuntie_ = 0u;
  clear_has_addyuntie();
}
inline ::google::protobuf::uint32 stEquipChgLog::addyuntie() const {
  return addyuntie_;
}
inline void stEquipChgLog::set_addyuntie(::google::protobuf::uint32 value) {
  set_has_addyuntie();
  addyuntie_ = value;
}

// optional uint32 addItemID = 12;
inline bool stEquipChgLog::has_additemid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void stEquipChgLog::set_has_additemid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void stEquipChgLog::clear_has_additemid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void stEquipChgLog::clear_additemid() {
  additemid_ = 0u;
  clear_has_additemid();
}
inline ::google::protobuf::uint32 stEquipChgLog::additemid() const {
  return additemid_;
}
inline void stEquipChgLog::set_additemid(::google::protobuf::uint32 value) {
  set_has_additemid();
  additemid_ = value;
}

// -------------------------------------------------------------------

// stActivityLog

// optional uint32 charID = 1;
inline bool stActivityLog::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stActivityLog::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stActivityLog::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stActivityLog::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stActivityLog::charid() const {
  return charid_;
}
inline void stActivityLog::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 activityID = 2;
inline bool stActivityLog::has_activityid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stActivityLog::set_has_activityid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stActivityLog::clear_has_activityid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stActivityLog::clear_activityid() {
  activityid_ = 0u;
  clear_has_activityid();
}
inline ::google::protobuf::uint32 stActivityLog::activityid() const {
  return activityid_;
}
inline void stActivityLog::set_activityid(::google::protobuf::uint32 value) {
  set_has_activityid();
  activityid_ = value;
}

// optional string activityName = 3;
inline bool stActivityLog::has_activityname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stActivityLog::set_has_activityname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stActivityLog::clear_has_activityname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stActivityLog::clear_activityname() {
  if (activityname_ != &::google::protobuf::internal::kEmptyString) {
    activityname_->clear();
  }
  clear_has_activityname();
}
inline const ::std::string& stActivityLog::activityname() const {
  return *activityname_;
}
inline void stActivityLog::set_activityname(const ::std::string& value) {
  set_has_activityname();
  if (activityname_ == &::google::protobuf::internal::kEmptyString) {
    activityname_ = new ::std::string;
  }
  activityname_->assign(value);
}
inline void stActivityLog::set_activityname(const char* value) {
  set_has_activityname();
  if (activityname_ == &::google::protobuf::internal::kEmptyString) {
    activityname_ = new ::std::string;
  }
  activityname_->assign(value);
}
inline void stActivityLog::set_activityname(const char* value, size_t size) {
  set_has_activityname();
  if (activityname_ == &::google::protobuf::internal::kEmptyString) {
    activityname_ = new ::std::string;
  }
  activityname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stActivityLog::mutable_activityname() {
  set_has_activityname();
  if (activityname_ == &::google::protobuf::internal::kEmptyString) {
    activityname_ = new ::std::string;
  }
  return activityname_;
}
inline ::std::string* stActivityLog::release_activityname() {
  clear_has_activityname();
  if (activityname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = activityname_;
    activityname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stActivityLog::set_allocated_activityname(::std::string* activityname) {
  if (activityname_ != &::google::protobuf::internal::kEmptyString) {
    delete activityname_;
  }
  if (activityname) {
    set_has_activityname();
    activityname_ = activityname;
  } else {
    clear_has_activityname();
    activityname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 stepID = 4;
inline bool stActivityLog::has_stepid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stActivityLog::set_has_stepid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stActivityLog::clear_has_stepid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stActivityLog::clear_stepid() {
  stepid_ = 0u;
  clear_has_stepid();
}
inline ::google::protobuf::uint32 stActivityLog::stepid() const {
  return stepid_;
}
inline void stActivityLog::set_stepid(::google::protobuf::uint32 value) {
  set_has_stepid();
  stepid_ = value;
}

// optional string desc = 5;
inline bool stActivityLog::has_desc() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stActivityLog::set_has_desc() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stActivityLog::clear_has_desc() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stActivityLog::clear_desc() {
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    desc_->clear();
  }
  clear_has_desc();
}
inline const ::std::string& stActivityLog::desc() const {
  return *desc_;
}
inline void stActivityLog::set_desc(const ::std::string& value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
}
inline void stActivityLog::set_desc(const char* value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
}
inline void stActivityLog::set_desc(const char* value, size_t size) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stActivityLog::mutable_desc() {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  return desc_;
}
inline ::std::string* stActivityLog::release_desc() {
  clear_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = desc_;
    desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stActivityLog::set_allocated_desc(::std::string* desc) {
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    delete desc_;
  }
  if (desc) {
    set_has_desc();
    desc_ = desc;
  } else {
    clear_has_desc();
    desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// stUserCancel

// optional uint32 charID = 1;
inline bool stUserCancel::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stUserCancel::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stUserCancel::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stUserCancel::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stUserCancel::charid() const {
  return charid_;
}
inline void stUserCancel::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 type = 2;
inline bool stUserCancel::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stUserCancel::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stUserCancel::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stUserCancel::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 stUserCancel::type() const {
  return type_;
}
inline void stUserCancel::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// optional uint32 webConnID = 3;
inline bool stUserCancel::has_webconnid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stUserCancel::set_has_webconnid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stUserCancel::clear_has_webconnid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stUserCancel::clear_webconnid() {
  webconnid_ = 0u;
  clear_has_webconnid();
}
inline ::google::protobuf::uint32 stUserCancel::webconnid() const {
  return webconnid_;
}
inline void stUserCancel::set_webconnid(::google::protobuf::uint32 value) {
  set_has_webconnid();
  webconnid_ = value;
}

// -------------------------------------------------------------------

// stUserCancelRes

// optional string res = 1;
inline bool stUserCancelRes::has_res() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stUserCancelRes::set_has_res() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stUserCancelRes::clear_has_res() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stUserCancelRes::clear_res() {
  if (res_ != &::google::protobuf::internal::kEmptyString) {
    res_->clear();
  }
  clear_has_res();
}
inline const ::std::string& stUserCancelRes::res() const {
  return *res_;
}
inline void stUserCancelRes::set_res(const ::std::string& value) {
  set_has_res();
  if (res_ == &::google::protobuf::internal::kEmptyString) {
    res_ = new ::std::string;
  }
  res_->assign(value);
}
inline void stUserCancelRes::set_res(const char* value) {
  set_has_res();
  if (res_ == &::google::protobuf::internal::kEmptyString) {
    res_ = new ::std::string;
  }
  res_->assign(value);
}
inline void stUserCancelRes::set_res(const char* value, size_t size) {
  set_has_res();
  if (res_ == &::google::protobuf::internal::kEmptyString) {
    res_ = new ::std::string;
  }
  res_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stUserCancelRes::mutable_res() {
  set_has_res();
  if (res_ == &::google::protobuf::internal::kEmptyString) {
    res_ = new ::std::string;
  }
  return res_;
}
inline ::std::string* stUserCancelRes::release_res() {
  clear_has_res();
  if (res_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = res_;
    res_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stUserCancelRes::set_allocated_res(::std::string* res) {
  if (res_ != &::google::protobuf::internal::kEmptyString) {
    delete res_;
  }
  if (res) {
    set_has_res();
    res_ = res;
  } else {
    clear_has_res();
    res_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 webConnID = 2;
inline bool stUserCancelRes::has_webconnid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stUserCancelRes::set_has_webconnid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stUserCancelRes::clear_has_webconnid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stUserCancelRes::clear_webconnid() {
  webconnid_ = 0u;
  clear_has_webconnid();
}
inline ::google::protobuf::uint32 stUserCancelRes::webconnid() const {
  return webconnid_;
}
inline void stUserCancelRes::set_webconnid(::google::protobuf::uint32 value) {
  set_has_webconnid();
  webconnid_ = value;
}

// -------------------------------------------------------------------

// stReqPayType

// optional uint32 charID = 1;
inline bool stReqPayType::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqPayType::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqPayType::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqPayType::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqPayType::charid() const {
  return charid_;
}
inline void stReqPayType::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 itemId = 2;
inline bool stReqPayType::has_itemid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stReqPayType::set_has_itemid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stReqPayType::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stReqPayType::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 stReqPayType::itemid() const {
  return itemid_;
}
inline void stReqPayType::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
}

// optional string orderId = 3;
inline bool stReqPayType::has_orderid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stReqPayType::set_has_orderid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stReqPayType::clear_has_orderid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stReqPayType::clear_orderid() {
  if (orderid_ != &::google::protobuf::internal::kEmptyString) {
    orderid_->clear();
  }
  clear_has_orderid();
}
inline const ::std::string& stReqPayType::orderid() const {
  return *orderid_;
}
inline void stReqPayType::set_orderid(const ::std::string& value) {
  set_has_orderid();
  if (orderid_ == &::google::protobuf::internal::kEmptyString) {
    orderid_ = new ::std::string;
  }
  orderid_->assign(value);
}
inline void stReqPayType::set_orderid(const char* value) {
  set_has_orderid();
  if (orderid_ == &::google::protobuf::internal::kEmptyString) {
    orderid_ = new ::std::string;
  }
  orderid_->assign(value);
}
inline void stReqPayType::set_orderid(const char* value, size_t size) {
  set_has_orderid();
  if (orderid_ == &::google::protobuf::internal::kEmptyString) {
    orderid_ = new ::std::string;
  }
  orderid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stReqPayType::mutable_orderid() {
  set_has_orderid();
  if (orderid_ == &::google::protobuf::internal::kEmptyString) {
    orderid_ = new ::std::string;
  }
  return orderid_;
}
inline ::std::string* stReqPayType::release_orderid() {
  clear_has_orderid();
  if (orderid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = orderid_;
    orderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stReqPayType::set_allocated_orderid(::std::string* orderid) {
  if (orderid_ != &::google::protobuf::internal::kEmptyString) {
    delete orderid_;
  }
  if (orderid) {
    set_has_orderid();
    orderid_ = orderid;
  } else {
    clear_has_orderid();
    orderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string payType = 4;
inline bool stReqPayType::has_paytype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stReqPayType::set_has_paytype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stReqPayType::clear_has_paytype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stReqPayType::clear_paytype() {
  if (paytype_ != &::google::protobuf::internal::kEmptyString) {
    paytype_->clear();
  }
  clear_has_paytype();
}
inline const ::std::string& stReqPayType::paytype() const {
  return *paytype_;
}
inline void stReqPayType::set_paytype(const ::std::string& value) {
  set_has_paytype();
  if (paytype_ == &::google::protobuf::internal::kEmptyString) {
    paytype_ = new ::std::string;
  }
  paytype_->assign(value);
}
inline void stReqPayType::set_paytype(const char* value) {
  set_has_paytype();
  if (paytype_ == &::google::protobuf::internal::kEmptyString) {
    paytype_ = new ::std::string;
  }
  paytype_->assign(value);
}
inline void stReqPayType::set_paytype(const char* value, size_t size) {
  set_has_paytype();
  if (paytype_ == &::google::protobuf::internal::kEmptyString) {
    paytype_ = new ::std::string;
  }
  paytype_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stReqPayType::mutable_paytype() {
  set_has_paytype();
  if (paytype_ == &::google::protobuf::internal::kEmptyString) {
    paytype_ = new ::std::string;
  }
  return paytype_;
}
inline ::std::string* stReqPayType::release_paytype() {
  clear_has_paytype();
  if (paytype_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = paytype_;
    paytype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stReqPayType::set_allocated_paytype(::std::string* paytype) {
  if (paytype_ != &::google::protobuf::internal::kEmptyString) {
    delete paytype_;
  }
  if (paytype) {
    set_has_paytype();
    paytype_ = paytype;
  } else {
    clear_has_paytype();
    paytype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool isExtend = 5;
inline bool stReqPayType::has_isextend() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stReqPayType::set_has_isextend() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stReqPayType::clear_has_isextend() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stReqPayType::clear_isextend() {
  isextend_ = false;
  clear_has_isextend();
}
inline bool stReqPayType::isextend() const {
  return isextend_;
}
inline void stReqPayType::set_isextend(bool value) {
  set_has_isextend();
  isextend_ = value;
}

// optional string data = 6;
inline bool stReqPayType::has_data() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stReqPayType::set_has_data() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stReqPayType::clear_has_data() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stReqPayType::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& stReqPayType::data() const {
  return *data_;
}
inline void stReqPayType::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void stReqPayType::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void stReqPayType::set_data(const char* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stReqPayType::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* stReqPayType::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stReqPayType::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// stReqPayTypeCb

// optional uint32 charID = 1;
inline bool stReqPayTypeCb::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqPayTypeCb::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqPayTypeCb::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqPayTypeCb::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqPayTypeCb::charid() const {
  return charid_;
}
inline void stReqPayTypeCb::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 itemId = 2;
inline bool stReqPayTypeCb::has_itemid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stReqPayTypeCb::set_has_itemid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stReqPayTypeCb::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stReqPayTypeCb::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 stReqPayTypeCb::itemid() const {
  return itemid_;
}
inline void stReqPayTypeCb::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
}

// optional string orderId = 3;
inline bool stReqPayTypeCb::has_orderid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stReqPayTypeCb::set_has_orderid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stReqPayTypeCb::clear_has_orderid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stReqPayTypeCb::clear_orderid() {
  if (orderid_ != &::google::protobuf::internal::kEmptyString) {
    orderid_->clear();
  }
  clear_has_orderid();
}
inline const ::std::string& stReqPayTypeCb::orderid() const {
  return *orderid_;
}
inline void stReqPayTypeCb::set_orderid(const ::std::string& value) {
  set_has_orderid();
  if (orderid_ == &::google::protobuf::internal::kEmptyString) {
    orderid_ = new ::std::string;
  }
  orderid_->assign(value);
}
inline void stReqPayTypeCb::set_orderid(const char* value) {
  set_has_orderid();
  if (orderid_ == &::google::protobuf::internal::kEmptyString) {
    orderid_ = new ::std::string;
  }
  orderid_->assign(value);
}
inline void stReqPayTypeCb::set_orderid(const char* value, size_t size) {
  set_has_orderid();
  if (orderid_ == &::google::protobuf::internal::kEmptyString) {
    orderid_ = new ::std::string;
  }
  orderid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stReqPayTypeCb::mutable_orderid() {
  set_has_orderid();
  if (orderid_ == &::google::protobuf::internal::kEmptyString) {
    orderid_ = new ::std::string;
  }
  return orderid_;
}
inline ::std::string* stReqPayTypeCb::release_orderid() {
  clear_has_orderid();
  if (orderid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = orderid_;
    orderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stReqPayTypeCb::set_allocated_orderid(::std::string* orderid) {
  if (orderid_ != &::google::protobuf::internal::kEmptyString) {
    delete orderid_;
  }
  if (orderid) {
    set_has_orderid();
    orderid_ = orderid;
  } else {
    clear_has_orderid();
    orderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string payType = 4;
inline bool stReqPayTypeCb::has_paytype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stReqPayTypeCb::set_has_paytype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stReqPayTypeCb::clear_has_paytype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stReqPayTypeCb::clear_paytype() {
  if (paytype_ != &::google::protobuf::internal::kEmptyString) {
    paytype_->clear();
  }
  clear_has_paytype();
}
inline const ::std::string& stReqPayTypeCb::paytype() const {
  return *paytype_;
}
inline void stReqPayTypeCb::set_paytype(const ::std::string& value) {
  set_has_paytype();
  if (paytype_ == &::google::protobuf::internal::kEmptyString) {
    paytype_ = new ::std::string;
  }
  paytype_->assign(value);
}
inline void stReqPayTypeCb::set_paytype(const char* value) {
  set_has_paytype();
  if (paytype_ == &::google::protobuf::internal::kEmptyString) {
    paytype_ = new ::std::string;
  }
  paytype_->assign(value);
}
inline void stReqPayTypeCb::set_paytype(const char* value, size_t size) {
  set_has_paytype();
  if (paytype_ == &::google::protobuf::internal::kEmptyString) {
    paytype_ = new ::std::string;
  }
  paytype_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stReqPayTypeCb::mutable_paytype() {
  set_has_paytype();
  if (paytype_ == &::google::protobuf::internal::kEmptyString) {
    paytype_ = new ::std::string;
  }
  return paytype_;
}
inline ::std::string* stReqPayTypeCb::release_paytype() {
  clear_has_paytype();
  if (paytype_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = paytype_;
    paytype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stReqPayTypeCb::set_allocated_paytype(::std::string* paytype) {
  if (paytype_ != &::google::protobuf::internal::kEmptyString) {
    delete paytype_;
  }
  if (paytype) {
    set_has_paytype();
    paytype_ = paytype;
  } else {
    clear_has_paytype();
    paytype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool res = 5;
inline bool stReqPayTypeCb::has_res() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stReqPayTypeCb::set_has_res() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stReqPayTypeCb::clear_has_res() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stReqPayTypeCb::clear_res() {
  res_ = false;
  clear_has_res();
}
inline bool stReqPayTypeCb::res() const {
  return res_;
}
inline void stReqPayTypeCb::set_res(bool value) {
  set_has_res();
  res_ = value;
}

// -------------------------------------------------------------------

// stUpdateSvrOpenTime

// optional uint32 time = 1;
inline bool stUpdateSvrOpenTime::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stUpdateSvrOpenTime::set_has_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stUpdateSvrOpenTime::clear_has_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stUpdateSvrOpenTime::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 stUpdateSvrOpenTime::time() const {
  return time_;
}
inline void stUpdateSvrOpenTime::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
}

// -------------------------------------------------------------------

// stAcitivityLimitPetItem

// optional uint32 id = 1;
inline bool stAcitivityLimitPetItem::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stAcitivityLimitPetItem::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stAcitivityLimitPetItem::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stAcitivityLimitPetItem::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 stAcitivityLimitPetItem::id() const {
  return id_;
}
inline void stAcitivityLimitPetItem::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional uint32 activiyId = 2;
inline bool stAcitivityLimitPetItem::has_activiyid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stAcitivityLimitPetItem::set_has_activiyid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stAcitivityLimitPetItem::clear_has_activiyid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stAcitivityLimitPetItem::clear_activiyid() {
  activiyid_ = 0u;
  clear_has_activiyid();
}
inline ::google::protobuf::uint32 stAcitivityLimitPetItem::activiyid() const {
  return activiyid_;
}
inline void stAcitivityLimitPetItem::set_activiyid(::google::protobuf::uint32 value) {
  set_has_activiyid();
  activiyid_ = value;
}

// optional uint32 startTime = 3;
inline bool stAcitivityLimitPetItem::has_starttime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stAcitivityLimitPetItem::set_has_starttime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stAcitivityLimitPetItem::clear_has_starttime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stAcitivityLimitPetItem::clear_starttime() {
  starttime_ = 0u;
  clear_has_starttime();
}
inline ::google::protobuf::uint32 stAcitivityLimitPetItem::starttime() const {
  return starttime_;
}
inline void stAcitivityLimitPetItem::set_starttime(::google::protobuf::uint32 value) {
  set_has_starttime();
  starttime_ = value;
}

// optional uint32 endTime = 4;
inline bool stAcitivityLimitPetItem::has_endtime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stAcitivityLimitPetItem::set_has_endtime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stAcitivityLimitPetItem::clear_has_endtime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stAcitivityLimitPetItem::clear_endtime() {
  endtime_ = 0u;
  clear_has_endtime();
}
inline ::google::protobuf::uint32 stAcitivityLimitPetItem::endtime() const {
  return endtime_;
}
inline void stAcitivityLimitPetItem::set_endtime(::google::protobuf::uint32 value) {
  set_has_endtime();
  endtime_ = value;
}

// -------------------------------------------------------------------

// stSendLimitPetActivityData

// optional string msg = 1;
inline bool stSendLimitPetActivityData::has_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSendLimitPetActivityData::set_has_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSendLimitPetActivityData::clear_has_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSendLimitPetActivityData::clear_msg() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& stSendLimitPetActivityData::msg() const {
  return *msg_;
}
inline void stSendLimitPetActivityData::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void stSendLimitPetActivityData::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void stSendLimitPetActivityData::set_msg(const char* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stSendLimitPetActivityData::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  return msg_;
}
inline ::std::string* stSendLimitPetActivityData::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stSendLimitPetActivityData::set_allocated_msg(::std::string* msg) {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (msg) {
    set_has_msg();
    msg_ = msg;
  } else {
    clear_has_msg();
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .Game.stAcitivityLimitPetItem item = 2;
inline int stSendLimitPetActivityData::item_size() const {
  return item_.size();
}
inline void stSendLimitPetActivityData::clear_item() {
  item_.Clear();
}
inline const ::Game::stAcitivityLimitPetItem& stSendLimitPetActivityData::item(int index) const {
  return item_.Get(index);
}
inline ::Game::stAcitivityLimitPetItem* stSendLimitPetActivityData::mutable_item(int index) {
  return item_.Mutable(index);
}
inline ::Game::stAcitivityLimitPetItem* stSendLimitPetActivityData::add_item() {
  return item_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Game::stAcitivityLimitPetItem >&
stSendLimitPetActivityData::item() const {
  return item_;
}
inline ::google::protobuf::RepeatedPtrField< ::Game::stAcitivityLimitPetItem >*
stSendLimitPetActivityData::mutable_item() {
  return &item_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Game

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Game::stLoginGame_ProtoModID>() {
  return ::Game::stLoginGame_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Game::stLoginGame_ProtoFunID>() {
  return ::Game::stLoginGame_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Game::stGateForwardGame_ProtoModID>() {
  return ::Game::stGateForwardGame_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Game::stGateForwardGame_ProtoFunID>() {
  return ::Game::stGateForwardGame_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Game::stGameForwardGate_ProtoModID>() {
  return ::Game::stGameForwardGate_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Game::stGameForwardGate_ProtoFunID>() {
  return ::Game::stGameForwardGate_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Game::stKillOutUser_ProtoModID>() {
  return ::Game::stKillOutUser_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Game::stKillOutUser_ProtoFunID>() {
  return ::Game::stKillOutUser_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Game::stBroadbastProto2World_ProtoModID>() {
  return ::Game::stBroadbastProto2World_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Game::stBroadbastProto2World_ProtoFunID>() {
  return ::Game::stBroadbastProto2World_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Game::stUserLoginGameResult_ProtoModID>() {
  return ::Game::stUserLoginGameResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Game::stUserLoginGameResult_ProtoFunID>() {
  return ::Game::stUserLoginGameResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Game::stBroadcastProto2UserList_ProtoModID>() {
  return ::Game::stBroadcastProto2UserList_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Game::stBroadcastProto2UserList_ProtoFunID>() {
  return ::Game::stBroadcastProto2UserList_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Game::stNotifyLevelUp_ProtoModID>() {
  return ::Game::stNotifyLevelUp_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Game::stNotifyLevelUp_ProtoFunID>() {
  return ::Game::stNotifyLevelUp_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Game::stUserLevelupLog_ProtoModID>() {
  return ::Game::stUserLevelupLog_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Game::stUserLevelupLog_ProtoFunID>() {
  return ::Game::stUserLevelupLog_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Game::stUserLoginLog_ProtoModID>() {
  return ::Game::stUserLoginLog_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Game::stUserLoginLog_ProtoFunID>() {
  return ::Game::stUserLoginLog_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Game::stVipLevelupLog_ProtoModID>() {
  return ::Game::stVipLevelupLog_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Game::stVipLevelupLog_ProtoFunID>() {
  return ::Game::stVipLevelupLog_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Game::stHonourChgLog_ProtoModID>() {
  return ::Game::stHonourChgLog_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Game::stHonourChgLog_ProtoFunID>() {
  return ::Game::stHonourChgLog_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Game::stItemChgLog_ProtoModID>() {
  return ::Game::stItemChgLog_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Game::stItemChgLog_ProtoFunID>() {
  return ::Game::stItemChgLog_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Game::stResourceChgLog_ProtoModID>() {
  return ::Game::stResourceChgLog_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Game::stResourceChgLog_ProtoFunID>() {
  return ::Game::stResourceChgLog_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Game::stDailyTaskLog_ProtoModID>() {
  return ::Game::stDailyTaskLog_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Game::stDailyTaskLog_ProtoFunID>() {
  return ::Game::stDailyTaskLog_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Game::stRechargeLog_ProtoModID>() {
  return ::Game::stRechargeLog_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Game::stRechargeLog_ProtoFunID>() {
  return ::Game::stRechargeLog_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Game::stPublishActivity_ProtoModID>() {
  return ::Game::stPublishActivity_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Game::stPublishActivity_ProtoFunID>() {
  return ::Game::stPublishActivity_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Game::stPublishActivityResult_ProtoModID>() {
  return ::Game::stPublishActivityResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Game::stPublishActivityResult_ProtoFunID>() {
  return ::Game::stPublishActivityResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Game::stUnloadActivity_ProtoModID>() {
  return ::Game::stUnloadActivity_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Game::stUnloadActivity_ProtoFunID>() {
  return ::Game::stUnloadActivity_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Game::stUnloadActivityResult_ProtoModID>() {
  return ::Game::stUnloadActivityResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Game::stUnloadActivityResult_ProtoFunID>() {
  return ::Game::stUnloadActivityResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Game::stMallBuyLog_ProtoModID>() {
  return ::Game::stMallBuyLog_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Game::stMallBuyLog_ProtoFunID>() {
  return ::Game::stMallBuyLog_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Game::stHeroPropChgLog_ProtoModID>() {
  return ::Game::stHeroPropChgLog_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Game::stHeroPropChgLog_ProtoFunID>() {
  return ::Game::stHeroPropChgLog_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Game::stSendGuildLog_ProtoModID>() {
  return ::Game::stSendGuildLog_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Game::stSendGuildLog_ProtoFunID>() {
  return ::Game::stSendGuildLog_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Game::sstSendGuildResLog_ProtoModID>() {
  return ::Game::sstSendGuildResLog_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Game::sstSendGuildResLog_ProtoFunID>() {
  return ::Game::sstSendGuildResLog_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Game::stSendModuleLog_ProtoModID>() {
  return ::Game::stSendModuleLog_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Game::stSendModuleLog_ProtoFunID>() {
  return ::Game::stSendModuleLog_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Game::stSkillChgLog_ProtoModID>() {
  return ::Game::stSkillChgLog_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Game::stSkillChgLog_ProtoFunID>() {
  return ::Game::stSkillChgLog_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Game::stSpriteLog_ProtoModID>() {
  return ::Game::stSpriteLog_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Game::stSpriteLog_ProtoFunID>() {
  return ::Game::stSpriteLog_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Game::stCopymapLog_ProtoModID>() {
  return ::Game::stCopymapLog_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Game::stCopymapLog_ProtoFunID>() {
  return ::Game::stCopymapLog_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Game::stEquipChgLog_ProtoModID>() {
  return ::Game::stEquipChgLog_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Game::stEquipChgLog_ProtoFunID>() {
  return ::Game::stEquipChgLog_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Game::stActivityLog_ProtoModID>() {
  return ::Game::stActivityLog_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Game::stActivityLog_ProtoFunID>() {
  return ::Game::stActivityLog_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Game::stUserCancel_CancelType>() {
  return ::Game::stUserCancel_CancelType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Game::stUserCancel_ProtoModID>() {
  return ::Game::stUserCancel_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Game::stUserCancel_ProtoFunID>() {
  return ::Game::stUserCancel_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Game::stUserCancelRes_ProtoModID>() {
  return ::Game::stUserCancelRes_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Game::stUserCancelRes_ProtoFunID>() {
  return ::Game::stUserCancelRes_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Game::stReqPayType_ProtoModID>() {
  return ::Game::stReqPayType_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Game::stReqPayType_ProtoFunID>() {
  return ::Game::stReqPayType_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Game::stReqPayTypeCb_ProtoModID>() {
  return ::Game::stReqPayTypeCb_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Game::stReqPayTypeCb_ProtoFunID>() {
  return ::Game::stReqPayTypeCb_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Game::stUpdateSvrOpenTime_ProtoModID>() {
  return ::Game::stUpdateSvrOpenTime_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Game::stUpdateSvrOpenTime_ProtoFunID>() {
  return ::Game::stUpdateSvrOpenTime_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Game::stSendLimitPetActivityData_ProtoModID>() {
  return ::Game::stSendLimitPetActivityData_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Game::stSendLimitPetActivityData_ProtoFunID>() {
  return ::Game::stSendLimitPetActivityData_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Game::GameModID>() {
  return ::Game::GameModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Game::eLoginGameResultType>() {
  return ::Game::eLoginGameResultType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Game_2eproto__INCLUDED
